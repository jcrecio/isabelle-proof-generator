{"file_name": "/home/qj213/afp-2021-10-22/thys/Taylor_Models/Polynomial_Expression_Additional.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Taylor_Models", "problem_names": ["lemma real_of_float_eq_zero_iff[simp]: \"real_of_float x = 0 \\<longleftrightarrow> x = 0\"", "lemma map_poly_homo_polyadd_eq_zero_iff:\n  \"map_poly f (p +\\<^sub>p q) = 0\\<^sub>p \\<longleftrightarrow> p +\\<^sub>p q = 0\\<^sub>p\"\n  if [symmetric, simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\"", "lemma zero_iffD: \"(\\<And>x. f x = 0 \\<longleftrightarrow> x = 0) \\<Longrightarrow> f 0 = 0\"", "lemma map_poly_homo_polyadd:\n  \"map_poly f (p1 +\\<^sub>p p2) = map_poly f p1 +\\<^sub>p map_poly f p2\"\n  if [simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\"", "lemma map_poly_homo_polyneg:\n  \"map_poly f (~\\<^sub>p p1) = ~\\<^sub>p (map_poly f p1)\"\n  if [simp]: \"\\<And>x y. f (- x) = - f x\"", "lemma map_poly_homo_polysub:\n  \"map_poly f (p1 -\\<^sub>p p2) = map_poly f p1 -\\<^sub>p map_poly f p2\"\n  if [simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\" \"\\<And>x y. f (- x) = - f x\"", "lemma map_poly_homo_polymul:\n  \"map_poly f (p1 *\\<^sub>p p2) = map_poly f p1 *\\<^sub>p map_poly f p2\"\n  if [simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\" \"\\<And>x y. f (x * y) = f x * f y\"", "lemma map_poly_homo_polypow:\n  \"map_poly f (p1 ^\\<^sub>p n) = map_poly f p1 ^\\<^sub>p n\"\n  if [simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\" \"\\<And>x y. f (x * y) = f x * f y\"\n    \"f 1 = 1\"", "lemmas map_poly_homo_polyarith = map_poly_homo_polyadd map_poly_homo_polyneg map_poly_homo_polysub map_poly_homo_polymul map_poly_homo_polypow", "lemma num_params_map_poly[simp]:\n  shows \"num_params (map_poly f p) = num_params p\"", "lemma num_params_polyadd:\n  shows \"num_params (p1 +\\<^sub>p p2) \\<le> max (num_params p1) (num_params p2)\"", "lemma num_params_polyneg:\n  shows \"num_params (~\\<^sub>p p) = num_params p\"", "lemma num_params_polymul:\n  shows \"num_params (p1 *\\<^sub>p p2) \\<le> max (num_params p1) (num_params p2)\"", "lemma num_params_polypow:\n  shows \"num_params (p ^\\<^sub>p n) \\<le> num_params p\"", "lemma num_params_polynate:\n  shows \"num_params (polynate p) \\<le> num_params p\"", "lemma polynate_map_poly_real[simp]:\n  fixes p :: \"float poly\"\n  shows \"map_poly real_of_float (polynate p) = polynate (map_poly real_of_float p)\"", "lemma Ipoly_real_float_eqiv:\n  fixes p::\"float poly\" and xs::\"float list\"\n  assumes \"num_params p \\<le> length xs\"\n  shows \"Ipoly xs (p::real poly) = Ipoly xs p\"", "lemma Ipoly_interval_args_mono:\n  fixes p::\"'a::linordered_idom poly\"\n    and   x::\"'a list\"\n    and   xs::\"'a interval list\"\n  assumes \"x all_in\\<^sub>i xs\"\n  assumes \"num_params p \\<le> length xs\"\n  shows \"Ipoly x p \\<in> set_of (Ipoly xs (map_poly interval_of p))\"", "lemma Ipoly_interval_args_inc_mono:\n  fixes p::\"'a::{real_normed_algebra, linear_continuum_topology, linordered_idom} poly\"\n    and   I::\"'a interval list\" and J::\"'a interval list\"\n  assumes \"num_params p \\<le> length I\"\n  assumes \"I all_subset J\"\n  shows \"set_of (Ipoly I (map_poly interval_of p)) \\<subseteq> set_of (Ipoly J (map_poly interval_of p))\"", "lemma split_by_prec_correct:\n  fixes args :: \"real list\"\n  assumes \"(l, r) = split_by_prec prec p\"\n  shows \"Ipoly args p = Ipoly args l + Ipoly args r\" (is ?P1)\n    and   \"num_params l \\<le> num_params p\" (is ?P2)\n    and   \"num_params r \\<le> num_params p\" (is ?P3)", "lemma split_by_degree_correct:\n  fixes x :: \"real list\" and p :: \"float poly\"\n  assumes \"(l, r) = split_by_degree ord p\"\n  shows \"maxdegree l \\<le> ord\" (is ?P1)\n    and   \"Ipoly x p = Ipoly x l + Ipoly x r\" (is ?P2)\n    and   \"num_params l \\<le> num_params p\" (is ?P3)\n    and   \"num_params r \\<le> num_params p\" (is ?P4)", "lemma length_map2[simp]: \"length (map2 f a b) = min (length a) (length b)\"", "lemma map2_nth[simp]:\n  assumes \"n < length a\"\n  assumes \"n < length b\"\n  shows \"(map2 f a b)!n = f (a!n) (b!n)\"", "lemma poly_translate_correct:\n  assumes \"num_params p \\<le> length x\"\n  assumes \"length x = length v\"\n  shows \"Ipoly x (poly_translate v p) = Ipoly (map2 (+) x v) p\"", "lemma real_poly_translate: \n  assumes \"num_params p \\<le> length v\"\n  shows \"Ipoly x (map_poly real_of_float (poly_translate v p)) = Ipoly x (poly_translate v (map_poly real_of_float p))\"", "lemma num_params_poly_translate[simp]:\n  shows \"num_params (poly_translate v p) = num_params p\""], "translations": [["", "lemma real_of_float_eq_zero_iff[simp]: \"real_of_float x = 0 \\<longleftrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (real_of_float x = 0) = (x = 0)", "by (simp add: real_of_float_eq)"], ["", "text \\<open>Theory @{theory Taylor_Models.Polynomial_Expression} contains a, more or less, 1:1 generalization\n   of theory \\<open>Multivariate_Polynomial\\<close>. Any additions belong here.\\<close>"], ["", "declare [[coercion_map map_poly]]"], ["", "declare [[coercion \"interval_of::float\\<Rightarrow>float interval\"]]"], ["", "text \\<open>Apply float interval arguments to a float poly.\\<close>"], ["", "value \"Ipoly [Ivl (Float 4 (-6)) (Float 10 6)] (poly.Add (poly.C (Float 3 5)) (poly.Bound 0))\""], ["", "text \\<open>@{term map_poly} for homomorphisms\\<close>"], ["", "lemma map_poly_homo_polyadd_eq_zero_iff:\n  \"map_poly f (p +\\<^sub>p q) = 0\\<^sub>p \\<longleftrightarrow> p +\\<^sub>p q = 0\\<^sub>p\"\n  if [symmetric, simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_poly f (p +\\<^sub>p q) = 0\\<^sub>p) = (p +\\<^sub>p q = 0\\<^sub>p)", "by (induction p q rule: polyadd.induct) auto"], ["", "lemma zero_iffD: \"(\\<And>x. f x = 0 \\<longleftrightarrow> x = 0) \\<Longrightarrow> f 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. (f x = (0::'b)) = (x = (0::'a))) \\<Longrightarrow>\n    f (0::'a) = (0::'b)", "by auto"], ["", "lemma map_poly_homo_polyadd:\n  \"map_poly f (p1 +\\<^sub>p p2) = map_poly f p1 +\\<^sub>p map_poly f p2\"\n  if [simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly f (p1 +\\<^sub>p p2) = map_poly f p1 +\\<^sub>p map_poly f p2", "by (induction p1 p2 rule: polyadd.induct)\n    (auto simp: zero_iffD[OF that(2)] Let_def map_poly_homo_polyadd_eq_zero_iff)"], ["", "lemma map_poly_homo_polyneg:\n  \"map_poly f (~\\<^sub>p p1) = ~\\<^sub>p (map_poly f p1)\"\n  if [simp]: \"\\<And>x y. f (- x) = - f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly f (~\\<^sub>p p1) = ~\\<^sub>p (map_poly f p1)", "by (induction p1) (auto simp: Let_def map_poly_homo_polyadd_eq_zero_iff)"], ["", "lemma map_poly_homo_polysub:\n  \"map_poly f (p1 -\\<^sub>p p2) = map_poly f p1 -\\<^sub>p map_poly f p2\"\n  if [simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\" \"\\<And>x y. f (- x) = - f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly f (p1 -\\<^sub>p p2) = map_poly f p1 -\\<^sub>p map_poly f p2", "by (auto simp: polysub_def map_poly_homo_polyadd map_poly_homo_polyneg)"], ["", "lemma map_poly_homo_polymul:\n  \"map_poly f (p1 *\\<^sub>p p2) = map_poly f p1 *\\<^sub>p map_poly f p2\"\n  if [simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\" \"\\<And>x y. f (x * y) = f x * f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly f (p1 *\\<^sub>p p2) = map_poly f p1 *\\<^sub>p map_poly f p2", "by (induction p1 p2 rule: polymul.induct)\n    (auto simp: zero_iffD[OF that(2)] map_poly_homo_polyadd)"], ["", "lemma map_poly_homo_polypow:\n  \"map_poly f (p1 ^\\<^sub>p n) = map_poly f p1 ^\\<^sub>p n\"\n  if [simp]: \"\\<And>x y. f (x + y) = f x + f y\" \"\\<And>x. f x = 0 \\<longleftrightarrow> x = 0\" \"\\<And>x y. f (x * y) = f x * f y\"\n    \"f 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly f (p1 ^\\<^sub>p n) = map_poly f p1 ^\\<^sub>p n", "proof(induction n rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          map_poly f (p1 ^\\<^sub>p m) =\n          map_poly f p1 ^\\<^sub>p m \\<Longrightarrow>\n       map_poly f (p1 ^\\<^sub>p n) = map_poly f p1 ^\\<^sub>p n", "case (1 n)"], ["proof (state)\nthis:\n  \\<forall>m<n. map_poly f (p1 ^\\<^sub>p m) = map_poly f p1 ^\\<^sub>p m\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          map_poly f (p1 ^\\<^sub>p m) =\n          map_poly f p1 ^\\<^sub>p m \\<Longrightarrow>\n       map_poly f (p1 ^\\<^sub>p n) = map_poly f p1 ^\\<^sub>p n", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n. map_poly f (p1 ^\\<^sub>p m) = map_poly f p1 ^\\<^sub>p m", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>m<n. map_poly f (p1 ^\\<^sub>p m) = map_poly f p1 ^\\<^sub>p m\n\ngoal (1 subgoal):\n 1. map_poly f (p1 ^\\<^sub>p n) = map_poly f p1 ^\\<^sub>p n", "apply (cases n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>m<n.\n                map_poly f (p1 ^\\<^sub>p m) = map_poly f p1 ^\\<^sub>p m;\n     n = 0\\<rbrakk>\n    \\<Longrightarrow> map_poly f (p1 ^\\<^sub>p n) =\n                      map_poly f p1 ^\\<^sub>p n\n 2. \\<And>nat.\n       \\<lbrakk>\\<forall>m<n.\n                   map_poly f (p1 ^\\<^sub>p m) = map_poly f p1 ^\\<^sub>p m;\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> map_poly f (p1 ^\\<^sub>p n) =\n                         map_poly f p1 ^\\<^sub>p n", "apply (auto simp: map_poly_homo_polyadd map_poly_homo_polymul)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>\\<forall>m<Suc nat.\n                   map_poly f (p1 ^\\<^sub>p m) = map_poly f p1 ^\\<^sub>p m;\n        n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> map_poly f\n                          (let q = p1 ^\\<^sub>p Suc nat div 2;\n                               d = q *\\<^sub>p q\n                           in if odd nat then d else p1 *\\<^sub>p d) =\n                         (let q = map_poly f p1 ^\\<^sub>p Suc nat div 2;\n                              d = q *\\<^sub>p q\n                          in if odd nat then d\n                             else map_poly f p1 *\\<^sub>p d)", "by (smt Suc_less_eq div2_less_self even_Suc odd_Suc_div_two map_poly_homo_polymul that)"], ["proof (state)\nthis:\n  map_poly f (p1 ^\\<^sub>p n) = map_poly f p1 ^\\<^sub>p n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas map_poly_homo_polyarith = map_poly_homo_polyadd map_poly_homo_polyneg map_poly_homo_polysub map_poly_homo_polymul map_poly_homo_polypow"], ["", "text \\<open>Count the number of parameters of a polynomial.\\<close>"], ["", "fun num_params :: \"'a poly \\<Rightarrow> nat\"\n  where \"num_params (poly.C c) = 0\"\n  | \"num_params (poly.Bound n)  = Suc n\"\n  | \"num_params (poly.Add a b)  = max (num_params a) (num_params b)\"\n  | \"num_params (poly.Sub a b)  = max (num_params a) (num_params b)\"\n  | \"num_params (poly.Mul a b)  = max (num_params a) (num_params b)\"\n  | \"num_params (poly.Neg a)    = num_params a\"\n  | \"num_params (poly.Pw a n)   = num_params a\"\n  | \"num_params (poly.CN a n b) = max (max (num_params a) (num_params b)) (Suc n)\""], ["", "lemma num_params_map_poly[simp]:\n  shows \"num_params (map_poly f p) = num_params p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_params (map_poly f p) = num_params p", "by (induction p, simp_all)"], ["", "lemma num_params_polyadd:\n  shows \"num_params (p1 +\\<^sub>p p2) \\<le> max (num_params p1) (num_params p2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_params (p1 +\\<^sub>p p2) \\<le> max (num_params p1) (num_params p2)", "proof (induction p1 p2 rule: polyadd.induct)"], ["proof (state)\ngoal (28 subgoals):\n 1. \\<And>c c'.\n       num_params ((c)\\<^sub>p +\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params (c)\\<^sub>p) (num_params (c')\\<^sub>p)\n 2. \\<And>c c' n' p'.\n       num_params ((c)\\<^sub>p +\\<^sub>p c')\n       \\<le> max (num_params (c)\\<^sub>p) (num_params c') \\<Longrightarrow>\n       num_params ((c)\\<^sub>p +\\<^sub>p CN c' n' p')\n       \\<le> max (num_params (c)\\<^sub>p) (num_params (CN c' n' p'))\n 3. \\<And>c n p c'.\n       num_params (c +\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params c) (num_params (c')\\<^sub>p) \\<Longrightarrow>\n       num_params (CN c n p +\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params (CN c n p)) (num_params (c')\\<^sub>p)\n 4. \\<And>c n p c' n' p'.\n       \\<lbrakk>num_params (c +\\<^sub>p CN c' n' p')\n                \\<le> max (num_params c) (num_params (CN c' n' p'));\n        num_params (CN c n p +\\<^sub>p c')\n        \\<le> max (num_params (CN c n p)) (num_params c');\n        num_params (c +\\<^sub>p c')\n        \\<le> max (num_params c) (num_params c');\n        \\<And>x.\n           num_params (p +\\<^sub>p p')\n           \\<le> max (num_params p) (num_params p')\\<rbrakk>\n       \\<Longrightarrow> num_params (CN c n p +\\<^sub>p CN c' n' p')\n                         \\<le> max (num_params (CN c n p))\n                                (num_params (CN c' n' p'))\n 5. \\<And>v b.\n       num_params (poly.Bound v +\\<^sub>p b)\n       \\<le> max (num_params (poly.Bound v)) (num_params b)\n 6. \\<And>v va b.\n       num_params (Add v va +\\<^sub>p b)\n       \\<le> max (num_params (Add v va)) (num_params b)\n 7. \\<And>v va b.\n       num_params (Sub v va +\\<^sub>p b)\n       \\<le> max (num_params (Sub v va)) (num_params b)\n 8. \\<And>v va b.\n       num_params (Mul v va +\\<^sub>p b)\n       \\<le> max (num_params (Mul v va)) (num_params b)\n 9. \\<And>v b.\n       num_params (Neg v +\\<^sub>p b)\n       \\<le> max (num_params (Neg v)) (num_params b)\n 10. \\<And>v va b.\n        num_params (Pw v va +\\<^sub>p b)\n        \\<le> max (num_params (Pw v va)) (num_params b)\nA total of 28 subgoals...", "case (4 c n p c' n' p')"], ["proof (state)\nthis:\n  num_params (c +\\<^sub>p CN c' n' p')\n  \\<le> max (num_params c) (num_params (CN c' n' p'))\n  num_params (CN c n p +\\<^sub>p c')\n  \\<le> max (num_params (CN c n p)) (num_params c')\n  num_params (c +\\<^sub>p c') \\<le> max (num_params c) (num_params c')\n  num_params (p +\\<^sub>p p') \\<le> max (num_params p) (num_params p')\n\ngoal (28 subgoals):\n 1. \\<And>c c'.\n       num_params ((c)\\<^sub>p +\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params (c)\\<^sub>p) (num_params (c')\\<^sub>p)\n 2. \\<And>c c' n' p'.\n       num_params ((c)\\<^sub>p +\\<^sub>p c')\n       \\<le> max (num_params (c)\\<^sub>p) (num_params c') \\<Longrightarrow>\n       num_params ((c)\\<^sub>p +\\<^sub>p CN c' n' p')\n       \\<le> max (num_params (c)\\<^sub>p) (num_params (CN c' n' p'))\n 3. \\<And>c n p c'.\n       num_params (c +\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params c) (num_params (c')\\<^sub>p) \\<Longrightarrow>\n       num_params (CN c n p +\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params (CN c n p)) (num_params (c')\\<^sub>p)\n 4. \\<And>c n p c' n' p'.\n       \\<lbrakk>num_params (c +\\<^sub>p CN c' n' p')\n                \\<le> max (num_params c) (num_params (CN c' n' p'));\n        num_params (CN c n p +\\<^sub>p c')\n        \\<le> max (num_params (CN c n p)) (num_params c');\n        num_params (c +\\<^sub>p c')\n        \\<le> max (num_params c) (num_params c');\n        \\<And>x.\n           num_params (p +\\<^sub>p p')\n           \\<le> max (num_params p) (num_params p')\\<rbrakk>\n       \\<Longrightarrow> num_params (CN c n p +\\<^sub>p CN c' n' p')\n                         \\<le> max (num_params (CN c n p))\n                                (num_params (CN c' n' p'))\n 5. \\<And>v b.\n       num_params (poly.Bound v +\\<^sub>p b)\n       \\<le> max (num_params (poly.Bound v)) (num_params b)\n 6. \\<And>v va b.\n       num_params (Add v va +\\<^sub>p b)\n       \\<le> max (num_params (Add v va)) (num_params b)\n 7. \\<And>v va b.\n       num_params (Sub v va +\\<^sub>p b)\n       \\<le> max (num_params (Sub v va)) (num_params b)\n 8. \\<And>v va b.\n       num_params (Mul v va +\\<^sub>p b)\n       \\<le> max (num_params (Mul v va)) (num_params b)\n 9. \\<And>v b.\n       num_params (Neg v +\\<^sub>p b)\n       \\<le> max (num_params (Neg v)) (num_params b)\n 10. \\<And>v va b.\n        num_params (Pw v va +\\<^sub>p b)\n        \\<le> max (num_params (Pw v va)) (num_params b)\nA total of 28 subgoals...", "then"], ["proof (chain)\npicking this:\n  num_params (c +\\<^sub>p CN c' n' p')\n  \\<le> max (num_params c) (num_params (CN c' n' p'))\n  num_params (CN c n p +\\<^sub>p c')\n  \\<le> max (num_params (CN c n p)) (num_params c')\n  num_params (c +\\<^sub>p c') \\<le> max (num_params c) (num_params c')\n  num_params (p +\\<^sub>p p') \\<le> max (num_params p) (num_params p')", "show ?case"], ["proof (prove)\nusing this:\n  num_params (c +\\<^sub>p CN c' n' p')\n  \\<le> max (num_params c) (num_params (CN c' n' p'))\n  num_params (CN c n p +\\<^sub>p c')\n  \\<le> max (num_params (CN c n p)) (num_params c')\n  num_params (c +\\<^sub>p c') \\<le> max (num_params c) (num_params c')\n  num_params (p +\\<^sub>p p') \\<le> max (num_params p) (num_params p')\n\ngoal (1 subgoal):\n 1. num_params (CN c n p +\\<^sub>p CN c' n' p')\n    \\<le> max (num_params (CN c n p)) (num_params (CN c' n' p'))", "by auto (auto simp: max_def Let_def split: if_splits)"], ["proof (state)\nthis:\n  num_params (CN c n p +\\<^sub>p CN c' n' p')\n  \\<le> max (num_params (CN c n p)) (num_params (CN c' n' p'))\n\ngoal (27 subgoals):\n 1. \\<And>c c'.\n       num_params ((c)\\<^sub>p +\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params (c)\\<^sub>p) (num_params (c')\\<^sub>p)\n 2. \\<And>c c' n' p'.\n       num_params ((c)\\<^sub>p +\\<^sub>p c')\n       \\<le> max (num_params (c)\\<^sub>p) (num_params c') \\<Longrightarrow>\n       num_params ((c)\\<^sub>p +\\<^sub>p CN c' n' p')\n       \\<le> max (num_params (c)\\<^sub>p) (num_params (CN c' n' p'))\n 3. \\<And>c n p c'.\n       num_params (c +\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params c) (num_params (c')\\<^sub>p) \\<Longrightarrow>\n       num_params (CN c n p +\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params (CN c n p)) (num_params (c')\\<^sub>p)\n 4. \\<And>v b.\n       num_params (poly.Bound v +\\<^sub>p b)\n       \\<le> max (num_params (poly.Bound v)) (num_params b)\n 5. \\<And>v va b.\n       num_params (Add v va +\\<^sub>p b)\n       \\<le> max (num_params (Add v va)) (num_params b)\n 6. \\<And>v va b.\n       num_params (Sub v va +\\<^sub>p b)\n       \\<le> max (num_params (Sub v va)) (num_params b)\n 7. \\<And>v va b.\n       num_params (Mul v va +\\<^sub>p b)\n       \\<le> max (num_params (Mul v va)) (num_params b)\n 8. \\<And>v b.\n       num_params (Neg v +\\<^sub>p b)\n       \\<le> max (num_params (Neg v)) (num_params b)\n 9. \\<And>v va b.\n       num_params (Pw v va +\\<^sub>p b)\n       \\<le> max (num_params (Pw v va)) (num_params b)\n 10. \\<And>v va vb vc.\n        num_params (CN v va vb +\\<^sub>p poly.Bound vc)\n        \\<le> max (num_params (CN v va vb)) (num_params (poly.Bound vc))\nA total of 27 subgoals...", "qed auto"], ["", "lemma num_params_polyneg:\n  shows \"num_params (~\\<^sub>p p) = num_params p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_params (~\\<^sub>p p) = num_params p", "by (induction p rule: polyneg.induct) simp_all"], ["", "lemma num_params_polymul:\n  shows \"num_params (p1 *\\<^sub>p p2) \\<le> max (num_params p1) (num_params p2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_params (p1 *\\<^sub>p p2) \\<le> max (num_params p1) (num_params p2)", "proof (induction p1 p2 rule: polymul.induct)"], ["proof (state)\ngoal (28 subgoals):\n 1. \\<And>c c'.\n       num_params ((c)\\<^sub>p *\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params (c)\\<^sub>p) (num_params (c')\\<^sub>p)\n 2. \\<And>c c' n' p'.\n       \\<lbrakk>num_params ((c)\\<^sub>p *\\<^sub>p c')\n                \\<le> max (num_params (c)\\<^sub>p) (num_params c');\n        num_params ((c)\\<^sub>p *\\<^sub>p p')\n        \\<le> max (num_params (c)\\<^sub>p) (num_params p')\\<rbrakk>\n       \\<Longrightarrow> num_params ((c)\\<^sub>p *\\<^sub>p CN c' n' p')\n                         \\<le> max (num_params (c)\\<^sub>p)\n                                (num_params (CN c' n' p'))\n 3. \\<And>c n p c'.\n       \\<lbrakk>num_params (c *\\<^sub>p (c')\\<^sub>p)\n                \\<le> max (num_params c) (num_params (c')\\<^sub>p);\n        num_params (p *\\<^sub>p (c')\\<^sub>p)\n        \\<le> max (num_params p) (num_params (c')\\<^sub>p)\\<rbrakk>\n       \\<Longrightarrow> num_params (CN c n p *\\<^sub>p (c')\\<^sub>p)\n                         \\<le> max (num_params (CN c n p))\n                                (num_params (c')\\<^sub>p)\n 4. \\<And>c n p c' n' p'.\n       \\<lbrakk>num_params (c *\\<^sub>p CN c' n' p')\n                \\<le> max (num_params c) (num_params (CN c' n' p'));\n        num_params (p *\\<^sub>p CN c' n' p')\n        \\<le> max (num_params p) (num_params (CN c' n' p'));\n        num_params (CN c n p *\\<^sub>p c')\n        \\<le> max (num_params (CN c n p)) (num_params c');\n        num_params (CN c n p *\\<^sub>p p')\n        \\<le> max (num_params (CN c n p)) (num_params p');\n        num_params (CN c n p *\\<^sub>p c')\n        \\<le> max (num_params (CN c n p)) (num_params c');\n        num_params (CN c n p *\\<^sub>p p')\n        \\<le> max (num_params (CN c n p)) (num_params p')\\<rbrakk>\n       \\<Longrightarrow> num_params (CN c n p *\\<^sub>p CN c' n' p')\n                         \\<le> max (num_params (CN c n p))\n                                (num_params (CN c' n' p'))\n 5. \\<And>v b.\n       num_params (poly.Bound v *\\<^sub>p b)\n       \\<le> max (num_params (poly.Bound v)) (num_params b)\n 6. \\<And>v va b.\n       num_params (Add v va *\\<^sub>p b)\n       \\<le> max (num_params (Add v va)) (num_params b)\n 7. \\<And>v va b.\n       num_params (Sub v va *\\<^sub>p b)\n       \\<le> max (num_params (Sub v va)) (num_params b)\n 8. \\<And>v va b.\n       num_params (Mul v va *\\<^sub>p b)\n       \\<le> max (num_params (Mul v va)) (num_params b)\n 9. \\<And>v b.\n       num_params (Neg v *\\<^sub>p b)\n       \\<le> max (num_params (Neg v)) (num_params b)\n 10. \\<And>v va b.\n        num_params (Pw v va *\\<^sub>p b)\n        \\<le> max (num_params (Pw v va)) (num_params b)\nA total of 28 subgoals...", "case (4 c n p c' n' p')"], ["proof (state)\nthis:\n  num_params (c *\\<^sub>p CN c' n' p')\n  \\<le> max (num_params c) (num_params (CN c' n' p'))\n  num_params (p *\\<^sub>p CN c' n' p')\n  \\<le> max (num_params p) (num_params (CN c' n' p'))\n  num_params (CN c n p *\\<^sub>p c')\n  \\<le> max (num_params (CN c n p)) (num_params c')\n  num_params (CN c n p *\\<^sub>p p')\n  \\<le> max (num_params (CN c n p)) (num_params p')\n  num_params (CN c n p *\\<^sub>p c')\n  \\<le> max (num_params (CN c n p)) (num_params c')\n  num_params (CN c n p *\\<^sub>p p')\n  \\<le> max (num_params (CN c n p)) (num_params p')\n\ngoal (28 subgoals):\n 1. \\<And>c c'.\n       num_params ((c)\\<^sub>p *\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params (c)\\<^sub>p) (num_params (c')\\<^sub>p)\n 2. \\<And>c c' n' p'.\n       \\<lbrakk>num_params ((c)\\<^sub>p *\\<^sub>p c')\n                \\<le> max (num_params (c)\\<^sub>p) (num_params c');\n        num_params ((c)\\<^sub>p *\\<^sub>p p')\n        \\<le> max (num_params (c)\\<^sub>p) (num_params p')\\<rbrakk>\n       \\<Longrightarrow> num_params ((c)\\<^sub>p *\\<^sub>p CN c' n' p')\n                         \\<le> max (num_params (c)\\<^sub>p)\n                                (num_params (CN c' n' p'))\n 3. \\<And>c n p c'.\n       \\<lbrakk>num_params (c *\\<^sub>p (c')\\<^sub>p)\n                \\<le> max (num_params c) (num_params (c')\\<^sub>p);\n        num_params (p *\\<^sub>p (c')\\<^sub>p)\n        \\<le> max (num_params p) (num_params (c')\\<^sub>p)\\<rbrakk>\n       \\<Longrightarrow> num_params (CN c n p *\\<^sub>p (c')\\<^sub>p)\n                         \\<le> max (num_params (CN c n p))\n                                (num_params (c')\\<^sub>p)\n 4. \\<And>c n p c' n' p'.\n       \\<lbrakk>num_params (c *\\<^sub>p CN c' n' p')\n                \\<le> max (num_params c) (num_params (CN c' n' p'));\n        num_params (p *\\<^sub>p CN c' n' p')\n        \\<le> max (num_params p) (num_params (CN c' n' p'));\n        num_params (CN c n p *\\<^sub>p c')\n        \\<le> max (num_params (CN c n p)) (num_params c');\n        num_params (CN c n p *\\<^sub>p p')\n        \\<le> max (num_params (CN c n p)) (num_params p');\n        num_params (CN c n p *\\<^sub>p c')\n        \\<le> max (num_params (CN c n p)) (num_params c');\n        num_params (CN c n p *\\<^sub>p p')\n        \\<le> max (num_params (CN c n p)) (num_params p')\\<rbrakk>\n       \\<Longrightarrow> num_params (CN c n p *\\<^sub>p CN c' n' p')\n                         \\<le> max (num_params (CN c n p))\n                                (num_params (CN c' n' p'))\n 5. \\<And>v b.\n       num_params (poly.Bound v *\\<^sub>p b)\n       \\<le> max (num_params (poly.Bound v)) (num_params b)\n 6. \\<And>v va b.\n       num_params (Add v va *\\<^sub>p b)\n       \\<le> max (num_params (Add v va)) (num_params b)\n 7. \\<And>v va b.\n       num_params (Sub v va *\\<^sub>p b)\n       \\<le> max (num_params (Sub v va)) (num_params b)\n 8. \\<And>v va b.\n       num_params (Mul v va *\\<^sub>p b)\n       \\<le> max (num_params (Mul v va)) (num_params b)\n 9. \\<And>v b.\n       num_params (Neg v *\\<^sub>p b)\n       \\<le> max (num_params (Neg v)) (num_params b)\n 10. \\<And>v va b.\n        num_params (Pw v va *\\<^sub>p b)\n        \\<le> max (num_params (Pw v va)) (num_params b)\nA total of 28 subgoals...", "then"], ["proof (chain)\npicking this:\n  num_params (c *\\<^sub>p CN c' n' p')\n  \\<le> max (num_params c) (num_params (CN c' n' p'))\n  num_params (p *\\<^sub>p CN c' n' p')\n  \\<le> max (num_params p) (num_params (CN c' n' p'))\n  num_params (CN c n p *\\<^sub>p c')\n  \\<le> max (num_params (CN c n p)) (num_params c')\n  num_params (CN c n p *\\<^sub>p p')\n  \\<le> max (num_params (CN c n p)) (num_params p')\n  num_params (CN c n p *\\<^sub>p c')\n  \\<le> max (num_params (CN c n p)) (num_params c')\n  num_params (CN c n p *\\<^sub>p p')\n  \\<le> max (num_params (CN c n p)) (num_params p')", "show ?case"], ["proof (prove)\nusing this:\n  num_params (c *\\<^sub>p CN c' n' p')\n  \\<le> max (num_params c) (num_params (CN c' n' p'))\n  num_params (p *\\<^sub>p CN c' n' p')\n  \\<le> max (num_params p) (num_params (CN c' n' p'))\n  num_params (CN c n p *\\<^sub>p c')\n  \\<le> max (num_params (CN c n p)) (num_params c')\n  num_params (CN c n p *\\<^sub>p p')\n  \\<le> max (num_params (CN c n p)) (num_params p')\n  num_params (CN c n p *\\<^sub>p c')\n  \\<le> max (num_params (CN c n p)) (num_params c')\n  num_params (CN c n p *\\<^sub>p p')\n  \\<le> max (num_params (CN c n p)) (num_params p')\n\ngoal (1 subgoal):\n 1. num_params (CN c n p *\\<^sub>p CN c' n' p')\n    \\<le> max (num_params (CN c n p)) (num_params (CN c' n' p'))", "by auto (auto simp: max_def Let_def split: if_splits\n          intro!: num_params_polyadd[THEN order_trans])"], ["proof (state)\nthis:\n  num_params (CN c n p *\\<^sub>p CN c' n' p')\n  \\<le> max (num_params (CN c n p)) (num_params (CN c' n' p'))\n\ngoal (27 subgoals):\n 1. \\<And>c c'.\n       num_params ((c)\\<^sub>p *\\<^sub>p (c')\\<^sub>p)\n       \\<le> max (num_params (c)\\<^sub>p) (num_params (c')\\<^sub>p)\n 2. \\<And>c c' n' p'.\n       \\<lbrakk>num_params ((c)\\<^sub>p *\\<^sub>p c')\n                \\<le> max (num_params (c)\\<^sub>p) (num_params c');\n        num_params ((c)\\<^sub>p *\\<^sub>p p')\n        \\<le> max (num_params (c)\\<^sub>p) (num_params p')\\<rbrakk>\n       \\<Longrightarrow> num_params ((c)\\<^sub>p *\\<^sub>p CN c' n' p')\n                         \\<le> max (num_params (c)\\<^sub>p)\n                                (num_params (CN c' n' p'))\n 3. \\<And>c n p c'.\n       \\<lbrakk>num_params (c *\\<^sub>p (c')\\<^sub>p)\n                \\<le> max (num_params c) (num_params (c')\\<^sub>p);\n        num_params (p *\\<^sub>p (c')\\<^sub>p)\n        \\<le> max (num_params p) (num_params (c')\\<^sub>p)\\<rbrakk>\n       \\<Longrightarrow> num_params (CN c n p *\\<^sub>p (c')\\<^sub>p)\n                         \\<le> max (num_params (CN c n p))\n                                (num_params (c')\\<^sub>p)\n 4. \\<And>v b.\n       num_params (poly.Bound v *\\<^sub>p b)\n       \\<le> max (num_params (poly.Bound v)) (num_params b)\n 5. \\<And>v va b.\n       num_params (Add v va *\\<^sub>p b)\n       \\<le> max (num_params (Add v va)) (num_params b)\n 6. \\<And>v va b.\n       num_params (Sub v va *\\<^sub>p b)\n       \\<le> max (num_params (Sub v va)) (num_params b)\n 7. \\<And>v va b.\n       num_params (Mul v va *\\<^sub>p b)\n       \\<le> max (num_params (Mul v va)) (num_params b)\n 8. \\<And>v b.\n       num_params (Neg v *\\<^sub>p b)\n       \\<le> max (num_params (Neg v)) (num_params b)\n 9. \\<And>v va b.\n       num_params (Pw v va *\\<^sub>p b)\n       \\<le> max (num_params (Pw v va)) (num_params b)\n 10. \\<And>v va vb vc.\n        num_params (CN v va vb *\\<^sub>p poly.Bound vc)\n        \\<le> max (num_params (CN v va vb)) (num_params (poly.Bound vc))\nA total of 27 subgoals...", "qed auto"], ["", "lemma num_params_polypow:\n  shows \"num_params (p ^\\<^sub>p n) \\<le> num_params p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_params (p ^\\<^sub>p n) \\<le> num_params p", "apply (induction n rule: polypow.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. num_params (p ^\\<^sub>p 0) \\<le> num_params p\n 2. \\<And>v.\n       (\\<And>x.\n           num_params (p ^\\<^sub>p Suc v div 2)\n           \\<le> num_params p) \\<Longrightarrow>\n       num_params (p ^\\<^sub>p Suc v) \\<le> num_params p", "unfolding polypow.simps"], ["proof (prove)\ngoal (2 subgoals):\n 1. num_params (1::'a)\\<^sub>p \\<le> num_params p\n 2. \\<And>v.\n       (\\<And>x.\n           num_params (p ^\\<^sub>p Suc v div 2)\n           \\<le> num_params p) \\<Longrightarrow>\n       num_params\n        (let q = p ^\\<^sub>p Suc v div 2; d = q *\\<^sub>p q\n         in if even (Suc v) then d else p *\\<^sub>p d)\n       \\<le> num_params p", "by (auto intro!: order_trans[OF num_params_polymul]\n      simp: Let_def simp del: polypow.simps)"], ["", "lemma num_params_polynate:\n  shows \"num_params (polynate p) \\<le> num_params p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_params (polynate p) \\<le> num_params p", "proof(induction p rule: polynate.induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Add p q))\n                         \\<le> num_params (Add p q)\n 3. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Sub p q))\n                         \\<le> num_params (Sub p q)\n 4. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Mul p q))\n                         \\<le> num_params (Mul p q)\n 5. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 6. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 7. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 8. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "case (2 l r)"], ["proof (state)\nthis:\n  num_params (polynate l) \\<le> num_params l\n  num_params (polynate r) \\<le> num_params r\n\ngoal (8 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Add p q))\n                         \\<le> num_params (Add p q)\n 3. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Sub p q))\n                         \\<le> num_params (Sub p q)\n 4. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Mul p q))\n                         \\<le> num_params (Mul p q)\n 5. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 6. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 7. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 8. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "thus ?case"], ["proof (prove)\nusing this:\n  num_params (polynate l) \\<le> num_params l\n  num_params (polynate r) \\<le> num_params r\n\ngoal (1 subgoal):\n 1. num_params (polynate (Add l r)) \\<le> num_params (Add l r)", "using num_params_polyadd[of \"polynate l\" \"polynate r\"]"], ["proof (prove)\nusing this:\n  num_params (polynate l) \\<le> num_params l\n  num_params (polynate r) \\<le> num_params r\n  num_params (polynate l +\\<^sub>p polynate r)\n  \\<le> max (num_params (polynate l)) (num_params (polynate r))\n\ngoal (1 subgoal):\n 1. num_params (polynate (Add l r)) \\<le> num_params (Add l r)", "by simp"], ["proof (state)\nthis:\n  num_params (polynate (Add l r)) \\<le> num_params (Add l r)\n\ngoal (7 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Sub p q))\n                         \\<le> num_params (Sub p q)\n 3. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Mul p q))\n                         \\<le> num_params (Mul p q)\n 4. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 5. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 6. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 7. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Sub p q))\n                         \\<le> num_params (Sub p q)\n 3. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Mul p q))\n                         \\<le> num_params (Mul p q)\n 4. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 5. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 6. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 7. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "case (3 l r)"], ["proof (state)\nthis:\n  num_params (polynate l) \\<le> num_params l\n  num_params (polynate r) \\<le> num_params r\n\ngoal (7 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Sub p q))\n                         \\<le> num_params (Sub p q)\n 3. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Mul p q))\n                         \\<le> num_params (Mul p q)\n 4. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 5. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 6. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 7. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "thus ?case"], ["proof (prove)\nusing this:\n  num_params (polynate l) \\<le> num_params l\n  num_params (polynate r) \\<le> num_params r\n\ngoal (1 subgoal):\n 1. num_params (polynate (Sub l r)) \\<le> num_params (Sub l r)", "using num_params_polyadd[of \"polynate l\" \"~\\<^sub>p (polynate r)\"]"], ["proof (prove)\nusing this:\n  num_params (polynate l) \\<le> num_params l\n  num_params (polynate r) \\<le> num_params r\n  num_params (polynate l +\\<^sub>p ~\\<^sub>p (polynate r))\n  \\<le> max (num_params (polynate l)) (num_params (~\\<^sub>p (polynate r)))\n\ngoal (1 subgoal):\n 1. num_params (polynate (Sub l r)) \\<le> num_params (Sub l r)", "by (simp add: polysub_def num_params_polyneg)"], ["proof (state)\nthis:\n  num_params (polynate (Sub l r)) \\<le> num_params (Sub l r)\n\ngoal (6 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Mul p q))\n                         \\<le> num_params (Mul p q)\n 3. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 4. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 5. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 6. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Mul p q))\n                         \\<le> num_params (Mul p q)\n 3. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 4. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 5. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 6. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "case (4 l r)"], ["proof (state)\nthis:\n  num_params (polynate l) \\<le> num_params l\n  num_params (polynate r) \\<le> num_params r\n\ngoal (6 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p q.\n       \\<lbrakk>num_params (polynate p) \\<le> num_params p;\n        num_params (polynate q) \\<le> num_params q\\<rbrakk>\n       \\<Longrightarrow> num_params (polynate (Mul p q))\n                         \\<le> num_params (Mul p q)\n 3. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 4. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 5. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 6. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "thus ?case"], ["proof (prove)\nusing this:\n  num_params (polynate l) \\<le> num_params l\n  num_params (polynate r) \\<le> num_params r\n\ngoal (1 subgoal):\n 1. num_params (polynate (Mul l r)) \\<le> num_params (Mul l r)", "using num_params_polymul[of \"polynate l\" \"polynate r\"]"], ["proof (prove)\nusing this:\n  num_params (polynate l) \\<le> num_params l\n  num_params (polynate r) \\<le> num_params r\n  num_params (polynate l *\\<^sub>p polynate r)\n  \\<le> max (num_params (polynate l)) (num_params (polynate r))\n\ngoal (1 subgoal):\n 1. num_params (polynate (Mul l r)) \\<le> num_params (Mul l r)", "by simp"], ["proof (state)\nthis:\n  num_params (polynate (Mul l r)) \\<le> num_params (Mul l r)\n\ngoal (5 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 3. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 4. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 5. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 3. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 4. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 5. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "case (5 p)"], ["proof (state)\nthis:\n  num_params (polynate p) \\<le> num_params p\n\ngoal (5 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n 3. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 4. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 5. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "thus ?case"], ["proof (prove)\nusing this:\n  num_params (polynate p) \\<le> num_params p\n\ngoal (1 subgoal):\n 1. num_params (polynate (Neg p)) \\<le> num_params (Neg p)", "by (simp add: num_params_polyneg)"], ["proof (state)\nthis:\n  num_params (polynate (Neg p)) \\<le> num_params (Neg p)\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 3. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 4. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 3. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 4. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "case (6 p n)"], ["proof (state)\nthis:\n  num_params (polynate p) \\<le> num_params p\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>p n.\n       num_params (polynate p) \\<le> num_params p \\<Longrightarrow>\n       num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n 3. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 4. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "thus ?case"], ["proof (prove)\nusing this:\n  num_params (polynate p) \\<le> num_params p\n\ngoal (1 subgoal):\n 1. num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)", "using num_params_polypow[of n \"polynate p\"]"], ["proof (prove)\nusing this:\n  num_params (polynate p) \\<le> num_params p\n  num_params (polynate p ^\\<^sub>p n) \\<le> num_params (polynate p)\n\ngoal (1 subgoal):\n 1. num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)", "by simp"], ["proof (state)\nthis:\n  num_params (polynate (Pw p n)) \\<le> num_params (Pw p n)\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       num_params (polynate (poly.Bound n)) \\<le> num_params (poly.Bound n)\n 2. \\<And>c n p.\n       num_params (polynate (Add c (Mul (poly.Bound n) p)))\n       \\<le> num_params (Add c (Mul (poly.Bound n) p)) \\<Longrightarrow>\n       num_params (polynate (CN c n p)) \\<le> num_params (CN c n p)\n 3. \\<And>c. num_params (polynate (c)\\<^sub>p) \\<le> num_params (c)\\<^sub>p", "qed simp_all"], ["", "lemma polynate_map_poly_real[simp]:\n  fixes p :: \"float poly\"\n  shows \"map_poly real_of_float (polynate p) = polynate (map_poly real_of_float p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly real_of_float (polynate p) =\n    polynate (map_poly real_of_float p)", "by (induction p) (simp_all add: map_poly_homo_polyarith)"], ["", "text \\<open>Evaluating a float poly is equivalent to evaluating the corresponding\n   real poly with the float parameters converted to reals.\\<close>"], ["", "lemma Ipoly_real_float_eqiv:\n  fixes p::\"float poly\" and xs::\"float list\"\n  assumes \"num_params p \\<le> length xs\"\n  shows \"Ipoly xs (p::real poly) = Ipoly xs p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ipoly (map real_of_float xs) (map_poly real_of_float p) =\n    real_of_float (Ipoly xs p)", "using assms"], ["proof (prove)\nusing this:\n  num_params p \\<le> length xs\n\ngoal (1 subgoal):\n 1. Ipoly (map real_of_float xs) (map_poly real_of_float p) =\n    real_of_float (Ipoly xs p)", "by (induction p, simp_all)"], ["", "text \\<open>Evaluating an \\<open>'a poly\\<close> with \\<open>'a interval\\<close> arguments is monotone.\\<close>"], ["", "lemma Ipoly_interval_args_mono:\n  fixes p::\"'a::linordered_idom poly\"\n    and   x::\"'a list\"\n    and   xs::\"'a interval list\"\n  assumes \"x all_in\\<^sub>i xs\"\n  assumes \"num_params p \\<le> length xs\"\n  shows \"Ipoly x p \\<in> set_of (Ipoly xs (map_poly interval_of p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ipoly x p \\<in>\\<^sub>i Ipoly xs (map_poly interval_of p)", "using assms"], ["proof (prove)\nusing this:\n  x all_in\\<^sub>i xs\n  num_params p \\<le> length xs\n\ngoal (1 subgoal):\n 1. Ipoly x p \\<in>\\<^sub>i Ipoly xs (map_poly interval_of p)", "by (induction p)\n    (auto simp: all_in_i_def plus_in_intervalI minus_in_intervalI times_in_intervalI\n      uminus_in_intervalI set_of_power_mono)"], ["", "lemma Ipoly_interval_args_inc_mono:\n  fixes p::\"'a::{real_normed_algebra, linear_continuum_topology, linordered_idom} poly\"\n    and   I::\"'a interval list\" and J::\"'a interval list\"\n  assumes \"num_params p \\<le> length I\"\n  assumes \"I all_subset J\"\n  shows \"set_of (Ipoly I (map_poly interval_of p)) \\<subseteq> set_of (Ipoly J (map_poly interval_of p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of (Ipoly I (map_poly interval_of p))\n    \\<subseteq> set_of (Ipoly J (map_poly interval_of p))", "using assms"], ["proof (prove)\nusing this:\n  num_params p \\<le> length I\n  I all_subset J\n\ngoal (1 subgoal):\n 1. set_of (Ipoly I (map_poly interval_of p))\n    \\<subseteq> set_of (Ipoly J (map_poly interval_of p))", "by (induction p)\n    (simp_all add: set_of_add_inc set_of_sub_inc set_of_mul_inc set_of_neg_inc set_of_pow_inc)"], ["", "section \\<open>Splitting polynomials to reduce floating point precision\\<close>"], ["", "text \\<open>TODO: Move this!\n  Definitions regarding floating point numbers should not be in a theory about polynomials.\\<close>"], ["", "fun float_prec :: \"float \\<Rightarrow> int\"\n  where \"float_prec f = (let p=exponent f in if p \\<ge> 0 then 0 else -p)\""], ["", "fun float_round :: \"nat \\<Rightarrow> float \\<Rightarrow> float\"\n  where \"float_round prec f = (\n         let d = float_down prec f; u = float_up prec f\n         in if f - d < u - f then d else u)\""], ["", "text \\<open>Splits any polynomial \\<open>p\\<close> into two polynomials \\<open>l\\<close>, \\<open>r\\<close>, such that \\<open>\\<forall>x::real. p(x) = l(x) + r(x)\\<close>\n   and all floating point coefficients in \\<open>p\\<close> are rounded to precision \\<open>prec\\<close>.\n   Not all cases need to give good results. Polynomials normalized with polynate\n   only contain \\<open>poly.C\\<close> and \\<open>poly.CN\\<close> constructors.\\<close>"], ["", "fun split_by_prec :: \"nat \\<Rightarrow> float poly \\<Rightarrow> float poly * float poly\"\n  where \"split_by_prec prec (poly.C f) = (let r = float_round prec f in (poly.C r, poly.C (f - r)))\"\n  | \"split_by_prec prec (poly.Bound n) = (poly.Bound n, poly.C 0)\"\n  | \"split_by_prec prec (poly.Add l r) = (let (ll, lr) = split_by_prec prec l;\n                                                (rl, rr) = split_by_prec prec r\n                                            in (poly.Add ll rl, poly.Add lr rr))\"\n  | \"split_by_prec prec (poly.Sub l r) = (let (ll, lr) = split_by_prec prec l;\n                                             (rl, rr) = split_by_prec prec r\n                                         in (poly.Sub ll rl, poly.Sub lr rr))\"\n  | \"split_by_prec prec (poly.Mul l r) = (let (ll, lr) = split_by_prec prec l;\n                                                (rl, rr) = split_by_prec prec r\n                                            in (poly.Mul ll rl, poly.Add (poly.Add (poly.Mul lr rl) (poly.Mul ll rr)) (poly.Mul lr rr)))\"\n  | \"split_by_prec prec (poly.Neg p) = (let (l, r) = split_by_prec prec p in (poly.Neg l, poly.Neg r))\"\n  | \"split_by_prec prec (poly.Pw p 0) = (poly.C 1, poly.C 0)\"\n  | \"split_by_prec prec (poly.Pw p (Suc n)) = (let (l, r) = split_by_prec prec p in (poly.Pw l n, poly.Sub (poly.Pw p (Suc n)) (poly.Pw l n)))\"\n  | \"split_by_prec prec (poly.CN c n p) = (let (cl, cr) = split_by_prec prec c;\n                                                 (pl, pr) = split_by_prec prec p\n                                             in (poly.CN cl n pl, poly.CN cr n pr))\""], ["", "text \\<open>TODO: Prove precision constraint on \\<open>l\\<close>.\\<close>"], ["", "lemma split_by_prec_correct:\n  fixes args :: \"real list\"\n  assumes \"(l, r) = split_by_prec prec p\"\n  shows \"Ipoly args p = Ipoly args l + Ipoly args r\" (is ?P1)\n    and   \"num_params l \\<le> num_params p\" (is ?P2)\n    and   \"num_params r \\<le> num_params p\" (is ?P3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ipoly args (map_poly real_of_float p) =\n    Ipoly args (map_poly real_of_float l) +\n    Ipoly args (map_poly real_of_float r) &&&\n    num_params l \\<le> num_params p &&& num_params r \\<le> num_params p", "unfolding atomize_conj"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ipoly args (map_poly real_of_float p) =\n    Ipoly args (map_poly real_of_float l) +\n    Ipoly args (map_poly real_of_float r) \\<and>\n    num_params l \\<le> num_params p \\<and> num_params r \\<le> num_params p", "using assms"], ["proof (prove)\nusing this:\n  (l, r) = split_by_prec prec p\n\ngoal (1 subgoal):\n 1. Ipoly args (map_poly real_of_float p) =\n    Ipoly args (map_poly real_of_float l) +\n    Ipoly args (map_poly real_of_float r) \\<and>\n    num_params l \\<le> num_params p \\<and> num_params r \\<le> num_params p", "proof(induction p arbitrary: l r)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Add p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 4. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Sub p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 5. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 6. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 7. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 8. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Add p1 p2 l r)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_prec prec p1 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p1) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_prec prec p2 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p2) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_prec prec (Add p1 p2)\n\ngoal (8 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Add p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 4. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Sub p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 5. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 6. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 7. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 8. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_prec prec p1 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p1) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_prec prec p2 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p2) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_prec prec (Add p1 p2)\n\ngoal (1 subgoal):\n 1. Ipoly args (map_poly real_of_float (Add p1 p2)) =\n    Ipoly args (map_poly real_of_float l) +\n    Ipoly args (map_poly real_of_float r) \\<and>\n    num_params l \\<le> num_params (Add p1 p2) \\<and>\n    num_params r \\<le> num_params (Add p1 p2)", "apply(simp add: Add(1,2)[OF prod.collapse] split_beta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l r.\n                (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                Ipoly args\n                 (map_poly real_of_float (fst (split_by_prec prec p1))) +\n                Ipoly args\n                 (map_poly real_of_float (snd (split_by_prec prec p1))) =\n                Ipoly args (map_poly real_of_float l) +\n                Ipoly args (map_poly real_of_float r) \\<and>\n                num_params l \\<le> num_params p1 \\<and>\n                num_params r \\<le> num_params p1;\n     \\<And>l r.\n        (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n        Ipoly args (map_poly real_of_float (fst (split_by_prec prec p2))) +\n        Ipoly args (map_poly real_of_float (snd (split_by_prec prec p2))) =\n        Ipoly args (map_poly real_of_float l) +\n        Ipoly args (map_poly real_of_float r) \\<and>\n        num_params l \\<le> num_params p2 \\<and>\n        num_params r \\<le> num_params p2;\n     l =\n     Add (fst (split_by_prec prec p1)) (fst (split_by_prec prec p2)) \\<and>\n     r =\n     Add (snd (split_by_prec prec p1))\n      (snd (split_by_prec prec p2))\\<rbrakk>\n    \\<Longrightarrow> num_params (fst (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2)", "using max.coboundedI1 max.coboundedI2 prod.collapse"], ["proof (prove)\nusing this:\n  ?c \\<le> ?a \\<Longrightarrow> ?c \\<le> max ?a ?b\n  ?c \\<le> ?b \\<Longrightarrow> ?c \\<le> max ?a ?b\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l r.\n                (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                Ipoly args\n                 (map_poly real_of_float (fst (split_by_prec prec p1))) +\n                Ipoly args\n                 (map_poly real_of_float (snd (split_by_prec prec p1))) =\n                Ipoly args (map_poly real_of_float l) +\n                Ipoly args (map_poly real_of_float r) \\<and>\n                num_params l \\<le> num_params p1 \\<and>\n                num_params r \\<le> num_params p1;\n     \\<And>l r.\n        (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n        Ipoly args (map_poly real_of_float (fst (split_by_prec prec p2))) +\n        Ipoly args (map_poly real_of_float (snd (split_by_prec prec p2))) =\n        Ipoly args (map_poly real_of_float l) +\n        Ipoly args (map_poly real_of_float r) \\<and>\n        num_params l \\<le> num_params p2 \\<and>\n        num_params r \\<le> num_params p2;\n     l =\n     Add (fst (split_by_prec prec p1)) (fst (split_by_prec prec p2)) \\<and>\n     r =\n     Add (snd (split_by_prec prec p1))\n      (snd (split_by_prec prec p2))\\<rbrakk>\n    \\<Longrightarrow> num_params (fst (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2)", "by metis"], ["proof (state)\nthis:\n  Ipoly args (map_poly real_of_float (Add p1 p2)) =\n  Ipoly args (map_poly real_of_float l) +\n  Ipoly args (map_poly real_of_float r) \\<and>\n  num_params l \\<le> num_params (Add p1 p2) \\<and>\n  num_params r \\<le> num_params (Add p1 p2)\n\ngoal (7 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Sub p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 4. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 5. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 6. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 7. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Sub p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 4. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 5. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 6. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 7. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Sub p1 p2 l r)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_prec prec p1 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p1) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_prec prec p2 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p2) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_prec prec (Sub p1 p2)\n\ngoal (7 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Sub p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 4. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 5. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 6. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 7. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_prec prec p1 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p1) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_prec prec p2 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p2) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_prec prec (Sub p1 p2)\n\ngoal (1 subgoal):\n 1. Ipoly args (map_poly real_of_float (Sub p1 p2)) =\n    Ipoly args (map_poly real_of_float l) +\n    Ipoly args (map_poly real_of_float r) \\<and>\n    num_params l \\<le> num_params (Sub p1 p2) \\<and>\n    num_params r \\<le> num_params (Sub p1 p2)", "apply(simp add: Sub(1,2)[OF prod.collapse] split_beta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l r.\n                (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                Ipoly args\n                 (map_poly real_of_float (fst (split_by_prec prec p1))) +\n                Ipoly args\n                 (map_poly real_of_float (snd (split_by_prec prec p1))) =\n                Ipoly args (map_poly real_of_float l) +\n                Ipoly args (map_poly real_of_float r) \\<and>\n                num_params l \\<le> num_params p1 \\<and>\n                num_params r \\<le> num_params p1;\n     \\<And>l r.\n        (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n        Ipoly args (map_poly real_of_float (fst (split_by_prec prec p2))) +\n        Ipoly args (map_poly real_of_float (snd (split_by_prec prec p2))) =\n        Ipoly args (map_poly real_of_float l) +\n        Ipoly args (map_poly real_of_float r) \\<and>\n        num_params l \\<le> num_params p2 \\<and>\n        num_params r \\<le> num_params p2;\n     l =\n     Sub (fst (split_by_prec prec p1)) (fst (split_by_prec prec p2)) \\<and>\n     r =\n     Sub (snd (split_by_prec prec p1))\n      (snd (split_by_prec prec p2))\\<rbrakk>\n    \\<Longrightarrow> num_params (fst (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2)", "using max.coboundedI1 max.coboundedI2 prod.collapse"], ["proof (prove)\nusing this:\n  ?c \\<le> ?a \\<Longrightarrow> ?c \\<le> max ?a ?b\n  ?c \\<le> ?b \\<Longrightarrow> ?c \\<le> max ?a ?b\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l r.\n                (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                Ipoly args\n                 (map_poly real_of_float (fst (split_by_prec prec p1))) +\n                Ipoly args\n                 (map_poly real_of_float (snd (split_by_prec prec p1))) =\n                Ipoly args (map_poly real_of_float l) +\n                Ipoly args (map_poly real_of_float r) \\<and>\n                num_params l \\<le> num_params p1 \\<and>\n                num_params r \\<le> num_params p1;\n     \\<And>l r.\n        (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n        Ipoly args (map_poly real_of_float (fst (split_by_prec prec p2))) +\n        Ipoly args (map_poly real_of_float (snd (split_by_prec prec p2))) =\n        Ipoly args (map_poly real_of_float l) +\n        Ipoly args (map_poly real_of_float r) \\<and>\n        num_params l \\<le> num_params p2 \\<and>\n        num_params r \\<le> num_params p2;\n     l =\n     Sub (fst (split_by_prec prec p1)) (fst (split_by_prec prec p2)) \\<and>\n     r =\n     Sub (snd (split_by_prec prec p1))\n      (snd (split_by_prec prec p2))\\<rbrakk>\n    \\<Longrightarrow> num_params (fst (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2)", "by metis"], ["proof (state)\nthis:\n  Ipoly args (map_poly real_of_float (Sub p1 p2)) =\n  Ipoly args (map_poly real_of_float l) +\n  Ipoly args (map_poly real_of_float r) \\<and>\n  num_params l \\<le> num_params (Sub p1 p2) \\<and>\n  num_params r \\<le> num_params (Sub p1 p2)\n\ngoal (6 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 4. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 5. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 6. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 4. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 5. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 6. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Mul p1 p2 l r)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_prec prec p1 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p1) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_prec prec p2 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p2) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_prec prec (Mul p1 p2)\n\ngoal (6 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 4. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 5. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 6. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_prec prec p1 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p1) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_prec prec p2 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p2) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_prec prec (Mul p1 p2)\n\ngoal (1 subgoal):\n 1. Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n    Ipoly args (map_poly real_of_float l) +\n    Ipoly args (map_poly real_of_float r) \\<and>\n    num_params l \\<le> num_params (Mul p1 p2) \\<and>\n    num_params r \\<le> num_params (Mul p1 p2)", "apply(simp add: Mul(1,2)[OF prod.collapse] split_beta algebra_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l r.\n                (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                Ipoly args\n                 (map_poly real_of_float (fst (split_by_prec prec p1))) +\n                Ipoly args\n                 (map_poly real_of_float (snd (split_by_prec prec p1))) =\n                Ipoly args (map_poly real_of_float l) +\n                Ipoly args (map_poly real_of_float r) \\<and>\n                num_params l \\<le> num_params p1 \\<and>\n                num_params r \\<le> num_params p1;\n     \\<And>l r.\n        (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n        Ipoly args (map_poly real_of_float (fst (split_by_prec prec p2))) +\n        Ipoly args (map_poly real_of_float (snd (split_by_prec prec p2))) =\n        Ipoly args (map_poly real_of_float l) +\n        Ipoly args (map_poly real_of_float r) \\<and>\n        num_params l \\<le> num_params p2 \\<and>\n        num_params r \\<le> num_params p2;\n     l =\n     Mul (fst (split_by_prec prec p1)) (fst (split_by_prec prec p2)) \\<and>\n     r =\n     Add (Add (Mul (snd (split_by_prec prec p1))\n                (fst (split_by_prec prec p2)))\n           (Mul (fst (split_by_prec prec p1))\n             (snd (split_by_prec prec p2))))\n      (Mul (snd (split_by_prec prec p1))\n        (snd (split_by_prec prec p2)))\\<rbrakk>\n    \\<Longrightarrow> num_params (fst (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2)", "using max.coboundedI1 max.coboundedI2 prod.collapse"], ["proof (prove)\nusing this:\n  ?c \\<le> ?a \\<Longrightarrow> ?c \\<le> max ?a ?b\n  ?c \\<le> ?b \\<Longrightarrow> ?c \\<le> max ?a ?b\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l r.\n                (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                Ipoly args\n                 (map_poly real_of_float (fst (split_by_prec prec p1))) +\n                Ipoly args\n                 (map_poly real_of_float (snd (split_by_prec prec p1))) =\n                Ipoly args (map_poly real_of_float l) +\n                Ipoly args (map_poly real_of_float r) \\<and>\n                num_params l \\<le> num_params p1 \\<and>\n                num_params r \\<le> num_params p1;\n     \\<And>l r.\n        (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n        Ipoly args (map_poly real_of_float (fst (split_by_prec prec p2))) +\n        Ipoly args (map_poly real_of_float (snd (split_by_prec prec p2))) =\n        Ipoly args (map_poly real_of_float l) +\n        Ipoly args (map_poly real_of_float r) \\<and>\n        num_params l \\<le> num_params p2 \\<and>\n        num_params r \\<le> num_params p2;\n     l =\n     Mul (fst (split_by_prec prec p1)) (fst (split_by_prec prec p2)) \\<and>\n     r =\n     Add (Add (Mul (snd (split_by_prec prec p1))\n                (fst (split_by_prec prec p2)))\n           (Mul (fst (split_by_prec prec p1))\n             (snd (split_by_prec prec p2))))\n      (Mul (snd (split_by_prec prec p1))\n        (snd (split_by_prec prec p2)))\\<rbrakk>\n    \\<Longrightarrow> num_params (fst (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (fst (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p1))\n                      \\<le> max (num_params p1) (num_params p2) \\<and>\n                      num_params (snd (split_by_prec prec p2))\n                      \\<le> max (num_params p1) (num_params p2)", "by metis"], ["proof (state)\nthis:\n  Ipoly args (map_poly real_of_float (Mul p1 p2)) =\n  Ipoly args (map_poly real_of_float l) +\n  Ipoly args (map_poly real_of_float r) \\<and>\n  num_params l \\<le> num_params (Mul p1 p2) \\<and>\n  num_params r \\<le> num_params (Mul p1 p2)\n\ngoal (5 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 4. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 5. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 4. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 5. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Neg p l r)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_prec prec p \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_prec prec (Neg p)\n\ngoal (5 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Neg p)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Neg p)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 4. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 5. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_prec prec p \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_prec prec (Neg p)\n\ngoal (1 subgoal):\n 1. Ipoly args (map_poly real_of_float (Neg p)) =\n    Ipoly args (map_poly real_of_float l) +\n    Ipoly args (map_poly real_of_float r) \\<and>\n    num_params l \\<le> num_params (Neg p) \\<and>\n    num_params r \\<le> num_params (Neg p)", "by (simp add: Neg(1)[OF prod.collapse] split_beta)"], ["proof (state)\nthis:\n  Ipoly args (map_poly real_of_float (Neg p)) =\n  Ipoly args (map_poly real_of_float l) +\n  Ipoly args (map_poly real_of_float r) \\<and>\n  num_params l \\<le> num_params (Neg p) \\<and>\n  num_params r \\<le> num_params (Neg p)\n\ngoal (4 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 4. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 4. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Pw p n l r)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_prec prec p \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_prec prec (Pw p n)\n\ngoal (4 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p x2a l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_prec prec (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args (map_poly real_of_float (Pw p x2a)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 4. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_prec prec p \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_prec prec (Pw p n)\n\ngoal (1 subgoal):\n 1. Ipoly args (map_poly real_of_float (Pw p n)) =\n    Ipoly args (map_poly real_of_float l) +\n    Ipoly args (map_poly real_of_float r) \\<and>\n    num_params l \\<le> num_params (Pw p n) \\<and>\n    num_params r \\<le> num_params (Pw p n)", "by (cases n) (simp_all add: Pw(1)[OF prod.collapse] split_beta)"], ["proof (state)\nthis:\n  Ipoly args (map_poly real_of_float (Pw p n)) =\n  Ipoly args (map_poly real_of_float l) +\n  Ipoly args (map_poly real_of_float r) \\<and>\n  num_params l \\<le> num_params (Pw p n) \\<and>\n  num_params r \\<le> num_params (Pw p n)\n\ngoal (3 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (CN c n p2)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_prec prec c \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float c) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params c \\<and> num_params ?r \\<le> num_params c\n  (?l, ?r) = split_by_prec prec p2 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p2) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_prec prec (CN c n p2)\n\ngoal (3 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)\n 3. \\<And>p1 x2a p2 l r.\n       \\<lbrakk>\\<And>l r.\n                   (l, r) = split_by_prec prec p1 \\<Longrightarrow>\n                   Ipoly args (map_poly real_of_float p1) =\n                   Ipoly args (map_poly real_of_float l) +\n                   Ipoly args (map_poly real_of_float r) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r.\n           (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n           Ipoly args (map_poly real_of_float p2) =\n           Ipoly args (map_poly real_of_float l) +\n           Ipoly args (map_poly real_of_float r) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_prec prec (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> Ipoly args\n                          (map_poly real_of_float (CN p1 x2a p2)) =\n                         Ipoly args (map_poly real_of_float l) +\n                         Ipoly args (map_poly real_of_float r) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_prec prec c \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float c) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params c \\<and> num_params ?r \\<le> num_params c\n  (?l, ?r) = split_by_prec prec p2 \\<Longrightarrow>\n  Ipoly args (map_poly real_of_float p2) =\n  Ipoly args (map_poly real_of_float ?l) +\n  Ipoly args (map_poly real_of_float ?r) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_prec prec (CN c n p2)\n\ngoal (1 subgoal):\n 1. Ipoly args (map_poly real_of_float (CN c n p2)) =\n    Ipoly args (map_poly real_of_float l) +\n    Ipoly args (map_poly real_of_float r) \\<and>\n    num_params l \\<le> num_params (CN c n p2) \\<and>\n    num_params r \\<le> num_params (CN c n p2)", "apply(simp add: CN(1,2)[OF prod.collapse] split_beta algebra_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l r.\n                (l, r) = split_by_prec prec c \\<Longrightarrow>\n                Ipoly args\n                 (map_poly real_of_float (fst (split_by_prec prec c))) +\n                Ipoly args\n                 (map_poly real_of_float (snd (split_by_prec prec c))) =\n                Ipoly args (map_poly real_of_float l) +\n                Ipoly args (map_poly real_of_float r) \\<and>\n                num_params l \\<le> num_params c \\<and>\n                num_params r \\<le> num_params c;\n     \\<And>l r.\n        (l, r) = split_by_prec prec p2 \\<Longrightarrow>\n        Ipoly args (map_poly real_of_float (fst (split_by_prec prec p2))) +\n        Ipoly args (map_poly real_of_float (snd (split_by_prec prec p2))) =\n        Ipoly args (map_poly real_of_float l) +\n        Ipoly args (map_poly real_of_float r) \\<and>\n        num_params l \\<le> num_params p2 \\<and>\n        num_params r \\<le> num_params p2;\n     l =\n     CN (fst (split_by_prec prec c)) n (fst (split_by_prec prec p2)) \\<and>\n     r =\n     CN (snd (split_by_prec prec c)) n\n      (snd (split_by_prec prec p2))\\<rbrakk>\n    \\<Longrightarrow> num_params (fst (split_by_prec prec c))\n                      \\<le> max (max (num_params c) (num_params p2))\n                             (Suc n) \\<and>\n                      num_params (fst (split_by_prec prec p2))\n                      \\<le> max (max (num_params c) (num_params p2))\n                             (Suc n) \\<and>\n                      num_params (snd (split_by_prec prec c))\n                      \\<le> max (max (num_params c) (num_params p2))\n                             (Suc n) \\<and>\n                      num_params (snd (split_by_prec prec p2))\n                      \\<le> max (max (num_params c) (num_params p2)) (Suc n)", "by (meson le_max_iff_disj prod.collapse)"], ["proof (state)\nthis:\n  Ipoly args (map_poly real_of_float (CN c n p2)) =\n  Ipoly args (map_poly real_of_float l) +\n  Ipoly args (map_poly real_of_float r) \\<and>\n  num_params l \\<le> num_params (CN c n p2) \\<and>\n  num_params r \\<le> num_params (CN c n p2)\n\ngoal (2 subgoals):\n 1. \\<And>x l r.\n       (l, r) = split_by_prec prec (x)\\<^sub>p \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (x)\\<^sub>p) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (x)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (x)\\<^sub>p\n 2. \\<And>x l r.\n       (l, r) = split_by_prec prec (poly.Bound x) \\<Longrightarrow>\n       Ipoly args (map_poly real_of_float (poly.Bound x)) =\n       Ipoly args (map_poly real_of_float l) +\n       Ipoly args (map_poly real_of_float r) \\<and>\n       num_params l \\<le> num_params (poly.Bound x) \\<and>\n       num_params r \\<le> num_params (poly.Bound x)", "qed (simp_all add: Let_def)"], ["", "section \\<open>Splitting polynomials by degree\\<close>"], ["", "fun maxdegree :: \"('a::zero) poly \\<Rightarrow> nat\"\n  where \"maxdegree (poly.C c) = 0\"\n  | \"maxdegree (poly.Bound n) = 1\"\n  | \"maxdegree (poly.Add l r) = max (maxdegree l) (maxdegree r)\"\n  | \"maxdegree (poly.Sub l r) = max (maxdegree l) (maxdegree r)\"\n  | \"maxdegree (poly.Mul l r) = maxdegree l + maxdegree r\"\n  | \"maxdegree (poly.Neg p) = maxdegree p\"\n  | \"maxdegree (poly.Pw p n) = n * maxdegree p\"\n  | \"maxdegree (poly.CN c n p) = max (maxdegree c) (1 + maxdegree p)\""], ["", "fun split_by_degree :: \"nat \\<Rightarrow> 'a::zero poly \\<Rightarrow> 'a poly * 'a poly\"\n  where \"split_by_degree n (poly.C c) = (poly.C c, poly.C 0)\"\n  | \"split_by_degree 0 p = (poly.C 0, p)\"\n  | \"split_by_degree (Suc n) (poly.CN c v p) = (\n         let (cl, cr) = split_by_degree (Suc n) c;\n             (pl, pr) = split_by_degree n p\n         in (poly.CN cl v pl, poly.CN cr v pr))\"\n    \\<comment> \\<open>This function is only intended for use on polynomials in normal form.\n       Hence most cases never get executed.\\<close>\n  | \"split_by_degree n p = (poly.C 0, p)\""], ["", "lemma split_by_degree_correct:\n  fixes x :: \"real list\" and p :: \"float poly\"\n  assumes \"(l, r) = split_by_degree ord p\"\n  shows \"maxdegree l \\<le> ord\" (is ?P1)\n    and   \"Ipoly x p = Ipoly x l + Ipoly x r\" (is ?P2)\n    and   \"num_params l \\<le> num_params p\" (is ?P3)\n    and   \"num_params r \\<le> num_params p\" (is ?P4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord &&&\n     Ipoly x (map_poly real_of_float p) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) &&&\n    num_params l \\<le> num_params p &&& num_params r \\<le> num_params p", "unfolding atomize_conj"], ["proof (prove)\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float p) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params p \\<and> num_params r \\<le> num_params p", "using assms"], ["proof (prove)\nusing this:\n  (l, r) = split_by_degree ord p\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float p) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params p \\<and> num_params r \\<le> num_params p", "proof(induction p arbitrary: l r ord)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>xa l r ord.\n       (l, r) = split_by_degree ord (xa)\\<^sub>p \\<Longrightarrow>\n       (maxdegree l \\<le> ord \\<and>\n        Ipoly x (map_poly real_of_float (xa)\\<^sub>p) =\n        Ipoly x (map_poly real_of_float l) +\n        Ipoly x (map_poly real_of_float r)) \\<and>\n       num_params l \\<le> num_params (xa)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (xa)\\<^sub>p\n 2. \\<And>xa l r ord.\n       (l, r) = split_by_degree ord (poly.Bound xa) \\<Longrightarrow>\n       (maxdegree l \\<le> ord \\<and>\n        Ipoly x (map_poly real_of_float (poly.Bound xa)) =\n        Ipoly x (map_poly real_of_float l) +\n        Ipoly x (map_poly real_of_float r)) \\<and>\n       num_params l \\<le> num_params (poly.Bound xa) \\<and>\n       num_params r \\<le> num_params (poly.Bound xa)\n 3. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Add p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 4. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 5. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 6. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 7. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 8. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (C c l r ord)"], ["proof (state)\nthis:\n  (l, r) = split_by_degree ord (c)\\<^sub>p\n\ngoal (8 subgoals):\n 1. \\<And>xa l r ord.\n       (l, r) = split_by_degree ord (xa)\\<^sub>p \\<Longrightarrow>\n       (maxdegree l \\<le> ord \\<and>\n        Ipoly x (map_poly real_of_float (xa)\\<^sub>p) =\n        Ipoly x (map_poly real_of_float l) +\n        Ipoly x (map_poly real_of_float r)) \\<and>\n       num_params l \\<le> num_params (xa)\\<^sub>p \\<and>\n       num_params r \\<le> num_params (xa)\\<^sub>p\n 2. \\<And>xa l r ord.\n       (l, r) = split_by_degree ord (poly.Bound xa) \\<Longrightarrow>\n       (maxdegree l \\<le> ord \\<and>\n        Ipoly x (map_poly real_of_float (poly.Bound xa)) =\n        Ipoly x (map_poly real_of_float l) +\n        Ipoly x (map_poly real_of_float r)) \\<and>\n       num_params l \\<le> num_params (poly.Bound xa) \\<and>\n       num_params r \\<le> num_params (poly.Bound xa)\n 3. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Add p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 4. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 5. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 6. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 7. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 8. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (l, r) = split_by_degree ord (c)\\<^sub>p\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (c)\\<^sub>p) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (c)\\<^sub>p \\<and>\n    num_params r \\<le> num_params (c)\\<^sub>p", "by simp"], ["proof (state)\nthis:\n  (maxdegree l \\<le> ord \\<and>\n   Ipoly x (map_poly real_of_float (c)\\<^sub>p) =\n   Ipoly x (map_poly real_of_float l) +\n   Ipoly x (map_poly real_of_float r)) \\<and>\n  num_params l \\<le> num_params (c)\\<^sub>p \\<and>\n  num_params r \\<le> num_params (c)\\<^sub>p\n\ngoal (7 subgoals):\n 1. \\<And>xa l r ord.\n       (l, r) = split_by_degree ord (poly.Bound xa) \\<Longrightarrow>\n       (maxdegree l \\<le> ord \\<and>\n        Ipoly x (map_poly real_of_float (poly.Bound xa)) =\n        Ipoly x (map_poly real_of_float l) +\n        Ipoly x (map_poly real_of_float r)) \\<and>\n       num_params l \\<le> num_params (poly.Bound xa) \\<and>\n       num_params r \\<le> num_params (poly.Bound xa)\n 2. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Add p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 3. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 4. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 5. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 6. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 7. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>xa l r ord.\n       (l, r) = split_by_degree ord (poly.Bound xa) \\<Longrightarrow>\n       (maxdegree l \\<le> ord \\<and>\n        Ipoly x (map_poly real_of_float (poly.Bound xa)) =\n        Ipoly x (map_poly real_of_float l) +\n        Ipoly x (map_poly real_of_float r)) \\<and>\n       num_params l \\<le> num_params (poly.Bound xa) \\<and>\n       num_params r \\<le> num_params (poly.Bound xa)\n 2. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Add p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 3. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 4. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 5. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 6. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 7. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Bound v l r ord)"], ["proof (state)\nthis:\n  (l, r) = split_by_degree ord (poly.Bound v)\n\ngoal (7 subgoals):\n 1. \\<And>xa l r ord.\n       (l, r) = split_by_degree ord (poly.Bound xa) \\<Longrightarrow>\n       (maxdegree l \\<le> ord \\<and>\n        Ipoly x (map_poly real_of_float (poly.Bound xa)) =\n        Ipoly x (map_poly real_of_float l) +\n        Ipoly x (map_poly real_of_float r)) \\<and>\n       num_params l \\<le> num_params (poly.Bound xa) \\<and>\n       num_params r \\<le> num_params (poly.Bound xa)\n 2. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Add p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 3. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 4. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 5. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 6. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 7. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (l, r) = split_by_degree ord (poly.Bound v)\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (poly.Bound v)) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (poly.Bound v) \\<and>\n    num_params r \\<le> num_params (poly.Bound v)", "by (cases ord) simp_all"], ["proof (state)\nthis:\n  (maxdegree l \\<le> ord \\<and>\n   Ipoly x (map_poly real_of_float (poly.Bound v)) =\n   Ipoly x (map_poly real_of_float l) +\n   Ipoly x (map_poly real_of_float r)) \\<and>\n  num_params l \\<le> num_params (poly.Bound v) \\<and>\n  num_params r \\<le> num_params (poly.Bound v)\n\ngoal (6 subgoals):\n 1. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Add p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 2. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 3. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 4. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 5. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 6. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Add p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 2. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 3. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 4. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 5. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 6. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Add p1 p2 l r ord)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_degree ?ord p1 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p1) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_degree ?ord p2 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p2) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_degree ord (Add p1 p2)\n\ngoal (6 subgoals):\n 1. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Add p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Add p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Add p1 p2) \\<and>\n                         num_params r \\<le> num_params (Add p1 p2)\n 2. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 3. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 4. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 5. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 6. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_degree ?ord p1 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p1) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_degree ?ord p2 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p2) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_degree ord (Add p1 p2)\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (Add p1 p2)) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (Add p1 p2) \\<and>\n    num_params r \\<le> num_params (Add p1 p2)", "by (cases ord) simp_all"], ["proof (state)\nthis:\n  (maxdegree l \\<le> ord \\<and>\n   Ipoly x (map_poly real_of_float (Add p1 p2)) =\n   Ipoly x (map_poly real_of_float l) +\n   Ipoly x (map_poly real_of_float r)) \\<and>\n  num_params l \\<le> num_params (Add p1 p2) \\<and>\n  num_params r \\<le> num_params (Add p1 p2)\n\ngoal (5 subgoals):\n 1. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 2. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 3. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 4. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 5. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 2. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 3. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 4. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 5. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Sub p1 p2 l r ord)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_degree ?ord p1 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p1) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_degree ?ord p2 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p2) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_degree ord (Sub p1 p2)\n\ngoal (5 subgoals):\n 1. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Sub p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Sub p1 p2) \\<and>\n                         num_params r \\<le> num_params (Sub p1 p2)\n 2. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 3. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 4. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 5. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_degree ?ord p1 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p1) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_degree ?ord p2 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p2) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_degree ord (Sub p1 p2)\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (Sub p1 p2) \\<and>\n    num_params r \\<le> num_params (Sub p1 p2)", "by (cases ord) simp_all"], ["proof (state)\nthis:\n  (maxdegree l \\<le> ord \\<and>\n   Ipoly x (map_poly real_of_float (Sub p1 p2)) =\n   Ipoly x (map_poly real_of_float l) +\n   Ipoly x (map_poly real_of_float r)) \\<and>\n  num_params l \\<le> num_params (Sub p1 p2) \\<and>\n  num_params r \\<le> num_params (Sub p1 p2)\n\ngoal (4 subgoals):\n 1. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 2. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 3. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 4. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 2. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 3. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 4. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Mul p1 p2 l r ord)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_degree ?ord p1 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p1) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_degree ?ord p2 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p2) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_degree ord (Mul p1 p2)\n\ngoal (4 subgoals):\n 1. \\<And>p1 p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (Mul p1 p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Mul p1 p2) \\<and>\n                         num_params r \\<le> num_params (Mul p1 p2)\n 2. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 3. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 4. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_degree ?ord p1 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p1) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p1 \\<and> num_params ?r \\<le> num_params p1\n  (?l, ?r) = split_by_degree ?ord p2 \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p2) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p2 \\<and> num_params ?r \\<le> num_params p2\n  (l, r) = split_by_degree ord (Mul p1 p2)\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (Mul p1 p2) \\<and>\n    num_params r \\<le> num_params (Mul p1 p2)", "by (cases ord) simp_all"], ["proof (state)\nthis:\n  (maxdegree l \\<le> ord \\<and>\n   Ipoly x (map_poly real_of_float (Mul p1 p2)) =\n   Ipoly x (map_poly real_of_float l) +\n   Ipoly x (map_poly real_of_float r)) \\<and>\n  num_params l \\<le> num_params (Mul p1 p2) \\<and>\n  num_params r \\<le> num_params (Mul p1 p2)\n\ngoal (3 subgoals):\n 1. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 2. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 3. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 2. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 3. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Neg p l r ord)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_degree ?ord p \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_degree ord (Neg p)\n\ngoal (3 subgoals):\n 1. \\<And>p l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Neg p)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Neg p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Neg p) \\<and>\n                         num_params r \\<le> num_params (Neg p)\n 2. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 3. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_degree ?ord p \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_degree ord (Neg p)\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (Neg p)) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (Neg p) \\<and>\n    num_params r \\<le> num_params (Neg p)", "by (cases ord) simp_all"], ["proof (state)\nthis:\n  (maxdegree l \\<le> ord \\<and>\n   Ipoly x (map_poly real_of_float (Neg p)) =\n   Ipoly x (map_poly real_of_float l) +\n   Ipoly x (map_poly real_of_float r)) \\<and>\n  num_params l \\<le> num_params (Neg p) \\<and>\n  num_params r \\<le> num_params (Neg p)\n\ngoal (2 subgoals):\n 1. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 2. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 2. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (Pw p k l r ord)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_degree ?ord p \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_degree ord (Pw p k)\n\ngoal (2 subgoals):\n 1. \\<And>p x2a l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p \\<and>\n                   num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (Pw p x2a)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (Pw p x2a)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (Pw p x2a) \\<and>\n                         num_params r \\<le> num_params (Pw p x2a)\n 2. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "thus ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_degree ?ord p \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_degree ord (Pw p k)\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (Pw p k)) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (Pw p k) \\<and>\n    num_params r \\<le> num_params (Pw p k)", "by (cases ord) simp_all"], ["proof (state)\nthis:\n  (maxdegree l \\<le> ord \\<and>\n   Ipoly x (map_poly real_of_float (Pw p k)) =\n   Ipoly x (map_poly real_of_float l) +\n   Ipoly x (map_poly real_of_float r)) \\<and>\n  num_params l \\<le> num_params (Pw p k) \\<and>\n  num_params r \\<le> num_params (Pw p k)\n\ngoal (1 subgoal):\n 1. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "case (CN c v p l r ord)"], ["proof (state)\nthis:\n  (?l, ?r) = split_by_degree ?ord c \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float c) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params c \\<and> num_params ?r \\<le> num_params c\n  (?l, ?r) = split_by_degree ?ord p \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_degree ord (CN c v p)\n\ngoal (1 subgoal):\n 1. \\<And>p1 x2a p2 l r ord.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord p1 \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float p1) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params p1 \\<and>\n                   num_params r \\<le> num_params p1;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p2 \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p2) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p2 \\<and>\n           num_params r \\<le> num_params p2;\n        (l, r) = split_by_degree ord (CN p1 x2a p2)\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN p1 x2a p2)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN p1 x2a p2) \\<and>\n                         num_params r \\<le> num_params (CN p1 x2a p2)", "then"], ["proof (chain)\npicking this:\n  (?l, ?r) = split_by_degree ?ord c \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float c) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params c \\<and> num_params ?r \\<le> num_params c\n  (?l, ?r) = split_by_degree ?ord p \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_degree ord (CN c v p)", "show ?case"], ["proof (prove)\nusing this:\n  (?l, ?r) = split_by_degree ?ord c \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float c) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params c \\<and> num_params ?r \\<le> num_params c\n  (?l, ?r) = split_by_degree ?ord p \\<Longrightarrow>\n  (maxdegree ?l \\<le> ?ord \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float ?l) +\n   Ipoly x (map_poly real_of_float ?r)) \\<and>\n  num_params ?l \\<le> num_params p \\<and> num_params ?r \\<le> num_params p\n  (l, r) = split_by_degree ord (CN c v p)\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (CN c v p)) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (CN c v p) \\<and>\n    num_params r \\<le> num_params (CN c v p)", "proof(cases ord)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l r ord.\n                (l, r) = split_by_degree ord c \\<Longrightarrow>\n                (maxdegree l \\<le> ord \\<and>\n                 Ipoly x (map_poly real_of_float c) =\n                 Ipoly x (map_poly real_of_float l) +\n                 Ipoly x (map_poly real_of_float r)) \\<and>\n                num_params l \\<le> num_params c \\<and>\n                num_params r \\<le> num_params c;\n     \\<And>l r ord.\n        (l, r) = split_by_degree ord p \\<Longrightarrow>\n        (maxdegree l \\<le> ord \\<and>\n         Ipoly x (map_poly real_of_float p) =\n         Ipoly x (map_poly real_of_float l) +\n         Ipoly x (map_poly real_of_float r)) \\<and>\n        num_params l \\<le> num_params p \\<and>\n        num_params r \\<le> num_params p;\n     (l, r) = split_by_degree ord (CN c v p); ord = 0\\<rbrakk>\n    \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                       Ipoly x (map_poly real_of_float (CN c v p)) =\n                       Ipoly x (map_poly real_of_float l) +\n                       Ipoly x (map_poly real_of_float r)) \\<and>\n                      num_params l \\<le> num_params (CN c v p) \\<and>\n                      num_params r \\<le> num_params (CN c v p)\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord c \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float c) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params c \\<and>\n                   num_params r \\<le> num_params c;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p \\<and>\n           num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (CN c v p); ord = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN c v p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN c v p) \\<and>\n                         num_params r \\<le> num_params (CN c v p)", "case (Suc m)"], ["proof (state)\nthis:\n  ord = Suc m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l r ord.\n                (l, r) = split_by_degree ord c \\<Longrightarrow>\n                (maxdegree l \\<le> ord \\<and>\n                 Ipoly x (map_poly real_of_float c) =\n                 Ipoly x (map_poly real_of_float l) +\n                 Ipoly x (map_poly real_of_float r)) \\<and>\n                num_params l \\<le> num_params c \\<and>\n                num_params r \\<le> num_params c;\n     \\<And>l r ord.\n        (l, r) = split_by_degree ord p \\<Longrightarrow>\n        (maxdegree l \\<le> ord \\<and>\n         Ipoly x (map_poly real_of_float p) =\n         Ipoly x (map_poly real_of_float l) +\n         Ipoly x (map_poly real_of_float r)) \\<and>\n        num_params l \\<le> num_params p \\<and>\n        num_params r \\<le> num_params p;\n     (l, r) = split_by_degree ord (CN c v p); ord = 0\\<rbrakk>\n    \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                       Ipoly x (map_poly real_of_float (CN c v p)) =\n                       Ipoly x (map_poly real_of_float l) +\n                       Ipoly x (map_poly real_of_float r)) \\<and>\n                      num_params l \\<le> num_params (CN c v p) \\<and>\n                      num_params r \\<le> num_params (CN c v p)\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord c \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float c) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params c \\<and>\n                   num_params r \\<le> num_params c;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p \\<and>\n           num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (CN c v p); ord = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN c v p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN c v p) \\<and>\n                         num_params r \\<le> num_params (CN c v p)", "obtain cl cr where cl_cr_def: \"(cl, cr) = split_by_degree (Suc m) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cl cr.\n        (cl, cr) = split_by_degree (Suc m) c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"split_by_degree (Suc m) c\", simp)"], ["proof (state)\nthis:\n  (cl, cr) = split_by_degree (Suc m) c\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l r ord.\n                (l, r) = split_by_degree ord c \\<Longrightarrow>\n                (maxdegree l \\<le> ord \\<and>\n                 Ipoly x (map_poly real_of_float c) =\n                 Ipoly x (map_poly real_of_float l) +\n                 Ipoly x (map_poly real_of_float r)) \\<and>\n                num_params l \\<le> num_params c \\<and>\n                num_params r \\<le> num_params c;\n     \\<And>l r ord.\n        (l, r) = split_by_degree ord p \\<Longrightarrow>\n        (maxdegree l \\<le> ord \\<and>\n         Ipoly x (map_poly real_of_float p) =\n         Ipoly x (map_poly real_of_float l) +\n         Ipoly x (map_poly real_of_float r)) \\<and>\n        num_params l \\<le> num_params p \\<and>\n        num_params r \\<le> num_params p;\n     (l, r) = split_by_degree ord (CN c v p); ord = 0\\<rbrakk>\n    \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                       Ipoly x (map_poly real_of_float (CN c v p)) =\n                       Ipoly x (map_poly real_of_float l) +\n                       Ipoly x (map_poly real_of_float r)) \\<and>\n                      num_params l \\<le> num_params (CN c v p) \\<and>\n                      num_params r \\<le> num_params (CN c v p)\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord c \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float c) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params c \\<and>\n                   num_params r \\<le> num_params c;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p \\<and>\n           num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (CN c v p); ord = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN c v p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN c v p) \\<and>\n                         num_params r \\<le> num_params (CN c v p)", "obtain pl pr where pl_pr_def: \"(pl, pr) = split_by_degree m p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pl pr.\n        (pl, pr) = split_by_degree m p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"split_by_degree m p\", simp)"], ["proof (state)\nthis:\n  (pl, pr) = split_by_degree m p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l r ord.\n                (l, r) = split_by_degree ord c \\<Longrightarrow>\n                (maxdegree l \\<le> ord \\<and>\n                 Ipoly x (map_poly real_of_float c) =\n                 Ipoly x (map_poly real_of_float l) +\n                 Ipoly x (map_poly real_of_float r)) \\<and>\n                num_params l \\<le> num_params c \\<and>\n                num_params r \\<le> num_params c;\n     \\<And>l r ord.\n        (l, r) = split_by_degree ord p \\<Longrightarrow>\n        (maxdegree l \\<le> ord \\<and>\n         Ipoly x (map_poly real_of_float p) =\n         Ipoly x (map_poly real_of_float l) +\n         Ipoly x (map_poly real_of_float r)) \\<and>\n        num_params l \\<le> num_params p \\<and>\n        num_params r \\<le> num_params p;\n     (l, r) = split_by_degree ord (CN c v p); ord = 0\\<rbrakk>\n    \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                       Ipoly x (map_poly real_of_float (CN c v p)) =\n                       Ipoly x (map_poly real_of_float l) +\n                       Ipoly x (map_poly real_of_float r)) \\<and>\n                      num_params l \\<le> num_params (CN c v p) \\<and>\n                      num_params r \\<le> num_params (CN c v p)\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord c \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float c) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params c \\<and>\n                   num_params r \\<le> num_params c;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p \\<and>\n           num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (CN c v p); ord = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN c v p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN c v p) \\<and>\n                         num_params r \\<le> num_params (CN c v p)", "have [simp]: \"Ipoly x p = Ipoly x pl + Ipoly x pr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ipoly x (map_poly real_of_float p) =\n    Ipoly x (map_poly real_of_float pl) +\n    Ipoly x (map_poly real_of_float pr)", "using CN(2)[OF pl_pr_def]"], ["proof (prove)\nusing this:\n  (maxdegree pl \\<le> m \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float pl) +\n   Ipoly x (map_poly real_of_float pr)) \\<and>\n  num_params pl \\<le> num_params p \\<and> num_params pr \\<le> num_params p\n\ngoal (1 subgoal):\n 1. Ipoly x (map_poly real_of_float p) =\n    Ipoly x (map_poly real_of_float pl) +\n    Ipoly x (map_poly real_of_float pr)", "by (cases ord) simp_all"], ["proof (state)\nthis:\n  Ipoly x (map_poly real_of_float p) =\n  Ipoly x (map_poly real_of_float pl) + Ipoly x (map_poly real_of_float pr)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l r ord.\n                (l, r) = split_by_degree ord c \\<Longrightarrow>\n                (maxdegree l \\<le> ord \\<and>\n                 Ipoly x (map_poly real_of_float c) =\n                 Ipoly x (map_poly real_of_float l) +\n                 Ipoly x (map_poly real_of_float r)) \\<and>\n                num_params l \\<le> num_params c \\<and>\n                num_params r \\<le> num_params c;\n     \\<And>l r ord.\n        (l, r) = split_by_degree ord p \\<Longrightarrow>\n        (maxdegree l \\<le> ord \\<and>\n         Ipoly x (map_poly real_of_float p) =\n         Ipoly x (map_poly real_of_float l) +\n         Ipoly x (map_poly real_of_float r)) \\<and>\n        num_params l \\<le> num_params p \\<and>\n        num_params r \\<le> num_params p;\n     (l, r) = split_by_degree ord (CN c v p); ord = 0\\<rbrakk>\n    \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                       Ipoly x (map_poly real_of_float (CN c v p)) =\n                       Ipoly x (map_poly real_of_float l) +\n                       Ipoly x (map_poly real_of_float r)) \\<and>\n                      num_params l \\<le> num_params (CN c v p) \\<and>\n                      num_params r \\<le> num_params (CN c v p)\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord c \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float c) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params c \\<and>\n                   num_params r \\<le> num_params c;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p \\<and>\n           num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (CN c v p); ord = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN c v p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN c v p) \\<and>\n                         num_params r \\<le> num_params (CN c v p)", "from CN(3)"], ["proof (chain)\npicking this:\n  (l, r) = split_by_degree ord (CN c v p)", "have l_decomp: \"l = CN cl v pl\" and r_decomp: \"r = CN cr v pr\""], ["proof (prove)\nusing this:\n  (l, r) = split_by_degree ord (CN c v p)\n\ngoal (1 subgoal):\n 1. l = CN cl v pl &&& r = CN cr v pr", "by (simp_all add: Suc cl_cr_def[symmetric] pl_pr_def[symmetric])"], ["proof (state)\nthis:\n  l = CN cl v pl\n  r = CN cr v pr\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l r ord.\n                (l, r) = split_by_degree ord c \\<Longrightarrow>\n                (maxdegree l \\<le> ord \\<and>\n                 Ipoly x (map_poly real_of_float c) =\n                 Ipoly x (map_poly real_of_float l) +\n                 Ipoly x (map_poly real_of_float r)) \\<and>\n                num_params l \\<le> num_params c \\<and>\n                num_params r \\<le> num_params c;\n     \\<And>l r ord.\n        (l, r) = split_by_degree ord p \\<Longrightarrow>\n        (maxdegree l \\<le> ord \\<and>\n         Ipoly x (map_poly real_of_float p) =\n         Ipoly x (map_poly real_of_float l) +\n         Ipoly x (map_poly real_of_float r)) \\<and>\n        num_params l \\<le> num_params p \\<and>\n        num_params r \\<le> num_params p;\n     (l, r) = split_by_degree ord (CN c v p); ord = 0\\<rbrakk>\n    \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                       Ipoly x (map_poly real_of_float (CN c v p)) =\n                       Ipoly x (map_poly real_of_float l) +\n                       Ipoly x (map_poly real_of_float r)) \\<and>\n                      num_params l \\<le> num_params (CN c v p) \\<and>\n                      num_params r \\<le> num_params (CN c v p)\n 2. \\<And>nat.\n       \\<lbrakk>\\<And>l r ord.\n                   (l, r) = split_by_degree ord c \\<Longrightarrow>\n                   (maxdegree l \\<le> ord \\<and>\n                    Ipoly x (map_poly real_of_float c) =\n                    Ipoly x (map_poly real_of_float l) +\n                    Ipoly x (map_poly real_of_float r)) \\<and>\n                   num_params l \\<le> num_params c \\<and>\n                   num_params r \\<le> num_params c;\n        \\<And>l r ord.\n           (l, r) = split_by_degree ord p \\<Longrightarrow>\n           (maxdegree l \\<le> ord \\<and>\n            Ipoly x (map_poly real_of_float p) =\n            Ipoly x (map_poly real_of_float l) +\n            Ipoly x (map_poly real_of_float r)) \\<and>\n           num_params l \\<le> num_params p \\<and>\n           num_params r \\<le> num_params p;\n        (l, r) = split_by_degree ord (CN c v p); ord = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                          Ipoly x (map_poly real_of_float (CN c v p)) =\n                          Ipoly x (map_poly real_of_float l) +\n                          Ipoly x (map_poly real_of_float r)) \\<and>\n                         num_params l \\<le> num_params (CN c v p) \\<and>\n                         num_params r \\<le> num_params (CN c v p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (CN c v p)) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (CN c v p) \\<and>\n    num_params r \\<le> num_params (CN c v p)", "using CN(1)[OF cl_cr_def]  CN(2)[OF pl_pr_def]"], ["proof (prove)\nusing this:\n  (maxdegree cl \\<le> Suc m \\<and>\n   Ipoly x (map_poly real_of_float c) =\n   Ipoly x (map_poly real_of_float cl) +\n   Ipoly x (map_poly real_of_float cr)) \\<and>\n  num_params cl \\<le> num_params c \\<and> num_params cr \\<le> num_params c\n  (maxdegree pl \\<le> m \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float pl) +\n   Ipoly x (map_poly real_of_float pr)) \\<and>\n  num_params pl \\<le> num_params p \\<and> num_params pr \\<le> num_params p\n\ngoal (1 subgoal):\n 1. (maxdegree l \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (CN c v p)) =\n     Ipoly x (map_poly real_of_float l) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params l \\<le> num_params (CN c v p) \\<and>\n    num_params r \\<le> num_params (CN c v p)", "unfolding l_decomp"], ["proof (prove)\nusing this:\n  (maxdegree cl \\<le> Suc m \\<and>\n   Ipoly x (map_poly real_of_float c) =\n   Ipoly x (map_poly real_of_float cl) +\n   Ipoly x (map_poly real_of_float cr)) \\<and>\n  num_params cl \\<le> num_params c \\<and> num_params cr \\<le> num_params c\n  (maxdegree pl \\<le> m \\<and>\n   Ipoly x (map_poly real_of_float p) =\n   Ipoly x (map_poly real_of_float pl) +\n   Ipoly x (map_poly real_of_float pr)) \\<and>\n  num_params pl \\<le> num_params p \\<and> num_params pr \\<le> num_params p\n\ngoal (1 subgoal):\n 1. (maxdegree (CN cl v pl) \\<le> ord \\<and>\n     Ipoly x (map_poly real_of_float (CN c v p)) =\n     Ipoly x (map_poly real_of_float (CN cl v pl)) +\n     Ipoly x (map_poly real_of_float r)) \\<and>\n    num_params (CN cl v pl) \\<le> num_params (CN c v p) \\<and>\n    num_params r \\<le> num_params (CN c v p)", "by (cases p) (auto simp add: l_decomp r_decomp algebra_simps Suc)"], ["proof (state)\nthis:\n  (maxdegree l \\<le> ord \\<and>\n   Ipoly x (map_poly real_of_float (CN c v p)) =\n   Ipoly x (map_poly real_of_float l) +\n   Ipoly x (map_poly real_of_float r)) \\<and>\n  num_params l \\<le> num_params (CN c v p) \\<and>\n  num_params r \\<le> num_params (CN c v p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l r ord.\n                (l, r) = split_by_degree ord c \\<Longrightarrow>\n                (maxdegree l \\<le> ord \\<and>\n                 Ipoly x (map_poly real_of_float c) =\n                 Ipoly x (map_poly real_of_float l) +\n                 Ipoly x (map_poly real_of_float r)) \\<and>\n                num_params l \\<le> num_params c \\<and>\n                num_params r \\<le> num_params c;\n     \\<And>l r ord.\n        (l, r) = split_by_degree ord p \\<Longrightarrow>\n        (maxdegree l \\<le> ord \\<and>\n         Ipoly x (map_poly real_of_float p) =\n         Ipoly x (map_poly real_of_float l) +\n         Ipoly x (map_poly real_of_float r)) \\<and>\n        num_params l \\<le> num_params p \\<and>\n        num_params r \\<le> num_params p;\n     (l, r) = split_by_degree ord (CN c v p); ord = 0\\<rbrakk>\n    \\<Longrightarrow> (maxdegree l \\<le> ord \\<and>\n                       Ipoly x (map_poly real_of_float (CN c v p)) =\n                       Ipoly x (map_poly real_of_float l) +\n                       Ipoly x (map_poly real_of_float r)) \\<and>\n                      num_params l \\<le> num_params (CN c v p) \\<and>\n                      num_params r \\<le> num_params (CN c v p)", "qed simp"], ["proof (state)\nthis:\n  (maxdegree l \\<le> ord \\<and>\n   Ipoly x (map_poly real_of_float (CN c v p)) =\n   Ipoly x (map_poly real_of_float l) +\n   Ipoly x (map_poly real_of_float r)) \\<and>\n  num_params l \\<le> num_params (CN c v p) \\<and>\n  num_params r \\<le> num_params (CN c v p)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Operations on lists.\\<close>"], ["", "lemma length_map2[simp]: \"length (map2 f a b) = min (length a) (length b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map2 f a b) = min (length a) (length b)", "proof(induction \"map2 f a b\" arbitrary: a b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       [] = map2 f a b \\<Longrightarrow>\n       length (map2 f a b) = min (length a) (length b)\n 2. \\<And>a x aa b.\n       \\<lbrakk>\\<And>a b.\n                   x = map2 f a b \\<Longrightarrow>\n                   length (map2 f a b) = min (length a) (length b);\n        a # x = map2 f aa b\\<rbrakk>\n       \\<Longrightarrow> length (map2 f aa b) = min (length aa) (length b)", "case (Nil a b)"], ["proof (state)\nthis:\n  [] = map2 f a b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       [] = map2 f a b \\<Longrightarrow>\n       length (map2 f a b) = min (length a) (length b)\n 2. \\<And>a x aa b.\n       \\<lbrakk>\\<And>a b.\n                   x = map2 f a b \\<Longrightarrow>\n                   length (map2 f a b) = min (length a) (length b);\n        a # x = map2 f aa b\\<rbrakk>\n       \\<Longrightarrow> length (map2 f aa b) = min (length aa) (length b)", "hence \"a = [] | b = []\""], ["proof (prove)\nusing this:\n  [] = map2 f a b\n\ngoal (1 subgoal):\n 1. a = [] \\<or> b = []", "by(cases a, simp, cases b, simp_all)"], ["proof (state)\nthis:\n  a = [] \\<or> b = []\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       [] = map2 f a b \\<Longrightarrow>\n       length (map2 f a b) = min (length a) (length b)\n 2. \\<And>a x aa b.\n       \\<lbrakk>\\<And>a b.\n                   x = map2 f a b \\<Longrightarrow>\n                   length (map2 f a b) = min (length a) (length b);\n        a # x = map2 f aa b\\<rbrakk>\n       \\<Longrightarrow> length (map2 f aa b) = min (length aa) (length b)", "then"], ["proof (chain)\npicking this:\n  a = [] \\<or> b = []", "show ?case"], ["proof (prove)\nusing this:\n  a = [] \\<or> b = []\n\ngoal (1 subgoal):\n 1. length (map2 f a b) = min (length a) (length b)", "by auto"], ["proof (state)\nthis:\n  length (map2 f a b) = min (length a) (length b)\n\ngoal (1 subgoal):\n 1. \\<And>a x aa b.\n       \\<lbrakk>\\<And>a b.\n                   x = map2 f a b \\<Longrightarrow>\n                   length (map2 f a b) = min (length a) (length b);\n        a # x = map2 f aa b\\<rbrakk>\n       \\<Longrightarrow> length (map2 f aa b) = min (length aa) (length b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x aa b.\n       \\<lbrakk>\\<And>a b.\n                   x = map2 f a b \\<Longrightarrow>\n                   length (map2 f a b) = min (length a) (length b);\n        a # x = map2 f aa b\\<rbrakk>\n       \\<Longrightarrow> length (map2 f aa b) = min (length aa) (length b)", "case (Cons x c a b)"], ["proof (state)\nthis:\n  c = map2 f ?a ?b \\<Longrightarrow>\n  length (map2 f ?a ?b) = min (length ?a) (length ?b)\n  x # c = map2 f a b\n\ngoal (1 subgoal):\n 1. \\<And>a x aa b.\n       \\<lbrakk>\\<And>a b.\n                   x = map2 f a b \\<Longrightarrow>\n                   length (map2 f a b) = min (length a) (length b);\n        a # x = map2 f aa b\\<rbrakk>\n       \\<Longrightarrow> length (map2 f aa b) = min (length aa) (length b)", "have \"0 < length a \\<and> 0 < length b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length a \\<and> 0 < length b", "using Cons(2)"], ["proof (prove)\nusing this:\n  x # c = map2 f a b\n\ngoal (1 subgoal):\n 1. 0 < length a \\<and> 0 < length b", "by (cases a, simp, cases b, simp_all)"], ["proof (state)\nthis:\n  0 < length a \\<and> 0 < length b\n\ngoal (1 subgoal):\n 1. \\<And>a x aa b.\n       \\<lbrakk>\\<And>a b.\n                   x = map2 f a b \\<Longrightarrow>\n                   length (map2 f a b) = min (length a) (length b);\n        a # x = map2 f aa b\\<rbrakk>\n       \\<Longrightarrow> length (map2 f aa b) = min (length aa) (length b)", "then"], ["proof (chain)\npicking this:\n  0 < length a \\<and> 0 < length b", "obtain xa ar xb br\n    where a_decomp[simp]: \"a = xa # ar\"\n      and   b_decomp[simp]: \"b = xb # br\""], ["proof (prove)\nusing this:\n  0 < length a \\<and> 0 < length b\n\ngoal (1 subgoal):\n 1. (\\<And>xa ar xb br.\n        \\<lbrakk>a = xa # ar; b = xb # br\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases a, simp_all, cases b, simp_all)"], ["proof (state)\nthis:\n  a = xa # ar\n  b = xb # br\n\ngoal (1 subgoal):\n 1. \\<And>a x aa b.\n       \\<lbrakk>\\<And>a b.\n                   x = map2 f a b \\<Longrightarrow>\n                   length (map2 f a b) = min (length a) (length b);\n        a # x = map2 f aa b\\<rbrakk>\n       \\<Longrightarrow> length (map2 f aa b) = min (length aa) (length b)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map2 f a b) = min (length a) (length b)", "using Cons"], ["proof (prove)\nusing this:\n  c = map2 f ?a ?b \\<Longrightarrow>\n  length (map2 f ?a ?b) = min (length ?a) (length ?b)\n  x # c = map2 f a b\n\ngoal (1 subgoal):\n 1. length (map2 f a b) = min (length a) (length b)", "by simp"], ["proof (state)\nthis:\n  length (map2 f a b) = min (length a) (length b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map2_nth[simp]:\n  assumes \"n < length a\"\n  assumes \"n < length b\"\n  shows \"(map2 f a b)!n = f (a!n) (b!n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 f a b ! n = f (a ! n) (b ! n)", "using assms"], ["proof (prove)\nusing this:\n  n < length a\n  n < length b\n\ngoal (1 subgoal):\n 1. map2 f a b ! n = f (a ! n) (b ! n)", "proof(induction n arbitrary: a b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>0 < length a; 0 < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! 0 = f (a ! 0) (b ! 0)\n 2. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "case (0 a b)"], ["proof (state)\nthis:\n  0 < length a\n  0 < length b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>0 < length a; 0 < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! 0 = f (a ! 0) (b ! 0)\n 2. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "have \"0 < length a\" and \"0 < length b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length a &&& 0 < length b", "using 0"], ["proof (prove)\nusing this:\n  0 < length a\n  0 < length b\n\ngoal (1 subgoal):\n 1. 0 < length a &&& 0 < length b", "by simp_all"], ["proof (state)\nthis:\n  0 < length a\n  0 < length b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>0 < length a; 0 < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! 0 = f (a ! 0) (b ! 0)\n 2. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "thus ?case"], ["proof (prove)\nusing this:\n  0 < length a\n  0 < length b\n\ngoal (1 subgoal):\n 1. map2 f a b ! 0 = f (a ! 0) (b ! 0)", "using 0"], ["proof (prove)\nusing this:\n  0 < length a\n  0 < length b\n  0 < length a\n  0 < length b\n\ngoal (1 subgoal):\n 1. map2 f a b ! 0 = f (a ! 0) (b ! 0)", "by simp"], ["proof (state)\nthis:\n  map2 f a b ! 0 = f (a ! 0) (b ! 0)\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "case (Suc n a b)"], ["proof (state)\nthis:\n  \\<lbrakk>n < length ?a; n < length ?b\\<rbrakk>\n  \\<Longrightarrow> map2 f ?a ?b ! n = f (?a ! n) (?b ! n)\n  Suc n < length a\n  Suc n < length b\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "from Suc.prems"], ["proof (chain)\npicking this:\n  Suc n < length a\n  Suc n < length b", "have  \"0 < length a\" \"0 < length b\" \"n < length (tl a)\" \"n < length (tl b)\""], ["proof (prove)\nusing this:\n  Suc n < length a\n  Suc n < length b\n\ngoal (1 subgoal):\n 1. (0 < length a &&& 0 < length b) &&&\n    n < length (tl a) &&& n < length (tl b)", "using Suc.prems"], ["proof (prove)\nusing this:\n  Suc n < length a\n  Suc n < length b\n  Suc n < length a\n  Suc n < length b\n\ngoal (1 subgoal):\n 1. (0 < length a &&& 0 < length b) &&&\n    n < length (tl a) &&& n < length (tl b)", "by auto"], ["proof (state)\nthis:\n  0 < length a\n  0 < length b\n  n < length (tl a)\n  n < length (tl b)\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "have \"map2 f a b = map2 f (hd a # tl a) (hd b # tl b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 f a b = map2 f (hd a # tl a) (hd b # tl b)", "using \\<open>0 < length a\\<close> \\<open>0 < length b\\<close>"], ["proof (prove)\nusing this:\n  0 < length a\n  0 < length b\n\ngoal (1 subgoal):\n 1. map2 f a b = map2 f (hd a # tl a) (hd b # tl b)", "by simp"], ["proof (state)\nthis:\n  map2 f a b = map2 f (hd a # tl a) (hd b # tl b)\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "also"], ["proof (state)\nthis:\n  map2 f a b = map2 f (hd a # tl a) (hd b # tl b)\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "have \"\\<dots> ! Suc n = map2 f (tl a) (tl b) ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 f (hd a # tl a) (hd b # tl b) ! Suc n = map2 f (tl a) (tl b) ! n", "by simp"], ["proof (state)\nthis:\n  map2 f (hd a # tl a) (hd b # tl b) ! Suc n = map2 f (tl a) (tl b) ! n\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "also"], ["proof (state)\nthis:\n  map2 f (hd a # tl a) (hd b # tl b) ! Suc n = map2 f (tl a) (tl b) ! n\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "have \"\\<dots> = f (tl a ! n) (tl b ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map2 f (tl a) (tl b) ! n = f (tl a ! n) (tl b ! n)", "using \\<open>n < length (tl a)\\<close> \\<open>n < length (tl b)\\<close>"], ["proof (prove)\nusing this:\n  n < length (tl a)\n  n < length (tl b)\n\ngoal (1 subgoal):\n 1. map2 f (tl a) (tl b) ! n = f (tl a ! n) (tl b ! n)", "by (rule Suc.IH)"], ["proof (state)\nthis:\n  map2 f (tl a) (tl b) ! n = f (tl a ! n) (tl b ! n)\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "also"], ["proof (state)\nthis:\n  map2 f (tl a) (tl b) ! n = f (tl a ! n) (tl b ! n)\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "have \"tl a ! n = (hd a # tl a) ! Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl a ! n = (hd a # tl a) ! Suc n", "by simp"], ["proof (state)\nthis:\n  tl a ! n = (hd a # tl a) ! Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "also"], ["proof (state)\nthis:\n  tl a ! n = (hd a # tl a) ! Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "have \"(hd a # tl a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd a # tl a = a", "using \\<open>0 < length a\\<close>"], ["proof (prove)\nusing this:\n  0 < length a\n\ngoal (1 subgoal):\n 1. hd a # tl a = a", "by simp"], ["proof (state)\nthis:\n  hd a # tl a = a\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "also"], ["proof (state)\nthis:\n  hd a # tl a = a\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "have \"tl b ! n = (hd b # tl b) ! Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl b ! n = (hd b # tl b) ! Suc n", "by simp"], ["proof (state)\nthis:\n  tl b ! n = (hd b # tl b) ! Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "also"], ["proof (state)\nthis:\n  tl b ! n = (hd b # tl b) ! Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "have \"(hd b # tl b) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd b # tl b = b", "using \\<open>0 < length b\\<close>"], ["proof (prove)\nusing this:\n  0 < length b\n\ngoal (1 subgoal):\n 1. hd b # tl b = b", "by simp"], ["proof (state)\nthis:\n  hd b # tl b = b\n\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>n < length a; n < length b\\<rbrakk>\n                   \\<Longrightarrow> map2 f a b ! n = f (a ! n) (b ! n);\n        Suc n < length a; Suc n < length b\\<rbrakk>\n       \\<Longrightarrow> map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "finally"], ["proof (chain)\npicking this:\n  map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)\n\ngoal (1 subgoal):\n 1. map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)", "."], ["proof (state)\nthis:\n  map2 f a b ! Suc n = f (a ! Suc n) (b ! Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Translating a polynomial by a vector.\\<close>"], ["", "fun poly_translate :: \"'a list \\<Rightarrow> 'a poly \\<Rightarrow> 'a poly\"\n  where \"poly_translate vs (poly.C c)  = poly.C c\"\n  | \"poly_translate vs (poly.Bound n) = poly.Add (poly.Bound n) (poly.C (vs ! n))\"\n  | \"poly_translate vs (poly.Add l r) = poly.Add (poly_translate vs l) (poly_translate vs r)\"\n  | \"poly_translate vs (poly.Sub l r) = poly.Sub (poly_translate vs l) (poly_translate vs r)\"\n  | \"poly_translate vs (poly.Mul l r) = poly.Mul (poly_translate vs l) (poly_translate vs r)\"\n  | \"poly_translate vs (poly.Neg p) = poly.Neg (poly_translate vs p)\"\n  | \"poly_translate vs (poly.Pw p n) = poly.Pw (poly_translate vs p) n\"\n  | \"poly_translate vs (poly.CN c n p) = poly.Add (poly_translate vs c) (poly.Mul (poly.Add (poly.Bound n) (poly.C (vs ! n))) (poly_translate vs p))\""], ["", "text \\<open>Translating a polynomial is equivalent to translating its argument.\\<close>"], ["", "lemma poly_translate_correct:\n  assumes \"num_params p \\<le> length x\"\n  assumes \"length x = length v\"\n  shows \"Ipoly x (poly_translate v p) = Ipoly (map2 (+) x v) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ipoly x (poly_translate v p) = Ipoly (map2 (+) x v) p", "using assms"], ["proof (prove)\nusing this:\n  num_params p \\<le> length x\n  length x = length v\n\ngoal (1 subgoal):\n 1. Ipoly x (poly_translate v p) = Ipoly (map2 (+) x v) p", "by (induction p, simp_all)"], ["", "lemma real_poly_translate: \n  assumes \"num_params p \\<le> length v\"\n  shows \"Ipoly x (map_poly real_of_float (poly_translate v p)) = Ipoly x (poly_translate v (map_poly real_of_float p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ipoly x (map_poly real_of_float (poly_translate v p)) =\n    Ipoly x\n     (poly_translate (map real_of_float v) (map_poly real_of_float p))", "using assms"], ["proof (prove)\nusing this:\n  num_params p \\<le> length v\n\ngoal (1 subgoal):\n 1. Ipoly x (map_poly real_of_float (poly_translate v p)) =\n    Ipoly x\n     (poly_translate (map real_of_float v) (map_poly real_of_float p))", "by (induction p, simp_all)"], ["", "lemma num_params_poly_translate[simp]:\n  shows \"num_params (poly_translate v p) = num_params p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_params (poly_translate v p) = num_params p", "by (induction p, simp_all)"], ["", "end"]]}