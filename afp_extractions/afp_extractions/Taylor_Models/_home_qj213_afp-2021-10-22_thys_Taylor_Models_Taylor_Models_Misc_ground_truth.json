{"file_name": "/home/qj213/afp-2021-10-22/thys/Taylor_Models/Taylor_Models_Misc.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Taylor_Models", "problem_names": ["lemma of_nat_real_float_equiv: \"(of_nat n :: real) = (of_nat n :: float)\"", "lemma fact_real_float_equiv: \"(fact n :: float) = (fact n :: real)\"", "lemma Some_those_length:\n  \"those ys = Some xs \\<Longrightarrow> length xs = length ys\"", "lemma those_eq_None_iff: \"those ys = None \\<longleftrightarrow> None \\<in> set ys\"", "lemma those_eq_Some_iff: \"those ys = (Some xs) \\<longleftrightarrow> (ys = map Some xs)\"", "lemma Some_those_nth:\n  assumes \"those ys = Some xs\"\n  assumes \"i < length xs\"\n  shows \"Some (xs!i) = ys!i\"", "lemma fun_pow: \"f^n = (\\<lambda>x. (f x)^n)\"", "lemma fa_translate_correct:\n  assumes \"max_Var_floatarith f \\<le> length I\"\n  assumes \"length v = length I\"\n  shows \"interpret_floatarith (fa_translate v f) I = interpret_floatarith f (map2 (+) I v)\"", "lemma finite_vars_floatarith[simp]: \"finite (vars_floatarith x)\"", "lemma max_Var_floatarith_eq_Max_vars_floatarith:\n  \"max_Var_floatarith fa = (if vars_floatarith fa = {} then 0 else Suc (Max (vars_floatarith fa)))\""], "translations": [["", "lemma of_nat_real_float_equiv: \"(of_nat n :: real) = (of_nat n :: float)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real n = real_of_float (of_nat n)", "by (induction n, simp_all add: of_nat_def)"], ["", "lemma fact_real_float_equiv: \"(fact n :: float) = (fact n :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_float (fact n) = fact n", "by (induction n) simp_all"], ["", "lemma Some_those_length:\n  \"those ys = Some xs \\<Longrightarrow> length xs = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. those ys = Some xs \\<Longrightarrow> length xs = length ys", "by (induction ys arbitrary: xs) (auto split: option.splits)"], ["", "lemma those_eq_None_iff: \"those ys = None \\<longleftrightarrow> None \\<in> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (those ys = None) = (None \\<in> set ys)", "by (induction ys) (auto simp: split: option.splits)"], ["", "lemma those_eq_Some_iff: \"those ys = (Some xs) \\<longleftrightarrow> (ys = map Some xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (those ys = Some xs) = (ys = map Some xs)", "by (induction ys arbitrary: xs) (auto simp: split: option.splits)"], ["", "lemma Some_those_nth:\n  assumes \"those ys = Some xs\"\n  assumes \"i < length xs\"\n  shows \"Some (xs!i) = ys!i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (xs ! i) = ys ! i", "using Some_those_length[OF assms(1)] assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n  those ys = Some xs\n  i < length xs\n\ngoal (1 subgoal):\n 1. Some (xs ! i) = ys ! i", "by (induction xs ys arbitrary: i rule: list_induct2)\n    (auto split: option.splits nat.splits simp: nth_Cons)"], ["", "lemma fun_pow: \"f^n = (\\<lambda>x. (f x)^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ^ n = (\\<lambda>x. f x ^ n)", "by (induction n, simp_all)"], ["", "context includes floatarith_notation begin"], ["", "text \\<open>Translate floatarith expressions by a vector of floats.\\<close>"], ["", "fun fa_translate :: \"float list \\<Rightarrow> floatarith \\<Rightarrow> floatarith\"\nwhere \"fa_translate v (Add a b) = Add (fa_translate v a) (fa_translate v b)\"\n    | \"fa_translate v (Minus a) = Minus (fa_translate v a)\"\n    | \"fa_translate v (Mult a b) = Mult (fa_translate v a) (fa_translate v b)\"\n    | \"fa_translate v (Inverse a) = Inverse (fa_translate v a)\"\n    | \"fa_translate v (Cos a) = Cos (fa_translate v a)\"\n    | \"fa_translate v (Arctan a) = Arctan (fa_translate v a)\"\n    | \"fa_translate v (Min a b) = Min (fa_translate v a) (fa_translate v b)\"\n    | \"fa_translate v (Max a b) = Max (fa_translate v a) (fa_translate v b)\"\n    | \"fa_translate v (Abs a) = Abs (fa_translate v a)\"\n    | \"fa_translate v (Sqrt a) = Sqrt (fa_translate v a)\"\n    | \"fa_translate v (Exp a) = Exp (fa_translate v a)\"\n    | \"fa_translate v (Ln a) = Ln (fa_translate v a)\"\n    | \"fa_translate v (Var n) = Add (Var n) (Num (v!n))\"\n    | \"fa_translate v (Power a n) = Power (fa_translate v a) n\"\n    | \"fa_translate v (Powr a b) = Powr (fa_translate v a) (fa_translate v b)\"\n    | \"fa_translate v (Floor x) = Floor (fa_translate v x)\"\n    | \"fa_translate v (Num c) = Num c\"\n    | \"fa_translate v Pi = Pi\""], ["", "lemma fa_translate_correct:\n  assumes \"max_Var_floatarith f \\<le> length I\"\n  assumes \"length v = length I\"\n  shows \"interpret_floatarith (fa_translate v f) I = interpret_floatarith f (map2 (+) I v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interpret_floatarith (fa_translate v f) I =\n    interpret_floatarith f (map2 (+) I (map real_of_float v))", "using assms"], ["proof (prove)\nusing this:\n  max_Var_floatarith f \\<le> length I\n  length v = length I\n\ngoal (1 subgoal):\n 1. interpret_floatarith (fa_translate v f) I =\n    interpret_floatarith f (map2 (+) I (map real_of_float v))", "by (induction f, simp_all)"], ["", "primrec vars_floatarith where\n  \"vars_floatarith (Add a b) = (vars_floatarith a) \\<union> (vars_floatarith b)\"\n| \"vars_floatarith (Mult a b) = (vars_floatarith a) \\<union> (vars_floatarith b)\"\n| \"vars_floatarith (Inverse a) = vars_floatarith a\"\n| \"vars_floatarith (Minus a) = vars_floatarith a\"\n| \"vars_floatarith (Num a) = {}\"\n| \"vars_floatarith (Var i) = {i}\"\n| \"vars_floatarith (Cos a) = vars_floatarith a\"\n| \"vars_floatarith (Arctan a) = vars_floatarith a\"\n| \"vars_floatarith (Abs a) = vars_floatarith a\"\n| \"vars_floatarith (Max a b) = (vars_floatarith a) \\<union> (vars_floatarith b)\"\n| \"vars_floatarith (Min a b) = (vars_floatarith a) \\<union> (vars_floatarith b)\"\n| \"vars_floatarith (Pi) = {}\"\n| \"vars_floatarith (Sqrt a) = vars_floatarith a\"\n| \"vars_floatarith (Exp a) = vars_floatarith a\"\n| \"vars_floatarith (Powr a b) = (vars_floatarith a) \\<union> (vars_floatarith b)\"\n| \"vars_floatarith (Ln a) = vars_floatarith a\"\n| \"vars_floatarith (Power a n) = vars_floatarith a\"\n| \"vars_floatarith (Floor a) = vars_floatarith a\""], ["", "lemma finite_vars_floatarith[simp]: \"finite (vars_floatarith x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (vars_floatarith x)", "by (induction x) auto"], ["", "end"], ["", "lemma max_Var_floatarith_eq_Max_vars_floatarith:\n  \"max_Var_floatarith fa = (if vars_floatarith fa = {} then 0 else Suc (Max (vars_floatarith fa)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_Var_floatarith fa =\n    (if vars_floatarith fa = {} then 0 else Suc (Max (vars_floatarith fa)))", "by (induction fa) (auto split: if_splits simp: Max_Un Max_eq_iff max_def)"], ["", "end"]]}