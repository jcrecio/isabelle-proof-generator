{"file_name": "/home/qj213/afp-2021-10-22/thys/Tycon/Writer_Transformer.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Tycon", "problem_names": ["lemma coerce_writerT_abs [simp]:\n  \"coerce\\<cdot>(writerT_abs\\<cdot>x) = writerT_abs\\<cdot>(coerce\\<cdot>x)\"", "lemma coerce_WriterT [simp]: \"coerce\\<cdot>(WriterT\\<cdot>k) = WriterT\\<cdot>(coerce\\<cdot>k)\"", "lemma writerT_cases [case_names WriterT]:\n  obtains k where \"y = WriterT\\<cdot>k\"", "lemma WriterT_runWriterT [simp]: \"WriterT\\<cdot>(runWriterT\\<cdot>m) = m\"", "lemma writerT_induct [case_names WriterT]:\n  fixes P :: \"'a\\<cdot>('f::functor,'e) writerT \\<Rightarrow> bool\"\n  assumes \"\\<And>k. P (WriterT\\<cdot>k)\"\n  shows \"P y\"", "lemma writerT_eq_iff:\n  \"a = b \\<longleftrightarrow> runWriterT\\<cdot>a = runWriterT\\<cdot>b\"", "lemma writerT_below_iff:\n  \"a \\<sqsubseteq> b \\<longleftrightarrow> runWriterT\\<cdot>a \\<sqsubseteq> runWriterT\\<cdot>b\"", "lemma writerT_eqI:\n  \"runWriterT\\<cdot>a = runWriterT\\<cdot>b \\<Longrightarrow> a = b\"", "lemma writerT_belowI:\n  \"runWriterT\\<cdot>a \\<sqsubseteq> runWriterT\\<cdot>b \\<Longrightarrow> a \\<sqsubseteq> b\"", "lemma runWriterT_coerce [simp]:\n  \"runWriterT\\<cdot>(coerce\\<cdot>k) = coerce\\<cdot>(runWriterT\\<cdot>k)\"", "lemma fmap_writer_def: \"fmap = writer_map\\<cdot>ID\"", "lemma fmapU_WriterT [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(WriterT\\<cdot>m) = WriterT\\<cdot>(fmap\\<cdot>(fmap\\<cdot>f)\\<cdot>m)\"", "lemma runWriterT_fmapU [simp]:\n  \"runWriterT\\<cdot>(fmapU\\<cdot>f\\<cdot>m) = fmap\\<cdot>(fmap\\<cdot>f)\\<cdot>(runWriterT\\<cdot>m)\"", "lemma runWriterT_fmap [simp]:\n  \"runWriterT\\<cdot>(fmap\\<cdot>f\\<cdot>m) = fmap\\<cdot>(fmap\\<cdot>f)\\<cdot>(runWriterT\\<cdot>m)\"", "lemma runWriterT_unitWT [simp]:\n  \"runWriterT\\<cdot>(unitWT\\<cdot>x) = return\\<cdot>(Writer\\<cdot>mempty\\<cdot>x)\"", "lemma runWriterT_bindWT [simp]:\n  \"runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) = bind\\<cdot>(runWriterT\\<cdot>m)\\<cdot>\n    (\\<Lambda>(Writer\\<cdot>w\\<cdot>x). bind\\<cdot>(runWriterT\\<cdot>(k\\<cdot>x))\\<cdot>(\\<Lambda>(Writer\\<cdot>w'\\<cdot>y).\n      return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))\"", "lemma runWriterT_liftWT [simp]:\n  \"runWriterT\\<cdot>(liftWT\\<cdot>m) = fmap\\<cdot>(Writer\\<cdot>mempty)\\<cdot>m\"", "lemma runWriterT_tellWT [simp]:\n  \"runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) = return\\<cdot>(Writer\\<cdot>w\\<cdot>x)\"", "lemma runWriterT_fmapWT [simp]:\n  \"runWriterT\\<cdot>(fmapWT\\<cdot>f\\<cdot>m) =\n    runWriterT\\<cdot>m \\<bind> (\\<Lambda> (Writer\\<cdot>w\\<cdot>x). return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x)))\"", "lemma liftWT_return:\n  \"liftWT\\<cdot>(return\\<cdot>x) = unitWT\\<cdot>x\"", "lemma liftWT_bind:\n  \"liftWT\\<cdot>(bind\\<cdot>m\\<cdot>k) = bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>(liftWT oo k)\"", "lemma fmapWT_fmapWT:\n  \"fmapWT\\<cdot>f\\<cdot>(fmapWT\\<cdot>g\\<cdot>m) = fmapWT\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>m\"", "lemma fmapWT_unitWT:\n  \"fmapWT\\<cdot>f\\<cdot>(unitWT\\<cdot>x) = unitWT\\<cdot>(f\\<cdot>x)\"", "lemma fmapWT_bindWT:\n  \"fmapWT\\<cdot>f\\<cdot>(bindWT\\<cdot>m\\<cdot>k) = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. fmapWT\\<cdot>f\\<cdot>(k\\<cdot>x))\"", "lemma bindWT_fmapWT:\n  \"bindWT\\<cdot>(fmapWT\\<cdot>f\\<cdot>m)\\<cdot>k = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. k\\<cdot>(f\\<cdot>x))\"", "lemma bindWT_unitWT_counterexample:\n  fixes k :: \"'a \\<rightarrow> 'b\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes 1: \"k\\<cdot>x = WriterT\\<cdot>(return\\<cdot>\\<bottom>)\"\n  assumes 2: \"return\\<cdot>\\<bottom> \\<noteq> (\\<bottom> :: ('b\\<cdot>'w writer)\\<cdot>'m::monad)\"\n  shows \"bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k \\<noteq> k\\<cdot>x\"", "lemma bindWT_unitWT_restricted:\n  fixes k :: \"'a \\<rightarrow> 'b\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes \"return\\<cdot>\\<bottom> = (\\<bottom> :: ('b\\<cdot>'w writer)\\<cdot>'m)\"\n  shows \"bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k = k\\<cdot>x\"", "lemma bindWT_bindWT:\n  \"bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>h)\\<cdot>k = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. bindWT\\<cdot>(h\\<cdot>x)\\<cdot>k)\"", "lemma bindWT_unitWT_right_counterexample:\n  fixes m :: \"'a\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes \"m = WriterT\\<cdot>(return\\<cdot>\\<bottom>)\"\n  assumes \"return\\<cdot>\\<bottom> \\<noteq> (\\<bottom> :: ('a\\<cdot>'w writer)\\<cdot>'m)\"\n  shows \"bindWT\\<cdot>m\\<cdot>unitWT \\<noteq> m\"", "lemma bindWT_unitWT_right_restricted:\n  fixes m :: \"'a\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes \"return\\<cdot>\\<bottom> = (\\<bottom> :: ('a\\<cdot>'w writer)\\<cdot>'m)\"\n  shows \"bindWT\\<cdot>m\\<cdot>unitWT = m\"", "lemma bindWT_unitWT_right_invar:\n  fixes m :: \"'a\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes \"invar m\"\n  shows \"bindWT\\<cdot>m\\<cdot>unitWT = m\"", "lemma writerT_left_unit_invar_lemma:\n  assumes \"invar m\"\n  shows \"runWriterT\\<cdot>m \\<bind> (\\<Lambda> (Writer\\<cdot>w\\<cdot>x). return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) = runWriterT\\<cdot>m\"", "lemma bindWT_unitWT_invar:\n  assumes \"invar (k\\<cdot>x)\"\n  shows \"bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k = k\\<cdot>x\"", "lemma invar'_bottom: \"invar' \\<bottom>\"", "lemma adm_invar': \"adm invar'\"", "lemma invar'_unitWT: \"invar' (unitWT\\<cdot>x)\"", "lemma invar'_bindWT: \"\\<lbrakk>invar' m; \\<And>x. invar' (k\\<cdot>x)\\<rbrakk> \\<Longrightarrow> invar' (bindWT\\<cdot>m\\<cdot>k)\"", "lemma invar'_tellWT: \"invar' (tellWT\\<cdot>x\\<cdot>w)\"", "lemma invar'_liftWT: \"invar' (liftWT\\<cdot>m)\"", "lemma bindWT_unitWT_fmapWT:\n  \"bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>(\\<Lambda> x. fmapWT\\<cdot>f\\<cdot>(k\\<cdot>x))\n    = fmapWT\\<cdot>f\\<cdot>(k\\<cdot>x)\"", "lemma bindWT_fmapWT_unitWT:\n  shows \"bindWT\\<cdot>(fmapWT\\<cdot>f\\<cdot>m)\\<cdot>unitWT = fmapWT\\<cdot>f\\<cdot>m\"", "lemma invar'_right_unit: \"invar' m \\<Longrightarrow> bindWT\\<cdot>m\\<cdot>unitWT = m\"", "lemma invar'_monad_fmap:\n  \"invar' m \\<Longrightarrow> fmapWT\\<cdot>f\\<cdot>m = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. unitWT\\<cdot>(f\\<cdot>x))\"", "lemma invar'_bind_assoc:\n  \"\\<lbrakk>invar' m; \\<And>x. invar' (f\\<cdot>x); \\<And>y. invar' (g\\<cdot>y)\\<rbrakk>\n    \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>f)\\<cdot>g = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. bindWT\\<cdot>(f\\<cdot>x)\\<cdot>g)\""], "translations": [["", "lemma coerce_writerT_abs [simp]:\n  \"coerce\\<cdot>(writerT_abs\\<cdot>x) = writerT_abs\\<cdot>(coerce\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('d\\<cdot>('e, 'f) writerT, 'a\\<cdot>('b, 'c) writerT)\\<cdot>\n    (writerT_abs\\<cdot>x) =\n    writerT_abs\\<cdot>\n    (COERCE('d\\<cdot>'f writer\\<cdot>'e, 'a\\<cdot>'c writer\\<cdot>'b)\\<cdot>\n     x)", "apply (simp add: writerT_abs_def coerce_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. PRJ('a\\<cdot>('b, 'c) writerT)\\<cdot>\n    (EMB('d\\<cdot>('e, 'f) writerT)\\<cdot>\n     (PRJ('d\\<cdot>('e, 'f) writerT)\\<cdot>\n      (EMB('d\\<cdot>'f writer\\<cdot>'e)\\<cdot>x))) =\n    PRJ('a\\<cdot>('b, 'c) writerT)\\<cdot>\n    (EMB('a\\<cdot>'c writer\\<cdot>'b)\\<cdot>\n     (PRJ('a\\<cdot>'c writer\\<cdot>'b)\\<cdot>\n      (EMB('d\\<cdot>'f writer\\<cdot>'e)\\<cdot>x)))", "apply (simp add: emb_prj_emb prj_emb_prj DEFL_eq_writerT)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma coerce_WriterT [simp]: \"coerce\\<cdot>(WriterT\\<cdot>k) = WriterT\\<cdot>(coerce\\<cdot>k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('d\\<cdot>('e, 'f) writerT, 'a\\<cdot>('b, 'c) writerT)\\<cdot>\n    (WriterT\\<cdot>k) =\n    WriterT\\<cdot>\n    (COERCE('d\\<cdot>'f writer\\<cdot>'e, 'a\\<cdot>'c writer\\<cdot>'b)\\<cdot>\n     k)", "unfolding WriterT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('d\\<cdot>('e, 'f) writerT, 'a\\<cdot>('b, 'c) writerT)\\<cdot>\n    ((\\<Lambda> app. writerT_abs\\<cdot>app)\\<cdot>k) =\n    (\\<Lambda> app. writerT_abs\\<cdot>app)\\<cdot>\n    (COERCE('d\\<cdot>'f writer\\<cdot>'e, 'a\\<cdot>'c writer\\<cdot>'b)\\<cdot>\n     k)", "by simp"], ["", "lemma writerT_cases [case_names WriterT]:\n  obtains k where \"y = WriterT\\<cdot>k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        y = WriterT\\<cdot>k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        y = WriterT\\<cdot>k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    y = WriterT\\<cdot>?k2", "show \"y = WriterT\\<cdot>(runWriterT\\<cdot>y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = WriterT\\<cdot>(runWriterT\\<cdot>y)", "by (cases y, simp_all)"], ["proof (state)\nthis:\n  y = WriterT\\<cdot>(runWriterT\\<cdot>y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WriterT_runWriterT [simp]: \"WriterT\\<cdot>(runWriterT\\<cdot>m) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WriterT\\<cdot>(runWriterT\\<cdot>m) = m", "by (cases m rule: writerT_cases, simp)"], ["", "lemma writerT_induct [case_names WriterT]:\n  fixes P :: \"'a\\<cdot>('f::functor,'e) writerT \\<Rightarrow> bool\"\n  assumes \"\\<And>k. P (WriterT\\<cdot>k)\"\n  shows \"P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P y", "by (cases y rule: writerT_cases, simp add: assms)"], ["", "lemma writerT_eq_iff:\n  \"a = b \\<longleftrightarrow> runWriterT\\<cdot>a = runWriterT\\<cdot>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a = b) = (runWriterT\\<cdot>a = runWriterT\\<cdot>b)", "apply (cases a rule: writerT_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       a = WriterT\\<cdot>k \\<Longrightarrow>\n       (a = b) = (runWriterT\\<cdot>a = runWriterT\\<cdot>b)", "apply (cases b rule: writerT_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k ka.\n       \\<lbrakk>a = WriterT\\<cdot>k; b = WriterT\\<cdot>ka\\<rbrakk>\n       \\<Longrightarrow> (a = b) = (runWriterT\\<cdot>a = runWriterT\\<cdot>b)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma writerT_below_iff:\n  \"a \\<sqsubseteq> b \\<longleftrightarrow> runWriterT\\<cdot>a \\<sqsubseteq> runWriterT\\<cdot>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sqsubseteq> b) =\n    (runWriterT\\<cdot>a \\<sqsubseteq> runWriterT\\<cdot>b)", "apply (cases a rule: writerT_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       a = WriterT\\<cdot>k \\<Longrightarrow>\n       (a \\<sqsubseteq> b) =\n       (runWriterT\\<cdot>a \\<sqsubseteq> runWriterT\\<cdot>b)", "apply (cases b rule: writerT_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k ka.\n       \\<lbrakk>a = WriterT\\<cdot>k; b = WriterT\\<cdot>ka\\<rbrakk>\n       \\<Longrightarrow> (a \\<sqsubseteq> b) =\n                         (runWriterT\\<cdot>a \\<sqsubseteq>\n                          runWriterT\\<cdot>b)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma writerT_eqI:\n  \"runWriterT\\<cdot>a = runWriterT\\<cdot>b \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>a = runWriterT\\<cdot>b \\<Longrightarrow> a = b", "by (simp add: writerT_eq_iff)"], ["", "lemma writerT_belowI:\n  \"runWriterT\\<cdot>a \\<sqsubseteq> runWriterT\\<cdot>b \\<Longrightarrow> a \\<sqsubseteq> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>a \\<sqsubseteq> runWriterT\\<cdot>b \\<Longrightarrow>\n    a \\<sqsubseteq> b", "by (simp add: writerT_below_iff)"], ["", "lemma runWriterT_coerce [simp]:\n  \"runWriterT\\<cdot>(coerce\\<cdot>k) = coerce\\<cdot>(runWriterT\\<cdot>k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>\n    (COERCE('d\\<cdot>('e, 'f) writerT, 'a\\<cdot>('c, 'b) writerT)\\<cdot>k) =\n    COERCE('d\\<cdot>'f writer\\<cdot>'e, 'a\\<cdot>'b writer\\<cdot>'c)\\<cdot>\n    (runWriterT\\<cdot>k)", "by (induct k rule: writerT_induct, simp)"], ["", "subsection \\<open>Functor class instance\\<close>"], ["", "lemma fmap_writer_def: \"fmap = writer_map\\<cdot>ID\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmap = writer_map\\<cdot>ID", "apply (rule cfun_eqI, rename_tac f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. fmap\\<cdot>f = writer_map\\<cdot>ID\\<cdot>f", "apply (rule cfun_eqI, rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x. fmap\\<cdot>f\\<cdot>x = writer_map\\<cdot>ID\\<cdot>f\\<cdot>x", "apply (case_tac x rule: writer.exhaust, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f. writer_map\\<cdot>ID\\<cdot>f\\<cdot>\\<bottom> = \\<bottom>\n 2. \\<And>f x w a.\n       x = Writer\\<cdot>w\\<cdot>a \\<Longrightarrow>\n       Writer\\<cdot>w\\<cdot>(f\\<cdot>a) =\n       writer_map\\<cdot>ID\\<cdot>f\\<cdot>(Writer\\<cdot>w\\<cdot>a)", "apply (simp add: writer_map_def fix_const)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x w a.\n       x = Writer\\<cdot>w\\<cdot>a \\<Longrightarrow>\n       Writer\\<cdot>w\\<cdot>(f\\<cdot>a) =\n       writer_map\\<cdot>ID\\<cdot>f\\<cdot>(Writer\\<cdot>w\\<cdot>a)", "apply (simp add: writer_map_def fix_const Writer_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fmapU_WriterT [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(WriterT\\<cdot>m) = WriterT\\<cdot>(fmap\\<cdot>(fmap\\<cdot>f)\\<cdot>m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>(WriterT\\<cdot>m) =\n    WriterT\\<cdot>(fmap\\<cdot>(fmap\\<cdot>f)\\<cdot>m)", "unfolding fmapU_writerT_def writerT_map_def fmap_writer_def fix_const\n  WriterT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> w a.\n        writerT_abs oo\n        fmap\\<cdot>(writer_map\\<cdot>w\\<cdot>a) oo writerT_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    ((\\<Lambda> app. writerT_abs\\<cdot>app)\\<cdot>m) =\n    (\\<Lambda> app. writerT_abs\\<cdot>app)\\<cdot>\n    (fmap\\<cdot>(writer_map\\<cdot>ID\\<cdot>f)\\<cdot>m)", "by simp"], ["", "lemma runWriterT_fmapU [simp]:\n  \"runWriterT\\<cdot>(fmapU\\<cdot>f\\<cdot>m) = fmap\\<cdot>(fmap\\<cdot>f)\\<cdot>(runWriterT\\<cdot>m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(fmapU\\<cdot>f\\<cdot>m) =\n    fmap\\<cdot>(fmap\\<cdot>f)\\<cdot>(runWriterT\\<cdot>m)", "by (induct m rule: writerT_induct) simp"], ["", "instance writerT :: (\"functor\", \"domain\") \"functor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) writerT, functor_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f g xs.\n       fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n       fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs", "fix f g :: \"udom \\<rightarrow> udom\" and xs :: \"udom\\<cdot>('a,'b) writerT\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f g xs.\n       fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n       fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs", "show \"fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) = fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n    fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs", "apply (induct xs rule: writerT_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>(WriterT\\<cdot>k)) =\n       fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>\n       (WriterT\\<cdot>k)", "apply (simp add: fmap_fmap eta_cfun)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n  fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Monad operations\\<close>"], ["", "text \\<open>The writer monad transformer does not yield a monad in the\nusual sense: We cannot prove a \\<open>monad\\<close> class instance, because\ntype \\<open>'a\\<cdot>('m,'w) writerT\\<close> contains values that break the monad\nlaws. However, it turns out that such values are inaccessible: The\nmonad laws are satisfied by all values constructible from the abstract\noperations.\\<close>"], ["", "text \\<open>To explore the properties of the writer monad transformer\noperations, we define them all as non-overloaded functions. \\medskip\n\\<close>"], ["", "definition unitWT :: \"'a \\<rightarrow> 'a\\<cdot>('m::monad,'w::monoid) writerT\"\n  where \"unitWT = (\\<Lambda> x. WriterT\\<cdot>(return\\<cdot>(Writer\\<cdot>mempty\\<cdot>x)))\""], ["", "definition bindWT :: \"'a\\<cdot>('m::monad,'w::monoid) writerT \\<rightarrow> ('a \\<rightarrow> 'b\\<cdot>('m,'w) writerT) \\<rightarrow> 'b\\<cdot>('m,'w) writerT\"\n  where \"bindWT = (\\<Lambda> m k. WriterT\\<cdot>(bind\\<cdot>(runWriterT\\<cdot>m)\\<cdot>\n    (\\<Lambda>(Writer\\<cdot>w\\<cdot>x). bind\\<cdot>(runWriterT\\<cdot>(k\\<cdot>x))\\<cdot>(\\<Lambda>(Writer\\<cdot>w'\\<cdot>y).\n      return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))))\""], ["", "definition liftWT :: \"'a\\<cdot>'m \\<rightarrow> 'a\\<cdot>('m::monad,'w::monoid) writerT\"\n  where \"liftWT = (\\<Lambda> m. WriterT\\<cdot>(fmap\\<cdot>(Writer\\<cdot>mempty)\\<cdot>m))\""], ["", "definition tellWT :: \"'a \\<rightarrow> 'w \\<rightarrow> 'a\\<cdot>('m::monad,'w::monoid) writerT\"\n  where \"tellWT = (\\<Lambda> x w. WriterT\\<cdot>(return\\<cdot>(Writer\\<cdot>w\\<cdot>x)))\""], ["", "definition fmapWT :: \"('a \\<rightarrow> 'b) \\<rightarrow> 'a\\<cdot>('m::monad,'w::monoid) writerT \\<rightarrow> 'b\\<cdot>('m,'w) writerT\"\n  where \"fmapWT = (\\<Lambda> f m. bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. unitWT\\<cdot>(f\\<cdot>x)))\""], ["", "lemma runWriterT_fmap [simp]:\n  \"runWriterT\\<cdot>(fmap\\<cdot>f\\<cdot>m) = fmap\\<cdot>(fmap\\<cdot>f)\\<cdot>(runWriterT\\<cdot>m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(fmap\\<cdot>f\\<cdot>m) =\n    fmap\\<cdot>(fmap\\<cdot>f)\\<cdot>(runWriterT\\<cdot>m)", "by (subst fmap_def, simp add: coerce_simp eta_cfun)"], ["", "lemma runWriterT_unitWT [simp]:\n  \"runWriterT\\<cdot>(unitWT\\<cdot>x) = return\\<cdot>(Writer\\<cdot>mempty\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(unitWT\\<cdot>x) =\n    return\\<cdot>(Writer\\<cdot>mempty\\<cdot>x)", "unfolding unitWT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>\n    ((\\<Lambda> x.\n         WriterT\\<cdot>(return\\<cdot>(Writer\\<cdot>mempty\\<cdot>x)))\\<cdot>\n     x) =\n    return\\<cdot>(Writer\\<cdot>mempty\\<cdot>x)", "by simp"], ["", "lemma runWriterT_bindWT [simp]:\n  \"runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) = bind\\<cdot>(runWriterT\\<cdot>m)\\<cdot>\n    (\\<Lambda>(Writer\\<cdot>w\\<cdot>x). bind\\<cdot>(runWriterT\\<cdot>(k\\<cdot>x))\\<cdot>(\\<Lambda>(Writer\\<cdot>w'\\<cdot>y).\n      return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n            return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))", "unfolding bindWT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>\n    ((\\<Lambda> m k.\n         WriterT\\<cdot>\n         (runWriterT\\<cdot>m \\<bind>\n          (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n              runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n              (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                  return\\<cdot>\n                  (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                   y)))))\\<cdot>\n     m\\<cdot>\n     k) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n            return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))", "by simp"], ["", "lemma runWriterT_liftWT [simp]:\n  \"runWriterT\\<cdot>(liftWT\\<cdot>m) = fmap\\<cdot>(Writer\\<cdot>mempty)\\<cdot>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(liftWT\\<cdot>m) =\n    fmap\\<cdot>(Writer\\<cdot>mempty)\\<cdot>m", "unfolding liftWT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>\n    ((\\<Lambda> m.\n         WriterT\\<cdot>(fmap\\<cdot>(Writer\\<cdot>mempty)\\<cdot>m))\\<cdot>\n     m) =\n    fmap\\<cdot>(Writer\\<cdot>mempty)\\<cdot>m", "by simp"], ["", "lemma runWriterT_tellWT [simp]:\n  \"runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) = return\\<cdot>(Writer\\<cdot>w\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) =\n    return\\<cdot>(Writer\\<cdot>w\\<cdot>x)", "unfolding tellWT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>\n    ((\\<Lambda> x w.\n         WriterT\\<cdot>(return\\<cdot>(Writer\\<cdot>w\\<cdot>x)))\\<cdot>\n     x\\<cdot>\n     w) =\n    return\\<cdot>(Writer\\<cdot>w\\<cdot>x)", "by simp"], ["", "lemma runWriterT_fmapWT [simp]:\n  \"runWriterT\\<cdot>(fmapWT\\<cdot>f\\<cdot>m) =\n    runWriterT\\<cdot>m \\<bind> (\\<Lambda> (Writer\\<cdot>w\\<cdot>x). return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(fmapWT\\<cdot>f\\<cdot>m) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x)))", "by (simp add: fmapWT_def bindWT_def mempty_right)"], ["", "subsection \\<open>Laws\\<close>"], ["", "text \\<open>The \\<open>liftWT\\<close> function maps \\<open>return\\<close> and\n\\<open>bind\\<close> on the inner monad to \\<open>unitWT\\<close> and \\<open>bindWT\\<close>, as expected. \\medskip\\<close>"], ["", "lemma liftWT_return:\n  \"liftWT\\<cdot>(return\\<cdot>x) = unitWT\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftWT\\<cdot>(return\\<cdot>x) = unitWT\\<cdot>x", "by (rule writerT_eqI, simp add: fmap_return)"], ["", "lemma liftWT_bind:\n  \"liftWT\\<cdot>(bind\\<cdot>m\\<cdot>k) = bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>(liftWT oo k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftWT\\<cdot>(m \\<bind> k) =\n    bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>(liftWT oo k)", "by (rule writerT_eqI)\n   (simp add: monad_fmap bind_bind mempty_left)"], ["", "text \\<open>The composition rule holds unconditionally for fmap. The fmap\nfunction also interacts as expected with unit and bind. \\medskip\\<close>"], ["", "lemma fmapWT_fmapWT:\n  \"fmapWT\\<cdot>f\\<cdot>(fmapWT\\<cdot>g\\<cdot>m) = fmapWT\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapWT\\<cdot>f\\<cdot>(fmapWT\\<cdot>g\\<cdot>m) =\n    fmapWT\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>m", "apply (simp add: writerT_eq_iff bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>(g\\<cdot>x))) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x)))) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>(g\\<cdot>x))))", "apply (rule cfun_arg_cong, rule cfun_eqI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          return\\<cdot>(Writer\\<cdot>w\\<cdot>(g\\<cdot>x))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x))) =\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>(g\\<cdot>x))))", "apply (case_tac x, simp add: bind_strict, simp add: mempty_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fmapWT_unitWT:\n  \"fmapWT\\<cdot>f\\<cdot>(unitWT\\<cdot>x) = unitWT\\<cdot>(f\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapWT\\<cdot>f\\<cdot>(unitWT\\<cdot>x) = unitWT\\<cdot>(f\\<cdot>x)", "by (simp add: writerT_eq_iff mempty_right)"], ["", "lemma fmapWT_bindWT:\n  \"fmapWT\\<cdot>f\\<cdot>(bindWT\\<cdot>m\\<cdot>k) = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. fmapWT\\<cdot>f\\<cdot>(k\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapWT\\<cdot>f\\<cdot>(bindWT\\<cdot>m\\<cdot>k) =\n    bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. fmapWT\\<cdot>f\\<cdot>(k\\<cdot>x))", "apply (simp add: writerT_eq_iff bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x)))) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n        (\\<Lambda> x.\n            (case x of\n             Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x))) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                return\\<cdot>\n                (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))", "apply (rule cfun_arg_cong, rule cfun_eqI, rename_tac x, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x))) =\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n          (\\<Lambda> x.\n              (case x of\n               Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                 return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x))) \\<bind>\n              (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                  return\\<cdot>\n                  (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))", "apply (case_tac x, simp add: bind_strict, simp add: bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a.\n       x = Writer\\<cdot>w\\<cdot>a \\<Longrightarrow>\n       runWriterT\\<cdot>(k\\<cdot>a) \\<bind>\n       (\\<Lambda> x.\n           (case x of\n            Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x)))) =\n       runWriterT\\<cdot>(k\\<cdot>a) \\<bind>\n       (\\<Lambda> x.\n           (case x of\n            Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n              return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x))) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))", "apply (rule cfun_arg_cong, rule cfun_eqI, rename_tac y, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a y.\n       x = Writer\\<cdot>w\\<cdot>a \\<Longrightarrow>\n       (case y of\n        Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n          return\\<cdot>\n          (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x))) =\n       (case y of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n           return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))", "apply (case_tac y, simp add: bind_strict, simp add: mempty_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bindWT_fmapWT:\n  \"bindWT\\<cdot>(fmapWT\\<cdot>f\\<cdot>m)\\<cdot>k = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. k\\<cdot>(f\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(fmapWT\\<cdot>f\\<cdot>m)\\<cdot>k =\n    bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. k\\<cdot>(f\\<cdot>x))", "apply (simp add: writerT_eq_iff bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x))) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                return\\<cdot>\n                (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(k\\<cdot>(f\\<cdot>x)) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n            return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))", "apply (rule cfun_arg_cong, rule cfun_eqI, rename_tac x, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          return\\<cdot>(Writer\\<cdot>w\\<cdot>(f\\<cdot>x))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) =\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(k\\<cdot>(f\\<cdot>x)) \\<bind>\n          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))", "apply (case_tac x, simp add: bind_strict, simp add: mempty_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>The left unit monad law is not satisfied in general. \\medskip\\<close>"], ["", "lemma bindWT_unitWT_counterexample:\n  fixes k :: \"'a \\<rightarrow> 'b\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes 1: \"k\\<cdot>x = WriterT\\<cdot>(return\\<cdot>\\<bottom>)\"\n  assumes 2: \"return\\<cdot>\\<bottom> \\<noteq> (\\<bottom> :: ('b\\<cdot>'w writer)\\<cdot>'m::monad)\"\n  shows \"bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k \\<noteq> k\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k \\<noteq> k\\<cdot>x", "by (simp add: writerT_eq_iff mempty_left assms)"], ["", "text \\<open>However, left unit is satisfied for inner monads with a strict\n\\<open>return\\<close> function.\\<close>"], ["", "lemma bindWT_unitWT_restricted:\n  fixes k :: \"'a \\<rightarrow> 'b\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes \"return\\<cdot>\\<bottom> = (\\<bottom> :: ('b\\<cdot>'w writer)\\<cdot>'m)\"\n  shows \"bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k = k\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k = k\\<cdot>x", "unfolding writerT_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k) =\n    runWriterT\\<cdot>(k\\<cdot>x)", "apply (simp add: mempty_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n        return\\<cdot>(Writer\\<cdot>w'\\<cdot>y)) =\n    runWriterT\\<cdot>(k\\<cdot>x)", "apply (rule trans [OF _ monad_right_unit])"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n        return\\<cdot>(Writer\\<cdot>w'\\<cdot>y)) =\n    runWriterT\\<cdot>(k\\<cdot>x) \\<bind> return", "apply (rule cfun_arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n        return\\<cdot>(Writer\\<cdot>w'\\<cdot>y)) =\n    return", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case x of\n        Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n          return\\<cdot>(Writer\\<cdot>w'\\<cdot>y)) =\n       return\\<cdot>x", "apply (case_tac x, simp_all add: assms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>The associativity of \\<open>bindWT\\<close> holds\nunconditionally. \\medskip\\<close>"], ["", "lemma bindWT_bindWT:\n  \"bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>h)\\<cdot>k = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. bindWT\\<cdot>(h\\<cdot>x)\\<cdot>k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>h)\\<cdot>k =\n    bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. bindWT\\<cdot>(h\\<cdot>x)\\<cdot>k)", "apply (rule writerT_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>h)\\<cdot>k) =\n    runWriterT\\<cdot>\n    (bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. bindWT\\<cdot>(h\\<cdot>x)\\<cdot>k))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n            return\\<cdot>\n            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n            return\\<cdot>\n            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                return\\<cdot>\n                (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n            return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))", "apply (simp add: bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                return\\<cdot>\n                (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n        (\\<Lambda> x.\n            (case x of\n             Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n               runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n               (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                   return\\<cdot>\n                   (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                    y))) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                return\\<cdot>\n                (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))", "apply (rule cfun_arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                return\\<cdot>\n                (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))) =\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n        (\\<Lambda> x.\n            (case x of\n             Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n               runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n               (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                   return\\<cdot>\n                   (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                    y))) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                return\\<cdot>\n                (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))", "apply (rule cfun_eqI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) =\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n          (\\<Lambda> x.\n              (case x of\n               Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                 runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                 (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                     return\\<cdot>\n                     (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                      y))) \\<bind>\n              (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                  return\\<cdot>\n                  (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))", "apply (case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x = \\<bottom> \\<Longrightarrow>\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) =\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n          (\\<Lambda> x.\n              (case x of\n               Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                 runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                 (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                     return\\<cdot>\n                     (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                      y))) \\<bind>\n              (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                  return\\<cdot>\n                  (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))\n 2. \\<And>x w a.\n       x = Writer\\<cdot>w\\<cdot>a \\<Longrightarrow>\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) =\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n          (\\<Lambda> x.\n              (case x of\n               Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                 runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                 (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                     return\\<cdot>\n                     (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                      y))) \\<bind>\n              (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                  return\\<cdot>\n                  (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))", "apply (simp add: bind_strict)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a.\n       x = Writer\\<cdot>w\\<cdot>a \\<Longrightarrow>\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) =\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(h\\<cdot>x) \\<bind>\n          (\\<Lambda> x.\n              (case x of\n               Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                 runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                 (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                     return\\<cdot>\n                     (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                      y))) \\<bind>\n              (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                  return\\<cdot>\n                  (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))", "apply (simp add: bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a.\n       x = Writer\\<cdot>w\\<cdot>a \\<Longrightarrow>\n       runWriterT\\<cdot>(h\\<cdot>a) \\<bind>\n       (\\<Lambda> x.\n           (case x of\n            Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n               (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                   return\\<cdot>\n                   (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))) =\n       runWriterT\\<cdot>(h\\<cdot>a) \\<bind>\n       (\\<Lambda> x.\n           (case x of\n            Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n              runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n              (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                  return\\<cdot>\n                  (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                   y))) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))", "apply (rule cfun_arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a.\n       x = Writer\\<cdot>w\\<cdot>a \\<Longrightarrow>\n       (\\<Lambda> x.\n           (case x of\n            Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n               (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                   return\\<cdot>\n                   (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))) =\n       (\\<Lambda> x.\n           (case x of\n            Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n              runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n              (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                  return\\<cdot>\n                  (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                   y))) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))", "apply (rule cfun_eqI, simp, rename_tac y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a y.\n       x = Writer\\<cdot>w\\<cdot>a \\<Longrightarrow>\n       (case y of\n        Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n          return\\<cdot>\n          (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) =\n       (case y of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n              return\\<cdot>\n              (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n           return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))", "apply (case_tac y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x w a y.\n       \\<lbrakk>x = Writer\\<cdot>w\\<cdot>a; y = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (case y of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>\n                                  (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                  y))) =\n                         (case y of\n                          Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                            runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y))) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))\n 2. \\<And>x w a y wa aa.\n       \\<lbrakk>x = Writer\\<cdot>w\\<cdot>a;\n        y = Writer\\<cdot>wa\\<cdot>aa\\<rbrakk>\n       \\<Longrightarrow> (case y of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>\n                                  (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                  y))) =\n                         (case y of\n                          Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                            runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y))) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (simp add: bind_strict)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a y wa aa.\n       \\<lbrakk>x = Writer\\<cdot>w\\<cdot>a;\n        y = Writer\\<cdot>wa\\<cdot>aa\\<rbrakk>\n       \\<Longrightarrow> (case y of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>\n                                  (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                  y))) =\n                         (case y of\n                          Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                            runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y))) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (simp add: bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a y wa aa.\n       \\<lbrakk>x = Writer\\<cdot>w\\<cdot>a;\n        y = Writer\\<cdot>wa\\<cdot>aa\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(k\\<cdot>aa) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>\n                              (mappend\\<cdot>\n                               (mappend\\<cdot>w\\<cdot>wa)\\<cdot>\n                               w')\\<cdot>\n                              y)) =\n                         runWriterT\\<cdot>(k\\<cdot>aa) \\<bind>\n                         (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>wa\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>\n                                  (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                  y)))", "apply (rule cfun_arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a y wa aa.\n       \\<lbrakk>x = Writer\\<cdot>w\\<cdot>a;\n        y = Writer\\<cdot>wa\\<cdot>aa\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>\n                              (mappend\\<cdot>\n                               (mappend\\<cdot>w\\<cdot>wa)\\<cdot>\n                               w')\\<cdot>\n                              y)) =\n                         (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>wa\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>\n                                  (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                  y)))", "apply (rule cfun_eqI, simp, rename_tac z)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a y wa aa z.\n       \\<lbrakk>x = Writer\\<cdot>w\\<cdot>a;\n        y = Writer\\<cdot>wa\\<cdot>aa\\<rbrakk>\n       \\<Longrightarrow> (case z of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>\n                             (mappend\\<cdot>\n                              (mappend\\<cdot>w\\<cdot>wa)\\<cdot>\n                              w')\\<cdot>\n                             y)) =\n                         (case z of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>wa\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (case_tac z)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x w a y wa aa z.\n       \\<lbrakk>x = Writer\\<cdot>w\\<cdot>a; y = Writer\\<cdot>wa\\<cdot>aa;\n        z = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (case z of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>\n                             (mappend\\<cdot>\n                              (mappend\\<cdot>w\\<cdot>wa)\\<cdot>\n                              w')\\<cdot>\n                             y)) =\n                         (case z of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>wa\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))\n 2. \\<And>x w a y wa aa z wb ab.\n       \\<lbrakk>x = Writer\\<cdot>w\\<cdot>a; y = Writer\\<cdot>wa\\<cdot>aa;\n        z = Writer\\<cdot>wb\\<cdot>ab\\<rbrakk>\n       \\<Longrightarrow> (case z of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>\n                             (mappend\\<cdot>\n                              (mappend\\<cdot>w\\<cdot>wa)\\<cdot>\n                              w')\\<cdot>\n                             y)) =\n                         (case z of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>wa\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (simp add: bind_strict)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a y wa aa z wb ab.\n       \\<lbrakk>x = Writer\\<cdot>w\\<cdot>a; y = Writer\\<cdot>wa\\<cdot>aa;\n        z = Writer\\<cdot>wb\\<cdot>ab\\<rbrakk>\n       \\<Longrightarrow> (case z of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>\n                             (mappend\\<cdot>\n                              (mappend\\<cdot>w\\<cdot>wa)\\<cdot>\n                              w')\\<cdot>\n                             y)) =\n                         (case z of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>wa\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (simp add: mappend_assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>The right unit monad law is not satisfied in general. \\medskip\\<close>"], ["", "lemma bindWT_unitWT_right_counterexample:\n  fixes m :: \"'a\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes \"m = WriterT\\<cdot>(return\\<cdot>\\<bottom>)\"\n  assumes \"return\\<cdot>\\<bottom> \\<noteq> (\\<bottom> :: ('a\\<cdot>'w writer)\\<cdot>'m)\"\n  shows \"bindWT\\<cdot>m\\<cdot>unitWT \\<noteq> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>m\\<cdot>unitWT \\<noteq> m", "by (simp add: writerT_eq_iff assms)"], ["", "text \\<open>Right unit is satisfied for inner monads with a strict \\<open>return\\<close> function. \\medskip\\<close>"], ["", "lemma bindWT_unitWT_right_restricted:\n  fixes m :: \"'a\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes \"return\\<cdot>\\<bottom> = (\\<bottom> :: ('a\\<cdot>'w writer)\\<cdot>'m)\"\n  shows \"bindWT\\<cdot>m\\<cdot>unitWT = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>m\\<cdot>unitWT = m", "unfolding writerT_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>unitWT) = runWriterT\\<cdot>m", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>\n        (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n    runWriterT\\<cdot>m", "apply (rule trans [OF _ monad_right_unit])"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>\n        (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n    runWriterT\\<cdot>m \\<bind> return", "apply (rule cfun_arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>\n        (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n    return", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          return\\<cdot>\n          (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n       return\\<cdot>x", "apply (case_tac x, simp_all add: assms mempty_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Writer monad transformer invariant\\<close>"], ["", "text \\<open>We inductively define a predicate that includes all values\nthat can be constructed from the standard \\<open>writerT\\<close> operations.\n\\medskip\\<close>"], ["", "inductive invar :: \"'a\\<cdot>('m::monad, 'w::monoid) writerT \\<Rightarrow> bool\"\n  where invar_bottom: \"invar \\<bottom>\"\n  | invar_lub: \"\\<And>Y. \\<lbrakk>chain Y; \\<And>i. invar (Y i)\\<rbrakk> \\<Longrightarrow> invar (\\<Squnion>i. Y i)\"\n  | invar_unitWT: \"\\<And>x. invar (unitWT\\<cdot>x)\"\n  | invar_bindWT: \"\\<And>m k. \\<lbrakk>invar m; \\<And>x. invar (k\\<cdot>x)\\<rbrakk> \\<Longrightarrow> invar (bindWT\\<cdot>m\\<cdot>k)\"\n  | invar_tellWT: \"\\<And>x w. invar (tellWT\\<cdot>x\\<cdot>w)\"\n  | invar_liftWT: \"\\<And>m. invar (liftWT\\<cdot>m)\""], ["", "text \\<open>Right unit is satisfied for arguments built from standard\nfunctions. \\medskip\\<close>"], ["", "lemma bindWT_unitWT_right_invar:\n  fixes m :: \"'a\\<cdot>('m::monad,'w::monoid) writerT\"\n  assumes \"invar m\"\n  shows \"bindWT\\<cdot>m\\<cdot>unitWT = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>m\\<cdot>unitWT = m", "using assms"], ["proof (prove)\nusing this:\n  invar m\n\ngoal (1 subgoal):\n 1. bindWT\\<cdot>m\\<cdot>unitWT = m", "proof (induct set: invar)"], ["proof (state)\ngoal (6 subgoals):\n 1. bindWT\\<cdot>\\<bottom>\\<cdot>unitWT = \\<bottom>\n 2. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i. bindWT\\<cdot>(Y i)\\<cdot>unitWT = Y i\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(Lub Y)\\<cdot>unitWT = Lub Y\n 3. \\<And>x. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>unitWT = unitWT\\<cdot>x\n 4. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 5. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 6. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "case invar_bottom"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. bindWT\\<cdot>\\<bottom>\\<cdot>unitWT = \\<bottom>\n 2. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i. bindWT\\<cdot>(Y i)\\<cdot>unitWT = Y i\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(Lub Y)\\<cdot>unitWT = Lub Y\n 3. \\<And>x. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>unitWT = unitWT\\<cdot>x\n 4. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 5. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 6. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>\\<bottom>\\<cdot>unitWT = \\<bottom>", "by (rule writerT_eqI, simp add: bind_strict)"], ["proof (state)\nthis:\n  bindWT\\<cdot>\\<bottom>\\<cdot>unitWT = \\<bottom>\n\ngoal (5 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i. bindWT\\<cdot>(Y i)\\<cdot>unitWT = Y i\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(Lub Y)\\<cdot>unitWT = Lub Y\n 2. \\<And>x. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>unitWT = unitWT\\<cdot>x\n 3. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 4. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 5. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i. bindWT\\<cdot>(Y i)\\<cdot>unitWT = Y i\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(Lub Y)\\<cdot>unitWT = Lub Y\n 2. \\<And>x. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>unitWT = unitWT\\<cdot>x\n 3. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 4. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 5. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "case invar_lub"], ["proof (state)\nthis:\n  chain Y_\n  invar (Y_ ?i)\n  bindWT\\<cdot>(Y_ ?i)\\<cdot>unitWT = Y_ ?i\n\ngoal (5 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i. bindWT\\<cdot>(Y i)\\<cdot>unitWT = Y i\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(Lub Y)\\<cdot>unitWT = Lub Y\n 2. \\<And>x. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>unitWT = unitWT\\<cdot>x\n 3. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 4. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 5. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "thus ?case"], ["proof (prove)\nusing this:\n  chain Y_\n  invar (Y_ ?i)\n  bindWT\\<cdot>(Y_ ?i)\\<cdot>unitWT = Y_ ?i\n\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(Lub Y_)\\<cdot>unitWT = Lub Y_", "by - (rule admD, simp, assumption, assumption)"], ["proof (state)\nthis:\n  bindWT\\<cdot>(Lub Y_)\\<cdot>unitWT = Lub Y_\n\ngoal (4 subgoals):\n 1. \\<And>x. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>unitWT = unitWT\\<cdot>x\n 2. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 3. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 4. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>unitWT = unitWT\\<cdot>x\n 2. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 3. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 4. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "case invar_unitWT"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>unitWT = unitWT\\<cdot>x\n 2. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 3. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 4. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(unitWT\\<cdot>x_)\\<cdot>unitWT = unitWT\\<cdot>x_", "by (rule writerT_eqI, simp add: bind_bind mempty_left)"], ["proof (state)\nthis:\n  bindWT\\<cdot>(unitWT\\<cdot>x_)\\<cdot>unitWT = unitWT\\<cdot>x_\n\ngoal (3 subgoals):\n 1. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 2. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 3. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 2. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 3. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "case invar_bindWT"], ["proof (state)\nthis:\n  invar m_\n  bindWT\\<cdot>m_\\<cdot>unitWT = m_\n  invar (k_\\<cdot>?x)\n  bindWT\\<cdot>(k_\\<cdot>?x)\\<cdot>unitWT = k_\\<cdot>?x\n\ngoal (3 subgoals):\n 1. \\<And>m k.\n       \\<lbrakk>invar m; bindWT\\<cdot>m\\<cdot>unitWT = m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x. bindWT\\<cdot>(k\\<cdot>x)\\<cdot>unitWT = k\\<cdot>x\\<rbrakk>\n       \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\\<cdot>\n                         unitWT =\n                         bindWT\\<cdot>m\\<cdot>k\n 2. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 3. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "thus ?case"], ["proof (prove)\nusing this:\n  invar m_\n  bindWT\\<cdot>m_\\<cdot>unitWT = m_\n  invar (k_\\<cdot>?x)\n  bindWT\\<cdot>(k_\\<cdot>?x)\\<cdot>unitWT = k_\\<cdot>?x\n\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(bindWT\\<cdot>m_\\<cdot>k_)\\<cdot>unitWT =\n    bindWT\\<cdot>m_\\<cdot>k_", "apply (simp add: writerT_eq_iff bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar m_;\n     runWriterT\\<cdot>m_ \\<bind>\n     (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n         return\\<cdot>\n         (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n     runWriterT\\<cdot>m_;\n     \\<And>x. invar (k_\\<cdot>x);\n     \\<And>x.\n        runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>\n            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n        runWriterT\\<cdot>(k_\\<cdot>x)\\<rbrakk>\n    \\<Longrightarrow> runWriterT\\<cdot>m_ \\<bind>\n                      (\\<Lambda> x.\n                          (case x of\n                           Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                             runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>\n                                  (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                  y))) \\<bind>\n                          (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                              return\\<cdot>\n                              (Writer\\<cdot>\n                               (mappend\\<cdot>w\\<cdot>mempty)\\<cdot>\n                               x))) =\n                      runWriterT\\<cdot>m_ \\<bind>\n                      (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                          runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                              return\\<cdot>\n                              (Writer\\<cdot>\n                               (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                               y)))", "apply (rule cfun_arg_cong, rule cfun_eqI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>invar m_;\n        runWriterT\\<cdot>m_ \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>\n            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n        runWriterT\\<cdot>m_;\n        \\<And>x. invar (k_\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n           runWriterT\\<cdot>(k_\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> (case x of\n                          Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                            runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y))) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>\n                             (Writer\\<cdot>\n                              (mappend\\<cdot>w\\<cdot>mempty)\\<cdot>\n                              x)) =\n                         (case x of\n                          Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                            runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)))", "apply (case_tac x, simp add: bind_strict, simp add: bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a.\n       \\<lbrakk>invar m_;\n        runWriterT\\<cdot>m_ \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>\n            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n        runWriterT\\<cdot>m_;\n        \\<And>x. invar (k_\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n           runWriterT\\<cdot>(k_\\<cdot>x);\n        x = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(k_\\<cdot>a) \\<bind>\n                         (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>\n                                  (mappend\\<cdot>w\\<cdot>mempty)\\<cdot>\n                                  x))) =\n                         runWriterT\\<cdot>(k_\\<cdot>a) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (rule cfun_arg_cong, rule cfun_eqI, simp, rename_tac y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a y.\n       \\<lbrakk>invar m_;\n        runWriterT\\<cdot>m_ \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>\n            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n        runWriterT\\<cdot>m_;\n        \\<And>x. invar (k_\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>\n               (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>x)) =\n           runWriterT\\<cdot>(k_\\<cdot>x);\n        x = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> (case y of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>\n                             (Writer\\<cdot>\n                              (mappend\\<cdot>w\\<cdot>mempty)\\<cdot>\n                              x)) =\n                         (case y of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y))", "apply (case_tac y, simp add: bind_strict, simp add: mempty_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  bindWT\\<cdot>(bindWT\\<cdot>m_\\<cdot>k_)\\<cdot>unitWT =\n  bindWT\\<cdot>m_\\<cdot>k_\n\ngoal (2 subgoals):\n 1. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 2. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 2. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "case invar_tellWT"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x w.\n       bindWT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\\<cdot>unitWT =\n       tellWT\\<cdot>x\\<cdot>w\n 2. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(tellWT\\<cdot>x_\\<cdot>w_)\\<cdot>unitWT =\n    tellWT\\<cdot>x_\\<cdot>w_", "by (simp add: writerT_eq_iff mempty_right)"], ["proof (state)\nthis:\n  bindWT\\<cdot>(tellWT\\<cdot>x_\\<cdot>w_)\\<cdot>unitWT =\n  tellWT\\<cdot>x_\\<cdot>w_\n\ngoal (1 subgoal):\n 1. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "case invar_liftWT"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>m. bindWT\\<cdot>(liftWT\\<cdot>m)\\<cdot>unitWT = liftWT\\<cdot>m", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(liftWT\\<cdot>m_)\\<cdot>unitWT = liftWT\\<cdot>m_", "by (rule writerT_eqI, simp add: monad_fmap bind_bind mempty_right)"], ["proof (state)\nthis:\n  bindWT\\<cdot>(liftWT\\<cdot>m_)\\<cdot>unitWT = liftWT\\<cdot>m_\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Left unit is also satisfied for arguments built from standard\nfunctions. \\medskip\\<close>"], ["", "lemma writerT_left_unit_invar_lemma:\n  assumes \"invar m\"\n  shows \"runWriterT\\<cdot>m \\<bind> (\\<Lambda> (Writer\\<cdot>w\\<cdot>x). return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) = runWriterT\\<cdot>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>m", "using assms"], ["proof (prove)\nusing this:\n  invar m\n\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>m", "proof (induct m set: invar)"], ["proof (state)\ngoal (6 subgoals):\n 1. runWriterT\\<cdot>\\<bottom> \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>\\<bottom>\n 2. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i.\n           runWriterT\\<cdot>(Y i) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(Y i)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(Lub Y) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(Lub Y)\n 3. \\<And>x.\n       runWriterT\\<cdot>(unitWT\\<cdot>x) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(unitWT\\<cdot>x)\n 4. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 5. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 6. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "case invar_bottom"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. runWriterT\\<cdot>\\<bottom> \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>\\<bottom>\n 2. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i.\n           runWriterT\\<cdot>(Y i) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(Y i)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(Lub Y) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(Lub Y)\n 3. \\<And>x.\n       runWriterT\\<cdot>(unitWT\\<cdot>x) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(unitWT\\<cdot>x)\n 4. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 5. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 6. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>\\<bottom> \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>\\<bottom>", "by (simp add: bind_strict)"], ["proof (state)\nthis:\n  runWriterT\\<cdot>\\<bottom> \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>\\<bottom>\n\ngoal (5 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i.\n           runWriterT\\<cdot>(Y i) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(Y i)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(Lub Y) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(Lub Y)\n 2. \\<And>x.\n       runWriterT\\<cdot>(unitWT\\<cdot>x) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(unitWT\\<cdot>x)\n 3. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 4. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 5. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i.\n           runWriterT\\<cdot>(Y i) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(Y i)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(Lub Y) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(Lub Y)\n 2. \\<And>x.\n       runWriterT\\<cdot>(unitWT\\<cdot>x) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(unitWT\\<cdot>x)\n 3. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 4. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 5. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "case invar_lub"], ["proof (state)\nthis:\n  chain Y_\n  invar (Y_ ?i)\n  runWriterT\\<cdot>(Y_ ?i) \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>(Y_ ?i)\n\ngoal (5 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y; \\<And>i. invar (Y i);\n        \\<And>i.\n           runWriterT\\<cdot>(Y i) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(Y i)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(Lub Y) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(Lub Y)\n 2. \\<And>x.\n       runWriterT\\<cdot>(unitWT\\<cdot>x) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(unitWT\\<cdot>x)\n 3. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 4. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 5. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "thus ?case"], ["proof (prove)\nusing this:\n  chain Y_\n  invar (Y_ ?i)\n  runWriterT\\<cdot>(Y_ ?i) \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>(Y_ ?i)\n\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(Lub Y_) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>(Lub Y_)", "by - (rule admD, simp, assumption, assumption)"], ["proof (state)\nthis:\n  runWriterT\\<cdot>(Lub Y_) \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>(Lub Y_)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       runWriterT\\<cdot>(unitWT\\<cdot>x) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(unitWT\\<cdot>x)\n 2. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 3. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 4. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       runWriterT\\<cdot>(unitWT\\<cdot>x) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(unitWT\\<cdot>x)\n 2. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 3. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 4. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "case invar_unitWT"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x.\n       runWriterT\\<cdot>(unitWT\\<cdot>x) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(unitWT\\<cdot>x)\n 2. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 3. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 4. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(unitWT\\<cdot>x_) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>(unitWT\\<cdot>x_)", "by simp"], ["proof (state)\nthis:\n  runWriterT\\<cdot>(unitWT\\<cdot>x_) \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>(unitWT\\<cdot>x_)\n\ngoal (3 subgoals):\n 1. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 2. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 3. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 2. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 3. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "case invar_bindWT"], ["proof (state)\nthis:\n  invar m_\n  runWriterT\\<cdot>m_ \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>m_\n  invar (k_\\<cdot>?x)\n  runWriterT\\<cdot>(k_\\<cdot>?x) \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>(k_\\<cdot>?x)\n\ngoal (3 subgoals):\n 1. \\<And>m k.\n       \\<lbrakk>invar m;\n        runWriterT\\<cdot>m \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m;\n        \\<And>x. invar (k\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(bindWT\\<cdot>m\\<cdot>k)\n 2. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 3. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "thus ?case"], ["proof (prove)\nusing this:\n  invar m_\n  runWriterT\\<cdot>m_ \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>m_\n  invar (k_\\<cdot>?x)\n  runWriterT\\<cdot>(k_\\<cdot>?x) \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>(k_\\<cdot>?x)\n\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(bindWT\\<cdot>m_\\<cdot>k_) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>(bindWT\\<cdot>m_\\<cdot>k_)", "apply (simp add: bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar m_;\n     runWriterT\\<cdot>m_ \\<bind>\n     (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n         return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n     runWriterT\\<cdot>m_;\n     \\<And>x. invar (k_\\<cdot>x);\n     \\<And>x.\n        runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>(k_\\<cdot>x)\\<rbrakk>\n    \\<Longrightarrow> runWriterT\\<cdot>m_ \\<bind>\n                      (\\<Lambda> x.\n                          (case x of\n                           Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                             runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>\n                                  (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                  y))) \\<bind>\n                          (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                              return\\<cdot>(Writer\\<cdot>w\\<cdot>x))) =\n                      runWriterT\\<cdot>m_ \\<bind>\n                      (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                          runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                              return\\<cdot>\n                              (Writer\\<cdot>\n                               (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                               y)))", "apply (rule cfun_arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar m_;\n     runWriterT\\<cdot>m_ \\<bind>\n     (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n         return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n     runWriterT\\<cdot>m_;\n     \\<And>x. invar (k_\\<cdot>x);\n     \\<And>x.\n        runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>(k_\\<cdot>x)\\<rbrakk>\n    \\<Longrightarrow> (\\<Lambda> x.\n                          (case x of\n                           Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                             runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>\n                                  (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                  y))) \\<bind>\n                          (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                              return\\<cdot>(Writer\\<cdot>w\\<cdot>x))) =\n                      (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                          runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                          (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                              return\\<cdot>\n                              (Writer\\<cdot>\n                               (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                               y)))", "apply (rule cfun_eqI, simp, rename_tac n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>invar m_;\n        runWriterT\\<cdot>m_ \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m_;\n        \\<And>x. invar (k_\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k_\\<cdot>x)\\<rbrakk>\n       \\<Longrightarrow> (case n of\n                          Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                            runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y))) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         (case n of\n                          Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                            runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)))", "apply (case_tac n, simp add: bind_strict)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n w a.\n       \\<lbrakk>invar m_;\n        runWriterT\\<cdot>m_ \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m_;\n        \\<And>x. invar (k_\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k_\\<cdot>x);\n        n = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> (case n of\n                          Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                            runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y))) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         (case n of\n                          Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                            runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n                            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)))", "apply (simp add: bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n w a.\n       \\<lbrakk>invar m_;\n        runWriterT\\<cdot>m_ \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m_;\n        \\<And>x. invar (k_\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k_\\<cdot>x);\n        n = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(k_\\<cdot>a) \\<bind>\n                         (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 return\\<cdot>(Writer\\<cdot>w\\<cdot>x))) =\n                         runWriterT\\<cdot>(k_\\<cdot>a) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (rule cfun_arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n w a.\n       \\<lbrakk>invar m_;\n        runWriterT\\<cdot>m_ \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m_;\n        \\<And>x. invar (k_\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k_\\<cdot>x);\n        n = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 return\\<cdot>(Writer\\<cdot>w\\<cdot>x))) =\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (rule cfun_eqI, simp, rename_tac p)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n w a p.\n       \\<lbrakk>invar m_;\n        runWriterT\\<cdot>m_ \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m_;\n        \\<And>x. invar (k_\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k_\\<cdot>x);\n        n = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> (case p of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         (case p of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y))", "apply (case_tac p, simp add: bind_strict)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n w a p wa aa.\n       \\<lbrakk>invar m_;\n        runWriterT\\<cdot>m_ \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>m_;\n        \\<And>x. invar (k_\\<cdot>x);\n        \\<And>x.\n           runWriterT\\<cdot>(k_\\<cdot>x) \\<bind>\n           (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n               return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n           runWriterT\\<cdot>(k_\\<cdot>x);\n        n = Writer\\<cdot>w\\<cdot>a; p = Writer\\<cdot>wa\\<cdot>aa\\<rbrakk>\n       \\<Longrightarrow> (case p of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         (case p of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  runWriterT\\<cdot>(bindWT\\<cdot>m_\\<cdot>k_) \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>(bindWT\\<cdot>m_\\<cdot>k_)\n\ngoal (2 subgoals):\n 1. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 2. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 2. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "case invar_tellWT"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x w.\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(tellWT\\<cdot>x\\<cdot>w)\n 2. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(tellWT\\<cdot>x_\\<cdot>w_) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>(tellWT\\<cdot>x_\\<cdot>w_)", "by simp"], ["proof (state)\nthis:\n  runWriterT\\<cdot>(tellWT\\<cdot>x_\\<cdot>w_) \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>(tellWT\\<cdot>x_\\<cdot>w_)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "case invar_liftWT"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>m.\n       runWriterT\\<cdot>(liftWT\\<cdot>m) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n       runWriterT\\<cdot>(liftWT\\<cdot>m)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(liftWT\\<cdot>m_) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>(liftWT\\<cdot>m_)", "by (simp add: monad_fmap bind_bind)"], ["proof (state)\nthis:\n  runWriterT\\<cdot>(liftWT\\<cdot>m_) \\<bind>\n  (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n      return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n  runWriterT\\<cdot>(liftWT\\<cdot>m_)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bindWT_unitWT_invar:\n  assumes \"invar (k\\<cdot>x)\"\n  shows \"bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k = k\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>k = k\\<cdot>x", "apply (simp add: writerT_eq_iff mempty_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n        return\\<cdot>(Writer\\<cdot>w'\\<cdot>y)) =\n    runWriterT\\<cdot>(k\\<cdot>x)", "apply (rule writerT_left_unit_invar_lemma [OF assms])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Invariant expressed as a deflation\\<close>"], ["", "definition invar' :: \"'a\\<cdot>('m::monad, 'w::monoid) writerT \\<Rightarrow> bool\"\n  where \"invar' m \\<longleftrightarrow> fmapWT\\<cdot>ID\\<cdot>m = m\""], ["", "text \\<open>All standard operations preserve the invariant.\\<close>"], ["", "lemma invar'_bottom: \"invar' \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar' \\<bottom>", "unfolding invar'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapWT\\<cdot>ID\\<cdot>\\<bottom> = \\<bottom>", "by (simp add: writerT_eq_iff bind_strict)"], ["", "lemma adm_invar': \"adm invar'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adm invar'", "unfolding invar'_def [abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>m. fmapWT\\<cdot>ID\\<cdot>m = m)", "by simp"], ["", "lemma invar'_unitWT: \"invar' (unitWT\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar' (unitWT\\<cdot>x)", "unfolding invar'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapWT\\<cdot>ID\\<cdot>(unitWT\\<cdot>x) = unitWT\\<cdot>x", "by (simp add: writerT_eq_iff)"], ["", "lemma invar'_bindWT: \"\\<lbrakk>invar' m; \\<And>x. invar' (k\\<cdot>x)\\<rbrakk> \\<Longrightarrow> invar' (bindWT\\<cdot>m\\<cdot>k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar' m; \\<And>x. invar' (k\\<cdot>x)\\<rbrakk>\n    \\<Longrightarrow> invar' (bindWT\\<cdot>m\\<cdot>k)", "unfolding invar'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmapWT\\<cdot>ID\\<cdot>m = m;\n     \\<And>x. fmapWT\\<cdot>ID\\<cdot>(k\\<cdot>x) = k\\<cdot>x\\<rbrakk>\n    \\<Longrightarrow> fmapWT\\<cdot>ID\\<cdot>(bindWT\\<cdot>m\\<cdot>k) =\n                      bindWT\\<cdot>m\\<cdot>k", "apply (erule subst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        fmapWT\\<cdot>ID\\<cdot>(k\\<cdot>x) = k\\<cdot>x) \\<Longrightarrow>\n    fmapWT\\<cdot>ID\\<cdot>(bindWT\\<cdot>(fmapWT\\<cdot>ID\\<cdot>m)\\<cdot>k) =\n    bindWT\\<cdot>(fmapWT\\<cdot>ID\\<cdot>m)\\<cdot>k", "apply (simp add: writerT_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>(k\\<cdot>x)) \\<Longrightarrow>\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n            return\\<cdot>\n            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n            return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)))", "apply (simp add: bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>(k\\<cdot>x)) \\<Longrightarrow>\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) \\<bind>\n        (\\<Lambda> x.\n            (case x of\n             Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n               runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n               (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                   return\\<cdot>\n                   (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                    y))) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                return\\<cdot>(Writer\\<cdot>w\\<cdot>x)))) =\n    runWriterT\\<cdot>m \\<bind>\n    (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                return\\<cdot>\n                (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))", "apply (rule cfun_arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n        runWriterT\\<cdot>(k\\<cdot>x)) \\<Longrightarrow>\n    (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) \\<bind>\n        (\\<Lambda> x.\n            (case x of\n             Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n               runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n               (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                   return\\<cdot>\n                   (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                    y))) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                return\\<cdot>(Writer\\<cdot>w\\<cdot>x)))) =\n    (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n            runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n            (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                return\\<cdot>\n                (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))))", "apply (rule cfun_eqI, case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x.\n                   runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                   (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                       return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                   runWriterT\\<cdot>(k\\<cdot>x);\n        x = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>w\\<cdot>x)) \\<bind>\n                             (\\<Lambda> x.\n                                 (case x of\n                                  Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                                    runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                                    (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n  return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n                                 (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                     return\\<cdot>\n                                     (Writer\\<cdot>w\\<cdot>x))))\\<cdot>\n                         x =\n                         (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>w\\<cdot>x)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                                 (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                     return\\<cdot>\n                                     (Writer\\<cdot>\n(mappend\\<cdot>w\\<cdot>w')\\<cdot>\ny))))\\<cdot>\n                         x\n 2. \\<And>x w a.\n       \\<lbrakk>\\<And>x.\n                   runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                   (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                       return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                   runWriterT\\<cdot>(k\\<cdot>x);\n        x = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>w\\<cdot>x)) \\<bind>\n                             (\\<Lambda> x.\n                                 (case x of\n                                  Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                                    runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                                    (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n  return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n                                 (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                     return\\<cdot>\n                                     (Writer\\<cdot>w\\<cdot>x))))\\<cdot>\n                         x =\n                         (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>w\\<cdot>x)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                                 (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                     return\\<cdot>\n                                     (Writer\\<cdot>\n(mappend\\<cdot>w\\<cdot>w')\\<cdot>\ny))))\\<cdot>\n                         x", "apply (simp add: bind_strict)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a.\n       \\<lbrakk>\\<And>x.\n                   runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                   (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                       return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                   runWriterT\\<cdot>(k\\<cdot>x);\n        x = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>w\\<cdot>x)) \\<bind>\n                             (\\<Lambda> x.\n                                 (case x of\n                                  Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                                    runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                                    (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n  return\\<cdot>(Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y))) \\<bind>\n                                 (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                     return\\<cdot>\n                                     (Writer\\<cdot>w\\<cdot>x))))\\<cdot>\n                         x =\n                         (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>w\\<cdot>x)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                                 (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                                     return\\<cdot>\n                                     (Writer\\<cdot>\n(mappend\\<cdot>w\\<cdot>w')\\<cdot>\ny))))\\<cdot>\n                         x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a.\n       \\<lbrakk>\\<And>x.\n                   runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                   (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                       return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                   runWriterT\\<cdot>(k\\<cdot>x);\n        x = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(k\\<cdot>a) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y)) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                             return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                         runWriterT\\<cdot>(k\\<cdot>a) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (simp add: bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a.\n       \\<lbrakk>\\<And>x.\n                   runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                   (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                       return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                   runWriterT\\<cdot>(k\\<cdot>x);\n        x = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> runWriterT\\<cdot>(k\\<cdot>a) \\<bind>\n                         (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 return\\<cdot>(Writer\\<cdot>w\\<cdot>x))) =\n                         runWriterT\\<cdot>(k\\<cdot>a) \\<bind>\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (rule cfun_arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x w a.\n       \\<lbrakk>\\<And>x.\n                   runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                   (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                       return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                   runWriterT\\<cdot>(k\\<cdot>x);\n        x = Writer\\<cdot>w\\<cdot>a\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 return\\<cdot>(Writer\\<cdot>w\\<cdot>x))) =\n                         (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n                             return\\<cdot>\n                             (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                              y))", "apply (rule cfun_eqI, rename_tac x, case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa w a x.\n       \\<lbrakk>\\<And>x.\n                   runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                   (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                       return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                   runWriterT\\<cdot>(k\\<cdot>x);\n        xa = Writer\\<cdot>w\\<cdot>a; x = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>w\\<cdot>x)))\\<cdot>\n                         x =\n                         (case x of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y))\n 2. \\<And>xa w a x wa aa.\n       \\<lbrakk>\\<And>x.\n                   runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                   (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                       return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                   runWriterT\\<cdot>(k\\<cdot>x);\n        xa = Writer\\<cdot>w\\<cdot>a; x = Writer\\<cdot>wa\\<cdot>aa\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>w\\<cdot>x)))\\<cdot>\n                         x =\n                         (case x of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y))", "apply (simp add: bind_strict)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa w a x wa aa.\n       \\<lbrakk>\\<And>x.\n                   runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n                   (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                       return\\<cdot>(Writer\\<cdot>w\\<cdot>x)) =\n                   runWriterT\\<cdot>(k\\<cdot>x);\n        xa = Writer\\<cdot>w\\<cdot>a; x = Writer\\<cdot>wa\\<cdot>aa\\<rbrakk>\n       \\<Longrightarrow> (\\<Lambda> x.\n                             (case x of\n                              Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                                return\\<cdot>\n                                (Writer\\<cdot>\n                                 (mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                                 y)) \\<bind>\n                             (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n                                 return\\<cdot>\n                                 (Writer\\<cdot>w\\<cdot>x)))\\<cdot>\n                         x =\n                         (case x of\n                          Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n                            return\\<cdot>\n                            (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>\n                             y))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invar'_tellWT: \"invar' (tellWT\\<cdot>x\\<cdot>w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar' (tellWT\\<cdot>x\\<cdot>w)", "unfolding invar'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapWT\\<cdot>ID\\<cdot>(tellWT\\<cdot>x\\<cdot>w) = tellWT\\<cdot>x\\<cdot>w", "by (simp add: writerT_eq_iff)"], ["", "lemma invar'_liftWT: \"invar' (liftWT\\<cdot>m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar' (liftWT\\<cdot>m)", "unfolding invar'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapWT\\<cdot>ID\\<cdot>(liftWT\\<cdot>m) = liftWT\\<cdot>m", "by (simp add: writerT_eq_iff monad_fmap bind_bind)"], ["", "text \\<open>Left unit is satisfied for arguments built from fmap.\\<close>"], ["", "lemma bindWT_unitWT_fmapWT:\n  \"bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>(\\<Lambda> x. fmapWT\\<cdot>f\\<cdot>(k\\<cdot>x))\n    = fmapWT\\<cdot>f\\<cdot>(k\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(unitWT\\<cdot>x)\\<cdot>\n    (\\<Lambda> x. fmapWT\\<cdot>f\\<cdot>(k\\<cdot>x)) =\n    fmapWT\\<cdot>f\\<cdot>(k\\<cdot>x)", "apply (simp add: fmapWT_def writerT_eq_iff bind_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n    (\\<Lambda> x.\n        (case x of\n         Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n           return\\<cdot>\n           (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>\n            (f\\<cdot>x))) \\<bind>\n        (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n            return\\<cdot>\n            (Writer\\<cdot>(mappend\\<cdot>mempty\\<cdot>w')\\<cdot>y))) =\n    runWriterT\\<cdot>(k\\<cdot>x) \\<bind>\n    (\\<Lambda> (Writer\\<cdot>w\\<cdot>x).\n        return\\<cdot>\n        (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>(f\\<cdot>x)))", "apply (rule cfun_arg_cong, rule cfun_eqI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          return\\<cdot>\n          (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>\n           (f\\<cdot>x))) \\<bind>\n       (\\<Lambda> (Writer\\<cdot>w'\\<cdot>y).\n           return\\<cdot>\n           (Writer\\<cdot>(mappend\\<cdot>mempty\\<cdot>w')\\<cdot>y)) =\n       (case x of\n        Writer\\<cdot>w\\<cdot>x \\<Rightarrow>\n          return\\<cdot>\n          (Writer\\<cdot>(mappend\\<cdot>w\\<cdot>mempty)\\<cdot>(f\\<cdot>x)))", "apply (case_tac x, simp_all add: bind_strict mempty_left)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Right unit is satisfied for arguments built from fmap.\\<close>"], ["", "lemma bindWT_fmapWT_unitWT:\n  shows \"bindWT\\<cdot>(fmapWT\\<cdot>f\\<cdot>m)\\<cdot>unitWT = fmapWT\\<cdot>f\\<cdot>m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>(fmapWT\\<cdot>f\\<cdot>m)\\<cdot>unitWT =\n    fmapWT\\<cdot>f\\<cdot>m", "apply (simp add: bindWT_fmapWT)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. unitWT\\<cdot>(f\\<cdot>x)) =\n    fmapWT\\<cdot>f\\<cdot>m", "apply (simp add: fmapWT_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>All monad laws are preserved by values satisfying the invariant.\\<close>"], ["", "lemma invar'_right_unit: \"invar' m \\<Longrightarrow> bindWT\\<cdot>m\\<cdot>unitWT = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar' m \\<Longrightarrow> bindWT\\<cdot>m\\<cdot>unitWT = m", "unfolding invar'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapWT\\<cdot>ID\\<cdot>m = m \\<Longrightarrow>\n    bindWT\\<cdot>m\\<cdot>unitWT = m", "by (erule subst, rule bindWT_fmapWT_unitWT)"], ["", "lemma invar'_monad_fmap:\n  \"invar' m \\<Longrightarrow> fmapWT\\<cdot>f\\<cdot>m = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. unitWT\\<cdot>(f\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar' m \\<Longrightarrow>\n    fmapWT\\<cdot>f\\<cdot>m =\n    bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. unitWT\\<cdot>(f\\<cdot>x))", "unfolding invar'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapWT\\<cdot>ID\\<cdot>m = m \\<Longrightarrow>\n    fmapWT\\<cdot>f\\<cdot>m =\n    bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. unitWT\\<cdot>(f\\<cdot>x))", "by (erule subst, simp add: writerT_eq_iff mempty_right)"], ["", "lemma invar'_bind_assoc:\n  \"\\<lbrakk>invar' m; \\<And>x. invar' (f\\<cdot>x); \\<And>y. invar' (g\\<cdot>y)\\<rbrakk>\n    \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>f)\\<cdot>g = bindWT\\<cdot>m\\<cdot>(\\<Lambda> x. bindWT\\<cdot>(f\\<cdot>x)\\<cdot>g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invar' m; \\<And>x. invar' (f\\<cdot>x);\n     \\<And>y. invar' (g\\<cdot>y)\\<rbrakk>\n    \\<Longrightarrow> bindWT\\<cdot>(bindWT\\<cdot>m\\<cdot>f)\\<cdot>g =\n                      bindWT\\<cdot>m\\<cdot>\n                      (\\<Lambda> x. bindWT\\<cdot>(f\\<cdot>x)\\<cdot>g)", "by (rule bindWT_bindWT)"], ["", "end"]]}