{"file_name": "/home/qj213/afp-2021-10-22/thys/Tycon/Binary_Tree_Monad.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Tycon", "problem_names": ["lemma coerce_btree_abs [simp]: \"coerce\\<cdot>(btree_abs\\<cdot>x) = btree_abs\\<cdot>(coerce\\<cdot>x)\"", "lemma coerce_Leaf [simp]: \"coerce\\<cdot>(Leaf\\<cdot>x) = Leaf\\<cdot>(coerce\\<cdot>x)\"", "lemma coerce_Node [simp]: \"coerce\\<cdot>(Node\\<cdot>xs\\<cdot>ys) = Node\\<cdot>(coerce\\<cdot>xs)\\<cdot>(coerce\\<cdot>ys)\"", "lemma fmapU_btree_simps [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(\\<bottom>::udom\\<cdot>btree) = \\<bottom>\"\n  \"fmapU\\<cdot>f\\<cdot>(Leaf\\<cdot>x) = Leaf\\<cdot>(f\\<cdot>x)\"\n  \"fmapU\\<cdot>f\\<cdot>(Node\\<cdot>xs\\<cdot>ys) = Node\\<cdot>(fmapU\\<cdot>f\\<cdot>xs)\\<cdot>(fmapU\\<cdot>f\\<cdot>ys)\"", "lemma bindU_btree_strict [simp]: \"bindU\\<cdot>\\<bottom>\\<cdot>k = (\\<bottom>::udom\\<cdot>btree)\"", "lemma fmap_btree_simps [simp]:\n  \"fmap\\<cdot>f\\<cdot>(\\<bottom>::'a\\<cdot>btree) = \\<bottom>\"\n  \"fmap\\<cdot>f\\<cdot>(Leaf\\<cdot>x) = Leaf\\<cdot>(f\\<cdot>x)\"\n  \"fmap\\<cdot>f\\<cdot>(Node\\<cdot>xs\\<cdot>ys) = Node\\<cdot>(fmap\\<cdot>f\\<cdot>xs)\\<cdot>(fmap\\<cdot>f\\<cdot>ys)\"", "lemma bind_btree_simps [simp]:\n  \"bind\\<cdot>(\\<bottom>::'a\\<cdot>btree)\\<cdot>k = \\<bottom>\"\n  \"bind\\<cdot>(Leaf\\<cdot>x)\\<cdot>k = k\\<cdot>x\"\n  \"bind\\<cdot>(Node\\<cdot>xs\\<cdot>ys)\\<cdot>k = Node\\<cdot>(bind\\<cdot>xs\\<cdot>k)\\<cdot>(bind\\<cdot>ys\\<cdot>k)\"", "lemma return_btree_def:\n  \"return = Leaf\"", "lemma join_btree_simps [simp]:\n  \"join\\<cdot>(\\<bottom>::'a\\<cdot>btree\\<cdot>btree) = \\<bottom>\"\n  \"join\\<cdot>(Leaf\\<cdot>xs) = xs\"\n  \"join\\<cdot>(Node\\<cdot>xss\\<cdot>yss) = Node\\<cdot>(join\\<cdot>xss)\\<cdot>(join\\<cdot>yss)\""], "translations": [["", "lemma coerce_btree_abs [simp]: \"coerce\\<cdot>(btree_abs\\<cdot>x) = btree_abs\\<cdot>(coerce\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('b\\<cdot>btree, 'a\\<cdot>btree)\\<cdot>(btree_abs\\<cdot>x) =\n    btree_abs\\<cdot>\n    (COERCE\n      ('b\\<^sub>\\<bottom> \\<oplus>\n       ('b\\<cdot>btree)\\<^sub>\\<bottom> \\<otimes>\n       ('b\\<cdot>btree)\\<^sub>\\<bottom>,\n       'a\\<^sub>\\<bottom> \\<oplus>\n       ('a\\<cdot>btree)\\<^sub>\\<bottom> \\<otimes>\n       ('a\\<cdot>btree)\\<^sub>\\<bottom>)\\<cdot>\n     x)", "apply (simp add: btree_abs_def coerce_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. PRJ('a\\<cdot>btree)\\<cdot>\n    (EMB('b\\<cdot>btree)\\<cdot>\n     (PRJ('b\\<cdot>btree)\\<cdot>\n      (EMB('b\\<^sub>\\<bottom> \\<oplus>\n           ('b\\<cdot>btree)\\<^sub>\\<bottom> \\<otimes>\n           ('b\\<cdot>btree)\\<^sub>\\<bottom>)\\<cdot>\n       x))) =\n    PRJ('a\\<cdot>btree)\\<cdot>\n    (EMB('a\\<^sub>\\<bottom> \\<oplus>\n         ('a\\<cdot>btree)\\<^sub>\\<bottom> \\<otimes>\n         ('a\\<cdot>btree)\\<^sub>\\<bottom>)\\<cdot>\n     (PRJ('a\\<^sub>\\<bottom> \\<oplus>\n          ('a\\<cdot>btree)\\<^sub>\\<bottom> \\<otimes>\n          ('a\\<cdot>btree)\\<^sub>\\<bottom>)\\<cdot>\n      (EMB('b\\<^sub>\\<bottom> \\<oplus>\n           ('b\\<cdot>btree)\\<^sub>\\<bottom> \\<otimes>\n           ('b\\<cdot>btree)\\<^sub>\\<bottom>)\\<cdot>\n       x)))", "apply (simp add: emb_prj_emb prj_emb_prj DEFL_eq_btree)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma coerce_Leaf [simp]: \"coerce\\<cdot>(Leaf\\<cdot>x) = Leaf\\<cdot>(coerce\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('b\\<cdot>btree, 'a\\<cdot>btree)\\<cdot>(Leaf\\<cdot>x) =\n    Leaf\\<cdot>(COERCE('b, 'a)\\<cdot>x)", "unfolding Leaf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('b\\<cdot>btree, 'a\\<cdot>btree)\\<cdot>\n    ((\\<Lambda> a. btree_abs\\<cdot>(sinl\\<cdot>(up\\<cdot>a)))\\<cdot>x) =\n    (\\<Lambda> a. btree_abs\\<cdot>(sinl\\<cdot>(up\\<cdot>a)))\\<cdot>\n    (COERCE('b, 'a)\\<cdot>x)", "by simp"], ["", "lemma coerce_Node [simp]: \"coerce\\<cdot>(Node\\<cdot>xs\\<cdot>ys) = Node\\<cdot>(coerce\\<cdot>xs)\\<cdot>(coerce\\<cdot>ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('b\\<cdot>btree, 'a\\<cdot>btree)\\<cdot>(Node\\<cdot>xs\\<cdot>ys) =\n    Node\\<cdot>(COERCE('b\\<cdot>btree, 'a\\<cdot>btree)\\<cdot>xs)\\<cdot>\n    (COERCE('b\\<cdot>btree, 'a\\<cdot>btree)\\<cdot>ys)", "unfolding Node_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('b\\<cdot>btree, 'a\\<cdot>btree)\\<cdot>\n    ((\\<Lambda> app1 app2.\n         btree_abs\\<cdot>\n         (sinr\\<cdot>(:up\\<cdot>app1, up\\<cdot>app2:)))\\<cdot>\n     xs\\<cdot>\n     ys) =\n    (\\<Lambda> app1 app2.\n        btree_abs\\<cdot>\n        (sinr\\<cdot>(:up\\<cdot>app1, up\\<cdot>app2:)))\\<cdot>\n    (COERCE('b\\<cdot>btree, 'a\\<cdot>btree)\\<cdot>xs)\\<cdot>\n    (COERCE('b\\<cdot>btree, 'a\\<cdot>btree)\\<cdot>ys)", "by simp"], ["", "lemma fmapU_btree_simps [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(\\<bottom>::udom\\<cdot>btree) = \\<bottom>\"\n  \"fmapU\\<cdot>f\\<cdot>(Leaf\\<cdot>x) = Leaf\\<cdot>(f\\<cdot>x)\"\n  \"fmapU\\<cdot>f\\<cdot>(Node\\<cdot>xs\\<cdot>ys) = Node\\<cdot>(fmapU\\<cdot>f\\<cdot>xs)\\<cdot>(fmapU\\<cdot>f\\<cdot>ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>\\<bottom> = \\<bottom> &&&\n    fmapU\\<cdot>f\\<cdot>(Leaf\\<cdot>x) = Leaf\\<cdot>(f\\<cdot>x) &&&\n    fmapU\\<cdot>f\\<cdot>(Node\\<cdot>xs\\<cdot>ys) =\n    Node\\<cdot>(fmapU\\<cdot>f\\<cdot>xs)\\<cdot>(fmapU\\<cdot>f\\<cdot>ys)", "unfolding fmapU_btree_def btree_map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a.\n        \\<mu> uu.\n           btree_abs oo\n           ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n           (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n           btree_rep)\\<cdot>\n    f\\<cdot>\n    \\<bottom> =\n    \\<bottom> &&&\n    (\\<Lambda> a.\n        \\<mu> uu.\n           btree_abs oo\n           ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n           (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n           btree_rep)\\<cdot>\n    f\\<cdot>\n    (Leaf\\<cdot>x) =\n    Leaf\\<cdot>(f\\<cdot>x) &&&\n    (\\<Lambda> a.\n        \\<mu> uu.\n           btree_abs oo\n           ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n           (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n           btree_rep)\\<cdot>\n    f\\<cdot>\n    (Node\\<cdot>xs\\<cdot>ys) =\n    Node\\<cdot>\n    ((\\<Lambda> a.\n         \\<mu> uu.\n            btree_abs oo\n            ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n            (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n            btree_rep)\\<cdot>\n     f\\<cdot>\n     xs)\\<cdot>\n    ((\\<Lambda> a.\n         \\<mu> uu.\n            btree_abs oo\n            ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n            (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n            btree_rep)\\<cdot>\n     f\\<cdot>\n     ys)", "apply (subst fix_eq, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Lambda> a.\n        \\<mu> uu.\n           btree_abs oo\n           ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n           (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n           btree_rep)\\<cdot>\n    f\\<cdot>\n    (Leaf\\<cdot>x) =\n    Leaf\\<cdot>(f\\<cdot>x)\n 2. (\\<Lambda> a.\n        \\<mu> uu.\n           btree_abs oo\n           ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n           (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n           btree_rep)\\<cdot>\n    f\\<cdot>\n    (Node\\<cdot>xs\\<cdot>ys) =\n    Node\\<cdot>\n    ((\\<Lambda> a.\n         \\<mu> uu.\n            btree_abs oo\n            ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n            (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n            btree_rep)\\<cdot>\n     f\\<cdot>\n     xs)\\<cdot>\n    ((\\<Lambda> a.\n         \\<mu> uu.\n            btree_abs oo\n            ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n            (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n            btree_rep)\\<cdot>\n     f\\<cdot>\n     ys)", "apply (subst fix_eq, simp add: Leaf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a.\n        \\<mu> uu.\n           btree_abs oo\n           ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n           (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n           btree_rep)\\<cdot>\n    f\\<cdot>\n    (Node\\<cdot>xs\\<cdot>ys) =\n    Node\\<cdot>\n    ((\\<Lambda> a.\n         \\<mu> uu.\n            btree_abs oo\n            ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n            (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n            btree_rep)\\<cdot>\n     f\\<cdot>\n     xs)\\<cdot>\n    ((\\<Lambda> a.\n         \\<mu> uu.\n            btree_abs oo\n            ssum_map\\<cdot>(u_map\\<cdot>a)\\<cdot>\n            (sprod_map\\<cdot>(u_map\\<cdot>uu)\\<cdot>(u_map\\<cdot>uu)) oo\n            btree_rep)\\<cdot>\n     f\\<cdot>\n     ys)", "apply (subst fix_eq, simp add: Node_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Class instance proofs\\<close>"], ["", "instance btree :: \"functor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(btree, functor_class)", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f g xs.\n       fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n       fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs", "apply (induct_tac xs rule: btree.induct, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "instantiation btree :: monad\nbegin"], ["", "definition\n  \"returnU = Leaf\""], ["", "fixrec bindU_btree :: \"udom\\<cdot>btree \\<rightarrow> (udom \\<rightarrow> udom\\<cdot>btree) \\<rightarrow> udom\\<cdot>btree\"\n  where \"bindU_btree\\<cdot>(Leaf\\<cdot>x)\\<cdot>k = k\\<cdot>x\"\n  | \"bindU_btree\\<cdot>(Node\\<cdot>xs\\<cdot>ys)\\<cdot>k =\n      Node\\<cdot>(bindU_btree\\<cdot>xs\\<cdot>k)\\<cdot>(bindU_btree\\<cdot>ys\\<cdot>k)\""], ["", "lemma bindU_btree_strict [simp]: \"bindU\\<cdot>\\<bottom>\\<cdot>k = (\\<bottom>::udom\\<cdot>btree)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>\\<bottom>\\<cdot>k = \\<bottom>", "by fixrec_simp"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(btree, monad_class)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix x :: \"udom\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix f :: \"udom \\<rightarrow> udom\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix h k :: \"udom \\<rightarrow> udom\\<cdot>btree\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix xs :: \"udom\\<cdot>btree\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "show \"fmapU\\<cdot>f\\<cdot>xs = bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>xs =\n    bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))", "by (induct xs rule: btree.induct, simp_all add: returnU_btree_def)"], ["proof (state)\nthis:\n  fmapU\\<cdot>f\\<cdot>xs =\n  bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n\ngoal (2 subgoals):\n 1. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 2. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "show \"bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>k = k\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>k = k\\<cdot>x", "by (simp add: returnU_btree_def)"], ["proof (state)\nthis:\n  bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>k = k\\<cdot>x\n\ngoal (1 subgoal):\n 1. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "show \"bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>h)\\<cdot>k = bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(h\\<cdot>x)\\<cdot>k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>h)\\<cdot>k =\n    bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(h\\<cdot>x)\\<cdot>k)", "by (induct xs rule: btree.induct) simp_all"], ["proof (state)\nthis:\n  bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>h)\\<cdot>k =\n  bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(h\\<cdot>x)\\<cdot>k)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Transfer properties to polymorphic versions\\<close>"], ["", "lemma fmap_btree_simps [simp]:\n  \"fmap\\<cdot>f\\<cdot>(\\<bottom>::'a\\<cdot>btree) = \\<bottom>\"\n  \"fmap\\<cdot>f\\<cdot>(Leaf\\<cdot>x) = Leaf\\<cdot>(f\\<cdot>x)\"\n  \"fmap\\<cdot>f\\<cdot>(Node\\<cdot>xs\\<cdot>ys) = Node\\<cdot>(fmap\\<cdot>f\\<cdot>xs)\\<cdot>(fmap\\<cdot>f\\<cdot>ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmap\\<cdot>f\\<cdot>\\<bottom> = \\<bottom> &&&\n    fmap\\<cdot>f\\<cdot>(Leaf\\<cdot>x) = Leaf\\<cdot>(f\\<cdot>x) &&&\n    fmap\\<cdot>f\\<cdot>(Node\\<cdot>xs\\<cdot>ys) =\n    Node\\<cdot>(fmap\\<cdot>f\\<cdot>xs)\\<cdot>(fmap\\<cdot>f\\<cdot>ys)", "unfolding fmap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>btree \\<rightarrow> udom\\<cdot>btree,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>btree \\<rightarrow> 'b\\<cdot>btree)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    \\<bottom> =\n    \\<bottom> &&&\n    COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>btree \\<rightarrow> udom\\<cdot>btree,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>btree \\<rightarrow> 'b\\<cdot>btree)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    (Leaf\\<cdot>x) =\n    Leaf\\<cdot>(f\\<cdot>x) &&&\n    COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>btree \\<rightarrow> udom\\<cdot>btree,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>btree \\<rightarrow> 'b\\<cdot>btree)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    (Node\\<cdot>xs\\<cdot>ys) =\n    Node\\<cdot>\n    (COERCE\n      ((udom \\<rightarrow> udom) \\<rightarrow>\n       udom\\<cdot>btree \\<rightarrow> udom\\<cdot>btree,\n       ('a \\<rightarrow> 'b) \\<rightarrow>\n       'a\\<cdot>btree \\<rightarrow> 'b\\<cdot>btree)\\<cdot>\n     fmapU\\<cdot>\n     f\\<cdot>\n     xs)\\<cdot>\n    (COERCE\n      ((udom \\<rightarrow> udom) \\<rightarrow>\n       udom\\<cdot>btree \\<rightarrow> udom\\<cdot>btree,\n       ('a \\<rightarrow> 'b) \\<rightarrow>\n       'a\\<cdot>btree \\<rightarrow> 'b\\<cdot>btree)\\<cdot>\n     fmapU\\<cdot>\n     f\\<cdot>\n     ys)", "by simp_all"], ["", "lemma bind_btree_simps [simp]:\n  \"bind\\<cdot>(\\<bottom>::'a\\<cdot>btree)\\<cdot>k = \\<bottom>\"\n  \"bind\\<cdot>(Leaf\\<cdot>x)\\<cdot>k = k\\<cdot>x\"\n  \"bind\\<cdot>(Node\\<cdot>xs\\<cdot>ys)\\<cdot>k = Node\\<cdot>(bind\\<cdot>xs\\<cdot>k)\\<cdot>(bind\\<cdot>ys\\<cdot>k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<bind> k = \\<bottom> &&&\n    Leaf\\<cdot>x \\<bind> k = k\\<cdot>x &&&\n    Node\\<cdot>xs\\<cdot>ys \\<bind> k =\n    Node\\<cdot>(xs \\<bind> k)\\<cdot>(ys \\<bind> k)", "unfolding bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom\\<cdot>btree \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>btree) \\<rightarrow> udom\\<cdot>btree,\n      'a\\<cdot>btree \\<rightarrow>\n      ('a \\<rightarrow> 'b\\<cdot>btree) \\<rightarrow> 'b\\<cdot>btree)\\<cdot>\n    bindU\\<cdot>\n    \\<bottom>\\<cdot>\n    k =\n    \\<bottom> &&&\n    COERCE\n     (udom\\<cdot>btree \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>btree) \\<rightarrow> udom\\<cdot>btree,\n      'a\\<cdot>btree \\<rightarrow>\n      ('a \\<rightarrow> 'b\\<cdot>btree) \\<rightarrow> 'b\\<cdot>btree)\\<cdot>\n    bindU\\<cdot>\n    (Leaf\\<cdot>x)\\<cdot>\n    k =\n    k\\<cdot>x &&&\n    COERCE\n     (udom\\<cdot>btree \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>btree) \\<rightarrow> udom\\<cdot>btree,\n      'a\\<cdot>btree \\<rightarrow>\n      ('a \\<rightarrow> 'b\\<cdot>btree) \\<rightarrow> 'b\\<cdot>btree)\\<cdot>\n    bindU\\<cdot>\n    (Node\\<cdot>xs\\<cdot>ys)\\<cdot>\n    k =\n    Node\\<cdot>\n    (COERCE\n      (udom\\<cdot>btree \\<rightarrow>\n       (udom \\<rightarrow> udom\\<cdot>btree) \\<rightarrow> udom\\<cdot>btree,\n       'a\\<cdot>btree \\<rightarrow>\n       ('a \\<rightarrow> 'b\\<cdot>btree) \\<rightarrow>\n       'b\\<cdot>btree)\\<cdot>\n     bindU\\<cdot>\n     xs\\<cdot>\n     k)\\<cdot>\n    (COERCE\n      (udom\\<cdot>btree \\<rightarrow>\n       (udom \\<rightarrow> udom\\<cdot>btree) \\<rightarrow> udom\\<cdot>btree,\n       'a\\<cdot>btree \\<rightarrow>\n       ('a \\<rightarrow> 'b\\<cdot>btree) \\<rightarrow>\n       'b\\<cdot>btree)\\<cdot>\n     bindU\\<cdot>\n     ys\\<cdot>\n     k)", "by (simp_all add: coerce_simp)"], ["", "lemma return_btree_def:\n  \"return = Leaf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return = Leaf", "unfolding return_def returnU_btree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom \\<rightarrow> udom\\<cdot>btree,\n      'a \\<rightarrow> 'a\\<cdot>btree)\\<cdot>\n    Leaf =\n    Leaf", "by (simp add: coerce_simp eta_cfun)"], ["", "lemma join_btree_simps [simp]:\n  \"join\\<cdot>(\\<bottom>::'a\\<cdot>btree\\<cdot>btree) = \\<bottom>\"\n  \"join\\<cdot>(Leaf\\<cdot>xs) = xs\"\n  \"join\\<cdot>(Node\\<cdot>xss\\<cdot>yss) = Node\\<cdot>(join\\<cdot>xss)\\<cdot>(join\\<cdot>yss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join\\<cdot>\\<bottom> = \\<bottom> &&&\n    join\\<cdot>(Leaf\\<cdot>xs) = xs &&&\n    join\\<cdot>(Node\\<cdot>xss\\<cdot>yss) =\n    Node\\<cdot>(join\\<cdot>xss)\\<cdot>(join\\<cdot>yss)", "unfolding join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>\\<bottom> =\n    \\<bottom> &&&\n    (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>(Leaf\\<cdot>xs) = xs &&&\n    (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>\n    (Node\\<cdot>xss\\<cdot>yss) =\n    Node\\<cdot>((\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>xss)\\<cdot>\n    ((\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>yss)", "by simp_all"], ["", "end"]]}