{"file_name": "/home/qj213/afp-2021-10-22/thys/Tycon/Writer_Monad.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Tycon", "problem_names": ["lemma coerce_writer_abs [simp]: \"coerce\\<cdot>(writer_abs\\<cdot>x) = writer_abs\\<cdot>(coerce\\<cdot>x)\"", "lemma coerce_Writer [simp]:\n  \"coerce\\<cdot>(Writer\\<cdot>w\\<cdot>x) = Writer\\<cdot>(coerce\\<cdot>w)\\<cdot>(coerce\\<cdot>x)\"", "lemma fmapU_writer_simps [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(\\<bottom>::udom\\<cdot>'w writer) = \\<bottom>\"\n  \"fmapU\\<cdot>f\\<cdot>(Writer\\<cdot>w\\<cdot>x) = Writer\\<cdot>w\\<cdot>(f\\<cdot>x)\"", "lemma bindU_writer_strict [simp]: \"bindU\\<cdot>\\<bottom>\\<cdot>k = (\\<bottom>::udom\\<cdot>'a writer)\"", "lemma fmap_writer_simps [simp]:\n  \"fmap\\<cdot>f\\<cdot>(\\<bottom>::'a\\<cdot>'w writer) = \\<bottom>\"\n  \"fmap\\<cdot>f\\<cdot>(Writer\\<cdot>w\\<cdot>x :: 'a\\<cdot>'w writer) = Writer\\<cdot>w\\<cdot>(f\\<cdot>x)\"", "lemma return_writer_def: \"return = Writer\\<cdot>mempty\"", "lemma bind_writer_simps [simp]:\n  \"bind\\<cdot>(\\<bottom> :: 'a\\<cdot>'w::monoid writer)\\<cdot>f = \\<bottom>\"\n  \"bind\\<cdot>(Writer\\<cdot>w\\<cdot>x :: 'a\\<cdot>'w::monoid writer)\\<cdot>k =\n    (case k\\<cdot>x of Writer\\<cdot>w'\\<cdot>y \\<Rightarrow> Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)\"", "lemma join_writer_simps [simp]:\n  \"join\\<cdot>\\<bottom> = (\\<bottom> :: 'a\\<cdot>'w::monoid writer)\"\n  \"join\\<cdot>(Writer\\<cdot>w\\<cdot>(Writer\\<cdot>w'\\<cdot>x)) = Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>x\""], "translations": [["", "lemma coerce_writer_abs [simp]: \"coerce\\<cdot>(writer_abs\\<cdot>x) = writer_abs\\<cdot>(coerce\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('c\\<cdot>'d writer, 'a\\<cdot>'b writer)\\<cdot>\n    (writer_abs\\<cdot>x) =\n    writer_abs\\<cdot>\n    (COERCE\n      ('d\\<^sub>\\<bottom> \\<otimes> 'c\\<^sub>\\<bottom>,\n       'b\\<^sub>\\<bottom> \\<otimes> 'a\\<^sub>\\<bottom>)\\<cdot>\n     x)", "apply (simp add: writer_abs_def coerce_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. PRJ('a\\<cdot>'b writer)\\<cdot>\n    (EMB('c\\<cdot>'d writer)\\<cdot>\n     (PRJ('c\\<cdot>'d writer)\\<cdot>\n      (EMB('d\\<^sub>\\<bottom> \\<otimes> 'c\\<^sub>\\<bottom>)\\<cdot>x))) =\n    PRJ('a\\<cdot>'b writer)\\<cdot>\n    (EMB('b\\<^sub>\\<bottom> \\<otimes> 'a\\<^sub>\\<bottom>)\\<cdot>\n     (PRJ('b\\<^sub>\\<bottom> \\<otimes> 'a\\<^sub>\\<bottom>)\\<cdot>\n      (EMB('d\\<^sub>\\<bottom> \\<otimes> 'c\\<^sub>\\<bottom>)\\<cdot>x)))", "apply (simp add: emb_prj_emb prj_emb_prj DEFL_eq_writer)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma coerce_Writer [simp]:\n  \"coerce\\<cdot>(Writer\\<cdot>w\\<cdot>x) = Writer\\<cdot>(coerce\\<cdot>w)\\<cdot>(coerce\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('c\\<cdot>'d writer, 'a\\<cdot>'b writer)\\<cdot>\n    (Writer\\<cdot>w\\<cdot>x) =\n    Writer\\<cdot>(COERCE('d, 'b)\\<cdot>w)\\<cdot>(COERCE('c, 'a)\\<cdot>x)", "unfolding Writer_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('c\\<cdot>'d writer, 'a\\<cdot>'b writer)\\<cdot>\n    ((\\<Lambda> w a. writer_abs\\<cdot>(:up\\<cdot>w, up\\<cdot>a:))\\<cdot>\n     w\\<cdot>\n     x) =\n    (\\<Lambda> w a. writer_abs\\<cdot>(:up\\<cdot>w, up\\<cdot>a:))\\<cdot>\n    (COERCE('d, 'b)\\<cdot>w)\\<cdot>\n    (COERCE('c, 'a)\\<cdot>x)", "by simp"], ["", "lemma fmapU_writer_simps [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(\\<bottom>::udom\\<cdot>'w writer) = \\<bottom>\"\n  \"fmapU\\<cdot>f\\<cdot>(Writer\\<cdot>w\\<cdot>x) = Writer\\<cdot>w\\<cdot>(f\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>\\<bottom> = \\<bottom> &&&\n    fmapU\\<cdot>f\\<cdot>(Writer\\<cdot>w\\<cdot>x) =\n    Writer\\<cdot>w\\<cdot>(f\\<cdot>x)", "unfolding fmapU_writer_def writer_map_def fix_const"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> w a.\n        writer_abs oo\n        sprod_map\\<cdot>(u_map\\<cdot>w)\\<cdot>(u_map\\<cdot>a) oo\n        writer_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    \\<bottom> =\n    \\<bottom> &&&\n    (\\<Lambda> w a.\n        writer_abs oo\n        sprod_map\\<cdot>(u_map\\<cdot>w)\\<cdot>(u_map\\<cdot>a) oo\n        writer_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    (Writer\\<cdot>w\\<cdot>x) =\n    Writer\\<cdot>w\\<cdot>(f\\<cdot>x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> w a.\n        writer_abs oo\n        sprod_map\\<cdot>(u_map\\<cdot>w)\\<cdot>(u_map\\<cdot>a) oo\n        writer_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    (Writer\\<cdot>w\\<cdot>x) =\n    Writer\\<cdot>w\\<cdot>(f\\<cdot>x)", "apply (simp add: Writer_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Class instance proofs\\<close>"], ["", "instance writer :: (\"domain\") \"functor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a writer, functor_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f g xs.\n       fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n       fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs", "fix f g :: \"udom \\<rightarrow> udom\" and xs :: \"udom\\<cdot>'a writer\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f g xs.\n       fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n       fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs", "show \"fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) = fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n    fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs", "by (induct xs rule: writer.induct) simp_all"], ["proof (state)\nthis:\n  fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n  fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs\n\ngoal:\nNo subgoals!", "qed"], ["", "instantiation writer :: (monoid) monad\nbegin"], ["", "fixrec bindU_writer ::\n    \"udom\\<cdot>'a writer \\<rightarrow> (udom \\<rightarrow> udom\\<cdot>'a writer) \\<rightarrow> udom\\<cdot>'a writer\"\n  where \"bindU_writer\\<cdot>(Writer\\<cdot>w\\<cdot>x)\\<cdot>f =\n    (case f\\<cdot>x of Writer\\<cdot>w'\\<cdot>y \\<Rightarrow> Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)\""], ["", "lemma bindU_writer_strict [simp]: \"bindU\\<cdot>\\<bottom>\\<cdot>k = (\\<bottom>::udom\\<cdot>'a writer)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>\\<bottom>\\<cdot>k = \\<bottom>", "by fixrec_simp"], ["", "definition\n  \"returnU = Writer\\<cdot>mempty\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a writer, monad_class)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix f :: \"udom \\<rightarrow> udom\" and m :: \"udom\\<cdot>'a writer\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "show \"fmapU\\<cdot>f\\<cdot>m = bindU\\<cdot>m\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>m =\n    bindU\\<cdot>m\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))", "by (induct m rule: writer.induct)\n       (simp_all add: returnU_writer_def mempty_right)"], ["proof (state)\nthis:\n  fmapU\\<cdot>f\\<cdot>m =\n  bindU\\<cdot>m\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n\ngoal (2 subgoals):\n 1. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 2. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 2. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix f :: \"udom \\<rightarrow> udom\\<cdot>'a writer\" and x :: \"udom\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 2. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "show \"bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x", "by (cases \"f\\<cdot>x\" rule: writer.exhaust)\n       (simp_all add: returnU_writer_def mempty_left)"], ["proof (state)\nthis:\n  bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n\ngoal (1 subgoal):\n 1. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix m :: \"udom\\<cdot>'a writer\" and f g :: \"udom \\<rightarrow> udom\\<cdot>'a writer\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "show \"bindU\\<cdot>(bindU\\<cdot>m\\<cdot>f)\\<cdot>g = bindU\\<cdot>m\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>(bindU\\<cdot>m\\<cdot>f)\\<cdot>g =\n    bindU\\<cdot>m\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "apply (induct m rule: writer.induct, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w a.\n       bindU\\<cdot>(bindU\\<cdot>(Writer\\<cdot>w\\<cdot>a)\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>(Writer\\<cdot>w\\<cdot>a)\\<cdot>\n       (\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "apply (case_tac \"f\\<cdot>a\" rule: writer.exhaust, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w a wa aa.\n       f\\<cdot>a = Writer\\<cdot>wa\\<cdot>aa \\<Longrightarrow>\n       bindU\\<cdot>(bindU\\<cdot>(Writer\\<cdot>w\\<cdot>a)\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>(Writer\\<cdot>w\\<cdot>a)\\<cdot>\n       (\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "apply (case_tac \"g\\<cdot>aa\" rule: writer.exhaust, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w a wa aa wb ab.\n       \\<lbrakk>f\\<cdot>a = Writer\\<cdot>wa\\<cdot>aa;\n        g\\<cdot>aa = Writer\\<cdot>wb\\<cdot>ab\\<rbrakk>\n       \\<Longrightarrow> bindU\\<cdot>\n                         (bindU\\<cdot>(Writer\\<cdot>w\\<cdot>a)\\<cdot>\n                          f)\\<cdot>\n                         g =\n                         bindU\\<cdot>(Writer\\<cdot>w\\<cdot>a)\\<cdot>\n                         (\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "apply (simp add: mappend_assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  bindU\\<cdot>(bindU\\<cdot>m\\<cdot>f)\\<cdot>g =\n  bindU\\<cdot>m\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Transfer properties to polymorphic versions\\<close>"], ["", "lemma fmap_writer_simps [simp]:\n  \"fmap\\<cdot>f\\<cdot>(\\<bottom>::'a\\<cdot>'w writer) = \\<bottom>\"\n  \"fmap\\<cdot>f\\<cdot>(Writer\\<cdot>w\\<cdot>x :: 'a\\<cdot>'w writer) = Writer\\<cdot>w\\<cdot>(f\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmap\\<cdot>f\\<cdot>\\<bottom> = \\<bottom> &&&\n    fmap\\<cdot>f\\<cdot>(Writer\\<cdot>w\\<cdot>x) =\n    Writer\\<cdot>w\\<cdot>(f\\<cdot>x)", "unfolding fmap_def [where 'f=\"'w writer\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>'w writer \\<rightarrow> udom\\<cdot>'w writer,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>'w writer \\<rightarrow> 'b\\<cdot>'w writer)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    \\<bottom> =\n    \\<bottom> &&&\n    COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>'w writer \\<rightarrow> udom\\<cdot>'w writer,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>'w writer \\<rightarrow> 'b\\<cdot>'w writer)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    (Writer\\<cdot>w\\<cdot>x) =\n    Writer\\<cdot>w\\<cdot>(f\\<cdot>x)", "by (simp_all add: coerce_simp)"], ["", "lemma return_writer_def: \"return = Writer\\<cdot>mempty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return = Writer\\<cdot>mempty", "unfolding return_def returnU_writer_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom \\<rightarrow> udom\\<cdot>'b writer,\n      'a \\<rightarrow> 'a\\<cdot>'b writer)\\<cdot>\n    (Writer\\<cdot>mempty) =\n    Writer\\<cdot>mempty", "by (simp add: coerce_simp eta_cfun)"], ["", "lemma bind_writer_simps [simp]:\n  \"bind\\<cdot>(\\<bottom> :: 'a\\<cdot>'w::monoid writer)\\<cdot>f = \\<bottom>\"\n  \"bind\\<cdot>(Writer\\<cdot>w\\<cdot>x :: 'a\\<cdot>'w::monoid writer)\\<cdot>k =\n    (case k\\<cdot>x of Writer\\<cdot>w'\\<cdot>y \\<Rightarrow> Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<bind> f = \\<bottom> &&&\n    Writer\\<cdot>w\\<cdot>x \\<bind> k =\n    (case k\\<cdot>x of\n     Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n       Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)", "unfolding bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom\\<cdot>'w writer \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>'w writer) \\<rightarrow>\n      udom\\<cdot>'w writer,\n      'a\\<cdot>'w writer \\<rightarrow>\n      ('a \\<rightarrow> 'b\\<cdot>'w writer) \\<rightarrow>\n      'b\\<cdot>'w writer)\\<cdot>\n    bindU\\<cdot>\n    \\<bottom>\\<cdot>\n    f =\n    \\<bottom> &&&\n    COERCE\n     (udom\\<cdot>'w writer \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>'w writer) \\<rightarrow>\n      udom\\<cdot>'w writer,\n      'a\\<cdot>'w writer \\<rightarrow>\n      ('a \\<rightarrow> 'c\\<cdot>'w writer) \\<rightarrow>\n      'c\\<cdot>'w writer)\\<cdot>\n    bindU\\<cdot>\n    (Writer\\<cdot>w\\<cdot>x)\\<cdot>\n    k =\n    (case k\\<cdot>x of\n     Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n       Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)", "apply (simp add: coerce_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom\\<cdot>'w writer \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>'w writer) \\<rightarrow>\n      udom\\<cdot>'w writer,\n      'a\\<cdot>'w writer \\<rightarrow>\n      ('a \\<rightarrow> 'c\\<cdot>'w writer) \\<rightarrow>\n      'c\\<cdot>'w writer)\\<cdot>\n    bindU\\<cdot>\n    (Writer\\<cdot>w\\<cdot>x)\\<cdot>\n    k =\n    (case k\\<cdot>x of\n     Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n       Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)", "apply (cases \"k\\<cdot>x\" rule: writer.exhaust)"], ["proof (prove)\ngoal (2 subgoals):\n 1. k\\<cdot>x = \\<bottom> \\<Longrightarrow>\n    COERCE\n     (udom\\<cdot>'w writer \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>'w writer) \\<rightarrow>\n      udom\\<cdot>'w writer,\n      'a\\<cdot>'w writer \\<rightarrow>\n      ('a \\<rightarrow> 'c\\<cdot>'w writer) \\<rightarrow>\n      'c\\<cdot>'w writer)\\<cdot>\n    bindU\\<cdot>\n    (Writer\\<cdot>w\\<cdot>x)\\<cdot>\n    k =\n    (case k\\<cdot>x of\n     Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n       Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)\n 2. \\<And>wa a.\n       k\\<cdot>x = Writer\\<cdot>wa\\<cdot>a \\<Longrightarrow>\n       COERCE\n        (udom\\<cdot>'w writer \\<rightarrow>\n         (udom \\<rightarrow> udom\\<cdot>'w writer) \\<rightarrow>\n         udom\\<cdot>'w writer,\n         'a\\<cdot>'w writer \\<rightarrow>\n         ('a \\<rightarrow> 'c\\<cdot>'w writer) \\<rightarrow>\n         'c\\<cdot>'w writer)\\<cdot>\n       bindU\\<cdot>\n       (Writer\\<cdot>w\\<cdot>x)\\<cdot>\n       k =\n       (case k\\<cdot>x of\n        Writer\\<cdot>w'\\<cdot>y \\<Rightarrow>\n          Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>y)", "apply (simp_all add: coerce_simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma join_writer_simps [simp]:\n  \"join\\<cdot>\\<bottom> = (\\<bottom> :: 'a\\<cdot>'w::monoid writer)\"\n  \"join\\<cdot>(Writer\\<cdot>w\\<cdot>(Writer\\<cdot>w'\\<cdot>x)) = Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join\\<cdot>\\<bottom> = \\<bottom> &&&\n    join\\<cdot>(Writer\\<cdot>w\\<cdot>(Writer\\<cdot>w'\\<cdot>x)) =\n    Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>x", "unfolding join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>\\<bottom> =\n    \\<bottom> &&&\n    (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>\n    (Writer\\<cdot>w\\<cdot>(Writer\\<cdot>w'\\<cdot>x)) =\n    Writer\\<cdot>(mappend\\<cdot>w\\<cdot>w')\\<cdot>x", "by simp_all"], ["", "subsection \\<open>Extra operations\\<close>"], ["", "definition tell :: \"'w \\<rightarrow> unit\\<cdot>('w::monoid writer)\"\n  where \"tell = (\\<Lambda> w. Writer\\<cdot>w\\<cdot>())\""], ["", "end"]]}