{"file_name": "/home/qj213/afp-2021-10-22/thys/Tycon/Lift_Monad.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Tycon", "problem_names": ["lemma coerce_lifted_abs [simp]: \"coerce\\<cdot>(lifted_abs\\<cdot>x) = lifted_abs\\<cdot>(coerce\\<cdot>x)\"", "lemma coerce_Lifted [simp]: \"coerce\\<cdot>(Lifted\\<cdot>x) = Lifted\\<cdot>(coerce\\<cdot>x)\"", "lemma fmapU_lifted_simps [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(\\<bottom>::udom\\<cdot>lifted) = \\<bottom>\"\n  \"fmapU\\<cdot>f\\<cdot>(Lifted\\<cdot>x) = Lifted\\<cdot>(f\\<cdot>x)\"", "lemma bindU_lifted_strict [simp]: \"bindU\\<cdot>\\<bottom>\\<cdot>k = (\\<bottom>::udom\\<cdot>lifted)\"", "lemma fmap_lifted_simps [simp]:\n  \"fmap\\<cdot>f\\<cdot>(\\<bottom>::'a\\<cdot>lifted) = \\<bottom>\"\n  \"fmap\\<cdot>f\\<cdot>(Lifted\\<cdot>x) = Lifted\\<cdot>(f\\<cdot>x)\"", "lemma bind_lifted_simps [simp]:\n  \"bind\\<cdot>(\\<bottom>::'a\\<cdot>lifted)\\<cdot>f = \\<bottom>\"\n  \"bind\\<cdot>(Lifted\\<cdot>x)\\<cdot>f = f\\<cdot>x\"", "lemma return_lifted_def: \"return = Lifted\"", "lemma join_lifted_simps [simp]:\n  \"join\\<cdot>(\\<bottom>::'a\\<cdot>lifted\\<cdot>lifted) = \\<bottom>\"\n  \"join\\<cdot>(Lifted\\<cdot>xs) = xs\""], "translations": [["", "lemma coerce_lifted_abs [simp]: \"coerce\\<cdot>(lifted_abs\\<cdot>x) = lifted_abs\\<cdot>(coerce\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('b\\<cdot>lifted, 'a\\<cdot>lifted)\\<cdot>(lifted_abs\\<cdot>x) =\n    lifted_abs\\<cdot>\n    (COERCE('b\\<^sub>\\<bottom>, 'a\\<^sub>\\<bottom>)\\<cdot>x)", "apply (simp add: lifted_abs_def coerce_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. PRJ('a\\<cdot>lifted)\\<cdot>\n    (EMB('b\\<cdot>lifted)\\<cdot>\n     (PRJ('b\\<cdot>lifted)\\<cdot>(EMB('b\\<^sub>\\<bottom>)\\<cdot>x))) =\n    PRJ('a\\<cdot>lifted)\\<cdot>\n    (EMB('a\\<^sub>\\<bottom>)\\<cdot>\n     (PRJ('a\\<^sub>\\<bottom>)\\<cdot>(EMB('b\\<^sub>\\<bottom>)\\<cdot>x)))", "apply (simp add: emb_prj_emb prj_emb_prj DEFL_eq_lifted)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma coerce_Lifted [simp]: \"coerce\\<cdot>(Lifted\\<cdot>x) = Lifted\\<cdot>(coerce\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('b\\<cdot>lifted, 'a\\<cdot>lifted)\\<cdot>(Lifted\\<cdot>x) =\n    Lifted\\<cdot>(COERCE('b, 'a)\\<cdot>x)", "unfolding Lifted_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('b\\<cdot>lifted, 'a\\<cdot>lifted)\\<cdot>\n    ((\\<Lambda> a. lifted_abs\\<cdot>(up\\<cdot>a))\\<cdot>x) =\n    (\\<Lambda> a. lifted_abs\\<cdot>(up\\<cdot>a))\\<cdot>\n    (COERCE('b, 'a)\\<cdot>x)", "by simp"], ["", "lemma fmapU_lifted_simps [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(\\<bottom>::udom\\<cdot>lifted) = \\<bottom>\"\n  \"fmapU\\<cdot>f\\<cdot>(Lifted\\<cdot>x) = Lifted\\<cdot>(f\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>\\<bottom> = \\<bottom> &&&\n    fmapU\\<cdot>f\\<cdot>(Lifted\\<cdot>x) = Lifted\\<cdot>(f\\<cdot>x)", "unfolding fmapU_lifted_def lifted_map_def fix_const"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a. lifted_abs oo u_map\\<cdot>a oo lifted_rep)\\<cdot>f\\<cdot>\n    \\<bottom> =\n    \\<bottom> &&&\n    (\\<Lambda> a. lifted_abs oo u_map\\<cdot>a oo lifted_rep)\\<cdot>f\\<cdot>\n    (Lifted\\<cdot>x) =\n    Lifted\\<cdot>(f\\<cdot>x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a. lifted_abs oo u_map\\<cdot>a oo lifted_rep)\\<cdot>f\\<cdot>\n    (Lifted\\<cdot>x) =\n    Lifted\\<cdot>(f\\<cdot>x)", "apply (simp add: Lifted_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Class instance proofs\\<close>"], ["", "instance lifted :: \"functor\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(lifted, functor_class)", "by standard (induct_tac xs rule: lifted.induct, simp_all)"], ["", "instantiation lifted :: monad\nbegin"], ["", "fixrec bindU_lifted :: \"udom\\<cdot>lifted \\<rightarrow> (udom \\<rightarrow> udom\\<cdot>lifted) \\<rightarrow> udom\\<cdot>lifted\"\n  where \"bindU_lifted\\<cdot>(Lifted\\<cdot>x)\\<cdot>k = k\\<cdot>x\""], ["", "lemma bindU_lifted_strict [simp]: \"bindU\\<cdot>\\<bottom>\\<cdot>k = (\\<bottom>::udom\\<cdot>lifted)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>\\<bottom>\\<cdot>k = \\<bottom>", "by fixrec_simp"], ["", "definition returnU_lifted_def:\n  \"returnU = Lifted\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(lifted, monad_class)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix x :: \"udom\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix f :: \"udom \\<rightarrow> udom\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix h k :: \"udom \\<rightarrow> udom\\<cdot>lifted\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "fix xs :: \"udom\\<cdot>lifted\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "show \"fmapU\\<cdot>f\\<cdot>xs = bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>xs =\n    bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))", "by (induct xs rule: lifted.induct, simp_all add: returnU_lifted_def)"], ["proof (state)\nthis:\n  fmapU\\<cdot>f\\<cdot>xs =\n  bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n\ngoal (2 subgoals):\n 1. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 2. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "show \"bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>k = k\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>k = k\\<cdot>x", "by (simp add: returnU_lifted_def)"], ["proof (state)\nthis:\n  bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>k = k\\<cdot>x\n\ngoal (1 subgoal):\n 1. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "show \"bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>h)\\<cdot>k = bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(h\\<cdot>x)\\<cdot>k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>h)\\<cdot>k =\n    bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(h\\<cdot>x)\\<cdot>k)", "by (induct xs rule: lifted.induct) simp_all"], ["proof (state)\nthis:\n  bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>h)\\<cdot>k =\n  bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(h\\<cdot>x)\\<cdot>k)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Transfer properties to polymorphic versions\\<close>"], ["", "lemma fmap_lifted_simps [simp]:\n  \"fmap\\<cdot>f\\<cdot>(\\<bottom>::'a\\<cdot>lifted) = \\<bottom>\"\n  \"fmap\\<cdot>f\\<cdot>(Lifted\\<cdot>x) = Lifted\\<cdot>(f\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmap\\<cdot>f\\<cdot>\\<bottom> = \\<bottom> &&&\n    fmap\\<cdot>f\\<cdot>(Lifted\\<cdot>x) = Lifted\\<cdot>(f\\<cdot>x)", "unfolding fmap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>lifted \\<rightarrow> udom\\<cdot>lifted,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>lifted \\<rightarrow> 'b\\<cdot>lifted)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    \\<bottom> =\n    \\<bottom> &&&\n    COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>lifted \\<rightarrow> udom\\<cdot>lifted,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>lifted \\<rightarrow> 'b\\<cdot>lifted)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    (Lifted\\<cdot>x) =\n    Lifted\\<cdot>(f\\<cdot>x)", "by simp_all"], ["", "lemma bind_lifted_simps [simp]:\n  \"bind\\<cdot>(\\<bottom>::'a\\<cdot>lifted)\\<cdot>f = \\<bottom>\"\n  \"bind\\<cdot>(Lifted\\<cdot>x)\\<cdot>f = f\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<bind> f = \\<bottom> &&& Lifted\\<cdot>x \\<bind> f = f\\<cdot>x", "unfolding bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom\\<cdot>lifted \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>lifted) \\<rightarrow>\n      udom\\<cdot>lifted,\n      'a\\<cdot>lifted \\<rightarrow>\n      ('a \\<rightarrow> 'b\\<cdot>lifted) \\<rightarrow>\n      'b\\<cdot>lifted)\\<cdot>\n    bindU\\<cdot>\n    \\<bottom>\\<cdot>\n    f =\n    \\<bottom> &&&\n    COERCE\n     (udom\\<cdot>lifted \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>lifted) \\<rightarrow>\n      udom\\<cdot>lifted,\n      'a\\<cdot>lifted \\<rightarrow>\n      ('a \\<rightarrow> 'b\\<cdot>lifted) \\<rightarrow>\n      'b\\<cdot>lifted)\\<cdot>\n    bindU\\<cdot>\n    (Lifted\\<cdot>x)\\<cdot>\n    f =\n    f\\<cdot>x", "by simp_all"], ["", "lemma return_lifted_def: \"return = Lifted\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return = Lifted", "unfolding return_def returnU_lifted_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom \\<rightarrow> udom\\<cdot>lifted,\n      'a \\<rightarrow> 'a\\<cdot>lifted)\\<cdot>\n    Lifted =\n    Lifted", "by (simp add: coerce_cfun cfcomp1 eta_cfun)"], ["", "lemma join_lifted_simps [simp]:\n  \"join\\<cdot>(\\<bottom>::'a\\<cdot>lifted\\<cdot>lifted) = \\<bottom>\"\n  \"join\\<cdot>(Lifted\\<cdot>xs) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join\\<cdot>\\<bottom> = \\<bottom> &&& join\\<cdot>(Lifted\\<cdot>xs) = xs", "unfolding join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>\\<bottom> =\n    \\<bottom> &&&\n    (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>(Lifted\\<cdot>xs) = xs", "by simp_all"], ["", "end"]]}