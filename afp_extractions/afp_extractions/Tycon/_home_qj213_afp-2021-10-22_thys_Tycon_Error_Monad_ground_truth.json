{"file_name": "/home/qj213/afp-2021-10-22/thys/Tycon/Error_Monad.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Tycon", "problem_names": ["lemma coerce_error_abs [simp]: \"coerce\\<cdot>(error_abs\\<cdot>x) = error_abs\\<cdot>(coerce\\<cdot>x)\"", "lemma coerce_Err [simp]: \"coerce\\<cdot>(Err\\<cdot>x) = Err\\<cdot>(coerce\\<cdot>x)\"", "lemma coerce_Ok [simp]: \"coerce\\<cdot>(Ok\\<cdot>m) = Ok\\<cdot>(coerce\\<cdot>m)\"", "lemma fmapU_error_simps [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(\\<bottom>::udom\\<cdot>'a error) = \\<bottom>\"\n  \"fmapU\\<cdot>f\\<cdot>(Err\\<cdot>e) = Err\\<cdot>e\"\n  \"fmapU\\<cdot>f\\<cdot>(Ok\\<cdot>x) = Ok\\<cdot>(f\\<cdot>x)\"", "lemma bindU_error_strict [simp]: \"bindU\\<cdot>\\<bottom>\\<cdot>k = (\\<bottom>::udom\\<cdot>'a error)\"", "lemma plusU_error_strict [simp]: \"plusU\\<cdot>(\\<bottom> :: udom\\<cdot>'a error) = \\<bottom>\"", "lemma fmap_error_simps [simp]:\n  \"fmap\\<cdot>f\\<cdot>(\\<bottom>::'a\\<cdot>'e error) = \\<bottom>\"\n  \"fmap\\<cdot>f\\<cdot>(Err\\<cdot>e :: 'a\\<cdot>'e error) = Err\\<cdot>e\"\n  \"fmap\\<cdot>f\\<cdot>(Ok\\<cdot>x :: 'a\\<cdot>'e error) = Ok\\<cdot>(f\\<cdot>x)\"", "lemma return_error_def: \"return = Ok\"", "lemma bind_error_simps [simp]:\n  \"bind\\<cdot>(\\<bottom> :: 'a\\<cdot>'e error)\\<cdot>f = \\<bottom>\"\n  \"bind\\<cdot>(Err\\<cdot>e :: 'a\\<cdot>'e error)\\<cdot>f = Err\\<cdot>e\"\n  \"bind\\<cdot>(Ok\\<cdot>x :: 'a\\<cdot>'e error)\\<cdot>f = f\\<cdot>x\"", "lemma join_error_simps [simp]:\n  \"join\\<cdot>\\<bottom> = (\\<bottom> :: 'a\\<cdot>'e error)\"\n  \"join\\<cdot>(Err\\<cdot>e) = Err\\<cdot>e\"\n  \"join\\<cdot>(Ok\\<cdot>x) = x\"", "lemma fplus_error_simps [simp]:\n  \"fplus\\<cdot>\\<bottom>\\<cdot>r = (\\<bottom> :: 'a\\<cdot>'e error)\"\n  \"fplus\\<cdot>(Err\\<cdot>e)\\<cdot>r = r\"\n  \"fplus\\<cdot>(Ok\\<cdot>x)\\<cdot>r = Ok\\<cdot>x\""], "translations": [["", "lemma coerce_error_abs [simp]: \"coerce\\<cdot>(error_abs\\<cdot>x) = error_abs\\<cdot>(coerce\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('c\\<cdot>'d error, 'a\\<cdot>'b error)\\<cdot>(error_abs\\<cdot>x) =\n    error_abs\\<cdot>\n    (COERCE\n      ('d\\<^sub>\\<bottom> \\<oplus> 'c\\<^sub>\\<bottom>,\n       'b\\<^sub>\\<bottom> \\<oplus> 'a\\<^sub>\\<bottom>)\\<cdot>\n     x)", "apply (simp add: error_abs_def coerce_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. PRJ('a\\<cdot>'b error)\\<cdot>\n    (EMB('c\\<cdot>'d error)\\<cdot>\n     (PRJ('c\\<cdot>'d error)\\<cdot>\n      (EMB('d\\<^sub>\\<bottom> \\<oplus> 'c\\<^sub>\\<bottom>)\\<cdot>x))) =\n    PRJ('a\\<cdot>'b error)\\<cdot>\n    (EMB('b\\<^sub>\\<bottom> \\<oplus> 'a\\<^sub>\\<bottom>)\\<cdot>\n     (PRJ('b\\<^sub>\\<bottom> \\<oplus> 'a\\<^sub>\\<bottom>)\\<cdot>\n      (EMB('d\\<^sub>\\<bottom> \\<oplus> 'c\\<^sub>\\<bottom>)\\<cdot>x)))", "apply (simp add: emb_prj_emb prj_emb_prj DEFL_eq_error)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma coerce_Err [simp]: \"coerce\\<cdot>(Err\\<cdot>x) = Err\\<cdot>(coerce\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('c\\<cdot>'d error, 'a\\<cdot>'b error)\\<cdot>(Err\\<cdot>x) =\n    Err\\<cdot>(COERCE('d, 'b)\\<cdot>x)", "unfolding Err_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('c\\<cdot>'d error, 'a\\<cdot>'b error)\\<cdot>\n    ((\\<Lambda> e. error_abs\\<cdot>(sinl\\<cdot>(up\\<cdot>e)))\\<cdot>x) =\n    (\\<Lambda> e. error_abs\\<cdot>(sinl\\<cdot>(up\\<cdot>e)))\\<cdot>\n    (COERCE('d, 'b)\\<cdot>x)", "by simp"], ["", "lemma coerce_Ok [simp]: \"coerce\\<cdot>(Ok\\<cdot>m) = Ok\\<cdot>(coerce\\<cdot>m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('c\\<cdot>'d error, 'a\\<cdot>'b error)\\<cdot>(Ok\\<cdot>m) =\n    Ok\\<cdot>(COERCE('c, 'a)\\<cdot>m)", "unfolding Ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE('c\\<cdot>'d error, 'a\\<cdot>'b error)\\<cdot>\n    ((\\<Lambda> a. error_abs\\<cdot>(sinr\\<cdot>(up\\<cdot>a)))\\<cdot>m) =\n    (\\<Lambda> a. error_abs\\<cdot>(sinr\\<cdot>(up\\<cdot>a)))\\<cdot>\n    (COERCE('c, 'a)\\<cdot>m)", "by simp"], ["", "lemma fmapU_error_simps [simp]:\n  \"fmapU\\<cdot>f\\<cdot>(\\<bottom>::udom\\<cdot>'a error) = \\<bottom>\"\n  \"fmapU\\<cdot>f\\<cdot>(Err\\<cdot>e) = Err\\<cdot>e\"\n  \"fmapU\\<cdot>f\\<cdot>(Ok\\<cdot>x) = Ok\\<cdot>(f\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>\\<bottom> = \\<bottom> &&&\n    fmapU\\<cdot>f\\<cdot>(Err\\<cdot>e) = Err\\<cdot>e &&&\n    fmapU\\<cdot>f\\<cdot>(Ok\\<cdot>x) = Ok\\<cdot>(f\\<cdot>x)", "unfolding fmapU_error_def error_map_def fix_const"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> e a.\n        error_abs oo\n        ssum_map\\<cdot>(u_map\\<cdot>e)\\<cdot>(u_map\\<cdot>a) oo\n        error_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    \\<bottom> =\n    \\<bottom> &&&\n    (\\<Lambda> e a.\n        error_abs oo\n        ssum_map\\<cdot>(u_map\\<cdot>e)\\<cdot>(u_map\\<cdot>a) oo\n        error_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    (Err\\<cdot>e) =\n    Err\\<cdot>e &&&\n    (\\<Lambda> e a.\n        error_abs oo\n        ssum_map\\<cdot>(u_map\\<cdot>e)\\<cdot>(u_map\\<cdot>a) oo\n        error_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    (Ok\\<cdot>x) =\n    Ok\\<cdot>(f\\<cdot>x)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Lambda> e a.\n        error_abs oo\n        ssum_map\\<cdot>(u_map\\<cdot>e)\\<cdot>(u_map\\<cdot>a) oo\n        error_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    (Err\\<cdot>e) =\n    Err\\<cdot>e\n 2. (\\<Lambda> e a.\n        error_abs oo\n        ssum_map\\<cdot>(u_map\\<cdot>e)\\<cdot>(u_map\\<cdot>a) oo\n        error_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    (Ok\\<cdot>x) =\n    Ok\\<cdot>(f\\<cdot>x)", "apply (simp add: Err_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> e a.\n        error_abs oo\n        ssum_map\\<cdot>(u_map\\<cdot>e)\\<cdot>(u_map\\<cdot>a) oo\n        error_rep)\\<cdot>\n    ID\\<cdot>\n    f\\<cdot>\n    (Ok\\<cdot>x) =\n    Ok\\<cdot>(f\\<cdot>x)", "apply (simp add: Ok_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Monad class instance\\<close>"], ["", "instantiation error :: (\"domain\") \"{monad, functor_plus}\"\nbegin"], ["", "definition\n  \"returnU = Ok\""], ["", "fixrec bindU_error :: \"udom\\<cdot>'a error \\<rightarrow> (udom \\<rightarrow> udom\\<cdot>'a error) \\<rightarrow> udom\\<cdot>'a error\"\n  where \"bindU_error\\<cdot>(Err\\<cdot>e)\\<cdot>f = Err\\<cdot>e\"\n  | \"bindU_error\\<cdot>(Ok\\<cdot>x)\\<cdot>f = f\\<cdot>x\""], ["", "lemma bindU_error_strict [simp]: \"bindU\\<cdot>\\<bottom>\\<cdot>k = (\\<bottom>::udom\\<cdot>'a error)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>\\<bottom>\\<cdot>k = \\<bottom>", "by fixrec_simp"], ["", "fixrec plusU_error :: \"udom\\<cdot>'a error \\<rightarrow> udom\\<cdot>'a error \\<rightarrow> udom\\<cdot>'a error\"\n  where \"plusU_error\\<cdot>(Err\\<cdot>e)\\<cdot>f = f\"\n  | \"plusU_error\\<cdot>(Ok\\<cdot>x)\\<cdot>f = Ok\\<cdot>x\""], ["", "lemma plusU_error_strict [simp]: \"plusU\\<cdot>(\\<bottom> :: udom\\<cdot>'a error) = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plusU\\<cdot>\\<bottom> = \\<bottom>", "by fixrec_simp"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a error, monad_class) &&& OFCLASS('a error, functor_plus_class)", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 4. \\<And>f g xs.\n       fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n       fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs\n 5. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 6. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "fix f g :: \"udom \\<rightarrow> udom\" and r :: \"udom\\<cdot>'a error\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 4. \\<And>f g xs.\n       fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>xs) =\n       fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>xs\n 5. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 6. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "show \"fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>r) = fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>r) =\n    fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>r", "by (induct r rule: error.induct) simp_all"], ["proof (state)\nthis:\n  fmapU\\<cdot>f\\<cdot>(fmapU\\<cdot>g\\<cdot>r) =\n  fmapU\\<cdot>(\\<Lambda> x. f\\<cdot>(g\\<cdot>x))\\<cdot>r\n\ngoal (5 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 4. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 5. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 4. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 5. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "fix f :: \"udom \\<rightarrow> udom\" and r :: \"udom\\<cdot>'a error\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f xs.\n       fmapU\\<cdot>f\\<cdot>xs =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n 2. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 3. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 4. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 5. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "show \"fmapU\\<cdot>f\\<cdot>r = bindU\\<cdot>r\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>r =\n    bindU\\<cdot>r\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))", "by (induct r rule: error.induct)\n       (simp_all add: returnU_error_def)"], ["proof (state)\nthis:\n  fmapU\\<cdot>f\\<cdot>r =\n  bindU\\<cdot>r\\<cdot>(\\<Lambda> x. returnU\\<cdot>(f\\<cdot>x))\n\ngoal (4 subgoals):\n 1. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 2. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 3. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 4. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 2. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 3. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 4. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "fix f :: \"udom \\<rightarrow> udom\\<cdot>'a error\" and x :: \"udom\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f x. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n 2. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 3. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 4. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "show \"bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x", "by (simp add: returnU_error_def)"], ["proof (state)\nthis:\n  bindU\\<cdot>(returnU\\<cdot>x)\\<cdot>f = f\\<cdot>x\n\ngoal (3 subgoals):\n 1. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 2. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 3. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 2. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 3. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "fix r :: \"udom\\<cdot>'a error\" and f g :: \"udom \\<rightarrow> udom\\<cdot>'a error\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs f g.\n       bindU\\<cdot>(bindU\\<cdot>xs\\<cdot>f)\\<cdot>g =\n       bindU\\<cdot>xs\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n 2. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 3. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "show \"bindU\\<cdot>(bindU\\<cdot>r\\<cdot>f)\\<cdot>g = bindU\\<cdot>r\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bindU\\<cdot>(bindU\\<cdot>r\\<cdot>f)\\<cdot>g =\n    bindU\\<cdot>r\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)", "by (induct r rule: error.induct)\n       simp_all"], ["proof (state)\nthis:\n  bindU\\<cdot>(bindU\\<cdot>r\\<cdot>f)\\<cdot>g =\n  bindU\\<cdot>r\\<cdot>(\\<Lambda> x. bindU\\<cdot>(f\\<cdot>x)\\<cdot>g)\n\ngoal (2 subgoals):\n 1. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 2. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 2. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "fix f :: \"udom \\<rightarrow> udom\" and a b :: \"udom\\<cdot>'a error\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f a b.\n       fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n       plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n 2. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "show \"fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) = plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n    plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)", "by (induct a rule: error.induct) simp_all"], ["proof (state)\nthis:\n  fmapU\\<cdot>f\\<cdot>(plusU\\<cdot>a\\<cdot>b) =\n  plusU\\<cdot>(fmapU\\<cdot>f\\<cdot>a)\\<cdot>(fmapU\\<cdot>f\\<cdot>b)\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "fix a b c :: \"udom\\<cdot>'a error\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n       plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "show \"plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c = plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n    plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)", "by (induct a rule: error.induct) simp_all"], ["proof (state)\nthis:\n  plusU\\<cdot>(plusU\\<cdot>a\\<cdot>b)\\<cdot>c =\n  plusU\\<cdot>a\\<cdot>(plusU\\<cdot>b\\<cdot>c)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Transfer properties to polymorphic versions\\<close>"], ["", "lemma fmap_error_simps [simp]:\n  \"fmap\\<cdot>f\\<cdot>(\\<bottom>::'a\\<cdot>'e error) = \\<bottom>\"\n  \"fmap\\<cdot>f\\<cdot>(Err\\<cdot>e :: 'a\\<cdot>'e error) = Err\\<cdot>e\"\n  \"fmap\\<cdot>f\\<cdot>(Ok\\<cdot>x :: 'a\\<cdot>'e error) = Ok\\<cdot>(f\\<cdot>x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmap\\<cdot>f\\<cdot>\\<bottom> = \\<bottom> &&&\n    fmap\\<cdot>f\\<cdot>(Err\\<cdot>e) = Err\\<cdot>e &&&\n    fmap\\<cdot>f\\<cdot>(Ok\\<cdot>x) = Ok\\<cdot>(f\\<cdot>x)", "unfolding fmap_def [where 'f=\"'e error\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>'e error \\<rightarrow> udom\\<cdot>'e error,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>'e error \\<rightarrow> 'b\\<cdot>'e error)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    \\<bottom> =\n    \\<bottom> &&&\n    COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>'e error \\<rightarrow> udom\\<cdot>'e error,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>'e error \\<rightarrow> 'b\\<cdot>'e error)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    (Err\\<cdot>e) =\n    Err\\<cdot>e &&&\n    COERCE\n     ((udom \\<rightarrow> udom) \\<rightarrow>\n      udom\\<cdot>'e error \\<rightarrow> udom\\<cdot>'e error,\n      ('a \\<rightarrow> 'b) \\<rightarrow>\n      'a\\<cdot>'e error \\<rightarrow> 'b\\<cdot>'e error)\\<cdot>\n    fmapU\\<cdot>\n    f\\<cdot>\n    (Ok\\<cdot>x) =\n    Ok\\<cdot>(f\\<cdot>x)", "by (simp_all add: coerce_simp)"], ["", "lemma return_error_def: \"return = Ok\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return = Ok", "unfolding return_def returnU_error_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom \\<rightarrow> udom\\<cdot>'b error,\n      'a \\<rightarrow> 'a\\<cdot>'b error)\\<cdot>\n    Ok =\n    Ok", "by (simp add: coerce_simp eta_cfun)"], ["", "lemma bind_error_simps [simp]:\n  \"bind\\<cdot>(\\<bottom> :: 'a\\<cdot>'e error)\\<cdot>f = \\<bottom>\"\n  \"bind\\<cdot>(Err\\<cdot>e :: 'a\\<cdot>'e error)\\<cdot>f = Err\\<cdot>e\"\n  \"bind\\<cdot>(Ok\\<cdot>x :: 'a\\<cdot>'e error)\\<cdot>f = f\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<bind> f = \\<bottom> &&&\n    Err\\<cdot>e \\<bind> f = Err\\<cdot>e &&& Ok\\<cdot>x \\<bind> f = f\\<cdot>x", "unfolding bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom\\<cdot>'e error \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>'e error) \\<rightarrow>\n      udom\\<cdot>'e error,\n      'a\\<cdot>'e error \\<rightarrow>\n      ('a \\<rightarrow> 'b\\<cdot>'e error) \\<rightarrow>\n      'b\\<cdot>'e error)\\<cdot>\n    bindU\\<cdot>\n    \\<bottom>\\<cdot>\n    f =\n    \\<bottom> &&&\n    COERCE\n     (udom\\<cdot>'e error \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>'e error) \\<rightarrow>\n      udom\\<cdot>'e error,\n      'a\\<cdot>'e error \\<rightarrow>\n      ('a \\<rightarrow> 'b\\<cdot>'e error) \\<rightarrow>\n      'b\\<cdot>'e error)\\<cdot>\n    bindU\\<cdot>\n    (Err\\<cdot>e)\\<cdot>\n    f =\n    Err\\<cdot>e &&&\n    COERCE\n     (udom\\<cdot>'e error \\<rightarrow>\n      (udom \\<rightarrow> udom\\<cdot>'e error) \\<rightarrow>\n      udom\\<cdot>'e error,\n      'a\\<cdot>'e error \\<rightarrow>\n      ('a \\<rightarrow> 'b\\<cdot>'e error) \\<rightarrow>\n      'b\\<cdot>'e error)\\<cdot>\n    bindU\\<cdot>\n    (Ok\\<cdot>x)\\<cdot>\n    f =\n    f\\<cdot>x", "by (simp_all add: coerce_simp)"], ["", "lemma join_error_simps [simp]:\n  \"join\\<cdot>\\<bottom> = (\\<bottom> :: 'a\\<cdot>'e error)\"\n  \"join\\<cdot>(Err\\<cdot>e) = Err\\<cdot>e\"\n  \"join\\<cdot>(Ok\\<cdot>x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join\\<cdot>\\<bottom> = \\<bottom> &&&\n    join\\<cdot>(Err\\<cdot>e) = Err\\<cdot>e &&& join\\<cdot>(Ok\\<cdot>x) = x", "unfolding join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>\\<bottom> =\n    \\<bottom> &&&\n    (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>(Err\\<cdot>e) =\n    Err\\<cdot>e &&&\n    (\\<Lambda> m. m \\<bind> (\\<Lambda> x. x))\\<cdot>(Ok\\<cdot>x) = x", "by simp_all"], ["", "lemma fplus_error_simps [simp]:\n  \"fplus\\<cdot>\\<bottom>\\<cdot>r = (\\<bottom> :: 'a\\<cdot>'e error)\"\n  \"fplus\\<cdot>(Err\\<cdot>e)\\<cdot>r = r\"\n  \"fplus\\<cdot>(Ok\\<cdot>x)\\<cdot>r = Ok\\<cdot>x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fplus\\<cdot>\\<bottom>\\<cdot>r = \\<bottom> &&&\n    fplus\\<cdot>(Err\\<cdot>e)\\<cdot>r = r &&&\n    fplus\\<cdot>(Ok\\<cdot>x)\\<cdot>r = Ok\\<cdot>x", "unfolding fplus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. COERCE\n     (udom\\<cdot>'e error \\<rightarrow>\n      udom\\<cdot>'e error \\<rightarrow> udom\\<cdot>'e error,\n      'a\\<cdot>'e error \\<rightarrow>\n      'a\\<cdot>'e error \\<rightarrow> 'a\\<cdot>'e error)\\<cdot>\n    plusU\\<cdot>\n    \\<bottom>\\<cdot>\n    r =\n    \\<bottom> &&&\n    COERCE\n     (udom\\<cdot>'e error \\<rightarrow>\n      udom\\<cdot>'e error \\<rightarrow> udom\\<cdot>'e error,\n      'a\\<cdot>'e error \\<rightarrow>\n      'a\\<cdot>'e error \\<rightarrow> 'a\\<cdot>'e error)\\<cdot>\n    plusU\\<cdot>\n    (Err\\<cdot>e)\\<cdot>\n    r =\n    r &&&\n    COERCE\n     (udom\\<cdot>'e error \\<rightarrow>\n      udom\\<cdot>'e error \\<rightarrow> udom\\<cdot>'e error,\n      'a\\<cdot>'e error \\<rightarrow>\n      'a\\<cdot>'e error \\<rightarrow> 'a\\<cdot>'e error)\\<cdot>\n    plusU\\<cdot>\n    (Ok\\<cdot>x)\\<cdot>\n    r =\n    Ok\\<cdot>x", "by (simp_all add: coerce_simp)"], ["", "end"]]}