{"file_name": "/home/qj213/afp-2021-10-22/thys/Psi_Calculi/Weak_Bisim_Subst.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Psi_Calculi", "problem_names": ["lemmas weakBisimSubstClosed[eqvt] = closeSubstClosed[OF weakBisimEqvt]", "lemmas weakBisimEqvt[simp] = closeSubstEqvt[OF weakBisimEqvt]", "lemma strongBisimSubstWeakBisimSubst:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<sim>\\<^sub>s Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"", "lemma weakBisimSubstOutputPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   M :: 'a\n  and   N :: 'a\n  \n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n\n  shows \"\\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<approx>\\<^sub>s M\\<langle>N\\<rangle>.Q\"", "lemma bisimSubstInputPres:\n  fixes \\<Psi>    :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n\n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n  and     \"xvec \\<sharp>* \\<Psi>\"\n  and     \"distinct xvec\"\n\n  shows \"\\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<approx>\\<^sub>s M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\"", "lemma weakBisimSubstReflexive:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n\n  shows \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s P\"", "lemma bisimSubstTransitive:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n  and     \"\\<Psi> \\<rhd> Q \\<approx>\\<^sub>s R\"\n\n  shows \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s R\"", "lemma weakBisimSubstSymmetric:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n\n  shows \"\\<Psi> \\<rhd> Q \\<approx>\\<^sub>s P\"", "lemma weakBisimSubstParPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> R \\<approx>\\<^sub>s Q \\<parallel> R\"", "lemma weakBisimSubstResPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   x :: name\n\n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n  and     \"x \\<sharp> \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<approx>\\<^sub>s \\<lparr>\\<nu>x\\<rparr>Q\"", "lemma weakBisimSubstParNil:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> \\<zero> \\<approx>\\<^sub>s P\"", "lemma weakBisimSubstParComm:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<approx>\\<^sub>s Q \\<parallel> P\"", "lemma weakBisimSubstParAssoc:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n\n  shows \"\\<Psi> \\<rhd> (P \\<parallel> Q) \\<parallel> R \\<approx>\\<^sub>s P \\<parallel> (Q \\<parallel> R)\"", "lemma weakBisimSubstResNil:\n  fixes \\<Psi> :: 'b\n  and   x :: name\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>\\<zero> \\<sim>\\<^sub>s \\<zero>\"", "lemma weakBisimSubstScopeExt:\n  fixes \\<Psi> :: 'b\n  and   x :: name\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"x \\<sharp> P\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(P \\<parallel> Q) \\<approx>\\<^sub>s P \\<parallel> \\<lparr>\\<nu>x\\<rparr>Q\"", "lemma weakBisimSubstCasePushRes:\n  fixes x  :: name\n  and   \\<Psi>  :: 'b\n  and   Cs :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n\n  assumes \"x \\<sharp> map fst Cs\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(Cases Cs) \\<approx>\\<^sub>s Cases map (\\<lambda>(\\<phi>, P). (\\<phi>, \\<lparr>\\<nu>x\\<rparr>P)) Cs\"", "lemma weakBisimSubstOutputPushRes:\n  fixes x :: name\n  and   \\<Psi> :: 'b\n  and   M :: 'a\n  and   N :: 'a\n  and   P :: \"('a, 'b, 'c) psi\"\n\n  assumes \"x \\<sharp> \\<Psi>\"\n  and     \"x \\<sharp> M\"\n  and     \"x \\<sharp> N\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(M\\<langle>N\\<rangle>.P) \\<approx>\\<^sub>s M\\<langle>N\\<rangle>.\\<lparr>\\<nu>x\\<rparr>P\"", "lemma weakBisimSubstInputPushRes:\n  fixes x    :: name\n  and   \\<Psi>    :: 'b\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n\n  assumes \"x \\<sharp> M\"\n  and     \"x \\<sharp> xvec\"\n  and     \"x \\<sharp> N\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(M\\<lparr>\\<lambda>*xvec N\\<rparr>.P) \\<approx>\\<^sub>s M\\<lparr>\\<lambda>*xvec N\\<rparr>.\\<lparr>\\<nu>x\\<rparr>P\"", "lemma weakBisimSubstResComm:\n  fixes x :: name\n  and   y :: name\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(\\<lparr>\\<nu>y\\<rparr>P) \\<approx>\\<^sub>s \\<lparr>\\<nu>y\\<rparr>(\\<lparr>\\<nu>x\\<rparr>P)\"", "lemma weakBisimSubstExtBang:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"guarded P\"\n\n  shows \"\\<Psi> \\<rhd> !P \\<approx>\\<^sub>s P \\<parallel> !P\""], "translations": [["", "lemmas weakBisimSubstClosed[eqvt] = closeSubstClosed[OF weakBisimEqvt]"], ["", "lemmas weakBisimEqvt[simp] = closeSubstEqvt[OF weakBisimEqvt]"], ["", "lemma strongBisimSubstWeakBisimSubst:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<sim>\\<^sub>s Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<sim>\\<^sub>s Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q", "by(metis closeSubstI closeSubstE strongBisimWeakBisim)"], ["", "lemma weakBisimSubstOutputPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   M :: 'a\n  and   N :: 'a\n  \n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n\n  shows \"\\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<approx>\\<^sub>s M\\<langle>N\\<rangle>.Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<approx>\\<^sub>s M\\<langle>N\\<rangle>.Q", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<approx>\\<^sub>s M\\<langle>N\\<rangle>.Q", "by(fastforce intro: closeSubstI closeSubstE weakBisimOutputPres)"], ["", "lemma bisimSubstInputPres:\n  fixes \\<Psi>    :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n\n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n  and     \"xvec \\<sharp>* \\<Psi>\"\n  and     \"distinct xvec\"\n\n  shows \"\\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<approx>\\<^sub>s M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<approx>\\<^sub>s M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q", "proof(rule_tac closeSubstI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "fix \\<sigma> :: \"(name list \\<times> 'a list) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "assume \"wellFormedSubst \\<sigma>\""], ["proof (state)\nthis:\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "obtain p where \"(p \\<bullet> xvec) \\<sharp>* \\<sigma>\"\n           and \"(p \\<bullet> xvec) \\<sharp>* P\" and \"(p \\<bullet> xvec) \\<sharp>* Q\" and \"(p \\<bullet> xvec) \\<sharp>* \\<Psi>\" and \"(p \\<bullet> xvec) \\<sharp>* N\"\n           and S: \"set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> xvec) \\<sharp>* \\<sigma>;\n         (p \\<bullet> xvec) \\<sharp>* P; (p \\<bullet> xvec) \\<sharp>* Q;\n         (p \\<bullet> xvec) \\<sharp>* \\<Psi>;\n         (p \\<bullet> xvec) \\<sharp>* N;\n         set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac c=\"(\\<sigma>, P, Q, \\<Psi>, N)\" in name_list_avoiding) auto"], ["proof (state)\nthis:\n  (p \\<bullet> xvec) \\<sharp>* \\<sigma>\n  (p \\<bullet> xvec) \\<sharp>* P\n  (p \\<bullet> xvec) \\<sharp>* Q\n  (p \\<bullet> xvec) \\<sharp>* \\<Psi>\n  (p \\<bullet> xvec) \\<sharp>* N\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "from \\<open>\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q", "have \"(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<approx>\\<^sub>s (p \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<Psi> \\<rhd> p \\<bullet> P \\<approx>\\<^sub>s p \\<bullet> Q", "by(rule weakBisimSubstClosed)"], ["proof (state)\nthis:\n  p \\<bullet> \\<Psi> \\<rhd> p \\<bullet> P \\<approx>\\<^sub>s p \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "with \\<open>xvec \\<sharp>* \\<Psi>\\<close> \\<open>(p \\<bullet> xvec) \\<sharp>* \\<Psi>\\<close> S"], ["proof (chain)\npicking this:\n  xvec \\<sharp>* \\<Psi>\n  (p \\<bullet> xvec) \\<sharp>* \\<Psi>\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n  p \\<bullet> \\<Psi> \\<rhd> p \\<bullet> P \\<approx>\\<^sub>s p \\<bullet> Q", "have \"\\<Psi> \\<rhd> (p \\<bullet> P) \\<approx>\\<^sub>s (p \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  xvec \\<sharp>* \\<Psi>\n  (p \\<bullet> xvec) \\<sharp>* \\<Psi>\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n  p \\<bullet> \\<Psi> \\<rhd> p \\<bullet> P \\<approx>\\<^sub>s p \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> p \\<bullet> P \\<approx>\\<^sub>s p \\<bullet> Q", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> p \\<bullet> P \\<approx>\\<^sub>s p \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "{"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> p \\<bullet> P \\<approx>\\<^sub>s p \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "fix Tvec' :: \"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "assume \"length (p \\<bullet> xvec) = length Tvec'\""], ["proof (state)\nthis:\n  length (p \\<bullet> xvec) = length Tvec'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "with \\<open>wellFormedSubst \\<sigma>\\<close> \\<open>distinct xvec\\<close>"], ["proof (chain)\npicking this:\n  wellFormedSubst \\<sigma>\n  distinct xvec\n  length (p \\<bullet> xvec) = length Tvec'", "have \"wellFormedSubst (\\<sigma> @ [(p \\<bullet> xvec,Tvec')])\""], ["proof (prove)\nusing this:\n  wellFormedSubst \\<sigma>\n  distinct xvec\n  length (p \\<bullet> xvec) = length Tvec'\n\ngoal (1 subgoal):\n 1. wellFormedSubst (\\<sigma> @ [(p \\<bullet> xvec, Tvec')])", "by simp"], ["proof (state)\nthis:\n  wellFormedSubst (\\<sigma> @ [(p \\<bullet> xvec, Tvec')])\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "with \\<open>\\<Psi> \\<rhd> (p \\<bullet> P) \\<approx>\\<^sub>s (p \\<bullet> Q)\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> p \\<bullet> P \\<approx>\\<^sub>s p \\<bullet> Q\n  wellFormedSubst (\\<sigma> @ [(p \\<bullet> xvec, Tvec')])", "have \"\\<Psi> \\<rhd> (p \\<bullet> P)[<(\\<sigma> @ [(p \\<bullet> xvec,Tvec')])>] \\<approx> (p \\<bullet> Q)[<(\\<sigma> @ [(p \\<bullet> xvec,Tvec')])>]\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> p \\<bullet> P \\<approx>\\<^sub>s p \\<bullet> Q\n  wellFormedSubst (\\<sigma> @ [(p \\<bullet> xvec, Tvec')])\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> p \\<bullet>\n                  P[<(\\<sigma> @\n                      [(p \\<bullet> xvec,\n                        Tvec')])>] \\<approx> p \\<bullet>\n       Q[<(\\<sigma> @ [(p \\<bullet> xvec, Tvec')])>]", "by (rule closeSubstE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<(\\<sigma> @\n                    [(p \\<bullet> xvec,\n                      Tvec')])>] \\<approx> p \\<bullet>\n     Q[<(\\<sigma> @ [(p \\<bullet> xvec, Tvec')])>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "then"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<(\\<sigma> @\n                    [(p \\<bullet> xvec,\n                      Tvec')])>] \\<approx> p \\<bullet>\n     Q[<(\\<sigma> @ [(p \\<bullet> xvec, Tvec')])>]", "have \"\\<Psi> \\<rhd> ((p \\<bullet> P)[<\\<sigma>>])[(p \\<bullet> xvec)::=Tvec'] \\<approx> ((p \\<bullet> Q)[<\\<sigma>>])[(p \\<bullet> xvec)::=Tvec']\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<(\\<sigma> @\n                    [(p \\<bullet> xvec,\n                      Tvec')])>] \\<approx> p \\<bullet>\n     Q[<(\\<sigma> @ [(p \\<bullet> xvec, Tvec')])>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> p \\<bullet>\n                  P[<\\<sigma>>][(p \\<bullet>\n                                 xvec)::=Tvec'] \\<approx> p \\<bullet>\n                    Q[<\\<sigma>>][(p \\<bullet> xvec)::=Tvec']", "by (metis seqSubsCons seqSubsNil seqSubsTermAppend)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<\\<sigma>>][(p \\<bullet>\n                               xvec)::=Tvec'] \\<approx> p \\<bullet>\n                  Q[<\\<sigma>>][(p \\<bullet> xvec)::=Tvec']\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "}"], ["proof (state)\nthis:\n  length (p \\<bullet> xvec) = length ?Tvec'2 \\<Longrightarrow>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<\\<sigma>>][(p \\<bullet>\n                               xvec)::=?Tvec'2] \\<approx> p \\<bullet>\n                    Q[<\\<sigma>>][(p \\<bullet> xvec)::=?Tvec'2]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "then"], ["proof (chain)\npicking this:\n  length (p \\<bullet> xvec) = length ?Tvec'2 \\<Longrightarrow>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<\\<sigma>>][(p \\<bullet>\n                               xvec)::=?Tvec'2] \\<approx> p \\<bullet>\n                    Q[<\\<sigma>>][(p \\<bullet> xvec)::=?Tvec'2]", "have \"\\<Psi> \\<rhd> M[<\\<sigma>>]\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)[<\\<sigma>>]\\<rparr>.((p \\<bullet> P)[<\\<sigma>>]) \\<approx> M[<\\<sigma>>]\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)[<\\<sigma>>]\\<rparr>.((p \\<bullet> Q)[<\\<sigma>>])\""], ["proof (prove)\nusing this:\n  length (p \\<bullet> xvec) = length ?Tvec'2 \\<Longrightarrow>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<\\<sigma>>][(p \\<bullet>\n                               xvec)::=?Tvec'2] \\<approx> p \\<bullet>\n                    Q[<\\<sigma>>][(p \\<bullet> xvec)::=?Tvec'2]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n           xvec (p \\<bullet>\n                 N)[<\\<sigma>>]\\<rparr>.p \\<bullet>\n  P[<\\<sigma>>] \\<approx> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n                   xvec (p \\<bullet>\n                         N)[<\\<sigma>>]\\<rparr>.p \\<bullet> Q[<\\<sigma>>]", "using weakBisimInputPres"], ["proof (prove)\nusing this:\n  length (p \\<bullet> xvec) = length ?Tvec'2 \\<Longrightarrow>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<\\<sigma>>][(p \\<bullet>\n                               xvec)::=?Tvec'2] \\<approx> p \\<bullet>\n                    Q[<\\<sigma>>][(p \\<bullet> xvec)::=?Tvec'2]\n  (\\<And>Tvec.\n      length ?xvec = length Tvec \\<Longrightarrow>\n      ?\\<Psi> \\<rhd> ?P[?xvec::=Tvec] \\<approx> ?Q[?xvec::=Tvec]) \\<Longrightarrow>\n  ?\\<Psi> \\<rhd> ?M\\<lparr>\\<lambda>*?xvec ?N\\<rparr>.?P \\<approx> ?M\\<lparr>\\<lambda>*?xvec ?N\\<rparr>.?Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n           xvec (p \\<bullet>\n                 N)[<\\<sigma>>]\\<rparr>.p \\<bullet>\n  P[<\\<sigma>>] \\<approx> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n                   xvec (p \\<bullet>\n                         N)[<\\<sigma>>]\\<rparr>.p \\<bullet> Q[<\\<sigma>>]", "by metis"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n         xvec (p \\<bullet>\n               N)[<\\<sigma>>]\\<rparr>.p \\<bullet>\nP[<\\<sigma>>] \\<approx> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n                 xvec (p \\<bullet>\n                       N)[<\\<sigma>>]\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "with \\<open>(p \\<bullet> xvec) \\<sharp>* \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  (p \\<bullet> xvec) \\<sharp>* \\<sigma>\n  \\<Psi> \\<rhd> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n         xvec (p \\<bullet>\n               N)[<\\<sigma>>]\\<rparr>.p \\<bullet>\nP[<\\<sigma>>] \\<approx> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n                 xvec (p \\<bullet>\n                       N)[<\\<sigma>>]\\<rparr>.p \\<bullet> Q[<\\<sigma>>]", "have \"\\<Psi> \\<rhd> (M\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)\\<rparr>.(p \\<bullet> P))[<\\<sigma>>] \\<approx> (M\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)\\<rparr>.(p \\<bullet> Q))[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  (p \\<bullet> xvec) \\<sharp>* \\<sigma>\n  \\<Psi> \\<rhd> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n         xvec (p \\<bullet>\n               N)[<\\<sigma>>]\\<rparr>.p \\<bullet>\nP[<\\<sigma>>] \\<approx> M[<\\<sigma>>]\\<lparr>\\<lambda>*p \\<bullet>\n                 xvec (p \\<bullet>\n                       N)[<\\<sigma>>]\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                     xvec p \\<bullet>\n    N\\<rparr>.p \\<bullet>\n              P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*p \\<bullet>\n                   xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]", "by (metis seqSubstInputChain seqSubstSimps(3))"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                   xvec p \\<bullet>\n  N\\<rparr>.p \\<bullet>\n            P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*p \\<bullet>\n                 xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                   xvec p \\<bullet>\n  N\\<rparr>.p \\<bullet>\n            P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*p \\<bullet>\n                 xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "from \\<open>(p \\<bullet> xvec) \\<sharp>* N\\<close> \\<open>(p \\<bullet> xvec) \\<sharp>* P\\<close> S"], ["proof (chain)\npicking this:\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* P\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)", "have \"M\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)\\<rparr>.(p \\<bullet> P) = M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\""], ["proof (prove)\nusing this:\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* P\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n\ngoal (1 subgoal):\n 1. M\\<lparr>\\<lambda>*p \\<bullet>\n                       xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n    M\\<lparr>\\<lambda>*xvec N\\<rparr>.P", "apply (simp add: psi.inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p \\<bullet> xvec) \\<sharp>* N; (p \\<bullet> xvec) \\<sharp>* P;\n     set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\\<rbrakk>\n    \\<Longrightarrow> inputChain (p \\<bullet> xvec) (p \\<bullet> N)\n                       (p \\<bullet> P) =\n                      inputChain xvec N P", "by (rule inputChainAlpha[symmetric]) auto"], ["proof (state)\nthis:\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "from \\<open>(p \\<bullet> xvec) \\<sharp>* N\\<close> \\<open>(p \\<bullet> xvec) \\<sharp>* Q\\<close> S"], ["proof (chain)\npicking this:\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* Q\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)", "have \"M\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)\\<rparr>.(p \\<bullet> Q) = M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\""], ["proof (prove)\nusing this:\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* Q\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n\ngoal (1 subgoal):\n 1. M\\<lparr>\\<lambda>*p \\<bullet>\n                       xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q =\n    M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q", "apply (simp add: psi.inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p \\<bullet> xvec) \\<sharp>* N; (p \\<bullet> xvec) \\<sharp>* Q;\n     set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\\<rbrakk>\n    \\<Longrightarrow> inputChain (p \\<bullet> xvec) (p \\<bullet> N)\n                       (p \\<bullet> Q) =\n                      inputChain xvec N Q", "by (rule inputChainAlpha[symmetric]) auto"], ["proof (state)\nthis:\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                   xvec p \\<bullet>\n  N\\<rparr>.p \\<bullet>\n            P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*p \\<bullet>\n                 xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q", "show \"\\<Psi> \\<rhd> (M\\<lparr>\\<lambda>*xvec N\\<rparr>.P)[<\\<sigma>>] \\<approx> (M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q)[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                   xvec p \\<bullet>\n  N\\<rparr>.p \\<bullet>\n            P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*p \\<bullet>\n                 xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "by force"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<approx> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\nlemma bisimSubstCasePresAux:\n  fixes \\<Psi>   :: 'b\n  and   CsP :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n  and   CsQ :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n  \n  assumes C1: \"\\<And>\\<phi> P. (\\<phi>, P) mem CsP \\<Longrightarrow> \\<exists>Q. (\\<phi>, Q) mem CsQ \\<and> guarded Q \\<and> \\<Psi> \\<rhd> P \\<sim>\\<^sub>s Q\"\n  and     C2: \"\\<And>\\<phi> Q. (\\<phi>, Q) mem CsQ \\<Longrightarrow> \\<exists>P. (\\<phi>, P) mem CsP \\<and> guarded P \\<and> \\<Psi> \\<rhd> P \\<sim>\\<^sub>s Q\"\n\n  shows \"\\<Psi> \\<rhd> Cases CsP \\<sim>\\<^sub>s Cases CsQ\"\nproof -\n  {\n    fix xvec :: \"name list\"\n    and Tvec :: \"'a list\"\n\n    assume \"length xvec = length Tvec\"\n    and    \"distinct xvec\"\n\n    have \"\\<Psi> \\<rhd> Cases(caseListSubst CsP xvec Tvec) \\<sim> Cases(caseListSubst CsQ xvec Tvec)\"\n    proof(rule bisimCasePres)\n      fix \\<phi> P\n      assume \"(\\<phi>, P) mem (caseListSubst CsP xvec Tvec)\"\n      then obtain \\<phi>' P' where \"(\\<phi>', P') mem CsP\" and \"\\<phi> = substCond \\<phi>' xvec Tvec\" and PeqP': \"P = (P'[xvec::=Tvec])\"\n        by(induct CsP) force+\n      from `(\\<phi>', P') mem CsP` obtain Q' where \"(\\<phi>', Q') mem CsQ\" and \"guarded Q'\" and \"\\<Psi> \\<rhd> P' \\<sim>\\<^sub>s Q'\" by(blast dest: C1)\n      from `(\\<phi>', Q') mem CsQ` `\\<phi> = substCond \\<phi>' xvec Tvec` obtain Q where \"(\\<phi>, Q) mem (caseListSubst CsQ xvec Tvec)\" and \"Q = Q'[xvec::=Tvec]\"\n        by(induct CsQ) auto\n      with PeqP' `guarded Q'` `\\<Psi> \\<rhd> P' \\<sim>\\<^sub>s Q'` `length xvec = length Tvec` `distinct xvec` show \"\\<exists>Q. (\\<phi>, Q) mem (caseListSubst CsQ xvec Tvec) \\<and> guarded Q \\<and> \\<Psi> \\<rhd> P \\<sim> Q\"\n        by(blast dest: bisimSubstE guardedSubst)\n    next\n      fix \\<phi> Q\n      assume \"(\\<phi>, Q) mem (caseListSubst CsQ xvec Tvec)\"\n      then obtain \\<phi>' Q' where \"(\\<phi>', Q') mem CsQ\" and \"\\<phi> = substCond \\<phi>' xvec Tvec\" and QeqQ': \"Q = Q'[xvec::=Tvec]\"\n        by(induct CsQ) force+\n      from `(\\<phi>', Q') mem CsQ` obtain P' where \"(\\<phi>', P') mem CsP\" and \"guarded P'\" and \"\\<Psi> \\<rhd> P' \\<sim>\\<^sub>s Q'\" by(blast dest: C2)\n      from `(\\<phi>', P') mem CsP` `\\<phi> = substCond \\<phi>' xvec Tvec` obtain P where \"(\\<phi>, P) mem (caseListSubst CsP xvec Tvec)\" and \"P = P'[xvec::=Tvec]\"\n        by(induct CsP) auto\n      with QeqQ' `guarded P'` `\\<Psi> \\<rhd> P' \\<sim>\\<^sub>s Q'` `length xvec = length Tvec` `distinct xvec` show \"\\<exists>P. (\\<phi>, P) mem (caseListSubst CsP xvec Tvec) \\<and> guarded P \\<and> \\<Psi> \\<rhd> P \\<sim> Q\"\n        by(blast dest: bisimSubstE guardedSubst)\n    qed\n  }\n  thus ?thesis\n    by(rule_tac bisimSubstI) auto\nqed\n*)"], ["", "lemma weakBisimSubstReflexive:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n\n  shows \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<approx>\\<^sub>s P", "by(auto intro: closeSubstI weakBisimReflexive)"], ["", "lemma bisimSubstTransitive:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n  and     \"\\<Psi> \\<rhd> Q \\<approx>\\<^sub>s R\"\n\n  shows \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<approx>\\<^sub>s R", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\n  \\<Psi> \\<rhd> Q \\<approx>\\<^sub>s R\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<approx>\\<^sub>s R", "by(auto intro: closeSubstI closeSubstE weakBisimTransitive)"], ["", "lemma weakBisimSubstSymmetric:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n\n  shows \"\\<Psi> \\<rhd> Q \\<approx>\\<^sub>s P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Q \\<approx>\\<^sub>s P", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Q \\<approx>\\<^sub>s P", "by(auto intro: closeSubstI closeSubstE weakBisimE)"], ["", "(*\nlemma bisimSubstCasePres:\n  fixes \\<Psi>   :: 'b\n  and   CsP :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n  and   CsQ :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n  \n  assumes \"length CsP = length CsQ\"\n  and     C: \"\\<And>(i::nat) \\<phi> P \\<phi>' Q. \\<lbrakk>i <= length CsP; (\\<phi>, P) = nth CsP i; (\\<phi>', Q) = nth CsQ i\\<rbrakk> \\<Longrightarrow> \\<phi> = \\<phi>' \\<and> \\<Psi> \\<rhd> P \\<sim> Q\"\n\n  shows \"\\<Psi> \\<rhd> Cases CsP \\<sim>\\<^sub>s Cases CsQ\"\nproof -\n  {\n    fix \\<phi> \n    and P\n\n    assume \"(\\<phi>, P) mem CsP\"\n\n    with `length CsP = length CsQ` have \"\\<exists>Q. (\\<phi>, Q) mem CsQ \\<and> \\<Psi> \\<rhd> P \\<sim>\\<^sub>s Q\"\n      apply(induct n==\"length CsP\" arbitrary: CsP CsQ rule: nat.induct)\n      apply simp\n      apply simp\n      apply auto\n\n  }\nusing `length CsP = length CsQ`\nproof(induct n==\"length CsP\" rule: nat.induct)\n  case zero\n  thus ?case by(fastforce intro: bisimSubstReflexive)\nnext\n  case(Suc n)\nnext\napply auto\napply(blast intro: bisimSubstReflexive)\napply auto\napply(simp add: nth.simps)\napply(auto simp add: nth.simps)\napply blast\napply(rule_tac bisimSubstCasePresAux)\napply auto\n*)"], ["", "lemma weakBisimSubstParPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> R \\<approx>\\<^sub>s Q \\<parallel> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel> R \\<approx>\\<^sub>s Q \\<parallel> R", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel> R \\<approx>\\<^sub>s Q \\<parallel> R", "by(fastforce intro: closeSubstI closeSubstE weakBisimParPres)"], ["", "lemma weakBisimSubstResPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   x :: name\n\n  assumes \"\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\"\n  and     \"x \\<sharp> \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<approx>\\<^sub>s \\<lparr>\\<nu>x\\<rparr>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<approx>\\<^sub>s \\<lparr>\\<nu>x\\<rparr>Q", "proof(rule closeSubstI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "fix \\<sigma> :: \"(name list \\<times> 'a list) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "assume \"wellFormedSubst \\<sigma>\""], ["proof (state)\nthis:\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "obtain y::name where \"y \\<sharp> \\<Psi>\" and \"y \\<sharp> P\" and \"y \\<sharp> Q\" and \"y \\<sharp> \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<sharp> \\<Psi>; y \\<sharp> P; y \\<sharp> Q;\n         y \\<sharp> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (generate_fresh \"name\") auto"], ["proof (state)\nthis:\n  y \\<sharp> \\<Psi>\n  y \\<sharp> P\n  y \\<sharp> Q\n  y \\<sharp> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "from \\<open>\\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q", "have \"([(x, y)] \\<bullet> \\<Psi>) \\<rhd> ([(x, y)] \\<bullet> P) \\<approx>\\<^sub>s ([(x, y)] \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<approx>\\<^sub>s Q\n\ngoal (1 subgoal):\n 1. [(x, y)] \\<bullet>\n    \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                  P \\<approx>\\<^sub>s [(x, y)] \\<bullet> Q", "by (rule weakBisimSubstClosed)"], ["proof (state)\nthis:\n  [(x, y)] \\<bullet>\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet> P \\<approx>\\<^sub>s [(x, y)] \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "with \\<open>x \\<sharp> \\<Psi>\\<close> \\<open>y \\<sharp> \\<Psi>\\<close>"], ["proof (chain)\npicking this:\n  x \\<sharp> \\<Psi>\n  y \\<sharp> \\<Psi>\n  [(x, y)] \\<bullet>\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet> P \\<approx>\\<^sub>s [(x, y)] \\<bullet> Q", "have \"\\<Psi> \\<rhd> ([(x, y)] \\<bullet> P) \\<approx>\\<^sub>s ([(x, y)] \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  x \\<sharp> \\<Psi>\n  y \\<sharp> \\<Psi>\n  [(x, y)] \\<bullet>\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet> P \\<approx>\\<^sub>s [(x, y)] \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                  P \\<approx>\\<^sub>s [(x, y)] \\<bullet> Q", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet> P \\<approx>\\<^sub>s [(x, y)] \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "hence \"\\<Psi> \\<rhd> ([(x, y)] \\<bullet> P)[<\\<sigma>>] \\<approx> ([(x, y)] \\<bullet> Q)[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet> P \\<approx>\\<^sub>s [(x, y)] \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                  P[<\\<sigma>>] \\<approx> [(x, y)] \\<bullet> Q[<\\<sigma>>]", "using \\<open>wellFormedSubst \\<sigma>\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet> P \\<approx>\\<^sub>s [(x, y)] \\<bullet> Q\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                  P[<\\<sigma>>] \\<approx> [(x, y)] \\<bullet> Q[<\\<sigma>>]", "by (rule closeSubstE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                P[<\\<sigma>>] \\<approx> [(x, y)] \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "hence \"\\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>(([(x, y)] \\<bullet> P)[<\\<sigma>>]) \\<approx> \\<lparr>\\<nu>y\\<rparr>(([(x, y)] \\<bullet> Q)[<\\<sigma>>])\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                P[<\\<sigma>>] \\<approx> [(x, y)] \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n  P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n          Q[<\\<sigma>>]", "using \\<open>y \\<sharp> \\<Psi>\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                P[<\\<sigma>>] \\<approx> [(x, y)] \\<bullet> Q[<\\<sigma>>]\n  y \\<sharp> \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n  P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n          Q[<\\<sigma>>]", "by (rule weakBisimResPres)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\nP[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n        Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "with \\<open>y \\<sharp> P\\<close> \\<open>y \\<sharp> Q\\<close> \\<open>y \\<sharp> \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  y \\<sharp> P\n  y \\<sharp> Q\n  y \\<sharp> \\<sigma>\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\nP[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n        Q[<\\<sigma>>]", "show \"\\<Psi> \\<rhd> (\\<lparr>\\<nu>x\\<rparr>P)[<\\<sigma>>] \\<approx> (\\<lparr>\\<nu>x\\<rparr>Q)[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  y \\<sharp> P\n  y \\<sharp> Q\n  y \\<sharp> \\<sigma>\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\nP[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n        Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "by (simp add: alphaRes)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<approx> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\nlemma bisimSubstBangPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n \n  assumes \"\\<Psi> \\<rhd> P \\<sim>\\<^sub>s Q\"\n  and     \"guarded P\"\n  and     \"guarded Q\"\n\n  shows \"\\<Psi> \\<rhd> !P \\<sim>\\<^sub>s !Q\"\nusing assms\nby(fastforce intro: bisimSubstI bisimSubstE bisimBangPres)\n*)"], ["", "lemma weakBisimSubstParNil:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> \\<zero> \\<approx>\\<^sub>s P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel> \\<zero> \\<approx>\\<^sub>s P", "by(metis strongBisimSubstWeakBisimSubst bisimSubstParNil)"], ["", "lemma weakBisimSubstParComm:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<approx>\\<^sub>s Q \\<parallel> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel> Q \\<approx>\\<^sub>s Q \\<parallel> P", "by(metis strongBisimSubstWeakBisimSubst bisimSubstParComm)"], ["", "lemma weakBisimSubstParAssoc:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n\n  shows \"\\<Psi> \\<rhd> (P \\<parallel> Q) \\<parallel> R \\<approx>\\<^sub>s P \\<parallel> (Q \\<parallel> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel> Q \\<parallel>\n                  R \\<approx>\\<^sub>s P \\<parallel> (Q \\<parallel> R)", "by(metis strongBisimSubstWeakBisimSubst bisimSubstParAssoc)"], ["", "lemma weakBisimSubstResNil:\n  fixes \\<Psi> :: 'b\n  and   x :: name\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>\\<zero> \\<sim>\\<^sub>s \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>\\<zero> \\<sim>\\<^sub>s \\<zero>", "by(metis strongBisimSubstWeakBisimSubst bisimSubstResNil)"], ["", "lemma weakBisimSubstScopeExt:\n  fixes \\<Psi> :: 'b\n  and   x :: name\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"x \\<sharp> P\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(P \\<parallel> Q) \\<approx>\\<^sub>s P \\<parallel> \\<lparr>\\<nu>x\\<rparr>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(P \\<parallel>\n   Q) \\<approx>\\<^sub>s P \\<parallel> \\<lparr>\\<nu>x\\<rparr>Q", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(P \\<parallel>\n   Q) \\<approx>\\<^sub>s P \\<parallel> \\<lparr>\\<nu>x\\<rparr>Q", "by(metis strongBisimSubstWeakBisimSubst bisimSubstScopeExt)"], ["", "lemma weakBisimSubstCasePushRes:\n  fixes x  :: name\n  and   \\<Psi>  :: 'b\n  and   Cs :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n\n  assumes \"x \\<sharp> map fst Cs\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(Cases Cs) \\<approx>\\<^sub>s Cases map (\\<lambda>(\\<phi>, P). (\\<phi>, \\<lparr>\\<nu>x\\<rparr>P)) Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(Cases Cs) \\<approx>\\<^sub>s Cases map\n(\\<lambda>(\\<phi>, P). (\\<phi>, \\<lparr>\\<nu>x\\<rparr>P)) Cs", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> map fst Cs\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(Cases Cs) \\<approx>\\<^sub>s Cases map\n(\\<lambda>(\\<phi>, P). (\\<phi>, \\<lparr>\\<nu>x\\<rparr>P)) Cs", "by(metis strongBisimSubstWeakBisimSubst bisimSubstCasePushRes)"], ["", "lemma weakBisimSubstOutputPushRes:\n  fixes x :: name\n  and   \\<Psi> :: 'b\n  and   M :: 'a\n  and   N :: 'a\n  and   P :: \"('a, 'b, 'c) psi\"\n\n  assumes \"x \\<sharp> \\<Psi>\"\n  and     \"x \\<sharp> M\"\n  and     \"x \\<sharp> N\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(M\\<langle>N\\<rangle>.P) \\<approx>\\<^sub>s M\\<langle>N\\<rangle>.\\<lparr>\\<nu>x\\<rparr>P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(M\\<langle>N\\<rangle>.P) \\<approx>\\<^sub>s M\\<langle>N\\<rangle>.\\<lparr>\\<nu>x\\<rparr>P", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> \\<Psi>\n  x \\<sharp> M\n  x \\<sharp> N\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(M\\<langle>N\\<rangle>.P) \\<approx>\\<^sub>s M\\<langle>N\\<rangle>.\\<lparr>\\<nu>x\\<rparr>P", "by(metis strongBisimSubstWeakBisimSubst bisimSubstOutputPushRes)"], ["", "lemma weakBisimSubstInputPushRes:\n  fixes x    :: name\n  and   \\<Psi>    :: 'b\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n\n  assumes \"x \\<sharp> M\"\n  and     \"x \\<sharp> xvec\"\n  and     \"x \\<sharp> N\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(M\\<lparr>\\<lambda>*xvec N\\<rparr>.P) \\<approx>\\<^sub>s M\\<lparr>\\<lambda>*xvec N\\<rparr>.\\<lparr>\\<nu>x\\<rparr>P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(M\\<lparr>\\<lambda>*xvec N\\<rparr>.P) \\<approx>\\<^sub>s M\\<lparr>\\<lambda>*xvec N\\<rparr>.\\<lparr>\\<nu>x\\<rparr>P", "using assms"], ["proof (prove)\nusing this:\n  x \\<sharp> M\n  x \\<sharp> xvec\n  x \\<sharp> N\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(M\\<lparr>\\<lambda>*xvec N\\<rparr>.P) \\<approx>\\<^sub>s M\\<lparr>\\<lambda>*xvec N\\<rparr>.\\<lparr>\\<nu>x\\<rparr>P", "by(metis strongBisimSubstWeakBisimSubst bisimSubstInputPushRes)"], ["", "lemma weakBisimSubstResComm:\n  fixes x :: name\n  and   y :: name\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(\\<lparr>\\<nu>y\\<rparr>P) \\<approx>\\<^sub>s \\<lparr>\\<nu>y\\<rparr>(\\<lparr>\\<nu>x\\<rparr>P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>(\\<lparr>\\<nu>y\\<rparr>P) \\<approx>\\<^sub>s \\<lparr>\\<nu>y\\<rparr>(\\<lparr>\\<nu>x\\<rparr>P)", "by(metis strongBisimSubstWeakBisimSubst bisimSubstResComm)"], ["", "lemma weakBisimSubstExtBang:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"guarded P\"\n\n  shows \"\\<Psi> \\<rhd> !P \\<approx>\\<^sub>s P \\<parallel> !P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<approx>\\<^sub>s P \\<parallel> !P", "using assms"], ["proof (prove)\nusing this:\n  guarded P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<approx>\\<^sub>s P \\<parallel> !P", "by(metis strongBisimSubstWeakBisimSubst bisimSubstExtBang)"], ["", "end"], ["", "end"]]}