{"file_name": "/home/qj213/afp-2021-10-22/thys/Psi_Calculi/Tau_Chain.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Psi_Calculi", "problem_names": ["lemmas tauChainInduct[consumes 1, case_names TauBase TauStep] = rtrancl.induct[of _ _ \"{(P, P'). \\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'}\", simplified] for \\<Psi>", "lemmas tauStepChainInduct[consumes 1, case_names TauBase TauStep] = trancl.induct[of _ _ \"{(P, P'). \\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'}\", simplified] for \\<Psi>", "lemma tauActTauStepChain:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'\"\n\n  shows \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"", "lemma tauActTauChain:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'\"\n\n  shows \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"", "lemma tauStepChainEqvt[eqvt]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   p  :: \"name prm\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n\n  shows \"(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sub>\\<tau> (p \\<bullet> P')\"", "lemma tauChainEqvt[eqvt]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   p  :: \"name prm\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n\n  shows \"(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> (p \\<bullet> P')\"", "lemma tauStepChainEqvt'[eqvt]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   p  :: \"name prm\"\n\n  shows \"(p \\<bullet> (\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P')) = (p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sub>\\<tau> (p \\<bullet> P')\"", "lemma tauChainEqvt'[eqvt]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   p  :: \"name prm\"\n\n  shows \"(p \\<bullet> (\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P')) = (p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> (p \\<bullet> P')\"", "lemma tauStepChainFresh:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   x  :: name\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"x \\<sharp> P\"\n\n  shows \"x \\<sharp> P'\"", "lemma tauChainFresh:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   x  :: name\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"x \\<sharp> P\"\n\n  shows \"x \\<sharp> P'\"", "lemma tauStepChainFreshChain:\n  fixes \\<Psi>    :: 'b\n  and   P     :: \"('a, 'b, 'c) psi\"\n  and   P'    :: \"('a, 'b, 'c) psi\"\n  and   xvec  :: \"name list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"xvec \\<sharp>* P\"\n\n  shows \"xvec \\<sharp>* P'\"", "lemma tauChainFreshChain:\n  fixes \\<Psi>    :: 'b\n  and   P     :: \"('a, 'b, 'c) psi\"\n  and   P'    :: \"('a, 'b, 'c) psi\"\n  and   xvec  :: \"name list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"xvec \\<sharp>* P\"\n\n  shows \"xvec \\<sharp>* P'\"", "lemma tauStepChainCase:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   \\<phi>  :: 'c\n  and   Cs :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"(\\<phi>, P) mem Cs\"\n  and     \"\\<Psi> \\<turnstile> \\<phi>\"\n  and     \"guarded P\"\n\n  shows \"\\<Psi> \\<rhd> (Cases Cs) \\<Longrightarrow>\\<^sub>\\<tau> P'\"", "lemma tauStepChainResPres:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   x  :: name  \n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"x \\<sharp> \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P'\"", "lemma tauChainResPres:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   x  :: name  \n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"x \\<sharp> \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P'\"", "lemma tauStepChainResChainPres:\n  fixes \\<Psi>    :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   xvec :: \"name list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"xvec \\<sharp>* \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>*xvec\\<rparr>P \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P'\"", "lemma tauChainResChainPres:\n  fixes \\<Psi>    :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   xvec :: \"name list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"xvec \\<sharp>* \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>*xvec\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P'\"", "lemma tauStepChainPar1:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>\\<^sub>Q :: 'b\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   P'  :: \"('a, 'b, 'c) psi\"\n  and   Q   :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q :: \"name list\"\n\n  assumes \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sub>\\<tau> P' \\<parallel> Q\"", "lemma tauChainPar1:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>\\<^sub>Q :: 'b\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   P'  :: \"('a, 'b, 'c) psi\"\n  and   Q   :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q :: \"name list\"\n\n  assumes \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P' \\<parallel> Q\"", "lemma tauStepChainPar2:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>\\<^sub>P :: 'b\n  and   Q   :: \"('a, 'b, 'c) psi\"\n  and   Q'  :: \"('a, 'b, 'c) psi\"\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P :: \"name list\"\n\n  assumes \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sub>\\<tau> Q'\"\n  and     \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>P \\<sharp>* Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sub>\\<tau> P \\<parallel> Q'\"", "lemma tauChainPar2:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>\\<^sub>P :: 'b\n  and   Q   :: \"('a, 'b, 'c) psi\"\n  and   Q'  :: \"('a, 'b, 'c) psi\"\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P :: \"name list\"\n\n  assumes \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q'\"\n  and     \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>P \\<sharp>* Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q'\"", "lemma tauStepChainBang:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"guarded P\"\n\n  shows \"\\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sub>\\<tau> P'\"", "lemma tauStepChainStatEq:\n  fixes \\<Psi>  :: 'b\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   P'  :: \"('a, 'b, 'c) psi\"\n  and   \\<Psi>' :: 'b\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"", "lemma tauChainStatEq:\n  fixes \\<Psi>  :: 'b\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   P'  :: \"('a, 'b, 'c) psi\"\n  and   \\<Psi>' :: 'b\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"", "lemma weakTransitionI:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   P''  :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>   :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\"\n  and     \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n  and     \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"", "lemma weakTransitionE:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n\n  obtains P'' where \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n                 and \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\"", "lemma weakTransitionClosed[eqvt]:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   p    :: \"name prm\"\n\n  assumes \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n\n  shows \"(p \\<bullet> \\<Psi>) : (p \\<bullet> Q) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>(p \\<bullet> \\<alpha>)\\<prec> (p \\<bullet> P')\"", "lemma weakOutputAlpha:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   p    :: \"name prm\"\n  and   yvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*(p \\<bullet> xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'\"\n  and     S: \"set p \\<subseteq> set xvec \\<times> set(p \\<bullet> xvec)\"\n  and     \"distinctPerm p\"\n  and     \"xvec \\<sharp>* P\"\n  and     \"xvec \\<sharp>* (p \\<bullet> xvec)\"\n  and     \"(p \\<bullet> xvec) \\<sharp>* M\"\n  and     \"distinct xvec\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> (p \\<bullet> P')\"", "lemma weakFreshDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   x    :: name\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"x \\<sharp> P\"\n  and     \"x \\<sharp> \\<alpha>\"\n  and     \"bn \\<alpha> \\<sharp>* subject \\<alpha>\"\n  and     \"distinct(bn \\<alpha>)\"\n\n  shows \"x \\<sharp> P'\"", "lemma weakFreshChainDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   yvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"yvec \\<sharp>* P\"\n  and     \"yvec \\<sharp>* \\<alpha>\"\n  and     \"bn \\<alpha> \\<sharp>* subject \\<alpha>\"\n  and     \"distinct(bn \\<alpha>)\"\n\n  shows \"yvec \\<sharp>* P'\"", "lemma weakInputFreshDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   x    :: name\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     \"x \\<sharp> P\"\n  and     \"x \\<sharp> N\"\n\n  shows \"x \\<sharp> P'\"", "lemma weakInputFreshChainDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   xvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     \"xvec \\<sharp>* P\"\n  and     \"xvec \\<sharp>* N\"\n\n  shows \"xvec \\<sharp>* P'\"", "lemma weakOutputFreshDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   x    :: name\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     \"x \\<sharp> P\"\n  and     \"x \\<sharp> xvec\"\n  and     \"xvec \\<sharp>* M\"\n  and     \"distinct xvec\"\n\n  shows \"x \\<sharp> N\"\n  and   \"x \\<sharp> P'\"", "lemma weakOutputFreshChainDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   yvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     \"yvec \\<sharp>* P\"\n  and     \"xvec \\<sharp>* yvec\"\n  and     \"xvec \\<sharp>* M\"\n  and     \"distinct xvec\"\n\n  shows \"yvec \\<sharp>* N\"\n  and   \"yvec \\<sharp>* P'\"", "lemma weakOutputPermSubject:\n  fixes \\<Psi>   :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   p    :: \"name prm\"\n  and   yvec :: \"name list\"\n  and   zvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     S: \"set p \\<subseteq> set yvec \\<times> set zvec\"\n  and     \"yvec \\<sharp>* \\<Psi>\"\n  and     \"zvec \\<sharp>* \\<Psi>\"\n  and     \"yvec \\<sharp>* P\"\n  and     \"zvec \\<sharp>* P\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet> M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"", "lemma weakInputPermSubject:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   p    :: \"name prm\"\n  and   yvec :: \"name list\"\n  and   zvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     S: \"set p \\<subseteq> set yvec \\<times> set zvec\"\n  and     \"yvec \\<sharp>* \\<Psi>\"\n  and     \"zvec \\<sharp>* \\<Psi>\"\n  and     \"yvec \\<sharp>* P\"\n  and     \"zvec \\<sharp>* P\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet> M)\\<lparr>N\\<rparr> \\<prec> P'\"", "lemma weakInput:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   K    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   Tvec :: \"'a list\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<turnstile> M \\<leftrightarrow> K\"\n  and     \"distinct xvec\" \n  and     \"set xvec \\<subseteq> supp N\"\n  and     \"length xvec = length Tvec\"\n  and     Qeq\\<Psi>: \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes> \\<one>\\<rangle>\"\n\n  shows \"\\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>(N[xvec::=Tvec])\\<rparr> \\<prec> P[xvec::=Tvec]\"", "lemma weakOutput:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   K    :: 'a\n  and   N    :: 'a\n  and   P    :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<turnstile> M \\<leftrightarrow> K\"\n  and     Qeq\\<Psi>: \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes> \\<one>\\<rangle>\"\n\n  shows \"\\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P\"", "lemma insertGuardedAssertion:\n  fixes P :: \"('a, 'b, 'c) psi\"\n\n  assumes \"guarded P\"\n\n  shows \"insertAssertion(extractFrame P) \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes> \\<one>\\<rangle>\"", "lemma weakCase:\n  fixes \\<Psi>   :: 'b \n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   R    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"(\\<phi>, P) mem CsP\"\n  and     \"\\<Psi> \\<turnstile> \\<phi>\"\n  and     \"guarded P\"\n  and     RImpQ: \"insertAssertion (extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame Q) \\<Psi>\"\n  and     ImpR: \"insertAssertion (extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\"\n\n  shows \"\\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\"", "lemma weakOpen:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   yvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec@yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     \"x \\<in> supp N\"\n  and     \"x \\<sharp> \\<Psi>\"\n  and     \"x \\<sharp> M\"\n  and     \"x \\<sharp> xvec\"\n  and     \"x \\<sharp> yvec\"\n\n  shows \"\\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec@x#yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"", "lemma weakScope:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"x \\<sharp> \\<Psi>\"\n  and     \"x \\<sharp> \\<alpha>\"\n\n  shows \"\\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'\"", "lemma weakPar1:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q   :: \"name list\"\n  and   \\<Psi>\\<^sub>Q   :: 'b\n\n  assumes PTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     FrQ: \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     \"bn \\<alpha> \\<sharp>* Q\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<alpha>\"\n  and     \"A\\<^sub>Q \\<sharp>* R\"\n\n  shows \"\\<Psi> : R \\<parallel> Q \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q\"", "lemma weakPar2:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   Q'   :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P   :: \"name list\"\n  and   \\<Psi>\\<^sub>P  :: 'b\n\n  assumes QTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P : R \\<rhd> Q \\<Longrightarrow>\\<alpha> \\<prec> Q'\"\n  and     FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"bn \\<alpha> \\<sharp>* P\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>P \\<sharp>* Q\"\n  and     \"A\\<^sub>P \\<sharp>* \\<alpha>\"\n  and     \"A\\<^sub>P \\<sharp>* R\"\n\n  shows \"\\<Psi> : P \\<parallel> R \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'\"", "lemma weakComm1:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q   :: \"name list\"\n  and   \\<Psi>\\<^sub>Q   :: 'b\n\n  assumes PTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     FrR: \"extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\"\n  and     QTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<rhd> Q \\<longmapsto>K\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q'\"\n  and     FrQ: \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     MeqK: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K\"\n  and     \"A\\<^sub>R \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>R \\<sharp>* P\"\n  and     \"A\\<^sub>R \\<sharp>* Q\"\n  and     \"A\\<^sub>R \\<sharp>* R\"\n  and     \"A\\<^sub>R \\<sharp>* M\"\n  and     \"A\\<^sub>R \\<sharp>* A\\<^sub>Q\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n  and     \"A\\<^sub>Q \\<sharp>* Q\"\n  and     \"A\\<^sub>Q \\<sharp>* R\"\n  and     \"A\\<^sub>Q \\<sharp>* K\"\n  and     \"xvec \\<sharp>* P\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sub>\\<tau> (\\<lparr>\\<nu>*xvec\\<rparr>(P' \\<parallel> Q'))\"", "lemma weakComm2:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q   :: \"name list\"\n  and   \\<Psi>\\<^sub>Q   :: 'b\n\n  assumes PTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     FrR: \"extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\"\n  and     QTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<rhd> Q \\<longmapsto>K\\<lparr>N\\<rparr> \\<prec> Q'\"\n  and     FrQ: \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     MeqK: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K\"\n  and     \"A\\<^sub>R \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>R \\<sharp>* P\"\n  and     \"A\\<^sub>R \\<sharp>* Q\"\n  and     \"A\\<^sub>R \\<sharp>* R\"\n  and     \"A\\<^sub>R \\<sharp>* M\"\n  and     \"A\\<^sub>R \\<sharp>* A\\<^sub>Q\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n  and     \"A\\<^sub>Q \\<sharp>* Q\"\n  and     \"A\\<^sub>Q \\<sharp>* R\"\n  and     \"A\\<^sub>Q \\<sharp>* K\"\n  and     \"xvec \\<sharp>* Q\"\n  and     \"xvec \\<sharp>* M\"\n  and     \"xvec \\<sharp>* A\\<^sub>Q\"\n  and     \"xvec \\<sharp>* A\\<^sub>R\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sub>\\<tau> (\\<lparr>\\<nu>*xvec\\<rparr>(P' \\<parallel> Q'))\"", "lemma frameImpIntComposition:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>' :: 'b\n  and   A\\<^sub>F :: \"name list\"\n  and   \\<Psi>\\<^sub>F :: 'b\n\n  assumes \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<langle>A\\<^sub>F, \\<Psi> \\<otimes> \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>F\\<rangle>\"", "lemma insertAssertionStatImp:\n  fixes F  :: \"'b frame\"\n  and   \\<Psi>  :: 'b\n  and   G  :: \"'b frame\"\n  and   \\<Psi>' :: 'b\n\n  assumes FeqG: \"insertAssertion F \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"insertAssertion F \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'\"", "lemma insertAssertionStatEq:\n  fixes F  :: \"'b frame\"\n  and   \\<Psi>  :: 'b\n  and   G  :: \"'b frame\"\n  and   \\<Psi>' :: 'b\n\n  assumes FeqG: \"insertAssertion F \\<Psi> \\<simeq>\\<^sub>F insertAssertion G \\<Psi>\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"insertAssertion F \\<Psi>' \\<simeq>\\<^sub>F insertAssertion G \\<Psi>'\"", "lemma weakTransitionStatEq:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   \\<Psi>'  :: 'b\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"", "lemma transitionWeakTransition:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>\\<alpha> \\<prec> P'\"\n  and     \"insertAssertion(extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion(extractFrame P) \\<Psi>\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"", "lemma weakPar1Guarded:\n  fixes \\<Psi>  :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"bn \\<alpha> \\<sharp>* Q\"\n  and     \"guarded Q\"\n\n  shows \"\\<Psi> : (R \\<parallel> Q) \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q\"", "lemma weakBang:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : R \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"guarded P\"\n\n  shows \"\\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\"", "lemma weakTransitionFrameImp:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   R    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and             \"insertAssertion(extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion(extractFrame Q) \\<Psi>\"\n\n  shows \"\\<Psi> : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"", "lemma guardedFrameStatEq:\n  fixes P :: \"('a, 'b, 'c) psi\"\n\n  assumes \"guarded P\"\n\n  shows \"extractFrame P \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<one>\\<rangle>\"", "lemma weakGuardedTransition:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   R    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and    \"guarded Q\"\n\n  shows \"\\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"", "lemma expandTauChainFrame:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P :: \"name list\"\n  and   \\<Psi>\\<^sub>P :: 'b\n  and   C   :: \"'d::fs_name\"\n\n  assumes PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"distinct A\\<^sub>P\"\n  and     \"A\\<^sub>P \\<sharp>* P\"\n  and     \"A\\<^sub>P \\<sharp>* C\"\n\n  obtains \\<Psi>' A\\<^sub>P' \\<Psi>\\<^sub>P' where \"extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\" and \"\\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\" and \"A\\<^sub>P' \\<sharp>* P'\" and \"A\\<^sub>P' \\<sharp>* C\" and \"distinct A\\<^sub>P'\"", "lemma frameIntImpComposition:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>' :: 'b\n  and   A\\<^sub>F :: \"name list\"\n  and   \\<Psi>\\<^sub>F :: 'b\n\n  assumes \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<langle>A\\<^sub>F, \\<Psi> \\<otimes> \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>F\\<rangle>\"", "lemma tauChainInduct2[consumes 1, case_names TauBase TauStep]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     cBase: \"\\<And>P. Prop P P\"\n  and     cStep: \"\\<And>P P' P''. \\<lbrakk>\\<Psi> \\<rhd> P' \\<longmapsto>\\<tau> \\<prec> P''; \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'; Prop P P'\\<rbrakk> \\<Longrightarrow> Prop P P''\"\n\n  shows \"Prop P P'\"", "lemma tauStepChainInduct2[consumes 1, case_names TauBase TauStep]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     cBase: \"\\<And>P P'. \\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P' \\<Longrightarrow> Prop P P'\"\n  and     cStep: \"\\<And>P P' P''. \\<lbrakk>\\<Psi> \\<rhd> P' \\<longmapsto>\\<tau> \\<prec> P''; \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'; Prop P P'\\<rbrakk> \\<Longrightarrow> Prop P P''\"\n\n  shows \"Prop P P'\"", "lemma weakTransferTauChainFrame:\n  fixes \\<Psi>\\<^sub>F :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P :: \"name list\"\n  and   \\<Psi>\\<^sub>P :: 'b\n  and   A\\<^sub>F :: \"name list\"\n  and   A\\<^sub>G :: \"name list\"\n  and   \\<Psi>\\<^sub>G :: 'b\n\n  assumes PChain: \"\\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"distinct A\\<^sub>P\"\n  and     FeqG: \"\\<And>\\<Psi>. insertAssertion (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P\\<rangle>) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>) \\<Psi>\"\n  and     \"A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>G\"\n  and     \"A\\<^sub>G \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>F\"\n  and     \"A\\<^sub>F \\<sharp>* A\\<^sub>G\"\n  and     \"A\\<^sub>F \\<sharp>* P\"\n  and     \"A\\<^sub>G \\<sharp>* P\"\n  and     \"A\\<^sub>P \\<sharp>* A\\<^sub>F\"\n  and     \"A\\<^sub>P \\<sharp>* A\\<^sub>G\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>F\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>G\"\n  and     \"A\\<^sub>P \\<sharp>* P\"\n\n  shows \"\\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"", "lemma quietFrame:\n  fixes \\<Psi> :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n\n  assumes \"quiet P\"\n\n  shows \"insertAssertion (extractFrame P) \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\"", "lemma quietTransition:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   Rs :: \"('a, 'b, 'c) residual\"\n\n  assumes \"quiet P\"\n  and     \"\\<Psi> \\<rhd> P \\<longmapsto> Rs\"\n\n  obtains P' where \"Rs = \\<tau> \\<prec> P'\" and \"quiet P'\"", "lemma quietEqvt:\n  fixes P :: \"('a, 'b, 'c) psi\"\n  and   p :: \"name prm\"\n\n  assumes \"quiet P\"\n\n  shows \"quiet(p \\<bullet> P)\"", "lemma quietOutput:\n  fixes \\<Psi>   :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     \"quiet P\"\n\n  shows False", "lemma quietInput:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   M  :: 'a\n  and   N  :: 'a\n  and   P' :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     \"quiet P\"\n\n  shows False", "lemma quietTau:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'\"\n  and     \"insertAssertion (extractFrame P) \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\"\n  and     \"quiet P\"\n\n  shows \"quiet P'\"", "lemma tauChainCases[consumes 1, case_names TauBase TauStep]:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"P = P' \\<Longrightarrow> Prop\"\n  and     \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P' \\<Longrightarrow> Prop\"\n\n  shows Prop"], "translations": [["", "lemmas tauChainInduct[consumes 1, case_names TauBase TauStep] = rtrancl.induct[of _ _ \"{(P, P'). \\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'}\", simplified] for \\<Psi>"], ["", "lemmas tauStepChainInduct[consumes 1, case_names TauBase TauStep] = trancl.induct[of _ _ \"{(P, P'). \\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'}\", simplified] for \\<Psi>"], ["", "lemma tauActTauStepChain:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'\"\n\n  shows \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<longmapsto> \\<tau> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'", "by auto"], ["", "lemma tauActTauChain:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'\"\n\n  shows \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<longmapsto> \\<tau> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'", "by(auto simp add: rtrancl_eq_or_trancl)"], ["", "lemma tauStepChainEqvt[eqvt]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   p  :: \"name prm\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n\n  shows \"(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sub>\\<tau> (p \\<bullet> P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P'", "proof(induct rule: tauStepChainInduct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<Psi> \\<rhd> a \\<longmapsto> \\<tau> \\<prec> b \\<Longrightarrow>\n       p \\<bullet>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b\n 2. \\<And>a b c.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sub>\\<tau> b;\n        p \\<bullet>\n        \\<Psi> \\<rhd> p \\<bullet>\n                      a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet>\n                         \\<Psi> \\<rhd> p \\<bullet>\n a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> c", "case(TauBase P P')"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<longmapsto> \\<tau> \\<prec> P'\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<Psi> \\<rhd> a \\<longmapsto> \\<tau> \\<prec> b \\<Longrightarrow>\n       p \\<bullet>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b\n 2. \\<And>a b c.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sub>\\<tau> b;\n        p \\<bullet>\n        \\<Psi> \\<rhd> p \\<bullet>\n                      a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet>\n                         \\<Psi> \\<rhd> p \\<bullet>\n a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> c", "hence \"\\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<longmapsto> \\<tau> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<longmapsto> \\<tau> \\<prec> P'", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<longmapsto> \\<tau> \\<prec> P'\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<Psi> \\<rhd> a \\<longmapsto> \\<tau> \\<prec> b \\<Longrightarrow>\n       p \\<bullet>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b\n 2. \\<And>a b c.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sub>\\<tau> b;\n        p \\<bullet>\n        \\<Psi> \\<rhd> p \\<bullet>\n                      a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet>\n                         \\<Psi> \\<rhd> p \\<bullet>\n a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> c", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<longmapsto> \\<tau> \\<prec> P'\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P'", "by(force dest: semantics.eqvt simp add: eqvts)"], ["proof (state)\nthis:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet> P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P'\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sub>\\<tau> b;\n        p \\<bullet>\n        \\<Psi> \\<rhd> p \\<bullet>\n                      a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet>\n                         \\<Psi> \\<rhd> p \\<bullet>\n a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sub>\\<tau> b;\n        p \\<bullet>\n        \\<Psi> \\<rhd> p \\<bullet>\n                      a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet>\n                         \\<Psi> \\<rhd> p \\<bullet>\n a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> c", "case(TauStep P P' P'')"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet> P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P'\n  \\<Psi> \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sub>\\<tau> b;\n        p \\<bullet>\n        \\<Psi> \\<rhd> p \\<bullet>\n                      a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet>\n                         \\<Psi> \\<rhd> p \\<bullet>\n a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> c", "hence \"\\<Psi> \\<rhd> P' \\<longmapsto>\\<tau> \\<prec> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet> P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P'\n  \\<Psi> \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sub>\\<tau> b;\n        p \\<bullet>\n        \\<Psi> \\<rhd> p \\<bullet>\n                      a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet>\n                         \\<Psi> \\<rhd> p \\<bullet>\n a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> c", "hence \"(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P') \\<longmapsto>\\<tau> \\<prec> (p \\<bullet> P'')\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P' \\<longmapsto> \\<tau> \\<prec> p \\<bullet> P''", "by(force dest: semantics.eqvt simp add: eqvts)"], ["proof (state)\nthis:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet> P' \\<longmapsto> \\<tau> \\<prec> p \\<bullet> P''\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sub>\\<tau> b;\n        p \\<bullet>\n        \\<Psi> \\<rhd> p \\<bullet>\n                      a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> b;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet>\n                         \\<Psi> \\<rhd> p \\<bullet>\n a \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> c", "with \\<open>(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sub>\\<tau> (p \\<bullet> P')\\<close>"], ["proof (chain)\npicking this:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet> P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P'\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet> P' \\<longmapsto> \\<tau> \\<prec> p \\<bullet> P''", "show ?case"], ["proof (prove)\nusing this:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet> P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P'\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet> P' \\<longmapsto> \\<tau> \\<prec> p \\<bullet> P''\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P''", "by(subst trancl.trancl_into_trancl) auto"], ["proof (state)\nthis:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet> P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tauChainEqvt[eqvt]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   p  :: \"name prm\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n\n  shows \"(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> (p \\<bullet> P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> p \\<bullet> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> p \\<bullet> P'", "by(auto simp add: rtrancl_eq_or_trancl eqvts)"], ["", "lemma tauStepChainEqvt'[eqvt]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   p  :: \"name prm\"\n\n  shows \"(p \\<bullet> (\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P')) = (p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sub>\\<tau> (p \\<bullet> P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P' =\n    p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P'", "apply(auto simp add: eqvts perm_set_def pt_bij[OF pt_name_inst, OF at_name_inst])"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet>\n             P' \\<Longrightarrow>\n    \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'", "by(drule_tac p=\"rev p\" in tauStepChainEqvt) auto"], ["", "lemma tauChainEqvt'[eqvt]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   p  :: \"name prm\"\n\n  shows \"(p \\<bullet> (\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P')) = (p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> (p \\<bullet> P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P' =\n    p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> p \\<bullet> P'", "apply(auto simp add: eqvts perm_set_def pt_bij[OF pt_name_inst, OF at_name_inst] rtrancl_eq_or_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<bullet>\n             \\<Psi> \\<rhd> p \\<bullet>\n                           P \\<Longrightarrow>\\<^sub>\\<tau> p \\<bullet> P';\n     P \\<noteq> P'\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'", "by(drule_tac p=\"rev p\" in tauStepChainEqvt) auto"], ["", "lemma tauStepChainFresh:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   x  :: name\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"x \\<sharp> P\"\n\n  shows \"x \\<sharp> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "by(induct rule: trancl.induct) (auto dest: tauFreshDerivative)"], ["", "lemma tauChainFresh:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   x  :: name\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"x \\<sharp> P\"\n\n  shows \"x \\<sharp> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "by(auto simp add: rtrancl_eq_or_trancl intro: tauStepChainFresh)"], ["", "lemma tauStepChainFreshChain:\n  fixes \\<Psi>    :: 'b\n  and   P     :: \"('a, 'b, 'c) psi\"\n  and   P'    :: \"('a, 'b, 'c) psi\"\n  and   xvec  :: \"name list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"xvec \\<sharp>* P\"\n\n  shows \"xvec \\<sharp>* P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xvec \\<sharp>* P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  xvec \\<sharp>* P\n\ngoal (1 subgoal):\n 1. xvec \\<sharp>* P'", "by(induct xvec) (auto intro: tauStepChainFresh)"], ["", "lemma tauChainFreshChain:\n  fixes \\<Psi>    :: 'b\n  and   P     :: \"('a, 'b, 'c) psi\"\n  and   P'    :: \"('a, 'b, 'c) psi\"\n  and   xvec  :: \"name list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"xvec \\<sharp>* P\"\n\n  shows \"xvec \\<sharp>* P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xvec \\<sharp>* P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  xvec \\<sharp>* P\n\ngoal (1 subgoal):\n 1. xvec \\<sharp>* P'", "by(induct xvec) (auto intro: tauChainFresh)"], ["", "lemma tauStepChainCase:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   \\<phi>  :: 'c\n  and   Cs :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"(\\<phi>, P) mem Cs\"\n  and     \"\\<Psi> \\<turnstile> \\<phi>\"\n  and     \"guarded P\"\n\n  shows \"\\<Psi> \\<rhd> (Cases Cs) \\<Longrightarrow>\\<^sub>\\<tau> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Cases Cs \\<Longrightarrow>\\<^sub>\\<tau> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  (\\<phi>, P) mem Cs\n  \\<Psi> \\<turnstile> \\<phi>\n  guarded P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Cases Cs \\<Longrightarrow>\\<^sub>\\<tau> P'", "by(induct rule: trancl.induct) (auto intro: Case trancl_into_trancl)"], ["", "lemma tauStepChainResPres:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   x  :: name  \n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"x \\<sharp> \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  x \\<sharp> \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P'", "by(induct rule: trancl.induct) (auto dest: Scope trancl_into_trancl)"], ["", "lemma tauChainResPres:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   x  :: name  \n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"x \\<sharp> \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  x \\<sharp> \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P'", "by(auto simp add: rtrancl_eq_or_trancl intro: tauStepChainResPres)"], ["", "lemma tauStepChainResChainPres:\n  fixes \\<Psi>    :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   xvec :: \"name list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"xvec \\<sharp>* \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>*xvec\\<rparr>P \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>*xvec\\<rparr>P \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  xvec \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>*xvec\\<rparr>P \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P'", "by(induct xvec) (auto intro: tauStepChainResPres)"], ["", "lemma tauChainResChainPres:\n  fixes \\<Psi>    :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   xvec :: \"name list\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"xvec \\<sharp>* \\<Psi>\"\n\n  shows \"\\<Psi> \\<rhd> \\<lparr>\\<nu>*xvec\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>*xvec\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  xvec \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>*xvec\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P'", "by(induct xvec) (auto intro: tauChainResPres)"], ["", "lemma tauStepChainPar1:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>\\<^sub>Q :: 'b\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   P'  :: \"('a, 'b, 'c) psi\"\n  and   Q   :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q :: \"name list\"\n\n  assumes \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sub>\\<tau> P' \\<parallel> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> P' \\<parallel> Q", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> P' \\<parallel> Q", "by(induct rule: trancl.induct)  (auto dest: Par1 tauStepChainFreshChain trancl_into_trancl)"], ["", "lemma tauChainPar1:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>\\<^sub>Q :: 'b\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   P'  :: \"('a, 'b, 'c) psi\"\n  and   Q   :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q :: \"name list\"\n\n  assumes \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P' \\<parallel> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P' \\<parallel> Q", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P' \\<parallel> Q", "by(auto simp add: rtrancl_eq_or_trancl intro: tauStepChainPar1)"], ["", "lemma tauStepChainPar2:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>\\<^sub>P :: 'b\n  and   Q   :: \"('a, 'b, 'c) psi\"\n  and   Q'  :: \"('a, 'b, 'c) psi\"\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P :: \"name list\"\n\n  assumes \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sub>\\<tau> Q'\"\n  and     \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>P \\<sharp>* Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sub>\\<tau> P \\<parallel> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> P \\<parallel> Q'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sub>\\<tau> Q'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  A\\<^sub>P \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> P \\<parallel> Q'", "by(induct rule: trancl.induct) (auto dest: Par2 trancl_into_trancl tauStepChainFreshChain)"], ["", "lemma tauChainPar2:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>\\<^sub>P :: 'b\n  and   Q   :: \"('a, 'b, 'c) psi\"\n  and   Q'  :: \"('a, 'b, 'c) psi\"\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P :: \"name list\"\n\n  assumes \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q'\"\n  and     \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>P \\<sharp>* Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  A\\<^sub>P \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q'", "by(auto simp add: rtrancl_eq_or_trancl intro: tauStepChainPar2)"], ["", "lemma tauStepChainBang:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"guarded P\"\n\n  shows \"\\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sub>\\<tau> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sub>\\<tau> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  guarded P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sub>\\<tau> P'", "by(induct x1==\"P \\<parallel> !P\" P' rule: trancl.induct) (auto intro: Bang dest: Bang trancl_into_trancl)"], ["", "lemma tauStepChainStatEq:\n  fixes \\<Psi>  :: 'b\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   P'  :: \"('a, 'b, 'c) psi\"\n  and   \\<Psi>' :: 'b\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'", "by(induct rule: trancl.induct) (auto dest: statEqTransition trancl_into_trancl)"], ["", "lemma tauChainStatEq:\n  fixes \\<Psi>  :: 'b\n  and   P   :: \"('a, 'b, 'c) psi\"\n  and   P'  :: \"('a, 'b, 'c) psi\"\n  and   \\<Psi>' :: 'b\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'", "by(auto simp add: rtrancl_eq_or_trancl intro: tauStepChainStatEq)"], ["", "definition weakTransition :: \"'b \\<Rightarrow> ('a, 'b, 'c) psi \\<Rightarrow>  ('a, 'b, 'c) psi \\<Rightarrow> 'a action \\<Rightarrow> ('a, 'b, 'c) psi \\<Rightarrow> bool\" (\"_ : _ \\<rhd> _ \\<Longrightarrow>_ \\<prec> _\" [80, 80, 80, 80, 80] 80)\nwhere\n  \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P' \\<equiv> \\<exists>P''. \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<and> (insertAssertion (extractFrame Q) \\<Psi>) \\<hookrightarrow>\\<^sub>F (insertAssertion (extractFrame P'') \\<Psi>) \\<and>\n                                          \\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["", "lemma weakTransitionI:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   P''  :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>   :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\"\n  and     \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n  and     \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(auto simp add: weakTransition_def)"], ["", "lemma weakTransitionE:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n\n  obtains P'' where \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n                 and \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: weakTransition_def)"], ["", "lemma weakTransitionClosed[eqvt]:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   p    :: \"name prm\"\n\n  assumes \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n\n  shows \"(p \\<bullet> \\<Psi>) : (p \\<bullet> Q) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>(p \\<bullet> \\<alpha>)\\<prec> (p \\<bullet> P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "from assms"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "obtain P'' where \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n                           and \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "from \\<open>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "have \"(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P) \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> (p \\<bullet> P'')\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> p \\<bullet> P''", "by(rule tauChainEqvt)"], ["proof (state)\nthis:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> p \\<bullet> P''\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "moreover"], ["proof (state)\nthis:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> p \\<bullet> P''\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "from \\<open>insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\\<close>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>", "have \"(p \\<bullet> (insertAssertion (extractFrame Q) \\<Psi>)) \\<hookrightarrow>\\<^sub>F (p \\<bullet> (insertAssertion (extractFrame P'') \\<Psi>))\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    insertAssertion (extractFrame Q)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F p \\<bullet>\ninsertAssertion (extractFrame P'') \\<Psi>", "by(rule FrameStatImpClosed)"], ["proof (state)\nthis:\n  p \\<bullet>\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F p \\<bullet>\n                                    insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "hence \"insertAssertion (extractFrame(p \\<bullet> Q)) (p \\<bullet> \\<Psi>) \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame(p \\<bullet> P'')) (p \\<bullet> \\<Psi>)\""], ["proof (prove)\nusing this:\n  p \\<bullet>\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F p \\<bullet>\n                                    insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (p \\<bullet> Q))\n     (p \\<bullet>\n      \\<Psi>) \\<hookrightarrow>\\<^sub>F insertAssertion\n   (extractFrame (p \\<bullet> P'')) (p \\<bullet> \\<Psi>)", "by(simp add: eqvts)"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (p \\<bullet> Q))\n   (p \\<bullet>\n    \\<Psi>) \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (p \\<bullet> P'')) (p \\<bullet> \\<Psi>)\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (p \\<bullet> Q))\n   (p \\<bullet>\n    \\<Psi>) \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (p \\<bullet> P'')) (p \\<bullet> \\<Psi>)\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "from \\<open>\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'", "have \"(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P'') \\<longmapsto>(p \\<bullet> (\\<alpha> \\<prec> P'))\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P'' \\<longmapsto> p \\<bullet> \\<alpha> \\<prec> P'", "by(rule semantics.eqvt)"], ["proof (state)\nthis:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P'' \\<longmapsto> p \\<bullet> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "hence \"(p \\<bullet> \\<Psi>) \\<rhd> (p \\<bullet> P'') \\<longmapsto>(p \\<bullet> \\<alpha>) \\<prec> (p \\<bullet> P')\""], ["proof (prove)\nusing this:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P'' \\<longmapsto> p \\<bullet> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> \\<rhd> p \\<bullet>\n                  P'' \\<longmapsto> p \\<bullet>\n                                    \\<alpha> \\<prec> p \\<bullet> P'", "by(simp add: eqvts)"], ["proof (state)\nthis:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P'' \\<longmapsto> p \\<bullet>\n                                  \\<alpha> \\<prec> p \\<bullet> P'\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "ultimately"], ["proof (chain)\npicking this:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> p \\<bullet> P''\n  insertAssertion (extractFrame (p \\<bullet> Q))\n   (p \\<bullet>\n    \\<Psi>) \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (p \\<bullet> P'')) (p \\<bullet> \\<Psi>)\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P'' \\<longmapsto> p \\<bullet>\n                                  \\<alpha> \\<prec> p \\<bullet> P'", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> p \\<bullet> P''\n  insertAssertion (extractFrame (p \\<bullet> Q))\n   (p \\<bullet>\n    \\<Psi>) \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (p \\<bullet> P'')) (p \\<bullet> \\<Psi>)\n  p \\<bullet>\n  \\<Psi> \\<rhd> p \\<bullet>\n                P'' \\<longmapsto> p \\<bullet>\n                                  \\<alpha> \\<prec> p \\<bullet> P'\n\ngoal (1 subgoal):\n 1. p \\<bullet>\n    \\<Psi> : p \\<bullet>\n             Q \\<rhd> p \\<bullet>\n                      P \\<Longrightarrow>p \\<bullet>\n   \\<alpha> \\<prec> p \\<bullet> P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  p \\<bullet>\n  \\<Psi> : p \\<bullet>\n           Q \\<rhd> p \\<bullet>\n                    P \\<Longrightarrow>p \\<bullet>\n \\<alpha> \\<prec> p \\<bullet> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\nlemma weakTransitionAlpha:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   p    :: \"name prm\"\n  and   yvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     S: \"set p \\<subseteq> set xvec \\<times> set(p \\<bullet> xvec)\"\n  and     \"xvec \\<sharp>* (p \\<bullet> xvec)\"\n  and     \"(p \\<bullet> xvec) \\<sharp>* P\"\n  and     \"(p \\<bullet> xvec) \\<sharp>* N\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*(p \\<bullet> xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> (p \\<bullet> P')\"\nproof -\n  from PTrans obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and QeqP'': \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n                           and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n    by(rule weakTransitionE)\n\n  note PChain QeqP''\n  moreover from PChain `(p \\<bullet> xvec) \\<sharp>* P` have \"(p \\<bullet> xvec) \\<sharp>* P''\" by(rule tauChainFreshChain)\n  with P''Trans `xvec \\<sharp>* (p \\<bullet> xvec)` `(p \\<bullet> xvec) \\<sharp>* N` have \"(p \\<bullet> xvec) \\<sharp>* P'\"\n    by(force intro: outputFreshChainDerivative)\n  with P''Trans S `(p \\<bullet> xvec) \\<sharp>* N` have \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>\\<nu>*(p \\<bullet> xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> (p \\<bullet> P')\"\n    by(simp add: boundOutputChainAlpha'')\n  ultimately show ?thesis by(rule weakTransitionI)\nqed\n*)"], ["", "lemma weakOutputAlpha:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   p    :: \"name prm\"\n  and   yvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*(p \\<bullet> xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'\"\n  and     S: \"set p \\<subseteq> set xvec \\<times> set(p \\<bullet> xvec)\"\n  and     \"distinctPerm p\"\n  and     \"xvec \\<sharp>* P\"\n  and     \"xvec \\<sharp>* (p \\<bullet> xvec)\"\n  and     \"(p \\<bullet> xvec) \\<sharp>* M\"\n  and     \"distinct xvec\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> (p \\<bullet> P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*(p \\<bullet>\n                 xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and QeqP'': \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n                           and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>\\<nu>*(p \\<bullet> xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*(p \\<bullet>\n                 xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(p \\<bullet>\n                   xvec)\\<rparr>\\<langle>(p \\<bullet>\n    N)\\<rangle> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(p \\<bullet>\n            xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "note PChain QeqP''"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "from PChain \\<open>xvec \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  xvec \\<sharp>* P", "have \"xvec \\<sharp>* P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  xvec \\<sharp>* P\n\ngoal (1 subgoal):\n 1. xvec \\<sharp>* P''", "by(rule tauChainFreshChain)"], ["proof (state)\nthis:\n  xvec \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "with P''Trans \\<open>xvec \\<sharp>* (p \\<bullet> xvec)\\<close> \\<open>distinct xvec\\<close> \\<open>(p \\<bullet> xvec) \\<sharp>* M\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(p \\<bullet>\n            xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'\n  xvec \\<sharp>* (p \\<bullet> xvec)\n  distinct xvec\n  (p \\<bullet> xvec) \\<sharp>* M\n  xvec \\<sharp>* P''", "have \"xvec \\<sharp>* (p \\<bullet> N)\" and \"xvec \\<sharp>* P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(p \\<bullet>\n            xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'\n  xvec \\<sharp>* (p \\<bullet> xvec)\n  distinct xvec\n  (p \\<bullet> xvec) \\<sharp>* M\n  xvec \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. xvec \\<sharp>* (p \\<bullet> N) &&& xvec \\<sharp>* P'", "by(force intro: outputFreshChainDerivative)+"], ["proof (state)\nthis:\n  xvec \\<sharp>* (p \\<bullet> N)\n  xvec \\<sharp>* P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "hence \"(p \\<bullet> xvec) \\<sharp>* (p \\<bullet> p \\<bullet> N)\" and \"(p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')\""], ["proof (prove)\nusing this:\n  xvec \\<sharp>* (p \\<bullet> N)\n  xvec \\<sharp>* P'\n\ngoal (1 subgoal):\n 1. (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> p \\<bullet> N) &&&\n    (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')", "by(simp add: pt_fresh_star_bij[OF pt_name_inst, OF at_name_inst])+"], ["proof (state)\nthis:\n  (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> p \\<bullet> N)\n  (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "with \\<open>distinctPerm p\\<close>"], ["proof (chain)\npicking this:\n  distinctPerm p\n  (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> p \\<bullet> N)\n  (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')", "have \"(p \\<bullet> xvec) \\<sharp>* N\" and \"(p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')\""], ["proof (prove)\nusing this:\n  distinctPerm p\n  (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> p \\<bullet> N)\n  (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')\n\ngoal (1 subgoal):\n 1. (p \\<bullet> xvec) \\<sharp>* N &&&\n    (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')", "by simp+"], ["proof (state)\nthis:\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "with P''Trans S \\<open>distinctPerm p\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(p \\<bullet>\n            xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n  distinctPerm p\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')", "have \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> (p \\<bullet> P')\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(p \\<bullet>\n            xvec)\\<rparr>\\<langle>(p \\<bullet> N)\\<rangle> \\<prec> P'\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n  distinctPerm p\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n               P'", "apply(simp add: residualInject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Psi> \\<rhd> P'' \\<longmapsto> ROut M\n        (\\<lparr>\\<nu>*p \\<bullet> xvec\\<rparr>(p \\<bullet> N) \\<prec>' P');\n     set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec);\n     distinctPerm p; (p \\<bullet> xvec) \\<sharp>* N;\n     (p \\<bullet> xvec) \\<sharp>* (p \\<bullet> P')\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> \\<rhd> P'' \\<longmapsto> ROut M\n                 (\\<lparr>\\<nu>*xvec\\<rparr>N \\<prec>' (p \\<bullet> P'))", "by(subst boundOutputChainAlpha) auto"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n             P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n             P'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n             P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                    P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> p \\<bullet>\n                  P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakFreshDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   x    :: name\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"x \\<sharp> P\"\n  and     \"x \\<sharp> \\<alpha>\"\n  and     \"bn \\<alpha> \\<sharp>* subject \\<alpha>\"\n  and     \"distinct(bn \\<alpha>)\"\n\n  shows \"x \\<sharp> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "from PChain \\<open>x \\<sharp> P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> P", "have \"x \\<sharp> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. x \\<sharp> P''", "by(rule tauChainFresh)"], ["proof (state)\nthis:\n  x \\<sharp> P''\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "with P''Trans"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  x \\<sharp> P''", "show \"x \\<sharp> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  x \\<sharp> P''\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "using \\<open>x \\<sharp> \\<alpha>\\<close> \\<open>bn \\<alpha> \\<sharp>* subject \\<alpha>\\<close> \\<open>distinct(bn \\<alpha>)\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  x \\<sharp> P''\n  x \\<sharp> \\<alpha>\n  bn \\<alpha> \\<sharp>* subject \\<alpha>\n  distinct (bn \\<alpha>)\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "by(force intro: freeFreshDerivative)"], ["proof (state)\nthis:\n  x \\<sharp> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakFreshChainDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   yvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"yvec \\<sharp>* P\"\n  and     \"yvec \\<sharp>* \\<alpha>\"\n  and     \"bn \\<alpha> \\<sharp>* subject \\<alpha>\"\n  and     \"distinct(bn \\<alpha>)\"\n\n  shows \"yvec \\<sharp>* P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yvec \\<sharp>* P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n  yvec \\<sharp>* P\n  yvec \\<sharp>* \\<alpha>\n  bn \\<alpha> \\<sharp>* subject \\<alpha>\n  distinct (bn \\<alpha>)\n\ngoal (1 subgoal):\n 1. yvec \\<sharp>* P'", "by(induct yvec) (auto intro: weakFreshDerivative)"], ["", "lemma weakInputFreshDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   x    :: name\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     \"x \\<sharp> P\"\n  and     \"x \\<sharp> N\"\n\n  shows \"x \\<sharp> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>N\\<rparr> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "from PChain \\<open>x \\<sharp> P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> P", "have \"x \\<sharp> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. x \\<sharp> P''", "by(rule tauChainFresh)"], ["proof (state)\nthis:\n  x \\<sharp> P''\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "with P''Trans"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  x \\<sharp> P''", "show \"x \\<sharp> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  x \\<sharp> P''\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "using \\<open>x \\<sharp> N\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  x \\<sharp> P''\n  x \\<sharp> N\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "by(force intro: inputFreshDerivative)"], ["proof (state)\nthis:\n  x \\<sharp> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakInputFreshChainDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   xvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     \"xvec \\<sharp>* P\"\n  and     \"xvec \\<sharp>* N\"\n\n  shows \"xvec \\<sharp>* P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xvec \\<sharp>* P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\n  xvec \\<sharp>* P\n  xvec \\<sharp>* N\n\ngoal (1 subgoal):\n 1. xvec \\<sharp>* P'", "by(induct xvec) (auto intro: weakInputFreshDerivative)"], ["", "lemma weakOutputFreshDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   x    :: name\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     \"x \\<sharp> P\"\n  and     \"x \\<sharp> xvec\"\n  and     \"xvec \\<sharp>* M\"\n  and     \"distinct xvec\"\n\n  shows \"x \\<sharp> N\"\n  and   \"x \\<sharp> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> N &&& x \\<sharp> P'", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<sharp> N\n 2. x \\<sharp> P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (2 subgoals):\n 1. x \\<sharp> N\n 2. x \\<sharp> P'", "from PChain \\<open>x \\<sharp> P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> P", "have \"x \\<sharp> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. x \\<sharp> P''", "by(rule tauChainFresh)"], ["proof (state)\nthis:\n  x \\<sharp> P''\n\ngoal (2 subgoals):\n 1. x \\<sharp> N\n 2. x \\<sharp> P'", "with P''Trans"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  x \\<sharp> P''", "show \"x \\<sharp> N\" and \"x \\<sharp> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  x \\<sharp> P''\n\ngoal (1 subgoal):\n 1. x \\<sharp> N &&& x \\<sharp> P'", "using \\<open>x \\<sharp> xvec\\<close> \\<open>xvec \\<sharp>* M\\<close> \\<open>distinct xvec\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  x \\<sharp> P''\n  x \\<sharp> xvec\n  xvec \\<sharp>* M\n  distinct xvec\n\ngoal (1 subgoal):\n 1. x \\<sharp> N &&& x \\<sharp> P'", "by(force intro: outputFreshDerivative)+"], ["proof (state)\nthis:\n  x \\<sharp> N\n  x \\<sharp> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakOutputFreshChainDerivative:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   yvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     \"yvec \\<sharp>* P\"\n  and     \"xvec \\<sharp>* yvec\"\n  and     \"xvec \\<sharp>* M\"\n  and     \"distinct xvec\"\n\n  shows \"yvec \\<sharp>* N\"\n  and   \"yvec \\<sharp>* P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yvec \\<sharp>* N &&& yvec \\<sharp>* P'", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. yvec \\<sharp>* N\n 2. yvec \\<sharp>* P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (2 subgoals):\n 1. yvec \\<sharp>* N\n 2. yvec \\<sharp>* P'", "from PChain \\<open>yvec \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  yvec \\<sharp>* P", "have \"yvec \\<sharp>* P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  yvec \\<sharp>* P\n\ngoal (1 subgoal):\n 1. yvec \\<sharp>* P''", "by(rule tauChainFreshChain)"], ["proof (state)\nthis:\n  yvec \\<sharp>* P''\n\ngoal (2 subgoals):\n 1. yvec \\<sharp>* N\n 2. yvec \\<sharp>* P'", "with P''Trans"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  yvec \\<sharp>* P''", "show \"yvec \\<sharp>* N\" and \"yvec \\<sharp>* P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  yvec \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. yvec \\<sharp>* N &&& yvec \\<sharp>* P'", "using \\<open>xvec \\<sharp>* yvec\\<close> \\<open>xvec \\<sharp>* M\\<close> \\<open>distinct xvec\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  yvec \\<sharp>* P''\n  xvec \\<sharp>* yvec\n  xvec \\<sharp>* M\n  distinct xvec\n\ngoal (1 subgoal):\n 1. yvec \\<sharp>* N &&& yvec \\<sharp>* P'", "by(force intro: outputFreshChainDerivative)+"], ["proof (state)\nthis:\n  yvec \\<sharp>* N\n  yvec \\<sharp>* P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakOutputPermSubject:\n  fixes \\<Psi>   :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   p    :: \"name prm\"\n  and   yvec :: \"name list\"\n  and   zvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     S: \"set p \\<subseteq> set yvec \\<times> set zvec\"\n  and     \"yvec \\<sharp>* \\<Psi>\"\n  and     \"zvec \\<sharp>* \\<Psi>\"\n  and     \"yvec \\<sharp>* P\"\n  and     \"zvec \\<sharp>* P\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet> M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and QeqP'': \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\" \n                            and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "from PChain \\<open>yvec \\<sharp>* P\\<close> \\<open>zvec \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  yvec \\<sharp>* P\n  zvec \\<sharp>* P", "have \"yvec \\<sharp>* P''\" and \"zvec \\<sharp>* P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  yvec \\<sharp>* P\n  zvec \\<sharp>* P\n\ngoal (1 subgoal):\n 1. yvec \\<sharp>* P'' &&& zvec \\<sharp>* P''", "by(force intro: tauChainFreshChain)+"], ["proof (state)\nthis:\n  yvec \\<sharp>* P''\n  zvec \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "note PChain QeqP''"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "from P''Trans S \\<open>yvec \\<sharp>* \\<Psi>\\<close> \\<open>zvec \\<sharp>* \\<Psi>\\<close> \\<open>yvec \\<sharp>* P''\\<close> \\<open>zvec \\<sharp>* P''\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  set p \\<subseteq> set yvec \\<times> set zvec\n  yvec \\<sharp>* \\<Psi>\n  zvec \\<sharp>* \\<Psi>\n  yvec \\<sharp>* P''\n  zvec \\<sharp>* P''", "have \"\\<Psi> \\<rhd> P'' \\<longmapsto>(p \\<bullet> M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  set p \\<subseteq> set yvec \\<times> set zvec\n  yvec \\<sharp>* \\<Psi>\n  zvec \\<sharp>* \\<Psi>\n  yvec \\<sharp>* P''\n  zvec \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P'' \\<longmapsto> (p \\<bullet>\n                                     M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "by(rule_tac outputPermSubject) (assumption | auto)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> (p \\<bullet>\n                                   M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> (p \\<bullet>\n                                   M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> (p \\<bullet>\n                                   M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n  M)\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakInputPermSubject:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   p    :: \"name prm\"\n  and   yvec :: \"name list\"\n  and   zvec :: \"name list\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     S: \"set p \\<subseteq> set yvec \\<times> set zvec\"\n  and     \"yvec \\<sharp>* \\<Psi>\"\n  and     \"zvec \\<sharp>* \\<Psi>\"\n  and     \"yvec \\<sharp>* P\"\n  and     \"zvec \\<sharp>* P\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet> M)\\<lparr>N\\<rparr> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>N\\<rparr> \\<prec> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>N\\<rparr> \\<prec> P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and QeqP'': \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\" \n                            and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>N\\<rparr> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>N\\<rparr> \\<prec> P'", "from PChain \\<open>yvec \\<sharp>* P\\<close> \\<open>zvec \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  yvec \\<sharp>* P\n  zvec \\<sharp>* P", "have \"yvec \\<sharp>* P''\" and \"zvec \\<sharp>* P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  yvec \\<sharp>* P\n  zvec \\<sharp>* P\n\ngoal (1 subgoal):\n 1. yvec \\<sharp>* P'' &&& zvec \\<sharp>* P''", "by(force intro: tauChainFreshChain)+"], ["proof (state)\nthis:\n  yvec \\<sharp>* P''\n  zvec \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>N\\<rparr> \\<prec> P'", "note PChain QeqP''"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>N\\<rparr> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>N\\<rparr> \\<prec> P'", "from P''Trans S \\<open>yvec \\<sharp>* \\<Psi>\\<close> \\<open>zvec \\<sharp>* \\<Psi>\\<close> \\<open>yvec \\<sharp>* P''\\<close> \\<open>zvec \\<sharp>* P''\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  set p \\<subseteq> set yvec \\<times> set zvec\n  yvec \\<sharp>* \\<Psi>\n  zvec \\<sharp>* \\<Psi>\n  yvec \\<sharp>* P''\n  zvec \\<sharp>* P''", "have \"\\<Psi> \\<rhd> P'' \\<longmapsto>(p \\<bullet> M)\\<lparr>N\\<rparr> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  set p \\<subseteq> set yvec \\<times> set zvec\n  yvec \\<sharp>* \\<Psi>\n  zvec \\<sharp>* \\<Psi>\n  yvec \\<sharp>* P''\n  zvec \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P'' \\<longmapsto> (p \\<bullet>\n                                     M)\\<lparr>N\\<rparr> \\<prec> P'", "by(rule_tac inputPermSubject) auto"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> (p \\<bullet>\n                                   M)\\<lparr>N\\<rparr> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>N\\<rparr> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> (p \\<bullet>\n                                   M)\\<lparr>N\\<rparr> \\<prec> P'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> (p \\<bullet>\n                                   M)\\<lparr>N\\<rparr> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n    M)\\<lparr>N\\<rparr> \\<prec> P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>(p \\<bullet>\n  M)\\<lparr>N\\<rparr> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakInput:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   K    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   Tvec :: \"'a list\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<turnstile> M \\<leftrightarrow> K\"\n  and     \"distinct xvec\" \n  and     \"set xvec \\<subseteq> supp N\"\n  and     \"length xvec = length Tvec\"\n  and     Qeq\\<Psi>: \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes> \\<one>\\<rangle>\"\n\n  shows \"\\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>(N[xvec::=Tvec])\\<rparr> \\<prec> P[xvec::=Tvec]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "have \"\\<Psi> \\<rhd>  M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "from Qeq\\<Psi>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n                   \\<one>\\<rangle>", "have \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame(M\\<lparr>\\<lambda>*xvec N\\<rparr>.P)) \\<Psi>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n                   \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame Q)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (M\\<lparr>\\<lambda>*xvec N\\<rparr>.P)) \\<Psi>", "by auto"], ["proof (state)\nthis:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (M\\<lparr>\\<lambda>*xvec N\\<rparr>.P))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (M\\<lparr>\\<lambda>*xvec N\\<rparr>.P))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "from assms"], ["proof (chain)\npicking this:\n  \\<Psi> \\<turnstile> M \\<leftrightarrow> K\n  distinct xvec\n  set xvec \\<subseteq> supp N\n  length xvec = length Tvec\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n                   \\<one>\\<rangle>", "have \"\\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<longmapsto>K\\<lparr>(N[xvec::=Tvec])\\<rparr> \\<prec> P[xvec::=Tvec]\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<turnstile> M \\<leftrightarrow> K\n  distinct xvec\n  set xvec \\<subseteq> supp N\n  length xvec = length Tvec\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n                   \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<longmapsto> K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "by(rule_tac Input)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<longmapsto> K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (M\\<lparr>\\<lambda>*xvec N\\<rparr>.P))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<longmapsto> K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (M\\<lparr>\\<lambda>*xvec N\\<rparr>.P))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<longmapsto> K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : Q \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<Longrightarrow>K\\<lparr>N[xvec::=Tvec]\\<rparr> \\<prec> P[xvec::=Tvec]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakOutput:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   K    :: 'a\n  and   N    :: 'a\n  and   P    :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<turnstile> M \\<leftrightarrow> K\"\n  and     Qeq\\<Psi>: \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes> \\<one>\\<rangle>\"\n\n  shows \"\\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "have \"\\<Psi> \\<rhd>  M\\<langle>N\\<rangle>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<langle>N\\<rangle>.P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<langle>N\\<rangle>.P", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<langle>N\\<rangle>.P\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<langle>N\\<rangle>.P\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "from Qeq\\<Psi>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n                   \\<one>\\<rangle>", "have \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame(M\\<langle>N\\<rangle>.P)) \\<Psi>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n                   \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame Q)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (M\\<langle>N\\<rangle>.P)) \\<Psi>", "by auto"], ["proof (state)\nthis:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (M\\<langle>N\\<rangle>.P))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (M\\<langle>N\\<rangle>.P))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "have \"insertAssertion (extractFrame(M\\<langle>N\\<rangle>.P)) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame(M\\<langle>N\\<rangle>.P)) \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (M\\<langle>N\\<rangle>.P))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (M\\<langle>N\\<rangle>.P)) \\<Psi>", "by simp"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (M\\<langle>N\\<rangle>.P))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (M\\<langle>N\\<rangle>.P))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (M\\<langle>N\\<rangle>.P))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (M\\<langle>N\\<rangle>.P))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "from \\<open>\\<Psi> \\<turnstile> M \\<leftrightarrow> K\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<turnstile> M \\<leftrightarrow> K", "have \"\\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<longmapsto>K\\<langle>N\\<rangle> \\<prec> P\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<turnstile> M \\<leftrightarrow> K\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<longmapsto> K\\<langle>N\\<rangle> \\<prec> P", "by(rule Output)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<longmapsto> K\\<langle>N\\<rangle> \\<prec> P\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<langle>N\\<rangle>.P\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (M\\<langle>N\\<rangle>.P))\n                                     \\<Psi>\n  insertAssertion (extractFrame (M\\<langle>N\\<rangle>.P))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (M\\<langle>N\\<rangle>.P))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<longmapsto> K\\<langle>N\\<rangle> \\<prec> P", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> M\\<langle>N\\<rangle>.P\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (M\\<langle>N\\<rangle>.P))\n                                     \\<Psi>\n  insertAssertion (extractFrame (M\\<langle>N\\<rangle>.P))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (M\\<langle>N\\<rangle>.P))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> M\\<langle>N\\<rangle>.P \\<longmapsto> K\\<langle>N\\<rangle> \\<prec> P\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P", "by(rule_tac weakTransitionI) auto"], ["proof (state)\nthis:\n  \\<Psi> : Q \\<rhd> M\\<langle>N\\<rangle>.P \\<Longrightarrow>K\\<langle>N\\<rangle> \\<prec> P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma insertGuardedAssertion:\n  fixes P :: \"('a, 'b, 'c) psi\"\n\n  assumes \"guarded P\"\n\n  shows \"insertAssertion(extractFrame P) \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes> \\<one>\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n            \\<one>\\<rangle>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n            \\<one>\\<rangle>", "obtain A\\<^sub>P \\<Psi>\\<^sub>P where FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\" and \"A\\<^sub>P \\<sharp>* \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P \\<Psi>\\<^sub>P.\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>P \\<sharp>* \\<Psi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule freshFrame)"], ["proof (state)\nthis:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n            \\<one>\\<rangle>", "from \\<open>guarded P\\<close> FrP"], ["proof (chain)\npicking this:\n  guarded P\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>", "have \"\\<Psi>\\<^sub>P \\<simeq> \\<one>\" and \"supp \\<Psi>\\<^sub>P = ({}::name set)\""], ["proof (prove)\nusing this:\n  guarded P\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>P \\<simeq> \\<one> &&& supp \\<Psi>\\<^sub>P = {}", "by(blast dest: guardedStatEq)+"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>\n  supp \\<Psi>\\<^sub>P = {}\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n            \\<one>\\<rangle>", "from FrP \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<close> \\<open>\\<Psi>\\<^sub>P \\<simeq> \\<one>\\<close>"], ["proof (chain)\npicking this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>", "have \"insertAssertion(extractFrame P) \\<Psi> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes> \\<one>\\<rangle>\""], ["proof (prove)\nusing this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n           \\<one>\\<rangle>", "by simp (metis frameIntCompositionSym)"], ["proof (state)\nthis:\n  insertAssertion (extractFrame P)\n   \\<Psi> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n         \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n            \\<one>\\<rangle>", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame P)\n   \\<Psi> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n         \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n            \\<one>\\<rangle>", "from \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<close>"], ["proof (chain)\npicking this:\n  A\\<^sub>P \\<sharp>* \\<Psi>", "have \"\\<langle>A\\<^sub>P, \\<Psi> \\<otimes> \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes> \\<one>\\<rangle>\""], ["proof (prove)\nusing this:\n  A\\<^sub>P \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                        \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n  \\<one>\\<rangle>", "by(rule_tac frameResFreshChain) auto"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n            \\<one>\\<rangle>", "ultimately"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame P)\n   \\<Psi> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n         \\<one>\\<rangle>\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame P)\n   \\<Psi> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n         \\<one>\\<rangle>\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n            \\<one>\\<rangle>", "by(rule FrameStatEqTrans)"], ["proof (state)\nthis:\n  insertAssertion (extractFrame P)\n   \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n          \\<one>\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakCase:\n  fixes \\<Psi>   :: 'b \n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   R    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"(\\<phi>, P) mem CsP\"\n  and     \"\\<Psi> \\<turnstile> \\<phi>\"\n  and     \"guarded P\"\n  and     RImpQ: \"insertAssertion (extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame Q) \\<Psi>\"\n  and     ImpR: \"insertAssertion (extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\"\n\n  shows \"\\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\"\n                           and QeqP'': \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n                           and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "proof(case_tac \"P = P''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P = P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "assume \"P = P''\""], ["proof (state)\nthis:\n  P = P''\n\ngoal (2 subgoals):\n 1. P = P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "have \"\\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Cases CsP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Cases CsP", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Cases CsP\n\ngoal (2 subgoals):\n 1. P = P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Cases CsP\n\ngoal (2 subgoals):\n 1. P = P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "from ImpR AssertionStatEq_def"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\n  ?\\<Psi> \\<simeq> ?\\<Psi>' \\<equiv>\n  ?\\<Psi> \\<hookrightarrow> ?\\<Psi>' \\<and>\n  ?\\<Psi>' \\<hookrightarrow> ?\\<Psi>", "have \"insertAssertion(extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion(extractFrame(Cases CsP)) \\<Psi>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\n  ?\\<Psi> \\<simeq> ?\\<Psi>' \\<equiv>\n  ?\\<Psi> \\<hookrightarrow> ?\\<Psi>' \\<and>\n  ?\\<Psi>' \\<hookrightarrow> ?\\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame R)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (Cases CsP)) \\<Psi>", "by(rule_tac FrameStatImpTrans) (auto intro: Identity)+"], ["proof (state)\nthis:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (Cases CsP)) \\<Psi>\n\ngoal (2 subgoals):\n 1. P = P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (Cases CsP)) \\<Psi>\n\ngoal (2 subgoals):\n 1. P = P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "from P''Trans \\<open>(\\<phi>, P) mem CsP\\<close> \\<open>\\<Psi> \\<turnstile> \\<phi>\\<close> \\<open>guarded P\\<close> \\<open>P = P''\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  (\\<phi>, P) mem CsP\n  \\<Psi> \\<turnstile> \\<phi>\n  guarded P\n  P = P''", "have \"\\<Psi> \\<rhd> Cases CsP \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  (\\<phi>, P) mem CsP\n  \\<Psi> \\<turnstile> \\<phi>\n  guarded P\n  P = P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Cases CsP \\<longmapsto> \\<alpha> \\<prec> P'", "by(blast intro: Case)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> Cases CsP \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (2 subgoals):\n 1. P = P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Cases CsP\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (Cases CsP)) \\<Psi>\n  \\<Psi> \\<rhd> Cases CsP \\<longmapsto> \\<alpha> \\<prec> P'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Cases CsP\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (Cases CsP)) \\<Psi>\n  \\<Psi> \\<rhd> Cases CsP \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "assume \"P \\<noteq> P''\""], ["proof (state)\nthis:\n  P \\<noteq> P''\n\ngoal (1 subgoal):\n 1. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "with PChain"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  P \\<noteq> P''", "have \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  P \\<noteq> P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P''", "by(simp add: rtrancl_eq_or_trancl)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "hence \"\\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sub>\\<tau> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sub>\\<tau> P''", "using \\<open>(\\<phi>, P) mem CsP\\<close> \\<open>\\<Psi> \\<turnstile> \\<phi>\\<close> \\<open>guarded P\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P''\n  (\\<phi>, P) mem CsP\n  \\<Psi> \\<turnstile> \\<phi>\n  guarded P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sub>\\<tau> P''", "by(rule tauStepChainCase)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "hence \"\\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "from RImpQ QeqP''"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame Q) \\<Psi>\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>", "have \"insertAssertion(extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion(extractFrame P'') \\<Psi>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame Q) \\<Psi>\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame R)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n \\<Psi>", "by(rule FrameStatImpTrans)"], ["proof (state)\nthis:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. P \\<noteq> P'' \\<Longrightarrow>\n    \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "using P''Trans"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> Cases CsP \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Psi> : R \\<rhd> Cases CsP \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakOpen:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   yvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec@yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     \"x \\<in> supp N\"\n  and     \"x \\<sharp> \\<Psi>\"\n  and     \"x \\<sharp> M\"\n  and     \"x \\<sharp> xvec\"\n  and     \"x \\<sharp> yvec\"\n\n  shows \"\\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec@x#yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                         x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                         x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                 yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and QeqP'': \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n                           and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>M\\<lparr>\\<nu>*(xvec@yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                 yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(xvec @\n                   yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(xvec @\n            yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                         x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "from PChain \\<open>x \\<sharp> \\<Psi>\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> \\<Psi>", "have \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''", "by(rule tauChainResPres)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                         x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                         x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "from QeqP'' \\<open>x \\<sharp> \\<Psi>\\<close>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  x \\<sharp> \\<Psi>", "have \"insertAssertion (extractFrame(\\<lparr>\\<nu>x\\<rparr>Q)) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame(\\<lparr>\\<nu>x\\<rparr>P'')) \\<Psi>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  x \\<sharp> \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (\\<lparr>\\<nu>x\\<rparr>P'')) \\<Psi>", "by(force intro: frameImpResPres)"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (\\<lparr>\\<nu>x\\<rparr>P''))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                         x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (\\<lparr>\\<nu>x\\<rparr>P''))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                         x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "from P''Trans \\<open>x \\<in> supp N\\<close> \\<open>x \\<sharp> \\<Psi>\\<close> \\<open>x \\<sharp> M\\<close> \\<open>x \\<sharp> xvec\\<close> \\<open>x \\<sharp> yvec\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(xvec @\n            yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  x \\<in> supp N\n  x \\<sharp> \\<Psi>\n  x \\<sharp> M\n  x \\<sharp> xvec\n  x \\<sharp> yvec", "have \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto>M\\<lparr>\\<nu>*(xvec@x#yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*(xvec @\n            yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  x \\<in> supp N\n  x \\<sharp> \\<Psi>\n  x \\<sharp> M\n  x \\<sharp> xvec\n  x \\<sharp> yvec\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto> M\\<lparr>\\<nu>*(xvec @\n                                    x #\n                                    yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "by(rule Open)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto> M\\<lparr>\\<nu>*(xvec @\n                                  x #\n                                  yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                         x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\n  insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (\\<lparr>\\<nu>x\\<rparr>P''))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto> M\\<lparr>\\<nu>*(xvec @\n                                  x #\n                                  yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\n  insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (\\<lparr>\\<nu>x\\<rparr>P''))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto> M\\<lparr>\\<nu>*(xvec @\n                                  x #\n                                  yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                         x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>M\\<lparr>\\<nu>*(xvec @\n                       x # yvec)\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakScope:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"x \\<sharp> \\<Psi>\"\n  and     \"x \\<sharp> \\<alpha>\"\n\n  shows \"\\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\" and QeqP'': \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n                           and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "from PChain \\<open>x \\<sharp> \\<Psi>\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> \\<Psi>", "have \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  x \\<sharp> \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''", "by(rule tauChainResPres)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "from QeqP'' \\<open>x \\<sharp> \\<Psi>\\<close>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  x \\<sharp> \\<Psi>", "have \"insertAssertion (extractFrame(\\<lparr>\\<nu>x\\<rparr>Q)) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame(\\<lparr>\\<nu>x\\<rparr>P'')) \\<Psi>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  x \\<sharp> \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (\\<lparr>\\<nu>x\\<rparr>P'')) \\<Psi>", "by(force intro: frameImpResPres)"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (\\<lparr>\\<nu>x\\<rparr>P''))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (\\<lparr>\\<nu>x\\<rparr>P''))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "from P''Trans \\<open>x \\<sharp> \\<Psi>\\<close> \\<open>x \\<sharp> \\<alpha>\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  x \\<sharp> \\<Psi>\n  x \\<sharp> \\<alpha>", "have \"\\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  x \\<sharp> \\<Psi>\n  x \\<sharp> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto> \\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "by(rule Scope)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto> \\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\n  insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (\\<lparr>\\<nu>x\\<rparr>P''))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto> \\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> \\<lparr>\\<nu>x\\<rparr>P''\n  insertAssertion (extractFrame (\\<lparr>\\<nu>x\\<rparr>Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame\n (\\<lparr>\\<nu>x\\<rparr>P''))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P'' \\<longmapsto> \\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : \\<lparr>\\<nu>x\\<rparr>Q \\<rhd> \\<lparr>\\<nu>x\\<rparr>P \\<Longrightarrow>\\<alpha> \\<prec> \\<lparr>\\<nu>x\\<rparr>P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakPar1:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q   :: \"name list\"\n  and   \\<Psi>\\<^sub>Q   :: 'b\n\n  assumes PTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     FrQ: \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     \"bn \\<alpha> \\<sharp>* Q\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<alpha>\"\n  and     \"A\\<^sub>Q \\<sharp>* R\"\n\n  shows \"\\<Psi> : R \\<parallel> Q \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\"\n                           and ReqP'': \"insertAssertion (extractFrame R) (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\"\n                           and P''Trans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame R)\n          (\\<Psi> \\<otimes>\n           \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n                (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q);\n         \\<Psi> \\<otimes>\n         \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "from PChain \\<open>A\\<^sub>Q \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  A\\<^sub>Q \\<sharp>* P", "have \"A\\<^sub>Q \\<sharp>* P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  A\\<^sub>Q \\<sharp>* P\n\ngoal (1 subgoal):\n 1. A\\<^sub>Q \\<sharp>* P''", "by(rule tauChainFreshChain)"], ["proof (state)\nthis:\n  A\\<^sub>Q \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "from PChain FrQ \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P", "have \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q", "by(rule tauChainPar1)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "have \"insertAssertion (extractFrame(R \\<parallel> Q)) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame(P'' \\<parallel> Q)) \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "obtain A\\<^sub>R \\<Psi>\\<^sub>R where FrR: \"extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\" and \"A\\<^sub>R \\<sharp>* A\\<^sub>Q\" and \"A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\" and \"A\\<^sub>R \\<sharp>* \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>R \\<Psi>\\<^sub>R.\n        \\<lbrakk>extractFrame R =\n                 \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>;\n         A\\<^sub>R \\<sharp>* A\\<^sub>Q; A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q;\n         A\\<^sub>R \\<sharp>* \\<Psi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(A\\<^sub>Q, \\<Psi>\\<^sub>Q, \\<Psi>)\" in freshFrame) auto"], ["proof (state)\nthis:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "obtain A\\<^sub>P'' \\<Psi>\\<^sub>P'' where FrP'': \"extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\" and \"A\\<^sub>P'' \\<sharp>* A\\<^sub>Q\" and \"A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\" and \"A\\<^sub>P'' \\<sharp>* \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P'' \\<Psi>\\<^sub>P''.\n        \\<lbrakk>extractFrame P'' =\n                 \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>;\n         A\\<^sub>P'' \\<sharp>* A\\<^sub>Q;\n         A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q;\n         A\\<^sub>P'' \\<sharp>* \\<Psi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(A\\<^sub>Q, \\<Psi>\\<^sub>Q, \\<Psi>)\" in freshFrame) auto"], ["proof (state)\nthis:\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "from FrR FrP'' \\<open>A\\<^sub>Q \\<sharp>* R\\<close> \\<open>A\\<^sub>Q \\<sharp>* P''\\<close> \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q\\<close> \\<open>A\\<^sub>P'' \\<sharp>* A\\<^sub>Q\\<close>"], ["proof (chain)\npicking this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>Q \\<sharp>* P''\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q", "have \"A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>R\" and \"A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>P''\""], ["proof (prove)\nusing this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>Q \\<sharp>* P''\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q\n\ngoal (1 subgoal):\n 1. A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>R &&&\n    A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>P''", "by(force dest: extractFrameFreshChain)+"], ["proof (state)\nthis:\n  A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>R\n  A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>P''\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "have \"\\<langle>A\\<^sub>R, \\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>R\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>R \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n          \\<Psi>\\<^sub>Q) \\<otimes>\n         \\<Psi>\\<^sub>R\\<rangle>", "by(metis frameNilStatEq frameResChainPres Associativity Commutativity Composition AssertionStatEqTrans)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>R \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>R \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "from ReqP'' FrR FrP'' \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\\<close>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q", "have \"\\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>P''\\<rangle>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>Q) \\<otimes>\n                    \\<Psi>\\<^sub>P''\\<rangle>", "using freshCompChain"], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  \\<lbrakk>?xvec \\<sharp>* ?\\<Psi>; ?xvec \\<sharp>* ?\\<Psi>'\\<rbrakk>\n  \\<Longrightarrow> ?xvec \\<sharp>* (?\\<Psi> \\<otimes> ?\\<Psi>')\n  \\<lbrakk>?Xs \\<sharp>* ?\\<Psi>; ?Xs \\<sharp>* ?\\<Psi>'\\<rbrakk>\n  \\<Longrightarrow> ?Xs \\<sharp>* (?\\<Psi> \\<otimes> ?\\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>Q) \\<otimes>\n                    \\<Psi>\\<^sub>P''\\<rangle>", "by auto"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "have \"\\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes> \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                          \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes>\n               \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>", "by(metis frameNilStatEq frameResChainPres Associativity Commutativity Composition AssertionStatEqTrans)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes>\n             \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>R \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n  \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes>\n             \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>", "have \"\\<langle>A\\<^sub>R, \\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes> \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>R \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n  \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes>\n             \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>R \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes>\n                    \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>", "by(force dest: FrameStatImpTrans simp add: FrameStatEq_def)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>R \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes>\n                  \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "hence \"\\<langle>(A\\<^sub>R@A\\<^sub>Q), \\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P''@A\\<^sub>Q), \\<Psi> \\<otimes> \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>R \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes>\n                  \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>(A\\<^sub>R @\n              A\\<^sub>Q), \\<Psi> \\<otimes>\n                          \\<Psi>\\<^sub>R \\<otimes>\n                          \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P'' @\n          A\\<^sub>Q), \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>", "apply(simp add: frameChainAppend)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>R \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', \\<Psi> \\<otimes>\n                    \\<Psi>\\<^sub>P'' \\<otimes>\n                    \\<Psi>\\<^sub>Q\\<rangle> \\<Longrightarrow>\n    \\<lparr>\\<nu>*A\\<^sub>R\\<rparr>\\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>R \\<otimes>\n                 \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<lparr>\\<nu>*A\\<^sub>P''\\<rparr>\\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n      \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>", "apply(drule_tac xvec=A\\<^sub>Q in frameImpResChainPres)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>*A\\<^sub>Q\\<rparr>\\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>R \\<otimes>\n                 \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<lparr>\\<nu>*A\\<^sub>Q\\<rparr>\\<langle>A\\<^sub>P'', \\<Psi> \\<otimes>\n      \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle> \\<Longrightarrow>\n    \\<lparr>\\<nu>*A\\<^sub>R\\<rparr>\\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>R \\<otimes>\n                 \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<lparr>\\<nu>*A\\<^sub>P''\\<rparr>\\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n      \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>", "by(metis frameImpChainComm FrameStatImpTrans)"], ["proof (state)\nthis:\n  \\<langle>(A\\<^sub>R @\n            A\\<^sub>Q), \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>R \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P'' @\n        A\\<^sub>Q), \\<Psi> \\<otimes>\n                    \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "with FrR FrQ FrP'' \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\\<close> \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>R\\<close> \\<open>A\\<^sub>P'' \\<sharp>* A\\<^sub>Q\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\\<close> \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>P''\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<close> ReqP''"], ["proof (chain)\npicking this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>R\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>P''\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  \\<langle>(A\\<^sub>R @\n            A\\<^sub>Q), \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>R \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P'' @\n        A\\<^sub>Q), \\<Psi> \\<otimes>\n                    \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>R\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>Q \\<sharp>* \\<Psi>\\<^sub>P''\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  \\<langle>(A\\<^sub>R @\n            A\\<^sub>Q), \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>R \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P'' @\n        A\\<^sub>Q), \\<Psi> \\<otimes>\n                    \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (R \\<parallel> Q))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P'' \\<parallel> Q)) \\<Psi>", "by simp"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (R \\<parallel> Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P'' \\<parallel> Q))\n                                     \\<Psi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (R \\<parallel> Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P'' \\<parallel> Q))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (R \\<parallel> Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P'' \\<parallel> Q))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "from P''Trans FrQ \\<open>bn \\<alpha> \\<sharp>* Q\\<close> \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q \\<sharp>* P''\\<close> \\<open>A\\<^sub>Q \\<sharp>* \\<alpha>\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  bn \\<alpha> \\<sharp>* Q\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P''\n  A\\<^sub>Q \\<sharp>* \\<alpha>", "have \"\\<Psi> \\<rhd> P'' \\<parallel> Q \\<longmapsto>\\<alpha> \\<prec> (P' \\<parallel> Q)\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  bn \\<alpha> \\<sharp>* Q\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P''\n  A\\<^sub>Q \\<sharp>* \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P'' \\<parallel>\n                  Q \\<longmapsto> \\<alpha> \\<prec> P' \\<parallel> Q", "by(rule Par1)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P'' \\<parallel>\n                Q \\<longmapsto> \\<alpha> \\<prec> P' \\<parallel> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n  insertAssertion (extractFrame (R \\<parallel> Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P'' \\<parallel> Q))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<parallel>\n                Q \\<longmapsto> \\<alpha> \\<prec> P' \\<parallel> Q", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n  insertAssertion (extractFrame (R \\<parallel> Q))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P'' \\<parallel> Q))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<parallel>\n                Q \\<longmapsto> \\<alpha> \\<prec> P' \\<parallel> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : R \\<parallel>\n           Q \\<rhd> P \\<parallel>\n                    Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakPar2:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   Q'   :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P   :: \"name list\"\n  and   \\<Psi>\\<^sub>P  :: 'b\n\n  assumes QTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P : R \\<rhd> Q \\<Longrightarrow>\\<alpha> \\<prec> Q'\"\n  and     FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"bn \\<alpha> \\<sharp>* P\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>P \\<sharp>* Q\"\n  and     \"A\\<^sub>P \\<sharp>* \\<alpha>\"\n  and     \"A\\<^sub>P \\<sharp>* R\"\n\n  shows \"\\<Psi> : P \\<parallel> R \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "from QTrans"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P : R \\<rhd> Q \\<Longrightarrow>\\<alpha> \\<prec> Q'", "obtain Q'' where QChain: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q''\"\n                           and ReqQ'': \"insertAssertion (extractFrame R) (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame Q'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P)\"\n                           and Q''Trans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<rhd> Q'' \\<longmapsto>\\<alpha> \\<prec> Q'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P : R \\<rhd> Q \\<Longrightarrow>\\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. (\\<And>Q''.\n        \\<lbrakk>\\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q'';\n         insertAssertion (extractFrame R)\n          (\\<Psi> \\<otimes>\n           \\<Psi>\\<^sub>P) \\<hookrightarrow>\\<^sub>F insertAssertion\n                (extractFrame Q'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P);\n         \\<Psi> \\<otimes>\n         \\<Psi>\\<^sub>P \\<rhd> Q'' \\<longmapsto> \\<alpha> \\<prec> Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q''\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>P) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame Q'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P)\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P \\<rhd> Q'' \\<longmapsto> \\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "from QChain \\<open>A\\<^sub>P \\<sharp>* Q\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q''\n  A\\<^sub>P \\<sharp>* Q", "have \"A\\<^sub>P \\<sharp>* Q''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q''\n  A\\<^sub>P \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. A\\<^sub>P \\<sharp>* Q''", "by(rule tauChainFreshChain)"], ["proof (state)\nthis:\n  A\\<^sub>P \\<sharp>* Q''\n\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "from QChain FrP \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P \\<sharp>* Q\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q''\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  A\\<^sub>P \\<sharp>* Q", "have \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P \\<rhd> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> Q''\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  A\\<^sub>P \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q''", "by(rule tauChainPar2)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q''\n\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q''\n\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "have \"insertAssertion (extractFrame(P \\<parallel> R)) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame(P \\<parallel> Q'')) \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "obtain A\\<^sub>R \\<Psi>\\<^sub>R where FrR: \"extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\" and \"A\\<^sub>R \\<sharp>* A\\<^sub>P\" and \"A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P\" and \"A\\<^sub>R \\<sharp>* \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>R \\<Psi>\\<^sub>R.\n        \\<lbrakk>extractFrame R =\n                 \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>;\n         A\\<^sub>R \\<sharp>* A\\<^sub>P; A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P;\n         A\\<^sub>R \\<sharp>* \\<Psi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(A\\<^sub>P, \\<Psi>\\<^sub>P, \\<Psi>)\" in freshFrame) auto"], ["proof (state)\nthis:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>P\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>R \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "obtain A\\<^sub>Q'' \\<Psi>\\<^sub>Q'' where FrQ'': \"extractFrame Q'' = \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>\" and \"A\\<^sub>Q'' \\<sharp>* A\\<^sub>P\" and \"A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P\" and \"A\\<^sub>Q'' \\<sharp>* \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>Q'' \\<Psi>\\<^sub>Q''.\n        \\<lbrakk>extractFrame Q'' =\n                 \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>;\n         A\\<^sub>Q'' \\<sharp>* A\\<^sub>P;\n         A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P;\n         A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(A\\<^sub>P, \\<Psi>\\<^sub>P, \\<Psi>)\" in freshFrame) auto"], ["proof (state)\nthis:\n  extractFrame Q'' = \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>\n  A\\<^sub>Q'' \\<sharp>* A\\<^sub>P\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "from FrR FrQ'' \\<open>A\\<^sub>P \\<sharp>* R\\<close> \\<open>A\\<^sub>P \\<sharp>* Q''\\<close> \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>P\\<close> \\<open>A\\<^sub>Q'' \\<sharp>* A\\<^sub>P\\<close>"], ["proof (chain)\npicking this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame Q'' = \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>\n  A\\<^sub>P \\<sharp>* R\n  A\\<^sub>P \\<sharp>* Q''\n  A\\<^sub>R \\<sharp>* A\\<^sub>P\n  A\\<^sub>Q'' \\<sharp>* A\\<^sub>P", "have \"A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>R\" and \"A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>Q''\""], ["proof (prove)\nusing this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame Q'' = \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>\n  A\\<^sub>P \\<sharp>* R\n  A\\<^sub>P \\<sharp>* Q''\n  A\\<^sub>R \\<sharp>* A\\<^sub>P\n  A\\<^sub>Q'' \\<sharp>* A\\<^sub>P\n\ngoal (1 subgoal):\n 1. A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>R &&&\n    A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>Q''", "by(force dest: extractFrameFreshChain)+"], ["proof (state)\nthis:\n  A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>R\n  A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>Q''\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "have \"\\<langle>A\\<^sub>R, \\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>R\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes> \\<Psi>\\<^sub>R\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n          \\<Psi>\\<^sub>P) \\<otimes>\n         \\<Psi>\\<^sub>R\\<rangle>", "by(metis frameNilStatEq frameResChainPres Associativity Commutativity Composition AssertionStatEqTrans)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>P) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>P) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "from ReqQ'' FrR FrQ'' \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P\\<close> \\<open>A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P\\<close>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>P) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame Q'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P)\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame Q'' = \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P", "have \"\\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes> \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>P) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame Q'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P)\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame Q'' = \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>P) \\<otimes>\n                    \\<Psi>\\<^sub>Q''\\<rangle>", "using freshCompChain"], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>P) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame Q'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P)\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame Q'' = \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P\n  \\<lbrakk>?xvec \\<sharp>* ?\\<Psi>; ?xvec \\<sharp>* ?\\<Psi>'\\<rbrakk>\n  \\<Longrightarrow> ?xvec \\<sharp>* (?\\<Psi> \\<otimes> ?\\<Psi>')\n  \\<lbrakk>?Xs \\<sharp>* ?\\<Psi>; ?Xs \\<sharp>* ?\\<Psi>'\\<rbrakk>\n  \\<Longrightarrow> ?Xs \\<sharp>* (?\\<Psi> \\<otimes> ?\\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>P) \\<otimes>\n                    \\<Psi>\\<^sub>Q''\\<rangle>", "by simp"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P) \\<otimes>\n                  \\<Psi>\\<^sub>Q''\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P) \\<otimes>\n                  \\<Psi>\\<^sub>Q''\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "have \"\\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                          \\<Psi>\\<^sub>Q''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n               \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>", "by(metis frameNilStatEq frameResChainPres Associativity Commutativity Composition AssertionStatEqTrans)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                        \\<Psi>\\<^sub>Q''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n             \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>P) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P) \\<otimes>\n                  \\<Psi>\\<^sub>Q''\\<rangle>\n  \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                        \\<Psi>\\<^sub>Q''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n             \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>", "have \"\\<langle>A\\<^sub>R, \\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>P) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P) \\<otimes>\n                  \\<Psi>\\<^sub>Q''\\<rangle>\n  \\<langle>A\\<^sub>Q'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P) \\<otimes>\n                        \\<Psi>\\<^sub>Q''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n             \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n                    \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>", "by(force dest: FrameStatImpTrans simp add: FrameStatEq_def)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n                  \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "hence \"\\<langle>(A\\<^sub>P@A\\<^sub>R), \\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P@A\\<^sub>Q''), \\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n                  \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>(A\\<^sub>P @\n              A\\<^sub>R), \\<Psi> \\<otimes>\n                          \\<Psi>\\<^sub>P \\<otimes>\n                          \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P @\n          A\\<^sub>Q''), \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>", "apply(simp add: frameChainAppend)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n                    \\<Psi>\\<^sub>P \\<otimes>\n                    \\<Psi>\\<^sub>Q''\\<rangle> \\<Longrightarrow>\n    \\<lparr>\\<nu>*A\\<^sub>P\\<rparr>\\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>P \\<otimes>\n                 \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<lparr>\\<nu>*A\\<^sub>P\\<rparr>\\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n      \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>", "apply(drule_tac xvec=A\\<^sub>P in frameImpResChainPres)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>*A\\<^sub>P\\<rparr>\\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>P \\<otimes>\n                 \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<lparr>\\<nu>*A\\<^sub>P\\<rparr>\\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n      \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle> \\<Longrightarrow>\n    \\<lparr>\\<nu>*A\\<^sub>P\\<rparr>\\<langle>A\\<^sub>R, \\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>P \\<otimes>\n                 \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<lparr>\\<nu>*A\\<^sub>P\\<rparr>\\<langle>A\\<^sub>Q'', \\<Psi> \\<otimes>\n      \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>", "by(metis frameImpChainComm FrameStatImpTrans)"], ["proof (state)\nthis:\n  \\<langle>(A\\<^sub>P @\n            A\\<^sub>R), \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P @\n        A\\<^sub>Q''), \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "with FrR FrP FrQ'' \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>P\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P\\<close> \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>R\\<close> \\<open>A\\<^sub>Q'' \\<sharp>* A\\<^sub>P\\<close> \\<open>A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P\\<close> \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>Q''\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<close> ReqQ''"], ["proof (chain)\npicking this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  extractFrame Q'' = \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>P\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>R\n  A\\<^sub>Q'' \\<sharp>* A\\<^sub>P\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>Q''\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>P) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame Q'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P)\n  \\<langle>(A\\<^sub>P @\n            A\\<^sub>R), \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P @\n        A\\<^sub>Q''), \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  extractFrame Q'' = \\<langle>A\\<^sub>Q'', \\<Psi>\\<^sub>Q''\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>P\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>R\n  A\\<^sub>Q'' \\<sharp>* A\\<^sub>P\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>Q''\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>Q'' \\<sharp>* \\<Psi>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>P) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame Q'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P)\n  \\<langle>(A\\<^sub>P @\n            A\\<^sub>R), \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(A\\<^sub>P @\n        A\\<^sub>Q''), \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes> \\<Psi>\\<^sub>Q''\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame (P \\<parallel> R))\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n (extractFrame (P \\<parallel> Q'')) \\<Psi>", "by simp"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (P \\<parallel> R))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P \\<parallel> Q''))\n                                     \\<Psi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (P \\<parallel> R))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P \\<parallel> Q''))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame (P \\<parallel> R))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P \\<parallel> Q''))\n                                     \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "from Q''Trans FrP \\<open>bn \\<alpha> \\<sharp>* P\\<close> \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P \\<sharp>* Q''\\<close> \\<open>A\\<^sub>P \\<sharp>* \\<alpha>\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P \\<rhd> Q'' \\<longmapsto> \\<alpha> \\<prec> Q'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  bn \\<alpha> \\<sharp>* P\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  A\\<^sub>P \\<sharp>* Q''\n  A\\<^sub>P \\<sharp>* \\<alpha>", "have \"\\<Psi> \\<rhd> P \\<parallel> Q'' \\<longmapsto>\\<alpha> \\<prec> (P \\<parallel> Q')\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P \\<rhd> Q'' \\<longmapsto> \\<alpha> \\<prec> Q'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  bn \\<alpha> \\<sharp>* P\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  A\\<^sub>P \\<sharp>* Q''\n  A\\<^sub>P \\<sharp>* \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q'' \\<longmapsto> \\<alpha> \\<prec> P \\<parallel> Q'", "by(rule_tac Par2) auto"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q'' \\<longmapsto> \\<alpha> \\<prec> P \\<parallel> Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q''\n  insertAssertion (extractFrame (P \\<parallel> R))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P \\<parallel> Q''))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q'' \\<longmapsto> \\<alpha> \\<prec> P \\<parallel> Q'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P \\<parallel> Q''\n  insertAssertion (extractFrame (P \\<parallel> R))\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (extractFrame (P \\<parallel> Q''))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q'' \\<longmapsto> \\<alpha> \\<prec> P \\<parallel> Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> : P \\<parallel>\n             R \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : P \\<parallel>\n           R \\<rhd> P \\<parallel>\n                    Q \\<Longrightarrow>\\<alpha> \\<prec> P \\<parallel> Q'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakComm1:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q   :: \"name list\"\n  and   \\<Psi>\\<^sub>Q   :: 'b\n\n  assumes PTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     FrR: \"extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\"\n  and     QTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<rhd> Q \\<longmapsto>K\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q'\"\n  and     FrQ: \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     MeqK: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K\"\n  and     \"A\\<^sub>R \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>R \\<sharp>* P\"\n  and     \"A\\<^sub>R \\<sharp>* Q\"\n  and     \"A\\<^sub>R \\<sharp>* R\"\n  and     \"A\\<^sub>R \\<sharp>* M\"\n  and     \"A\\<^sub>R \\<sharp>* A\\<^sub>Q\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n  and     \"A\\<^sub>Q \\<sharp>* Q\"\n  and     \"A\\<^sub>Q \\<sharp>* R\"\n  and     \"A\\<^sub>Q \\<sharp>* K\"\n  and     \"xvec \\<sharp>* P\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sub>\\<tau> (\\<lparr>\\<nu>*xvec\\<rparr>(P' \\<parallel> Q'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from \\<open>extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\\<close> \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q \\<sharp>* P\\<close> \\<open>A\\<^sub>Q \\<sharp>* Q\\<close> \\<open>A\\<^sub>Q \\<sharp>* R\\<close> \\<open>A\\<^sub>Q \\<sharp>* K\\<close> \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q\\<close>"], ["proof (chain)\npicking this:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P\n  A\\<^sub>Q \\<sharp>* Q\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>Q \\<sharp>* K\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q", "obtain A\\<^sub>Q' where FrQ': \"extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\" and \"distinct A\\<^sub>Q'\" and \"A\\<^sub>Q' \\<sharp>* \\<Psi>\" and \"A\\<^sub>Q' \\<sharp>* P\" \n               and \"A\\<^sub>Q' \\<sharp>* Q\" and \"A\\<^sub>Q' \\<sharp>* R\" and \"A\\<^sub>Q' \\<sharp>* K\" and \"A\\<^sub>R \\<sharp>* A\\<^sub>Q'\""], ["proof (prove)\nusing this:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P\n  A\\<^sub>Q \\<sharp>* Q\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>Q \\<sharp>* K\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q\n\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>Q'.\n        \\<lbrakk>extractFrame Q =\n                 \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>;\n         distinct A\\<^sub>Q'; A\\<^sub>Q' \\<sharp>* \\<Psi>;\n         A\\<^sub>Q' \\<sharp>* P; A\\<^sub>Q' \\<sharp>* Q;\n         A\\<^sub>Q' \\<sharp>* R; A\\<^sub>Q' \\<sharp>* K;\n         A\\<^sub>R \\<sharp>* A\\<^sub>Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(\\<Psi>, P, Q, R, K, A\\<^sub>R)\" in distinctFrame) auto"], ["proof (state)\nthis:\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  distinct A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P\n  A\\<^sub>Q' \\<sharp>* Q\n  A\\<^sub>Q' \\<sharp>* R\n  A\\<^sub>Q' \\<sharp>* K\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\"\n                           and RimpP'': \"insertAssertion (extractFrame R) (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\"\n                           and P''Trans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto>M\\<lparr>N\\<rparr> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>M\\<lparr>N\\<rparr> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame R)\n          (\\<Psi> \\<otimes>\n           \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n                (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q);\n         \\<Psi> \\<otimes>\n         \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from PChain \\<open>A\\<^sub>Q' \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  A\\<^sub>Q' \\<sharp>* P", "have \"A\\<^sub>Q' \\<sharp>* P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  A\\<^sub>Q' \\<sharp>* P\n\ngoal (1 subgoal):\n 1. A\\<^sub>Q' \\<sharp>* P''", "by(rule tauChainFreshChain)"], ["proof (state)\nthis:\n  A\\<^sub>Q' \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "obtain A\\<^sub>P'' \\<Psi>\\<^sub>P'' where FrP'': \"extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\" and \"A\\<^sub>P'' \\<sharp>* (\\<Psi>, A\\<^sub>Q', \\<Psi>\\<^sub>Q, A\\<^sub>R, \\<Psi>\\<^sub>R, M, N, K, R, Q, P'', xvec)\" and \"distinct A\\<^sub>P''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P'' \\<Psi>\\<^sub>P''.\n        \\<lbrakk>extractFrame P'' =\n                 \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>;\n         A\\<^sub>P'' \\<sharp>* (\\<Psi>, A\\<^sub>Q', \\<Psi>\\<^sub>Q,\n                                A\\<^sub>R, \\<Psi>\\<^sub>R, M, N, K, R, Q,\n                                P'', xvec);\n         distinct A\\<^sub>P''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule freshFrame)"], ["proof (state)\nthis:\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>P'' \\<sharp>* (\\<Psi>, A\\<^sub>Q', \\<Psi>\\<^sub>Q, A\\<^sub>R,\n                         \\<Psi>\\<^sub>R, M, N, K, R, Q, P'', xvec)\n  distinct A\\<^sub>P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "hence \"A\\<^sub>P'' \\<sharp>* \\<Psi>\" and \"A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\" and \"A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\" and \"A\\<^sub>P'' \\<sharp>* M\" and \"A\\<^sub>P'' \\<sharp>* R\" and \"A\\<^sub>P'' \\<sharp>* Q\"\n    and \"A\\<^sub>P'' \\<sharp>* N\" and \"A\\<^sub>P'' \\<sharp>* K\" and \"A\\<^sub>P'' \\<sharp>* A\\<^sub>R\" and \"A\\<^sub>P'' \\<sharp>* P''\" and \"A\\<^sub>P'' \\<sharp>* xvec\" and \"A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>R\""], ["proof (prove)\nusing this:\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>P'' \\<sharp>* (\\<Psi>, A\\<^sub>Q', \\<Psi>\\<^sub>Q, A\\<^sub>R,\n                         \\<Psi>\\<^sub>R, M, N, K, R, Q, P'', xvec)\n  distinct A\\<^sub>P''\n\ngoal (1 subgoal):\n 1. ((A\\<^sub>P'' \\<sharp>* \\<Psi> &&&\n      A\\<^sub>P'' \\<sharp>* A\\<^sub>Q' &&&\n      A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q) &&&\n     A\\<^sub>P'' \\<sharp>* M &&&\n     A\\<^sub>P'' \\<sharp>* R &&& A\\<^sub>P'' \\<sharp>* Q) &&&\n    (A\\<^sub>P'' \\<sharp>* N &&&\n     A\\<^sub>P'' \\<sharp>* K &&& A\\<^sub>P'' \\<sharp>* A\\<^sub>R) &&&\n    A\\<^sub>P'' \\<sharp>* P'' &&&\n    A\\<^sub>P'' \\<sharp>* xvec &&& A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>R", "by simp+"], ["proof (state)\nthis:\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* M\n  A\\<^sub>P'' \\<sharp>* R\n  A\\<^sub>P'' \\<sharp>* Q\n  A\\<^sub>P'' \\<sharp>* N\n  A\\<^sub>P'' \\<sharp>* K\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>R\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* xvec\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from FrR \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q'\\<close> \\<open>A\\<^sub>Q' \\<sharp>* R\\<close>"], ["proof (chain)\npicking this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* R", "have \"A\\<^sub>Q' \\<sharp>* \\<Psi>\\<^sub>R\""], ["proof (prove)\nusing this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* R\n\ngoal (1 subgoal):\n 1. A\\<^sub>Q' \\<sharp>* \\<Psi>\\<^sub>R", "by(drule_tac extractFrameFreshChain) auto"], ["proof (state)\nthis:\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from FrQ' \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q'\\<close> \\<open>A\\<^sub>R \\<sharp>* Q\\<close>"], ["proof (chain)\npicking this:\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>R \\<sharp>* Q", "have \"A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\""], ["proof (prove)\nusing this:\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>R \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q", "by(drule_tac extractFrameFreshChain) auto"], ["proof (state)\nthis:\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from PChain \\<open>xvec \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  xvec \\<sharp>* P", "have \"xvec \\<sharp>* P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  xvec \\<sharp>* P\n\ngoal (1 subgoal):\n 1. xvec \\<sharp>* P''", "by(force intro: tauChainFreshChain)+"], ["proof (state)\nthis:\n  xvec \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "have \"\\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes> \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>R\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n          \\<Psi>\\<^sub>Q) \\<otimes>\n         \\<Psi>\\<^sub>R\\<rangle>", "by(metis frameResChainPres frameNilStatEq Commutativity AssertionStatEqTrans Composition Associativity)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "with RimpP'' FrP'' FrR \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\\<close>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>", "have \"\\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>P''\\<rangle>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>Q) \\<otimes>\n                    \\<Psi>\\<^sub>P''\\<rangle>", "using freshCompChain"], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<lbrakk>?xvec \\<sharp>* ?\\<Psi>; ?xvec \\<sharp>* ?\\<Psi>'\\<rbrakk>\n  \\<Longrightarrow> ?xvec \\<sharp>* (?\\<Psi> \\<otimes> ?\\<Psi>')\n  \\<lbrakk>?Xs \\<sharp>* ?\\<Psi>; ?Xs \\<sharp>* ?\\<Psi>'\\<rbrakk>\n  \\<Longrightarrow> ?Xs \\<sharp>* (?\\<Psi> \\<otimes> ?\\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>Q) \\<otimes>\n                    \\<Psi>\\<^sub>P''\\<rangle>", "by(simp add: freshChainSimps)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "have \"\\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P'') \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                          \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                \\<Psi>\\<^sub>P'') \\<otimes>\n               \\<Psi>\\<^sub>Q\\<rangle>", "by(metis frameResChainPres frameNilStatEq Commutativity AssertionStatEqTrans Composition Associativity)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n              \\<Psi>\\<^sub>P'') \\<otimes>\n             \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n  \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n              \\<Psi>\\<^sub>P'') \\<otimes>\n             \\<Psi>\\<^sub>Q\\<rangle>", "have RImpP'': \"\\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes> \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P'') \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n  \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n              \\<Psi>\\<^sub>P'') \\<otimes>\n             \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>P'') \\<otimes>\n                    \\<Psi>\\<^sub>Q\\<rangle>", "by(rule FrameStatEqImpCompose)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P'') \\<otimes>\n                  \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from PChain FrQ' \\<open>A\\<^sub>Q' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q' \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P", "have \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q", "by(rule tauChainPar1)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from QTrans FrR P''Trans MeqK RImpP'' FrP'' FrQ' \\<open>distinct A\\<^sub>P''\\<close> \\<open>distinct A\\<^sub>Q'\\<close> \\<open>A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\\<close> \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q'\\<close>\n        \\<open>A\\<^sub>Q' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q' \\<sharp>* P''\\<close> \\<open>A\\<^sub>Q' \\<sharp>* Q\\<close> \\<open>A\\<^sub>Q' \\<sharp>* R\\<close> \\<open>A\\<^sub>Q' \\<sharp>* K\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P'' \\<sharp>* R\\<close> \\<open>A\\<^sub>P'' \\<sharp>* Q\\<close>\n        \\<open>A\\<^sub>P'' \\<sharp>* P''\\<close> \\<open>A\\<^sub>P'' \\<sharp>* M\\<close> \\<open>A\\<^sub>Q \\<sharp>* R\\<close> \\<open>A\\<^sub>R \\<sharp>* Q\\<close> \\<open>A\\<^sub>R \\<sharp>* M\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>R \\<rhd> Q \\<longmapsto> K\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q'\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P'') \\<otimes>\n                  \\<Psi>\\<^sub>Q\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  distinct A\\<^sub>P''\n  distinct A\\<^sub>Q'\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P''\n  A\\<^sub>Q' \\<sharp>* Q\n  A\\<^sub>Q' \\<sharp>* R\n  A\\<^sub>Q' \\<sharp>* K\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* R\n  A\\<^sub>P'' \\<sharp>* Q\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* M\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>R \\<sharp>* Q\n  A\\<^sub>R \\<sharp>* M", "obtain K' where \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto>K'\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q'\" and \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\" and \"A\\<^sub>Q' \\<sharp>* K'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>R \\<rhd> Q \\<longmapsto> K\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q'\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P'') \\<otimes>\n                  \\<Psi>\\<^sub>Q\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  distinct A\\<^sub>P''\n  distinct A\\<^sub>Q'\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P''\n  A\\<^sub>Q' \\<sharp>* Q\n  A\\<^sub>Q' \\<sharp>* R\n  A\\<^sub>Q' \\<sharp>* K\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* R\n  A\\<^sub>P'' \\<sharp>* Q\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* M\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>R \\<sharp>* Q\n  A\\<^sub>R \\<sharp>* M\n\ngoal (1 subgoal):\n 1. (\\<And>K'.\n        \\<lbrakk>\\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q';\n         \\<Psi> \\<otimes>\n         \\<Psi>\\<^sub>P'' \\<otimes>\n         \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K';\n         A\\<^sub>Q' \\<sharp>* K'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac comm1Aux) (assumption | simp)+"], ["proof (state)\nthis:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<otimes>\n  \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\n  A\\<^sub>Q' \\<sharp>* K'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "with P''Trans FrP''"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<otimes>\n  \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\n  A\\<^sub>Q' \\<sharp>* K'", "have \"\\<Psi> \\<rhd> P'' \\<parallel> Q \\<longmapsto>\\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>(P' \\<parallel> Q')\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<otimes>\n  \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\n  A\\<^sub>Q' \\<sharp>* K'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P'' \\<parallel>\n                  Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                     Q'", "using FrQ' \\<open>A\\<^sub>Q' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q' \\<sharp>* P''\\<close> \\<open>A\\<^sub>Q' \\<sharp>* Q\\<close>\n    \\<open>xvec \\<sharp>* P''\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P'' \\<sharp>* P''\\<close> \\<open>A\\<^sub>P'' \\<sharp>* Q\\<close> \\<open>A\\<^sub>P'' \\<sharp>* M\\<close>  \\<open>A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> Q'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<otimes>\n  \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\n  A\\<^sub>Q' \\<sharp>* K'\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P''\n  A\\<^sub>Q' \\<sharp>* Q\n  xvec \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* Q\n  A\\<^sub>P'' \\<sharp>* M\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P'' \\<parallel>\n                  Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                     Q'", "by(rule_tac Comm1)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P'' \\<parallel>\n                Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                   Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n  \\<Psi> \\<rhd> P'' \\<parallel>\n                Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                   Q'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n  \\<Psi> \\<rhd> P'' \\<parallel>\n                Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                   Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "by(drule_tac tauActTauStepChain) auto"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                     Q'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakComm2:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>Q   :: \"name list\"\n  and   \\<Psi>\\<^sub>Q   :: 'b\n\n  assumes PTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     FrR: \"extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\"\n  and     QTrans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<rhd> Q \\<longmapsto>K\\<lparr>N\\<rparr> \\<prec> Q'\"\n  and     FrQ: \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\"\n  and     MeqK: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K\"\n  and     \"A\\<^sub>R \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>R \\<sharp>* P\"\n  and     \"A\\<^sub>R \\<sharp>* Q\"\n  and     \"A\\<^sub>R \\<sharp>* R\"\n  and     \"A\\<^sub>R \\<sharp>* M\"\n  and     \"A\\<^sub>R \\<sharp>* A\\<^sub>Q\"\n  and     \"A\\<^sub>Q \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>Q \\<sharp>* P\"\n  and     \"A\\<^sub>Q \\<sharp>* Q\"\n  and     \"A\\<^sub>Q \\<sharp>* R\"\n  and     \"A\\<^sub>Q \\<sharp>* K\"\n  and     \"xvec \\<sharp>* Q\"\n  and     \"xvec \\<sharp>* M\"\n  and     \"xvec \\<sharp>* A\\<^sub>Q\"\n  and     \"xvec \\<sharp>* A\\<^sub>R\"\n\n  shows \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sub>\\<tau> (\\<lparr>\\<nu>*xvec\\<rparr>(P' \\<parallel> Q'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from \\<open>extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\\<close> \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q \\<sharp>* P\\<close> \\<open>A\\<^sub>Q \\<sharp>* Q\\<close> \\<open>A\\<^sub>Q \\<sharp>* R\\<close> \\<open>A\\<^sub>Q \\<sharp>* K\\<close> \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q\\<close> \\<open>xvec \\<sharp>* A\\<^sub>Q\\<close>"], ["proof (chain)\npicking this:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P\n  A\\<^sub>Q \\<sharp>* Q\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>Q \\<sharp>* K\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q\n  xvec \\<sharp>* A\\<^sub>Q", "obtain A\\<^sub>Q' where FrQ': \"extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\" and \"distinct A\\<^sub>Q'\" and \"A\\<^sub>Q' \\<sharp>* \\<Psi>\" and \"A\\<^sub>Q' \\<sharp>* P\" \n               and \"A\\<^sub>Q' \\<sharp>* Q\" and \"A\\<^sub>Q' \\<sharp>* R\" and \"A\\<^sub>Q' \\<sharp>* K\" and \"A\\<^sub>R \\<sharp>* A\\<^sub>Q'\" and \"A\\<^sub>Q' \\<sharp>* xvec\""], ["proof (prove)\nusing this:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P\n  A\\<^sub>Q \\<sharp>* Q\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>Q \\<sharp>* K\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q\n  xvec \\<sharp>* A\\<^sub>Q\n\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>Q'.\n        \\<lbrakk>extractFrame Q =\n                 \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>;\n         distinct A\\<^sub>Q'; A\\<^sub>Q' \\<sharp>* \\<Psi>;\n         A\\<^sub>Q' \\<sharp>* P; A\\<^sub>Q' \\<sharp>* Q;\n         A\\<^sub>Q' \\<sharp>* R; A\\<^sub>Q' \\<sharp>* K;\n         A\\<^sub>R \\<sharp>* A\\<^sub>Q'; A\\<^sub>Q' \\<sharp>* xvec\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(\\<Psi>, P, Q, R, K, A\\<^sub>R, xvec)\" in distinctFrame) auto"], ["proof (state)\nthis:\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  distinct A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P\n  A\\<^sub>Q' \\<sharp>* Q\n  A\\<^sub>Q' \\<sharp>* R\n  A\\<^sub>Q' \\<sharp>* K\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* xvec\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\"\n                           and RimpP'': \"insertAssertion (extractFrame R) (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\"\n                           and P''Trans: \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame R)\n          (\\<Psi> \\<otimes>\n           \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n                (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q);\n         \\<Psi> \\<otimes>\n         \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from PChain \\<open>A\\<^sub>Q' \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  A\\<^sub>Q' \\<sharp>* P", "have \"A\\<^sub>Q' \\<sharp>* P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  A\\<^sub>Q' \\<sharp>* P\n\ngoal (1 subgoal):\n 1. A\\<^sub>Q' \\<sharp>* P''", "by(rule tauChainFreshChain)"], ["proof (state)\nthis:\n  A\\<^sub>Q' \\<sharp>* P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "obtain A\\<^sub>P'' \\<Psi>\\<^sub>P'' where FrP'': \"extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\" and \"A\\<^sub>P'' \\<sharp>* (\\<Psi>, A\\<^sub>Q', \\<Psi>\\<^sub>Q, A\\<^sub>R, \\<Psi>\\<^sub>R, M, N, K, R, Q, P'', xvec)\" and \"distinct A\\<^sub>P''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P'' \\<Psi>\\<^sub>P''.\n        \\<lbrakk>extractFrame P'' =\n                 \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>;\n         A\\<^sub>P'' \\<sharp>* (\\<Psi>, A\\<^sub>Q', \\<Psi>\\<^sub>Q,\n                                A\\<^sub>R, \\<Psi>\\<^sub>R, M, N, K, R, Q,\n                                P'', xvec);\n         distinct A\\<^sub>P''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule freshFrame)"], ["proof (state)\nthis:\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>P'' \\<sharp>* (\\<Psi>, A\\<^sub>Q', \\<Psi>\\<^sub>Q, A\\<^sub>R,\n                         \\<Psi>\\<^sub>R, M, N, K, R, Q, P'', xvec)\n  distinct A\\<^sub>P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "hence \"A\\<^sub>P'' \\<sharp>* \\<Psi>\" and \"A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\" and \"A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\" and \"A\\<^sub>P'' \\<sharp>* M\" and \"A\\<^sub>P'' \\<sharp>* R\" and \"A\\<^sub>P'' \\<sharp>* Q\"\n    and \"A\\<^sub>P'' \\<sharp>* N\" and \"A\\<^sub>P'' \\<sharp>* K\" and \"A\\<^sub>P'' \\<sharp>* A\\<^sub>R\" and \"A\\<^sub>P'' \\<sharp>* P''\" and \"A\\<^sub>P'' \\<sharp>* xvec\" and \"A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>R\""], ["proof (prove)\nusing this:\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  A\\<^sub>P'' \\<sharp>* (\\<Psi>, A\\<^sub>Q', \\<Psi>\\<^sub>Q, A\\<^sub>R,\n                         \\<Psi>\\<^sub>R, M, N, K, R, Q, P'', xvec)\n  distinct A\\<^sub>P''\n\ngoal (1 subgoal):\n 1. ((A\\<^sub>P'' \\<sharp>* \\<Psi> &&&\n      A\\<^sub>P'' \\<sharp>* A\\<^sub>Q' &&&\n      A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q) &&&\n     A\\<^sub>P'' \\<sharp>* M &&&\n     A\\<^sub>P'' \\<sharp>* R &&& A\\<^sub>P'' \\<sharp>* Q) &&&\n    (A\\<^sub>P'' \\<sharp>* N &&&\n     A\\<^sub>P'' \\<sharp>* K &&& A\\<^sub>P'' \\<sharp>* A\\<^sub>R) &&&\n    A\\<^sub>P'' \\<sharp>* P'' &&&\n    A\\<^sub>P'' \\<sharp>* xvec &&& A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>R", "by simp+"], ["proof (state)\nthis:\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>P'' \\<sharp>* M\n  A\\<^sub>P'' \\<sharp>* R\n  A\\<^sub>P'' \\<sharp>* Q\n  A\\<^sub>P'' \\<sharp>* N\n  A\\<^sub>P'' \\<sharp>* K\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>R\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* xvec\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from FrR \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q'\\<close> \\<open>A\\<^sub>Q' \\<sharp>* R\\<close>"], ["proof (chain)\npicking this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* R", "have \"A\\<^sub>Q' \\<sharp>* \\<Psi>\\<^sub>R\""], ["proof (prove)\nusing this:\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* R\n\ngoal (1 subgoal):\n 1. A\\<^sub>Q' \\<sharp>* \\<Psi>\\<^sub>R", "by(drule_tac extractFrameFreshChain) auto"], ["proof (state)\nthis:\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\\<^sub>R\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from FrQ' \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q'\\<close> \\<open>A\\<^sub>R \\<sharp>* Q\\<close>"], ["proof (chain)\npicking this:\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>R \\<sharp>* Q", "have \"A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\""], ["proof (prove)\nusing this:\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>R \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q", "by(drule_tac extractFrameFreshChain) auto"], ["proof (state)\nthis:\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "have \"\\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes> \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>R\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n          \\<Psi>\\<^sub>Q) \\<otimes>\n         \\<Psi>\\<^sub>R\\<rangle>", "by(metis frameResChainPres frameNilStatEq Commutativity AssertionStatEqTrans Composition Associativity)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "with RimpP'' FrP'' FrR \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\\<close> \\<open>A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\\<close>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>", "have \"\\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>P''\\<rangle>\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>Q) \\<otimes>\n                    \\<Psi>\\<^sub>P''\\<rangle>", "using freshCompChain"], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame R)\n   (\\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q) \\<hookrightarrow>\\<^sub>F insertAssertion\n         (extractFrame P'') (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q)\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>R \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\\<^sub>Q\n  A\\<^sub>R \\<sharp>* \\<Psi>\\<^sub>Q\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<lbrakk>?xvec \\<sharp>* ?\\<Psi>; ?xvec \\<sharp>* ?\\<Psi>'\\<rbrakk>\n  \\<Longrightarrow> ?xvec \\<sharp>* (?\\<Psi> \\<otimes> ?\\<Psi>')\n  \\<lbrakk>?Xs \\<sharp>* ?\\<Psi>; ?Xs \\<sharp>* ?\\<Psi>'\\<rbrakk>\n  \\<Longrightarrow> ?Xs \\<sharp>* (?\\<Psi> \\<otimes> ?\\<Psi>')\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>Q) \\<otimes>\n                    \\<Psi>\\<^sub>P''\\<rangle>", "by(simp add: freshChainSimps)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "have \"\\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes> \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P'') \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                          \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                \\<Psi>\\<^sub>P'') \\<otimes>\n               \\<Psi>\\<^sub>Q\\<rangle>", "by(metis frameResChainPres frameNilStatEq Commutativity AssertionStatEqTrans Composition Associativity)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n              \\<Psi>\\<^sub>P'') \\<otimes>\n             \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n  \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n              \\<Psi>\\<^sub>P'') \\<otimes>\n             \\<Psi>\\<^sub>Q\\<rangle>", "have RImpP'': \"\\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes> \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>P'') \\<otimes> \\<Psi>\\<^sub>Q\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes>\n        \\<Psi>\\<^sub>Q) \\<otimes>\n       \\<Psi>\\<^sub>R\\<rangle>\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                      \\<Psi>\\<^sub>R\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>Q) \\<otimes>\n                  \\<Psi>\\<^sub>P''\\<rangle>\n  \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q) \\<otimes>\n                        \\<Psi>\\<^sub>P''\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n              \\<Psi>\\<^sub>P'') \\<otimes>\n             \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                     \\<Psi>\\<^sub>P'') \\<otimes>\n                    \\<Psi>\\<^sub>Q\\<rangle>", "by(rule FrameStatEqImpCompose)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P'') \\<otimes>\n                  \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from PChain FrQ' \\<open>A\\<^sub>Q' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q' \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P", "have \"\\<Psi> \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q", "by(rule tauChainPar1)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "from QTrans FrR P''Trans MeqK RImpP'' FrP'' FrQ' \\<open>distinct A\\<^sub>P''\\<close> \\<open>distinct A\\<^sub>Q'\\<close> \\<open>A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\\<close> \\<open>A\\<^sub>R \\<sharp>* A\\<^sub>Q'\\<close>\n        \\<open>A\\<^sub>Q' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q' \\<sharp>* P''\\<close> \\<open>A\\<^sub>Q' \\<sharp>* Q\\<close> \\<open>A\\<^sub>Q' \\<sharp>* R\\<close> \\<open>A\\<^sub>Q' \\<sharp>* K\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P'' \\<sharp>* R\\<close> \\<open>A\\<^sub>P'' \\<sharp>* Q\\<close>\n        \\<open>A\\<^sub>P'' \\<sharp>* P''\\<close> \\<open>A\\<^sub>P'' \\<sharp>* M\\<close> \\<open>A\\<^sub>Q \\<sharp>* R\\<close> \\<open>A\\<^sub>R \\<sharp>* Q\\<close> \\<open>A\\<^sub>R \\<sharp>* M\\<close> \\<open>xvec \\<sharp>* A\\<^sub>R\\<close> \\<open>xvec \\<sharp>* M\\<close> \\<open>A\\<^sub>Q' \\<sharp>* xvec\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>R \\<rhd> Q \\<longmapsto> K\\<lparr>N\\<rparr> \\<prec> Q'\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P'') \\<otimes>\n                  \\<Psi>\\<^sub>Q\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  distinct A\\<^sub>P''\n  distinct A\\<^sub>Q'\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P''\n  A\\<^sub>Q' \\<sharp>* Q\n  A\\<^sub>Q' \\<sharp>* R\n  A\\<^sub>Q' \\<sharp>* K\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* R\n  A\\<^sub>P'' \\<sharp>* Q\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* M\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>R \\<sharp>* Q\n  A\\<^sub>R \\<sharp>* M\n  xvec \\<sharp>* A\\<^sub>R\n  xvec \\<sharp>* M\n  A\\<^sub>Q' \\<sharp>* xvec", "obtain K' where \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto>K'\\<lparr>N\\<rparr> \\<prec> Q'\" and \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>P'' \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\" and \"A\\<^sub>Q' \\<sharp>* K'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>R \\<rhd> Q \\<longmapsto> K\\<lparr>N\\<rparr> \\<prec> Q'\n  extractFrame R = \\<langle>A\\<^sub>R, \\<Psi>\\<^sub>R\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>R \\<otimes> \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K\n  \\<langle>A\\<^sub>R, (\\<Psi> \\<otimes> \\<Psi>\\<^sub>R) \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P'', (\\<Psi> \\<otimes>\n                   \\<Psi>\\<^sub>P'') \\<otimes>\n                  \\<Psi>\\<^sub>Q\\<rangle>\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  distinct A\\<^sub>P''\n  distinct A\\<^sub>Q'\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>R \\<sharp>* A\\<^sub>Q'\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P''\n  A\\<^sub>Q' \\<sharp>* Q\n  A\\<^sub>Q' \\<sharp>* R\n  A\\<^sub>Q' \\<sharp>* K\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* R\n  A\\<^sub>P'' \\<sharp>* Q\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* M\n  A\\<^sub>Q \\<sharp>* R\n  A\\<^sub>R \\<sharp>* Q\n  A\\<^sub>R \\<sharp>* M\n  xvec \\<sharp>* A\\<^sub>R\n  xvec \\<sharp>* M\n  A\\<^sub>Q' \\<sharp>* xvec\n\ngoal (1 subgoal):\n 1. (\\<And>K'.\n        \\<lbrakk>\\<Psi> \\<otimes>\n                 \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>N\\<rparr> \\<prec> Q';\n         \\<Psi> \\<otimes>\n         \\<Psi>\\<^sub>P'' \\<otimes>\n         \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K';\n         A\\<^sub>Q' \\<sharp>* K'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac comm2Aux) (assumption | simp)+"], ["proof (state)\nthis:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>N\\<rparr> \\<prec> Q'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<otimes>\n  \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\n  A\\<^sub>Q' \\<sharp>* K'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "with P''Trans FrP''"], ["proof (chain)\npicking this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>N\\<rparr> \\<prec> Q'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<otimes>\n  \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\n  A\\<^sub>Q' \\<sharp>* K'", "have \"\\<Psi> \\<rhd> P'' \\<parallel> Q \\<longmapsto>\\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>(P' \\<parallel> Q')\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>N\\<rparr> \\<prec> Q'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<otimes>\n  \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\n  A\\<^sub>Q' \\<sharp>* K'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P'' \\<parallel>\n                  Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                     Q'", "using FrQ' \\<open>A\\<^sub>Q' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q' \\<sharp>* P''\\<close> \\<open>A\\<^sub>Q' \\<sharp>* Q\\<close>\n    \\<open>xvec \\<sharp>* Q\\<close> \\<open>A\\<^sub>P'' \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>P'' \\<sharp>* P''\\<close> \\<open>A\\<^sub>P'' \\<sharp>* Q\\<close> \\<open>A\\<^sub>P'' \\<sharp>* M\\<close>  \\<open>A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q \\<rhd> P'' \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<rhd> Q \\<longmapsto> K'\\<lparr>N\\<rparr> \\<prec> Q'\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>P'' \\<otimes>\n  \\<Psi>\\<^sub>Q \\<turnstile> M \\<leftrightarrow> K'\n  A\\<^sub>Q' \\<sharp>* K'\n  extractFrame Q = \\<langle>A\\<^sub>Q', \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q' \\<sharp>* \\<Psi>\n  A\\<^sub>Q' \\<sharp>* P''\n  A\\<^sub>Q' \\<sharp>* Q\n  xvec \\<sharp>* Q\n  A\\<^sub>P'' \\<sharp>* \\<Psi>\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* Q\n  A\\<^sub>P'' \\<sharp>* M\n  A\\<^sub>P'' \\<sharp>* A\\<^sub>Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P'' \\<parallel>\n                  Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                     Q'", "by(rule_tac Comm2)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P'' \\<parallel>\n                Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                   Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n  \\<Psi> \\<rhd> P'' \\<parallel>\n                Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                   Q'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'' \\<parallel> Q\n  \\<Psi> \\<rhd> P'' \\<parallel>\n                Q \\<longmapsto> \\<tau> \\<prec> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                   Q'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<parallel>\n                  Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n Q'", "by(drule_tac tauActTauStepChain) auto"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel>\n                Q \\<Longrightarrow>\\<^sub>\\<tau> \\<lparr>\\<nu>*xvec\\<rparr>P' \\<parallel>\n                                     Q'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma frameImpIntComposition:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>' :: 'b\n  and   A\\<^sub>F :: \"name list\"\n  and   \\<Psi>\\<^sub>F :: 'b\n\n  assumes \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<langle>A\\<^sub>F, \\<Psi> \\<otimes> \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>F\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                  \\<Psi>\\<^sub>F\\<rangle>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                  \\<Psi>\\<^sub>F\\<rangle>", "from assms"], ["proof (chain)\npicking this:\n  \\<Psi> \\<simeq> \\<Psi>'", "have \"\\<langle>A\\<^sub>F, \\<Psi> \\<otimes> \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>F\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n         \\<Psi>\\<^sub>F\\<rangle>", "by(rule frameIntComposition)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n       \\<Psi>\\<^sub>F\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                  \\<Psi>\\<^sub>F\\<rangle>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n       \\<Psi>\\<^sub>F\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                  \\<Psi>\\<^sub>F\\<rangle>", "by(simp add: FrameStatEq_def)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                \\<Psi>\\<^sub>F\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma insertAssertionStatImp:\n  fixes F  :: \"'b frame\"\n  and   \\<Psi>  :: 'b\n  and   G  :: \"'b frame\"\n  and   \\<Psi>' :: 'b\n\n  assumes FeqG: \"insertAssertion F \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"insertAssertion F \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertAssertion F\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insertAssertion F\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'", "obtain A\\<^sub>F \\<Psi>\\<^sub>F where FrF: \"F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\" and \"A\\<^sub>F \\<sharp>* \\<Psi>\" and \"A\\<^sub>F \\<sharp>* \\<Psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>F \\<Psi>\\<^sub>F.\n        \\<lbrakk>F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>;\n         A\\<^sub>F \\<sharp>* \\<Psi>; A\\<^sub>F \\<sharp>* \\<Psi>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(\\<Psi>, \\<Psi>')\" in freshFrame) auto"], ["proof (state)\nthis:\n  F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\n  A\\<^sub>F \\<sharp>* \\<Psi>\n  A\\<^sub>F \\<sharp>* \\<Psi>'\n\ngoal (1 subgoal):\n 1. insertAssertion F\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'", "obtain A\\<^sub>G \\<Psi>\\<^sub>G where FrG: \"G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\" and \"A\\<^sub>G \\<sharp>* \\<Psi>\" and \"A\\<^sub>G \\<sharp>* \\<Psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>G \\<Psi>\\<^sub>G.\n        \\<lbrakk>G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>;\n         A\\<^sub>G \\<sharp>* \\<Psi>; A\\<^sub>G \\<sharp>* \\<Psi>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(\\<Psi>, \\<Psi>')\" in freshFrame) auto"], ["proof (state)\nthis:\n  G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\n  A\\<^sub>G \\<sharp>* \\<Psi>\n  A\\<^sub>G \\<sharp>* \\<Psi>'\n\ngoal (1 subgoal):\n 1. insertAssertion F\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'", "from \\<open>\\<Psi> \\<simeq> \\<Psi>'\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<simeq> \\<Psi>'", "have \"\\<langle>A\\<^sub>F, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi> \\<otimes> \\<Psi>\\<^sub>F\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n         \\<Psi>\\<^sub>F\\<rangle>", "by (metis frameIntComposition FrameStatEqSym)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n       \\<Psi>\\<^sub>F\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion F\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n       \\<Psi>\\<^sub>F\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion F\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'", "from \\<open>\\<Psi> \\<simeq> \\<Psi>'\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<simeq> \\<Psi>'", "have \"\\<langle>A\\<^sub>G, \\<Psi> \\<otimes> \\<Psi>\\<^sub>G\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>G\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>G, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>G\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n         \\<Psi>\\<^sub>G\\<rangle>", "by(rule frameIntComposition)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>G, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>G\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n       \\<Psi>\\<^sub>G\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion F\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n       \\<Psi>\\<^sub>F\\<rangle>\n  \\<langle>A\\<^sub>G, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>G\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n       \\<Psi>\\<^sub>G\\<rangle>", "have \"\\<langle>A\\<^sub>F, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>G\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n       \\<Psi>\\<^sub>F\\<rangle>\n  \\<langle>A\\<^sub>G, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>G\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n       \\<Psi>\\<^sub>G\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n                  \\<Psi>\\<^sub>G\\<rangle>", "using FeqG FrF FrG \\<open>A\\<^sub>F \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>G \\<sharp>* \\<Psi>\\<close> \\<open>\\<Psi> \\<simeq> \\<Psi>'\\<close>"], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n       \\<Psi>\\<^sub>F\\<rangle>\n  \\<langle>A\\<^sub>G, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>G\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n       \\<Psi>\\<^sub>G\\<rangle>\n  insertAssertion F\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>\n  F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\n  G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\n  A\\<^sub>F \\<sharp>* \\<Psi>\n  A\\<^sub>G \\<sharp>* \\<Psi>\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n                  \\<Psi>\\<^sub>G\\<rangle>", "by(force simp add: FrameStatEq_def dest: FrameStatImpTrans)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n                \\<Psi>\\<^sub>G\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion F\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'", "with FrF FrG \\<open>A\\<^sub>F \\<sharp>* \\<Psi>'\\<close> \\<open>A\\<^sub>G \\<sharp>* \\<Psi>'\\<close>"], ["proof (chain)\npicking this:\n  F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\n  G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\n  A\\<^sub>F \\<sharp>* \\<Psi>'\n  A\\<^sub>G \\<sharp>* \\<Psi>'\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n                \\<Psi>\\<^sub>G\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\n  G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\n  A\\<^sub>F \\<sharp>* \\<Psi>'\n  A\\<^sub>G \\<sharp>* \\<Psi>'\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n                \\<Psi>\\<^sub>G\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion F\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'", "by simp"], ["proof (state)\nthis:\n  insertAssertion F\n   \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion G \\<Psi>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma insertAssertionStatEq:\n  fixes F  :: \"'b frame\"\n  and   \\<Psi>  :: 'b\n  and   G  :: \"'b frame\"\n  and   \\<Psi>' :: 'b\n\n  assumes FeqG: \"insertAssertion F \\<Psi> \\<simeq>\\<^sub>F insertAssertion G \\<Psi>\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"insertAssertion F \\<Psi>' \\<simeq>\\<^sub>F insertAssertion G \\<Psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertAssertion F \\<Psi>' \\<simeq>\\<^sub>F insertAssertion G \\<Psi>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insertAssertion F \\<Psi>' \\<simeq>\\<^sub>F insertAssertion G \\<Psi>'", "obtain A\\<^sub>F \\<Psi>\\<^sub>F where FrF: \"F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\" and \"A\\<^sub>F \\<sharp>* \\<Psi>\" and \"A\\<^sub>F \\<sharp>* \\<Psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>F \\<Psi>\\<^sub>F.\n        \\<lbrakk>F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>;\n         A\\<^sub>F \\<sharp>* \\<Psi>; A\\<^sub>F \\<sharp>* \\<Psi>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(\\<Psi>, \\<Psi>')\" in freshFrame) auto"], ["proof (state)\nthis:\n  F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\n  A\\<^sub>F \\<sharp>* \\<Psi>\n  A\\<^sub>F \\<sharp>* \\<Psi>'\n\ngoal (1 subgoal):\n 1. insertAssertion F \\<Psi>' \\<simeq>\\<^sub>F insertAssertion G \\<Psi>'", "obtain A\\<^sub>G \\<Psi>\\<^sub>G where FrG: \"G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\" and \"A\\<^sub>G \\<sharp>* \\<Psi>\" and \"A\\<^sub>G \\<sharp>* \\<Psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>G \\<Psi>\\<^sub>G.\n        \\<lbrakk>G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>;\n         A\\<^sub>G \\<sharp>* \\<Psi>; A\\<^sub>G \\<sharp>* \\<Psi>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(\\<Psi>, \\<Psi>')\" in freshFrame) auto"], ["proof (state)\nthis:\n  G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\n  A\\<^sub>G \\<sharp>* \\<Psi>\n  A\\<^sub>G \\<sharp>* \\<Psi>'\n\ngoal (1 subgoal):\n 1. insertAssertion F \\<Psi>' \\<simeq>\\<^sub>F insertAssertion G \\<Psi>'", "from FeqG FrF FrG \\<open>A\\<^sub>F \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>G \\<sharp>* \\<Psi>\\<close> \\<open>\\<Psi> \\<simeq> \\<Psi>'\\<close>"], ["proof (chain)\npicking this:\n  insertAssertion F \\<Psi> \\<simeq>\\<^sub>F insertAssertion G \\<Psi>\n  F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\n  G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\n  A\\<^sub>F \\<sharp>* \\<Psi>\n  A\\<^sub>G \\<sharp>* \\<Psi>\n  \\<Psi> \\<simeq> \\<Psi>'", "have \"\\<langle>A\\<^sub>F, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>G\\<rangle>\""], ["proof (prove)\nusing this:\n  insertAssertion F \\<Psi> \\<simeq>\\<^sub>F insertAssertion G \\<Psi>\n  F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\n  G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\n  A\\<^sub>F \\<sharp>* \\<Psi>\n  A\\<^sub>G \\<sharp>* \\<Psi>\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n         \\<Psi>\\<^sub>G\\<rangle>", "by simp (metis frameIntComposition FrameStatEqTrans FrameStatEqSym)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n       \\<Psi>\\<^sub>G\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion F \\<Psi>' \\<simeq>\\<^sub>F insertAssertion G \\<Psi>'", "with FrF FrG \\<open>A\\<^sub>F \\<sharp>* \\<Psi>'\\<close> \\<open>A\\<^sub>G \\<sharp>* \\<Psi>'\\<close>"], ["proof (chain)\npicking this:\n  F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\n  G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\n  A\\<^sub>F \\<sharp>* \\<Psi>'\n  A\\<^sub>G \\<sharp>* \\<Psi>'\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n       \\<Psi>\\<^sub>G\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  F = \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F\\<rangle>\n  G = \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G\\<rangle>\n  A\\<^sub>F \\<sharp>* \\<Psi>'\n  A\\<^sub>G \\<sharp>* \\<Psi>'\n  \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                      \\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>' \\<otimes>\n       \\<Psi>\\<^sub>G\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion F \\<Psi>' \\<simeq>\\<^sub>F insertAssertion G \\<Psi>'", "by simp"], ["proof (state)\nthis:\n  insertAssertion F \\<Psi>' \\<simeq>\\<^sub>F insertAssertion G \\<Psi>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakTransitionStatEq:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   \\<Psi>'  :: 'b\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\"\n                           and QeqP'': \"insertAssertion (extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>\"\n                           and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame Q)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "from PChain \\<open>\\<Psi> \\<simeq> \\<Psi>'\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  \\<Psi> \\<simeq> \\<Psi>'", "have \"\\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "by(rule tauChainStatEq)"], ["proof (state)\nthis:\n  \\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "from QeqP'' \\<open>\\<Psi> \\<simeq> \\<Psi>'\\<close>"], ["proof (chain)\npicking this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<simeq> \\<Psi>'", "have \"insertAssertion (extractFrame Q) \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'') \\<Psi>'\""], ["proof (prove)\nusing this:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame Q)\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n  \\<Psi>'", "by(rule insertAssertionStatImp)"], ["proof (state)\nthis:\n  insertAssertion (extractFrame Q)\n   \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n\\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame Q)\n   \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n\\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "from P''Trans \\<open>\\<Psi> \\<simeq> \\<Psi>'\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  \\<Psi> \\<simeq> \\<Psi>'", "have \"\\<Psi>' \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  \\<Psi> \\<simeq> \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<Psi>' \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'", "by(rule statEqTransition)"], ["proof (state)\nthis:\n  \\<Psi>' \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n\\<Psi>'\n  \\<Psi>' \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi>' \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame Q)\n   \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n\\<Psi>'\n  \\<Psi>' \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi>' : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transitionWeakTransition:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>\\<alpha> \\<prec> P'\"\n  and     \"insertAssertion(extractFrame Q) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion(extractFrame P) \\<Psi>\"\n\n  shows \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<longmapsto> \\<alpha> \\<prec> P'\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P) \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(fastforce intro: weakTransitionI)"], ["", "lemma weakPar1Guarded:\n  fixes \\<Psi>  :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"bn \\<alpha> \\<sharp>* Q\"\n  and     \"guarded Q\"\n\n  shows \"\\<Psi> : (R \\<parallel> Q) \\<rhd> P \\<parallel> Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "obtain A\\<^sub>Q \\<Psi>\\<^sub>Q where FrQ: \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\" and \"A\\<^sub>Q \\<sharp>* \\<Psi>\" and \"A\\<^sub>Q \\<sharp>* P\" and \"A\\<^sub>Q \\<sharp>* \\<alpha>\" and \"A\\<^sub>Q \\<sharp>* R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>Q \\<Psi>\\<^sub>Q.\n        \\<lbrakk>extractFrame Q =\n                 \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>;\n         A\\<^sub>Q \\<sharp>* \\<Psi>; A\\<^sub>Q \\<sharp>* P;\n         A\\<^sub>Q \\<sharp>* \\<alpha>; A\\<^sub>Q \\<sharp>* R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(\\<Psi>, P, \\<alpha>, R)\" in freshFrame) auto"], ["proof (state)\nthis:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P\n  A\\<^sub>Q \\<sharp>* \\<alpha>\n  A\\<^sub>Q \\<sharp>* R\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "from \\<open>guarded Q\\<close> FrQ"], ["proof (chain)\npicking this:\n  guarded Q\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>", "have \"\\<Psi>\\<^sub>Q \\<simeq> \\<one>\""], ["proof (prove)\nusing this:\n  guarded Q\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>Q \\<simeq> \\<one>", "by(blast dest: guardedStatEq)"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>Q \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "with PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n  \\<Psi>\\<^sub>Q \\<simeq> \\<one>", "have \"\\<Psi> \\<otimes> \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n  \\<Psi>\\<^sub>Q \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<otimes>\n    \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(metis weakTransitionStatEq Identity AssertionStatEqSym compositionSym)"], ["proof (state)\nthis:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "using FrQ \\<open>bn \\<alpha> \\<sharp>* Q\\<close> \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<close> \\<open>A\\<^sub>Q \\<sharp>* P\\<close> \\<open>A\\<^sub>Q \\<sharp>* \\<alpha>\\<close> \\<open>A\\<^sub>Q \\<sharp>* R\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<otimes>\n  \\<Psi>\\<^sub>Q : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  bn \\<alpha> \\<sharp>* Q\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  A\\<^sub>Q \\<sharp>* P\n  A\\<^sub>Q \\<sharp>* \\<alpha>\n  A\\<^sub>Q \\<sharp>* R\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<parallel>\n             Q \\<rhd> P \\<parallel>\n                      Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q", "by(rule weakPar1)"], ["proof (state)\nthis:\n  \\<Psi> : R \\<parallel>\n           Q \\<rhd> P \\<parallel>\n                    Q \\<Longrightarrow>\\<alpha> \\<prec> P' \\<parallel> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakBang:\n  fixes \\<Psi>   :: 'b\n  and   R    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : R \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and     \"guarded P\"\n\n  shows \"\\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "from PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : R \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "obtain P'' where PChain: \"\\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\"\n                           and RImpP'': \"insertAssertion(extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion(extractFrame P'') \\<Psi>\"\n                           and P''Trans: \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> : R \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>\\<Psi> \\<rhd> P \\<parallel>\n                               !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'';\n         insertAssertion (extractFrame R)\n          \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n      (extractFrame P'') \\<Psi>;\n         \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule weakTransitionE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "obtain A\\<^sub>P \\<Psi>\\<^sub>P where FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\" and \"A\\<^sub>P \\<sharp>* \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P \\<Psi>\\<^sub>P.\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>P \\<sharp>* \\<Psi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule freshFrame)"], ["proof (state)\nthis:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "from \\<open>guarded P\\<close> FrP"], ["proof (chain)\npicking this:\n  guarded P\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>", "have \"\\<Psi>\\<^sub>P \\<simeq> \\<one>\""], ["proof (prove)\nusing this:\n  guarded P\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>P \\<simeq> \\<one>", "by(blast dest: guardedStatEq)"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* \\<Psi>\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "proof(auto simp add: rtrancl_eq_or_trancl)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                             \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>;\n     \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P'' = P \\<parallel> !P\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "have \"\\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> !P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> !P", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> !P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                             \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>;\n     \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P'' = P \\<parallel> !P\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> !P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                             \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>;\n     \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P'' = P \\<parallel> !P\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "assume RimpP: \"insertAssertion(extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>\""], ["proof (state)\nthis:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                  \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                             \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>;\n     \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P'' = P \\<parallel> !P\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "have \"insertAssertion(extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion(extractFrame(!P)) \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame R)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n \\<Psi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame R)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n \\<Psi>", "from \\<open>\\<Psi>\\<^sub>P \\<simeq> \\<one>\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>", "have \"\\<langle>A\\<^sub>P, \\<Psi> \\<otimes> \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes> \\<one>\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n \\<one>\\<rangle>", "by(metis frameIntCompositionSym frameIntAssociativity frameIntCommutativity frameIntIdentity FrameStatEqTrans FrameStatEqSym)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                                     \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame R)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n \\<Psi>", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                                     \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame R)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n \\<Psi>", "from \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<close>"], ["proof (chain)\npicking this:\n  A\\<^sub>P \\<sharp>* \\<Psi>", "have \"\\<langle>A\\<^sub>P, \\<Psi> \\<otimes> \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes> \\<one>\\<rangle>\""], ["proof (prove)\nusing this:\n  A\\<^sub>P \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                        \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n  \\<one>\\<rangle>", "by(force intro: frameResFreshChain)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame R)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n \\<Psi>", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                                     \\<one>\\<rangle>\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                                     \\<one>\\<rangle>\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame R)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n \\<Psi>", "using RimpP"], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>P \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                                     \\<one>\\<rangle>\n  \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                  \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame R)\n     \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n \\<Psi>", "by(auto simp add: FrameStatEq_def dest: FrameStatImpTrans)"], ["proof (state)\nthis:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n                                     \\<Psi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n                                     \\<Psi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                             \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>;\n     \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P'' = P \\<parallel> !P\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n                                     \\<Psi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                             \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>;\n     \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P'' = P \\<parallel> !P\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "assume \"\\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                             \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>;\n     \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P'' = P \\<parallel> !P\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "hence \"\\<Psi> \\<rhd> !P \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<longmapsto> \\<alpha> \\<prec> P'", "using \\<open>guarded P\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P'\n  guarded P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<longmapsto> \\<alpha> \\<prec> P'", "by(rule Bang)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> !P \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>P, \\<Psi> \\<otimes>\n                             \\<Psi>\\<^sub>P \\<otimes> \\<one>\\<rangle>;\n     \\<Psi> \\<rhd> P \\<parallel> !P \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P'' = P \\<parallel> !P\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n 2. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> !P\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> !P \\<longmapsto> \\<alpha> \\<prec> P'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> !P\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame (!P))\n                                     \\<Psi>\n  \\<Psi> \\<rhd> !P \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "fix P'''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "assume \"\\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sub>\\<tau>  P''\""], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "hence \"\\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sub>\\<tau> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sub>\\<tau> P''", "using \\<open>guarded P\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<parallel> !P \\<Longrightarrow>\\<^sub>\\<tau> P''\n  guarded P\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sub>\\<tau> P''", "by(rule tauStepChainBang)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "hence \"\\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "assume \"insertAssertion(extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion(extractFrame P'') \\<Psi>\"\n                and \"\\<Psi> \\<rhd> P'' \\<longmapsto>\\<alpha> \\<prec> P'\""], ["proof (state)\nthis:\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>insertAssertion (extractFrame R)\n              \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n          (extractFrame P'') \\<Psi>;\n     \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P';\n     extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n     A\\<^sub>P \\<sharp>* \\<Psi>; \\<Psi>\\<^sub>P \\<simeq> \\<one>;\n     P \\<parallel> !P \\<noteq> P'';\n     \\<Psi> \\<rhd> P \\<parallel>\n                   !P \\<Longrightarrow>\\<^sub>\\<tau> P''\\<rbrakk>\n    \\<Longrightarrow> \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> !P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame P'')\n                                     \\<Psi>\n  \\<Psi> \\<rhd> P'' \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(rule weakTransitionI)"], ["proof (state)\nthis:\n  \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Psi> : R \\<rhd> !P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakTransitionFrameImp:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   R    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and             \"insertAssertion(extractFrame R) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion(extractFrame Q) \\<Psi>\"\n\n  shows \"\\<Psi> : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n  insertAssertion (extractFrame R)\n   \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (extractFrame Q) \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : R \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(auto simp add: weakTransition_def intro: FrameStatImpTrans)"], ["", "lemma guardedFrameStatEq:\n  fixes P :: \"('a, 'b, 'c) psi\"\n\n  assumes \"guarded P\"\n\n  shows \"extractFrame P \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<one>\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "obtain A\\<^sub>P \\<Psi>\\<^sub>P where FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P \\<Psi>\\<^sub>P.\n        extractFrame P =\n        \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(rule freshFrame)"], ["proof (state)\nthis:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "from \\<open>guarded P\\<close> FrP"], ["proof (chain)\npicking this:\n  guarded P\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>", "have \"\\<Psi>\\<^sub>P \\<simeq> \\<one>\""], ["proof (prove)\nusing this:\n  guarded P\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>P \\<simeq> \\<one>", "by(blast dest: guardedStatEq)"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "hence \"\\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<one>\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>P \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<one>\\<rangle>", "by(rule_tac frameResChainPres) auto"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "have \"\\<langle>A\\<^sub>P, \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<one>\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>P, \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "by(rule_tac frameResFreshChain) auto"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>P, \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F\n\ngoal (1 subgoal):\n 1. extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<one>\\<rangle>\n  \\<langle>A\\<^sub>P, \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<one>\\<rangle>\n  \\<langle>A\\<^sub>P, \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F\n\ngoal (1 subgoal):\n 1. extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "using FrP"], ["proof (prove)\nusing this:\n  \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>P, \\<one>\\<rangle>\n  \\<langle>A\\<^sub>P, \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F", "by(force intro: FrameStatEqTrans)"], ["proof (state)\nthis:\n  extractFrame P \\<simeq>\\<^sub>F \\<bottom>\\<^sub>F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakGuardedTransition:\n  fixes \\<Psi>   :: 'b\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   \\<alpha>    :: \"'a action\"\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  and   R    :: \"('a, 'b, 'c) psi\"\n\n  assumes PTrans: \"\\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\"\n  and    \"guarded Q\"\n\n  shows \"\\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "obtain A\\<^sub>Q \\<Psi>\\<^sub>Q where FrQ: \"extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\" and \"A\\<^sub>Q \\<sharp>* \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>Q \\<Psi>\\<^sub>Q.\n        \\<lbrakk>extractFrame Q =\n                 \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>;\n         A\\<^sub>Q \\<sharp>* \\<Psi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule freshFrame)"], ["proof (state)\nthis:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "from \\<open>guarded Q\\<close> FrQ"], ["proof (chain)\npicking this:\n  guarded Q\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>", "have \"\\<Psi>\\<^sub>Q \\<simeq> \\<one>\""], ["proof (prove)\nusing this:\n  guarded Q\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>Q \\<simeq> \\<one>", "by(blast dest: guardedStatEq)"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>Q \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "hence \"\\<langle>A\\<^sub>Q, \\<Psi> \\<otimes> \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes> \\<one>\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>Q \\<simeq> \\<one>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n         \\<one>\\<rangle>", "by(metis frameIntCompositionSym)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n       \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "moreover"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n       \\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "from \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<close>"], ["proof (chain)\npicking this:\n  A\\<^sub>Q \\<sharp>* \\<Psi>", "have \"\\<langle>A\\<^sub>Q, \\<Psi> \\<otimes> \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes> \\<one>\\<rangle>\""], ["proof (prove)\nusing this:\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                        \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n  \\<one>\\<rangle>", "by(rule_tac frameResFreshChain) auto"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "ultimately"], ["proof (chain)\npicking this:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n       \\<one>\\<rangle>\n  \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>", "have \"insertAssertion(extractFrame Q) \\<Psi> \\<simeq>\\<^sub>F insertAssertion (extractFrame (\\<zero>)) \\<Psi>\""], ["proof (prove)\nusing this:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n       \\<one>\\<rangle>\n  \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame Q)\n     \\<Psi> \\<simeq>\\<^sub>F insertAssertion (extractFrame (\\<zero>)) \\<Psi>", "using FrQ \\<open>A\\<^sub>Q \\<sharp>* \\<Psi>\\<close>"], ["proof (prove)\nusing this:\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n  \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                      \\<Psi>\\<^sub>Q\\<rangle> \\<simeq>\\<^sub>F \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n       \\<one>\\<rangle>\n  \\<langle>A\\<^sub>Q, \\<Psi> \\<otimes>\n                      \\<one>\\<rangle> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi> \\<otimes>\n\\<one>\\<rangle>\n  extractFrame Q = \\<langle>A\\<^sub>Q, \\<Psi>\\<^sub>Q\\<rangle>\n  A\\<^sub>Q \\<sharp>* \\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame Q)\n     \\<Psi> \\<simeq>\\<^sub>F insertAssertion (extractFrame (\\<zero>)) \\<Psi>", "by simp (blast intro: FrameStatEqTrans)"], ["proof (state)\nthis:\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<simeq>\\<^sub>F insertAssertion (extractFrame (\\<zero>)) \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "with PTrans"], ["proof (chain)\npicking this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<simeq>\\<^sub>F insertAssertion (extractFrame (\\<zero>)) \\<Psi>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> : Q \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n  insertAssertion (extractFrame Q)\n   \\<Psi> \\<simeq>\\<^sub>F insertAssertion (extractFrame (\\<zero>)) \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'", "by(rule_tac weakTransitionFrameImp) (auto simp add: FrameStatEq_def)"], ["proof (state)\nthis:\n  \\<Psi> : \\<zero> \\<rhd> P \\<Longrightarrow>\\<alpha> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma expandTauChainFrame:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P :: \"name list\"\n  and   \\<Psi>\\<^sub>P :: 'b\n  and   C   :: \"'d::fs_name\"\n\n  assumes PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"distinct A\\<^sub>P\"\n  and     \"A\\<^sub>P \\<sharp>* P\"\n  and     \"A\\<^sub>P \\<sharp>* C\"\n\n  obtains \\<Psi>' A\\<^sub>P' \\<Psi>\\<^sub>P' where \"extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\" and \"\\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\" and \"A\\<^sub>P' \\<sharp>* P'\" and \"A\\<^sub>P' \\<sharp>* C\" and \"distinct A\\<^sub>P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n        \\<lbrakk>extractFrame P' =\n                 \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n         \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n         A\\<^sub>P' \\<sharp>* P'; A\\<^sub>P' \\<sharp>* C;\n         distinct A\\<^sub>P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using PChain FrP \\<open>A\\<^sub>P \\<sharp>* P\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* P\n\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n        \\<lbrakk>extractFrame P' =\n                 \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n         \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n         A\\<^sub>P' \\<sharp>* P'; A\\<^sub>P' \\<sharp>* C;\n         distinct A\\<^sub>P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(induct arbitrary: thesis rule: tauChainInduct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a thesis.\n       \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                   \\<lbrakk>extractFrame a =\n                            \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                    \\<Psi>\\<^sub>P \\<otimes>\n                    \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                    A\\<^sub>P' \\<sharp>* a; A\\<^sub>P' \\<sharp>* C;\n                    distinct A\\<^sub>P'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "case(TauBase P)"], ["proof (state)\nthis:\n  \\<lbrakk>extractFrame P = \\<langle>?A\\<^sub>P', ?\\<Psi>\\<^sub>P'\\<rangle>;\n   \\<Psi>\\<^sub>P \\<otimes> ?\\<Psi>' \\<simeq> ?\\<Psi>\\<^sub>P';\n   ?A\\<^sub>P' \\<sharp>* P; ?A\\<^sub>P' \\<sharp>* C;\n   distinct ?A\\<^sub>P'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* P\n\ngoal (2 subgoals):\n 1. \\<And>a thesis.\n       \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                   \\<lbrakk>extractFrame a =\n                            \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                    \\<Psi>\\<^sub>P \\<otimes>\n                    \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                    A\\<^sub>P' \\<sharp>* a; A\\<^sub>P' \\<sharp>* C;\n                    distinct A\\<^sub>P'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"\\<Psi>\\<^sub>P \\<otimes> SBottom' \\<simeq> \\<Psi>\\<^sub>P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>P \\<otimes> \\<one> \\<simeq> \\<Psi>\\<^sub>P", "by(rule Identity)"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>P \\<otimes> \\<one> \\<simeq> \\<Psi>\\<^sub>P\n\ngoal (2 subgoals):\n 1. \\<And>a thesis.\n       \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                   \\<lbrakk>extractFrame a =\n                            \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                    \\<Psi>\\<^sub>P \\<otimes>\n                    \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                    A\\<^sub>P' \\<sharp>* a; A\\<^sub>P' \\<sharp>* C;\n                    distinct A\\<^sub>P'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  \\<Psi>\\<^sub>P \\<otimes> \\<one> \\<simeq> \\<Psi>\\<^sub>P", "show ?case"], ["proof (prove)\nusing this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  \\<Psi>\\<^sub>P \\<otimes> \\<one> \\<simeq> \\<Psi>\\<^sub>P\n\ngoal (1 subgoal):\n 1. thesis", "using \\<open>A\\<^sub>P \\<sharp>* P\\<close> \\<open>A\\<^sub>P \\<sharp>* C\\<close> \\<open>distinct A\\<^sub>P\\<close>"], ["proof (prove)\nusing this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  \\<Psi>\\<^sub>P \\<otimes> \\<one> \\<simeq> \\<Psi>\\<^sub>P\n  A\\<^sub>P \\<sharp>* P\n  A\\<^sub>P \\<sharp>* C\n  distinct A\\<^sub>P\n\ngoal (1 subgoal):\n 1. thesis", "by(rule TauBase)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "case(TauStep P P' P'')"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n              \\<lbrakk>extractFrame P' =\n                       \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n               \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n               A\\<^sub>P' \\<sharp>* P'; A\\<^sub>P' \\<sharp>* C;\n               distinct A\\<^sub>P'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n   A\\<^sub>P \\<sharp>* P\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<Psi> \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n  \\<lbrakk>extractFrame P'' =\n           \\<langle>?A\\<^sub>P', ?\\<Psi>\\<^sub>P'\\<rangle>;\n   \\<Psi>\\<^sub>P \\<otimes> ?\\<Psi>' \\<simeq> ?\\<Psi>\\<^sub>P';\n   ?A\\<^sub>P' \\<sharp>* P''; ?A\\<^sub>P' \\<sharp>* C;\n   distinct ?A\\<^sub>P'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* P\n\ngoal (1 subgoal):\n 1. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\\<close> \\<open>A\\<^sub>P \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* P", "obtain \\<Psi>' A\\<^sub>P' \\<Psi>\\<^sub>P' where FrP': \"extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\" and \"\\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\"\n                       and \"A\\<^sub>P' \\<sharp>* P'\" and \"A\\<^sub>P' \\<sharp>* C\" and \"distinct A\\<^sub>P'\""], ["proof (prove)\nusing this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>P \\<sharp>* P\n\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n        \\<lbrakk>extractFrame P' =\n                 \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n         \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n         A\\<^sub>P' \\<sharp>* P'; A\\<^sub>P' \\<sharp>* C;\n         distinct A\\<^sub>P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac TauStep)"], ["proof (state)\nthis:\n  extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\n  \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\n  A\\<^sub>P' \\<sharp>* P'\n  A\\<^sub>P' \\<sharp>* C\n  distinct A\\<^sub>P'\n\ngoal (1 subgoal):\n 1. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>\\<Psi> \\<rhd> P' \\<longmapsto>\\<tau> \\<prec> P''\\<close> FrP' \\<open>distinct A\\<^sub>P'\\<close> \\<open>A\\<^sub>P' \\<sharp>* P'\\<close> \\<open>A\\<^sub>P' \\<sharp>* C\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n  extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\n  distinct A\\<^sub>P'\n  A\\<^sub>P' \\<sharp>* P'\n  A\\<^sub>P' \\<sharp>* C", "obtain \\<Psi>'' A\\<^sub>P'' \\<Psi>\\<^sub>P'' where FrP'': \"extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\" and \"\\<Psi>\\<^sub>P' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''\"\n                          and \"A\\<^sub>P'' \\<sharp>* P''\" and \"A\\<^sub>P'' \\<sharp>* C\" and \"distinct A\\<^sub>P''\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n  extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\n  distinct A\\<^sub>P'\n  A\\<^sub>P' \\<sharp>* P'\n  A\\<^sub>P' \\<sharp>* C\n\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P'' \\<Psi>\\<^sub>P'' \\<Psi>''.\n        \\<lbrakk>extractFrame P'' =\n                 \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>;\n         \\<Psi>\\<^sub>P' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P'';\n         A\\<^sub>P'' \\<sharp>* P''; A\\<^sub>P'' \\<sharp>* C;\n         distinct A\\<^sub>P''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule expandTauFrame)"], ["proof (state)\nthis:\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi>\\<^sub>P' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* C\n  distinct A\\<^sub>P''\n\ngoal (1 subgoal):\n 1. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>\\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'", "have \"(\\<Psi>\\<^sub>P \\<otimes> \\<Psi>') \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P' \\<otimes> \\<Psi>''\""], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\n\ngoal (1 subgoal):\n 1. (\\<Psi>\\<^sub>P \\<otimes> \\<Psi>') \\<otimes>\n    \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P' \\<otimes> \\<Psi>''", "by(rule Composition)"], ["proof (state)\nthis:\n  (\\<Psi>\\<^sub>P \\<otimes> \\<Psi>') \\<otimes>\n  \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P' \\<otimes> \\<Psi>''\n\ngoal (1 subgoal):\n 1. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>\\<Psi>\\<^sub>P' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi>\\<^sub>P' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''\n  (\\<Psi>\\<^sub>P \\<otimes> \\<Psi>') \\<otimes>\n  \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P' \\<otimes> \\<Psi>''", "have \"\\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''\""], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>P' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''\n  (\\<Psi>\\<^sub>P \\<otimes> \\<Psi>') \\<otimes>\n  \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P' \\<otimes> \\<Psi>''\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>P \\<otimes>\n    \\<Psi>' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''", "by(metis AssertionStatEqTrans Associativity Commutativity)"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>P \\<otimes>\n  \\<Psi>' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''\n\ngoal (1 subgoal):\n 1. \\<And>a b c thesis.\n       \\<lbrakk>\\<Psi> \\<rhd> a \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> b;\n        \\<And>thesis.\n           \\<lbrakk>\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n                       \\<lbrakk>extractFrame b =\n                                \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n                        \\<Psi>\\<^sub>P \\<otimes>\n                        \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n                        A\\<^sub>P' \\<sharp>* b; A\\<^sub>P' \\<sharp>* C;\n                        distinct A\\<^sub>P'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n            A\\<^sub>P \\<sharp>* a\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Psi> \\<rhd> b \\<longmapsto> \\<tau> \\<prec> c;\n        \\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n           \\<lbrakk>extractFrame c =\n                    \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n            \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n            A\\<^sub>P' \\<sharp>* c; A\\<^sub>P' \\<sharp>* C;\n            distinct A\\<^sub>P'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        extractFrame a = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>P \\<sharp>* a\\<rbrakk>\n       \\<Longrightarrow> thesis", "with FrP''"], ["proof (chain)\npicking this:\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi>\\<^sub>P \\<otimes>\n  \\<Psi>' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''", "show ?case"], ["proof (prove)\nusing this:\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi>\\<^sub>P \\<otimes>\n  \\<Psi>' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''\n\ngoal (1 subgoal):\n 1. thesis", "using \\<open>A\\<^sub>P'' \\<sharp>* P''\\<close> \\<open>A\\<^sub>P'' \\<sharp>* C\\<close> \\<open>distinct A\\<^sub>P''\\<close>"], ["proof (prove)\nusing this:\n  extractFrame P'' = \\<langle>A\\<^sub>P'', \\<Psi>\\<^sub>P''\\<rangle>\n  \\<Psi>\\<^sub>P \\<otimes>\n  \\<Psi>' \\<otimes> \\<Psi>'' \\<simeq> \\<Psi>\\<^sub>P''\n  A\\<^sub>P'' \\<sharp>* P''\n  A\\<^sub>P'' \\<sharp>* C\n  distinct A\\<^sub>P''\n\ngoal (1 subgoal):\n 1. thesis", "by(rule TauStep)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma frameIntImpComposition:\n  fixes \\<Psi>  :: 'b\n  and   \\<Psi>' :: 'b\n  and   A\\<^sub>F :: \"name list\"\n  and   \\<Psi>\\<^sub>F :: 'b\n\n  assumes \"\\<Psi> \\<simeq> \\<Psi>'\"\n\n  shows \"\\<langle>A\\<^sub>F, \\<Psi> \\<otimes> \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes> \\<Psi>\\<^sub>F\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                  \\<Psi>\\<^sub>F\\<rangle>", "using assms frameIntComposition"], ["proof (prove)\nusing this:\n  \\<Psi> \\<simeq> \\<Psi>'\n  ?\\<Psi> \\<simeq> ?\\<Psi>' \\<Longrightarrow>\n  \\<langle>?A\\<^sub>F, ?\\<Psi> \\<otimes>\n                       ?\\<Psi>\\<^sub>F\\<rangle> \\<simeq>\\<^sub>F \\<langle>?A\\<^sub>F, ?\\<Psi>' \\<otimes>\n          ?\\<Psi>\\<^sub>F\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi> \\<otimes>\n                        \\<Psi>\\<^sub>F\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>F, \\<Psi>' \\<otimes>\n                  \\<Psi>\\<^sub>F\\<rangle>", "by(simp add: FrameStatEq_def)"], ["", "lemma tauChainInduct2[consumes 1, case_names TauBase TauStep]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     cBase: \"\\<And>P. Prop P P\"\n  and     cStep: \"\\<And>P P' P''. \\<lbrakk>\\<Psi> \\<rhd> P' \\<longmapsto>\\<tau> \\<prec> P''; \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'; Prop P P'\\<rbrakk> \\<Longrightarrow> Prop P P''\"\n\n  shows \"Prop P P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prop P P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  Prop ?P ?P\n  \\<lbrakk>\\<Psi> \\<rhd> ?P' \\<longmapsto> \\<tau> \\<prec> ?P'';\n   \\<Psi> \\<rhd> ?P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> ?P';\n   Prop ?P ?P'\\<rbrakk>\n  \\<Longrightarrow> Prop ?P ?P''\n\ngoal (1 subgoal):\n 1. Prop P P'", "by(rule tauChainInduct)"], ["", "lemma tauStepChainInduct2[consumes 1, case_names TauBase TauStep]:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes PChain: \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\"\n  and     cBase: \"\\<And>P P'. \\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P' \\<Longrightarrow> Prop P P'\"\n  and     cStep: \"\\<And>P P' P''. \\<lbrakk>\\<Psi> \\<rhd> P' \\<longmapsto>\\<tau> \\<prec> P''; \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'; Prop P P'\\<rbrakk> \\<Longrightarrow> Prop P P''\"\n\n  shows \"Prop P P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prop P P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  \\<Psi> \\<rhd> ?P \\<longmapsto> \\<tau> \\<prec> ?P' \\<Longrightarrow>\n  Prop ?P ?P'\n  \\<lbrakk>\\<Psi> \\<rhd> ?P' \\<longmapsto> \\<tau> \\<prec> ?P'';\n   \\<Psi> \\<rhd> ?P \\<Longrightarrow>\\<^sub>\\<tau> ?P'; Prop ?P ?P'\\<rbrakk>\n  \\<Longrightarrow> Prop ?P ?P''\n\ngoal (1 subgoal):\n 1. Prop P P'", "by(rule tauStepChainInduct)"], ["", "lemma weakTransferTauChainFrame:\n  fixes \\<Psi>\\<^sub>F :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  and   A\\<^sub>P :: \"name list\"\n  and   \\<Psi>\\<^sub>P :: 'b\n  and   A\\<^sub>F :: \"name list\"\n  and   A\\<^sub>G :: \"name list\"\n  and   \\<Psi>\\<^sub>G :: 'b\n\n  assumes PChain: \"\\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\"\n  and     \"distinct A\\<^sub>P\"\n  and     FeqG: \"\\<And>\\<Psi>. insertAssertion (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P\\<rangle>) \\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>) \\<Psi>\"\n  and     \"A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>G\"\n  and     \"A\\<^sub>G \\<sharp>* \\<Psi>\"\n  and     \"A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>F\"\n  and     \"A\\<^sub>F \\<sharp>* A\\<^sub>G\"\n  and     \"A\\<^sub>F \\<sharp>* P\"\n  and     \"A\\<^sub>G \\<sharp>* P\"\n  and     \"A\\<^sub>P \\<sharp>* A\\<^sub>F\"\n  and     \"A\\<^sub>P \\<sharp>* A\\<^sub>G\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>F\"\n  and     \"A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>G\"\n  and     \"A\\<^sub>P \\<sharp>* P\"\n\n  shows \"\\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'", "using PChain FrP \\<open>A\\<^sub>F \\<sharp>* P\\<close> \\<open>A\\<^sub>G \\<sharp>* P\\<close> \\<open>A\\<^sub>P \\<sharp>* P\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>F \\<sharp>* P\n  A\\<^sub>G \\<sharp>* P\n  A\\<^sub>P \\<sharp>* P\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'", "proof(induct rule: tauChainInduct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<lbrakk>extractFrame P =\n                \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P\n 2. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "case TauBase"], ["proof (state)\nthis:\n  extractFrame P_ = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>F \\<sharp>* P_\n  A\\<^sub>G \\<sharp>* P_\n  A\\<^sub>P \\<sharp>* P_\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<lbrakk>extractFrame P =\n                \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P\n 2. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "thus ?case"], ["proof (prove)\nusing this:\n  extractFrame P_ = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>F \\<sharp>* P_\n  A\\<^sub>G \\<sharp>* P_\n  A\\<^sub>P \\<sharp>* P_\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>G \\<rhd> P_ \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P_", "by simp"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>G \\<rhd> P_ \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P_\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "case(TauStep P P' P'')"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n  \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  \\<lbrakk>extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n   A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n   A\\<^sub>P \\<sharp>* P\\<rbrakk>\n  \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>F \\<sharp>* P\n  A\\<^sub>G \\<sharp>* P\n  A\\<^sub>P \\<sharp>* P\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "have FrP: \"extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>", "by fact"], ["proof (state)\nthis:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "then"], ["proof (chain)\npicking this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>", "have PChain: \"\\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\""], ["proof (prove)\nusing this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'", "using \\<open>A\\<^sub>F \\<sharp>* P\\<close> \\<open>A\\<^sub>G \\<sharp>* P\\<close> \\<open>A\\<^sub>P \\<sharp>* P\\<close>"], ["proof (prove)\nusing this:\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  A\\<^sub>F \\<sharp>* P\n  A\\<^sub>G \\<sharp>* P\n  A\\<^sub>P \\<sharp>* P\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'", "by(rule TauStep)"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "then"], ["proof (chain)\npicking this:\n  \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'", "obtain A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>' where FrP': \"extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\" and \"\\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\"\n                            and \"A\\<^sub>P' \\<sharp>* A\\<^sub>F\" and \"A\\<^sub>P' \\<sharp>* A\\<^sub>G\" and \"A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>F\" and \"A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>G\"\n                            and \"distinct A\\<^sub>P'\""], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n        \\<lbrakk>extractFrame P' =\n                 \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n         \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n         A\\<^sub>P' \\<sharp>* A\\<^sub>F; A\\<^sub>P' \\<sharp>* A\\<^sub>G;\n         A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>F;\n         A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>G; distinct A\\<^sub>P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using FrP \\<open>distinct A\\<^sub>P\\<close> \\<open>A\\<^sub>P \\<sharp>* P\\<close> \\<open>A\\<^sub>P \\<sharp>* A\\<^sub>F\\<close> \\<open>A\\<^sub>P \\<sharp>* A\\<^sub>G\\<close> \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>F\\<close> \\<open>A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>G\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  distinct A\\<^sub>P\n  A\\<^sub>P \\<sharp>* P\n  A\\<^sub>P \\<sharp>* A\\<^sub>F\n  A\\<^sub>P \\<sharp>* A\\<^sub>G\n  A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>F\n  A\\<^sub>P \\<sharp>* \\<Psi>\\<^sub>G\n\ngoal (1 subgoal):\n 1. (\\<And>A\\<^sub>P' \\<Psi>\\<^sub>P' \\<Psi>'.\n        \\<lbrakk>extractFrame P' =\n                 \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>;\n         \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P';\n         A\\<^sub>P' \\<sharp>* A\\<^sub>F; A\\<^sub>P' \\<sharp>* A\\<^sub>G;\n         A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>F;\n         A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>G; distinct A\\<^sub>P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac C=\"(A\\<^sub>F, A\\<^sub>G, \\<Psi>\\<^sub>F, \\<Psi>\\<^sub>G)\" in expandTauChainFrame) auto"], ["proof (state)\nthis:\n  extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\n  \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\n  A\\<^sub>P' \\<sharp>* A\\<^sub>F\n  A\\<^sub>P' \\<sharp>* A\\<^sub>G\n  A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>F\n  A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>G\n  distinct A\\<^sub>P'\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "from PChain \\<open>A\\<^sub>F \\<sharp>* P\\<close> \\<open>A\\<^sub>G \\<sharp>* P\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  A\\<^sub>F \\<sharp>* P\n  A\\<^sub>G \\<sharp>* P", "have \"A\\<^sub>F \\<sharp>* P'\" and \"A\\<^sub>G \\<sharp>* P'\""], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  A\\<^sub>F \\<sharp>* P\n  A\\<^sub>G \\<sharp>* P\n\ngoal (1 subgoal):\n 1. A\\<^sub>F \\<sharp>* P' &&& A\\<^sub>G \\<sharp>* P'", "by(blast dest: tauChainFreshChain)+"], ["proof (state)\nthis:\n  A\\<^sub>F \\<sharp>* P'\n  A\\<^sub>G \\<sharp>* P'\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "with \\<open>A\\<^sub>F \\<sharp>* P\\<close> \\<open>A\\<^sub>G \\<sharp>* P\\<close> \\<open>A\\<^sub>P \\<sharp>* A\\<^sub>F\\<close> \\<open>A\\<^sub>P \\<sharp>* A\\<^sub>G\\<close>\\<open>A\\<^sub>P' \\<sharp>* A\\<^sub>F\\<close> \\<open>A\\<^sub>P' \\<sharp>* A\\<^sub>G\\<close> FrP FrP'"], ["proof (chain)\npicking this:\n  A\\<^sub>F \\<sharp>* P\n  A\\<^sub>G \\<sharp>* P\n  A\\<^sub>P \\<sharp>* A\\<^sub>F\n  A\\<^sub>P \\<sharp>* A\\<^sub>G\n  A\\<^sub>P' \\<sharp>* A\\<^sub>F\n  A\\<^sub>P' \\<sharp>* A\\<^sub>G\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\n  A\\<^sub>F \\<sharp>* P'\n  A\\<^sub>G \\<sharp>* P'", "have \"A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P\" and \"A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P\" and \"A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P'\" and \"A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P'\""], ["proof (prove)\nusing this:\n  A\\<^sub>F \\<sharp>* P\n  A\\<^sub>G \\<sharp>* P\n  A\\<^sub>P \\<sharp>* A\\<^sub>F\n  A\\<^sub>P \\<sharp>* A\\<^sub>G\n  A\\<^sub>P' \\<sharp>* A\\<^sub>F\n  A\\<^sub>P' \\<sharp>* A\\<^sub>G\n  extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>\n  extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\n  A\\<^sub>F \\<sharp>* P'\n  A\\<^sub>G \\<sharp>* P'\n\ngoal (1 subgoal):\n 1. (A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P &&&\n     A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P) &&&\n    A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P' &&&\n    A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P'", "by(auto dest: extractFrameFreshChain)"], ["proof (state)\nthis:\n  A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P\n  A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P'\n  A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P'\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "from FeqG"], ["proof (chain)\npicking this:\n  insertAssertion\n   (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n   ?\\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n(\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n?\\<Psi>", "have FeqG: \"insertAssertion (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P\\<rangle>) \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>) \\<Psi>'\""], ["proof (prove)\nusing this:\n  insertAssertion\n   (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n   ?\\<Psi> \\<hookrightarrow>\\<^sub>F insertAssertion\n(\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n?\\<Psi>\n\ngoal (1 subgoal):\n 1. insertAssertion\n     (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n     \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion\n  (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n  \\<Psi>'", "by blast"], ["proof (state)\nthis:\n  insertAssertion\n   (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n   \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion\n(\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n\\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "obtain p::\"name prm\" where \"(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F\" and  \"(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P\" and \"(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P'\" and \"(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>'\"\n                         and Sp: \"(set p) \\<subseteq> set A\\<^sub>F \\<times> set(p \\<bullet> A\\<^sub>F)\" and \"distinctPerm p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F;\n         (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P;\n         (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P';\n         (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>';\n         set p\n         \\<subseteq> set A\\<^sub>F \\<times> set (p \\<bullet> A\\<^sub>F);\n         distinctPerm p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac xvec=A\\<^sub>F and c=\"(\\<Psi>\\<^sub>F, \\<Psi>\\<^sub>P, \\<Psi>', \\<Psi>\\<^sub>P')\" in name_list_avoiding) auto"], ["proof (state)\nthis:\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P'\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>'\n  set p \\<subseteq> set A\\<^sub>F \\<times> set (p \\<bullet> A\\<^sub>F)\n  distinctPerm p\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "obtain q::\"name prm\" where \"(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>G\" and  \"(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P\" and \"(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P'\" and \"(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>'\"\n                         and Sq: \"(set q) \\<subseteq> set A\\<^sub>G \\<times> set(q \\<bullet> A\\<^sub>G)\" and \"distinctPerm q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>G;\n         (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P;\n         (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P';\n         (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>';\n         set q\n         \\<subseteq> set A\\<^sub>G \\<times> set (q \\<bullet> A\\<^sub>G);\n         distinctPerm q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac xvec=A\\<^sub>G and c=\"(\\<Psi>\\<^sub>G, \\<Psi>\\<^sub>P, \\<Psi>', \\<Psi>\\<^sub>P')\" in name_list_avoiding) auto"], ["proof (state)\nthis:\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>G\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P'\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>'\n  set q \\<subseteq> set A\\<^sub>G \\<times> set (q \\<bullet> A\\<^sub>G)\n  distinctPerm q\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "from \\<open>\\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'", "have \"\\<langle>(p \\<bullet> A\\<^sub>F), ((p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P')\\<rangle> \\<simeq>\\<^sub>F \\<langle>(p \\<bullet> A\\<^sub>F), (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> (\\<Psi>\\<^sub>P \\<otimes> \\<Psi>')\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\n\ngoal (1 subgoal):\n 1. \\<langle>p \\<bullet>\n             A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                        \\<Psi>\\<^sub>P'\\<rangle> \\<simeq>\\<^sub>F \\<langle>p \\<bullet>\n                                     A\\<^sub>F, (p \\<bullet>\n           \\<Psi>\\<^sub>F) \\<otimes>\n          \\<Psi>\\<^sub>P \\<otimes> \\<Psi>'\\<rangle>", "by(rule frameIntCompositionSym[OF AssertionStatEqSym])"], ["proof (state)\nthis:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<simeq>\\<^sub>F \\<langle>p \\<bullet>\n                                   A\\<^sub>F, (p \\<bullet>\n         \\<Psi>\\<^sub>F) \\<otimes>\n        \\<Psi>\\<^sub>P \\<otimes> \\<Psi>'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "hence \"\\<langle>(p \\<bullet> A\\<^sub>F), (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P'\\<rangle> \\<simeq>\\<^sub>F \\<langle>(p \\<bullet> A\\<^sub>F), \\<Psi>' \\<otimes> ((p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P)\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<simeq>\\<^sub>F \\<langle>p \\<bullet>\n                                   A\\<^sub>F, (p \\<bullet>\n         \\<Psi>\\<^sub>F) \\<otimes>\n        \\<Psi>\\<^sub>P \\<otimes> \\<Psi>'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>p \\<bullet>\n             A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                        \\<Psi>\\<^sub>P'\\<rangle> \\<simeq>\\<^sub>F \\<langle>p \\<bullet>\n                                     A\\<^sub>F, \\<Psi>' \\<otimes>\n          (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P\\<rangle>", "by(metis frameIntAssociativity FrameStatEqTrans frameIntCommutativity FrameStatEqSym)"], ["proof (state)\nthis:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<simeq>\\<^sub>F \\<langle>p \\<bullet>\n                                   A\\<^sub>F, \\<Psi>' \\<otimes>\n        (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "moreover"], ["proof (state)\nthis:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<simeq>\\<^sub>F \\<langle>p \\<bullet>\n                                   A\\<^sub>F, \\<Psi>' \\<otimes>\n        (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "from FeqG \\<open>A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P\\<close> \\<open>(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P\\<close> \\<open>(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F\\<close> \\<open>(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>'\\<close> Sp"], ["proof (chain)\npicking this:\n  insertAssertion\n   (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n   \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion\n(\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n\\<Psi>'\n  A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>'\n  set p \\<subseteq> set A\\<^sub>F \\<times> set (p \\<bullet> A\\<^sub>F)", "have \"\\<langle>(p \\<bullet> A\\<^sub>F), \\<Psi>' \\<otimes> ((p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P)\\<rangle> \\<hookrightarrow>\\<^sub>F insertAssertion (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>) \\<Psi>'\""], ["proof (prove)\nusing this:\n  insertAssertion\n   (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n   \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion\n(\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\n\\<Psi>'\n  A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>'\n  set p \\<subseteq> set A\\<^sub>F \\<times> set (p \\<bullet> A\\<^sub>F)\n\ngoal (1 subgoal):\n 1. \\<langle>p \\<bullet>\n             A\\<^sub>F, \\<Psi>' \\<otimes>\n                        (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                        \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                     (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n                    \\<Psi>\\<^sub>P\\<rangle>)\n                                     \\<Psi>'", "apply(erule_tac rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P;\n     (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P;\n     (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F;\n     (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>';\n     set p\n     \\<subseteq> set A\\<^sub>F \\<times> set (p \\<bullet> A\\<^sub>F)\\<rbrakk>\n    \\<Longrightarrow> insertAssertion\n                       (\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes>\n      \\<Psi>\\<^sub>P\\<rangle>)\n                       \\<Psi>' \\<hookrightarrow>\\<^sub>F insertAssertion\n                    (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n   \\<Psi>\\<^sub>P\\<rangle>)\n                    \\<Psi>' \\<longrightarrow>\n                      \\<langle>p \\<bullet>\n                               A\\<^sub>F, \\<Psi>' \\<otimes>\n    (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n    \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F insertAssertion\n                 (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n\\<Psi>\\<^sub>P\\<rangle>)\n                 \\<Psi>'", "by(subst frameChainAlpha) (auto simp add: eqvts)"], ["proof (state)\nthis:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, \\<Psi>' \\<otimes>\n                      (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                   (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n                  \\<Psi>\\<^sub>P\\<rangle>)\n                                   \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "hence \"\\<langle>(p \\<bullet> A\\<^sub>F), \\<Psi>' \\<otimes> ((p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P)\\<rangle> \\<hookrightarrow>\\<^sub>F  (\\<langle>(q \\<bullet> A\\<^sub>G), \\<Psi>' \\<otimes> (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes> \\<Psi>\\<^sub>P\\<rangle>)\""], ["proof (prove)\nusing this:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, \\<Psi>' \\<otimes>\n                      (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                   (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n                  \\<Psi>\\<^sub>P\\<rangle>)\n                                   \\<Psi>'\n\ngoal (1 subgoal):\n 1. \\<langle>p \\<bullet>\n             A\\<^sub>F, \\<Psi>' \\<otimes>\n                        (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                        \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n       A\\<^sub>G, \\<Psi>' \\<otimes>\n                  (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                  \\<Psi>\\<^sub>P\\<rangle>", "using \\<open>A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P\\<close> \\<open>(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P\\<close> \\<open>(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>G\\<close> \\<open>(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>'\\<close> Sq"], ["proof (prove)\nusing this:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, \\<Psi>' \\<otimes>\n                      (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F insertAssertion\n                                   (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n                  \\<Psi>\\<^sub>P\\<rangle>)\n                                   \\<Psi>'\n  A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>G\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>'\n  set q \\<subseteq> set A\\<^sub>G \\<times> set (q \\<bullet> A\\<^sub>G)\n\ngoal (1 subgoal):\n 1. \\<langle>p \\<bullet>\n             A\\<^sub>F, \\<Psi>' \\<otimes>\n                        (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                        \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n       A\\<^sub>G, \\<Psi>' \\<otimes>\n                  (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                  \\<Psi>\\<^sub>P\\<rangle>", "apply(erule_tac rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P;\n     (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P;\n     (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>G;\n     (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>';\n     set q\n     \\<subseteq> set A\\<^sub>G \\<times> set (q \\<bullet> A\\<^sub>G)\\<rbrakk>\n    \\<Longrightarrow> \\<langle>p \\<bullet>\n                               A\\<^sub>F, \\<Psi>' \\<otimes>\n    (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n    \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F insertAssertion\n                 (\\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n\\<Psi>\\<^sub>P\\<rangle>)\n                 \\<Psi>' \\<longrightarrow>\n                      \\<langle>p \\<bullet>\n                               A\\<^sub>F, \\<Psi>' \\<otimes>\n    (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n    \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n                         A\\<^sub>G, \\<Psi>' \\<otimes>\n                                    (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                                    \\<Psi>\\<^sub>P\\<rangle>", "by(subst frameChainAlpha) (auto simp add: eqvts)"], ["proof (state)\nthis:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, \\<Psi>' \\<otimes>\n                      (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n     A\\<^sub>G, \\<Psi>' \\<otimes>\n                (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "moreover"], ["proof (state)\nthis:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, \\<Psi>' \\<otimes>\n                      (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n     A\\<^sub>G, \\<Psi>' \\<otimes>\n                (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                \\<Psi>\\<^sub>P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "have \"\\<langle>(q \\<bullet> A\\<^sub>G), \\<Psi>' \\<otimes> ((q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes> \\<Psi>\\<^sub>P)\\<rangle> \\<simeq>\\<^sub>F \\<langle>(q \\<bullet> A\\<^sub>G), (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes> (\\<Psi>\\<^sub>P \\<otimes> \\<Psi>')\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>q \\<bullet>\n             A\\<^sub>G, \\<Psi>' \\<otimes>\n                        (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                        \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>q \\<bullet>\n                                    A\\<^sub>G, (q \\<bullet>\n          \\<Psi>\\<^sub>G) \\<otimes>\n         \\<Psi>\\<^sub>P \\<otimes> \\<Psi>'\\<rangle>", "by(metis frameIntAssociativity FrameStatEqTrans frameIntCommutativity FrameStatEqSym)"], ["proof (state)\nthis:\n  \\<langle>q \\<bullet>\n           A\\<^sub>G, \\<Psi>' \\<otimes>\n                      (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>q \\<bullet>\n                                  A\\<^sub>G, (q \\<bullet>\n        \\<Psi>\\<^sub>G) \\<otimes>\n       \\<Psi>\\<^sub>P \\<otimes> \\<Psi>'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "hence \"\\<langle>(q \\<bullet> A\\<^sub>G), \\<Psi>' \\<otimes> ((q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes> \\<Psi>\\<^sub>P)\\<rangle> \\<simeq>\\<^sub>F \\<langle>(q \\<bullet> A\\<^sub>G), (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes> \\<Psi>\\<^sub>P'\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>q \\<bullet>\n           A\\<^sub>G, \\<Psi>' \\<otimes>\n                      (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>q \\<bullet>\n                                  A\\<^sub>G, (q \\<bullet>\n        \\<Psi>\\<^sub>G) \\<otimes>\n       \\<Psi>\\<^sub>P \\<otimes> \\<Psi>'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>q \\<bullet>\n             A\\<^sub>G, \\<Psi>' \\<otimes>\n                        (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                        \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>q \\<bullet>\n                                    A\\<^sub>G, (q \\<bullet>\n          \\<Psi>\\<^sub>G) \\<otimes>\n         \\<Psi>\\<^sub>P'\\<rangle>", "using \\<open>\\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\\<close>"], ["proof (prove)\nusing this:\n  \\<langle>q \\<bullet>\n           A\\<^sub>G, \\<Psi>' \\<otimes>\n                      (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>q \\<bullet>\n                                  A\\<^sub>G, (q \\<bullet>\n        \\<Psi>\\<^sub>G) \\<otimes>\n       \\<Psi>\\<^sub>P \\<otimes> \\<Psi>'\\<rangle>\n  \\<Psi>\\<^sub>P \\<otimes> \\<Psi>' \\<simeq> \\<Psi>\\<^sub>P'\n\ngoal (1 subgoal):\n 1. \\<langle>q \\<bullet>\n             A\\<^sub>G, \\<Psi>' \\<otimes>\n                        (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                        \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>q \\<bullet>\n                                    A\\<^sub>G, (q \\<bullet>\n          \\<Psi>\\<^sub>G) \\<otimes>\n         \\<Psi>\\<^sub>P'\\<rangle>", "by(blast intro: FrameStatEqTrans frameIntCompositionSym)"], ["proof (state)\nthis:\n  \\<langle>q \\<bullet>\n           A\\<^sub>G, \\<Psi>' \\<otimes>\n                      (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>q \\<bullet>\n                                  A\\<^sub>G, (q \\<bullet>\n        \\<Psi>\\<^sub>G) \\<otimes>\n       \\<Psi>\\<^sub>P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<simeq>\\<^sub>F \\<langle>p \\<bullet>\n                                   A\\<^sub>F, \\<Psi>' \\<otimes>\n        (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P\\<rangle>\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, \\<Psi>' \\<otimes>\n                      (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n     A\\<^sub>G, \\<Psi>' \\<otimes>\n                (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                \\<Psi>\\<^sub>P\\<rangle>\n  \\<langle>q \\<bullet>\n           A\\<^sub>G, \\<Psi>' \\<otimes>\n                      (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>q \\<bullet>\n                                  A\\<^sub>G, (q \\<bullet>\n        \\<Psi>\\<^sub>G) \\<otimes>\n       \\<Psi>\\<^sub>P'\\<rangle>", "have \"\\<langle>(p \\<bullet> A\\<^sub>F), (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(q \\<bullet> A\\<^sub>G), (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes> \\<Psi>\\<^sub>P'\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<simeq>\\<^sub>F \\<langle>p \\<bullet>\n                                   A\\<^sub>F, \\<Psi>' \\<otimes>\n        (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes> \\<Psi>\\<^sub>P\\<rangle>\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, \\<Psi>' \\<otimes>\n                      (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n     A\\<^sub>G, \\<Psi>' \\<otimes>\n                (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                \\<Psi>\\<^sub>P\\<rangle>\n  \\<langle>q \\<bullet>\n           A\\<^sub>G, \\<Psi>' \\<otimes>\n                      (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                      \\<Psi>\\<^sub>P\\<rangle> \\<simeq>\\<^sub>F \\<langle>q \\<bullet>\n                                  A\\<^sub>G, (q \\<bullet>\n        \\<Psi>\\<^sub>G) \\<otimes>\n       \\<Psi>\\<^sub>P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>p \\<bullet>\n             A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                        \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n        A\\<^sub>G, (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                   \\<Psi>\\<^sub>P'\\<rangle>", "by(rule FrameStatEqImpCompose)"], ["proof (state)\nthis:\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n      A\\<^sub>G, (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                 \\<Psi>\\<^sub>P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "with \\<open>A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P'\\<close> \\<open>(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P'\\<close> \\<open>(p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F\\<close> Sp"], ["proof (chain)\npicking this:\n  A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P'\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P'\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F\n  set p \\<subseteq> set A\\<^sub>F \\<times> set (p \\<bullet> A\\<^sub>F)\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n      A\\<^sub>G, (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                 \\<Psi>\\<^sub>P'\\<rangle>", "have \"\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>(q \\<bullet> A\\<^sub>G), (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes> \\<Psi>\\<^sub>P'\\<rangle>\""], ["proof (prove)\nusing this:\n  A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>P'\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>P'\n  (p \\<bullet> A\\<^sub>F) \\<sharp>* \\<Psi>\\<^sub>F\n  set p \\<subseteq> set A\\<^sub>F \\<times> set (p \\<bullet> A\\<^sub>F)\n  \\<langle>p \\<bullet>\n           A\\<^sub>F, (p \\<bullet> \\<Psi>\\<^sub>F) \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n      A\\<^sub>G, (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                 \\<Psi>\\<^sub>P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes>\n                        \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n        A\\<^sub>G, (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                   \\<Psi>\\<^sub>P'\\<rangle>", "by(subst frameChainAlpha) (auto simp add: eqvts)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n      A\\<^sub>G, (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                 \\<Psi>\\<^sub>P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "with \\<open>A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P'\\<close> \\<open>(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P'\\<close> \\<open>(q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>G\\<close> Sq"], ["proof (chain)\npicking this:\n  A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P'\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P'\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>G\n  set q \\<subseteq> set A\\<^sub>G \\<times> set (q \\<bullet> A\\<^sub>G)\n  \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n      A\\<^sub>G, (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                 \\<Psi>\\<^sub>P'\\<rangle>", "have \"\\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes> \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes> \\<Psi>\\<^sub>P'\\<rangle>\""], ["proof (prove)\nusing this:\n  A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>P'\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>P'\n  (q \\<bullet> A\\<^sub>G) \\<sharp>* \\<Psi>\\<^sub>G\n  set q \\<subseteq> set A\\<^sub>G \\<times> set (q \\<bullet> A\\<^sub>G)\n  \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>q \\<bullet>\n      A\\<^sub>G, (q \\<bullet> \\<Psi>\\<^sub>G) \\<otimes>\n                 \\<Psi>\\<^sub>P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes>\n                        \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n                   \\<Psi>\\<^sub>P'\\<rangle>", "by(subst frameChainAlpha) (auto simp add: eqvts)"], ["proof (state)\nthis:\n  \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n                 \\<Psi>\\<^sub>P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "with \\<open>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto>\\<tau> \\<prec> P''\\<close> FrP' \\<open>distinct A\\<^sub>P'\\<close>\n       \\<open>A\\<^sub>F \\<sharp>* P'\\<close> \\<open>A\\<^sub>G \\<sharp>* P'\\<close> \\<open>A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>G\\<close> \\<open>A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>F\\<close> \\<open>A\\<^sub>P' \\<sharp>* A\\<^sub>F\\<close> \\<open>A\\<^sub>P' \\<sharp>* A\\<^sub>G\\<close> \\<open>A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>F\\<close> \\<open>A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>G\\<close>"], ["proof (chain)\npicking this:\n  \\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n  extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\n  distinct A\\<^sub>P'\n  A\\<^sub>F \\<sharp>* P'\n  A\\<^sub>G \\<sharp>* P'\n  A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>G\n  A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>F\n  A\\<^sub>P' \\<sharp>* A\\<^sub>F\n  A\\<^sub>P' \\<sharp>* A\\<^sub>G\n  A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>F\n  A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>G\n  \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n                 \\<Psi>\\<^sub>P'\\<rangle>", "have \"\\<Psi>\\<^sub>G \\<rhd> P' \\<longmapsto>\\<tau> \\<prec> P''\""], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n  extractFrame P' = \\<langle>A\\<^sub>P', \\<Psi>\\<^sub>P'\\<rangle>\n  distinct A\\<^sub>P'\n  A\\<^sub>F \\<sharp>* P'\n  A\\<^sub>G \\<sharp>* P'\n  A\\<^sub>F \\<sharp>* \\<Psi>\\<^sub>G\n  A\\<^sub>G \\<sharp>* \\<Psi>\\<^sub>F\n  A\\<^sub>P' \\<sharp>* A\\<^sub>F\n  A\\<^sub>P' \\<sharp>* A\\<^sub>G\n  A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>F\n  A\\<^sub>P' \\<sharp>* \\<Psi>\\<^sub>G\n  \\<langle>A\\<^sub>F, \\<Psi>\\<^sub>F \\<otimes>\n                      \\<Psi>\\<^sub>P'\\<rangle> \\<hookrightarrow>\\<^sub>F \\<langle>A\\<^sub>G, \\<Psi>\\<^sub>G \\<otimes>\n                 \\<Psi>\\<^sub>P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>G \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''", "by(rule_tac transferTauFrame)"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>G \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n\ngoal (1 subgoal):\n 1. \\<And>P P' P''.\n       \\<lbrakk>\\<Psi>\\<^sub>F \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P'';\n        \\<Psi>\\<^sub>F \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        \\<lbrakk>extractFrame P =\n                 \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n         A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n         A\\<^sub>P \\<sharp>* P\\<rbrakk>\n        \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P';\n        extractFrame P = \\<langle>A\\<^sub>P, \\<Psi>\\<^sub>P\\<rangle>;\n        A\\<^sub>F \\<sharp>* P; A\\<^sub>G \\<sharp>* P;\n        A\\<^sub>P \\<sharp>* P\\<rbrakk>\n       \\<Longrightarrow> \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "with PChain"], ["proof (chain)\npicking this:\n  \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  \\<Psi>\\<^sub>G \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''", "show ?case"], ["proof (prove)\nusing this:\n  \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  \\<Psi>\\<^sub>G \\<rhd> P' \\<longmapsto> \\<tau> \\<prec> P''\n\ngoal (1 subgoal):\n 1. \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''", "by(simp add: r_into_rtrancl rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  \\<Psi>\\<^sub>G \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P''\n\ngoal:\nNo subgoals!", "qed"], ["", "coinductive quiet :: \"('a, 'b, 'c) psi \\<Rightarrow> bool\"\n  where \"\\<lbrakk>\\<forall>\\<Psi>. (insertAssertion (extractFrame P) \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle> \\<and> \n              (\\<forall>Rs. \\<Psi> \\<rhd> P \\<longmapsto> Rs \\<longrightarrow> (\\<exists>P'. Rs = \\<tau> \\<prec> P' \\<and> quiet P')))\\<rbrakk> \\<Longrightarrow> quiet P\""], ["", "lemma quietFrame:\n  fixes \\<Psi> :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n\n  assumes \"quiet P\"\n\n  shows \"insertAssertion (extractFrame P) \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>", "using assms"], ["proof (prove)\nusing this:\n  quiet P\n\ngoal (1 subgoal):\n 1. insertAssertion (extractFrame P)\n     \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>", "by(erule_tac quiet.cases) force"], ["", "lemma quietTransition:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   Rs :: \"('a, 'b, 'c) residual\"\n\n  assumes \"quiet P\"\n  and     \"\\<Psi> \\<rhd> P \\<longmapsto> Rs\"\n\n  obtains P' where \"Rs = \\<tau> \\<prec> P'\" and \"quiet P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>Rs = \\<tau> \\<prec> P'; quiet P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  quiet P\n  \\<Psi> \\<rhd> P \\<longmapsto> Rs\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>Rs = \\<tau> \\<prec> P'; quiet P'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule_tac quiet.cases) force"], ["", "lemma quietEqvt:\n  fixes P :: \"('a, 'b, 'c) psi\"\n  and   p :: \"name prm\"\n\n  assumes \"quiet P\"\n\n  shows \"quiet(p \\<bullet> P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quiet (p \\<bullet> P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. quiet (p \\<bullet> P)", "let ?X = \"\\<lambda>P. \\<exists>p::name prm. quiet(p \\<bullet> P)\""], ["proof (state)\ngoal (1 subgoal):\n 1. quiet (p \\<bullet> P)", "from assms"], ["proof (chain)\npicking this:\n  quiet P", "have \"?X (p \\<bullet> P)\""], ["proof (prove)\nusing this:\n  quiet P\n\ngoal (1 subgoal):\n 1. \\<exists>pa. quiet (pa \\<bullet> p \\<bullet> P)", "by(rule_tac x=\"rev p\" in exI) auto"], ["proof (state)\nthis:\n  \\<exists>pa. quiet (pa \\<bullet> p \\<bullet> P)\n\ngoal (1 subgoal):\n 1. quiet (p \\<bullet> P)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>pa. quiet (pa \\<bullet> p \\<bullet> P)\n\ngoal (1 subgoal):\n 1. quiet (p \\<bullet> P)", "apply coinduct"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>p. quiet (p \\<bullet> x) \\<Longrightarrow>\n       \\<exists>P.\n          x = P \\<and>\n          (\\<forall>\\<Psi>.\n              insertAssertion (extractFrame P)\n               \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle> \\<and>\n              (\\<forall>Rs.\n                  \\<Psi> \\<rhd> P \\<longmapsto> Rs \\<longrightarrow>\n                  (\\<exists>P'.\n                      Rs = \\<tau> \\<prec> P' \\<and>\n                      ((\\<exists>p. quiet (p \\<bullet> P')) \\<or>\n                       quiet P'))))", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p.\n       quiet (p \\<bullet> x) \\<Longrightarrow>\n       \\<exists>P.\n          x = P \\<and>\n          (\\<forall>\\<Psi>.\n              insertAssertion (extractFrame P)\n               \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle> \\<and>\n              (\\<forall>Rs.\n                  \\<Psi> \\<rhd> P \\<longmapsto> Rs \\<longrightarrow>\n                  (\\<exists>P'.\n                      Rs = \\<tau> \\<prec> P' \\<and>\n                      ((\\<exists>p. quiet (p \\<bullet> P')) \\<or>\n                       quiet P'))))", "apply(rule_tac x=x in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p.\n       quiet (p \\<bullet> x) \\<Longrightarrow>\n       x = x \\<and>\n       (\\<forall>\\<Psi>.\n           insertAssertion (extractFrame x)\n            \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle> \\<and>\n           (\\<forall>Rs.\n               \\<Psi> \\<rhd> x \\<longmapsto> Rs \\<longrightarrow>\n               (\\<exists>P'.\n                   Rs = \\<tau> \\<prec> P' \\<and>\n                   ((\\<exists>p. quiet (p \\<bullet> P')) \\<or> quiet P'))))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x p \\<Psi>.\n       quiet (p \\<bullet> x) \\<Longrightarrow>\n       insertAssertion (extractFrame x)\n        \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\n 2. \\<And>x p \\<Psi> Rs.\n       \\<lbrakk>quiet (p \\<bullet> x);\n        \\<Psi> \\<rhd> x \\<longmapsto> Rs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            Rs = \\<tau> \\<prec> P' \\<and>\n                            ((\\<exists>p. quiet (p \\<bullet> P')) \\<or>\n                             quiet P')", "apply(drule_tac \\<Psi>=\"p \\<bullet> \\<Psi>\" in quietFrame)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x p \\<Psi>.\n       insertAssertion (extractFrame (p \\<bullet> x))\n        (p \\<bullet>\n         \\<Psi>) \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, p \\<bullet>\n                 \\<Psi>\\<rangle> \\<Longrightarrow>\n       insertAssertion (extractFrame x)\n        \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\n 2. \\<And>x p \\<Psi> Rs.\n       \\<lbrakk>quiet (p \\<bullet> x);\n        \\<Psi> \\<rhd> x \\<longmapsto> Rs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            Rs = \\<tau> \\<prec> P' \\<and>\n                            ((\\<exists>p. quiet (p \\<bullet> P')) \\<or>\n                             quiet P')", "apply(drule_tac p=\"rev p\" in FrameStatEqClosed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x p \\<Psi>.\n       rev p \\<bullet>\n       insertAssertion (extractFrame (p \\<bullet> x))\n        (p \\<bullet>\n         \\<Psi>) \\<simeq>\\<^sub>F rev p \\<bullet>\n                                  \\<langle>\\<epsilon>, p \\<bullet>\n                 \\<Psi>\\<rangle> \\<Longrightarrow>\n       insertAssertion (extractFrame x)\n        \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\n 2. \\<And>x p \\<Psi> Rs.\n       \\<lbrakk>quiet (p \\<bullet> x);\n        \\<Psi> \\<rhd> x \\<longmapsto> Rs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            Rs = \\<tau> \\<prec> P' \\<and>\n                            ((\\<exists>p. quiet (p \\<bullet> P')) \\<or>\n                             quiet P')", "apply(simp add: eqvts)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p \\<Psi> Rs.\n       \\<lbrakk>quiet (p \\<bullet> x);\n        \\<Psi> \\<rhd> x \\<longmapsto> Rs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            Rs = \\<tau> \\<prec> P' \\<and>\n                            ((\\<exists>p. quiet (p \\<bullet> P')) \\<or>\n                             quiet P')", "apply(drule_tac pi=p in semantics.eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p \\<Psi> Rs.\n       \\<lbrakk>quiet (p \\<bullet> x);\n        p \\<bullet>\n        \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> p \\<bullet> Rs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            Rs = \\<tau> \\<prec> P' \\<and>\n                            ((\\<exists>p. quiet (p \\<bullet> P')) \\<or>\n                             quiet P')", "apply(erule_tac quietTransition)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x p \\<Psi> Rs.\n       p \\<bullet>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     x \\<longmapsto> p \\<bullet> Rs \\<Longrightarrow>\n       ?\\<Psi>12 x p \\<Psi>\n        Rs \\<rhd> p \\<bullet> x \\<longmapsto> ?Rs12 x p \\<Psi> Rs\n 2. \\<And>x p \\<Psi> Rs P'.\n       \\<lbrakk>p \\<bullet>\n                \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> p \\<bullet> Rs;\n        ?Rs12 x p \\<Psi> Rs = \\<tau> \\<prec> P'; quiet P'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            Rs = \\<tau> \\<prec> P' \\<and>\n                            ((\\<exists>p. quiet (p \\<bullet> P')) \\<or>\n                             quiet P')", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p \\<Psi> Rs P'.\n       \\<lbrakk>p \\<bullet>\n                \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> p \\<bullet> Rs;\n        p \\<bullet> Rs = \\<tau> \\<prec> P'; quiet P'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            Rs = \\<tau> \\<prec> P' \\<and>\n                            ((\\<exists>p. quiet (p \\<bullet> P')) \\<or>\n                             quiet P')", "apply(rule_tac x=\"rev p \\<bullet> P'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p \\<Psi> Rs P'.\n       \\<lbrakk>p \\<bullet>\n                \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> p \\<bullet> Rs;\n        p \\<bullet> Rs = \\<tau> \\<prec> P'; quiet P'\\<rbrakk>\n       \\<Longrightarrow> Rs = \\<tau> \\<prec> rev p \\<bullet> P' \\<and>\n                         ((\\<exists>pa.\n                              quiet (pa \\<bullet> rev p \\<bullet> P')) \\<or>\n                          quiet (rev p \\<bullet> P'))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x p \\<Psi> Rs P'.\n       \\<lbrakk>p \\<bullet>\n                \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> \\<tau> \\<prec> P';\n        p \\<bullet> Rs = \\<tau> \\<prec> P'; quiet P'\\<rbrakk>\n       \\<Longrightarrow> Rs = \\<tau> \\<prec> rev p \\<bullet> P'\n 2. \\<And>x p \\<Psi> Rs P'.\n       \\<lbrakk>p \\<bullet>\n                \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> \\<tau> \\<prec> P';\n        p \\<bullet> Rs = \\<tau> \\<prec> P'; quiet P';\n        \\<not> quiet (rev p \\<bullet> P')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pa.\n                            quiet (pa \\<bullet> rev p \\<bullet> P')", "apply(drule_tac pi=\"rev p\" in pt_bij3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x p \\<Psi> Rs P'.\n       \\<lbrakk>p \\<bullet>\n                \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> \\<tau> \\<prec> P';\n        quiet P';\n        rev p \\<bullet> p \\<bullet> Rs =\n        rev p \\<bullet> \\<tau> \\<prec> P'\\<rbrakk>\n       \\<Longrightarrow> Rs = \\<tau> \\<prec> rev p \\<bullet> P'\n 2. \\<And>x p \\<Psi> Rs P'.\n       \\<lbrakk>p \\<bullet>\n                \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> \\<tau> \\<prec> P';\n        p \\<bullet> Rs = \\<tau> \\<prec> P'; quiet P';\n        \\<not> quiet (rev p \\<bullet> P')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pa.\n                            quiet (pa \\<bullet> rev p \\<bullet> P')", "apply(simp add: eqvts)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p \\<Psi> Rs P'.\n       \\<lbrakk>p \\<bullet>\n                \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> \\<tau> \\<prec> P';\n        p \\<bullet> Rs = \\<tau> \\<prec> P'; quiet P';\n        \\<not> quiet (rev p \\<bullet> P')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>pa.\n                            quiet (pa \\<bullet> rev p \\<bullet> P')", "apply(rule_tac x=p in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x p \\<Psi> Rs P'.\n       \\<lbrakk>p \\<bullet>\n                \\<Psi> \\<rhd> p \\<bullet> x \\<longmapsto> \\<tau> \\<prec> P';\n        p \\<bullet> Rs = \\<tau> \\<prec> P'; quiet P';\n        \\<not> quiet (rev p \\<bullet> P')\\<rbrakk>\n       \\<Longrightarrow> quiet (p \\<bullet> rev p \\<bullet> P')", "by simp"], ["proof (state)\nthis:\n  quiet (p \\<bullet> P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quietOutput:\n  fixes \\<Psi>   :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n  and   P'   :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\"\n  and     \"quiet P\"\n\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P'\n  quiet P\n\ngoal (1 subgoal):\n 1. False", "apply(erule_tac quiet.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Pa.\n       \\<lbrakk>\\<Psi> \\<rhd> P \\<longmapsto> M\\<lparr>\\<nu>*xvec\\<rparr>\\<langle>N\\<rangle> \\<prec> P';\n        P = Pa;\n        \\<forall>\\<Psi>.\n           insertAssertion (extractFrame Pa)\n            \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle> \\<and>\n           (\\<forall>Rs.\n               \\<Psi> \\<rhd> Pa \\<longmapsto> Rs \\<longrightarrow>\n               (\\<exists>P'.\n                   Rs = \\<tau> \\<prec> P' \\<and> quiet P'))\\<rbrakk>\n       \\<Longrightarrow> False", "by(force simp add: residualInject)"], ["", "lemma quietInput:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   M  :: 'a\n  and   N  :: 'a\n  and   P' :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>M\\<lparr>N\\<rparr> \\<prec> P'\"\n  and     \"quiet P\"\n\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<longmapsto> M\\<lparr>N\\<rparr> \\<prec> P'\n  quiet P\n\ngoal (1 subgoal):\n 1. False", "by(erule_tac quiet.cases) (force simp add: residualInject)"], ["", "lemma quietTau:\n  fixes \\<Psi> :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"\\<Psi> \\<rhd> P \\<longmapsto>\\<tau> \\<prec> P'\"\n  and     \"insertAssertion (extractFrame P) \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\"\n  and     \"quiet P\"\n\n  shows \"quiet P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quiet P'", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<longmapsto> \\<tau> \\<prec> P'\n  insertAssertion (extractFrame P)\n   \\<Psi> \\<simeq>\\<^sub>F \\<langle>\\<epsilon>, \\<Psi>\\<rangle>\n  quiet P\n\ngoal (1 subgoal):\n 1. quiet P'", "by(erule_tac quiet.cases) (force simp add: residualInject)"], ["", "lemma tauChainCases[consumes 1, case_names TauBase TauStep]:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   P' :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\"\n  and     \"P = P' \\<Longrightarrow> Prop\"\n  and     \"\\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P' \\<Longrightarrow> Prop\"\n\n  shows Prop"], ["proof (prove)\ngoal (1 subgoal):\n 1. Prop", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sup>^\\<^sub>\\<tau> P'\n  P = P' \\<Longrightarrow> Prop\n  \\<Psi> \\<rhd> P \\<Longrightarrow>\\<^sub>\\<tau> P' \\<Longrightarrow> Prop\n\ngoal (1 subgoal):\n 1. Prop", "by(blast elim: rtranclE dest: rtrancl_into_trancl1)"], ["", "end"], ["", "end"]]}