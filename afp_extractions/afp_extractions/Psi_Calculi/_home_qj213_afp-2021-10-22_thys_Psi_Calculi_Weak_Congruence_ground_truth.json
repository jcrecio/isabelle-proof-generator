{"file_name": "/home/qj213/afp-2021-10-22/thys/Psi_Calculi/Weak_Congruence.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Psi_Calculi", "problem_names": ["lemma weakCongE:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   \\<sigma> :: \"(name list \\<times> 'a list) list\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n  \"wellFormedSubst \\<sigma>\"\n\n  shows \"\\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]\"", "lemma weakCongI[case_names cWeakPsiCong]:\n  fixes P   :: \"('a, 'b, 'c) psi\"\n  and   Q   :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<And>\\<Psi> \\<sigma>. wellFormedSubst \\<sigma> \\<Longrightarrow> \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]\"\n\n  shows \"P \\<doteq>\\<^sub>c Q\"", "lemma weakCongClosed:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   p :: \"name prm\"\n  \n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"(p \\<bullet> P) \\<doteq>\\<^sub>c (p \\<bullet> Q)\"", "lemma weakCongReflexive:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n\n  shows \"P \\<doteq>\\<^sub>c P\"", "lemma weakCongSym:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   Q  :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"Q \\<doteq>\\<^sub>c P\"", "lemma weakCongTransitive:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<doteq> Q\"\n  and     \"\\<Psi> \\<rhd> Q \\<doteq> R\"\n\n  shows \"\\<Psi> \\<rhd> P \\<doteq> R\"", "lemma weakCongWeakBisim:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<approx> Q\"", "lemma weakCongWeakPsiCong:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<doteq> Q\"", "lemma strongBisimWeakCong:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<sim>\\<^sub>s Q\"\n\n  shows \"P \\<doteq>\\<^sub>c Q\"", "lemma structCongWeakCong:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<equiv>\\<^sub>s Q\"\n\n  shows \"P \\<doteq>\\<^sub>c Q\"", "lemma weakCongUnfold:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   \\<sigma> :: \"(name list \\<times> 'a list) list\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n  and     \"wellFormedSubst \\<sigma>\"\n\n  shows \"P[<\\<sigma>>] \\<doteq>\\<^sub>c Q[<\\<sigma>>]\"", "lemma weakCongOutputPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   M :: 'a\n  and   N :: 'a\n  \n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"M\\<langle>N\\<rangle>.P \\<doteq>\\<^sub>c M\\<langle>N\\<rangle>.Q\"", "lemma weakCongInputPres:\n  fixes \\<Psi>    :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n  and     \"distinct xvec\"\n\n  shows \"M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<doteq>\\<^sub>c M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\"", "lemma weakCongCasePresAux:\n  fixes \\<Psi>   :: 'b\n  and   CsP :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n  and   CsQ :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n  \n  assumes C1: \"\\<And>\\<phi> P. (\\<phi>, P) mem CsP \\<Longrightarrow> \\<exists>Q. (\\<phi>, Q) mem CsQ \\<and> guarded Q \\<and> P \\<doteq>\\<^sub>c Q\"\n  and     C2: \"\\<And>\\<phi> Q. (\\<phi>, Q) mem CsQ \\<Longrightarrow> \\<exists>P. (\\<phi>, P) mem CsP \\<and> guarded P \\<and> P \\<doteq>\\<^sub>c Q\"\n\n  shows \"Cases CsP \\<doteq>\\<^sub>c Cases CsQ\"", "lemma weakCongParPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"P \\<parallel> R \\<doteq>\\<^sub>c Q \\<parallel> R\"", "lemma weakCongResPres:\n  fixes P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   x :: name\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>P \\<doteq>\\<^sub>c \\<lparr>\\<nu>x\\<rparr>Q\"", "lemma weakCongBangPres:\n  fixes P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n \n  assumes \"P \\<doteq>\\<^sub>c Q\"\n  and     \"guarded P\"\n  and     \"guarded Q\"\n\n  shows \"!P \\<doteq>\\<^sub>c !Q\""], "translations": [["", "lemma weakCongE:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   \\<sigma> :: \"(name list \\<times> 'a list) list\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n  \"wellFormedSubst \\<sigma>\"\n\n  shows \"\\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]", "using assms"], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]", "by(auto simp add: weakCongruence_def)"], ["", "lemma weakCongI[case_names cWeakPsiCong]:\n  fixes P   :: \"('a, 'b, 'c) psi\"\n  and   Q   :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<And>\\<Psi> \\<sigma>. wellFormedSubst \\<sigma> \\<Longrightarrow> \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]\"\n\n  shows \"P \\<doteq>\\<^sub>c Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<doteq>\\<^sub>c Q", "using assms"], ["proof (prove)\nusing this:\n  wellFormedSubst ?\\<sigma> \\<Longrightarrow>\n  ?\\<Psi> \\<rhd> P[<?\\<sigma>>] \\<doteq> Q[<?\\<sigma>>]\n\ngoal (1 subgoal):\n 1. P \\<doteq>\\<^sub>c Q", "by(auto simp add: weakCongruence_def)"], ["", "lemma weakCongClosed:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   p :: \"name prm\"\n  \n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"(p \\<bullet> P) \\<doteq>\\<^sub>c (p \\<bullet> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<doteq>\\<^sub>c p \\<bullet> Q", "proof(induct rule: weakCongI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     P[<\\<sigma>>] \\<doteq> p \\<bullet> Q[<\\<sigma>>]", "case(cWeakPsiCong \\<Psi> \\<sigma>)"], ["proof (state)\nthis:\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     P[<\\<sigma>>] \\<doteq> p \\<bullet> Q[<\\<sigma>>]", "note \\<open>P \\<doteq>\\<^sub>c Q\\<close>"], ["proof (state)\nthis:\n  P \\<doteq>\\<^sub>c Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     P[<\\<sigma>>] \\<doteq> p \\<bullet> Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  P \\<doteq>\\<^sub>c Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     P[<\\<sigma>>] \\<doteq> p \\<bullet> Q[<\\<sigma>>]", "from \\<open>wellFormedSubst \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  wellFormedSubst \\<sigma>", "have \"wellFormedSubst (rev p \\<bullet> \\<sigma>)\""], ["proof (prove)\nusing this:\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. wellFormedSubst (rev p \\<bullet> \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  wellFormedSubst (rev p \\<bullet> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     P[<\\<sigma>>] \\<doteq> p \\<bullet> Q[<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  P \\<doteq>\\<^sub>c Q\n  wellFormedSubst (rev p \\<bullet> \\<sigma>)", "have \"((rev p) \\<bullet> \\<Psi>) \\<rhd> P[<(rev p \\<bullet> \\<sigma>)>] \\<doteq>  Q[<(rev p \\<bullet> \\<sigma>)>]\""], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n  wellFormedSubst (rev p \\<bullet> \\<sigma>)\n\ngoal (1 subgoal):\n 1. rev p \\<bullet>\n    \\<Psi> \\<rhd> P[<rev p \\<bullet>\n                     \\<sigma>>] \\<doteq> Q[<rev p \\<bullet> \\<sigma>>]", "by(rule weakCongE)"], ["proof (state)\nthis:\n  rev p \\<bullet>\n  \\<Psi> \\<rhd> P[<rev p \\<bullet>\n                   \\<sigma>>] \\<doteq> Q[<rev p \\<bullet> \\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> p \\<bullet>\n                     P[<\\<sigma>>] \\<doteq> p \\<bullet> Q[<\\<sigma>>]", "thus ?case"], ["proof (prove)\nusing this:\n  rev p \\<bullet>\n  \\<Psi> \\<rhd> P[<rev p \\<bullet>\n                   \\<sigma>>] \\<doteq> Q[<rev p \\<bullet> \\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> p \\<bullet>\n                  P[<\\<sigma>>] \\<doteq> p \\<bullet> Q[<\\<sigma>>]", "by(drule_tac p=p in weakPsiCongClosed) (simp add: eqvts)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> p \\<bullet> P[<\\<sigma>>] \\<doteq> p \\<bullet> Q[<\\<sigma>>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakCongReflexive:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n\n  shows \"P \\<doteq>\\<^sub>c P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<doteq>\\<^sub>c P", "by(auto intro: weakCongI weakPsiCongReflexive)"], ["", "lemma weakCongSym:\n  fixes \\<Psi>  :: 'b\n  and   P  :: \"('a, 'b, 'c) psi\"\n  and   Q  :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"Q \\<doteq>\\<^sub>c P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<doteq>\\<^sub>c P", "using assms"], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n\ngoal (1 subgoal):\n 1. Q \\<doteq>\\<^sub>c P", "by(auto simp add: weakCongruence_def weakPsiCongSym)"], ["", "lemma weakCongTransitive:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n\n  assumes \"\\<Psi> \\<rhd> P \\<doteq> Q\"\n  and     \"\\<Psi> \\<rhd> Q \\<doteq> R\"\n\n  shows \"\\<Psi> \\<rhd> P \\<doteq> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<doteq> R", "using assms"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P \\<doteq> Q\n  \\<Psi> \\<rhd> Q \\<doteq> R\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<doteq> R", "by(auto intro: weakCongI weakPsiCongTransitive dest: weakCongE)"], ["", "lemma weakCongWeakBisim:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<approx> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<approx> Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<approx> Q", "apply(drule_tac \\<sigma>=\"[]\" in weakCongE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wellFormedSubst []\n 2. ?\\<Psi>1 \\<rhd> P[<[]>] \\<doteq> Q[<[]>] \\<Longrightarrow>\n    \\<Psi> \\<rhd> P \\<approx> Q", "by(auto dest: weakPsiCongE)"], ["", "lemma weakCongWeakPsiCong:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"\\<Psi> \\<rhd> P \\<doteq> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<doteq> Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P \\<doteq> Q", "by(drule_tac weakCongE[where \\<Psi>=\\<Psi> and \\<sigma>=\"[]\"]) auto"], ["", "lemma strongBisimWeakCong:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<sim>\\<^sub>s Q\"\n\n  shows \"P \\<doteq>\\<^sub>c Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<doteq>\\<^sub>c Q", "proof(induct rule: weakCongI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]", "case(cWeakPsiCong \\<Psi> \\<sigma>)"], ["proof (state)\nthis:\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]", "from assms \\<open>wellFormedSubst \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  P \\<sim>\\<^sub>s Q\n  wellFormedSubst \\<sigma>", "have \"P[<\\<sigma>>] \\<sim> Q[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sub>s Q\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. P[<\\<sigma>>] \\<sim> Q[<\\<sigma>>]", "by(rule closeSubstE)"], ["proof (state)\nthis:\n  P[<\\<sigma>>] \\<sim> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]", "hence \"\\<Psi> \\<rhd> P[<\\<sigma>>] \\<sim> Q[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  P[<\\<sigma>>] \\<sim> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P[<\\<sigma>>] \\<sim> Q[<\\<sigma>>]", "by(metis bisimE(3) statEqBisim Identity Commutativity)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P[<\\<sigma>>] \\<sim> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P[<\\<sigma>>] \\<sim> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]", "by(rule strongBisimWeakPsiCong)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P[<\\<sigma>>] \\<doteq> Q[<\\<sigma>>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma structCongWeakCong:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n\n  assumes \"P \\<equiv>\\<^sub>s Q\"\n\n  shows \"P \\<doteq>\\<^sub>c Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<doteq>\\<^sub>c Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<equiv>\\<^sub>s Q\n\ngoal (1 subgoal):\n 1. P \\<doteq>\\<^sub>c Q", "by(metis strongBisimWeakCong structCongBisimSubst)"], ["", "lemma weakCongUnfold:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   \\<sigma> :: \"(name list \\<times> 'a list) list\"\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n  and     \"wellFormedSubst \\<sigma>\"\n\n  shows \"P[<\\<sigma>>] \\<doteq>\\<^sub>c Q[<\\<sigma>>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P[<\\<sigma>>] \\<doteq>\\<^sub>c Q[<\\<sigma>>]", "proof(induct rule: weakCongI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>'.\n       wellFormedSubst \\<sigma>' \\<Longrightarrow>\n       \\<Psi> \\<rhd> P[<\\<sigma>>][<\\<sigma>'>] \\<doteq> Q[<\\<sigma>>][<\\<sigma>'>]", "case(cWeakPsiCong \\<Psi> \\<sigma>')"], ["proof (state)\nthis:\n  wellFormedSubst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>'.\n       wellFormedSubst \\<sigma>' \\<Longrightarrow>\n       \\<Psi> \\<rhd> P[<\\<sigma>>][<\\<sigma>'>] \\<doteq> Q[<\\<sigma>>][<\\<sigma>'>]", "with \\<open>wellFormedSubst \\<sigma>\\<close> \\<open>wellFormedSubst \\<sigma>'\\<close>"], ["proof (chain)\npicking this:\n  wellFormedSubst \\<sigma>\n  wellFormedSubst \\<sigma>'\n  wellFormedSubst \\<sigma>'", "have \"wellFormedSubst(\\<sigma>@\\<sigma>')\""], ["proof (prove)\nusing this:\n  wellFormedSubst \\<sigma>\n  wellFormedSubst \\<sigma>'\n  wellFormedSubst \\<sigma>'\n\ngoal (1 subgoal):\n 1. wellFormedSubst (\\<sigma> @ \\<sigma>')", "by simp"], ["proof (state)\nthis:\n  wellFormedSubst (\\<sigma> @ \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>'.\n       wellFormedSubst \\<sigma>' \\<Longrightarrow>\n       \\<Psi> \\<rhd> P[<\\<sigma>>][<\\<sigma>'>] \\<doteq> Q[<\\<sigma>>][<\\<sigma>'>]", "with \\<open>P \\<doteq>\\<^sub>c Q\\<close>"], ["proof (chain)\npicking this:\n  P \\<doteq>\\<^sub>c Q\n  wellFormedSubst (\\<sigma> @ \\<sigma>')", "have \"\\<Psi> \\<rhd> P[<(\\<sigma>@\\<sigma>')>] \\<doteq> Q[<(\\<sigma>@\\<sigma>')>]\""], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n  wellFormedSubst (\\<sigma> @ \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P[<(\\<sigma> @\n                      \\<sigma>')>] \\<doteq> Q[<(\\<sigma> @ \\<sigma>')>]", "by(rule weakCongE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P[<(\\<sigma> @\n                    \\<sigma>')>] \\<doteq> Q[<(\\<sigma> @ \\<sigma>')>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>'.\n       wellFormedSubst \\<sigma>' \\<Longrightarrow>\n       \\<Psi> \\<rhd> P[<\\<sigma>>][<\\<sigma>'>] \\<doteq> Q[<\\<sigma>>][<\\<sigma>'>]", "thus \"\\<Psi> \\<rhd> P[<\\<sigma>>][<\\<sigma>'>] \\<doteq> Q[<\\<sigma>>][<\\<sigma>'>]\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> P[<(\\<sigma> @\n                    \\<sigma>')>] \\<doteq> Q[<(\\<sigma> @ \\<sigma>')>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> P[<\\<sigma>>][<\\<sigma>'>] \\<doteq> Q[<\\<sigma>>][<\\<sigma>'>]", "by simp"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> P[<\\<sigma>>][<\\<sigma>'>] \\<doteq> Q[<\\<sigma>>][<\\<sigma>'>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakCongOutputPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   M :: 'a\n  and   N :: 'a\n  \n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"M\\<langle>N\\<rangle>.P \\<doteq>\\<^sub>c M\\<langle>N\\<rangle>.Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M\\<langle>N\\<rangle>.P \\<doteq>\\<^sub>c M\\<langle>N\\<rangle>.Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n\ngoal (1 subgoal):\n 1. M\\<langle>N\\<rangle>.P \\<doteq>\\<^sub>c M\\<langle>N\\<rangle>.Q", "by(fastforce intro: weakCongI weakCongE weakPsiCongOutputPres)"], ["", "lemma weakCongInputPres:\n  fixes \\<Psi>    :: 'b\n  and   P    :: \"('a, 'b, 'c) psi\"\n  and   Q    :: \"('a, 'b, 'c) psi\"\n  and   M    :: 'a\n  and   xvec :: \"name list\"\n  and   N    :: 'a\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n  and     \"distinct xvec\"\n\n  shows \"M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<doteq>\\<^sub>c M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M\\<lparr>\\<lambda>*xvec N\\<rparr>.P \\<doteq>\\<^sub>c M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q", "proof(induct rule: weakCongI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "case(cWeakPsiCong \\<Psi> \\<sigma>)"], ["proof (state)\nthis:\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "obtain p where \"(p \\<bullet> xvec) \\<sharp>* \\<sigma>\"\n             and \"(p \\<bullet> xvec) \\<sharp>* P\" and \"(p \\<bullet> xvec) \\<sharp>* Q\" and \"(p \\<bullet> xvec) \\<sharp>* \\<Psi>\" and \"(p \\<bullet> xvec) \\<sharp>* N\"\n             and S: \"set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> xvec) \\<sharp>* \\<sigma>;\n         (p \\<bullet> xvec) \\<sharp>* P; (p \\<bullet> xvec) \\<sharp>* Q;\n         (p \\<bullet> xvec) \\<sharp>* \\<Psi>;\n         (p \\<bullet> xvec) \\<sharp>* N;\n         set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule_tac c=\"(\\<sigma>, P, Q, \\<Psi>, N)\" in name_list_avoiding) auto"], ["proof (state)\nthis:\n  (p \\<bullet> xvec) \\<sharp>* \\<sigma>\n  (p \\<bullet> xvec) \\<sharp>* P\n  (p \\<bullet> xvec) \\<sharp>* Q\n  (p \\<bullet> xvec) \\<sharp>* \\<Psi>\n  (p \\<bullet> xvec) \\<sharp>* N\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "from \\<open>P \\<doteq>\\<^sub>c Q\\<close>"], ["proof (chain)\npicking this:\n  P \\<doteq>\\<^sub>c Q", "have \"(p \\<bullet> P) \\<doteq>\\<^sub>c (p \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<doteq>\\<^sub>c p \\<bullet> Q", "by(rule weakCongClosed)"], ["proof (state)\nthis:\n  p \\<bullet> P \\<doteq>\\<^sub>c p \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "{"], ["proof (state)\nthis:\n  p \\<bullet> P \\<doteq>\\<^sub>c p \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "fix Tvec :: \"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "from \\<open>(p \\<bullet> P) \\<doteq>\\<^sub>c (p \\<bullet> Q)\\<close> \\<open>wellFormedSubst \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  p \\<bullet> P \\<doteq>\\<^sub>c p \\<bullet> Q\n  wellFormedSubst \\<sigma>", "have \"(p \\<bullet> P)[<\\<sigma>>] \\<doteq>\\<^sub>c (p \\<bullet> Q)[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  p \\<bullet> P \\<doteq>\\<^sub>c p \\<bullet> Q\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. p \\<bullet> P[<\\<sigma>>] \\<doteq>\\<^sub>c p \\<bullet> Q[<\\<sigma>>]", "by(rule weakCongUnfold)"], ["proof (state)\nthis:\n  p \\<bullet> P[<\\<sigma>>] \\<doteq>\\<^sub>c p \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> P[<\\<sigma>>] \\<doteq>\\<^sub>c p \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "assume \"length xvec = length Tvec\" and \"distinct xvec\""], ["proof (state)\nthis:\n  length xvec = length Tvec\n  distinct xvec\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  p \\<bullet> P[<\\<sigma>>] \\<doteq>\\<^sub>c p \\<bullet> Q[<\\<sigma>>]\n  length xvec = length Tvec\n  distinct xvec", "have \"\\<Psi> \\<rhd> ((p \\<bullet> P)[<\\<sigma>>])[(p \\<bullet> xvec)::=Tvec] \\<doteq> ((p \\<bullet> Q)[<\\<sigma>>])[(p \\<bullet> xvec)::=Tvec]\""], ["proof (prove)\nusing this:\n  p \\<bullet> P[<\\<sigma>>] \\<doteq>\\<^sub>c p \\<bullet> Q[<\\<sigma>>]\n  length xvec = length Tvec\n  distinct xvec\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> p \\<bullet>\n                  P[<\\<sigma>>][(p \\<bullet>\n                                 xvec)::=Tvec] \\<doteq> p \\<bullet>\n                  Q[<\\<sigma>>][(p \\<bullet> xvec)::=Tvec]", "by(drule_tac weakCongE[where \\<sigma>=\"[((p \\<bullet> xvec), Tvec)]\"]) auto"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<\\<sigma>>][(p \\<bullet>\n                               xvec)::=Tvec] \\<doteq> p \\<bullet>\n                Q[<\\<sigma>>][(p \\<bullet> xvec)::=Tvec]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "hence \"\\<Psi> \\<rhd> ((p \\<bullet> P)[<\\<sigma>>])[(p \\<bullet> xvec)::=Tvec] \\<approx> ((p \\<bullet> Q)[<\\<sigma>>])[(p \\<bullet> xvec)::=Tvec]\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<\\<sigma>>][(p \\<bullet>\n                               xvec)::=Tvec] \\<doteq> p \\<bullet>\n                Q[<\\<sigma>>][(p \\<bullet> xvec)::=Tvec]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> p \\<bullet>\n                  P[<\\<sigma>>][(p \\<bullet>\n                                 xvec)::=Tvec] \\<approx> p \\<bullet>\n                   Q[<\\<sigma>>][(p \\<bullet> xvec)::=Tvec]", "by(rule weakPsiCongE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> p \\<bullet>\n                P[<\\<sigma>>][(p \\<bullet>\n                               xvec)::=Tvec] \\<approx> p \\<bullet>\n                 Q[<\\<sigma>>][(p \\<bullet> xvec)::=Tvec]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "}"], ["proof (state)\nthis:\n  \\<lbrakk>length xvec = length ?Tvec2; distinct xvec\\<rbrakk>\n  \\<Longrightarrow> \\<Psi> \\<rhd> p \\<bullet>\n                                  P[<\\<sigma>>][(p \\<bullet>\n           xvec)::=?Tvec2] \\<approx> p \\<bullet>\n                                     Q[<\\<sigma>>][(p \\<bullet>\n              xvec)::=?Tvec2]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "with \\<open>(p \\<bullet> xvec) \\<sharp>* \\<sigma>\\<close> \\<open>distinct xvec\\<close>"], ["proof (chain)\npicking this:\n  (p \\<bullet> xvec) \\<sharp>* \\<sigma>\n  distinct xvec\n  \\<lbrakk>length xvec = length ?Tvec2; distinct xvec\\<rbrakk>\n  \\<Longrightarrow> \\<Psi> \\<rhd> p \\<bullet>\n                                  P[<\\<sigma>>][(p \\<bullet>\n           xvec)::=?Tvec2] \\<approx> p \\<bullet>\n                                     Q[<\\<sigma>>][(p \\<bullet>\n              xvec)::=?Tvec2]", "have \"\\<Psi> \\<rhd> (M\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)\\<rparr>.(p \\<bullet> P))[<\\<sigma>>] \\<doteq> (M\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)\\<rparr>.(p \\<bullet> Q))[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  (p \\<bullet> xvec) \\<sharp>* \\<sigma>\n  distinct xvec\n  \\<lbrakk>length xvec = length ?Tvec2; distinct xvec\\<rbrakk>\n  \\<Longrightarrow> \\<Psi> \\<rhd> p \\<bullet>\n                                  P[<\\<sigma>>][(p \\<bullet>\n           xvec)::=?Tvec2] \\<approx> p \\<bullet>\n                                     Q[<\\<sigma>>][(p \\<bullet>\n              xvec)::=?Tvec2]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                     xvec p \\<bullet>\n    N\\<rparr>.p \\<bullet>\n              P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*p \\<bullet>\n                  xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]", "by(force intro: weakPsiCongInputPres)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                   xvec p \\<bullet>\n  N\\<rparr>.p \\<bullet>\n            P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*p \\<bullet>\n                xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                   xvec p \\<bullet>\n  N\\<rparr>.p \\<bullet>\n            P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*p \\<bullet>\n                xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "from \\<open>(p \\<bullet> xvec) \\<sharp>* N\\<close> \\<open>(p \\<bullet> xvec) \\<sharp>* P\\<close> S"], ["proof (chain)\npicking this:\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* P\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)", "have \"M\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)\\<rparr>.(p \\<bullet> P) = M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\""], ["proof (prove)\nusing this:\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* P\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n\ngoal (1 subgoal):\n 1. M\\<lparr>\\<lambda>*p \\<bullet>\n                       xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n    M\\<lparr>\\<lambda>*xvec N\\<rparr>.P", "apply(simp add: psi.inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p \\<bullet> xvec) \\<sharp>* N; (p \\<bullet> xvec) \\<sharp>* P;\n     set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\\<rbrakk>\n    \\<Longrightarrow> inputChain (p \\<bullet> xvec) (p \\<bullet> N)\n                       (p \\<bullet> P) =\n                      inputChain xvec N P", "by(rule inputChainAlpha[symmetric]) auto"], ["proof (state)\nthis:\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "from \\<open>(p \\<bullet> xvec) \\<sharp>* N\\<close> \\<open>(p \\<bullet> xvec) \\<sharp>* Q\\<close> S"], ["proof (chain)\npicking this:\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* Q\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)", "have \"M\\<lparr>\\<lambda>*(p \\<bullet> xvec) (p \\<bullet> N)\\<rparr>.(p \\<bullet> Q) = M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\""], ["proof (prove)\nusing this:\n  (p \\<bullet> xvec) \\<sharp>* N\n  (p \\<bullet> xvec) \\<sharp>* Q\n  set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\n\ngoal (1 subgoal):\n 1. M\\<lparr>\\<lambda>*p \\<bullet>\n                       xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q =\n    M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q", "apply(simp add: psi.inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p \\<bullet> xvec) \\<sharp>* N; (p \\<bullet> xvec) \\<sharp>* Q;\n     set p \\<subseteq> set xvec \\<times> set (p \\<bullet> xvec)\\<rbrakk>\n    \\<Longrightarrow> inputChain (p \\<bullet> xvec) (p \\<bullet> N)\n                       (p \\<bullet> Q) =\n                      inputChain xvec N Q", "by(rule inputChainAlpha[symmetric]) auto"], ["proof (state)\nthis:\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                   xvec p \\<bullet>\n  N\\<rparr>.p \\<bullet>\n            P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*p \\<bullet>\n                xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q", "show ?case"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*p \\<bullet>\n                                   xvec p \\<bullet>\n  N\\<rparr>.p \\<bullet>\n            P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*p \\<bullet>\n                xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q[<\\<sigma>>]\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> P =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.P\n  M\\<lparr>\\<lambda>*p \\<bullet> xvec p \\<bullet> N\\<rparr>.p \\<bullet> Q =\n  M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]", "by force"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> M\\<lparr>\\<lambda>*xvec N\\<rparr>.P[<\\<sigma>>] \\<doteq> M\\<lparr>\\<lambda>*xvec N\\<rparr>.Q[<\\<sigma>>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakCongCasePresAux:\n  fixes \\<Psi>   :: 'b\n  and   CsP :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n  and   CsQ :: \"('c \\<times> ('a, 'b, 'c) psi) list\"\n  \n  assumes C1: \"\\<And>\\<phi> P. (\\<phi>, P) mem CsP \\<Longrightarrow> \\<exists>Q. (\\<phi>, Q) mem CsQ \\<and> guarded Q \\<and> P \\<doteq>\\<^sub>c Q\"\n  and     C2: \"\\<And>\\<phi> Q. (\\<phi>, Q) mem CsQ \\<Longrightarrow> \\<exists>P. (\\<phi>, P) mem CsP \\<and> guarded P \\<and> P \\<doteq>\\<^sub>c Q\"\n\n  shows \"Cases CsP \\<doteq>\\<^sub>c Cases CsQ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cases CsP \\<doteq>\\<^sub>c Cases CsQ", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Cases CsP \\<doteq>\\<^sub>c Cases CsQ", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Cases CsP \\<doteq>\\<^sub>c Cases CsQ", "fix \\<Psi> :: 'b"], ["proof (state)\ngoal (1 subgoal):\n 1. Cases CsP \\<doteq>\\<^sub>c Cases CsQ", "fix \\<sigma> :: \"(name list \\<times> 'a list) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. Cases CsP \\<doteq>\\<^sub>c Cases CsQ", "assume \"wellFormedSubst \\<sigma>\""], ["proof (state)\nthis:\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. Cases CsP \\<doteq>\\<^sub>c Cases CsQ", "have \"\\<Psi> \\<rhd> Cases(caseListSeqSubst CsP \\<sigma>) \\<doteq> Cases(caseListSeqSubst CsQ \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> Cases caseListSeqSubst CsP\n                         \\<sigma> \\<doteq> Cases caseListSeqSubst CsQ\n            \\<sigma>", "proof(rule weakPsiCongCasePres)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi> P.\n       (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<Longrightarrow>\n       \\<exists>Q.\n          (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<and>\n          guarded Q \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\n 2. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "fix \\<phi> P"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi> P.\n       (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<Longrightarrow>\n       \\<exists>Q.\n          (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<and>\n          guarded Q \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\n 2. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "assume \"(\\<phi>, P) mem (caseListSeqSubst CsP \\<sigma>)\""], ["proof (state)\nthis:\n  (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> P.\n       (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<Longrightarrow>\n       \\<exists>Q.\n          (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<and>\n          guarded Q \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\n 2. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "then"], ["proof (chain)\npicking this:\n  (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma>", "obtain \\<phi>' P' where \"(\\<phi>', P') mem CsP\" and \"\\<phi> = substCond.seqSubst \\<phi>' \\<sigma>\" and PeqP': \"P = (P'[<\\<sigma>>])\""], ["proof (prove)\nusing this:\n  (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>' P'.\n        \\<lbrakk>(\\<phi>', P') mem CsP;\n         \\<phi> = substCond.seqSubst \\<phi>' \\<sigma>;\n         P = P'[<\\<sigma>>]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(induct CsP) force+"], ["proof (state)\nthis:\n  (\\<phi>', P') mem CsP\n  \\<phi> = substCond.seqSubst \\<phi>' \\<sigma>\n  P = P'[<\\<sigma>>]\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> P.\n       (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<Longrightarrow>\n       \\<exists>Q.\n          (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<and>\n          guarded Q \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\n 2. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "from \\<open>(\\<phi>', P') mem CsP\\<close>"], ["proof (chain)\npicking this:\n  (\\<phi>', P') mem CsP", "obtain Q' where \"(\\<phi>', Q') mem CsQ\" and \"guarded Q'\" and \"P' \\<doteq>\\<^sub>c Q'\""], ["proof (prove)\nusing this:\n  (\\<phi>', P') mem CsP\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>(\\<phi>', Q') mem CsQ; guarded Q';\n         P' \\<doteq>\\<^sub>c Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: C1)"], ["proof (state)\nthis:\n  (\\<phi>', Q') mem CsQ\n  guarded Q'\n  P' \\<doteq>\\<^sub>c Q'\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> P.\n       (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<Longrightarrow>\n       \\<exists>Q.\n          (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<and>\n          guarded Q \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\n 2. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "from \\<open>(\\<phi>', Q') mem CsQ\\<close> \\<open>\\<phi> = substCond.seqSubst \\<phi>' \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  (\\<phi>', Q') mem CsQ\n  \\<phi> = substCond.seqSubst \\<phi>' \\<sigma>", "obtain Q where \"(\\<phi>, Q) mem (caseListSeqSubst CsQ \\<sigma>)\" and \"Q = Q'[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  (\\<phi>', Q') mem CsQ\n  \\<phi> = substCond.seqSubst \\<phi>' \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        \\<lbrakk>(\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma>;\n         Q = Q'[<\\<sigma>>]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(induct CsQ) auto"], ["proof (state)\nthis:\n  (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma>\n  Q = Q'[<\\<sigma>>]\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> P.\n       (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<Longrightarrow>\n       \\<exists>Q.\n          (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<and>\n          guarded Q \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\n 2. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "with PeqP' \\<open>guarded Q'\\<close> \\<open>P' \\<doteq>\\<^sub>c Q'\\<close> \\<open>wellFormedSubst \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  P = P'[<\\<sigma>>]\n  guarded Q'\n  P' \\<doteq>\\<^sub>c Q'\n  wellFormedSubst \\<sigma>\n  (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma>\n  Q = Q'[<\\<sigma>>]", "show \"\\<exists>Q. (\\<phi>, Q) mem (caseListSeqSubst CsQ \\<sigma>) \\<and> guarded Q \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\""], ["proof (prove)\nusing this:\n  P = P'[<\\<sigma>>]\n  guarded Q'\n  P' \\<doteq>\\<^sub>c Q'\n  wellFormedSubst \\<sigma>\n  (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma>\n  Q = Q'[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<exists>Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<and>\n       guarded Q \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "by(blast dest: weakCongE guardedSeqSubst)"], ["proof (state)\nthis:\n  \\<exists>Q.\n     (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<and>\n     guarded Q \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "fix \\<phi> Q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "assume \"(\\<phi>, Q) mem (caseListSeqSubst CsQ \\<sigma>)\""], ["proof (state)\nthis:\n  (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "then"], ["proof (chain)\npicking this:\n  (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma>", "obtain \\<phi>' Q' where \"(\\<phi>', Q') mem CsQ\" and \"\\<phi> = substCond.seqSubst \\<phi>' \\<sigma>\" and QeqQ': \"Q = Q'[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>' Q'.\n        \\<lbrakk>(\\<phi>', Q') mem CsQ;\n         \\<phi> = substCond.seqSubst \\<phi>' \\<sigma>;\n         Q = Q'[<\\<sigma>>]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(induct CsQ) force+"], ["proof (state)\nthis:\n  (\\<phi>', Q') mem CsQ\n  \\<phi> = substCond.seqSubst \\<phi>' \\<sigma>\n  Q = Q'[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "from \\<open>(\\<phi>', Q') mem CsQ\\<close>"], ["proof (chain)\npicking this:\n  (\\<phi>', Q') mem CsQ", "obtain P' where \"(\\<phi>', P') mem CsP\" and \"guarded P'\" and \"P' \\<doteq>\\<^sub>c Q'\""], ["proof (prove)\nusing this:\n  (\\<phi>', Q') mem CsQ\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>(\\<phi>', P') mem CsP; guarded P';\n         P' \\<doteq>\\<^sub>c Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: C2)"], ["proof (state)\nthis:\n  (\\<phi>', P') mem CsP\n  guarded P'\n  P' \\<doteq>\\<^sub>c Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "from \\<open>(\\<phi>', P') mem CsP\\<close> \\<open>\\<phi> = substCond.seqSubst \\<phi>' \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  (\\<phi>', P') mem CsP\n  \\<phi> = substCond.seqSubst \\<phi>' \\<sigma>", "obtain P where \"(\\<phi>, P) mem (caseListSeqSubst CsP \\<sigma>)\" and \"P = P'[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  (\\<phi>', P') mem CsP\n  \\<phi> = substCond.seqSubst \\<phi>' \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>(\\<phi>, P) mem caseListSeqSubst CsP \\<sigma>;\n         P = P'[<\\<sigma>>]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(induct CsP) auto"], ["proof (state)\nthis:\n  (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma>\n  P = P'[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi> Q.\n       (\\<phi>, Q) mem caseListSeqSubst CsQ \\<sigma> \\<Longrightarrow>\n       \\<exists>P.\n          (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n          guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "with QeqQ' \\<open>guarded P'\\<close> \\<open>P' \\<doteq>\\<^sub>c Q'\\<close> \\<open>wellFormedSubst \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  Q = Q'[<\\<sigma>>]\n  guarded P'\n  P' \\<doteq>\\<^sub>c Q'\n  wellFormedSubst \\<sigma>\n  (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma>\n  P = P'[<\\<sigma>>]", "show \"\\<exists>P. (\\<phi>, P) mem (caseListSeqSubst CsP \\<sigma>) \\<and> guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\""], ["proof (prove)\nusing this:\n  Q = Q'[<\\<sigma>>]\n  guarded P'\n  P' \\<doteq>\\<^sub>c Q'\n  wellFormedSubst \\<sigma>\n  (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma>\n  P = P'[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n       guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)", "by(blast dest: weakCongE guardedSeqSubst)"], ["proof (state)\nthis:\n  \\<exists>P.\n     (\\<phi>, P) mem caseListSeqSubst CsP \\<sigma> \\<and>\n     guarded P \\<and> (\\<forall>\\<Psi>. \\<Psi> \\<rhd> P \\<doteq> Q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> Cases caseListSeqSubst CsP\n                       \\<sigma> \\<doteq> Cases caseListSeqSubst CsQ \\<sigma>\n\ngoal (1 subgoal):\n 1. Cases CsP \\<doteq>\\<^sub>c Cases CsQ", "}"], ["proof (state)\nthis:\n  wellFormedSubst ?\\<sigma>2 \\<Longrightarrow>\n  ?\\<Psi>'2 \\<rhd> Cases caseListSeqSubst CsP\n                          ?\\<sigma>2 \\<doteq> Cases caseListSeqSubst CsQ\n               ?\\<sigma>2\n\ngoal (1 subgoal):\n 1. Cases CsP \\<doteq>\\<^sub>c Cases CsQ", "thus ?thesis"], ["proof (prove)\nusing this:\n  wellFormedSubst ?\\<sigma>2 \\<Longrightarrow>\n  ?\\<Psi>'2 \\<rhd> Cases caseListSeqSubst CsP\n                          ?\\<sigma>2 \\<doteq> Cases caseListSeqSubst CsQ\n               ?\\<sigma>2\n\ngoal (1 subgoal):\n 1. Cases CsP \\<doteq>\\<^sub>c Cases CsQ", "by(rule_tac weakCongI) auto"], ["proof (state)\nthis:\n  Cases CsP \\<doteq>\\<^sub>c Cases CsQ\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakCongParPres:\n  fixes \\<Psi> :: 'b\n  and   P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   R :: \"('a, 'b, 'c) psi\"\n  \n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"P \\<parallel> R \\<doteq>\\<^sub>c Q \\<parallel> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel> R \\<doteq>\\<^sub>c Q \\<parallel> R", "using assms"], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n\ngoal (1 subgoal):\n 1. P \\<parallel> R \\<doteq>\\<^sub>c Q \\<parallel> R", "by(fastforce intro: weakCongI weakCongE weakPsiCongParPres)"], ["", "lemma weakCongResPres:\n  fixes P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n  and   x :: name\n\n  assumes \"P \\<doteq>\\<^sub>c Q\"\n\n  shows \"\\<lparr>\\<nu>x\\<rparr>P \\<doteq>\\<^sub>c \\<lparr>\\<nu>x\\<rparr>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>\\<nu>x\\<rparr>P \\<doteq>\\<^sub>c \\<lparr>\\<nu>x\\<rparr>Q", "proof(induct rule: weakCongI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "case(cWeakPsiCong \\<Psi> \\<sigma>)"], ["proof (state)\nthis:\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "obtain y::name where \"y \\<sharp> (\\<Psi>::'b)\" and \"y \\<sharp> P\" and \"y \\<sharp> Q\" and \"y \\<sharp> \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<sharp> \\<Psi>; y \\<sharp> P; y \\<sharp> Q;\n         y \\<sharp> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(generate_fresh \"name\") (auto simp add: fresh_prod)"], ["proof (state)\nthis:\n  y \\<sharp> \\<Psi>\n  y \\<sharp> P\n  y \\<sharp> Q\n  y \\<sharp> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "from \\<open>P \\<doteq>\\<^sub>c Q\\<close>"], ["proof (chain)\npicking this:\n  P \\<doteq>\\<^sub>c Q", "have \"([(x, y)] \\<bullet> P) \\<doteq>\\<^sub>c ([(x, y)] \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n\ngoal (1 subgoal):\n 1. [(x, y)] \\<bullet> P \\<doteq>\\<^sub>c [(x, y)] \\<bullet> Q", "by(rule weakCongClosed)"], ["proof (state)\nthis:\n  [(x, y)] \\<bullet> P \\<doteq>\\<^sub>c [(x, y)] \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "hence \"\\<Psi> \\<rhd> ([(x, y)] \\<bullet> P)[<\\<sigma>>] \\<doteq> ([(x, y)] \\<bullet> Q)[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  [(x, y)] \\<bullet> P \\<doteq>\\<^sub>c [(x, y)] \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                  P[<\\<sigma>>] \\<doteq> [(x, y)] \\<bullet> Q[<\\<sigma>>]", "using \\<open>wellFormedSubst \\<sigma>\\<close>"], ["proof (prove)\nusing this:\n  [(x, y)] \\<bullet> P \\<doteq>\\<^sub>c [(x, y)] \\<bullet> Q\n  wellFormedSubst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                  P[<\\<sigma>>] \\<doteq> [(x, y)] \\<bullet> Q[<\\<sigma>>]", "by(rule weakCongE)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                P[<\\<sigma>>] \\<doteq> [(x, y)] \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "hence \"\\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>(([(x, y)] \\<bullet> P)[<\\<sigma>>]) \\<doteq> \\<lparr>\\<nu>y\\<rparr>(([(x, y)] \\<bullet> Q)[<\\<sigma>>])\""], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                P[<\\<sigma>>] \\<doteq> [(x, y)] \\<bullet> Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n  P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n         Q[<\\<sigma>>]", "using \\<open>y \\<sharp> \\<Psi>\\<close>"], ["proof (prove)\nusing this:\n  \\<Psi> \\<rhd> [(x, y)] \\<bullet>\n                P[<\\<sigma>>] \\<doteq> [(x, y)] \\<bullet> Q[<\\<sigma>>]\n  y \\<sharp> \\<Psi>\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n  P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n         Q[<\\<sigma>>]", "by(rule weakPsiCongResPres)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\nP[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n       Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<Psi> \\<sigma>.\n       wellFormedSubst \\<sigma> \\<Longrightarrow>\n       \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "with \\<open>y \\<sharp> P\\<close> \\<open>y \\<sharp> Q\\<close>  \\<open>y \\<sharp> \\<sigma>\\<close>"], ["proof (chain)\npicking this:\n  y \\<sharp> P\n  y \\<sharp> Q\n  y \\<sharp> \\<sigma>\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\nP[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n       Q[<\\<sigma>>]", "show \"\\<Psi> \\<rhd> (\\<lparr>\\<nu>x\\<rparr>P)[<\\<sigma>>] \\<doteq> (\\<lparr>\\<nu>x\\<rparr>Q)[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  y \\<sharp> P\n  y \\<sharp> Q\n  y \\<sharp> \\<sigma>\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\nP[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>y\\<rparr>[(x, y)] \\<bullet>\n       Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]", "by(simp add: alphaRes)"], ["proof (state)\nthis:\n  \\<Psi> \\<rhd> \\<lparr>\\<nu>x\\<rparr>P[<\\<sigma>>] \\<doteq> \\<lparr>\\<nu>x\\<rparr>Q[<\\<sigma>>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakCongBangPres:\n  fixes P :: \"('a, 'b, 'c) psi\"\n  and   Q :: \"('a, 'b, 'c) psi\"\n \n  assumes \"P \\<doteq>\\<^sub>c Q\"\n  and     \"guarded P\"\n  and     \"guarded Q\"\n\n  shows \"!P \\<doteq>\\<^sub>c !Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. !P \\<doteq>\\<^sub>c !Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<doteq>\\<^sub>c Q\n  guarded P\n  guarded Q\n\ngoal (1 subgoal):\n 1. !P \\<doteq>\\<^sub>c !Q", "by(fastforce intro: weakCongI weakCongE weakPsiCongBangPres  guardedSeqSubst)"], ["", "end"], ["", "end"]]}