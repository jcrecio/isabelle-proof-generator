{"file_name": "/home/qj213/afp-2021-10-22/thys/OpSets/RGA.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/OpSets", "problem_names": ["lemma insert_body_set_ins [simp]:\n  shows  \"set (insert_body xs e) = insert e (set xs)\"", "lemma insert_rga_set_ins:\n  assumes \"i \\<in> set xs\"\n  shows \"set (insert_rga xs (oid, Some i)) = insert oid (set xs)\"", "lemma insert_body_commutes:\n  shows \"insert_body (insert_body xs e1) e2 = insert_body (insert_body xs e2) e1\"", "lemma insert_rga_insert_body_commute:\n  assumes \"i2 \\<noteq> Some e1\"\n  shows \"insert_rga (insert_body xs e1) (e2, i2) = insert_body (insert_rga xs (e2, i2)) e1\"", "lemma insert_rga_None_commutes:\n  assumes \"i2 \\<noteq> Some e1\"\n  shows \"insert_rga (insert_rga xs (e1, None)) (e2, i2  ) =\n         insert_rga (insert_rga xs (e2, i2  )) (e1, None)\"", "lemma insert_rga_nonexistent:\n  assumes \"i \\<notin> set xs\"\n  shows \"insert_rga xs (e, Some i) = xs\"", "lemma insert_rga_Some_commutes:\n  assumes \"i1 \\<in> set xs\" and \"i2 \\<in> set xs\"\n    and \"e1 \\<noteq> i2\" and \"e2 \\<noteq> i1\"\n  shows \"insert_rga (insert_rga xs (e1, Some i1)) (e2, Some i2) =\n         insert_rga (insert_rga xs (e2, Some i2)) (e1, Some i1)\"", "lemma insert_rga_commutes:\n  assumes \"i2 \\<noteq> Some e1\" and \"i1 \\<noteq> Some e2\"\n  shows \"insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n         insert_rga (insert_rga xs (e2, i2)) (e1, i1)\"", "lemma insert_body_split:\n  shows \"\\<exists>p s. xs = p @ s \\<and> insert_body xs e = p @ e # s\"", "lemma insert_between_elements:\n  assumes \"xs = pre @ ref # suf\"\n    and \"distinct xs\"\n    and \"\\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\"\n  shows \"insert_rga xs (e, Some ref) = pre @ ref # e # suf\"", "lemma insert_rga_after_ref:\n  assumes \"\\<forall>x\\<in>set as. a \\<noteq> x\"\n    and \"insert_body (cs @ ds) e = cs @ e # ds\"\n  shows \"insert_rga (as @ a # cs @ ds) (e, Some a) = as @ a # cs @ e # ds\"", "lemma insert_rga_preserves_order:\n  assumes \"i = None \\<or> (\\<exists>i'. i = Some i' \\<and> i' \\<in> set xs)\"\n    and \"distinct xs\"\n  shows \"\\<exists>pre suf. xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf\"", "lemma rga_ops_rem_last:\n  assumes \"rga_ops (xs @ [x])\"\n  shows \"rga_ops xs\"", "lemma rga_ops_rem_penultimate:\n  assumes \"rga_ops (xs @ [(i1, r1), (i2, r2)])\"\n    and \"\\<And>r. r2 = Some r \\<Longrightarrow> r \\<noteq> i1\"\n  shows \"rga_ops (xs @ [(i2, r2)])\"", "lemma rga_ops_ref_exists:\n  assumes \"rga_ops (pre @ (oid, Some ref) # suf)\"\n  shows \"ref \\<in> fst ` set pre\"", "lemma interp_rga_tail_unfold:\n  shows \"interp_rga (xs@[x]) = insert_rga (interp_rga (xs)) x\"", "lemma interp_rga_ids:\n  assumes \"rga_ops xs\"\n  shows \"set (interp_rga xs) = set (map fst xs)\"", "lemma interp_rga_distinct:\n  assumes \"rga_ops xs\"\n  shows \"distinct (interp_rga xs)\"", "lemma final_insert:\n  assumes \"set (xs @ [x]) = set (ys @ [x])\"\n    and \"rga_ops (xs @ [x])\"\n    and \"insert_ops (ys @ [x])\"\n    and \"interp_rga xs = interp_ins ys\"\n  shows \"interp_rga (xs @ [x]) = interp_ins (ys @ [x])\"", "lemma interp_rga_reorder:\n  assumes \"rga_ops (pre @ suf @ [(oid, ref)])\"\n    and \"\\<And>i r. (i, Some r) \\<in> set suf \\<Longrightarrow> r \\<noteq> oid\"\n    and \"\\<And>r. ref = Some r \\<Longrightarrow> r \\<notin> fst ` set suf\"\n  shows \"interp_rga (pre @ (oid, ref) # suf) = interp_rga (pre @ suf @ [(oid, ref)])\"", "lemma rga_spec_equal:\n  assumes \"set xs = set ys\"\n    and \"insert_ops xs\"\n    and \"rga_ops ys\"\n  shows \"interp_ins xs = interp_rga ys\"", "lemma insert_ops_exist:\n  assumes \"rga_ops xs\"\n  shows \"\\<exists>ys. set xs = set ys \\<and> insert_ops ys\"", "theorem rga_meets_spec:\n  assumes \"rga_ops xs\"\n  shows \"\\<exists>ys. set ys = set xs \\<and> insert_ops ys \\<and> interp_ins ys = interp_rga xs\""], "translations": [["", "lemma insert_body_set_ins [simp]:\n  shows  \"set (insert_body xs e) = insert e (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (insert_body xs e) = insert e (set xs)", "by (induction xs, auto)"], ["", "lemma insert_rga_set_ins:\n  assumes \"i \\<in> set xs\"\n  shows \"set (insert_rga xs (oid, Some i)) = insert oid (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (insert_rga xs (oid, Some i)) = insert oid (set xs)", "using assms"], ["proof (prove)\nusing this:\n  i \\<in> set xs\n\ngoal (1 subgoal):\n 1. set (insert_rga xs (oid, Some i)) = insert oid (set xs)", "by (induction xs, auto)"], ["", "lemma insert_body_commutes:\n  shows \"insert_body (insert_body xs e1) e2 = insert_body (insert_body xs e2) e1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_body (insert_body xs e1) e2 = insert_body (insert_body xs e2) e1", "by (induction xs, auto)"], ["", "lemma insert_rga_insert_body_commute:\n  assumes \"i2 \\<noteq> Some e1\"\n  shows \"insert_rga (insert_body xs e1) (e2, i2) = insert_body (insert_rga xs (e2, i2)) e1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga (insert_body xs e1) (e2, i2) =\n    insert_body (insert_rga xs (e2, i2)) e1", "using assms"], ["proof (prove)\nusing this:\n  i2 \\<noteq> Some e1\n\ngoal (1 subgoal):\n 1. insert_rga (insert_body xs e1) (e2, i2) =\n    insert_body (insert_rga xs (e2, i2)) e1", "by (induction xs; cases i2) (auto simp add: insert_body_commutes)"], ["", "lemma insert_rga_None_commutes:\n  assumes \"i2 \\<noteq> Some e1\"\n  shows \"insert_rga (insert_rga xs (e1, None)) (e2, i2  ) =\n         insert_rga (insert_rga xs (e2, i2  )) (e1, None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, None)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, None)", "using assms"], ["proof (prove)\nusing this:\n  i2 \\<noteq> Some e1\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, None)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, None)", "by (induction xs; cases i2) (auto simp add: insert_body_commutes)"], ["", "lemma insert_rga_nonexistent:\n  assumes \"i \\<notin> set xs\"\n  shows \"insert_rga xs (e, Some i) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga xs (e, Some i) = xs", "using assms"], ["proof (prove)\nusing this:\n  i \\<notin> set xs\n\ngoal (1 subgoal):\n 1. insert_rga xs (e, Some i) = xs", "by (induction xs, auto)"], ["", "lemma insert_rga_Some_commutes:\n  assumes \"i1 \\<in> set xs\" and \"i2 \\<in> set xs\"\n    and \"e1 \\<noteq> i2\" and \"e2 \\<noteq> i1\"\n  shows \"insert_rga (insert_rga xs (e1, Some i1)) (e2, Some i2) =\n         insert_rga (insert_rga xs (e2, Some i2)) (e1, Some i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, Some i1)) (e2, Some i2) =\n    insert_rga (insert_rga xs (e2, Some i2)) (e1, Some i1)", "using assms"], ["proof (prove)\nusing this:\n  i1 \\<in> set xs\n  i2 \\<in> set xs\n  e1 \\<noteq> i2\n  e2 \\<noteq> i1\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, Some i1)) (e2, Some i2) =\n    insert_rga (insert_rga xs (e2, Some i2)) (e1, Some i1)", "proof (induction xs, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>i1 \\<in> set xs; i2 \\<in> set xs; e1 \\<noteq> i2;\n                 e2 \\<noteq> i1\\<rbrakk>\n                \\<Longrightarrow> insert_rga (insert_rga xs (e1, Some i1))\n                                   (e2, Some i2) =\n                                  insert_rga (insert_rga xs (e2, Some i2))\n                                   (e1, Some i1);\n        i1 \\<in> set (a # xs); i2 \\<in> set (a # xs); e1 \\<noteq> i2;\n        e2 \\<noteq> i1\\<rbrakk>\n       \\<Longrightarrow> insert_rga (insert_rga (a # xs) (e1, Some i1))\n                          (e2, Some i2) =\n                         insert_rga (insert_rga (a # xs) (e2, Some i2))\n                          (e1, Some i1)", "case (Cons a xs)"], ["proof (state)\nthis:\n  \\<lbrakk>i1 \\<in> set xs; i2 \\<in> set xs; e1 \\<noteq> i2;\n   e2 \\<noteq> i1\\<rbrakk>\n  \\<Longrightarrow> insert_rga (insert_rga xs (e1, Some i1)) (e2, Some i2) =\n                    insert_rga (insert_rga xs (e2, Some i2)) (e1, Some i1)\n  i1 \\<in> set (a # xs)\n  i2 \\<in> set (a # xs)\n  e1 \\<noteq> i2\n  e2 \\<noteq> i1\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>i1 \\<in> set xs; i2 \\<in> set xs; e1 \\<noteq> i2;\n                 e2 \\<noteq> i1\\<rbrakk>\n                \\<Longrightarrow> insert_rga (insert_rga xs (e1, Some i1))\n                                   (e2, Some i2) =\n                                  insert_rga (insert_rga xs (e2, Some i2))\n                                   (e1, Some i1);\n        i1 \\<in> set (a # xs); i2 \\<in> set (a # xs); e1 \\<noteq> i2;\n        e2 \\<noteq> i1\\<rbrakk>\n       \\<Longrightarrow> insert_rga (insert_rga (a # xs) (e1, Some i1))\n                          (e2, Some i2) =\n                         insert_rga (insert_rga (a # xs) (e2, Some i2))\n                          (e1, Some i1)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>i1 \\<in> set xs; i2 \\<in> set xs; e1 \\<noteq> i2;\n   e2 \\<noteq> i1\\<rbrakk>\n  \\<Longrightarrow> insert_rga (insert_rga xs (e1, Some i1)) (e2, Some i2) =\n                    insert_rga (insert_rga xs (e2, Some i2)) (e1, Some i1)\n  i1 \\<in> set (a # xs)\n  i2 \\<in> set (a # xs)\n  e1 \\<noteq> i2\n  e2 \\<noteq> i1", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>i1 \\<in> set xs; i2 \\<in> set xs; e1 \\<noteq> i2;\n   e2 \\<noteq> i1\\<rbrakk>\n  \\<Longrightarrow> insert_rga (insert_rga xs (e1, Some i1)) (e2, Some i2) =\n                    insert_rga (insert_rga xs (e2, Some i2)) (e1, Some i1)\n  i1 \\<in> set (a # xs)\n  i2 \\<in> set (a # xs)\n  e1 \\<noteq> i2\n  e2 \\<noteq> i1\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga (a # xs) (e1, Some i1)) (e2, Some i2) =\n    insert_rga (insert_rga (a # xs) (e2, Some i2)) (e1, Some i1)", "by (cases \"a = i1\"; cases \"a = i2\";\n        auto simp add: insert_body_commutes insert_rga_insert_body_commute)"], ["proof (state)\nthis:\n  insert_rga (insert_rga (a # xs) (e1, Some i1)) (e2, Some i2) =\n  insert_rga (insert_rga (a # xs) (e2, Some i2)) (e1, Some i1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma insert_rga_commutes:\n  assumes \"i2 \\<noteq> Some e1\" and \"i1 \\<noteq> Some e2\"\n  shows \"insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n         insert_rga (insert_rga xs (e2, i2)) (e1, i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "proof(cases i1)"], ["proof (state)\ngoal (2 subgoals):\n 1. i1 = None \\<Longrightarrow>\n    insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n 2. \\<And>a.\n       i1 = Some a \\<Longrightarrow>\n       insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n       insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "case None"], ["proof (state)\nthis:\n  i1 = None\n\ngoal (2 subgoals):\n 1. i1 = None \\<Longrightarrow>\n    insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n 2. \\<And>a.\n       i1 = Some a \\<Longrightarrow>\n       insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n       insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "then"], ["proof (chain)\npicking this:\n  i1 = None", "show ?thesis"], ["proof (prove)\nusing this:\n  i1 = None\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "using assms(1) insert_rga_None_commutes"], ["proof (prove)\nusing this:\n  i1 = None\n  i2 \\<noteq> Some e1\n  ?i2.0 \\<noteq> Some ?e1.0 \\<Longrightarrow>\n  insert_rga (insert_rga ?xs (?e1.0, None)) (?e2.0, ?i2.0) =\n  insert_rga (insert_rga ?xs (?e2.0, ?i2.0)) (?e1.0, None)\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "by (cases i2, fastforce, blast)"], ["proof (state)\nthis:\n  insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n  insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i1 = Some a \\<Longrightarrow>\n       insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n       insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       i1 = Some a \\<Longrightarrow>\n       insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n       insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "case some_r1: (Some r1)"], ["proof (state)\nthis:\n  i1 = Some r1\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i1 = Some a \\<Longrightarrow>\n       insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n       insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "then"], ["proof (chain)\npicking this:\n  i1 = Some r1", "show ?thesis"], ["proof (prove)\nusing this:\n  i1 = Some r1\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "proof(cases i2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i1 = Some r1; i2 = None\\<rbrakk>\n    \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                      insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n 2. \\<And>a.\n       \\<lbrakk>i1 = Some r1; i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                         insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "case None"], ["proof (state)\nthis:\n  i2 = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i1 = Some r1; i2 = None\\<rbrakk>\n    \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                      insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n 2. \\<And>a.\n       \\<lbrakk>i1 = Some r1; i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                         insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "then"], ["proof (chain)\npicking this:\n  i2 = None", "show ?thesis"], ["proof (prove)\nusing this:\n  i2 = None\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "using assms(2) insert_rga_None_commutes"], ["proof (prove)\nusing this:\n  i2 = None\n  i1 \\<noteq> Some e2\n  ?i2.0 \\<noteq> Some ?e1.0 \\<Longrightarrow>\n  insert_rga (insert_rga ?xs (?e1.0, None)) (?e2.0, ?i2.0) =\n  insert_rga (insert_rga ?xs (?e2.0, ?i2.0)) (?e1.0, None)\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "by fastforce"], ["proof (state)\nthis:\n  insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n  insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>i1 = Some r1; i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                         insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>i1 = Some r1; i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                         insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "case some_r2: (Some r2)"], ["proof (state)\nthis:\n  i2 = Some r2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>i1 = Some r1; i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                         insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "then"], ["proof (chain)\npicking this:\n  i2 = Some r2", "show ?thesis"], ["proof (prove)\nusing this:\n  i2 = Some r2\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "proof(cases \"r1 \\<in> set xs \\<and> r2 \\<in> set xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i2 = Some r2; r1 \\<in> set xs \\<and> r2 \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                      insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n 2. \\<lbrakk>i2 = Some r2;\n     \\<not> (r1 \\<in> set xs \\<and> r2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                      insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "case True"], ["proof (state)\nthis:\n  r1 \\<in> set xs \\<and> r2 \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i2 = Some r2; r1 \\<in> set xs \\<and> r2 \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                      insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n 2. \\<lbrakk>i2 = Some r2;\n     \\<not> (r1 \\<in> set xs \\<and> r2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                      insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "then"], ["proof (chain)\npicking this:\n  r1 \\<in> set xs \\<and> r2 \\<in> set xs", "show ?thesis"], ["proof (prove)\nusing this:\n  r1 \\<in> set xs \\<and> r2 \\<in> set xs\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "using assms some_r1 some_r2"], ["proof (prove)\nusing this:\n  r1 \\<in> set xs \\<and> r2 \\<in> set xs\n  i2 \\<noteq> Some e1\n  i1 \\<noteq> Some e2\n  i1 = Some r1\n  i2 = Some r2\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "by (simp add: insert_rga_Some_commutes)"], ["proof (state)\nthis:\n  insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n  insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i2 = Some r2;\n     \\<not> (r1 \\<in> set xs \\<and> r2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                      insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i2 = Some r2;\n     \\<not> (r1 \\<in> set xs \\<and> r2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                      insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "case False"], ["proof (state)\nthis:\n  \\<not> (r1 \\<in> set xs \\<and> r2 \\<in> set xs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i2 = Some r2;\n     \\<not> (r1 \\<in> set xs \\<and> r2 \\<in> set xs)\\<rbrakk>\n    \\<Longrightarrow> insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n                      insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "then"], ["proof (chain)\npicking this:\n  \\<not> (r1 \\<in> set xs \\<and> r2 \\<in> set xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (r1 \\<in> set xs \\<and> r2 \\<in> set xs)\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "using assms some_r1 some_r2"], ["proof (prove)\nusing this:\n  \\<not> (r1 \\<in> set xs \\<and> r2 \\<in> set xs)\n  i2 \\<noteq> Some e1\n  i1 \\<noteq> Some e2\n  i1 = Some r1\n  i2 = Some r2\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n    insert_rga (insert_rga xs (e2, i2)) (e1, i1)", "by (metis insert_iff insert_rga_nonexistent insert_rga_set_ins)"], ["proof (state)\nthis:\n  insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n  insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n  insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  insert_rga (insert_rga xs (e1, i1)) (e2, i2) =\n  insert_rga (insert_rga xs (e2, i2)) (e1, i1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma insert_body_split:\n  shows \"\\<exists>p s. xs = p @ s \\<and> insert_body xs e = p @ e # s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p s. xs = p @ s \\<and> insert_body xs e = p @ e # s", "proof(induction xs, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<exists>p s.\n          xs = p @ s \\<and> insert_body xs e = p @ e # s \\<Longrightarrow>\n       \\<exists>p s.\n          a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s", "case (Cons a xs)"], ["proof (state)\nthis:\n  \\<exists>p s. xs = p @ s \\<and> insert_body xs e = p @ e # s\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<exists>p s.\n          xs = p @ s \\<and> insert_body xs e = p @ e # s \\<Longrightarrow>\n       \\<exists>p s.\n          a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s", "then"], ["proof (chain)\npicking this:\n  \\<exists>p s. xs = p @ s \\<and> insert_body xs e = p @ e # s", "obtain p s where IH: \"xs = p @ s \\<and> insert_body xs e = p @ e # s\""], ["proof (prove)\nusing this:\n  \\<exists>p s. xs = p @ s \\<and> insert_body xs e = p @ e # s\n\ngoal (1 subgoal):\n 1. (\\<And>p s.\n        xs = p @ s \\<and> insert_body xs e = p @ e # s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  xs = p @ s \\<and> insert_body xs e = p @ e # s\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<exists>p s.\n          xs = p @ s \\<and> insert_body xs e = p @ e # s \\<Longrightarrow>\n       \\<exists>p s.\n          a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s", "then"], ["proof (chain)\npicking this:\n  xs = p @ s \\<and> insert_body xs e = p @ e # s", "show \"\\<exists>p s. a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s\""], ["proof (prove)\nusing this:\n  xs = p @ s \\<and> insert_body xs e = p @ e # s\n\ngoal (1 subgoal):\n 1. \\<exists>p s. a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s", "proof(cases \"a < e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s; a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s\n 2. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s;\n     \\<not> a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s", "case True"], ["proof (state)\nthis:\n  a < e\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s; a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s\n 2. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s;\n     \\<not> a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s", "then"], ["proof (chain)\npicking this:\n  a < e", "have \"a # xs = [] @ (a # p @ s) \\<and> insert_body (a # xs) e = [] @ e # (a # p @ s)\""], ["proof (prove)\nusing this:\n  a < e\n\ngoal (1 subgoal):\n 1. a # xs = [] @ a # p @ s \\<and>\n    insert_body (a # xs) e = [] @ e # a # p @ s", "by (simp add: IH)"], ["proof (state)\nthis:\n  a # xs = [] @ a # p @ s \\<and> insert_body (a # xs) e = [] @ e # a # p @ s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s; a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s\n 2. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s;\n     \\<not> a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s", "then"], ["proof (chain)\npicking this:\n  a # xs = [] @ a # p @ s \\<and> insert_body (a # xs) e = [] @ e # a # p @ s", "show ?thesis"], ["proof (prove)\nusing this:\n  a # xs = [] @ a # p @ s \\<and> insert_body (a # xs) e = [] @ e # a # p @ s\n\ngoal (1 subgoal):\n 1. \\<exists>p s. a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s", "by blast"], ["proof (state)\nthis:\n  \\<exists>p s. a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s;\n     \\<not> a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s;\n     \\<not> a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s", "case False"], ["proof (state)\nthis:\n  \\<not> a < e\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s;\n     \\<not> a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s", "then"], ["proof (chain)\npicking this:\n  \\<not> a < e", "have \"a # xs = (a # p) @ s \\<and> insert_body (a # xs) e = (a # p) @ e # s\""], ["proof (prove)\nusing this:\n  \\<not> a < e\n\ngoal (1 subgoal):\n 1. a # xs = (a # p) @ s \\<and> insert_body (a # xs) e = (a # p) @ e # s", "using IH"], ["proof (prove)\nusing this:\n  \\<not> a < e\n  xs = p @ s \\<and> insert_body xs e = p @ e # s\n\ngoal (1 subgoal):\n 1. a # xs = (a # p) @ s \\<and> insert_body (a # xs) e = (a # p) @ e # s", "by auto"], ["proof (state)\nthis:\n  a # xs = (a # p) @ s \\<and> insert_body (a # xs) e = (a # p) @ e # s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = p @ s \\<and> insert_body xs e = p @ e # s;\n     \\<not> a < e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p s.\n                         a # xs = p @ s \\<and>\n                         insert_body (a # xs) e = p @ e # s", "then"], ["proof (chain)\npicking this:\n  a # xs = (a # p) @ s \\<and> insert_body (a # xs) e = (a # p) @ e # s", "show ?thesis"], ["proof (prove)\nusing this:\n  a # xs = (a # p) @ s \\<and> insert_body (a # xs) e = (a # p) @ e # s\n\ngoal (1 subgoal):\n 1. \\<exists>p s. a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s", "by blast"], ["proof (state)\nthis:\n  \\<exists>p s. a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p s. a # xs = p @ s \\<and> insert_body (a # xs) e = p @ e # s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma insert_between_elements:\n  assumes \"xs = pre @ ref # suf\"\n    and \"distinct xs\"\n    and \"\\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\"\n  shows \"insert_rga xs (e, Some ref) = pre @ ref # e # suf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga xs (e, Some ref) = pre @ ref # e # suf", "using assms"], ["proof (prove)\nusing this:\n  xs = pre @ ref # suf\n  distinct xs\n  ?i \\<in> set xs \\<Longrightarrow> ?i < e\n\ngoal (1 subgoal):\n 1. insert_rga xs (e, Some ref) = pre @ ref # e # suf", "proof(induction xs arbitrary: pre, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs pre.\n       \\<lbrakk>\\<And>pre.\n                   \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                    \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                   \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                     pre @ ref # e # suf;\n        a # xs = pre @ ref # suf; distinct (a # xs);\n        \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e\\<rbrakk>\n       \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                         pre @ ref # e # suf", "case (Cons a xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs = ?pre @ ref # suf; distinct xs;\n   \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n  \\<Longrightarrow> insert_rga xs (e, Some ref) = ?pre @ ref # e # suf\n  a # xs = pre @ ref # suf\n  distinct (a # xs)\n  ?i \\<in> set (a # xs) \\<Longrightarrow> ?i < e\n\ngoal (1 subgoal):\n 1. \\<And>a xs pre.\n       \\<lbrakk>\\<And>pre.\n                   \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                    \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                   \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                     pre @ ref # e # suf;\n        a # xs = pre @ ref # suf; distinct (a # xs);\n        \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e\\<rbrakk>\n       \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                         pre @ ref # e # suf", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>xs = ?pre @ ref # suf; distinct xs;\n   \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n  \\<Longrightarrow> insert_rga xs (e, Some ref) = ?pre @ ref # e # suf\n  a # xs = pre @ ref # suf\n  distinct (a # xs)\n  ?i \\<in> set (a # xs) \\<Longrightarrow> ?i < e", "show \"insert_rga (a # xs) (e, Some ref) = pre @ ref # e # suf\""], ["proof (prove)\nusing this:\n  \\<lbrakk>xs = ?pre @ ref # suf; distinct xs;\n   \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n  \\<Longrightarrow> insert_rga xs (e, Some ref) = ?pre @ ref # e # suf\n  a # xs = pre @ ref # suf\n  distinct (a # xs)\n  ?i \\<in> set (a # xs) \\<Longrightarrow> ?i < e\n\ngoal (1 subgoal):\n 1. insert_rga (a # xs) (e, Some ref) = pre @ ref # e # suf", "proof(cases pre)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>pre.\n                \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                 \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                  pre @ ref # e # suf;\n     a # xs = pre @ ref # suf; distinct (a # xs);\n     \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n     pre = []\\<rbrakk>\n    \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                      pre @ ref # e # suf\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>pre.\n                   \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                    \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                   \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                     pre @ ref # e # suf;\n        a # xs = pre @ ref # suf; distinct (a # xs);\n        \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n        pre = aa # list\\<rbrakk>\n       \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                         pre @ ref # e # suf", "case pre_nil: Nil"], ["proof (state)\nthis:\n  pre = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>pre.\n                \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                 \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                  pre @ ref # e # suf;\n     a # xs = pre @ ref # suf; distinct (a # xs);\n     \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n     pre = []\\<rbrakk>\n    \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                      pre @ ref # e # suf\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>pre.\n                   \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                    \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                   \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                     pre @ ref # e # suf;\n        a # xs = pre @ ref # suf; distinct (a # xs);\n        \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n        pre = aa # list\\<rbrakk>\n       \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                         pre @ ref # e # suf", "then"], ["proof (chain)\npicking this:\n  pre = []", "have \"a = ref\""], ["proof (prove)\nusing this:\n  pre = []\n\ngoal (1 subgoal):\n 1. a = ref", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  pre = []\n  a # xs = pre @ ref # suf\n\ngoal (1 subgoal):\n 1. a = ref", "by auto"], ["proof (state)\nthis:\n  a = ref\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>pre.\n                \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                 \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                  pre @ ref # e # suf;\n     a # xs = pre @ ref # suf; distinct (a # xs);\n     \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n     pre = []\\<rbrakk>\n    \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                      pre @ ref # e # suf\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>pre.\n                   \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                    \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                   \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                     pre @ ref # e # suf;\n        a # xs = pre @ ref # suf; distinct (a # xs);\n        \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n        pre = aa # list\\<rbrakk>\n       \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                         pre @ ref # e # suf", "then"], ["proof (chain)\npicking this:\n  a = ref", "show ?thesis"], ["proof (prove)\nusing this:\n  a = ref\n\ngoal (1 subgoal):\n 1. insert_rga (a # xs) (e, Some ref) = pre @ ref # e # suf", "using Cons.prems pre_nil"], ["proof (prove)\nusing this:\n  a = ref\n  a # xs = pre @ ref # suf\n  distinct (a # xs)\n  ?i \\<in> set (a # xs) \\<Longrightarrow> ?i < e\n  pre = []\n\ngoal (1 subgoal):\n 1. insert_rga (a # xs) (e, Some ref) = pre @ ref # e # suf", "by (cases suf, auto)"], ["proof (state)\nthis:\n  insert_rga (a # xs) (e, Some ref) = pre @ ref # e # suf\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>pre.\n                   \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                    \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                   \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                     pre @ ref # e # suf;\n        a # xs = pre @ ref # suf; distinct (a # xs);\n        \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n        pre = aa # list\\<rbrakk>\n       \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                         pre @ ref # e # suf", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>pre.\n                   \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                    \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                   \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                     pre @ ref # e # suf;\n        a # xs = pre @ ref # suf; distinct (a # xs);\n        \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n        pre = aa # list\\<rbrakk>\n       \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                         pre @ ref # e # suf", "case (Cons b pre')"], ["proof (state)\nthis:\n  pre = b # pre'\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>pre.\n                   \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                    \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                   \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                     pre @ ref # e # suf;\n        a # xs = pre @ ref # suf; distinct (a # xs);\n        \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n        pre = aa # list\\<rbrakk>\n       \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                         pre @ ref # e # suf", "then"], ["proof (chain)\npicking this:\n  pre = b # pre'", "have \"insert_rga xs (e, Some ref) = pre' @ ref # e # suf\""], ["proof (prove)\nusing this:\n  pre = b # pre'\n\ngoal (1 subgoal):\n 1. insert_rga xs (e, Some ref) = pre' @ ref # e # suf", "using Cons.IH Cons.prems"], ["proof (prove)\nusing this:\n  pre = b # pre'\n  \\<lbrakk>xs = ?pre @ ref # suf; distinct xs;\n   \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n  \\<Longrightarrow> insert_rga xs (e, Some ref) = ?pre @ ref # e # suf\n  a # xs = pre @ ref # suf\n  distinct (a # xs)\n  ?i \\<in> set (a # xs) \\<Longrightarrow> ?i < e\n\ngoal (1 subgoal):\n 1. insert_rga xs (e, Some ref) = pre' @ ref # e # suf", "by auto"], ["proof (state)\nthis:\n  insert_rga xs (e, Some ref) = pre' @ ref # e # suf\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>pre.\n                   \\<lbrakk>xs = pre @ ref # suf; distinct xs;\n                    \\<And>i. i \\<in> set xs \\<Longrightarrow> i < e\\<rbrakk>\n                   \\<Longrightarrow> insert_rga xs (e, Some ref) =\n                                     pre @ ref # e # suf;\n        a # xs = pre @ ref # suf; distinct (a # xs);\n        \\<And>i. i \\<in> set (a # xs) \\<Longrightarrow> i < e;\n        pre = aa # list\\<rbrakk>\n       \\<Longrightarrow> insert_rga (a # xs) (e, Some ref) =\n                         pre @ ref # e # suf", "then"], ["proof (chain)\npicking this:\n  insert_rga xs (e, Some ref) = pre' @ ref # e # suf", "show ?thesis"], ["proof (prove)\nusing this:\n  insert_rga xs (e, Some ref) = pre' @ ref # e # suf\n\ngoal (1 subgoal):\n 1. insert_rga (a # xs) (e, Some ref) = pre @ ref # e # suf", "using Cons.prems(1) Cons.prems(2) local.Cons"], ["proof (prove)\nusing this:\n  insert_rga xs (e, Some ref) = pre' @ ref # e # suf\n  a # xs = pre @ ref # suf\n  distinct (a # xs)\n  pre = b # pre'\n\ngoal (1 subgoal):\n 1. insert_rga (a # xs) (e, Some ref) = pre @ ref # e # suf", "by auto"], ["proof (state)\nthis:\n  insert_rga (a # xs) (e, Some ref) = pre @ ref # e # suf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  insert_rga (a # xs) (e, Some ref) = pre @ ref # e # suf\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma insert_rga_after_ref:\n  assumes \"\\<forall>x\\<in>set as. a \\<noteq> x\"\n    and \"insert_body (cs @ ds) e = cs @ e # ds\"\n  shows \"insert_rga (as @ a # cs @ ds) (e, Some a) = as @ a # cs @ e # ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga (as @ a # cs @ ds) (e, Some a) = as @ a # cs @ e # ds", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set as. a \\<noteq> x\n  insert_body (cs @ ds) e = cs @ e # ds\n\ngoal (1 subgoal):\n 1. insert_rga (as @ a # cs @ ds) (e, Some a) = as @ a # cs @ e # ds", "by (induction as; auto)"], ["", "lemma insert_rga_preserves_order:\n  assumes \"i = None \\<or> (\\<exists>i'. i = Some i' \\<and> i' \\<in> set xs)\"\n    and \"distinct xs\"\n  shows \"\\<exists>pre suf. xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "proof(cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = None \\<Longrightarrow>\n    \\<exists>pre suf.\n       xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf\n 2. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "case None"], ["proof (state)\nthis:\n  i = None\n\ngoal (2 subgoals):\n 1. i = None \\<Longrightarrow>\n    \\<exists>pre suf.\n       xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf\n 2. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "then"], ["proof (chain)\npicking this:\n  i = None", "show \"\\<exists>pre suf. xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf\""], ["proof (prove)\nusing this:\n  i = None\n\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "using insert_body_split"], ["proof (prove)\nusing this:\n  i = None\n  \\<exists>p s. ?xs = p @ s \\<and> insert_body ?xs ?e = p @ ?e # s\n\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "by auto"], ["proof (state)\nthis:\n  \\<exists>pre suf.\n     xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "case (Some r)"], ["proof (state)\nthis:\n  i = Some r\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "moreover"], ["proof (state)\nthis:\n  i = Some r\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "from this"], ["proof (chain)\npicking this:\n  i = Some r", "obtain as bs where \"xs = as @ r # bs \\<and> (\\<forall>x \\<in> set as. x \\<noteq> r)\""], ["proof (prove)\nusing this:\n  i = Some r\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        xs = as @ r # bs \\<and>\n        (\\<forall>x\\<in>set as. x \\<noteq> r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1) split_list_first"], ["proof (prove)\nusing this:\n  i = Some r\n  i = None \\<or> (\\<exists>i'. i = Some i' \\<and> i' \\<in> set xs)\n  ?x \\<in> set ?xs \\<Longrightarrow>\n  \\<exists>ys zs. ?xs = ys @ ?x # zs \\<and> ?x \\<notin> set ys\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        xs = as @ r # bs \\<and>\n        (\\<forall>x\\<in>set as. x \\<noteq> r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  xs = as @ r # bs \\<and> (\\<forall>x\\<in>set as. x \\<noteq> r)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "moreover"], ["proof (state)\nthis:\n  xs = as @ r # bs \\<and> (\\<forall>x\\<in>set as. x \\<noteq> r)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "have \"\\<exists>cs ds. bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>cs ds. bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds", "by (simp add: insert_body_split)"], ["proof (state)\nthis:\n  \\<exists>cs ds. bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "then"], ["proof (chain)\npicking this:\n  \\<exists>cs ds. bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds", "obtain cs ds where \"bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds\""], ["proof (prove)\nusing this:\n  \\<exists>cs ds. bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds\n\ngoal (1 subgoal):\n 1. (\\<And>cs ds.\n        bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "ultimately"], ["proof (chain)\npicking this:\n  i = Some r\n  xs = as @ r # bs \\<and> (\\<forall>x\\<in>set as. x \\<noteq> r)\n  bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds", "have \"xs = (as @ r # cs) @ ds \\<and> insert_rga xs (e, i) = (as @ r # cs) @ e # ds\""], ["proof (prove)\nusing this:\n  i = Some r\n  xs = as @ r # bs \\<and> (\\<forall>x\\<in>set as. x \\<noteq> r)\n  bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds\n\ngoal (1 subgoal):\n 1. xs = (as @ r # cs) @ ds \\<and>\n    insert_rga xs (e, i) = (as @ r # cs) @ e # ds", "using insert_rga_after_ref"], ["proof (prove)\nusing this:\n  i = Some r\n  xs = as @ r # bs \\<and> (\\<forall>x\\<in>set as. x \\<noteq> r)\n  bs = cs @ ds \\<and> insert_body bs e = cs @ e # ds\n  \\<lbrakk>\\<forall>x\\<in>set ?as. ?a \\<noteq> x;\n   insert_body (?cs @ ?ds) ?e = ?cs @ ?e # ?ds\\<rbrakk>\n  \\<Longrightarrow> insert_rga (?as @ ?a # ?cs @ ?ds) (?e, Some ?a) =\n                    ?as @ ?a # ?cs @ ?e # ?ds\n\ngoal (1 subgoal):\n 1. xs = (as @ r # cs) @ ds \\<and>\n    insert_rga xs (e, i) = (as @ r # cs) @ e # ds", "by fastforce"], ["proof (state)\nthis:\n  xs = (as @ r # cs) @ ds \\<and>\n  insert_rga xs (e, i) = (as @ r # cs) @ e # ds\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       i = Some a \\<Longrightarrow>\n       \\<exists>pre suf.\n          xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "then"], ["proof (chain)\npicking this:\n  xs = (as @ r # cs) @ ds \\<and>\n  insert_rga xs (e, i) = (as @ r # cs) @ e # ds", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = (as @ r # cs) @ ds \\<and>\n  insert_rga xs (e, i) = (as @ r # cs) @ e # ds\n\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf", "by blast"], ["proof (state)\nthis:\n  \\<exists>pre suf.\n     xs = pre @ suf \\<and> insert_rga xs (e, i) = pre @ e # suf\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Lemmas about the \\isa{rga-ops} predicate\\<close>"], ["", "definition rga_ops :: \"('oid::{linorder} \\<times> 'oid option) list \\<Rightarrow> bool\" where\n  \"rga_ops list \\<equiv> crdt_ops list set_option\""], ["", "lemma rga_ops_rem_last:\n  assumes \"rga_ops (xs @ [x])\"\n  shows \"rga_ops xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rga_ops xs", "using assms crdt_ops_rem_last rga_ops_def"], ["proof (prove)\nusing this:\n  rga_ops (xs @ [x])\n  crdt_ops (?xs @ [?x]) ?deps \\<Longrightarrow> crdt_ops ?xs ?deps\n  rga_ops ?list \\<equiv> crdt_ops ?list set_option\n\ngoal (1 subgoal):\n 1. rga_ops xs", "by blast"], ["", "lemma rga_ops_rem_penultimate:\n  assumes \"rga_ops (xs @ [(i1, r1), (i2, r2)])\"\n    and \"\\<And>r. r2 = Some r \\<Longrightarrow> r \\<noteq> i1\"\n  shows \"rga_ops (xs @ [(i2, r2)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rga_ops (xs @ [(i2, r2)])", "using assms"], ["proof (prove)\nusing this:\n  rga_ops (xs @ [(i1, r1), (i2, r2)])\n  r2 = Some ?r \\<Longrightarrow> ?r \\<noteq> i1\n\ngoal (1 subgoal):\n 1. rga_ops (xs @ [(i2, r2)])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>rga_ops (xs @ [(i1, r1), (i2, r2)]);\n     \\<And>r. r2 = Some r \\<Longrightarrow> r \\<noteq> i1\\<rbrakk>\n    \\<Longrightarrow> rga_ops (xs @ [(i2, r2)])", "have \"crdt_ops (xs @ [(i2, r2)]) set_option\""], ["proof (prove)\ngoal (1 subgoal):\n 1. crdt_ops (xs @ [(i2, r2)]) set_option", "using assms crdt_ops_rem_penultimate rga_ops_def"], ["proof (prove)\nusing this:\n  rga_ops (xs @ [(i1, r1), (i2, r2)])\n  r2 = Some ?r \\<Longrightarrow> ?r \\<noteq> i1\n  \\<lbrakk>crdt_ops (?xs @ [(?i1.0, ?r1.0)] @ [(?i2.0, ?r2.0)]) ?deps;\n   \\<And>r. r \\<in> ?deps ?r2.0 \\<Longrightarrow> r \\<noteq> ?i1.0\\<rbrakk>\n  \\<Longrightarrow> crdt_ops (?xs @ [(?i2.0, ?r2.0)]) ?deps\n  rga_ops ?list \\<equiv> crdt_ops ?list set_option\n\ngoal (1 subgoal):\n 1. crdt_ops (xs @ [(i2, r2)]) set_option", "by fastforce"], ["proof (state)\nthis:\n  crdt_ops (xs @ [(i2, r2)]) set_option\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rga_ops (xs @ [(i1, r1), (i2, r2)]);\n     \\<And>r. r2 = Some r \\<Longrightarrow> r \\<noteq> i1\\<rbrakk>\n    \\<Longrightarrow> rga_ops (xs @ [(i2, r2)])", "thus \"rga_ops (xs @ [(i2, r2)])\""], ["proof (prove)\nusing this:\n  crdt_ops (xs @ [(i2, r2)]) set_option\n\ngoal (1 subgoal):\n 1. rga_ops (xs @ [(i2, r2)])", "by (simp add: rga_ops_def)"], ["proof (state)\nthis:\n  rga_ops (xs @ [(i2, r2)])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rga_ops_ref_exists:\n  assumes \"rga_ops (pre @ (oid, Some ref) # suf)\"\n  shows \"ref \\<in> fst ` set pre\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref \\<in> fst ` set pre", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ref \\<in> fst ` set pre", "from assms"], ["proof (chain)\npicking this:\n  rga_ops (pre @ (oid, Some ref) # suf)", "have \"crdt_ops (pre @ (oid, Some ref) # suf) set_option\""], ["proof (prove)\nusing this:\n  rga_ops (pre @ (oid, Some ref) # suf)\n\ngoal (1 subgoal):\n 1. crdt_ops (pre @ (oid, Some ref) # suf) set_option", "by (simp add: rga_ops_def)"], ["proof (state)\nthis:\n  crdt_ops (pre @ (oid, Some ref) # suf) set_option\n\ngoal (1 subgoal):\n 1. ref \\<in> fst ` set pre", "moreover"], ["proof (state)\nthis:\n  crdt_ops (pre @ (oid, Some ref) # suf) set_option\n\ngoal (1 subgoal):\n 1. ref \\<in> fst ` set pre", "have \"set_option (Some ref) = {ref}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_option (Some ref) = {ref}", "by simp"], ["proof (state)\nthis:\n  set_option (Some ref) = {ref}\n\ngoal (1 subgoal):\n 1. ref \\<in> fst ` set pre", "ultimately"], ["proof (chain)\npicking this:\n  crdt_ops (pre @ (oid, Some ref) # suf) set_option\n  set_option (Some ref) = {ref}", "show \"ref \\<in> fst ` set pre\""], ["proof (prove)\nusing this:\n  crdt_ops (pre @ (oid, Some ref) # suf) set_option\n  set_option (Some ref) = {ref}\n\ngoal (1 subgoal):\n 1. ref \\<in> fst ` set pre", "using crdt_ops_ref_exists"], ["proof (prove)\nusing this:\n  crdt_ops (pre @ (oid, Some ref) # suf) set_option\n  set_option (Some ref) = {ref}\n  \\<lbrakk>crdt_ops (?pre @ (?oid, ?oper) # ?suf) ?deps;\n   ?ref \\<in> ?deps ?oper\\<rbrakk>\n  \\<Longrightarrow> ?ref \\<in> fst ` set ?pre\n\ngoal (1 subgoal):\n 1. ref \\<in> fst ` set pre", "by fastforce"], ["proof (state)\nthis:\n  ref \\<in> fst ` set pre\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Lemmas about the \\isa{interp-rga} function\\<close>"], ["", "lemma interp_rga_tail_unfold:\n  shows \"interp_rga (xs@[x]) = insert_rga (interp_rga (xs)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = insert_rga (interp_rga xs) x", "by (clarsimp simp add: interp_rga_def)"], ["", "lemma interp_rga_ids:\n  assumes \"rga_ops xs\"\n  shows \"set (interp_rga xs) = set (map fst xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (interp_rga xs) = set (map fst xs)", "using assms"], ["proof (prove)\nusing this:\n  rga_ops xs\n\ngoal (1 subgoal):\n 1. set (interp_rga xs) = set (map fst xs)", "proof(induction xs rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. rga_ops [] \\<Longrightarrow> set (interp_rga []) = set (map fst [])\n 2. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow>\n                set (interp_rga xs) = set (map fst xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "case Nil"], ["proof (state)\nthis:\n  rga_ops []\n\ngoal (2 subgoals):\n 1. rga_ops [] \\<Longrightarrow> set (interp_rga []) = set (map fst [])\n 2. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow>\n                set (interp_rga xs) = set (map fst xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "then"], ["proof (chain)\npicking this:\n  rga_ops []", "show \"set (interp_rga []) = set (map fst [])\""], ["proof (prove)\nusing this:\n  rga_ops []\n\ngoal (1 subgoal):\n 1. set (interp_rga []) = set (map fst [])", "by (simp add: interp_rga_def)"], ["proof (state)\nthis:\n  set (interp_rga []) = set (map fst [])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow>\n                set (interp_rga xs) = set (map fst xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow>\n                set (interp_rga xs) = set (map fst xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  rga_ops xs \\<Longrightarrow> set (interp_rga xs) = set (map fst xs)\n  rga_ops (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow>\n                set (interp_rga xs) = set (map fst xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "hence IH: \"set (interp_rga xs) = set (map fst xs)\""], ["proof (prove)\nusing this:\n  rga_ops xs \\<Longrightarrow> set (interp_rga xs) = set (map fst xs)\n  rga_ops (xs @ [x])\n\ngoal (1 subgoal):\n 1. set (interp_rga xs) = set (map fst xs)", "using rga_ops_rem_last"], ["proof (prove)\nusing this:\n  rga_ops xs \\<Longrightarrow> set (interp_rga xs) = set (map fst xs)\n  rga_ops (xs @ [x])\n  rga_ops (?xs @ [?x]) \\<Longrightarrow> rga_ops ?xs\n\ngoal (1 subgoal):\n 1. set (interp_rga xs) = set (map fst xs)", "by blast"], ["proof (state)\nthis:\n  set (interp_rga xs) = set (map fst xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow>\n                set (interp_rga xs) = set (map fst xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "obtain xi xr where x_pair: \"x = (xi, xr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xi xr. x = (xi, xr) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x = (xi, xr)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow>\n                set (interp_rga xs) = set (map fst xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "then"], ["proof (chain)\npicking this:\n  x = (xi, xr)", "show \"set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))\""], ["proof (prove)\nusing this:\n  x = (xi, xr)\n\ngoal (1 subgoal):\n 1. set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))", "proof(cases xr)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x = (xi, xr); xr = None\\<rbrakk>\n    \\<Longrightarrow> set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))\n 2. \\<And>a.\n       \\<lbrakk>x = (xi, xr); xr = Some a\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "case None"], ["proof (state)\nthis:\n  xr = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = (xi, xr); xr = None\\<rbrakk>\n    \\<Longrightarrow> set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))\n 2. \\<And>a.\n       \\<lbrakk>x = (xi, xr); xr = Some a\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "then"], ["proof (chain)\npicking this:\n  xr = None", "show ?thesis"], ["proof (prove)\nusing this:\n  xr = None\n\ngoal (1 subgoal):\n 1. set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))", "using IH x_pair"], ["proof (prove)\nusing this:\n  xr = None\n  set (interp_rga xs) = set (map fst xs)\n  x = (xi, xr)\n\ngoal (1 subgoal):\n 1. set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))", "by (clarsimp simp add: interp_rga_def)"], ["proof (state)\nthis:\n  set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x = (xi, xr); xr = Some a\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x = (xi, xr); xr = Some a\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "case (Some r)"], ["proof (state)\nthis:\n  xr = Some r\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x = (xi, xr); xr = Some a\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "moreover"], ["proof (state)\nthis:\n  xr = Some r\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x = (xi, xr); xr = Some a\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "from this"], ["proof (chain)\npicking this:\n  xr = Some r", "have \"r \\<in> set (interp_rga xs)\""], ["proof (prove)\nusing this:\n  xr = Some r\n\ngoal (1 subgoal):\n 1. r \\<in> set (interp_rga xs)", "using IH rga_ops_ref_exists"], ["proof (prove)\nusing this:\n  xr = Some r\n  set (interp_rga xs) = set (map fst xs)\n  rga_ops (?pre @ (?oid, Some ?ref) # ?suf) \\<Longrightarrow>\n  ?ref \\<in> fst ` set ?pre\n\ngoal (1 subgoal):\n 1. r \\<in> set (interp_rga xs)", "by (metis x_pair list.set_map snoc.prems)"], ["proof (state)\nthis:\n  r \\<in> set (interp_rga xs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x = (xi, xr); xr = Some a\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "ultimately"], ["proof (chain)\npicking this:\n  xr = Some r\n  r \\<in> set (interp_rga xs)", "have \"set (interp_rga (xs @ [(xi, xr)])) = insert xi (set (interp_rga xs))\""], ["proof (prove)\nusing this:\n  xr = Some r\n  r \\<in> set (interp_rga xs)\n\ngoal (1 subgoal):\n 1. set (interp_rga (xs @ [(xi, xr)])) = insert xi (set (interp_rga xs))", "by (simp add: insert_rga_set_ins interp_rga_tail_unfold)"], ["proof (state)\nthis:\n  set (interp_rga (xs @ [(xi, xr)])) = insert xi (set (interp_rga xs))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x = (xi, xr); xr = Some a\\<rbrakk>\n       \\<Longrightarrow> set (interp_rga (xs @ [x])) =\n                         set (map fst (xs @ [x]))", "then"], ["proof (chain)\npicking this:\n  set (interp_rga (xs @ [(xi, xr)])) = insert xi (set (interp_rga xs))", "show \"set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))\""], ["proof (prove)\nusing this:\n  set (interp_rga (xs @ [(xi, xr)])) = insert xi (set (interp_rga xs))\n\ngoal (1 subgoal):\n 1. set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))", "using IH x_pair"], ["proof (prove)\nusing this:\n  set (interp_rga (xs @ [(xi, xr)])) = insert xi (set (interp_rga xs))\n  set (interp_rga xs) = set (map fst xs)\n  x = (xi, xr)\n\ngoal (1 subgoal):\n 1. set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))", "by auto"], ["proof (state)\nthis:\n  set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (interp_rga (xs @ [x])) = set (map fst (xs @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interp_rga_distinct:\n  assumes \"rga_ops xs\"\n  shows \"distinct (interp_rga xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (interp_rga xs)", "using assms"], ["proof (prove)\nusing this:\n  rga_ops xs\n\ngoal (1 subgoal):\n 1. distinct (interp_rga xs)", "proof(induction xs rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. rga_ops [] \\<Longrightarrow> distinct (interp_rga [])\n 2. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "case Nil"], ["proof (state)\nthis:\n  rga_ops []\n\ngoal (2 subgoals):\n 1. rga_ops [] \\<Longrightarrow> distinct (interp_rga [])\n 2. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "then"], ["proof (chain)\npicking this:\n  rga_ops []", "show \"distinct (interp_rga [])\""], ["proof (prove)\nusing this:\n  rga_ops []\n\ngoal (1 subgoal):\n 1. distinct (interp_rga [])", "by (simp add: interp_rga_def)"], ["proof (state)\nthis:\n  distinct (interp_rga [])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  rga_ops xs \\<Longrightarrow> distinct (interp_rga xs)\n  rga_ops (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "hence IH: \"distinct (interp_rga xs)\""], ["proof (prove)\nusing this:\n  rga_ops xs \\<Longrightarrow> distinct (interp_rga xs)\n  rga_ops (xs @ [x])\n\ngoal (1 subgoal):\n 1. distinct (interp_rga xs)", "using rga_ops_rem_last"], ["proof (prove)\nusing this:\n  rga_ops xs \\<Longrightarrow> distinct (interp_rga xs)\n  rga_ops (xs @ [x])\n  rga_ops (?xs @ [?x]) \\<Longrightarrow> rga_ops ?xs\n\ngoal (1 subgoal):\n 1. distinct (interp_rga xs)", "by blast"], ["proof (state)\nthis:\n  distinct (interp_rga xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "moreover"], ["proof (state)\nthis:\n  distinct (interp_rga xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "obtain xi xr where x_pair: \"x = (xi, xr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xi xr. x = (xi, xr) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x = (xi, xr)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "moreover"], ["proof (state)\nthis:\n  x = (xi, xr)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "from this"], ["proof (chain)\npicking this:\n  x = (xi, xr)", "have \"xi \\<notin> set (interp_rga xs)\""], ["proof (prove)\nusing this:\n  x = (xi, xr)\n\ngoal (1 subgoal):\n 1. xi \\<notin> set (interp_rga xs)", "using interp_rga_ids crdt_ops_unique_last rga_ops_rem_last"], ["proof (prove)\nusing this:\n  x = (xi, xr)\n  rga_ops ?xs \\<Longrightarrow> set (interp_rga ?xs) = set (map fst ?xs)\n  crdt_ops (?xs @ [(?oid, ?oper)]) ?deps \\<Longrightarrow>\n  ?oid \\<notin> set (map fst ?xs)\n  rga_ops (?xs @ [?x]) \\<Longrightarrow> rga_ops ?xs\n\ngoal (1 subgoal):\n 1. xi \\<notin> set (interp_rga xs)", "by (metis rga_ops_def snoc.prems)"], ["proof (state)\nthis:\n  xi \\<notin> set (interp_rga xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "moreover"], ["proof (state)\nthis:\n  xi \\<notin> set (interp_rga xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "have \"\\<exists>pre suf. interp_rga xs = pre@suf \\<and>\n           insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       interp_rga xs = pre @ suf \\<and>\n       insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       interp_rga xs = pre @ suf \\<and>\n       insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf", "have \"\\<And>r. r \\<in> set_option xr \\<Longrightarrow> r \\<in> set (map fst xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set_option xr \\<Longrightarrow> r \\<in> set (map fst xs)", "using crdt_ops_ref_exists rga_ops_def snoc.prems x_pair"], ["proof (prove)\nusing this:\n  \\<lbrakk>crdt_ops (?pre @ (?oid, ?oper) # ?suf) ?deps;\n   ?ref \\<in> ?deps ?oper\\<rbrakk>\n  \\<Longrightarrow> ?ref \\<in> fst ` set ?pre\n  rga_ops ?list \\<equiv> crdt_ops ?list set_option\n  rga_ops (xs @ [x])\n  x = (xi, xr)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set_option xr \\<Longrightarrow> r \\<in> set (map fst xs)", "by fastforce"], ["proof (state)\nthis:\n  ?r \\<in> set_option xr \\<Longrightarrow> ?r \\<in> set (map fst xs)\n\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       interp_rga xs = pre @ suf \\<and>\n       insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf", "hence \"xr = None \\<or> (\\<exists>r. xr = Some r \\<and> r \\<in> set (map fst xs))\""], ["proof (prove)\nusing this:\n  ?r \\<in> set_option xr \\<Longrightarrow> ?r \\<in> set (map fst xs)\n\ngoal (1 subgoal):\n 1. xr = None \\<or>\n    (\\<exists>r. xr = Some r \\<and> r \\<in> set (map fst xs))", "using option.set_sel"], ["proof (prove)\nusing this:\n  ?r \\<in> set_option xr \\<Longrightarrow> ?r \\<in> set (map fst xs)\n  ?a \\<noteq> None \\<Longrightarrow> the ?a \\<in> set_option ?a\n\ngoal (1 subgoal):\n 1. xr = None \\<or>\n    (\\<exists>r. xr = Some r \\<and> r \\<in> set (map fst xs))", "by blast"], ["proof (state)\nthis:\n  xr = None \\<or> (\\<exists>r. xr = Some r \\<and> r \\<in> set (map fst xs))\n\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       interp_rga xs = pre @ suf \\<and>\n       insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf", "hence \"xr = None \\<or> (\\<exists>r. xr = Some r \\<and> r \\<in> set (interp_rga xs))\""], ["proof (prove)\nusing this:\n  xr = None \\<or> (\\<exists>r. xr = Some r \\<and> r \\<in> set (map fst xs))\n\ngoal (1 subgoal):\n 1. xr = None \\<or>\n    (\\<exists>r. xr = Some r \\<and> r \\<in> set (interp_rga xs))", "using interp_rga_ids rga_ops_rem_last snoc.prems"], ["proof (prove)\nusing this:\n  xr = None \\<or> (\\<exists>r. xr = Some r \\<and> r \\<in> set (map fst xs))\n  rga_ops ?xs \\<Longrightarrow> set (interp_rga ?xs) = set (map fst ?xs)\n  rga_ops (?xs @ [?x]) \\<Longrightarrow> rga_ops ?xs\n  rga_ops (xs @ [x])\n\ngoal (1 subgoal):\n 1. xr = None \\<or>\n    (\\<exists>r. xr = Some r \\<and> r \\<in> set (interp_rga xs))", "by blast"], ["proof (state)\nthis:\n  xr = None \\<or>\n  (\\<exists>r. xr = Some r \\<and> r \\<in> set (interp_rga xs))\n\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       interp_rga xs = pre @ suf \\<and>\n       insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf", "thus ?thesis"], ["proof (prove)\nusing this:\n  xr = None \\<or>\n  (\\<exists>r. xr = Some r \\<and> r \\<in> set (interp_rga xs))\n\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       interp_rga xs = pre @ suf \\<and>\n       insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf", "using IH insert_rga_preserves_order"], ["proof (prove)\nusing this:\n  xr = None \\<or>\n  (\\<exists>r. xr = Some r \\<and> r \\<in> set (interp_rga xs))\n  distinct (interp_rga xs)\n  \\<lbrakk>?i = None \\<or>\n           (\\<exists>i'. ?i = Some i' \\<and> i' \\<in> set ?xs);\n   distinct ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>pre suf.\n                       ?xs = pre @ suf \\<and>\n                       insert_rga ?xs (?e, ?i) = pre @ ?e # suf\n\ngoal (1 subgoal):\n 1. \\<exists>pre suf.\n       interp_rga xs = pre @ suf \\<and>\n       insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf", "by blast"], ["proof (state)\nthis:\n  \\<exists>pre suf.\n     interp_rga xs = pre @ suf \\<and>\n     insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>pre suf.\n     interp_rga xs = pre @ suf \\<and>\n     insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>rga_ops xs \\<Longrightarrow> distinct (interp_rga xs);\n        rga_ops (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> distinct (interp_rga (xs @ [x]))", "ultimately"], ["proof (chain)\npicking this:\n  distinct (interp_rga xs)\n  x = (xi, xr)\n  xi \\<notin> set (interp_rga xs)\n  \\<exists>pre suf.\n     interp_rga xs = pre @ suf \\<and>\n     insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf", "show \"distinct (interp_rga (xs @ [x]))\""], ["proof (prove)\nusing this:\n  distinct (interp_rga xs)\n  x = (xi, xr)\n  xi \\<notin> set (interp_rga xs)\n  \\<exists>pre suf.\n     interp_rga xs = pre @ suf \\<and>\n     insert_rga (interp_rga xs) (xi, xr) = pre @ xi # suf\n\ngoal (1 subgoal):\n 1. distinct (interp_rga (xs @ [x]))", "by (metis Un_iff disjoint_insert(1) distinct.simps(2) distinct_append \n        interp_rga_tail_unfold list.simps(15) set_append)"], ["proof (state)\nthis:\n  distinct (interp_rga (xs @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Proof that RGA satisfies the list specification\\<close>"], ["", "lemma final_insert:\n  assumes \"set (xs @ [x]) = set (ys @ [x])\"\n    and \"rga_ops (xs @ [x])\"\n    and \"insert_ops (ys @ [x])\"\n    and \"interp_rga xs = interp_ins ys\"\n  shows \"interp_rga (xs @ [x]) = interp_ins (ys @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "obtain oid ref where x_pair: \"x = (oid, ref)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>oid ref.\n        x = (oid, ref) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x = (oid, ref)\n\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "have \"distinct (xs @ [x])\" and \"distinct (ys @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (xs @ [x]) &&& distinct (ys @ [x])", "using assms crdt_ops_distinct spec_ops_distinct rga_ops_def insert_ops_def"], ["proof (prove)\nusing this:\n  set (xs @ [x]) = set (ys @ [x])\n  rga_ops (xs @ [x])\n  insert_ops (ys @ [x])\n  interp_rga xs = interp_ins ys\n  crdt_ops ?xs ?deps \\<Longrightarrow> distinct ?xs\n  spec_ops ?ops ?deps \\<Longrightarrow> distinct ?ops\n  rga_ops ?list \\<equiv> crdt_ops ?list set_option\n  insert_ops ?list \\<equiv> spec_ops ?list set_option\n\ngoal (1 subgoal):\n 1. distinct (xs @ [x]) &&& distinct (ys @ [x])", "by blast+"], ["proof (state)\nthis:\n  distinct (xs @ [x])\n  distinct (ys @ [x])\n\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "then"], ["proof (chain)\npicking this:\n  distinct (xs @ [x])\n  distinct (ys @ [x])", "have \"set xs = set ys\""], ["proof (prove)\nusing this:\n  distinct (xs @ [x])\n  distinct (ys @ [x])\n\ngoal (1 subgoal):\n 1. set xs = set ys", "using assms(1)"], ["proof (prove)\nusing this:\n  distinct (xs @ [x])\n  distinct (ys @ [x])\n  set (xs @ [x]) = set (ys @ [x])\n\ngoal (1 subgoal):\n 1. set xs = set ys", "by force"], ["proof (state)\nthis:\n  set xs = set ys\n\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "have oid_greatest: \"\\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid", "have \"\\<And>i. i \\<in> set (map fst ys) \\<Longrightarrow> i < oid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (map fst ys) \\<Longrightarrow> i < oid", "using assms(3)"], ["proof (prove)\nusing this:\n  insert_ops (ys @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (map fst ys) \\<Longrightarrow> i < oid", "by (simp add: spec_ops_id_inc x_pair insert_ops_def)"], ["proof (state)\nthis:\n  ?i \\<in> set (map fst ys) \\<Longrightarrow> ?i < oid\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid", "hence \"\\<And>i. i \\<in> set (map fst xs) \\<Longrightarrow> i < oid\""], ["proof (prove)\nusing this:\n  ?i \\<in> set (map fst ys) \\<Longrightarrow> ?i < oid\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (map fst xs) \\<Longrightarrow> i < oid", "using \\<open>set xs = set ys\\<close>"], ["proof (prove)\nusing this:\n  ?i \\<in> set (map fst ys) \\<Longrightarrow> ?i < oid\n  set xs = set ys\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (map fst xs) \\<Longrightarrow> i < oid", "by auto"], ["proof (state)\nthis:\n  ?i \\<in> set (map fst xs) \\<Longrightarrow> ?i < oid\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid", "thus \"\\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid\""], ["proof (prove)\nusing this:\n  ?i \\<in> set (map fst xs) \\<Longrightarrow> ?i < oid\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid", "using assms(2) interp_rga_ids rga_ops_rem_last"], ["proof (prove)\nusing this:\n  ?i \\<in> set (map fst xs) \\<Longrightarrow> ?i < oid\n  rga_ops (xs @ [x])\n  rga_ops ?xs \\<Longrightarrow> set (interp_rga ?xs) = set (map fst ?xs)\n  rga_ops (?xs @ [?x]) \\<Longrightarrow> rga_ops ?xs\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid", "by blast"], ["proof (state)\nthis:\n  ?i \\<in> set (interp_rga xs) \\<Longrightarrow> ?i < oid\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i \\<in> set (interp_rga xs) \\<Longrightarrow> ?i < oid\n\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "thus \"interp_rga (xs @ [x]) = interp_ins (ys @ [x])\""], ["proof (prove)\nusing this:\n  ?i \\<in> set (interp_rga xs) \\<Longrightarrow> ?i < oid\n\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "proof(cases ref)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n     ref = None\\<rbrakk>\n    \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])\n 2. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "case None"], ["proof (state)\nthis:\n  ref = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n     ref = None\\<rbrakk>\n    \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])\n 2. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "moreover"], ["proof (state)\nthis:\n  ref = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n     ref = None\\<rbrakk>\n    \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])\n 2. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "from this"], ["proof (chain)\npicking this:\n  ref = None", "have \"insert_rga (interp_rga xs) (oid, ref) = oid # interp_rga xs\""], ["proof (prove)\nusing this:\n  ref = None\n\ngoal (1 subgoal):\n 1. insert_rga (interp_rga xs) (oid, ref) = oid # interp_rga xs", "using oid_greatest hd_in_set insert_body.elims insert_body.simps(1)\n        insert_rga.simps(1) list.sel(1)"], ["proof (prove)\nusing this:\n  ref = None\n  ?i \\<in> set (interp_rga xs) \\<Longrightarrow> ?i < oid\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs\n  \\<lbrakk>insert_body ?x ?xa = ?y;\n   \\<And>e.\n      \\<lbrakk>?x = []; ?xa = e; ?y = [e]\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>x xs e.\n      \\<lbrakk>?x = x # xs; ?xa = e;\n       ?y = (if x < e then e # x # xs else x # insert_body xs e)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  insert_body [] ?e = [?e]\n  insert_rga ?xs (?e, None) = insert_body ?xs ?e\n  hd (?x21.0 # ?x22.0) = ?x21.0\n\ngoal (1 subgoal):\n 1. insert_rga (interp_rga xs) (oid, ref) = oid # interp_rga xs", "by metis"], ["proof (state)\nthis:\n  insert_rga (interp_rga xs) (oid, ref) = oid # interp_rga xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i. i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n     ref = None\\<rbrakk>\n    \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])\n 2. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "ultimately"], ["proof (chain)\npicking this:\n  ref = None\n  insert_rga (interp_rga xs) (oid, ref) = oid # interp_rga xs", "show \"interp_rga (xs @ [x]) = interp_ins (ys @ [x])\""], ["proof (prove)\nusing this:\n  ref = None\n  insert_rga (interp_rga xs) (oid, ref) = oid # interp_rga xs\n\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "using assms(4)"], ["proof (prove)\nusing this:\n  ref = None\n  insert_rga (interp_rga xs) (oid, ref) = oid # interp_rga xs\n  interp_rga xs = interp_ins ys\n\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "by (simp add: interp_ins_tail_unfold interp_rga_tail_unfold x_pair)"], ["proof (state)\nthis:\n  interp_rga (xs @ [x]) = interp_ins (ys @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "case (Some r)"], ["proof (state)\nthis:\n  ref = Some r\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "have \"\\<exists>as bs. interp_rga xs = as @ r # bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as bs. interp_rga xs = as @ r # bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as bs. interp_rga xs = as @ r # bs", "have \"r \\<in> set (map fst xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> set (map fst xs)", "using assms(2) Some"], ["proof (prove)\nusing this:\n  rga_ops (xs @ [x])\n  ref = Some r\n\ngoal (1 subgoal):\n 1. r \\<in> set (map fst xs)", "by (simp add: rga_ops_ref_exists x_pair)"], ["proof (state)\nthis:\n  r \\<in> set (map fst xs)\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. interp_rga xs = as @ r # bs", "hence \"r \\<in> set (interp_rga xs)\""], ["proof (prove)\nusing this:\n  r \\<in> set (map fst xs)\n\ngoal (1 subgoal):\n 1. r \\<in> set (interp_rga xs)", "using assms(2) interp_rga_ids rga_ops_rem_last"], ["proof (prove)\nusing this:\n  r \\<in> set (map fst xs)\n  rga_ops (xs @ [x])\n  rga_ops ?xs \\<Longrightarrow> set (interp_rga ?xs) = set (map fst ?xs)\n  rga_ops (?xs @ [?x]) \\<Longrightarrow> rga_ops ?xs\n\ngoal (1 subgoal):\n 1. r \\<in> set (interp_rga xs)", "by blast"], ["proof (state)\nthis:\n  r \\<in> set (interp_rga xs)\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. interp_rga xs = as @ r # bs", "thus ?thesis"], ["proof (prove)\nusing this:\n  r \\<in> set (interp_rga xs)\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. interp_rga xs = as @ r # bs", "by (simp add: split_list)"], ["proof (state)\nthis:\n  \\<exists>as bs. interp_rga xs = as @ r # bs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as bs. interp_rga xs = as @ r # bs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "from this"], ["proof (chain)\npicking this:\n  \\<exists>as bs. interp_rga xs = as @ r # bs", "obtain as bs where as_bs: \"interp_rga xs = as @ r # bs\""], ["proof (prove)\nusing this:\n  \\<exists>as bs. interp_rga xs = as @ r # bs\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        interp_rga xs = as @ r # bs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  interp_rga xs = as @ r # bs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "hence \"distinct (as @ r # bs)\""], ["proof (prove)\nusing this:\n  interp_rga xs = as @ r # bs\n\ngoal (1 subgoal):\n 1. distinct (as @ r # bs)", "by (metis assms(2) interp_rga_distinct rga_ops_rem_last)"], ["proof (state)\nthis:\n  distinct (as @ r # bs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "hence \"insert_rga (as @ r # bs) (oid, Some r) = as @ r # oid # bs\""], ["proof (prove)\nusing this:\n  distinct (as @ r # bs)\n\ngoal (1 subgoal):\n 1. insert_rga (as @ r # bs) (oid, Some r) = as @ r # oid # bs", "by (metis as_bs insert_between_elements oid_greatest)"], ["proof (state)\nthis:\n  insert_rga (as @ r # bs) (oid, Some r) = as @ r # oid # bs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "moreover"], ["proof (state)\nthis:\n  insert_rga (as @ r # bs) (oid, Some r) = as @ r # oid # bs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "have \"insert_spec (as @ r # bs) (oid, Some r) = as @ r # oid # bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_spec (as @ r # bs) (oid, Some r) = as @ r # oid # bs", "by (meson \\<open>distinct (as @ r # bs)\\<close> insert_after_ref)"], ["proof (state)\nthis:\n  insert_spec (as @ r # bs) (oid, Some r) = as @ r # oid # bs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>i.\n                   i \\<in> set (interp_rga xs) \\<Longrightarrow> i < oid;\n        ref = Some a\\<rbrakk>\n       \\<Longrightarrow> interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "ultimately"], ["proof (chain)\npicking this:\n  insert_rga (as @ r # bs) (oid, Some r) = as @ r # oid # bs\n  insert_spec (as @ r # bs) (oid, Some r) = as @ r # oid # bs", "show \"interp_rga (xs @ [x]) = interp_ins (ys @ [x])\""], ["proof (prove)\nusing this:\n  insert_rga (as @ r # bs) (oid, Some r) = as @ r # oid # bs\n  insert_spec (as @ r # bs) (oid, Some r) = as @ r # oid # bs\n\ngoal (1 subgoal):\n 1. interp_rga (xs @ [x]) = interp_ins (ys @ [x])", "by (metis assms(4) Some as_bs interp_ins_tail_unfold interp_rga_tail_unfold x_pair)"], ["proof (state)\nthis:\n  interp_rga (xs @ [x]) = interp_ins (ys @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  interp_rga (xs @ [x]) = interp_ins (ys @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interp_rga_reorder:\n  assumes \"rga_ops (pre @ suf @ [(oid, ref)])\"\n    and \"\\<And>i r. (i, Some r) \\<in> set suf \\<Longrightarrow> r \\<noteq> oid\"\n    and \"\\<And>r. ref = Some r \\<Longrightarrow> r \\<notin> fst ` set suf\"\n  shows \"interp_rga (pre @ (oid, ref) # suf) = interp_rga (pre @ suf @ [(oid, ref)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # suf) =\n    interp_rga (pre @ suf @ [(oid, ref)])", "using assms"], ["proof (prove)\nusing this:\n  rga_ops (pre @ suf @ [(oid, ref)])\n  (?i, Some ?r) \\<in> set suf \\<Longrightarrow> ?r \\<noteq> oid\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set suf\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # suf) =\n    interp_rga (pre @ suf @ [(oid, ref)])", "proof(induction suf rule: List.rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>rga_ops (pre @ [] @ [(oid, ref)]);\n     \\<And>i r. (i, Some r) \\<in> set [] \\<Longrightarrow> r \\<noteq> oid;\n     \\<And>r.\n        ref = Some r \\<Longrightarrow> r \\<notin> fst ` set []\\<rbrakk>\n    \\<Longrightarrow> interp_rga (pre @ [(oid, ref)]) =\n                      interp_rga (pre @ [] @ [(oid, ref)])\n 2. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "case Nil"], ["proof (state)\nthis:\n  rga_ops (pre @ [] @ [(oid, ref)])\n  (?i, Some ?r) \\<in> set [] \\<Longrightarrow> ?r \\<noteq> oid\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>rga_ops (pre @ [] @ [(oid, ref)]);\n     \\<And>i r. (i, Some r) \\<in> set [] \\<Longrightarrow> r \\<noteq> oid;\n     \\<And>r.\n        ref = Some r \\<Longrightarrow> r \\<notin> fst ` set []\\<rbrakk>\n    \\<Longrightarrow> interp_rga (pre @ [(oid, ref)]) =\n                      interp_rga (pre @ [] @ [(oid, ref)])\n 2. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "then"], ["proof (chain)\npicking this:\n  rga_ops (pre @ [] @ [(oid, ref)])\n  (?i, Some ?r) \\<in> set [] \\<Longrightarrow> ?r \\<noteq> oid\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set []", "show ?case"], ["proof (prove)\nusing this:\n  rga_ops (pre @ [] @ [(oid, ref)])\n  (?i, Some ?r) \\<in> set [] \\<Longrightarrow> ?r \\<noteq> oid\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set []\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ [(oid, ref)]) = interp_rga (pre @ [] @ [(oid, ref)])", "by simp"], ["proof (state)\nthis:\n  interp_rga (pre @ [(oid, ref)]) = interp_rga (pre @ [] @ [(oid, ref)])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n   \\<And>i r. (i, Some r) \\<in> set xs \\<Longrightarrow> r \\<noteq> oid;\n   \\<And>r. ref = Some r \\<Longrightarrow> r \\<notin> fst ` set xs\\<rbrakk>\n  \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                    interp_rga (pre @ xs @ [(oid, ref)])\n  rga_ops (pre @ (xs @ [x]) @ [(oid, ref)])\n  (?i, Some ?r) \\<in> set (xs @ [x]) \\<Longrightarrow> ?r \\<noteq> oid\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "have ref_not_x: \"\\<And>r. ref = Some r \\<Longrightarrow> r \\<noteq> fst x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r. ref = Some r \\<Longrightarrow> r \\<noteq> fst x", "using snoc.prems(3)"], ["proof (prove)\nusing this:\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>r. ref = Some r \\<Longrightarrow> r \\<noteq> fst x", "by auto"], ["proof (state)\nthis:\n  ref = Some ?r \\<Longrightarrow> ?r \\<noteq> fst x\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "have IH: \"interp_rga (pre @ (oid, ref) # xs) = interp_rga (pre @ xs @ [(oid, ref)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs) =\n    interp_rga (pre @ xs @ [(oid, ref)])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs) =\n    interp_rga (pre @ xs @ [(oid, ref)])", "have \"rga_ops ((pre @ xs) @ [x] @ [(oid, ref)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rga_ops ((pre @ xs) @ [x] @ [(oid, ref)])", "using snoc.prems(1)"], ["proof (prove)\nusing this:\n  rga_ops (pre @ (xs @ [x]) @ [(oid, ref)])\n\ngoal (1 subgoal):\n 1. rga_ops ((pre @ xs) @ [x] @ [(oid, ref)])", "by auto"], ["proof (state)\nthis:\n  rga_ops ((pre @ xs) @ [x] @ [(oid, ref)])\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs) =\n    interp_rga (pre @ xs @ [(oid, ref)])", "moreover"], ["proof (state)\nthis:\n  rga_ops ((pre @ xs) @ [x] @ [(oid, ref)])\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs) =\n    interp_rga (pre @ xs @ [(oid, ref)])", "have \"\\<And>r. ref = Some r \\<Longrightarrow> r \\<noteq> fst x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r. ref = Some r \\<Longrightarrow> r \\<noteq> fst x", "by (simp add: ref_not_x)"], ["proof (state)\nthis:\n  ref = Some ?r \\<Longrightarrow> ?r \\<noteq> fst x\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs) =\n    interp_rga (pre @ xs @ [(oid, ref)])", "ultimately"], ["proof (chain)\npicking this:\n  rga_ops ((pre @ xs) @ [x] @ [(oid, ref)])\n  ref = Some ?r \\<Longrightarrow> ?r \\<noteq> fst x", "have \"rga_ops ((pre @ xs) @ [(oid, ref)])\""], ["proof (prove)\nusing this:\n  rga_ops ((pre @ xs) @ [x] @ [(oid, ref)])\n  ref = Some ?r \\<Longrightarrow> ?r \\<noteq> fst x\n\ngoal (1 subgoal):\n 1. rga_ops ((pre @ xs) @ [(oid, ref)])", "using rga_ops_rem_penultimate"], ["proof (prove)\nusing this:\n  rga_ops ((pre @ xs) @ [x] @ [(oid, ref)])\n  ref = Some ?r \\<Longrightarrow> ?r \\<noteq> fst x\n  \\<lbrakk>rga_ops (?xs @ [(?i1.0, ?r1.0), (?i2.0, ?r2.0)]);\n   \\<And>r. ?r2.0 = Some r \\<Longrightarrow> r \\<noteq> ?i1.0\\<rbrakk>\n  \\<Longrightarrow> rga_ops (?xs @ [(?i2.0, ?r2.0)])\n\ngoal (1 subgoal):\n 1. rga_ops ((pre @ xs) @ [(oid, ref)])", "by (metis (no_types, lifting) Cons_eq_append_conv prod.collapse)"], ["proof (state)\nthis:\n  rga_ops ((pre @ xs) @ [(oid, ref)])\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs) =\n    interp_rga (pre @ xs @ [(oid, ref)])", "thus ?thesis"], ["proof (prove)\nusing this:\n  rga_ops ((pre @ xs) @ [(oid, ref)])\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs) =\n    interp_rga (pre @ xs @ [(oid, ref)])", "using snoc"], ["proof (prove)\nusing this:\n  rga_ops ((pre @ xs) @ [(oid, ref)])\n  \\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n   \\<And>i r. (i, Some r) \\<in> set xs \\<Longrightarrow> r \\<noteq> oid;\n   \\<And>r. ref = Some r \\<Longrightarrow> r \\<notin> fst ` set xs\\<rbrakk>\n  \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                    interp_rga (pre @ xs @ [(oid, ref)])\n  rga_ops (pre @ (xs @ [x]) @ [(oid, ref)])\n  (?i, Some ?r) \\<in> set (xs @ [x]) \\<Longrightarrow> ?r \\<noteq> oid\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set (xs @ [x])\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs) =\n    interp_rga (pre @ xs @ [(oid, ref)])", "by force"], ["proof (state)\nthis:\n  interp_rga (pre @ (oid, ref) # xs) = interp_rga (pre @ xs @ [(oid, ref)])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  interp_rga (pre @ (oid, ref) # xs) = interp_rga (pre @ xs @ [(oid, ref)])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "obtain xi xr where x_pair: \"x = (xi, xr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xi xr. x = (xi, xr) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x = (xi, xr)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "have \"interp_rga (pre @ (oid, ref) # xs @ [(xi, xr)]) =\n        insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs @ [(xi, xr)]) =\n    insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr)", "using IH interp_rga_tail_unfold"], ["proof (prove)\nusing this:\n  interp_rga (pre @ (oid, ref) # xs) = interp_rga (pre @ xs @ [(oid, ref)])\n  interp_rga (?xs @ [?x]) = insert_rga (interp_rga ?xs) ?x\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs @ [(xi, xr)]) =\n    insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr)", "by (metis append.assoc append_Cons)"], ["proof (state)\nthis:\n  interp_rga (pre @ (oid, ref) # xs @ [(xi, xr)]) =\n  insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "moreover"], ["proof (state)\nthis:\n  interp_rga (pre @ (oid, ref) # xs @ [(xi, xr)]) =\n  insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "have \"... = insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr) =\n    insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr)", "using interp_rga_tail_unfold"], ["proof (prove)\nusing this:\n  interp_rga (?xs @ [?x]) = insert_rga (interp_rga ?xs) ?x\n\ngoal (1 subgoal):\n 1. insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr) =\n    insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr)", "by (metis append_assoc)"], ["proof (state)\nthis:\n  insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr) =\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "moreover"], ["proof (state)\nthis:\n  insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr) =\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "have \"... = insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n    insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n    insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)", "have \"\\<And>xrr. xr = Some xrr \\<Longrightarrow> xrr \\<noteq> oid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xrr. xr = Some xrr \\<Longrightarrow> xrr \\<noteq> oid", "using x_pair snoc.prems(2)"], ["proof (prove)\nusing this:\n  x = (xi, xr)\n  (?i, Some ?r) \\<in> set (xs @ [x]) \\<Longrightarrow> ?r \\<noteq> oid\n\ngoal (1 subgoal):\n 1. \\<And>xrr. xr = Some xrr \\<Longrightarrow> xrr \\<noteq> oid", "by auto"], ["proof (state)\nthis:\n  xr = Some ?xrr \\<Longrightarrow> ?xrr \\<noteq> oid\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n    insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)", "thus ?thesis"], ["proof (prove)\nusing this:\n  xr = Some ?xrr \\<Longrightarrow> ?xrr \\<noteq> oid\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n    insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)", "using insert_rga_commutes ref_not_x"], ["proof (prove)\nusing this:\n  xr = Some ?xrr \\<Longrightarrow> ?xrr \\<noteq> oid\n  \\<lbrakk>?i2.0 \\<noteq> Some ?e1.0; ?i1.0 \\<noteq> Some ?e2.0\\<rbrakk>\n  \\<Longrightarrow> insert_rga (insert_rga ?xs (?e1.0, ?i1.0))\n                     (?e2.0, ?i2.0) =\n                    insert_rga (insert_rga ?xs (?e2.0, ?i2.0))\n                     (?e1.0, ?i1.0)\n  ref = Some ?r \\<Longrightarrow> ?r \\<noteq> fst x\n\ngoal (1 subgoal):\n 1. insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n    insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)", "by (metis fst_conv x_pair)"], ["proof (state)\nthis:\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "moreover"], ["proof (state)\nthis:\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "have \"... = interp_rga (pre @ xs @ [x] @ [(oid, ref)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref) =\n    interp_rga (pre @ xs @ [x] @ [(oid, ref)])", "by (metis append_assoc interp_rga_tail_unfold x_pair)"], ["proof (state)\nthis:\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref) =\n  interp_rga (pre @ xs @ [x] @ [(oid, ref)])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>rga_ops (pre @ xs @ [(oid, ref)]);\n                 \\<And>i r.\n                    (i, Some r) \\<in> set xs \\<Longrightarrow>\n                    r \\<noteq> oid;\n                 \\<And>r.\n                    ref = Some r \\<Longrightarrow>\n                    r \\<notin> fst ` set xs\\<rbrakk>\n                \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs) =\n                                  interp_rga (pre @ xs @ [(oid, ref)]);\n        rga_ops (pre @ (xs @ [x]) @ [(oid, ref)]);\n        \\<And>i r.\n           (i, Some r) \\<in> set (xs @ [x]) \\<Longrightarrow>\n           r \\<noteq> oid;\n        \\<And>r.\n           ref = Some r \\<Longrightarrow>\n           r \\<notin> fst ` set (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                         interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "ultimately"], ["proof (chain)\npicking this:\n  interp_rga (pre @ (oid, ref) # xs @ [(xi, xr)]) =\n  insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr)\n  insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr) =\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr)\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref) =\n  interp_rga (pre @ xs @ [x] @ [(oid, ref)])", "show \"interp_rga (pre @ (oid, ref) # xs @ [x]) =\n                   interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])\""], ["proof (prove)\nusing this:\n  interp_rga (pre @ (oid, ref) # xs @ [(xi, xr)]) =\n  insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr)\n  insert_rga (interp_rga (pre @ xs @ [(oid, ref)])) (xi, xr) =\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr)\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (oid, ref)) (xi, xr) =\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref)\n  insert_rga (insert_rga (interp_rga (pre @ xs)) (xi, xr)) (oid, ref) =\n  interp_rga (pre @ xs @ [x] @ [(oid, ref)])\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ (oid, ref) # xs @ [x]) =\n    interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])", "by (simp add: x_pair)"], ["proof (state)\nthis:\n  interp_rga (pre @ (oid, ref) # xs @ [x]) =\n  interp_rga (pre @ (xs @ [x]) @ [(oid, ref)])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rga_spec_equal:\n  assumes \"set xs = set ys\"\n    and \"insert_ops xs\"\n    and \"rga_ops ys\"\n  shows \"interp_ins xs = interp_rga ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga ys", "using assms"], ["proof (prove)\nusing this:\n  set xs = set ys\n  insert_ops xs\n  rga_ops ys\n\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga ys", "proof(induction xs arbitrary: ys rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>set [] = set ys; insert_ops []; rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins [] = interp_rga ys\n 2. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "case Nil"], ["proof (state)\nthis:\n  set [] = set ys\n  insert_ops []\n  rga_ops ys\n\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>set [] = set ys; insert_ops []; rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins [] = interp_rga ys\n 2. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "then"], ["proof (chain)\npicking this:\n  set [] = set ys\n  insert_ops []\n  rga_ops ys", "show ?case"], ["proof (prove)\nusing this:\n  set [] = set ys\n  insert_ops []\n  rga_ops ys\n\ngoal (1 subgoal):\n 1. interp_ins [] = interp_rga ys", "by (simp add: interp_rga_def interp_ins_def)"], ["proof (state)\nthis:\n  interp_ins [] = interp_rga ys\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>set xs = set ?ys; insert_ops xs; rga_ops ?ys\\<rbrakk>\n  \\<Longrightarrow> interp_ins xs = interp_rga ?ys\n  set (xs @ [x]) = set ys\n  insert_ops (xs @ [x])\n  rga_ops ys\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "hence \"x \\<in> set ys\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs = set ?ys; insert_ops xs; rga_ops ?ys\\<rbrakk>\n  \\<Longrightarrow> interp_ins xs = interp_rga ?ys\n  set (xs @ [x]) = set ys\n  insert_ops (xs @ [x])\n  rga_ops ys\n\ngoal (1 subgoal):\n 1. x \\<in> set ys", "by (metis last_in_set snoc_eq_iff_butlast)"], ["proof (state)\nthis:\n  x \\<in> set ys\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "from this"], ["proof (chain)\npicking this:\n  x \\<in> set ys", "obtain pre suf where ys_split: \"ys = pre @ [x] @ suf\""], ["proof (prove)\nusing this:\n  x \\<in> set ys\n\ngoal (1 subgoal):\n 1. (\\<And>pre suf.\n        ys = pre @ [x] @ suf \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using split_list_first"], ["proof (prove)\nusing this:\n  x \\<in> set ys\n  ?x \\<in> set ?xs \\<Longrightarrow>\n  \\<exists>ys zs. ?xs = ys @ ?x # zs \\<and> ?x \\<notin> set ys\n\ngoal (1 subgoal):\n 1. (\\<And>pre suf.\n        ys = pre @ [x] @ suf \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ys = pre @ [x] @ suf\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "have IH: \"interp_ins xs = interp_rga (pre @ suf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga (pre @ suf)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga (pre @ suf)", "have \"crdt_ops (pre @ suf) set_option\""], ["proof (prove)\ngoal (1 subgoal):\n 1. crdt_ops (pre @ suf) set_option", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. crdt_ops (pre @ suf) set_option", "have \"crdt_ops (pre @ [x] @ suf) set_option\""], ["proof (prove)\ngoal (1 subgoal):\n 1. crdt_ops (pre @ [x] @ suf) set_option", "using rga_ops_def snoc.prems(3) ys_split"], ["proof (prove)\nusing this:\n  rga_ops ?list \\<equiv> crdt_ops ?list set_option\n  rga_ops ys\n  ys = pre @ [x] @ suf\n\ngoal (1 subgoal):\n 1. crdt_ops (pre @ [x] @ suf) set_option", "by blast"], ["proof (state)\nthis:\n  crdt_ops (pre @ [x] @ suf) set_option\n\ngoal (1 subgoal):\n 1. crdt_ops (pre @ suf) set_option", "thus \"crdt_ops (pre @ suf) set_option\""], ["proof (prove)\nusing this:\n  crdt_ops (pre @ [x] @ suf) set_option\n\ngoal (1 subgoal):\n 1. crdt_ops (pre @ suf) set_option", "using crdt_ops_rem_spec snoc.prems ys_split insert_ops_def"], ["proof (prove)\nusing this:\n  crdt_ops (pre @ [x] @ suf) set_option\n  \\<lbrakk>spec_ops (?xs @ [?x]) ?deps; crdt_ops (?ys @ [?x] @ ?zs) ?deps;\n   set (?xs @ [?x]) = set (?ys @ [?x] @ ?zs)\\<rbrakk>\n  \\<Longrightarrow> crdt_ops (?ys @ ?zs) ?deps\n  set (xs @ [x]) = set ys\n  insert_ops (xs @ [x])\n  rga_ops ys\n  ys = pre @ [x] @ suf\n  insert_ops ?list \\<equiv> spec_ops ?list set_option\n\ngoal (1 subgoal):\n 1. crdt_ops (pre @ suf) set_option", "by blast"], ["proof (state)\nthis:\n  crdt_ops (pre @ suf) set_option\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  crdt_ops (pre @ suf) set_option\n\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga (pre @ suf)", "hence \"rga_ops (pre @ suf)\""], ["proof (prove)\nusing this:\n  crdt_ops (pre @ suf) set_option\n\ngoal (1 subgoal):\n 1. rga_ops (pre @ suf)", "using rga_ops_def"], ["proof (prove)\nusing this:\n  crdt_ops (pre @ suf) set_option\n  rga_ops ?list \\<equiv> crdt_ops ?list set_option\n\ngoal (1 subgoal):\n 1. rga_ops (pre @ suf)", "by blast"], ["proof (state)\nthis:\n  rga_ops (pre @ suf)\n\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga (pre @ suf)", "moreover"], ["proof (state)\nthis:\n  rga_ops (pre @ suf)\n\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga (pre @ suf)", "have \"set xs = set (pre @ suf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs = set (pre @ suf)", "by (metis append_set_rem_last crdt_ops_distinct insert_ops_def rga_ops_def\n          snoc.prems spec_ops_distinct ys_split)"], ["proof (state)\nthis:\n  set xs = set (pre @ suf)\n\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga (pre @ suf)", "ultimately"], ["proof (chain)\npicking this:\n  rga_ops (pre @ suf)\n  set xs = set (pre @ suf)", "show ?thesis"], ["proof (prove)\nusing this:\n  rga_ops (pre @ suf)\n  set xs = set (pre @ suf)\n\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga (pre @ suf)", "using insert_ops_rem_last ys_split snoc"], ["proof (prove)\nusing this:\n  rga_ops (pre @ suf)\n  set xs = set (pre @ suf)\n  insert_ops (?xs @ [?x]) \\<Longrightarrow> insert_ops ?xs\n  ys = pre @ [x] @ suf\n  \\<lbrakk>set xs = set ?ys; insert_ops xs; rga_ops ?ys\\<rbrakk>\n  \\<Longrightarrow> interp_ins xs = interp_rga ?ys\n  set (xs @ [x]) = set ys\n  insert_ops (xs @ [x])\n  rga_ops ys\n\ngoal (1 subgoal):\n 1. interp_ins xs = interp_rga (pre @ suf)", "by metis"], ["proof (state)\nthis:\n  interp_ins xs = interp_rga (pre @ suf)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  interp_ins xs = interp_rga (pre @ suf)\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "have valid_rga: \"rga_ops (pre @ suf @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rga_ops (pre @ suf @ [x])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rga_ops (pre @ suf @ [x])", "have \"crdt_ops (pre @ suf @ [x]) set_option\""], ["proof (prove)\ngoal (1 subgoal):\n 1. crdt_ops (pre @ suf @ [x]) set_option", "using snoc.prems ys_split"], ["proof (prove)\nusing this:\n  set (xs @ [x]) = set ys\n  insert_ops (xs @ [x])\n  rga_ops ys\n  ys = pre @ [x] @ suf\n\ngoal (1 subgoal):\n 1. crdt_ops (pre @ suf @ [x]) set_option", "by (simp add: crdt_ops_reorder_spec insert_ops_def rga_ops_def)"], ["proof (state)\nthis:\n  crdt_ops (pre @ suf @ [x]) set_option\n\ngoal (1 subgoal):\n 1. rga_ops (pre @ suf @ [x])", "thus \"rga_ops (pre @ suf @ [x])\""], ["proof (prove)\nusing this:\n  crdt_ops (pre @ suf @ [x]) set_option\n\ngoal (1 subgoal):\n 1. rga_ops (pre @ suf @ [x])", "by (simp add: rga_ops_def)"], ["proof (state)\nthis:\n  rga_ops (pre @ suf @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rga_ops (pre @ suf @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "have \"interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])", "have \"set (xs @ [x]) = set (pre @ suf @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (xs @ [x]) = set (pre @ suf @ [x])", "using snoc.prems(1) ys_split"], ["proof (prove)\nusing this:\n  set (xs @ [x]) = set ys\n  ys = pre @ [x] @ suf\n\ngoal (1 subgoal):\n 1. set (xs @ [x]) = set (pre @ suf @ [x])", "by auto"], ["proof (state)\nthis:\n  set (xs @ [x]) = set (pre @ suf @ [x])\n\ngoal (1 subgoal):\n 1. interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (xs @ [x]) = set (pre @ suf @ [x])\n\ngoal (1 subgoal):\n 1. interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])", "using IH snoc.prems(2) valid_rga final_insert append_assoc"], ["proof (prove)\nusing this:\n  set (xs @ [x]) = set (pre @ suf @ [x])\n  interp_ins xs = interp_rga (pre @ suf)\n  insert_ops (xs @ [x])\n  rga_ops (pre @ suf @ [x])\n  \\<lbrakk>set (?xs @ [?x]) = set (?ys @ [?x]); rga_ops (?xs @ [?x]);\n   insert_ops (?ys @ [?x]); interp_rga ?xs = interp_ins ?ys\\<rbrakk>\n  \\<Longrightarrow> interp_rga (?xs @ [?x]) = interp_ins (?ys @ [?x])\n  (?xs @ ?ys) @ ?zs = ?xs @ ?ys @ ?zs\n\ngoal (1 subgoal):\n 1. interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])", "by metis"], ["proof (state)\nthis:\n  interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "moreover"], ["proof (state)\nthis:\n  interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "have \"... = interp_rga (pre @ [x] @ suf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "obtain oid ref where x_pair: \"x = (oid, ref)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>oid ref.\n        x = (oid, ref) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x = (oid, ref)\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "have \"\\<And>op2 r. op2 \\<in> snd ` set suf \\<Longrightarrow> r \\<in> set_option op2 \\<Longrightarrow> r \\<noteq> oid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>op2 r.\n       \\<lbrakk>op2 \\<in> snd ` set suf; r \\<in> set_option op2\\<rbrakk>\n       \\<Longrightarrow> r \\<noteq> oid", "using snoc.prems"], ["proof (prove)\nusing this:\n  set (xs @ [x]) = set ys\n  insert_ops (xs @ [x])\n  rga_ops ys\n\ngoal (1 subgoal):\n 1. \\<And>op2 r.\n       \\<lbrakk>op2 \\<in> snd ` set suf; r \\<in> set_option op2\\<rbrakk>\n       \\<Longrightarrow> r \\<noteq> oid", "by (simp add: crdt_ops_independent_suf insert_ops_def rga_ops_def x_pair ys_split)"], ["proof (state)\nthis:\n  \\<lbrakk>?op2.0 \\<in> snd ` set suf; ?r \\<in> set_option ?op2.0\\<rbrakk>\n  \\<Longrightarrow> ?r \\<noteq> oid\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "hence \"\\<And>i r. (i, Some r) \\<in> set suf \\<Longrightarrow> r \\<noteq> oid\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?op2.0 \\<in> snd ` set suf; ?r \\<in> set_option ?op2.0\\<rbrakk>\n  \\<Longrightarrow> ?r \\<noteq> oid\n\ngoal (1 subgoal):\n 1. \\<And>i r. (i, Some r) \\<in> set suf \\<Longrightarrow> r \\<noteq> oid", "by fastforce"], ["proof (state)\nthis:\n  (?i, Some ?r) \\<in> set suf \\<Longrightarrow> ?r \\<noteq> oid\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "moreover"], ["proof (state)\nthis:\n  (?i, Some ?r) \\<in> set suf \\<Longrightarrow> ?r \\<noteq> oid\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "have \"\\<And>r. ref = Some r \\<Longrightarrow> r \\<notin> fst ` set suf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r. ref = Some r \\<Longrightarrow> r \\<notin> fst ` set suf", "using crdt_ops_no_future_ref snoc.prems(3) x_pair ys_split"], ["proof (prove)\nusing this:\n  \\<lbrakk>crdt_ops (?xs @ [(?oid, ?oper)] @ ?ys) ?deps;\n   ?ref \\<in> ?deps ?oper\\<rbrakk>\n  \\<Longrightarrow> ?ref \\<notin> fst ` set ?ys\n  rga_ops ys\n  x = (oid, ref)\n  ys = pre @ [x] @ suf\n\ngoal (1 subgoal):\n 1. \\<And>r. ref = Some r \\<Longrightarrow> r \\<notin> fst ` set suf", "by (metis option.set_intros rga_ops_def)"], ["proof (state)\nthis:\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set suf\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "ultimately"], ["proof (chain)\npicking this:\n  (?i, Some ?r) \\<in> set suf \\<Longrightarrow> ?r \\<noteq> oid\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set suf", "show \"interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)\""], ["proof (prove)\nusing this:\n  (?i, Some ?r) \\<in> set suf \\<Longrightarrow> ?r \\<noteq> oid\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set suf\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "using interp_rga_reorder valid_rga x_pair"], ["proof (prove)\nusing this:\n  (?i, Some ?r) \\<in> set suf \\<Longrightarrow> ?r \\<noteq> oid\n  ref = Some ?r \\<Longrightarrow> ?r \\<notin> fst ` set suf\n  \\<lbrakk>rga_ops (?pre @ ?suf @ [(?oid, ?ref)]);\n   \\<And>i r. (i, Some r) \\<in> set ?suf \\<Longrightarrow> r \\<noteq> ?oid;\n   \\<And>r.\n      ?ref = Some r \\<Longrightarrow> r \\<notin> fst ` set ?suf\\<rbrakk>\n  \\<Longrightarrow> interp_rga (?pre @ (?oid, ?ref) # ?suf) =\n                    interp_rga (?pre @ ?suf @ [(?oid, ?ref)])\n  rga_ops (pre @ suf @ [x])\n  x = (oid, ref)\n\ngoal (1 subgoal):\n 1. interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "by force"], ["proof (state)\nthis:\n  interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>set xs = set ys; insert_ops xs;\n                    rga_ops ys\\<rbrakk>\n                   \\<Longrightarrow> interp_ins xs = interp_rga ys;\n        set (xs @ [x]) = set ys; insert_ops (xs @ [x]); rga_ops ys\\<rbrakk>\n       \\<Longrightarrow> interp_ins (xs @ [x]) = interp_rga ys", "ultimately"], ["proof (chain)\npicking this:\n  interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])\n  interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)", "show \"interp_ins (xs @ [x]) = interp_rga ys\""], ["proof (prove)\nusing this:\n  interp_ins (xs @ [x]) = interp_rga (pre @ suf @ [x])\n  interp_rga (pre @ suf @ [x]) = interp_rga (pre @ [x] @ suf)\n\ngoal (1 subgoal):\n 1. interp_ins (xs @ [x]) = interp_rga ys", "by (simp add: ys_split)"], ["proof (state)\nthis:\n  interp_ins (xs @ [x]) = interp_rga ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma insert_ops_exist:\n  assumes \"rga_ops xs\"\n  shows \"\\<exists>ys. set xs = set ys \\<and> insert_ops ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys. set xs = set ys \\<and> insert_ops ys", "using assms"], ["proof (prove)\nusing this:\n  rga_ops xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys. set xs = set ys \\<and> insert_ops ys", "by (simp add: crdt_ops_spec_ops_exist insert_ops_def rga_ops_def)"], ["", "theorem rga_meets_spec:\n  assumes \"rga_ops xs\"\n  shows \"\\<exists>ys. set ys = set xs \\<and> insert_ops ys \\<and> interp_ins ys = interp_rga xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys = set xs \\<and>\n       insert_ops ys \\<and> interp_ins ys = interp_rga xs", "using assms rga_spec_equal insert_ops_exist"], ["proof (prove)\nusing this:\n  rga_ops xs\n  \\<lbrakk>set ?xs = set ?ys; insert_ops ?xs; rga_ops ?ys\\<rbrakk>\n  \\<Longrightarrow> interp_ins ?xs = interp_rga ?ys\n  rga_ops ?xs \\<Longrightarrow>\n  \\<exists>ys. set ?xs = set ys \\<and> insert_ops ys\n\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys = set xs \\<and>\n       insert_ops ys \\<and> interp_ins ys = interp_rga xs", "by metis"], ["", "end"]]}