{"file_name": "/home/qj213/afp-2021-10-22/thys/Echelon_Form/Echelon_Form_Inverse_IArrays.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Echelon_Form", "problem_names": ["lemma matrix_to_iarray_inverse: \n  fixes A::\"'a::{euclidean_ring_gcd}^'n::{mod_type}^'n::{mod_type}\"\n  shows\"matrix_to_iarray_option (inverse_matrix A) = inverse_matrix_ring_iarray (matrix_to_iarray A)\""], "translations": [["", "lemma matrix_to_iarray_inverse: \n  fixes A::\"'a::{euclidean_ring_gcd}^'n::{mod_type}^'n::{mod_type}\"\n  shows\"matrix_to_iarray_option (inverse_matrix A) = inverse_matrix_ring_iarray (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray_option (inverse_matrix A) =\n    inverse_matrix_ring_iarray (matrix_to_iarray A)", "unfolding inverse_matrix_ring_iarray_def inverse_matrix_code_rings matrix_to_iarray_option_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (let d = det A\n         in if is_unit d then Some ((1::'a) div d *k adjugate A)\n            else None) \\<noteq>\n        None\n     then Some\n           (matrix_to_iarray\n             (the (let d = det A\n                   in if is_unit d then Some ((1::'a) div d *k adjugate A)\n                      else None)))\n     else None) =\n    (let d = det_iarrays_rings (matrix_to_iarray A)\n     in if is_unit d\n        then Some ((1::'a) div d *ssi adjugate_iarrays (matrix_to_iarray A))\n        else None)", "unfolding matrix_to_iarray_det_euclidean_ring matrix_to_iarray_adjugate"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (let d = det_iarrays_rings (matrix_to_iarray A)\n         in if is_unit d then Some ((1::'a) div d *k adjugate A)\n            else None) \\<noteq>\n        None\n     then Some\n           (matrix_to_iarray\n             (the (let d = det_iarrays_rings (matrix_to_iarray A)\n                   in if is_unit d then Some ((1::'a) div d *k adjugate A)\n                      else None)))\n     else None) =\n    (let d = det_iarrays_rings (matrix_to_iarray A)\n     in if is_unit d\n        then Some ((1::'a) div d *ssi adjugate_iarrays (matrix_to_iarray A))\n        else None)", "by (simp add: matrix_to_iarray_adjugate matrix_to_iarray_scalar_matrix_mult Let_def)"], ["", "end"]]}