{"file_name": "/home/qj213/afp-2021-10-22/thys/Echelon_Form/Echelon_Form_Det_IArrays.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Echelon_Form", "problem_names": ["lemma vector_all_zero_from_index3:\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\"\n  shows \"(\\<exists>m>i. A $ m $ k \\<noteq> 0) \n  = (\\<not> vector_all_zero_from_index (to_nat i + 1, vec_to_iarray (column k A)))\"", "lemma fst_matrix_to_iarray_echelon_form_of_column_k_det:\n  assumes k: \"k<ncols A\" and i: \"i\\<le>nrows A\"\n  shows \"fst ((echelon_form_of_column_k_det bezout) (det_P, A, i) k)\n  = fst (echelon_form_of_column_k_det_iarrays (det_P, matrix_to_iarray A, i, bezout) k)\"", "lemma snd_echelon_form_of_column_k_det:\n  shows \"(snd (echelon_form_of_column_k_det_iarrays (det_P, A, i, bezout) k))\n  = echelon_form_of_column_k_iarrays (A,i,bezout) k\"", "lemma fst_snd_echelon_form_of_column_k_le_nrows: \n  assumes \"i\\<le>nrows A\"\n  shows \"snd ((echelon_form_of_column_k bezout) (A, i) k) \\<le> nrows A\"", "lemma fst_snd_snd_echelon_form_of_column_k_det_le_nrows:\n  assumes \"i\\<le>nrows A\"\n  shows \"snd (snd ((echelon_form_of_column_k_det bezout) (n, A, i) k)) \\<le> nrows A\"", "lemma snd_snd_snd_foldl_echelon_form_of_column_k_det_iarrays:\n  \"snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays (n, A, 0, bezout) [0..<k]))) = bezout\"", "lemma matrix_to_iarray_echelon_form_of_column_k_det:\n  assumes \"k<ncols A\" and \"i\\<le>nrows A\"\n  shows \"matrix_to_iarray (fst (snd ((echelon_form_of_column_k_det bezout) (n, A, i) k))) \n  = (fst (snd (echelon_form_of_column_k_det_iarrays (n, matrix_to_iarray A, i, bezout) k)))\"", "lemma fst_snd_snd_echelon_form_of_column_k_det:\n  assumes \"k < ncols A\"\n  and \"i \\<le> nrows A\"\n  shows \"snd (snd ((echelon_form_of_column_k_det bezout) (n,A,i) k)) \n  = fst (snd (snd (echelon_form_of_column_k_det_iarrays (n,matrix_to_iarray A, i, bezout) k)))\"", "lemma \n  fixes A::\"'a::{bezout_domain}^'cols::{mod_type}^'rows::{mod_type}\"\n  assumes \"k<ncols A\"\n  shows matrix_to_iarray_fst_echelon_form_of_upt_k_det: \n  \"fst ((echelon_form_of_upt_k_det bezout) (1::'a,A) k) \n  = fst (echelon_form_of_upt_k_det_iarrays (1::'a,matrix_to_iarray A) k bezout)\"\n  and matrix_to_iarray_snd_echelon_form_of_upt_k_det:\n  \"matrix_to_iarray ((snd ((echelon_form_of_upt_k_det bezout) (1::'a,A) k))) \n  = (snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k bezout))\"\n  and \"snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a,A,0) [0..<Suc k])) \\<le> nrows A\"\n  and \"fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays \n  (1::'a,matrix_to_iarray A,0,bezout) [0..<Suc k]))) = snd (snd \n  (foldl (echelon_form_of_column_k_det bezout) (1::'a,A,0) [0..<Suc k]))\"", "lemma matrix_to_iarray_echelon_form_of_det[code_unfold]:\n  \"matrix_to_iarray (snd (echelon_form_of_det A bezout)) \n  = snd (echelon_form_of_det_iarrays (matrix_to_iarray A) bezout)\"", "lemma fst_echelon_form_of_det[code_unfold]:\n  \"(fst (echelon_form_of_det A bezout)) \n  = fst (echelon_form_of_det_iarrays (matrix_to_iarray A) bezout)\"", "lemma det_echelon_form_of_euclidean_iarrays[code]:\n  fixes A::\"'a::{euclidean_ring_gcd}^'n::{mod_type}^'n::{mod_type}\"\n  shows \"det A = (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2 \n  in 1 div (fst A') \n  * prod_list (map (\\<lambda>i. (snd A') !! i !! i) [0..<nrows_iarray (matrix_to_iarray A)]))\"", "lemma matrix_to_iarray_mat2matofpoly[code_unfold]: \n  \"matrix_to_iarray (mat2matofpoly A) = mat2matofpoly_iarrays (matrix_to_iarray A)\"", "lemma vec_to_iarray_minus[code_unfold]: \"vec_to_iarray (a - b) \n  = (vec_to_iarray a) - (vec_to_iarray b)\"", "lemma matrix_to_iarray_minus[code_unfold]: \"matrix_to_iarray (A - B) \n  = (matrix_to_iarray A) - (matrix_to_iarray B)\"", "lemma matrix_to_iarray_charpoly[code]: \"charpoly A = charpoly_iarrays (matrix_to_iarray A)\""], "translations": [["", "lemma vector_all_zero_from_index3:\n  fixes A::\"'a::{bezout_ring}^'cols::{mod_type}^'rows::{mod_type}\"\n  shows \"(\\<exists>m>i. A $ m $ k \\<noteq> 0) \n  = (\\<not> vector_all_zero_from_index (to_nat i + 1, vec_to_iarray (column k A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m>i. A $ m $ k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))", "using matrix_vector_all_zero_from_index2"], ["proof (prove)\nusing this:\n  (\\<forall>m>?i. ?A $ m $ ?k = (0::?'a)) =\n  vector_all_zero_from_index\n   (mod_type_class.to_nat ?i + 1, vec_to_iarray (column ?k ?A))\n\ngoal (1 subgoal):\n 1. (\\<exists>m>i. A $ m $ k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i A k.\n        (\\<forall>m>i. A $ m $ k = (0::?'a)) =\n        vector_all_zero_from_index\n         (mod_type_class.to_nat i + 1,\n          vec_to_iarray (column k A))) \\<Longrightarrow>\n    (\\<exists>m>i. A $ m $ k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))", "have \"(\\<forall>m>i. A $ m $ k = 0) = (vector_all_zero_from_index (to_nat i + 1, vec_to_iarray (column k A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>m>i. A $ m $ k = (0::'a)) =\n    vector_all_zero_from_index\n     (mod_type_class.to_nat i + 1, vec_to_iarray (column k A))", "using matrix_vector_all_zero_from_index2[of i A k]"], ["proof (prove)\nusing this:\n  (\\<forall>m>i. A $ m $ k = (0::'a)) =\n  vector_all_zero_from_index\n   (mod_type_class.to_nat i + 1, vec_to_iarray (column k A))\n\ngoal (1 subgoal):\n 1. (\\<forall>m>i. A $ m $ k = (0::'a)) =\n    vector_all_zero_from_index\n     (mod_type_class.to_nat i + 1, vec_to_iarray (column k A))", "by auto"], ["proof (state)\nthis:\n  (\\<forall>m>i. A $ m $ k = (0::'a)) =\n  vector_all_zero_from_index\n   (mod_type_class.to_nat i + 1, vec_to_iarray (column k A))\n\ngoal (1 subgoal):\n 1. (\\<And>i A k.\n        (\\<forall>m>i. A $ m $ k = (0::?'a)) =\n        vector_all_zero_from_index\n         (mod_type_class.to_nat i + 1,\n          vec_to_iarray (column k A))) \\<Longrightarrow>\n    (\\<exists>m>i. A $ m $ k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))", "hence \"(\\<not> (\\<forall>m>i. A $ m $ k = 0)) \n    = (\\<not>(vector_all_zero_from_index (to_nat i + 1, vec_to_iarray (column k A))))\""], ["proof (prove)\nusing this:\n  (\\<forall>m>i. A $ m $ k = (0::'a)) =\n  vector_all_zero_from_index\n   (mod_type_class.to_nat i + 1, vec_to_iarray (column k A))\n\ngoal (1 subgoal):\n 1. (\\<not> (\\<forall>m>i. A $ m $ k = (0::'a))) =\n    (\\<not> vector_all_zero_from_index\n             (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))", "by auto"], ["proof (state)\nthis:\n  (\\<not> (\\<forall>m>i. A $ m $ k = (0::'a))) =\n  (\\<not> vector_all_zero_from_index\n           (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))\n\ngoal (1 subgoal):\n 1. (\\<And>i A k.\n        (\\<forall>m>i. A $ m $ k = (0::?'a)) =\n        vector_all_zero_from_index\n         (mod_type_class.to_nat i + 1,\n          vec_to_iarray (column k A))) \\<Longrightarrow>\n    (\\<exists>m>i. A $ m $ k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<not> (\\<forall>m>i. A $ m $ k = (0::'a))) =\n  (\\<not> vector_all_zero_from_index\n           (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))\n\ngoal (1 subgoal):\n 1. (\\<exists>m>i. A $ m $ k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>m>i. A $ m $ k \\<noteq> (0::'a)) =\n  (\\<not> vector_all_zero_from_index\n           (mod_type_class.to_nat i + 1, vec_to_iarray (column k A)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fst_matrix_to_iarray_echelon_form_of_column_k_det:\n  assumes k: \"k<ncols A\" and i: \"i\\<le>nrows A\"\n  shows \"fst ((echelon_form_of_column_k_det bezout) (det_P, A, i) k)\n  = fst (echelon_form_of_column_k_det_iarrays (det_P, matrix_to_iarray A, i, bezout) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "proof (cases \"i<nrows A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "case True"], ["proof (state)\nthis:\n  i < nrows A\n\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "have ex_rw: \"(\\<exists>m>from_nat i. A $ m $ from_nat k \\<noteq> 0) \n    = (\\<not> vector_all_zero_from_index (i + 1, column_iarray k (matrix_to_iarray A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m>mod_type_class.from_nat i.\n        A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (i + 1, column_iarray k (matrix_to_iarray A)))", "using vector_all_zero_from_index3[of \"from_nat i\" A \"from_nat k\"]"], ["proof (prove)\nusing this:\n  (\\<exists>m>mod_type_class.from_nat i.\n      A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n  (\\<not> vector_all_zero_from_index\n           (mod_type_class.to_nat (mod_type_class.from_nat i) + 1,\n            vec_to_iarray (column (mod_type_class.from_nat k) A)))\n\ngoal (1 subgoal):\n 1. (\\<exists>m>mod_type_class.from_nat i.\n        A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (i + 1, column_iarray k (matrix_to_iarray A)))", "unfolding vec_to_iarray_column"], ["proof (prove)\nusing this:\n  (\\<exists>m>mod_type_class.from_nat i.\n      A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n  (\\<not> vector_all_zero_from_index\n           (mod_type_class.to_nat (mod_type_class.from_nat i) + 1,\n            column_iarray\n             (mod_type_class.to_nat (mod_type_class.from_nat k))\n             (matrix_to_iarray A)))\n\ngoal (1 subgoal):\n 1. (\\<exists>m>mod_type_class.from_nat i.\n        A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (i + 1, column_iarray k (matrix_to_iarray A)))", "unfolding to_nat_from_nat_id[OF k[unfolded ncols_def]]"], ["proof (prove)\nusing this:\n  (\\<exists>m>mod_type_class.from_nat i.\n      A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n  (\\<not> vector_all_zero_from_index\n           (mod_type_class.to_nat (mod_type_class.from_nat i) + 1,\n            column_iarray k (matrix_to_iarray A)))\n\ngoal (1 subgoal):\n 1. (\\<exists>m>mod_type_class.from_nat i.\n        A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (i + 1, column_iarray k (matrix_to_iarray A)))", "unfolding to_nat_from_nat_id[OF True[unfolded nrows_def]]"], ["proof (prove)\nusing this:\n  (\\<exists>m>mod_type_class.from_nat i.\n      A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n  (\\<not> vector_all_zero_from_index\n           (i + 1, column_iarray k (matrix_to_iarray A)))\n\ngoal (1 subgoal):\n 1. (\\<exists>m>mod_type_class.from_nat i.\n        A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n    (\\<not> vector_all_zero_from_index\n             (i + 1, column_iarray k (matrix_to_iarray A)))", "."], ["proof (state)\nthis:\n  (\\<exists>m>mod_type_class.from_nat i.\n      A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a)) =\n  (\\<not> vector_all_zero_from_index\n           (i + 1, column_iarray k (matrix_to_iarray A)))\n\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "have Aik: \"matrix_to_iarray A !! i !! k = A $ (from_nat i) $ (from_nat k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray A !! i !! k =\n    A $ mod_type_class.from_nat i $ mod_type_class.from_nat k", "by (metis True k matrix_to_iarray_nth ncols_def nrows_def to_nat_from_nat_id)"], ["proof (state)\nthis:\n  matrix_to_iarray A !! i !! k =\n  A $ mod_type_class.from_nat i $ mod_type_class.from_nat k\n\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "unfolding echelon_form_of_column_k_det_iarrays_def echelon_form_of_column_k_det_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (let (det_P, A, i) = (det_P, A, i);\n             from_nat_i = mod_type_class.from_nat i;\n             from_nat_k = mod_type_class.from_nat k\n         in if i \\<noteq> nrows A \\<and>\n               A $ from_nat_i $ from_nat_k = (0::'a) \\<and>\n               (\\<exists>m>mod_type_class.from_nat i.\n                   A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n            then (- (1::'a) * det_P,\n                  echelon_form_of_column_k bezout (A, i) k)\n            else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (let (det_P, A, i, bezout) = (det_P, matrix_to_iarray A, i, bezout)\n         in if i \\<noteq> nrows_iarray A \\<and>\n               A !! i !! k = (0::'a) \\<and>\n               \\<not> vector_all_zero_from_index (i + 1, column_iarray k A)\n            then (- (1::'a) * det_P,\n                  echelon_form_of_column_k_iarrays (A, i, bezout) k)\n            else (det_P, echelon_form_of_column_k_iarrays (A, i, bezout) k))", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (case (det_P, A, i) of\n         (det_P, A, i) \\<Rightarrow>\n           if i \\<noteq> nrows A \\<and>\n              A $ mod_type_class.from_nat i $ mod_type_class.from_nat k =\n              (0::'a) \\<and>\n              (\\<exists>m>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k bezout (A, i) k)\n           else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (case (det_P, matrix_to_iarray A, i, bezout) of\n         (det_P, A, i, bezout) \\<Rightarrow>\n           if i \\<noteq> nrows_iarray A \\<and>\n              A !! i !! k = (0::'a) \\<and>\n              \\<not> vector_all_zero_from_index (i + 1, column_iarray k A)\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k_iarrays (A, i, bezout) k)\n           else (det_P, echelon_form_of_column_k_iarrays (A, i, bezout) k))", "unfolding split_beta"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (if snd (snd (det_P, A, i)) \\<noteq>\n            nrows (fst (snd (det_P, A, i))) \\<and>\n            fst (snd (det_P, A, i)) $\n            mod_type_class.from_nat (snd (snd (det_P, A, i))) $\n            mod_type_class.from_nat k =\n            (0::'a) \\<and>\n            (\\<exists>m>mod_type_class.from_nat (snd (snd (det_P, A, i))).\n                fst (snd (det_P, A, i)) $ m $\n                mod_type_class.from_nat k \\<noteq>\n                (0::'a))\n         then (- (1::'a) * fst (det_P, A, i),\n               echelon_form_of_column_k bezout\n                (fst (snd (det_P, A, i)), snd (snd (det_P, A, i))) k)\n         else (fst (det_P, A, i),\n               echelon_form_of_column_k bezout\n                (fst (snd (det_P, A, i)), snd (snd (det_P, A, i))) k)) =\n    fst (if fst (snd (snd (det_P, matrix_to_iarray A, i, bezout))) \\<noteq>\n            nrows_iarray\n             (fst (snd (det_P, matrix_to_iarray A, i, bezout))) \\<and>\n            fst (snd (det_P, matrix_to_iarray A, i, bezout)) !!\n            fst (snd (snd (det_P, matrix_to_iarray A, i, bezout))) !!\n            k =\n            (0::'a) \\<and>\n            \\<not> vector_all_zero_from_index\n                    (fst (snd (snd (det_P, matrix_to_iarray A, i,\n                                    bezout))) +\n                     1,\n                     column_iarray k\n                      (fst (snd (det_P, matrix_to_iarray A, i, bezout))))\n         then (- (1::'a) * fst (det_P, matrix_to_iarray A, i, bezout),\n               echelon_form_of_column_k_iarrays\n                (fst (snd (det_P, matrix_to_iarray A, i, bezout)),\n                 fst (snd (snd (det_P, matrix_to_iarray A, i, bezout))),\n                 snd (snd (snd (det_P, matrix_to_iarray A, i, bezout))))\n                k)\n         else (fst (det_P, matrix_to_iarray A, i, bezout),\n               echelon_form_of_column_k_iarrays\n                (fst (snd (det_P, matrix_to_iarray A, i, bezout)),\n                 fst (snd (snd (det_P, matrix_to_iarray A, i, bezout))),\n                 snd (snd (snd (det_P, matrix_to_iarray A, i, bezout))))\n                k))", "unfolding fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (if i \\<noteq> nrows A \\<and>\n            A $ mod_type_class.from_nat i $ mod_type_class.from_nat k =\n            (0::'a) \\<and>\n            (\\<exists>m>mod_type_class.from_nat i.\n                A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n         then (- (1::'a) * det_P, echelon_form_of_column_k bezout (A, i) k)\n         else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (if i \\<noteq> nrows_iarray (matrix_to_iarray A) \\<and>\n            matrix_to_iarray A !! i !! k = (0::'a) \\<and>\n            \\<not> vector_all_zero_from_index\n                    (i + 1, column_iarray k (matrix_to_iarray A))\n         then (- (1::'a) * det_P,\n               echelon_form_of_column_k_iarrays\n                (matrix_to_iarray A, i, bezout) k)\n         else (det_P,\n               echelon_form_of_column_k_iarrays\n                (matrix_to_iarray A, i, bezout) k))", "unfolding matrix_to_iarray_nrows"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (if i \\<noteq> nrows_iarray (matrix_to_iarray A) \\<and>\n            A $ mod_type_class.from_nat i $ mod_type_class.from_nat k =\n            (0::'a) \\<and>\n            (\\<exists>m>mod_type_class.from_nat i.\n                A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n         then (- (1::'a) * det_P, echelon_form_of_column_k bezout (A, i) k)\n         else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (if i \\<noteq> nrows_iarray (matrix_to_iarray A) \\<and>\n            matrix_to_iarray A !! i !! k = (0::'a) \\<and>\n            \\<not> vector_all_zero_from_index\n                    (i + 1, column_iarray k (matrix_to_iarray A))\n         then (- (1::'a) * det_P,\n               echelon_form_of_column_k_iarrays\n                (matrix_to_iarray A, i, bezout) k)\n         else (det_P,\n               echelon_form_of_column_k_iarrays\n                (matrix_to_iarray A, i, bezout) k))", "unfolding ex_rw Aik"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (if i \\<noteq> nrows_iarray (matrix_to_iarray A) \\<and>\n            A $ mod_type_class.from_nat i $ mod_type_class.from_nat k =\n            (0::'a) \\<and>\n            \\<not> vector_all_zero_from_index\n                    (i + 1, column_iarray k (matrix_to_iarray A))\n         then (- (1::'a) * det_P, echelon_form_of_column_k bezout (A, i) k)\n         else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (if i \\<noteq> nrows_iarray (matrix_to_iarray A) \\<and>\n            A $ mod_type_class.from_nat i $ mod_type_class.from_nat k =\n            (0::'a) \\<and>\n            \\<not> vector_all_zero_from_index\n                    (i + 1, column_iarray k (matrix_to_iarray A))\n         then (- (1::'a) * det_P,\n               echelon_form_of_column_k_iarrays\n                (matrix_to_iarray A, i, bezout) k)\n         else (det_P,\n               echelon_form_of_column_k_iarrays\n                (matrix_to_iarray A, i, bezout) k))", "by auto"], ["proof (state)\nthis:\n  fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n  fst (echelon_form_of_column_k_det_iarrays\n        (det_P, matrix_to_iarray A, i, bezout) k)\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "case False"], ["proof (state)\nthis:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "hence i2: \"i=nrows A\""], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. i = nrows A", "using i"], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n  i \\<le> nrows A\n\ngoal (1 subgoal):\n 1. i = nrows A", "by simp"], ["proof (state)\nthis:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (det_P, matrix_to_iarray A, i, bezout) k)", "unfolding echelon_form_of_column_k_det_iarrays_def echelon_form_of_column_k_det_def"], ["proof (prove)\nusing this:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. fst (let (det_P, A, i) = (det_P, A, i);\n             from_nat_i = mod_type_class.from_nat i;\n             from_nat_k = mod_type_class.from_nat k\n         in if i \\<noteq> nrows A \\<and>\n               A $ from_nat_i $ from_nat_k = (0::'a) \\<and>\n               (\\<exists>m>mod_type_class.from_nat i.\n                   A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n            then (- (1::'a) * det_P,\n                  echelon_form_of_column_k bezout (A, i) k)\n            else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (let (det_P, A, i, bezout) = (det_P, matrix_to_iarray A, i, bezout)\n         in if i \\<noteq> nrows_iarray A \\<and>\n               A !! i !! k = (0::'a) \\<and>\n               \\<not> vector_all_zero_from_index (i + 1, column_iarray k A)\n            then (- (1::'a) * det_P,\n                  echelon_form_of_column_k_iarrays (A, i, bezout) k)\n            else (det_P, echelon_form_of_column_k_iarrays (A, i, bezout) k))", "unfolding Let_def fst_conv snd_conv"], ["proof (prove)\nusing this:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. fst (case (det_P, A, i) of\n         (det_P, A, i) \\<Rightarrow>\n           if i \\<noteq> nrows A \\<and>\n              A $ mod_type_class.from_nat i $ mod_type_class.from_nat k =\n              (0::'a) \\<and>\n              (\\<exists>m>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k bezout (A, i) k)\n           else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (case (det_P, matrix_to_iarray A, i, bezout) of\n         (det_P, A, i, bezout) \\<Rightarrow>\n           if i \\<noteq> nrows_iarray A \\<and>\n              A !! i !! k = (0::'a) \\<and>\n              \\<not> vector_all_zero_from_index (i + 1, column_iarray k A)\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k_iarrays (A, i, bezout) k)\n           else (det_P, echelon_form_of_column_k_iarrays (A, i, bezout) k))", "unfolding matrix_to_iarray_nrows"], ["proof (prove)\nusing this:\n  i = nrows_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. fst (case (det_P, A, i) of\n         (det_P, A, i) \\<Rightarrow>\n           if i \\<noteq> nrows_iarray (matrix_to_iarray A) \\<and>\n              A $ mod_type_class.from_nat i $ mod_type_class.from_nat k =\n              (0::'a) \\<and>\n              (\\<exists>m>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k bezout (A, i) k)\n           else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (case (det_P, matrix_to_iarray A, i, bezout) of\n         (det_P, A, i, bezout) \\<Rightarrow>\n           if i \\<noteq> nrows_iarray A \\<and>\n              A !! i !! k = (0::'a) \\<and>\n              \\<not> vector_all_zero_from_index (i + 1, column_iarray k A)\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k_iarrays (A, i, bezout) k)\n           else (det_P, echelon_form_of_column_k_iarrays (A, i, bezout) k))", "unfolding i2"], ["proof (prove)\nusing this:\n  nrows A = nrows_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. fst (case (det_P, A, nrows A) of\n         (det_P, A, i) \\<Rightarrow>\n           if i \\<noteq> nrows_iarray (matrix_to_iarray A) \\<and>\n              A $ mod_type_class.from_nat i $ mod_type_class.from_nat k =\n              (0::'a) \\<and>\n              (\\<exists>m>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k bezout (A, i) k)\n           else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (case (det_P, matrix_to_iarray A, nrows A, bezout) of\n         (det_P, A, i, bezout) \\<Rightarrow>\n           if i \\<noteq> nrows_iarray A \\<and>\n              A !! i !! k = (0::'a) \\<and>\n              \\<not> vector_all_zero_from_index (i + 1, column_iarray k A)\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k_iarrays (A, i, bezout) k)\n           else (det_P, echelon_form_of_column_k_iarrays (A, i, bezout) k))", "unfolding matrix_to_iarray_nrows"], ["proof (prove)\nusing this:\n  nrows_iarray (matrix_to_iarray A) = nrows_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. fst (case (det_P, A, nrows_iarray (matrix_to_iarray A)) of\n         (det_P, A, i) \\<Rightarrow>\n           if i \\<noteq> nrows_iarray (matrix_to_iarray A) \\<and>\n              A $ mod_type_class.from_nat i $ mod_type_class.from_nat k =\n              (0::'a) \\<and>\n              (\\<exists>m>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k bezout (A, i) k)\n           else (det_P, echelon_form_of_column_k bezout (A, i) k)) =\n    fst (case (det_P, matrix_to_iarray A, nrows_iarray (matrix_to_iarray A),\n               bezout) of\n         (det_P, A, i, bezout) \\<Rightarrow>\n           if i \\<noteq> nrows_iarray A \\<and>\n              A !! i !! k = (0::'a) \\<and>\n              \\<not> vector_all_zero_from_index (i + 1, column_iarray k A)\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k_iarrays (A, i, bezout) k)\n           else (det_P, echelon_form_of_column_k_iarrays (A, i, bezout) k))", "by auto"], ["proof (state)\nthis:\n  fst (echelon_form_of_column_k_det bezout (det_P, A, i) k) =\n  fst (echelon_form_of_column_k_det_iarrays\n        (det_P, matrix_to_iarray A, i, bezout) k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snd_echelon_form_of_column_k_det:\n  shows \"(snd (echelon_form_of_column_k_det_iarrays (det_P, A, i, bezout) k))\n  = echelon_form_of_column_k_iarrays (A,i,bezout) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (echelon_form_of_column_k_det_iarrays (det_P, A, i, bezout) k) =\n    echelon_form_of_column_k_iarrays (A, i, bezout) k", "unfolding echelon_form_of_column_k_det_iarrays_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (case (det_P, A, i, bezout) of\n         (det_P, A, i, bezout) \\<Rightarrow>\n           if i \\<noteq> nrows_iarray A \\<and>\n              A !! i !! k = (0::'a) \\<and>\n              \\<not> vector_all_zero_from_index (i + 1, column_iarray k A)\n           then (- (1::'a) * det_P,\n                 echelon_form_of_column_k_iarrays (A, i, bezout) k)\n           else (det_P,\n                 echelon_form_of_column_k_iarrays (A, i, bezout) k)) =\n    echelon_form_of_column_k_iarrays (A, i, bezout) k", "by auto"], ["", "lemma fst_snd_echelon_form_of_column_k_le_nrows: \n  assumes \"i\\<le>nrows A\"\n  shows \"snd ((echelon_form_of_column_k bezout) (A, i) k) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (echelon_form_of_column_k bezout (A, i) k) \\<le> nrows A", "using assms"], ["proof (prove)\nusing this:\n  i \\<le> nrows A\n\ngoal (1 subgoal):\n 1. snd (echelon_form_of_column_k bezout (A, i) k) \\<le> nrows A", "unfolding echelon_form_of_column_k_def Let_def fst_conv snd_conv"], ["proof (prove)\nusing this:\n  i \\<le> nrows A\n\ngoal (1 subgoal):\n 1. snd (case (A, i) of\n         (A, i) \\<Rightarrow>\n           if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n              i = nrows A\n           then (A, i)\n           else if \\<forall>m>mod_type_class.from_nat i.\n                      A $ m $ mod_type_class.from_nat k = (0::'a)\n                then (A, i + 1)\n                else (bezout_iterate\n                       (interchange_rows A (mod_type_class.from_nat i)\n                         (LEAST n.\n                             A $ n $ mod_type_class.from_nat k \\<noteq>\n                             (0::'a) \\<and>\n                             mod_type_class.from_nat i \\<le> n))\n                       (nrows A - 1) (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k) bezout,\n                      i + 1))\n    \\<le> nrows A", "unfolding nrows_def"], ["proof (prove)\nusing this:\n  i \\<le> CARD('c)\n\ngoal (1 subgoal):\n 1. snd (case (A, i) of\n         (A, i) \\<Rightarrow>\n           if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                  A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n              i = CARD('c)\n           then (A, i)\n           else if \\<forall>m>mod_type_class.from_nat i.\n                      A $ m $ mod_type_class.from_nat k = (0::'a)\n                then (A, i + 1)\n                else (bezout_iterate\n                       (interchange_rows A (mod_type_class.from_nat i)\n                         (LEAST n.\n                             A $ n $ mod_type_class.from_nat k \\<noteq>\n                             (0::'a) \\<and>\n                             mod_type_class.from_nat i \\<le> n))\n                       (CARD('c) - 1) (mod_type_class.from_nat i)\n                       (mod_type_class.from_nat k) bezout,\n                      i + 1))\n    \\<le> CARD('c)", "by auto"], ["", "lemma fst_snd_snd_echelon_form_of_column_k_det_le_nrows:\n  assumes \"i\\<le>nrows A\"\n  shows \"snd (snd ((echelon_form_of_column_k_det bezout) (n, A, i) k)) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (echelon_form_of_column_k_det bezout (n, A, i) k))\n    \\<le> nrows A", "unfolding echelon_form_of_column_k_det_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (case (n, A, i) of\n              (det_P, A, i) \\<Rightarrow>\n                if i \\<noteq> nrows A \\<and>\n                   A $ mod_type_class.from_nat i $\n                   mod_type_class.from_nat k =\n                   (0::'a) \\<and>\n                   (\\<exists>m>mod_type_class.from_nat i.\n                       A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n                then (- (1::'a) * det_P,\n                      echelon_form_of_column_k bezout (A, i) k)\n                else (det_P, echelon_form_of_column_k bezout (A, i) k)))\n    \\<le> nrows A", "by (simp add: assms fst_snd_echelon_form_of_column_k_le_nrows)"], ["", "subsubsection\\<open>Echelon Form up to column k\\<close>"], ["", "lemma snd_snd_snd_foldl_echelon_form_of_column_k_det_iarrays:\n  \"snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays (n, A, 0, bezout) [0..<k]))) = bezout\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (n, A, 0, bezout) [0..<k]))) =\n    bezout", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (n, A, 0, bezout) [0..<0]))) =\n    bezout\n 2. \\<And>k.\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<k]))) =\n       bezout \\<Longrightarrow>\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<Suc k]))) =\n       bezout", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (n, A, 0, bezout) [0..<0]))) =\n    bezout\n 2. \\<And>k.\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<k]))) =\n       bezout \\<Longrightarrow>\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<Suc k]))) =\n       bezout", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (n, A, 0, bezout) [0..<0]))) =\n    bezout", "by auto"], ["proof (state)\nthis:\n  snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (n, A, 0, bezout) [0..<0]))) =\n  bezout\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<k]))) =\n       bezout \\<Longrightarrow>\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<Suc k]))) =\n       bezout", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<k]))) =\n       bezout \\<Longrightarrow>\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<Suc k]))) =\n       bezout", "case (Suc k)"], ["proof (state)\nthis:\n  snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (n, A, 0, bezout) [0..<k]))) =\n  bezout\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<k]))) =\n       bezout \\<Longrightarrow>\n       snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                       (n, A, 0, bezout) [0..<Suc k]))) =\n       bezout", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (n, A, 0, bezout) [0..<Suc k]))) =\n    bezout", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (snd (echelon_form_of_column_k_det_iarrays\n                    (foldl echelon_form_of_column_k_det_iarrays\n                      (n, A, 0, bezout) [0..<k])\n                    k))) =\n    bezout", "apply (simp only: echelon_form_of_column_k_det_iarrays_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (snd (case foldl echelon_form_of_column_k_det_iarrays\n                         (n, A, 0, bezout) [0..<k] of\n                   (det_P, A, i, bezout) \\<Rightarrow>\n                     if i \\<noteq> nrows_iarray A \\<and>\n                        A !! i !! k = (0::'a) \\<and>\n                        \\<not> vector_all_zero_from_index\n                                (i + 1, column_iarray k A)\n                     then (- (1::'a) * det_P,\n                           echelon_form_of_column_k_iarrays (A, i, bezout)\n                            k)\n                     else (det_P,\n                           echelon_form_of_column_k_iarrays (A, i, bezout)\n                            k)))) =\n    bezout", "apply (auto simp add: split_beta echelon_form_of_column_k_iarrays_def Let_def Suc.hyps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (n, A, 0, bezout) [0..<Suc k]))) =\n  bezout\n\ngoal:\nNo subgoals!", "qed"], ["", "(*lemma snd_snd_snd_echelon_form_of_column_k_det:\n  \"snd (snd (snd (foldl echelon_form_of_column_k_det (n, A, 0, bezout) [0..<k]))) = bezout\"\n  by (metis snd_foldl_ef_det_eq snd_snd_foldl_echelon_form_of_column_k)*)"], ["", "lemma matrix_to_iarray_echelon_form_of_column_k_det:\n  assumes \"k<ncols A\" and \"i\\<le>nrows A\"\n  shows \"matrix_to_iarray (fst (snd ((echelon_form_of_column_k_det bezout) (n, A, i) k))) \n  = (fst (snd (echelon_form_of_column_k_det_iarrays (n, matrix_to_iarray A, i, bezout) k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (echelon_form_of_column_k_det bezout (n, A, i) k))) =\n    fst (snd (echelon_form_of_column_k_det_iarrays\n               (n, matrix_to_iarray A, i, bezout) k))", "unfolding snd_echelon_form_of_column_k_det"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (echelon_form_of_column_k_det bezout (n, A, i) k))) =\n    fst (echelon_form_of_column_k_iarrays (matrix_to_iarray A, i, bezout) k)", "unfolding echelon_form_of_column_k_det_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (case (n, A, i) of\n                (det_P, A, i) \\<Rightarrow>\n                  if i \\<noteq> nrows A \\<and>\n                     A $ mod_type_class.from_nat i $\n                     mod_type_class.from_nat k =\n                     (0::'a) \\<and>\n                     (\\<exists>m>mod_type_class.from_nat i.\n                         A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n                  then (- (1::'a) * det_P,\n                        echelon_form_of_column_k bezout (A, i) k)\n                  else (det_P,\n                        echelon_form_of_column_k bezout (A, i) k)))) =\n    fst (echelon_form_of_column_k_iarrays (matrix_to_iarray A, i, bezout) k)", "using assms matrix_to_iarray_echelon_form_of_column_k"], ["proof (prove)\nusing this:\n  k < ncols A\n  i \\<le> nrows A\n  \\<lbrakk>?k < ncols ?A; ?i \\<le> nrows ?A\\<rbrakk>\n  \\<Longrightarrow> matrix_to_iarray\n                     (fst (echelon_form_of_column_k ?bezout (?A, ?i) ?k)) =\n                    fst (echelon_form_of_column_k_iarrays\n                          (matrix_to_iarray ?A, ?i, ?bezout) ?k)\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (case (n, A, i) of\n                (det_P, A, i) \\<Rightarrow>\n                  if i \\<noteq> nrows A \\<and>\n                     A $ mod_type_class.from_nat i $\n                     mod_type_class.from_nat k =\n                     (0::'a) \\<and>\n                     (\\<exists>m>mod_type_class.from_nat i.\n                         A $ m $ mod_type_class.from_nat k \\<noteq> (0::'a))\n                  then (- (1::'a) * det_P,\n                        echelon_form_of_column_k bezout (A, i) k)\n                  else (det_P,\n                        echelon_form_of_column_k bezout (A, i) k)))) =\n    fst (echelon_form_of_column_k_iarrays (matrix_to_iarray A, i, bezout) k)", "by auto"], ["", "lemma fst_snd_snd_echelon_form_of_column_k_det:\n  assumes \"k < ncols A\"\n  and \"i \\<le> nrows A\"\n  shows \"snd (snd ((echelon_form_of_column_k_det bezout) (n,A,i) k)) \n  = fst (snd (snd (echelon_form_of_column_k_det_iarrays (n,matrix_to_iarray A, i, bezout) k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (echelon_form_of_column_k_det bezout (n, A, i) k)) =\n    fst (snd (snd (echelon_form_of_column_k_det_iarrays\n                    (n, matrix_to_iarray A, i, bezout) k)))", "unfolding snd_echelon_form_of_column_k_det_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (echelon_form_of_column_k bezout (A, i) k) =\n    fst (snd (snd (echelon_form_of_column_k_det_iarrays\n                    (n, matrix_to_iarray A, i, bezout) k)))", "unfolding snd_echelon_form_of_column_k_det"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (echelon_form_of_column_k bezout (A, i) k) =\n    fst (snd (echelon_form_of_column_k_iarrays\n               (matrix_to_iarray A, i, bezout) k))", "by (rule fst_snd_matrix_to_iarray_echelon_form_of_column_k[OF assms])"], ["", "lemma \n  fixes A::\"'a::{bezout_domain}^'cols::{mod_type}^'rows::{mod_type}\"\n  assumes \"k<ncols A\"\n  shows matrix_to_iarray_fst_echelon_form_of_upt_k_det: \n  \"fst ((echelon_form_of_upt_k_det bezout) (1::'a,A) k) \n  = fst (echelon_form_of_upt_k_det_iarrays (1::'a,matrix_to_iarray A) k bezout)\"\n  and matrix_to_iarray_snd_echelon_form_of_upt_k_det:\n  \"matrix_to_iarray ((snd ((echelon_form_of_upt_k_det bezout) (1::'a,A) k))) \n  = (snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k bezout))\"\n  and \"snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a,A,0) [0..<Suc k])) \\<le> nrows A\"\n  and \"fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays \n  (1::'a,matrix_to_iarray A,0,bezout) [0..<Suc k]))) = snd (snd \n  (foldl (echelon_form_of_column_k_det bezout) (1::'a,A,0) [0..<Suc k]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n     fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n           bezout) &&&\n     matrix_to_iarray\n      (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n     snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n           bezout)) &&&\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows A &&&\n    fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))", "using assms"], ["proof (prove)\nusing this:\n  k < ncols A\n\ngoal (1 subgoal):\n 1. (fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n     fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n           bezout) &&&\n     matrix_to_iarray\n      (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n     snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n           bezout)) &&&\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows A &&&\n    fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))", "proof (induct k)"], ["proof (state)\ngoal (8 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    fst (echelon_form_of_upt_k_det bezout (1::'a, A) 0) =\n    fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) 0\n          bezout)\n 2. 0 < ncols A \\<Longrightarrow>\n    matrix_to_iarray (snd (echelon_form_of_upt_k_det bezout (1::'a, A) 0)) =\n    snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) 0\n          bezout)\n 3. 0 < ncols A \\<Longrightarrow>\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc 0]))\n    \\<le> nrows A\n 4. 0 < ncols A \\<Longrightarrow>\n    fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc 0]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc 0]))\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 7. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 8. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "show \"fst ((echelon_form_of_upt_k_det bezout) (1, A) 0) \n    = fst (echelon_form_of_upt_k_det_iarrays (1, matrix_to_iarray A) 0 bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_upt_k_det bezout (1::'b, A) 0) =\n    fst (echelon_form_of_upt_k_det_iarrays (1::'c, matrix_to_iarray A) 0\n          bezout)", "unfolding echelon_form_of_upt_k_det_def echelon_form_of_upt_k_det_iarrays_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (fst (foldl (echelon_form_of_column_k_det bezout)\n               (1::'a, snd (1::'b, A), 0) [0..<Suc 0]),\n         fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                    (1::'a, snd (1::'b, A), 0) [0..<Suc 0]))) =\n    fst (fst (foldl echelon_form_of_column_k_det_iarrays\n               (1::'a, snd (1::'c, matrix_to_iarray A), 0, bezout)\n               [0..<Suc 0]),\n         fst (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, snd (1::'c, matrix_to_iarray A), 0, bezout)\n                    [0..<Suc 0])))", "by (auto, metis fst_matrix_to_iarray_echelon_form_of_column_k_det le0 ncols_not_0 neq0_conv)"], ["proof (state)\nthis:\n  fst (echelon_form_of_upt_k_det bezout (1::?'b1, A) 0) =\n  fst (echelon_form_of_upt_k_det_iarrays (1::?'c1, matrix_to_iarray A) 0\n        bezout)\n\ngoal (7 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    matrix_to_iarray (snd (echelon_form_of_upt_k_det bezout (1::'a, A) 0)) =\n    snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) 0\n          bezout)\n 2. 0 < ncols A \\<Longrightarrow>\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc 0]))\n    \\<le> nrows A\n 3. 0 < ncols A \\<Longrightarrow>\n    fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc 0]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc 0]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 7. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "show \"matrix_to_iarray (snd ((echelon_form_of_upt_k_det bezout) (1, A) 0)) =\n    snd (echelon_form_of_upt_k_det_iarrays (1, matrix_to_iarray A) 0 bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (echelon_form_of_upt_k_det bezout (1::'b, A) 0)) =\n    snd (echelon_form_of_upt_k_det_iarrays (1::'c, matrix_to_iarray A) 0\n          bezout)", "unfolding echelon_form_of_upt_k_det_def echelon_form_of_upt_k_det_iarrays_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (fst (foldl (echelon_form_of_column_k_det bezout)\n                 (1::'a, snd (1::'b, A), 0) [0..<Suc 0]),\n           fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, snd (1::'b, A), 0) [0..<Suc 0])))) =\n    snd (fst (foldl echelon_form_of_column_k_det_iarrays\n               (1::'a, snd (1::'c, matrix_to_iarray A), 0, bezout)\n               [0..<Suc 0]),\n         fst (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, snd (1::'c, matrix_to_iarray A), 0, bezout)\n                    [0..<Suc 0])))", "by (auto, metis le0 matrix_to_iarray_echelon_form_of_column_k ncols_not_0 neq0_conv \n      snd_echelon_form_of_column_k_det snd_echelon_form_of_column_k_det_eq)"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (echelon_form_of_upt_k_det bezout (1::?'b2, A) 0)) =\n  snd (echelon_form_of_upt_k_det_iarrays (1::?'c2, matrix_to_iarray A) 0\n        bezout)\n\ngoal (6 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc 0]))\n    \\<le> nrows A\n 2. 0 < ncols A \\<Longrightarrow>\n    fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc 0]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc 0]))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "show \"snd (snd (foldl (echelon_form_of_column_k_det bezout)(1, A, 0) [0..<Suc 0])) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc 0]))\n    \\<le> nrows A", "by (simp add: fst_snd_snd_echelon_form_of_column_k_det_le_nrows)"], ["proof (state)\nthis:\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc 0]))\n  \\<le> nrows A\n\ngoal (5 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc 0]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc 0]))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "show \"fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays (1, matrix_to_iarray A, 0, bezout) [0..<Suc 0]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc 0]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc 0]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc 0]))", "by (auto, metis fst_snd_matrix_to_iarray_echelon_form_of_column_k le0 ncols_not_0 neq0_conv \n      snd_echelon_form_of_column_k_det snd_echelon_form_of_column_k_det_eq)"], ["proof (state)\nthis:\n  fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc 0]))) =\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc 0]))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "fix k"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "assume \"(k < ncols A \\<Longrightarrow> fst ((echelon_form_of_upt_k_det bezout) (1::'a, A) k) \n    = fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k bezout))\"\n    and \"(k < ncols A \\<Longrightarrow>\n    matrix_to_iarray (snd ((echelon_form_of_upt_k_det bezout) (1::'a, A) k)) \n    = snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k bezout))\"\n    and \"(k < ncols A \\<Longrightarrow> \n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0) [0..<Suc k])) \\<le> nrows A)\"\n    and \"(k < ncols A \\<Longrightarrow>\n    fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0) [0..<Suc k])))\" \n    and S: \"Suc k < ncols A\""], ["proof (state)\nthis:\n  k < ncols A \\<Longrightarrow>\n  fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n  fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n        bezout)\n  k < ncols A \\<Longrightarrow>\n  matrix_to_iarray (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n  snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n        bezout)\n  k < ncols A \\<Longrightarrow>\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n  \\<le> nrows A\n  k < ncols A \\<Longrightarrow>\n  fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n  Suc k < ncols A\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "hence hyp1: \"fst ((echelon_form_of_upt_k_det bezout) (1::'a, A) k) \n    = fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k bezout)\"\n    and hyp2: \"matrix_to_iarray (snd ((echelon_form_of_upt_k_det bezout) (1::'a, A) k)) \n    = snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k bezout)\" \n    and hyp3: \"snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0) [0..<Suc k])) \n    \\<le> nrows A\"\n    and hyp4: \"fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays \n    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])))\n    = snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0) [0..<Suc k]))\""], ["proof (prove)\nusing this:\n  k < ncols A \\<Longrightarrow>\n  fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n  fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n        bezout)\n  k < ncols A \\<Longrightarrow>\n  matrix_to_iarray (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n  snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n        bezout)\n  k < ncols A \\<Longrightarrow>\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n  \\<le> nrows A\n  k < ncols A \\<Longrightarrow>\n  fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. (fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n     fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n           bezout) &&&\n     matrix_to_iarray\n      (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n     snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n           bezout)) &&&\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows A &&&\n    fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))", "by auto"], ["proof (state)\nthis:\n  fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n  fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n        bezout)\n  matrix_to_iarray (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n  snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n        bezout)\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n  \\<le> nrows A\n  fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "have list_rw: \"[0..<Suc (Suc k)] = [0..<(Suc k)] @ [Suc k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<Suc (Suc k)] = [0..<Suc k] @ [Suc k]", "by simp"], ["proof (state)\nthis:\n  [0..<Suc (Suc k)] = [0..<Suc k] @ [Suc k]\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "let ?f = \"foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc k]\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "have f_rw: \"?f= (fst ?f, fst (snd ?f), snd (snd ?f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0) [0..<Suc k] =\n    (fst (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n           [0..<Suc k]),\n     fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                [0..<Suc k])),\n     snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                [0..<Suc k])))", "by simp"], ["proof (state)\nthis:\n  foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0) [0..<Suc k] =\n  (fst (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n         [0..<Suc k]),\n   fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n              [0..<Suc k])),\n   snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n              [0..<Suc k])))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "let ?g=\"(foldl echelon_form_of_column_k_det_iarrays (1, matrix_to_iarray A, 0, bezout) [0..<Suc k])\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "have g_rw: \"?g = (fst ?g, fst (snd ?g), fst (snd (snd ?g)), snd (snd (snd ?g)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl echelon_form_of_column_k_det_iarrays\n     (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k] =\n    (fst (foldl echelon_form_of_column_k_det_iarrays\n           (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n     fst (snd (foldl echelon_form_of_column_k_det_iarrays\n                (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])),\n     fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                     (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))),\n     snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                     (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))))", "by simp"], ["proof (state)\nthis:\n  foldl echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k] =\n  (fst (foldl echelon_form_of_column_k_det_iarrays\n         (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n   fst (snd (foldl echelon_form_of_column_k_det_iarrays\n              (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])),\n   fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))),\n   snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "have rw1: \"fst ?g = fst ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (foldl echelon_form_of_column_k_det_iarrays\n          (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]) =\n    fst (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n          [0..<Suc k])", "using hyp1[unfolded echelon_form_of_upt_k_det_def echelon_form_of_upt_k_det_iarrays_def Let_def \n      fst_conv snd_conv]"], ["proof (prove)\nusing this:\n  fst (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n        [0..<Suc k]) =\n  fst (foldl echelon_form_of_column_k_det_iarrays\n        (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n\ngoal (1 subgoal):\n 1. fst (foldl echelon_form_of_column_k_det_iarrays\n          (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]) =\n    fst (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n          [0..<Suc k])", ".."], ["proof (state)\nthis:\n  fst (foldl echelon_form_of_column_k_det_iarrays\n        (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]) =\n  fst (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n        [0..<Suc k])\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "have rw2: \"fst (snd ?g) = matrix_to_iarray (fst (snd ?f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl echelon_form_of_column_k_det_iarrays\n               (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])) =\n    matrix_to_iarray\n     (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k])))", "using hyp2[unfolded echelon_form_of_upt_k_det_def \n      echelon_form_of_upt_k_det_iarrays_def Let_def snd_conv]"], ["proof (prove)\nusing this:\n  matrix_to_iarray\n   (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))) =\n  fst (snd (foldl echelon_form_of_column_k_det_iarrays\n             (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl echelon_form_of_column_k_det_iarrays\n               (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])) =\n    matrix_to_iarray\n     (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k])))", ".."], ["proof (state)\nthis:\n  fst (snd (foldl echelon_form_of_column_k_det_iarrays\n             (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])) =\n  matrix_to_iarray\n   (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k])))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "have rw3: \"fst (snd (snd ?g)) = snd (snd ?f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))", "using hyp4"], ["proof (prove)\nusing this:\n  fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n\ngoal (1 subgoal):\n 1. fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))", "."], ["proof (state)\nthis:\n  fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "(*have rw4: \"snd (snd (snd ?g)) = snd (snd (snd ?f))\" \n    unfolding snd_snd_snd_foldl_echelon_form_of_column_k_det_iarrays\n    unfolding snd_snd_snd_echelon_form_of_column_k_det ..*)"], ["proof (state)\nthis:\n  fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]))) =\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (echelon_form_of_upt_k_det bezout (1::'a, A)\n                               (Suc k)) =\n                         fst (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "show \"fst ((echelon_form_of_upt_k_det bezout) (1, A) (Suc k)) \n    = fst (echelon_form_of_upt_k_det_iarrays (1, matrix_to_iarray A) (Suc k) bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_upt_k_det bezout (1::'b, A) (Suc k)) =\n    fst (echelon_form_of_upt_k_det_iarrays (1::'c, matrix_to_iarray A)\n          (Suc k) bezout)", "unfolding echelon_form_of_upt_k_det_iarrays_def echelon_form_of_upt_k_det_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n          [0..<Suc (Suc k)]) =\n    fst (foldl echelon_form_of_column_k_det_iarrays\n          (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)])", "unfolding list_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (foldl (echelon_form_of_column_k_det bezout)\n          (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n            [0..<Suc k])\n          [Suc k]) =\n    fst (foldl echelon_form_of_column_k_det_iarrays\n          (foldl echelon_form_of_column_k_det_iarrays\n            (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n          [Suc k])", "unfolding List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_column_k_det bezout\n          (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n            [0..<Suc k])\n          (Suc k)) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (foldl echelon_form_of_column_k_det_iarrays\n            (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n          (Suc k))", "apply (subst f_rw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_column_k_det bezout\n          (fst (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k]),\n           fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])),\n           snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])))\n          (Suc k)) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (foldl echelon_form_of_column_k_det_iarrays\n            (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n          (Suc k))", "apply (subst g_rw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_column_k_det bezout\n          (fst (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k]),\n           fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])),\n           snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])))\n          (Suc k)) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (fst (foldl echelon_form_of_column_k_det_iarrays\n                 (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n           fst (snd (foldl echelon_form_of_column_k_det_iarrays\n                      (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])),\n           fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                           (1::'a, matrix_to_iarray A, 0, bezout)\n                           [0..<Suc k]))),\n           snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                           (1::'a, matrix_to_iarray A, 0, bezout)\n                           [0..<Suc k]))))\n          (Suc k))", "unfolding rw1[symmetric] rw2 rw3"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_column_k_det bezout\n          (fst (foldl echelon_form_of_column_k_det_iarrays\n                 (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n           fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])),\n           snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])))\n          (Suc k)) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (fst (foldl echelon_form_of_column_k_det_iarrays\n                 (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n           matrix_to_iarray\n            (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                        (1::'a, A, 0) [0..<Suc k]))),\n           snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])),\n           snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                           (1::'a, matrix_to_iarray A, 0, bezout)\n                           [0..<Suc k]))))\n          (Suc k))", "unfolding snd_snd_snd_foldl_echelon_form_of_column_k_det_iarrays"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_column_k_det bezout\n          (fst (foldl echelon_form_of_column_k_det_iarrays\n                 (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n           fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])),\n           snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])))\n          (Suc k)) =\n    fst (echelon_form_of_column_k_det_iarrays\n          (fst (foldl echelon_form_of_column_k_det_iarrays\n                 (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n           matrix_to_iarray\n            (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                        (1::'a, A, 0) [0..<Suc k]))),\n           snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k])),\n           bezout)\n          (Suc k))", "proof (rule fst_matrix_to_iarray_echelon_form_of_column_k_det)"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc k\n    < ncols\n       (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])))\n 2. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows\n           (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                       (1::'a, A, 0) [0..<Suc k])))", "show \"Suc k < ncols (fst (snd ?f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k\n    < ncols\n       (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])))", "using S"], ["proof (prove)\nusing this:\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. Suc k\n    < ncols\n       (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])))", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  Suc k < CARD('cols)\n\ngoal (1 subgoal):\n 1. Suc k < CARD('cols)", "."], ["proof (state)\nthis:\n  Suc k\n  < ncols\n     (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k])))\n\ngoal (1 subgoal):\n 1. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows\n           (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                       (1::'a, A, 0) [0..<Suc k])))", "show \" snd (snd (foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc k]))\n    \\<le> nrows (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc k])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows\n           (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                       (1::'a, A, 0) [0..<Suc k])))", "by (metis hyp3 nrows_def)"], ["proof (state)\nthis:\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n  \\<le> nrows\n         (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                     (1::'a, A, 0) [0..<Suc k])))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (echelon_form_of_upt_k_det bezout (1::?'b1, A) (Suc k)) =\n  fst (echelon_form_of_upt_k_det_iarrays (1::?'c1, matrix_to_iarray A)\n        (Suc k) bezout)\n\ngoal (3 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (echelon_form_of_upt_k_det bezout (1::'a, A)\n                                 (Suc k))) =\n                         snd (echelon_form_of_upt_k_det_iarrays\n                               (1::'a, matrix_to_iarray A) (Suc k) bezout)\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "show \"matrix_to_iarray (snd ((echelon_form_of_upt_k_det bezout) (1, A) (Suc k))) =\n    snd (echelon_form_of_upt_k_det_iarrays (1, matrix_to_iarray A) (Suc k) bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (echelon_form_of_upt_k_det bezout (1::'b, A) (Suc k))) =\n    snd (echelon_form_of_upt_k_det_iarrays (1::'c, matrix_to_iarray A)\n          (Suc k) bezout)", "unfolding echelon_form_of_upt_k_det_iarrays_def echelon_form_of_upt_k_det_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc (Suc k)]))) =\n    fst (snd (foldl echelon_form_of_column_k_det_iarrays\n               (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))", "unfolding list_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                 (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])\n                 [Suc k]))) =\n    fst (snd (foldl echelon_form_of_column_k_det_iarrays\n               (foldl echelon_form_of_column_k_det_iarrays\n                 (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n               [Suc k]))", "unfolding List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (echelon_form_of_column_k_det bezout\n                 (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])\n                 (Suc k)))) =\n    fst (snd (echelon_form_of_column_k_det_iarrays\n               (foldl echelon_form_of_column_k_det_iarrays\n                 (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n               (Suc k)))", "apply (subst f_rw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (echelon_form_of_column_k_det bezout\n                 (fst (foldl (echelon_form_of_column_k_det bezout)\n                        (1::'a, A, 0) [0..<Suc k]),\n                  fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k])),\n                  snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k])))\n                 (Suc k)))) =\n    fst (snd (echelon_form_of_column_k_det_iarrays\n               (foldl echelon_form_of_column_k_det_iarrays\n                 (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n               (Suc k)))", "apply (subst g_rw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (echelon_form_of_column_k_det bezout\n                 (fst (foldl (echelon_form_of_column_k_det bezout)\n                        (1::'a, A, 0) [0..<Suc k]),\n                  fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k])),\n                  snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k])))\n                 (Suc k)))) =\n    fst (snd (echelon_form_of_column_k_det_iarrays\n               (fst (foldl echelon_form_of_column_k_det_iarrays\n                      (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n                fst (snd (foldl echelon_form_of_column_k_det_iarrays\n                           (1::'a, matrix_to_iarray A, 0, bezout)\n                           [0..<Suc k])),\n                fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                                (1::'a, matrix_to_iarray A, 0, bezout)\n                                [0..<Suc k]))),\n                snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                                (1::'a, matrix_to_iarray A, 0, bezout)\n                                [0..<Suc k]))))\n               (Suc k)))", "unfolding rw1[symmetric] rw2 rw3"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (echelon_form_of_column_k_det bezout\n                 (fst (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n                  fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k])),\n                  snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k])))\n                 (Suc k)))) =\n    fst (snd (echelon_form_of_column_k_det_iarrays\n               (fst (foldl echelon_form_of_column_k_det_iarrays\n                      (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n                matrix_to_iarray\n                 (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k]))),\n                snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])),\n                snd (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                                (1::'a, matrix_to_iarray A, 0, bezout)\n                                [0..<Suc k]))))\n               (Suc k)))", "unfolding snd_snd_snd_foldl_echelon_form_of_column_k_det_iarrays"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (fst (snd (echelon_form_of_column_k_det bezout\n                 (fst (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n                  fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k])),\n                  snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k])))\n                 (Suc k)))) =\n    fst (snd (echelon_form_of_column_k_det_iarrays\n               (fst (foldl echelon_form_of_column_k_det_iarrays\n                      (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n                matrix_to_iarray\n                 (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                             (1::'a, A, 0) [0..<Suc k]))),\n                snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])),\n                bezout)\n               (Suc k)))", "proof (rule matrix_to_iarray_echelon_form_of_column_k_det)"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc k\n    < ncols\n       (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])))\n 2. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows\n           (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                       (1::'a, A, 0) [0..<Suc k])))", "show \"Suc k < ncols (fst (snd ?f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k\n    < ncols\n       (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])))", "using S"], ["proof (prove)\nusing this:\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. Suc k\n    < ncols\n       (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])))", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  Suc k < CARD('cols)\n\ngoal (1 subgoal):\n 1. Suc k < CARD('cols)", "."], ["proof (state)\nthis:\n  Suc k\n  < ncols\n     (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k])))\n\ngoal (1 subgoal):\n 1. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows\n           (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                       (1::'a, A, 0) [0..<Suc k])))", "show \"snd (snd (foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc k]))\n    \\<le> nrows (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc k])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows\n           (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                       (1::'a, A, 0) [0..<Suc k])))", "by (metis hyp3 nrows_def)"], ["proof (state)\nthis:\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n  \\<le> nrows\n         (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                     (1::'a, A, 0) [0..<Suc k])))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matrix_to_iarray\n   (snd (echelon_form_of_upt_k_det bezout (1::?'b2, A) (Suc k))) =\n  snd (echelon_form_of_upt_k_det_iarrays (1::?'c2, matrix_to_iarray A)\n        (Suc k) bezout)\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "show \"snd (snd (foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc (Suc k)])) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc (Suc k)]))\n    \\<le> nrows A", "unfolding list_rw foldl_append List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (echelon_form_of_column_k_det bezout\n               (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k])\n               (Suc k)))\n    \\<le> nrows A", "apply (subst f_rw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (echelon_form_of_column_k_det bezout\n               (fst (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k]),\n                fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])),\n                snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])))\n               (Suc k)))\n    \\<le> nrows A", "using fst_snd_snd_echelon_form_of_column_k_det_le_nrows"], ["proof (prove)\nusing this:\n  ?i \\<le> nrows ?A \\<Longrightarrow>\n  snd (snd (echelon_form_of_column_k_det ?bezout (?n, ?A, ?i) ?k))\n  \\<le> nrows ?A\n\ngoal (1 subgoal):\n 1. snd (snd (echelon_form_of_column_k_det bezout\n               (fst (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k]),\n                fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])),\n                snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])))\n               (Suc k)))\n    \\<le> nrows A", "by (metis hyp3 nrows_def)"], ["proof (state)\nthis:\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc (Suc k)]))\n  \\<le> nrows A\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (echelon_form_of_upt_k_det bezout (1::'a, A) k) =\n                fst (echelon_form_of_upt_k_det_iarrays\n                      (1::'a, matrix_to_iarray A) k bezout);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray\n         (snd (echelon_form_of_upt_k_det bezout (1::'a, A) k)) =\n        snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A) k\n              bezout);\n        k < ncols A \\<Longrightarrow>\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                        (1::'a, matrix_to_iarray A, 0, bezout)\n                        [0..<Suc k]))) =\n        snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (snd (foldl\n   echelon_form_of_column_k_det_iarrays\n   (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) =\n                         snd (snd (foldl\n                                    (echelon_form_of_column_k_det bezout)\n                                    (1::'a, A, 0) [0..<Suc (Suc k)]))", "show \"fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays \n    (1, matrix_to_iarray A, 0, bezout) [0..<Suc (Suc k)]))) \n    = snd (snd (foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc (Suc k)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout)\n                    [0..<Suc (Suc k)]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc (Suc k)]))", "unfolding echelon_form_of_upt_k_det_iarrays_def echelon_form_of_upt_k_det_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (1::'a, matrix_to_iarray A, 0, bezout)\n                    [0..<Suc (Suc k)]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc (Suc k)]))", "unfolding list_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                    (foldl echelon_form_of_column_k_det_iarrays\n                      (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n                    [Suc k]))) =\n    snd (snd (foldl (echelon_form_of_column_k_det bezout)\n               (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k])\n               [Suc k]))", "unfolding List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (echelon_form_of_column_k_det_iarrays\n                    (foldl echelon_form_of_column_k_det_iarrays\n                      (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n                    (Suc k)))) =\n    snd (snd (echelon_form_of_column_k_det bezout\n               (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k])\n               (Suc k)))", "apply (subst f_rw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (echelon_form_of_column_k_det_iarrays\n                    (foldl echelon_form_of_column_k_det_iarrays\n                      (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k])\n                    (Suc k)))) =\n    snd (snd (echelon_form_of_column_k_det bezout\n               (fst (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k]),\n                fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])),\n                snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])))\n               (Suc k)))", "apply (subst g_rw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (echelon_form_of_column_k_det_iarrays\n                    (fst (foldl echelon_form_of_column_k_det_iarrays\n                           (1::'a, matrix_to_iarray A, 0, bezout)\n                           [0..<Suc k]),\n                     fst (snd (foldl echelon_form_of_column_k_det_iarrays\n                                (1::'a, matrix_to_iarray A, 0, bezout)\n                                [0..<Suc k])),\n                     fst (snd (snd (foldl\n                                     echelon_form_of_column_k_det_iarrays\n                                     (1::'a, matrix_to_iarray A, 0, bezout)\n                                     [0..<Suc k]))),\n                     snd (snd (snd (foldl\n                                     echelon_form_of_column_k_det_iarrays\n                                     (1::'a, matrix_to_iarray A, 0, bezout)\n                                     [0..<Suc k]))))\n                    (Suc k)))) =\n    snd (snd (echelon_form_of_column_k_det bezout\n               (fst (foldl (echelon_form_of_column_k_det bezout)\n                      (1::'a, A, 0) [0..<Suc k]),\n                fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])),\n                snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])))\n               (Suc k)))", "unfolding rw1[symmetric] rw2 rw3"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (echelon_form_of_column_k_det_iarrays\n                    (fst (foldl echelon_form_of_column_k_det_iarrays\n                           (1::'a, matrix_to_iarray A, 0, bezout)\n                           [0..<Suc k]),\n                     matrix_to_iarray\n                      (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                                  (1::'a, A, 0) [0..<Suc k]))),\n                     snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                                (1::'a, A, 0) [0..<Suc k])),\n                     snd (snd (snd (foldl\n                                     echelon_form_of_column_k_det_iarrays\n                                     (1::'a, matrix_to_iarray A, 0, bezout)\n                                     [0..<Suc k]))))\n                    (Suc k)))) =\n    snd (snd (echelon_form_of_column_k_det bezout\n               (fst (foldl echelon_form_of_column_k_det_iarrays\n                      (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n                fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])),\n                snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])))\n               (Suc k)))", "unfolding snd_snd_snd_foldl_echelon_form_of_column_k_det_iarrays"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (echelon_form_of_column_k_det_iarrays\n                    (fst (foldl echelon_form_of_column_k_det_iarrays\n                           (1::'a, matrix_to_iarray A, 0, bezout)\n                           [0..<Suc k]),\n                     matrix_to_iarray\n                      (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                                  (1::'a, A, 0) [0..<Suc k]))),\n                     snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                                (1::'a, A, 0) [0..<Suc k])),\n                     bezout)\n                    (Suc k)))) =\n    snd (snd (echelon_form_of_column_k_det bezout\n               (fst (foldl echelon_form_of_column_k_det_iarrays\n                      (1::'a, matrix_to_iarray A, 0, bezout) [0..<Suc k]),\n                fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])),\n                snd (snd (foldl (echelon_form_of_column_k_det bezout)\n                           (1::'a, A, 0) [0..<Suc k])))\n               (Suc k)))", "proof (rule fst_snd_snd_echelon_form_of_column_k_det[symmetric])"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc k\n    < ncols\n       (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])))\n 2. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows\n           (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                       (1::'a, A, 0) [0..<Suc k])))", "show \"Suc k < ncols (fst (snd ?f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k\n    < ncols\n       (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])))", "using S"], ["proof (prove)\nusing this:\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. Suc k\n    < ncols\n       (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                   [0..<Suc k])))", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  Suc k < CARD('cols)\n\ngoal (1 subgoal):\n 1. Suc k < CARD('cols)", "."], ["proof (state)\nthis:\n  Suc k\n  < ncols\n     (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n                 [0..<Suc k])))\n\ngoal (1 subgoal):\n 1. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows\n           (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                       (1::'a, A, 0) [0..<Suc k])))", "show \"snd (snd (foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc k]))\n    \\<le> nrows (fst (snd (foldl (echelon_form_of_column_k_det bezout) (1, A, 0) [0..<Suc k])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n               [0..<Suc k]))\n    \\<le> nrows\n           (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                       (1::'a, A, 0) [0..<Suc k])))", "by (metis hyp3 nrows_def)"], ["proof (state)\nthis:\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc k]))\n  \\<le> nrows\n         (fst (snd (foldl (echelon_form_of_column_k_det bezout)\n                     (1::'a, A, 0) [0..<Suc k])))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (snd (snd (foldl echelon_form_of_column_k_det_iarrays\n                  (1::'a, matrix_to_iarray A, 0, bezout)\n                  [0..<Suc (Suc k)]))) =\n  snd (snd (foldl (echelon_form_of_column_k_det bezout) (1::'a, A, 0)\n             [0..<Suc (Suc k)]))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Echelon Form\\<close>"], ["", "lemma matrix_to_iarray_echelon_form_of_det[code_unfold]:\n  \"matrix_to_iarray (snd (echelon_form_of_det A bezout)) \n  = snd (echelon_form_of_det_iarrays (matrix_to_iarray A) bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (echelon_form_of_det A bezout)) =\n    snd (echelon_form_of_det_iarrays (matrix_to_iarray A) bezout)", "unfolding echelon_form_of_det_def echelon_form_of_det_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (echelon_form_of_upt_k_det bezout (1::'a, A) (ncols A - 1))) =\n    snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1) bezout)", "unfolding matrix_to_iarray_ncols[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (echelon_form_of_upt_k_det bezout (1::'a, A) (ncols A - 1))) =\n    snd (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A)\n          (ncols A - 1) bezout)", "by (rule matrix_to_iarray_snd_echelon_form_of_upt_k_det, simp add: ncols_def)"], ["", "lemma fst_echelon_form_of_det[code_unfold]:\n  \"(fst (echelon_form_of_det A bezout)) \n  = fst (echelon_form_of_det_iarrays (matrix_to_iarray A) bezout)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_det A bezout) =\n    fst (echelon_form_of_det_iarrays (matrix_to_iarray A) bezout)", "unfolding echelon_form_of_det_def echelon_form_of_det_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_upt_k_det bezout (1::'a, A) (ncols A - 1)) =\n    fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1) bezout)", "unfolding matrix_to_iarray_ncols[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (echelon_form_of_upt_k_det bezout (1::'a, A) (ncols A - 1)) =\n    fst (echelon_form_of_upt_k_det_iarrays (1::'a, matrix_to_iarray A)\n          (ncols A - 1) bezout)", "by (rule matrix_to_iarray_fst_echelon_form_of_upt_k_det, simp add: ncols_def)"], ["", "subsubsection\\<open>Computing the determinant\\<close>"], ["", "lemma det_echelon_form_of_euclidean_iarrays[code]:\n  fixes A::\"'a::{euclidean_ring_gcd}^'n::{mod_type}^'n::{mod_type}\"\n  shows \"det A = (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2 \n  in 1 div (fst A') \n  * prod_list (map (\\<lambda>i. (snd A') !! i !! i) [0..<nrows_iarray (matrix_to_iarray A)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "let ?f=\"(\\<lambda>i. snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !! i !! i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "have \"prod_list (map ?f [0..<nrows_iarray (matrix_to_iarray A)]) \n    = prod ?f (set [0..<nrows_iarray (matrix_to_iarray A)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<leftarrow>[0..<\n                          nrows_iarray\n                           (matrix_to_iarray\n                             A)]. snd (echelon_form_of_det_iarrays\n  (matrix_to_iarray A) euclid_ext2) !!\n                                  i !!\n                                  i) =\n    (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n       snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n       i !!\n       i)", "by (metis (mono_tags, lifting) distinct_upt prod.distinct_set_conv_list)"], ["proof (state)\nthis:\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (echelon_form_of_det_iarrays\n(matrix_to_iarray A) euclid_ext2) !!\n                                i !!\n                                i) =\n  (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n     snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n     i !!\n     i)\n\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "also"], ["proof (state)\nthis:\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (echelon_form_of_det_iarrays\n(matrix_to_iarray A) euclid_ext2) !!\n                                i !!\n                                i) =\n  (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n     snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n     i !!\n     i)\n\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "have \"... = prod (\\<lambda>i. snd (echelon_form_of_det A euclid_ext2) $ i $ i) (UNIV:: 'n set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n       snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n       i !!\n       i) =\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)", "proof (rule prod.reindex_cong[of \"to_nat::('n=>nat)\"])"], ["proof (state)\ngoal (3 subgoals):\n 1. inj mod_type_class.to_nat\n 2. set [0..<nrows_iarray (matrix_to_iarray A)] =\n    range mod_type_class.to_nat\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n       mod_type_class.to_nat x !!\n       mod_type_class.to_nat x =\n       snd (echelon_form_of_det A euclid_ext2) $ x $ x", "show \"inj (to_nat::('n=>nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj mod_type_class.to_nat", "by (metis strict_mono_imp_inj_on strict_mono_to_nat)"], ["proof (state)\nthis:\n  inj mod_type_class.to_nat\n\ngoal (2 subgoals):\n 1. set [0..<nrows_iarray (matrix_to_iarray A)] =\n    range mod_type_class.to_nat\n 2. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n       mod_type_class.to_nat x !!\n       mod_type_class.to_nat x =\n       snd (echelon_form_of_det A euclid_ext2) $ x $ x", "show \"set [0..<nrows_iarray (matrix_to_iarray A)] = range (to_nat::'n=>nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set [0..<nrows_iarray (matrix_to_iarray A)] =\n    range mod_type_class.to_nat", "unfolding nrows_eq_card_rows"], ["proof (prove)\ngoal (1 subgoal):\n 1. set [0..<CARD('n)] = range mod_type_class.to_nat", "using bij_to_nat[where ?'a='n]"], ["proof (prove)\nusing this:\n  bij_betw mod_type_class.to_nat UNIV {0..<CARD('n)}\n\ngoal (1 subgoal):\n 1. set [0..<CARD('n)] = range mod_type_class.to_nat", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj mod_type_class.to_nat \\<and>\n  range mod_type_class.to_nat = {0..<CARD('n)}\n\ngoal (1 subgoal):\n 1. set [0..<CARD('n)] = range mod_type_class.to_nat", "unfolding atLeast0LessThan atLeast_upt"], ["proof (prove)\nusing this:\n  inj mod_type_class.to_nat \\<and>\n  range mod_type_class.to_nat = set [0..<CARD('n)]\n\ngoal (1 subgoal):\n 1. set [0..<CARD('n)] = range mod_type_class.to_nat", "by auto"], ["proof (state)\nthis:\n  set [0..<nrows_iarray (matrix_to_iarray A)] = range mod_type_class.to_nat\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n       mod_type_class.to_nat x !!\n       mod_type_class.to_nat x =\n       snd (echelon_form_of_det A euclid_ext2) $ x $ x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n       mod_type_class.to_nat x !!\n       mod_type_class.to_nat x =\n       snd (echelon_form_of_det A euclid_ext2) $ x $ x", "show \"snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !! to_nat x !! to_nat x\n      = snd (echelon_form_of_det A euclid_ext2) $ x $ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n    mod_type_class.to_nat x !!\n    mod_type_class.to_nat x =\n    snd (echelon_form_of_det A euclid_ext2) $ x $ x", "unfolding matrix_to_iarray_echelon_form_of_det[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (echelon_form_of_det A euclid_ext2)) !!\n    mod_type_class.to_nat x !!\n    mod_type_class.to_nat x =\n    snd (echelon_form_of_det A euclid_ext2) $ x $ x", "unfolding matrix_to_iarray_nth"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (echelon_form_of_det A euclid_ext2) $ x $ x =\n    snd (echelon_form_of_det A euclid_ext2) $ x $ x", ".."], ["proof (state)\nthis:\n  snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n  mod_type_class.to_nat x !!\n  mod_type_class.to_nat x =\n  snd (echelon_form_of_det A euclid_ext2) $ x $ x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n     snd (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) !!\n     i !!\n     i) =\n  (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)\n\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (echelon_form_of_det_iarrays\n(matrix_to_iarray A) euclid_ext2) !!\n                                i !!\n                                i) =\n  (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)", "have *:\"prod_list (map (\\<lambda>i. snd (echelon_form_of_det_iarrays \n    (matrix_to_iarray A) euclid_ext2) !! i !! i) [0..<nrows_iarray (matrix_to_iarray A)]) =\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)\""], ["proof (prove)\nusing this:\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (echelon_form_of_det_iarrays\n(matrix_to_iarray A) euclid_ext2) !!\n                                i !!\n                                i) =\n  (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)\n\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<leftarrow>[0..<\n                          nrows_iarray\n                           (matrix_to_iarray\n                             A)]. snd (echelon_form_of_det_iarrays\n  (matrix_to_iarray A) euclid_ext2) !!\n                                  i !!\n                                  i) =\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)", "."], ["proof (state)\nthis:\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (echelon_form_of_det_iarrays\n(matrix_to_iarray A) euclid_ext2) !!\n                                i !!\n                                i) =\n  (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)\n\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "have \"det A = 1 div (fst (echelon_form_of_det A euclid_ext2)) \n    * prod (\\<lambda>i. snd (echelon_form_of_det A euclid_ext2) $ i $ i) (UNIV:: 'n set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det A =\n    (1::'a) div fst (echelon_form_of_det A euclid_ext2) *\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)", "unfolding det_echelon_form_of_euclidean"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) div fst (echelon_form_of_det A euclid_ext2) *\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i) =\n    (1::'a) div fst (echelon_form_of_det A euclid_ext2) *\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)", ".."], ["proof (state)\nthis:\n  det A =\n  (1::'a) div fst (echelon_form_of_det A euclid_ext2) *\n  (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)\n\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "also"], ["proof (state)\nthis:\n  det A =\n  (1::'a) div fst (echelon_form_of_det A euclid_ext2) *\n  (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)\n\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "have \"... = (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n    in 1 div (fst A') \n    * prod_list (map (\\<lambda>i. (snd A') !! i !! i) [0..<nrows_iarray (matrix_to_iarray A)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) div fst (echelon_form_of_det A euclid_ext2) *\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i) =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) div fst (echelon_form_of_det A euclid_ext2) *\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i) =\n    (1::'a) div\n    fst (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) *\n    (\\<Prod>i\\<leftarrow>[0..<\n                          nrows_iarray\n                           (matrix_to_iarray\n                             A)]. snd (echelon_form_of_det_iarrays\n  (matrix_to_iarray A) euclid_ext2) !!\n                                  i !!\n                                  i)", "unfolding * fst_echelon_form_of_det"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) div\n    fst (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) *\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i) =\n    (1::'a) div\n    fst (echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2) *\n    (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i)", ".."], ["proof (state)\nthis:\n  (1::'a) div fst (echelon_form_of_det A euclid_ext2) *\n  (\\<Prod>i\\<in>UNIV. snd (echelon_form_of_det A euclid_ext2) $ i $ i) =\n  (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n   in (1::'a) div fst A' *\n      (\\<Prod>i\\<leftarrow>[0..<\n                            nrows_iarray\n                             (matrix_to_iarray A)]. snd A' !! i !! i))\n\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "finally"], ["proof (chain)\npicking this:\n  det A =\n  (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n   in (1::'a) div fst A' *\n      (\\<Prod>i\\<leftarrow>[0..<\n                            nrows_iarray\n                             (matrix_to_iarray A)]. snd A' !! i !! i))", "show ?thesis"], ["proof (prove)\nusing this:\n  det A =\n  (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n   in (1::'a) div fst A' *\n      (\\<Prod>i\\<leftarrow>[0..<\n                            nrows_iarray\n                             (matrix_to_iarray A)]. snd A' !! i !! i))\n\ngoal (1 subgoal):\n 1. det A =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", "."], ["proof (state)\nthis:\n  det A =\n  (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n   in (1::'a) div fst A' *\n      (\\<Prod>i\\<leftarrow>[0..<\n                            nrows_iarray\n                             (matrix_to_iarray A)]. snd A' !! i !! i))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary matrix_to_iarray_det_euclidean_ring:\n  fixes A::\"'a::{euclidean_ring_gcd}^'n::{mod_type}^'n::{mod_type}\"\n  shows \"det A = det_iarrays_rings (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det A = det_iarrays_rings (matrix_to_iarray A)", "unfolding det_echelon_form_of_euclidean_iarrays det_iarrays_rings_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i)) =\n    (let A' = echelon_form_of_det_iarrays (matrix_to_iarray A) euclid_ext2\n     in (1::'a) div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray A)]. snd A' !! i !! i))", ".."], ["", "subsubsection\\<open>Computing the characteristic polynomial of a matrix\\<close>"], ["", "definition \"mat2matofpoly_iarrays A \n  = tabulate2 (nrows_iarray A) (ncols_iarray A)  (\\<lambda>i j. [:A !! i !! j:])\""], ["", "lemma matrix_to_iarray_mat2matofpoly[code_unfold]: \n  \"matrix_to_iarray (mat2matofpoly A) = mat2matofpoly_iarrays (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (mat2matofpoly A) =\n    mat2matofpoly_iarrays (matrix_to_iarray A)", "unfolding mat2matofpoly_def mat2matofpoly_iarrays_def tabulate2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (\\<chi>i j. [:A $ i $ j:]) =\n    IArray.of_fun\n     (\\<lambda>i.\n         IArray.of_fun (\\<lambda>j. [:matrix_to_iarray A !! i !! j:])\n          (ncols_iarray (matrix_to_iarray A)))\n     (nrows_iarray (matrix_to_iarray A))", "proof (rule matrix_to_iarray_eq_of_fun, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       vec_to_iarray (\\<chi>j. [:A $ i $ j:]) =\n       IArray\n        (map (\\<lambda>j.\n                 [:IArray.list_of\n                    (IArray.list_of (matrix_to_iarray A) !\n                     mod_type_class.to_nat i) !\n                   j:])\n          [0..<ncols_iarray (matrix_to_iarray A)])\n 2. nrows_iarray (matrix_to_iarray A) =\n    length (IArray.list_of (matrix_to_iarray (\\<chi>i j. [:A $ i $ j:])))", "show \"nrows_iarray (matrix_to_iarray A) = length (IArray.list_of (matrix_to_iarray (\\<chi> i j. [:A $ i $ j:])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nrows_iarray (matrix_to_iarray A) =\n    length (IArray.list_of (matrix_to_iarray (\\<chi>i j. [:A $ i $ j:])))", "unfolding nrows_iarray_def matrix_to_iarray_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.length\n     (IArray\n       (map (vec_to_iarray \\<circ> ($) A \\<circ> mod_type_class.from_nat)\n         [0..<CARD('c)])) =\n    length\n     (IArray.list_of\n       (IArray\n         (map (vec_to_iarray \\<circ> ($) (\\<chi>i j. [:A $ i $ j:]) \\<circ>\n               mod_type_class.from_nat)\n           [0..<CARD('c)])))", "by simp"], ["proof (state)\nthis:\n  nrows_iarray (matrix_to_iarray A) =\n  length (IArray.list_of (matrix_to_iarray (\\<chi>i j. [:A $ i $ j:])))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       vec_to_iarray (\\<chi>j. [:A $ i $ j:]) =\n       IArray\n        (map (\\<lambda>j.\n                 [:IArray.list_of\n                    (IArray.list_of (matrix_to_iarray A) !\n                     mod_type_class.to_nat i) !\n                   j:])\n          [0..<ncols_iarray (matrix_to_iarray A)])", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       vec_to_iarray (\\<chi>j. [:A $ i $ j:]) =\n       IArray\n        (map (\\<lambda>j.\n                 [:IArray.list_of\n                    (IArray.list_of (matrix_to_iarray A) !\n                     mod_type_class.to_nat i) !\n                   j:])\n          [0..<ncols_iarray (matrix_to_iarray A)])", "show \"vec_to_iarray (\\<chi> j. [:A $ i $ j:]) =\n    IArray (map (\\<lambda>j. [:IArray.list_of (IArray.list_of (matrix_to_iarray A) ! mod_type_class.to_nat i) ! j:])\n    [0..<ncols_iarray (matrix_to_iarray A)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray (\\<chi>j. [:A $ i $ j:]) =\n    IArray\n     (map (\\<lambda>j.\n              [:IArray.list_of\n                 (IArray.list_of (matrix_to_iarray A) !\n                  mod_type_class.to_nat i) !\n                j:])\n       [0..<ncols_iarray (matrix_to_iarray A)])", "unfolding vec_to_iarray_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.of_fun\n     (\\<lambda>ia. (\\<chi>j. [:A $ i $ j:]) $ mod_type_class.from_nat ia)\n     CARD('b) =\n    IArray\n     (map (\\<lambda>j.\n              [:IArray.list_of\n                 (IArray.list_of (matrix_to_iarray A) !\n                  mod_type_class.to_nat i) !\n                j:])\n       [0..<ncols_iarray (matrix_to_iarray A)])", "unfolding matrix_to_iarray_ncols[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.of_fun\n     (\\<lambda>ia. (\\<chi>j. [:A $ i $ j:]) $ mod_type_class.from_nat ia)\n     CARD('b) =\n    IArray\n     (map (\\<lambda>j.\n              [:IArray.list_of\n                 (IArray.list_of (matrix_to_iarray A) !\n                  mod_type_class.to_nat i) !\n                j:])\n       [0..<ncols A])", "unfolding ncols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.of_fun\n     (\\<lambda>ia. (\\<chi>j. [:A $ i $ j:]) $ mod_type_class.from_nat ia)\n     CARD('b) =\n    IArray\n     (map (\\<lambda>j.\n              [:IArray.list_of\n                 (IArray.list_of (matrix_to_iarray A) !\n                  mod_type_class.to_nat i) !\n                j:])\n       [0..<CARD('b)])", "by (auto, metis IArray.sub_def vec_matrix vec_to_iarray_nth)"], ["proof (state)\nthis:\n  vec_to_iarray (\\<chi>j. [:A $ i $ j:]) =\n  IArray\n   (map (\\<lambda>j.\n            [:IArray.list_of\n               (IArray.list_of (matrix_to_iarray A) !\n                mod_type_class.to_nat i) !\n              j:])\n     [0..<ncols_iarray (matrix_to_iarray A)])\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The following two lemmas must be added to the file \\<open>Matrix_To_IArray\\<close> \n  of the AFP Gauss-Jordan development.\\<close>"], ["", "lemma vec_to_iarray_minus[code_unfold]: \"vec_to_iarray (a - b) \n  = (vec_to_iarray a) - (vec_to_iarray b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray (a - b) = vec_to_iarray a - vec_to_iarray b", "unfolding vec_to_iarray_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.of_fun (\\<lambda>i. (a - b) $ mod_type_class.from_nat i)\n     CARD('b) =\n    IArray.of_fun (\\<lambda>i. a $ mod_type_class.from_nat i) CARD('b) -\n    IArray.of_fun (\\<lambda>i. b $ mod_type_class.from_nat i) CARD('b)", "unfolding minus_iarray_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray.of_fun (\\<lambda>i. (a - b) $ mod_type_class.from_nat i)\n     CARD('b) =\n    IArray.of_fun\n     (\\<lambda>n.\n         IArray.of_fun (\\<lambda>i. a $ mod_type_class.from_nat i)\n          CARD('b) !!\n         n -\n         IArray.of_fun (\\<lambda>i. b $ mod_type_class.from_nat i)\n          CARD('b) !!\n         n)\n     (IArray.length\n       (IArray.of_fun (\\<lambda>i. a $ mod_type_class.from_nat i) CARD('b)))", "by auto"], ["", "lemma matrix_to_iarray_minus[code_unfold]: \"matrix_to_iarray (A - B) \n  = (matrix_to_iarray A) - (matrix_to_iarray B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (A - B) = matrix_to_iarray A - matrix_to_iarray B", "unfolding matrix_to_iarray_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. IArray\n     (map (\\<lambda>x. vec_to_iarray ((A - B) $ mod_type_class.from_nat x))\n       [0..<CARD('c)]) =\n    IArray\n     (map (\\<lambda>x. vec_to_iarray (A $ mod_type_class.from_nat x))\n       [0..<CARD('c)]) -\n    IArray\n     (map (\\<lambda>x. vec_to_iarray (B $ mod_type_class.from_nat x))\n       [0..<CARD('c)])", "by (simp add: minus_iarray_def Let_def vec_to_iarray_minus)"], ["", "definition \"charpoly_iarrays A \n  = det_iarrays_rings (mat_iarray (monom 1 (Suc 0)) (nrows_iarray A) - mat2matofpoly_iarrays A)\""], ["", "lemma matrix_to_iarray_charpoly[code]: \"charpoly A = charpoly_iarrays (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cayley_Hamilton_Compatible.charpoly A =\n    charpoly_iarrays (matrix_to_iarray A)", "unfolding charpoly_def charpoly_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. det (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A) =\n    det_iarrays_rings\n     (mat_iarray (monom (1::'a) (Suc 0))\n       (nrows_iarray (matrix_to_iarray A)) -\n      mat2matofpoly_iarrays (matrix_to_iarray A))", "unfolding matrix_to_iarray_mat2matofpoly[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. det (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A) =\n    det_iarrays_rings\n     (mat_iarray (monom (1::'a) (Suc 0))\n       (nrows_iarray (matrix_to_iarray A)) -\n      matrix_to_iarray (mat2matofpoly A))", "unfolding matrix_to_iarray_nrows[symmetric] nrows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. det (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A) =\n    det_iarrays_rings\n     (mat_iarray (monom (1::'a) (Suc 0)) CARD('b) -\n      matrix_to_iarray (mat2matofpoly A))", "unfolding matrix_to_iarray_mat[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. det (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A) =\n    det_iarrays_rings\n     (matrix_to_iarray (mat (monom (1::'a) (Suc 0))) -\n      matrix_to_iarray (mat2matofpoly A))", "unfolding matrix_to_iarray_minus[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. det (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A) =\n    det_iarrays_rings\n     (matrix_to_iarray (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A))", "unfolding det_iarrays_rings_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. det (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A) =\n    (let A' = echelon_form_of_det_iarrays\n               (matrix_to_iarray\n                 (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A))\n               euclid_ext2\n     in 1 div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray\n                                 (mat (monom (1::'a) (Suc 0)) -\n                                  mat2matofpoly A))]. snd A' !! i !! i))", "unfolding det_echelon_form_of_euclidean_iarrays"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let A' = echelon_form_of_det_iarrays\n               (matrix_to_iarray\n                 (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A))\n               euclid_ext2\n     in 1 div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray\n                                 (mat (monom (1::'a) (Suc 0)) -\n                                  mat2matofpoly A))]. snd A' !! i !! i)) =\n    (let A' = echelon_form_of_det_iarrays\n               (matrix_to_iarray\n                 (mat (monom (1::'a) (Suc 0)) - mat2matofpoly A))\n               euclid_ext2\n     in 1 div fst A' *\n        (\\<Prod>i\\<leftarrow>[0..<\n                              nrows_iarray\n                               (matrix_to_iarray\n                                 (mat (monom (1::'a) (Suc 0)) -\n                                  mat2matofpoly A))]. snd A' !! i !! i))", ".."], ["", "end"]]}