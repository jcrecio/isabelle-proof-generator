{"file_name": "/home/qj213/afp-2021-10-22/thys/Encodability_Process_Calculi/ProcessCalculi.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Encodability_Process_Calculi", "problem_names": ["lemma steps_refl:\n  fixes Cal :: \"'proc processCalculus\"\n    and P   :: \"'proc\"\n  shows \"P \\<longmapsto>Cal* P\"", "lemma step_to_steps:\n  fixes Cal  :: \"'proc processCalculus\"\n    and P P' :: \"'proc\"\n  assumes step: \"P \\<longmapsto>Cal P'\"\n  shows \"P \\<longmapsto>Cal* P'\"", "lemma nSteps_add:\n  fixes Cal   :: \"'proc processCalculus\"\n    and n1 n2 :: \"nat\"\n  shows \"\\<forall>P Q R. P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and> Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R \\<longrightarrow> P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R\"", "lemma steps_add:\n  fixes Cal   :: \"'proc processCalculus\"\n    and P Q R :: \"'proc\"\n  assumes A1: \"P \\<longmapsto>Cal* Q\"\n      and A2: \"Q \\<longmapsto>Cal* R\"\n  shows \"P \\<longmapsto>Cal* R\"", "lemma preservation_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_preserves_barbs Rel CWB = (\\<forall>Barbs. rel_preserves_barb_set Rel CWB Barbs)\"", "lemma reflection_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_reflects_barbs Rel CWB = (\\<forall>Barbs. rel_reflects_barb_set Rel CWB Barbs)\"", "lemma respection_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_respects_barbs Rel CWB = (\\<forall>Barbs. rel_respects_barb_set Rel CWB Barbs)\"", "lemma preservation_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes preservation: \"rel_preserves_barbs Rel CWB\"\n  shows \"rel_preserves_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_preserves_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_preserves_barbs (Rel\\<^sup>*) CWB\"", "lemma reflection_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes reflection: \"rel_reflects_barbs Rel CWB\"\n  shows \"rel_reflects_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_reflects_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_reflects_barbs (Rel\\<^sup>*) CWB\"", "lemma respection_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes respection: \"rel_respects_barbs Rel CWB\"\n  shows \"rel_respects_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_respects_barbs (symcl Rel) CWB\"\n    and \"rel_respects_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_respects_barbs (symcl (Rel\\<^sup>=)) CWB\"\n    and \"rel_respects_barbs (Rel\\<^sup>*) CWB\"\n    and \"rel_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB\"", "lemma weak_preservation_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_weakly_preserves_barbs Rel CWB\n         = (\\<forall>Barbs. rel_weakly_preserves_barb_set Rel CWB Barbs)\"", "lemma weak_reflection_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_weakly_reflects_barbs Rel CWB = (\\<forall>Barbs. rel_weakly_reflects_barb_set Rel CWB Barbs)\"", "lemma weak_respection_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_weakly_respects_barbs Rel CWB = (\\<forall>Barbs. rel_weakly_respects_barb_set Rel CWB Barbs)\"", "lemma weak_preservation_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes preservation: \"rel_weakly_preserves_barbs Rel CWB\"\n  shows \"rel_weakly_preserves_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_weakly_preserves_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_weakly_preserves_barbs (Rel\\<^sup>*) CWB\"", "lemma weak_reflection_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes reflection: \"rel_weakly_reflects_barbs Rel CWB\"\n  shows \"rel_weakly_reflects_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_weakly_reflects_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_weakly_reflects_barbs (Rel\\<^sup>*) CWB\"", "lemma weak_respection_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes respection: \"rel_weakly_respects_barbs Rel CWB\"\n  shows \"rel_weakly_respects_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_weakly_respects_barbs (symcl Rel) CWB\"\n    and \"rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\"\n    and \"rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\"\n    and \"rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB\""], "translations": [["", "lemma steps_refl:\n  fixes Cal :: \"'proc processCalculus\"\n    and P   :: \"'proc\"\n  shows \"P \\<longmapsto>Cal* P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* P", "have \"P \\<longmapsto>Cal\\<^bsup>0\\<^esup> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal\\<^bsup>0\\<^esup> P", "by simp"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal\\<^bsup>0\\<^esup> P\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* P", "hence \"\\<exists>n. P \\<longmapsto>Cal\\<^bsup>n\\<^esup> P\""], ["proof (prove)\nusing this:\n  P \\<longmapsto>Cal\\<^bsup>0\\<^esup> P\n\ngoal (1 subgoal):\n 1. \\<exists>n. P \\<longmapsto>Cal\\<^bsup>n\\<^esup> P", "by blast"], ["proof (state)\nthis:\n  \\<exists>n. P \\<longmapsto>Cal\\<^bsup>n\\<^esup> P\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* P", "thus \"P \\<longmapsto>Cal* P\""], ["proof (prove)\nusing this:\n  \\<exists>n. P \\<longmapsto>Cal\\<^bsup>n\\<^esup> P\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* P", "by (simp add: steps_def)"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal* P\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>A single step is a sequence of steps of length one.\\<close>"], ["", "lemma step_to_steps:\n  fixes Cal  :: \"'proc processCalculus\"\n    and P P' :: \"'proc\"\n  assumes step: \"P \\<longmapsto>Cal P'\"\n  shows \"P \\<longmapsto>Cal* P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* P'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* P'", "from step"], ["proof (chain)\npicking this:\n  P \\<longmapsto>Cal P'", "have \"P \\<longmapsto>Cal\\<^bsup>1\\<^esup> P'\""], ["proof (prove)\nusing this:\n  P \\<longmapsto>Cal P'\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal\\<^bsup>1\\<^esup> P'", "by simp"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal\\<^bsup>1\\<^esup> P'\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* P'", "thus ?thesis"], ["proof (prove)\nusing this:\n  P \\<longmapsto>Cal\\<^bsup>1\\<^esup> P'\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* P'", "unfolding steps_def"], ["proof (prove)\nusing this:\n  P \\<longmapsto>Cal\\<^bsup>1\\<^esup> P'\n\ngoal (1 subgoal):\n 1. \\<exists>n. P \\<longmapsto>Cal\\<^bsup>n\\<^esup> P'", "by blast"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal* P'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>If there is a sequence of steps from P to Q and from Q to R, then there is also a sequence\n        of steps from P to R.\\<close>"], ["", "lemma nSteps_add:\n  fixes Cal   :: \"'proc processCalculus\"\n    and n1 n2 :: \"nat\"\n  shows \"\\<forall>P Q R. P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and> Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R \\<longrightarrow> P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q R.\n       P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n       Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R \\<longrightarrow>\n       P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R", "proof (induct n2, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n2.\n       \\<forall>P Q R.\n          P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n          Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R \\<longrightarrow>\n          P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R \\<Longrightarrow>\n       \\<forall>P Q R.\n          P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n          Q \\<longmapsto>Cal\\<^bsup>Suc n2\\<^esup> R \\<longrightarrow>\n          P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n2)\\<^esup> R", "case (Suc n)"], ["proof (state)\nthis:\n  \\<forall>P Q R.\n     P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n     Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> R \\<longrightarrow>\n     P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> R\n\ngoal (1 subgoal):\n 1. \\<And>n2.\n       \\<forall>P Q R.\n          P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n          Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R \\<longrightarrow>\n          P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R \\<Longrightarrow>\n       \\<forall>P Q R.\n          P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n          Q \\<longmapsto>Cal\\<^bsup>Suc n2\\<^esup> R \\<longrightarrow>\n          P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n2)\\<^esup> R", "assume IH: \"\\<forall>P Q R. P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and> Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> R \\<longrightarrow> P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> R\""], ["proof (state)\nthis:\n  \\<forall>P Q R.\n     P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n     Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> R \\<longrightarrow>\n     P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> R\n\ngoal (1 subgoal):\n 1. \\<And>n2.\n       \\<forall>P Q R.\n          P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n          Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R \\<longrightarrow>\n          P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R \\<Longrightarrow>\n       \\<forall>P Q R.\n          P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n          Q \\<longmapsto>Cal\\<^bsup>Suc n2\\<^esup> R \\<longrightarrow>\n          P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n2)\\<^esup> R", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q R.\n       P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n       Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R \\<longrightarrow>\n       P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q R.\n       P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n       Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R \\<Longrightarrow>\n       P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R", "fix P Q R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q R.\n       P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n       Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R \\<Longrightarrow>\n       P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R", "assume \"Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R\""], ["proof (state)\nthis:\n  Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R\n\ngoal (1 subgoal):\n 1. \\<And>P Q R.\n       P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n       Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R \\<Longrightarrow>\n       P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R", "from this"], ["proof (chain)\npicking this:\n  Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R", "obtain Q' where A1: \"Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> Q'\" and A2: \"Q' \\<longmapsto>Cal R\""], ["proof (prove)\nusing this:\n  Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> Q' \\<and>\n        Q' \\<longmapsto>Cal R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> Q'\n  Q' \\<longmapsto>Cal R\n\ngoal (1 subgoal):\n 1. \\<And>P Q R.\n       P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n       Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R \\<Longrightarrow>\n       P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R", "assume \"P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q\""], ["proof (state)\nthis:\n  P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q\n\ngoal (1 subgoal):\n 1. \\<And>P Q R.\n       P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n       Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R \\<Longrightarrow>\n       P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R", "with A1 IH"], ["proof (chain)\npicking this:\n  Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> Q'\n  \\<forall>P Q R.\n     P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n     Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> R \\<longrightarrow>\n     P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> R\n  P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q", "have \"P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> Q'\""], ["proof (prove)\nusing this:\n  Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> Q'\n  \\<forall>P Q R.\n     P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n     Q \\<longmapsto>Cal\\<^bsup>n\\<^esup> R \\<longrightarrow>\n     P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> R\n  P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> Q'", "by blast"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> Q'\n\ngoal (1 subgoal):\n 1. \\<And>P Q R.\n       P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n       Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R \\<Longrightarrow>\n       P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R", "with A2"], ["proof (chain)\npicking this:\n  Q' \\<longmapsto>Cal R\n  P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> Q'", "show \"P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R\""], ["proof (prove)\nusing this:\n  Q' \\<longmapsto>Cal R\n  P \\<longmapsto>Cal\\<^bsup>(n1 + n)\\<^esup> Q'\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R", "by auto"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P Q R.\n     P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<and>\n     Q \\<longmapsto>Cal\\<^bsup>Suc n\\<^esup> R \\<longrightarrow>\n     P \\<longmapsto>Cal\\<^bsup>(n1 + Suc n)\\<^esup> R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_add:\n  fixes Cal   :: \"'proc processCalculus\"\n    and P Q R :: \"'proc\"\n  assumes A1: \"P \\<longmapsto>Cal* Q\"\n      and A2: \"Q \\<longmapsto>Cal* R\"\n  shows \"P \\<longmapsto>Cal* R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* R", "from A1"], ["proof (chain)\npicking this:\n  P \\<longmapsto>Cal* Q", "obtain n1 where \"P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q\""], ["proof (prove)\nusing this:\n  P \\<longmapsto>Cal* Q\n\ngoal (1 subgoal):\n 1. (\\<And>n1.\n        P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: steps_def)"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* R", "moreover"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* R", "from A2"], ["proof (chain)\npicking this:\n  Q \\<longmapsto>Cal* R", "obtain n2 where \"Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R\""], ["proof (prove)\nusing this:\n  Q \\<longmapsto>Cal* R\n\ngoal (1 subgoal):\n 1. (\\<And>n2.\n        Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: steps_def)"], ["proof (state)\nthis:\n  Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* R", "ultimately"], ["proof (chain)\npicking this:\n  P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q\n  Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R", "have \"P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R\""], ["proof (prove)\nusing this:\n  P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q\n  Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R", "using nSteps_add[where Cal=\"Cal\"]"], ["proof (prove)\nusing this:\n  P \\<longmapsto>Cal\\<^bsup>n1\\<^esup> Q\n  Q \\<longmapsto>Cal\\<^bsup>n2\\<^esup> R\n  \\<forall>P Q R.\n     P \\<longmapsto>Cal\\<^bsup>?n1.0\\<^esup> Q \\<and>\n     Q \\<longmapsto>Cal\\<^bsup>?n2.0\\<^esup> R \\<longrightarrow>\n     P \\<longmapsto>Cal\\<^bsup>(?n1.0 + ?n2.0)\\<^esup> R\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R", "by blast"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* R", "thus \"P \\<longmapsto>Cal* R\""], ["proof (prove)\nusing this:\n  P \\<longmapsto>Cal\\<^bsup>(n1 + n2)\\<^esup> R\n\ngoal (1 subgoal):\n 1. P \\<longmapsto>Cal* R", "by (simp add: steps_def, blast)"], ["proof (state)\nthis:\n  P \\<longmapsto>Cal* R\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Observables or Barbs\\<close>"], ["", "text \\<open>We assume a predicate that tests terms for some kind of observables. At this point we do\n        not limit or restrict the kind of observables used for a calculus nor the method to check\n        them.\\<close>"], ["", "record ('proc, 'barbs) calculusWithBarbs =\n  Calculus :: \"'proc processCalculus\"\n  HasBarb  :: \"'proc \\<Rightarrow> 'barbs \\<Rightarrow> bool\" (\"_\\<down>_\" [70, 70] 80)"], ["", "abbreviation hasBarb\n  :: \"'proc \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> 'barbs \\<Rightarrow> bool\"\n    (\"_\\<down><_>_\" [70, 70, 70] 80)\n  where\n  \"P\\<down><CWB>a \\<equiv> HasBarb CWB P a\""], ["", "text \\<open>A term reaches a barb if it can evolve to a term that has this barb.\\<close>"], ["", "abbreviation reachesBarb\n  :: \"'proc \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> 'barbs \\<Rightarrow> bool\"\n    (\"_\\<Down><_>_\" [70, 70, 70] 80)\n  where\n  \"P\\<Down><CWB>a \\<equiv> \\<exists>P'. P \\<longmapsto>(Calculus CWB)* P' \\<and> P'\\<down><CWB>a\""], ["", "text \\<open>A relation R preserves barbs if whenever (P, Q) in R and P has a barb then also Q has this\n        barb.\\<close>"], ["", "abbreviation rel_preserves_barb_set\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> 'barbs set \\<Rightarrow> bool\"\n  where\n  \"rel_preserves_barb_set Rel CWB Barbs \\<equiv>\n   rel_preserves_binary_pred Rel (\\<lambda>P a. a \\<in> Barbs \\<and> P\\<down><CWB>a)\""], ["", "abbreviation rel_preserves_barbs\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> bool\"\n  where\n  \"rel_preserves_barbs Rel CWB \\<equiv> rel_preserves_binary_pred Rel (HasBarb CWB)\""], ["", "lemma preservation_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_preserves_barbs Rel CWB = (\\<forall>Barbs. rel_preserves_barb_set Rel CWB Barbs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_preserves_binary_pred Rel (\\<lambda>a. hasBarb a CWB) =\n    (\\<forall>Barbs. rel_preserves_barb_set Rel CWB Barbs)", "by blast"], ["", "text \\<open>A relation R reflects barbs if whenever (P, Q) in R and Q has a barb then also P has this\n        barb.\\<close>"], ["", "abbreviation rel_reflects_barb_set\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> 'barbs set \\<Rightarrow> bool\"\n  where\n  \"rel_reflects_barb_set Rel CWB Barbs \\<equiv>\n   rel_reflects_binary_pred Rel (\\<lambda>P a. a \\<in> Barbs \\<and> P\\<down><CWB>a)\""], ["", "abbreviation rel_reflects_barbs\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> bool\"\n  where\n  \"rel_reflects_barbs Rel CWB \\<equiv> rel_reflects_binary_pred Rel (HasBarb CWB)\""], ["", "lemma reflection_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_reflects_barbs Rel CWB = (\\<forall>Barbs. rel_reflects_barb_set Rel CWB Barbs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_reflects_binary_pred Rel (\\<lambda>b. hasBarb b CWB) =\n    (\\<forall>Barbs. rel_reflects_barb_set Rel CWB Barbs)", "by blast"], ["", "text \\<open>A relation respects barbs if it preserves and reflects barbs.\\<close>"], ["", "abbreviation rel_respects_barb_set\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> 'barbs set \\<Rightarrow> bool\"\n  where\n  \"rel_respects_barb_set Rel CWB Barbs \\<equiv>\n   rel_preserves_barb_set Rel CWB Barbs \\<and> rel_reflects_barb_set Rel CWB Barbs\""], ["", "abbreviation rel_respects_barbs\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> bool\"\n  where\n  \"rel_respects_barbs Rel CWB \\<equiv> rel_preserves_barbs Rel CWB \\<and> rel_reflects_barbs Rel CWB\""], ["", "lemma respection_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_respects_barbs Rel CWB = (\\<forall>Barbs. rel_respects_barb_set Rel CWB Barbs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB) =\n    (\\<forall>Barbs. rel_respects_barb_set Rel CWB Barbs)", "by blast"], ["", "text \\<open>If a relation preserves barbs then so does its reflexive or/and transitive closure.\\<close>"], ["", "lemma preservation_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes preservation: \"rel_preserves_barbs Rel CWB\"\n  shows \"rel_preserves_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_preserves_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_preserves_barbs (Rel\\<^sup>*) CWB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_preserves_binary_pred (Rel\\<^sup>=) (\\<lambda>a. hasBarb a CWB) &&&\n    rel_preserves_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB) &&&\n    rel_preserves_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)", "using preservation\n            preservation_of_binary_predicates_and_closures[where Rel=\"Rel\" and Pred=\"HasBarb CWB\"]"], ["proof (prove)\nusing this:\n  rel_preserves_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n  rel_preserves_binary_pred Rel\n   (\\<lambda>a. hasBarb a CWB) \\<Longrightarrow>\n  rel_preserves_binary_pred (Rel\\<^sup>=) (\\<lambda>a. hasBarb a CWB)\n  rel_preserves_binary_pred Rel\n   (\\<lambda>a. hasBarb a CWB) \\<Longrightarrow>\n  rel_preserves_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)\n  rel_preserves_binary_pred Rel\n   (\\<lambda>a. hasBarb a CWB) \\<Longrightarrow>\n  rel_preserves_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_preserves_binary_pred (Rel\\<^sup>=) (\\<lambda>a. hasBarb a CWB) &&&\n    rel_preserves_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB) &&&\n    rel_preserves_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)", "by blast+"], ["", "text \\<open>If a relation reflects barbs then so does its reflexive or/and transitive closure.\\<close>"], ["", "lemma reflection_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes reflection: \"rel_reflects_barbs Rel CWB\"\n  shows \"rel_reflects_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_reflects_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_reflects_barbs (Rel\\<^sup>*) CWB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_reflects_binary_pred (Rel\\<^sup>=) (\\<lambda>b. hasBarb b CWB) &&&\n    rel_reflects_binary_pred (Rel\\<^sup>+) (\\<lambda>b. hasBarb b CWB) &&&\n    rel_reflects_binary_pred (Rel\\<^sup>*) (\\<lambda>b. hasBarb b CWB)", "using reflection\n            reflection_of_binary_predicates_and_closures[where Rel=\"Rel\" and Pred=\"HasBarb CWB\"]"], ["proof (prove)\nusing this:\n  rel_reflects_binary_pred Rel (\\<lambda>b. hasBarb b CWB)\n  rel_reflects_binary_pred Rel (\\<lambda>b. hasBarb b CWB) \\<Longrightarrow>\n  rel_reflects_binary_pred (Rel\\<^sup>=) (\\<lambda>b. hasBarb b CWB)\n  rel_reflects_binary_pred Rel (\\<lambda>b. hasBarb b CWB) \\<Longrightarrow>\n  rel_reflects_binary_pred (Rel\\<^sup>+) (\\<lambda>b. hasBarb b CWB)\n  rel_reflects_binary_pred Rel (\\<lambda>b. hasBarb b CWB) \\<Longrightarrow>\n  rel_reflects_binary_pred (Rel\\<^sup>*) (\\<lambda>b. hasBarb b CWB)\n\ngoal (1 subgoal):\n 1. rel_reflects_binary_pred (Rel\\<^sup>=) (\\<lambda>b. hasBarb b CWB) &&&\n    rel_reflects_binary_pred (Rel\\<^sup>+) (\\<lambda>b. hasBarb b CWB) &&&\n    rel_reflects_binary_pred (Rel\\<^sup>*) (\\<lambda>b. hasBarb b CWB)", "by blast+"], ["", "text \\<open>If a relation respects barbs then so does its reflexive, symmetric, or/and transitive\n        closure.\\<close>"], ["", "lemma respection_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes respection: \"rel_respects_barbs Rel CWB\"\n  shows \"rel_respects_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_respects_barbs (symcl Rel) CWB\"\n    and \"rel_respects_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_respects_barbs (symcl (Rel\\<^sup>=)) CWB\"\n    and \"rel_respects_barbs (Rel\\<^sup>*) CWB\"\n    and \"rel_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_respects_binary_pred (Rel\\<^sup>=) (\\<lambda>a. hasBarb a CWB) &&&\n     rel_respects_binary_pred (symcl Rel) (\\<lambda>a. hasBarb a CWB) &&&\n     rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)) &&&\n    rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB) &&&\n    rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB) &&&\n    rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. rel_respects_binary_pred (Rel\\<^sup>=) (\\<lambda>a. hasBarb a CWB)\n 2. rel_respects_binary_pred (symcl Rel) (\\<lambda>a. hasBarb a CWB)\n 3. rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)\n 4. rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB)\n 5. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n 6. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "from respection"], ["proof (chain)\npicking this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)", "show \"rel_respects_barbs (Rel\\<^sup>=) CWB\""], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (Rel\\<^sup>=) (\\<lambda>a. hasBarb a CWB)", "using respection_of_binary_predicates_and_closures(1)[where Rel=\"Rel\" and Pred=\"HasBarb CWB\"]"], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB) \\<Longrightarrow>\n  rel_respects_binary_pred (Rel\\<^sup>=) (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (Rel\\<^sup>=) (\\<lambda>a. hasBarb a CWB)", "by blast"], ["proof (state)\nthis:\n  rel_respects_binary_pred (Rel\\<^sup>=) (\\<lambda>a. hasBarb a CWB)\n\ngoal (5 subgoals):\n 1. rel_respects_binary_pred (symcl Rel) (\\<lambda>a. hasBarb a CWB)\n 2. rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)\n 3. rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB)\n 4. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n 5. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. rel_respects_binary_pred (symcl Rel) (\\<lambda>a. hasBarb a CWB)\n 2. rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)\n 3. rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB)\n 4. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n 5. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "from respection"], ["proof (chain)\npicking this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)", "show \"rel_respects_barbs (symcl Rel) CWB\""], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (symcl Rel) (\\<lambda>a. hasBarb a CWB)", "using respection_of_binary_predicates_and_closures(2)[where Rel=\"Rel\" and Pred=\"HasBarb CWB\"]"], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB) \\<Longrightarrow>\n  rel_respects_binary_pred (symcl Rel) (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (symcl Rel) (\\<lambda>a. hasBarb a CWB)", "by blast"], ["proof (state)\nthis:\n  rel_respects_binary_pred (symcl Rel) (\\<lambda>a. hasBarb a CWB)\n\ngoal (4 subgoals):\n 1. rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)\n 2. rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB)\n 3. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n 4. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)\n 2. rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB)\n 3. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n 4. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "from respection"], ["proof (chain)\npicking this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)", "show \"rel_respects_barbs (Rel\\<^sup>+) CWB\""], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)", "using respection_of_binary_predicates_and_closures(3)[where Rel=\"Rel\" and Pred=\"HasBarb CWB\"]"], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB) \\<Longrightarrow>\n  rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)", "by blast"], ["proof (state)\nthis:\n  rel_respects_binary_pred (Rel\\<^sup>+) (\\<lambda>a. hasBarb a CWB)\n\ngoal (3 subgoals):\n 1. rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB)\n 2. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n 3. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB)\n 2. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n 3. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "from respection"], ["proof (chain)\npicking this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)", "show \"rel_respects_barbs (symcl (Rel\\<^sup>=)) CWB\""], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB)", "using respection_of_binary_predicates_and_closures(4)[where Rel=\"Rel\" and Pred=\"HasBarb CWB\"]"], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB) \\<Longrightarrow>\n  rel_respects_binary_pred (symcl (Rel\\<^sup>=)) (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (symcl (Rel\\<^sup>=))\n     (\\<lambda>a. hasBarb a CWB)", "by blast"], ["proof (state)\nthis:\n  rel_respects_binary_pred (symcl (Rel\\<^sup>=)) (\\<lambda>a. hasBarb a CWB)\n\ngoal (2 subgoals):\n 1. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n 2. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n 2. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "from respection"], ["proof (chain)\npicking this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)", "show \"rel_respects_barbs (Rel\\<^sup>*) CWB\""], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)", "using respection_of_binary_predicates_and_closures(5)[where Rel=\"Rel\" and Pred=\"HasBarb CWB\"]"], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB) \\<Longrightarrow>\n  rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)", "by blast"], ["proof (state)\nthis:\n  rel_respects_binary_pred (Rel\\<^sup>*) (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "from respection"], ["proof (chain)\npicking this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)", "show \"rel_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB\""], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "using respection_of_binary_predicates_and_closures(6)[where Rel=\"Rel\" and Pred=\"HasBarb CWB\"]"], ["proof (prove)\nusing this:\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB)\n  rel_respects_binary_pred Rel (\\<lambda>a. hasBarb a CWB) \\<Longrightarrow>\n  rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n   (\\<lambda>a. hasBarb a CWB)\n\ngoal (1 subgoal):\n 1. rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n     (\\<lambda>a. hasBarb a CWB)", "by blast"], ["proof (state)\nthis:\n  rel_respects_binary_pred ((symcl (Rel\\<^sup>=))\\<^sup>+)\n   (\\<lambda>a. hasBarb a CWB)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>A relation R weakly preserves barbs if it preserves reachability of barbs, i.e., if (P, Q)\n        in R and P reaches a barb then also Q has to reach this barb.\\<close>"], ["", "abbreviation rel_weakly_preserves_barb_set\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> 'barbs set \\<Rightarrow> bool\"\n  where\n  \"rel_weakly_preserves_barb_set Rel CWB Barbs \\<equiv>\n   rel_preserves_binary_pred Rel (\\<lambda>P a. a \\<in> Barbs \\<and> P\\<Down><CWB>a)\""], ["", "abbreviation rel_weakly_preserves_barbs\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> bool\"\n  where\n  \"rel_weakly_preserves_barbs Rel CWB \\<equiv> rel_preserves_binary_pred Rel (\\<lambda>P a. P\\<Down><CWB>a)\""], ["", "lemma weak_preservation_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_weakly_preserves_barbs Rel CWB\n         = (\\<forall>Barbs. rel_weakly_preserves_barb_set Rel CWB Barbs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_weakly_preserves_barbs Rel CWB =\n    (\\<forall>Barbs. rel_weakly_preserves_barb_set Rel CWB Barbs)", "by blast"], ["", "text \\<open>A relation R weakly reflects barbs if it reflects reachability of barbs, i.e., if (P, Q) in\n        R and Q reaches a barb then also P has to reach this barb.\\<close>"], ["", "abbreviation rel_weakly_reflects_barb_set\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> 'barbs set \\<Rightarrow> bool\"\n  where\n  \"rel_weakly_reflects_barb_set Rel CWB Barbs \\<equiv>\n   rel_reflects_binary_pred Rel (\\<lambda>P a. a \\<in> Barbs \\<and> P\\<Down><CWB>a)\""], ["", "abbreviation rel_weakly_reflects_barbs\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> bool\"\n  where\n  \"rel_weakly_reflects_barbs Rel CWB \\<equiv> rel_reflects_binary_pred Rel (\\<lambda>P a. P\\<Down><CWB>a)\""], ["", "lemma weak_reflection_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_weakly_reflects_barbs Rel CWB = (\\<forall>Barbs. rel_weakly_reflects_barb_set Rel CWB Barbs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_weakly_reflects_barbs Rel CWB =\n    (\\<forall>Barbs. rel_weakly_reflects_barb_set Rel CWB Barbs)", "by blast"], ["", "text \\<open>A relation weakly respects barbs if it weakly preserves and weakly reflects barbs.\\<close>"], ["", "abbreviation rel_weakly_respects_barb_set\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> 'barbs set \\<Rightarrow> bool\"\n  where\n  \"rel_weakly_respects_barb_set Rel CWB Barbs \\<equiv>\n   rel_weakly_preserves_barb_set Rel CWB Barbs \\<and> rel_weakly_reflects_barb_set Rel CWB Barbs\""], ["", "abbreviation rel_weakly_respects_barbs\n    :: \"('proc \\<times> 'proc) set \\<Rightarrow> ('proc, 'barbs) calculusWithBarbs \\<Rightarrow> bool\"\n  where\n  \"rel_weakly_respects_barbs Rel CWB \\<equiv>\n   rel_weakly_preserves_barbs Rel CWB \\<and> rel_weakly_reflects_barbs Rel CWB\""], ["", "lemma weak_respection_of_barbs_and_set_of_barbs:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  shows \"rel_weakly_respects_barbs Rel CWB = (\\<forall>Barbs. rel_weakly_respects_barb_set Rel CWB Barbs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs Rel CWB =\n    (\\<forall>Barbs. rel_weakly_respects_barb_set Rel CWB Barbs)", "by blast"], ["", "text \\<open>If a relation weakly preserves barbs then so does its reflexive or/and transitive closure.\n\\<close>"], ["", "lemma weak_preservation_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes preservation: \"rel_weakly_preserves_barbs Rel CWB\"\n  shows \"rel_weakly_preserves_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_weakly_preserves_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_weakly_preserves_barbs (Rel\\<^sup>*) CWB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_weakly_preserves_barbs (Rel\\<^sup>=) CWB &&&\n    rel_weakly_preserves_barbs (Rel\\<^sup>+) CWB &&&\n    rel_weakly_preserves_barbs (Rel\\<^sup>*) CWB", "using preservation preservation_of_binary_predicates_and_closures[where Rel=\"Rel\"\n                          and Pred=\"\\<lambda>P a. P\\<Down><CWB>a\"]"], ["proof (prove)\nusing this:\n  rel_weakly_preserves_barbs Rel CWB\n  rel_weakly_preserves_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_preserves_barbs (Rel\\<^sup>=) CWB\n  rel_weakly_preserves_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_preserves_barbs (Rel\\<^sup>+) CWB\n  rel_weakly_preserves_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_preserves_barbs (Rel\\<^sup>*) CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_preserves_barbs (Rel\\<^sup>=) CWB &&&\n    rel_weakly_preserves_barbs (Rel\\<^sup>+) CWB &&&\n    rel_weakly_preserves_barbs (Rel\\<^sup>*) CWB", "by blast+"], ["", "text \\<open>If a relation weakly reflects barbs then so does its reflexive or/and transitive closure.\n\\<close>"], ["", "lemma weak_reflection_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes reflection: \"rel_weakly_reflects_barbs Rel CWB\"\n  shows \"rel_weakly_reflects_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_weakly_reflects_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_weakly_reflects_barbs (Rel\\<^sup>*) CWB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_weakly_reflects_barbs (Rel\\<^sup>=) CWB &&&\n    rel_weakly_reflects_barbs (Rel\\<^sup>+) CWB &&&\n    rel_weakly_reflects_barbs (Rel\\<^sup>*) CWB", "using reflection reflection_of_binary_predicates_and_closures[where Rel=\"Rel\"\n                        and Pred=\"\\<lambda>P a. P\\<Down><CWB>a\"]"], ["proof (prove)\nusing this:\n  rel_weakly_reflects_barbs Rel CWB\n  rel_weakly_reflects_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_reflects_barbs (Rel\\<^sup>=) CWB\n  rel_weakly_reflects_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_reflects_barbs (Rel\\<^sup>+) CWB\n  rel_weakly_reflects_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_reflects_barbs (Rel\\<^sup>*) CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_reflects_barbs (Rel\\<^sup>=) CWB &&&\n    rel_weakly_reflects_barbs (Rel\\<^sup>+) CWB &&&\n    rel_weakly_reflects_barbs (Rel\\<^sup>*) CWB", "by blast+"], ["", "text \\<open>If a relation weakly respects barbs then so does its reflexive, symmetric, or/and\n        transitive closure.\\<close>"], ["", "lemma weak_respection_of_barbs_and_closures:\n  fixes Rel :: \"('proc \\<times> 'proc) set\"\n    and CWB :: \"('proc, 'barbs) calculusWithBarbs\"\n  assumes respection: \"rel_weakly_respects_barbs Rel CWB\"\n  shows \"rel_weakly_respects_barbs (Rel\\<^sup>=) CWB\"\n    and \"rel_weakly_respects_barbs (symcl Rel) CWB\"\n    and \"rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\"\n    and \"rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\"\n    and \"rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\"\n    and \"rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel_weakly_respects_barbs (Rel\\<^sup>=) CWB &&&\n     rel_weakly_respects_barbs (symcl Rel) CWB &&&\n     rel_weakly_respects_barbs (Rel\\<^sup>+) CWB) &&&\n    rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB &&&\n    rel_weakly_respects_barbs (Rel\\<^sup>*) CWB &&&\n    rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>=) CWB\n 2. rel_weakly_respects_barbs (symcl Rel) CWB\n 3. rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\n 4. rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\n 5. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n 6. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "from respection"], ["proof (chain)\npicking this:\n  rel_weakly_respects_barbs Rel CWB", "show \"rel_weakly_respects_barbs (Rel\\<^sup>=) CWB\""], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>=) CWB", "using respection_of_binary_predicates_and_closures(1)[where Rel=\"Rel\"\n              and Pred=\"\\<lambda>P a. P\\<Down><CWB>a\"]"], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n  rel_weakly_respects_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_respects_barbs (Rel\\<^sup>=) CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>=) CWB", "by blast"], ["proof (state)\nthis:\n  rel_weakly_respects_barbs (Rel\\<^sup>=) CWB\n\ngoal (5 subgoals):\n 1. rel_weakly_respects_barbs (symcl Rel) CWB\n 2. rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\n 3. rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\n 4. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n 5. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. rel_weakly_respects_barbs (symcl Rel) CWB\n 2. rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\n 3. rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\n 4. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n 5. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "from respection"], ["proof (chain)\npicking this:\n  rel_weakly_respects_barbs Rel CWB", "show \"rel_weakly_respects_barbs (symcl Rel) CWB\""], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (symcl Rel) CWB", "using respection_of_binary_predicates_and_closures(2)[where Rel=\"Rel\"\n              and Pred=\"\\<lambda>P a. P\\<Down><CWB>a\"]"], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n  rel_weakly_respects_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_respects_barbs (symcl Rel) CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (symcl Rel) CWB", "by blast"], ["proof (state)\nthis:\n  rel_weakly_respects_barbs (symcl Rel) CWB\n\ngoal (4 subgoals):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\n 2. rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\n 3. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n 4. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\n 2. rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\n 3. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n 4. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "from respection"], ["proof (chain)\npicking this:\n  rel_weakly_respects_barbs Rel CWB", "show \"rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\""], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>+) CWB", "using respection_of_binary_predicates_and_closures(3)[where Rel=\"Rel\"\n              and Pred=\"\\<lambda>P a. P\\<Down><CWB>a\"]"], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n  rel_weakly_respects_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>+) CWB", "by blast"], ["proof (state)\nthis:\n  rel_weakly_respects_barbs (Rel\\<^sup>+) CWB\n\ngoal (3 subgoals):\n 1. rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\n 2. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n 3. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\n 2. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n 3. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "from respection"], ["proof (chain)\npicking this:\n  rel_weakly_respects_barbs Rel CWB", "show \"rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\""], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB", "using respection_of_binary_predicates_and_closures(4)[where Rel=\"Rel\"\n              and Pred=\"\\<lambda>P a. P\\<Down><CWB>a\"]"], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n  rel_weakly_respects_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB", "by blast"], ["proof (state)\nthis:\n  rel_weakly_respects_barbs (symcl (Rel\\<^sup>=)) CWB\n\ngoal (2 subgoals):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n 2. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n 2. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "from respection"], ["proof (chain)\npicking this:\n  rel_weakly_respects_barbs Rel CWB", "show \"rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\""], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB", "using respection_of_binary_predicates_and_closures(5)[where Rel=\"Rel\"\n              and Pred=\"\\<lambda>P a. P\\<Down><CWB>a\"]"], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n  rel_weakly_respects_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs (Rel\\<^sup>*) CWB", "by blast"], ["proof (state)\nthis:\n  rel_weakly_respects_barbs (Rel\\<^sup>*) CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "from respection"], ["proof (chain)\npicking this:\n  rel_weakly_respects_barbs Rel CWB", "show \"rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB\""], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "using respection_of_binary_predicates_and_closures(6)[where Rel=\"Rel\"\n              and Pred=\"\\<lambda>P a. P\\<Down><CWB>a\"]"], ["proof (prove)\nusing this:\n  rel_weakly_respects_barbs Rel CWB\n  rel_weakly_respects_barbs Rel CWB \\<Longrightarrow>\n  rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB\n\ngoal (1 subgoal):\n 1. rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB", "by blast"], ["proof (state)\nthis:\n  rel_weakly_respects_barbs ((symcl (Rel\\<^sup>=))\\<^sup>+) CWB\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}