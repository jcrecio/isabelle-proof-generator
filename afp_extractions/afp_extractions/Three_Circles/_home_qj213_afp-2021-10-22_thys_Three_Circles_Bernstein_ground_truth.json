{"file_name": "/home/qj213/afp-2021-10-22/thys/Three_Circles/Bernstein.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Three_Circles", "problem_names": ["lemma Bernstein_Poly_altdef: \n  assumes \"c \\<noteq> d\" and \"j \\<le> p\"\n  shows \"Bernstein_Poly j p c d = smult (p choose j) \n            ([:-c/(d-c), 1/(d-c):]^j * [:d/(d-c), -1/(d-c):]^(p-j))\" \n    (is \"?L = ?R\")", "lemma Bernstein_Poly_nonneg: \n  assumes \"c \\<le> x\" and \"x \\<le> d\"\n  shows \"poly (Bernstein_Poly j p c d) x \\<ge> 0\"", "lemma Bernstein_Poly_01: \"Bernstein_Poly j p 0 1 = Bernstein_Poly_01 j p\"", "lemma Bernstein_Poly_rescale: \n  assumes \"a \\<noteq> b\"\n  shows \"Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p [:0, b-a:] \n            = Bernstein_Poly j p ((c-a)/(b-a)) ((d-a)/(b-a))\"\n  (is \"?L = ?R\")", "lemma Bernstein_Poly_rescale_01: \n  assumes \"c \\<noteq> d\"\n  shows \"Bernstein_Poly j p c d \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:] \n          = Bernstein_Poly_01 j p\"", "lemma Bernstein_Poly_eq_rescale_01: \n  assumes \"c \\<noteq> d\"\n  shows \"Bernstein_Poly j p c d = Bernstein_Poly_01 j p \n            \\<circ>\\<^sub>p [:0, 1/(d-c):] \\<circ>\\<^sub>p [:-c, 1:]\"", "lemma coeff_Bernstein_sum: \n  fixes b::\"nat \\<Rightarrow> real\" and p::nat and c d::real\n  defines \"P \\<equiv> (\\<Sum>j = 0..p. (smult (b j) (Bernstein_Poly j p c d)))\"\n  assumes \"i \\<le> p\" and \"c \\<noteq> d\"\n  shows \"coeff ((reciprocal_poly p (P \\<circ>\\<^sub>p [:c, 1:] \n      \\<circ>\\<^sub>p [:0, d-c:])) \\<circ>\\<^sub>p [:1, 1:]) (p - i) = (p choose i) * (b i)\"", "lemma Bernstein_sum: \n  assumes \"c \\<noteq> d\" and \"degree P \\<le> p\"\n  shows \"P = (\\<Sum>j = 0..p. smult (inverse (real (p choose j))\n     * coeff (reciprocal_poly p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:]) \n      \\<circ>\\<^sub>p [:1, 1:]) (p-j)) (Bernstein_Poly j p c d))\"", "lemma Bernstein_Poly_span1: \n  assumes \"c \\<noteq> d\" and \"degree P \\<le> p\"\n  shows \"P \\<in> poly_vs.span {Bernstein_Poly x p c d | x. x \\<le> p}\"", "lemma Bernstein_Poly_span: \n  assumes \"c \\<noteq> d\" \n  shows \"poly_vs.span {Bernstein_Poly x p c d | x. x \\<le> p} = {x. degree x \\<le> p}\"", "lemma Bernstein_Poly_independent: assumes \"c \\<noteq> d\" \n  shows \"poly_vs.independent {Bernstein_Poly x p c d | x. x \\<in> {..p}}\"", "lemma Bernstein_coeffs_eq_rescale: assumes \"c \\<noteq> d\"\n  shows \"Bernstein_coeffs p c d P = Bernstein_coeffs_01 p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:])\"", "lemma nth_default_Bernstein_coeffs: assumes \"degree P \\<le> p\"\n  shows \"nth_default 0 (Bernstein_coeffs p c d P) i =\n         inverse (p choose i) * coeff\n         (reciprocal_poly p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:]) \\<circ>\\<^sub>p [:1, 1:]) (p-i)\"", "lemma Bernstein_coeffs_sum: assumes \"c \\<noteq> d\" and hP: \"degree P \\<le> p\"\n  shows \"P = (\\<Sum>j = 0..p. smult (nth_default 0 (Bernstein_coeffs p c d P) j)\n         (Bernstein_Poly j p c d))\"", "lemma Bernstein_changes_eq_rescale: assumes \"c \\<noteq> d\" and \"degree P \\<le> p\"\n  shows \"Bernstein_changes p c d P =\n         Bernstein_changes_01 p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:])\"", "lemma Bernstein_changes_test: \n  fixes P::\"real poly\"\n  assumes \"degree P \\<le> p\" and \"P \\<noteq> 0\" and \"c < d\"\n  shows \"proots_count P {x. c < x \\<and> x < d} \\<le> Bernstein_changes p c d P \\<and>\n        even (Bernstein_changes p c d P - proots_count P {x. c < x \\<and> x < d})\"", "lemma line_above: \n  fixes a b c d :: real and p :: nat and P :: \"real poly\"\n  assumes hline: \"\\<And>i. i \\<le> p \\<Longrightarrow> a * (((real i)*d + (real (p - i))*c)/p) + b \\<ge>\n                  nth_default 0 (Bernstein_coeffs p c d P) i\"\n  and hp: \"p \\<noteq> 0\" and hcd: \"c \\<noteq> d\" and hP: \"degree P \\<le> p\"\n  shows \"\\<And>x. c \\<le> x \\<Longrightarrow> x \\<le> d \\<Longrightarrow> a*x + b \\<ge> poly P x\""], "translations": [["", "lemma Bernstein_Poly_altdef: \n  assumes \"c \\<noteq> d\" and \"j \\<le> p\"\n  shows \"Bernstein_Poly j p c d = smult (p choose j) \n            ([:-c/(d-c), 1/(d-c):]^j * [:d/(d-c), -1/(d-c):]^(p-j))\" \n    (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "have \"?L = smult (p choose j) (smult ((1/(d - c))^j)\n        (smult ((1/(d - c))^(p-j)) ([:-c, 1:]^j * [:d, -1:]^(p-j))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d =\n    smult (real (p choose j))\n     (smult ((1 / (d - c)) ^ j)\n       (smult ((1 / (d - c)) ^ (p - j))\n         ([:- c, 1:] ^ j * [:d, - 1:] ^ (p - j))))", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n  j \\<le> p\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d =\n    smult (real (p choose j))\n     (smult ((1 / (d - c)) ^ j)\n       (smult ((1 / (d - c)) ^ (p - j))\n         ([:- c, 1:] ^ j * [:d, - 1:] ^ (p - j))))", "by (auto simp: Bernstein_Poly_def monom_altdef hom_distribs\n                    pcompose_pCons smult_eq_iff field_simps power_add[symmetric])"], ["proof (state)\nthis:\n  Bernstein_Poly j p c d =\n  smult (real (p choose j))\n   (smult ((1 / (d - c)) ^ j)\n     (smult ((1 / (d - c)) ^ (p - j))\n       ([:- c, 1:] ^ j * [:d, - 1:] ^ (p - j))))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "also"], ["proof (state)\nthis:\n  Bernstein_Poly j p c d =\n  smult (real (p choose j))\n   (smult ((1 / (d - c)) ^ j)\n     (smult ((1 / (d - c)) ^ (p - j))\n       ([:- c, 1:] ^ j * [:d, - 1:] ^ (p - j))))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "have \"... = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j))\n     (smult ((1 / (d - c)) ^ j)\n       (smult ((1 / (d - c)) ^ (p - j))\n         ([:- c, 1:] ^ j * [:d, - 1:] ^ (p - j)))) =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "apply (subst mult_smult_right[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j))\n     (smult ((1 / (d - c)) ^ j)\n       ([:- c, 1:] ^ j *\n        smult ((1 / (d - c)) ^ (p - j)) ([:d, - 1:] ^ (p - j)))) =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "apply (subst mult_smult_left[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j))\n     (smult ((1 / (d - c)) ^ j) ([:- c, 1:] ^ j) *\n      smult ((1 / (d - c)) ^ (p - j)) ([:d, - 1:] ^ (p - j))) =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "apply (subst smult_power)"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j))\n     (smult (1 / (d - c)) [:- c, 1:] ^ j *\n      smult ((1 / (d - c)) ^ (p - j)) ([:d, - 1:] ^ (p - j))) =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "apply (subst smult_power)"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j))\n     (smult (1 / (d - c)) [:- c, 1:] ^ j *\n      smult (1 / (d - c)) [:d, - 1:] ^ (p - j)) =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "by auto"], ["proof (state)\nthis:\n  smult (real (p choose j))\n   (smult ((1 / (d - c)) ^ j)\n     (smult ((1 / (d - c)) ^ (p - j))\n       ([:- c, 1:] ^ j * [:d, - 1:] ^ (p - j)))) =\n  smult (real (p choose j))\n   ([:- c / (d - c), 1 / (d - c):] ^ j *\n    [:d / (d - c), - 1 / (d - c):] ^ (p - j))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "finally"], ["proof (chain)\npicking this:\n  Bernstein_Poly j p c d =\n  smult (real (p choose j))\n   ([:- c / (d - c), 1 / (d - c):] ^ j *\n    [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "show ?thesis"], ["proof (prove)\nusing this:\n  Bernstein_Poly j p c d =\n  smult (real (p choose j))\n   ([:- c / (d - c), 1 / (d - c):] ^ j *\n    [:d / (d - c), - 1 / (d - c):] ^ (p - j))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d =\n    smult (real (p choose j))\n     ([:- c / (d - c), 1 / (d - c):] ^ j *\n      [:d / (d - c), - 1 / (d - c):] ^ (p - j))", "."], ["proof (state)\nthis:\n  Bernstein_Poly j p c d =\n  smult (real (p choose j))\n   ([:- c / (d - c), 1 / (d - c):] ^ j *\n    [:d / (d - c), - 1 / (d - c):] ^ (p - j))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_Poly_nonneg: \n  assumes \"c \\<le> x\" and \"x \\<le> d\"\n  shows \"poly (Bernstein_Poly j p c d) x \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> poly (Bernstein_Poly j p c d) x", "using assms"], ["proof (prove)\nusing this:\n  c \\<le> x\n  x \\<le> d\n\ngoal (1 subgoal):\n 1. 0 \\<le> poly (Bernstein_Poly j p c d) x", "by (auto simp: Bernstein_Poly_def poly_pcompose poly_monom)"], ["", "lemma Bernstein_Poly_01: \"Bernstein_Poly j p 0 1 = Bernstein_Poly_01 j p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly j p 0 1 = Bernstein_Poly_01 j p", "by (auto simp: Bernstein_Poly_def Bernstein_Poly_01_def monom_altdef)"], ["", "lemma Bernstein_Poly_rescale: \n  assumes \"a \\<noteq> b\"\n  shows \"Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p [:0, b-a:] \n            = Bernstein_Poly j p ((c-a)/(b-a)) ((d-a)/(b-a))\"\n  (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "have \"?R = smult (real (p choose j) \n      / ((d - a) / (b - a) - (c - a) / (b - a)) ^ p)\n      ([:- ((c - a) / (b - a)), 1:] ^ j \n      * [:(d - a) / (b - a), - 1:] ^ (p - j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a)) =\n    smult (real (p choose j) / ((d - a) / (b - a) - (c - a) / (b - a)) ^ p)\n     ([:- ((c - a) / (b - a)), 1:] ^ j *\n      [:(d - a) / (b - a), - 1:] ^ (p - j))", "by (auto simp: Bernstein_Poly_def monom_altdef hom_distribs \n        pcompose_pCons)"], ["proof (state)\nthis:\n  Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a)) =\n  smult (real (p choose j) / ((d - a) / (b - a) - (c - a) / (b - a)) ^ p)\n   ([:- ((c - a) / (b - a)), 1:] ^ j * [:(d - a) / (b - a), - 1:] ^ (p - j))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "also"], ["proof (state)\nthis:\n  Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a)) =\n  smult (real (p choose j) / ((d - a) / (b - a) - (c - a) / (b - a)) ^ p)\n   ([:- ((c - a) / (b - a)), 1:] ^ j * [:(d - a) / (b - a), - 1:] ^ (p - j))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "have \"... = smult (real (p choose j) / ((d - c) / (b - a)) ^ p)\n              ([:- ((c - a) / (b - a)), 1:] ^ j * [:(d - a) / (b - a), - 1:] \n            ^ (p - j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j) / ((d - a) / (b - a) - (c - a) / (b - a)) ^ p)\n     ([:- ((c - a) / (b - a)), 1:] ^ j *\n      [:(d - a) / (b - a), - 1:] ^ (p - j)) =\n    smult (real (p choose j) / ((d - c) / (b - a)) ^ p)\n     ([:- ((c - a) / (b - a)), 1:] ^ j *\n      [:(d - a) / (b - a), - 1:] ^ (p - j))", "by argo"], ["proof (state)\nthis:\n  smult (real (p choose j) / ((d - a) / (b - a) - (c - a) / (b - a)) ^ p)\n   ([:- ((c - a) / (b - a)), 1:] ^ j *\n    [:(d - a) / (b - a), - 1:] ^ (p - j)) =\n  smult (real (p choose j) / ((d - c) / (b - a)) ^ p)\n   ([:- ((c - a) / (b - a)), 1:] ^ j * [:(d - a) / (b - a), - 1:] ^ (p - j))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "also"], ["proof (state)\nthis:\n  smult (real (p choose j) / ((d - a) / (b - a) - (c - a) / (b - a)) ^ p)\n   ([:- ((c - a) / (b - a)), 1:] ^ j *\n    [:(d - a) / (b - a), - 1:] ^ (p - j)) =\n  smult (real (p choose j) / ((d - c) / (b - a)) ^ p)\n   ([:- ((c - a) / (b - a)), 1:] ^ j * [:(d - a) / (b - a), - 1:] ^ (p - j))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "have \"... = smult (real (p choose j) / (d - c) ^ p) \n      (smult ((b - a) ^ (p - j)) (smult ((b - a) ^ j)\n      ([:- ((c - a) / (b - a)), 1:] ^ j * [:(d - a) / (b - a), - 1:] \n      ^ (p - j))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j) / ((d - c) / (b - a)) ^ p)\n     ([:- ((c - a) / (b - a)), 1:] ^ j *\n      [:(d - a) / (b - a), - 1:] ^ (p - j)) =\n    smult (real (p choose j) / (d - c) ^ p)\n     (smult ((b - a) ^ (p - j))\n       (smult ((b - a) ^ j)\n         ([:- ((c - a) / (b - a)), 1:] ^ j *\n          [:(d - a) / (b - a), - 1:] ^ (p - j))))", "by (auto simp: power_add[symmetric] power_divide)"], ["proof (state)\nthis:\n  smult (real (p choose j) / ((d - c) / (b - a)) ^ p)\n   ([:- ((c - a) / (b - a)), 1:] ^ j *\n    [:(d - a) / (b - a), - 1:] ^ (p - j)) =\n  smult (real (p choose j) / (d - c) ^ p)\n   (smult ((b - a) ^ (p - j))\n     (smult ((b - a) ^ j)\n       ([:- ((c - a) / (b - a)), 1:] ^ j *\n        [:(d - a) / (b - a), - 1:] ^ (p - j))))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "also"], ["proof (state)\nthis:\n  smult (real (p choose j) / ((d - c) / (b - a)) ^ p)\n   ([:- ((c - a) / (b - a)), 1:] ^ j *\n    [:(d - a) / (b - a), - 1:] ^ (p - j)) =\n  smult (real (p choose j) / (d - c) ^ p)\n   (smult ((b - a) ^ (p - j))\n     (smult ((b - a) ^ j)\n       ([:- ((c - a) / (b - a)), 1:] ^ j *\n        [:(d - a) / (b - a), - 1:] ^ (p - j))))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "have \"... = smult (real (p choose j) / (d - c) ^ p)\n              ([:- (c - a), b - a:] ^ j * [:d - a, -(b - a):] ^ (p - j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j) / (d - c) ^ p)\n     (smult ((b - a) ^ (p - j))\n       (smult ((b - a) ^ j)\n         ([:- ((c - a) / (b - a)), 1:] ^ j *\n          [:(d - a) / (b - a), - 1:] ^ (p - j)))) =\n    smult (real (p choose j) / (d - c) ^ p)\n     ([:- (c - a), b - a:] ^ j * [:d - a, - (b - a):] ^ (p - j))", "apply (subst mult_smult_left[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j) / (d - c) ^ p)\n     (smult ((b - a) ^ (p - j))\n       (smult ((b - a) ^ j) ([:- ((c - a) / (b - a)), 1:] ^ j) *\n        [:(d - a) / (b - a), - 1:] ^ (p - j))) =\n    smult (real (p choose j) / (d - c) ^ p)\n     ([:- (c - a), b - a:] ^ j * [:d - a, - (b - a):] ^ (p - j))", "apply (subst mult_smult_right[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j) / (d - c) ^ p)\n     (smult ((b - a) ^ j) ([:- ((c - a) / (b - a)), 1:] ^ j) *\n      smult ((b - a) ^ (p - j)) ([:(d - a) / (b - a), - 1:] ^ (p - j))) =\n    smult (real (p choose j) / (d - c) ^ p)\n     ([:- (c - a), b - a:] ^ j * [:d - a, - (b - a):] ^ (p - j))", "using assms"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. smult (real (p choose j) / (d - c) ^ p)\n     (smult ((b - a) ^ j) ([:- ((c - a) / (b - a)), 1:] ^ j) *\n      smult ((b - a) ^ (p - j)) ([:(d - a) / (b - a), - 1:] ^ (p - j))) =\n    smult (real (p choose j) / (d - c) ^ p)\n     ([:- (c - a), b - a:] ^ j * [:d - a, - (b - a):] ^ (p - j))", "by (auto simp: smult_power)"], ["proof (state)\nthis:\n  smult (real (p choose j) / (d - c) ^ p)\n   (smult ((b - a) ^ (p - j))\n     (smult ((b - a) ^ j)\n       ([:- ((c - a) / (b - a)), 1:] ^ j *\n        [:(d - a) / (b - a), - 1:] ^ (p - j)))) =\n  smult (real (p choose j) / (d - c) ^ p)\n   ([:- (c - a), b - a:] ^ j * [:d - a, - (b - a):] ^ (p - j))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "also"], ["proof (state)\nthis:\n  smult (real (p choose j) / (d - c) ^ p)\n   (smult ((b - a) ^ (p - j))\n     (smult ((b - a) ^ j)\n       ([:- ((c - a) / (b - a)), 1:] ^ j *\n        [:(d - a) / (b - a), - 1:] ^ (p - j)))) =\n  smult (real (p choose j) / (d - c) ^ p)\n   ([:- (c - a), b - a:] ^ j * [:d - a, - (b - a):] ^ (p - j))\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "have \"... = ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose j) / (d - c) ^ p)\n     ([:- (c - a), b - a:] ^ j * [:d - a, - (b - a):] ^ (p - j)) =\n    Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:]", "using assms"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. smult (real (p choose j) / (d - c) ^ p)\n     ([:- (c - a), b - a:] ^ j * [:d - a, - (b - a):] ^ (p - j)) =\n    Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:]", "by (auto simp: Bernstein_Poly_def monom_altdef pcompose_mult \n        pcompose_smult hom_distribs pcompose_pCons)"], ["proof (state)\nthis:\n  smult (real (p choose j) / (d - c) ^ p)\n   ([:- (c - a), b - a:] ^ j * [:d - a, - (b - a):] ^ (p - j)) =\n  Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n  [:0, b - a:]\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "finally"], ["proof (chain)\npicking this:\n  Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a)) =\n  Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n  [:0, b - a:]", "show ?thesis"], ["proof (prove)\nusing this:\n  Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a)) =\n  Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n  [:0, b - a:]\n\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n    [:0, b - a:] =\n    Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))", "by presburger"], ["proof (state)\nthis:\n  Bernstein_Poly j p c d \\<circ>\\<^sub>p [:a, 1:] \\<circ>\\<^sub>p\n  [:0, b - a:] =\n  Bernstein_Poly j p ((c - a) / (b - a)) ((d - a) / (b - a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_Poly_rescale_01: \n  assumes \"c \\<noteq> d\"\n  shows \"Bernstein_Poly j p c d \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:] \n          = Bernstein_Poly_01 j p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n    [:0, d - c:] =\n    Bernstein_Poly_01 j p", "apply (subst Bernstein_Poly_rescale)"], ["proof (prove)\ngoal (2 subgoals):\n 1. c \\<noteq> d\n 2. Bernstein_Poly j p ((c - c) / (d - c)) ((d - c) / (d - c)) =\n    Bernstein_Poly_01 j p", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n\ngoal (2 subgoals):\n 1. c \\<noteq> d\n 2. Bernstein_Poly j p ((c - c) / (d - c)) ((d - c) / (d - c)) =\n    Bernstein_Poly_01 j p", "by (auto simp: Bernstein_Poly_01)"], ["", "lemma Bernstein_Poly_eq_rescale_01: \n  assumes \"c \\<noteq> d\"\n  shows \"Bernstein_Poly j p c d = Bernstein_Poly_01 j p \n            \\<circ>\\<^sub>p [:0, 1/(d-c):] \\<circ>\\<^sub>p [:-c, 1:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly j p c d =\n    Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:0, 1 / (d - c):] \\<circ>\\<^sub>p\n    [:- c, 1:]", "apply (subst Bernstein_Poly_rescale_01[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ?c \\<noteq> ?d\n 2. Bernstein_Poly j p c d =\n    Bernstein_Poly j p ?c ?d \\<circ>\\<^sub>p [:?c, 1:] \\<circ>\\<^sub>p\n    [:0, ?d - ?c:] \\<circ>\\<^sub>p\n    [:0, 1 / (d - c):] \\<circ>\\<^sub>p\n    [:- c, 1:]", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n\ngoal (2 subgoals):\n 1. ?c \\<noteq> ?d\n 2. Bernstein_Poly j p c d =\n    Bernstein_Poly j p ?c ?d \\<circ>\\<^sub>p [:?c, 1:] \\<circ>\\<^sub>p\n    [:0, ?d - ?c:] \\<circ>\\<^sub>p\n    [:0, 1 / (d - c):] \\<circ>\\<^sub>p\n    [:- c, 1:]", "by (auto simp: pcompose_pCons pcompose_assoc[symmetric])"], ["", "lemma coeff_Bernstein_sum: \n  fixes b::\"nat \\<Rightarrow> real\" and p::nat and c d::real\n  defines \"P \\<equiv> (\\<Sum>j = 0..p. (smult (b j) (Bernstein_Poly j p c d)))\"\n  assumes \"i \\<le> p\" and \"c \\<noteq> d\"\n  shows \"coeff ((reciprocal_poly p (P \\<circ>\\<^sub>p [:c, 1:] \n      \\<circ>\\<^sub>p [:0, d-c:])) \\<circ>\\<^sub>p [:1, 1:]) (p - i) = (p choose i) * (b i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "have h: \"P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:] \n      = (\\<Sum>j = 0..p. (smult (b j) (Bernstein_Poly_01 j p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n    (\\<Sum>j = 0..p. smult (b j) (Bernstein_Poly_01 j p))", "using assms"], ["proof (prove)\nusing this:\n  P \\<equiv> \\<Sum>j = 0..p. smult (b j) (Bernstein_Poly j p c d)\n  i \\<le> p\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n    (\\<Sum>j = 0..p. smult (b j) (Bernstein_Poly_01 j p))", "by (auto simp: P_def pcompose_sum pcompose_smult \n          pcompose_add Bernstein_Poly_rescale_01)"], ["proof (state)\nthis:\n  P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n  (\\<Sum>j = 0..p. smult (b j) (Bernstein_Poly_01 j p))\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "then"], ["proof (chain)\npicking this:\n  P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n  (\\<Sum>j = 0..p. smult (b j) (Bernstein_Poly_01 j p))", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n  (\\<Sum>j = 0..p. smult (b j) (Bernstein_Poly_01 j p))\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "using coeff_Bernstein_sum_01 assms"], ["proof (prove)\nusing this:\n  P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n  (\\<Sum>j = 0..p. smult (b j) (Bernstein_Poly_01 j p))\n  ?i \\<le> ?p \\<Longrightarrow>\n  coeff\n   (reciprocal_poly ?p\n     (\\<Sum>x = 0..?p.\n         smult (?b x) (Bernstein_Poly_01 x ?p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (?p - ?i) =\n  real (?p choose ?i) * ?b ?i\n  P \\<equiv> \\<Sum>j = 0..p. smult (b j) (Bernstein_Poly j p c d)\n  i \\<le> p\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "by simp"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n      [:0, d - c:]) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - i) =\n  real (p choose i) * b i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_sum: \n  assumes \"c \\<noteq> d\" and \"degree P \\<le> p\"\n  shows \"P = (\\<Sum>j = 0..p. smult (inverse (real (p choose j))\n     * coeff (reciprocal_poly p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:]) \n      \\<circ>\\<^sub>p [:1, 1:]) (p-j)) (Bernstein_Poly j p c d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly j p c d))", "apply (subst Bernstein_Poly_eq_rescale_01)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>j. c \\<noteq> d\n 2. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly_01 j p \\<circ>\\<^sub>p\n          [:0, 1 / (d - c):] \\<circ>\\<^sub>p\n          [:- c, 1:]))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> d", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n  degree P \\<le> p\n\ngoal (1 subgoal):\n 1. c \\<noteq> d", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly_01 j p \\<circ>\\<^sub>p\n          [:0, 1 / (d - c):] \\<circ>\\<^sub>p\n          [:- c, 1:]))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly_01 j p \\<circ>\\<^sub>p\n          [:0, 1 / (d - c):] \\<circ>\\<^sub>p\n          [:- c, 1:]))", "apply (subst pcompose_smult[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly_01 j p \\<circ>\\<^sub>p\n          [:0, 1 / (d - c):]) \\<circ>\\<^sub>p\n        [:- c, 1:])", "apply (subst pcompose_sum[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly_01 j p \\<circ>\\<^sub>p\n          [:0, 1 / (d - c):])) \\<circ>\\<^sub>p\n    [:- c, 1:]", "apply (subst pcompose_smult[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly_01 j p) \\<circ>\\<^sub>p\n        [:0, 1 / (d - c):]) \\<circ>\\<^sub>p\n    [:- c, 1:]", "apply (subst pcompose_sum[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:0, 1 / (d - c):] \\<circ>\\<^sub>p\n    [:- c, 1:]", "apply (subst Bernstein_sum_01[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. degree (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]) \\<le> p\n 2. P =\n    P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] \\<circ>\\<^sub>p\n    [:0, 1 / (d - c):] \\<circ>\\<^sub>p\n    [:- c, 1:]", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n  degree P \\<le> p\n\ngoal (2 subgoals):\n 1. degree (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]) \\<le> p\n 2. P =\n    P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] \\<circ>\\<^sub>p\n    [:0, 1 / (d - c):] \\<circ>\\<^sub>p\n    [:- c, 1:]", "by (auto simp: degree_pcompose pcompose_assoc[symmetric] \n        pcompose_pCons)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Bernstein_Poly_span1: \n  assumes \"c \\<noteq> d\" and \"degree P \\<le> p\"\n  shows \"P \\<in> poly_vs.span {Bernstein_Poly x p c d | x. x \\<le> p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "proof (subst Bernstein_sum[OF assms], rule poly_vs.span_sum)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       smult\n        (inverse (real (p choose x)) *\n         coeff\n          (reciprocal_poly p\n            (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:]) \\<circ>\\<^sub>p\n           [:1, 1:])\n          (p - x))\n        (Bernstein_Poly x p c d)\n       \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "fix x :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       smult\n        (inverse (real (p choose x)) *\n         coeff\n          (reciprocal_poly p\n            (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:]) \\<circ>\\<^sub>p\n           [:1, 1:])\n          (p - x))\n        (Bernstein_Poly x p c d)\n       \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "assume \"x \\<in> {0..p}\""], ["proof (state)\nthis:\n  x \\<in> {0..p}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       smult\n        (inverse (real (p choose x)) *\n         coeff\n          (reciprocal_poly p\n            (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:]) \\<circ>\\<^sub>p\n           [:1, 1:])\n          (p - x))\n        (Bernstein_Poly x p c d)\n       \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "then"], ["proof (chain)\npicking this:\n  x \\<in> {0..p}", "have \"\\<exists>n. Bernstein_Poly x p c d = Bernstein_Poly n p c d \\<and> n \\<le> p\""], ["proof (prove)\nusing this:\n  x \\<in> {0..p}\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       Bernstein_Poly x p c d = Bernstein_Poly n p c d \\<and> n \\<le> p", "by auto"], ["proof (state)\nthis:\n  \\<exists>n.\n     Bernstein_Poly x p c d = Bernstein_Poly n p c d \\<and> n \\<le> p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       smult\n        (inverse (real (p choose x)) *\n         coeff\n          (reciprocal_poly p\n            (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:]) \\<circ>\\<^sub>p\n           [:1, 1:])\n          (p - x))\n        (Bernstein_Poly x p c d)\n       \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "then"], ["proof (chain)\npicking this:\n  \\<exists>n.\n     Bernstein_Poly x p c d = Bernstein_Poly n p c d \\<and> n \\<le> p", "have \n    \"Bernstein_Poly x p c d \\<in> poly_vs.span {Bernstein_Poly n p c d |n. n \\<le> p}\""], ["proof (prove)\nusing this:\n  \\<exists>n.\n     Bernstein_Poly x p c d = Bernstein_Poly n p c d \\<and> n \\<le> p\n\ngoal (1 subgoal):\n 1. Bernstein_Poly x p c d\n    \\<in> poly_vs.span {Bernstein_Poly n p c d |n. n \\<le> p}", "by (simp add: poly_vs.span_base)"], ["proof (state)\nthis:\n  Bernstein_Poly x p c d\n  \\<in> poly_vs.span {Bernstein_Poly n p c d |n. n \\<le> p}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       smult\n        (inverse (real (p choose x)) *\n         coeff\n          (reciprocal_poly p\n            (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:]) \\<circ>\\<^sub>p\n           [:1, 1:])\n          (p - x))\n        (Bernstein_Poly x p c d)\n       \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "thus \"smult (inverse (real (p choose x)) *\n        coeff (reciprocal_poly p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]) \\<circ>\\<^sub>p [:1, 1:])\n        (p - x)) (Bernstein_Poly x p c d)\n         \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}\""], ["proof (prove)\nusing this:\n  Bernstein_Poly x p c d\n  \\<in> poly_vs.span {Bernstein_Poly n p c d |n. n \\<le> p}\n\ngoal (1 subgoal):\n 1. smult\n     (inverse (real (p choose x)) *\n      coeff\n       (reciprocal_poly p\n         (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n          [:0, d - c:]) \\<circ>\\<^sub>p\n        [:1, 1:])\n       (p - x))\n     (Bernstein_Poly x p c d)\n    \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "by (rule poly_vs.span_scale)"], ["proof (state)\nthis:\n  smult\n   (inverse (real (p choose x)) *\n    coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - x))\n   (Bernstein_Poly x p c d)\n  \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_Poly_span: \n  assumes \"c \\<noteq> d\" \n  shows \"poly_vs.span {Bernstein_Poly x p c d | x. x \\<le> p} = {x. degree x \\<le> p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p} =\n    {x. degree x \\<le> p}", "proof (subst Bernstein_Poly_01_span[symmetric], subst poly_vs.span_eq, rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. {Bernstein_Poly x p c d |x. x \\<le> p}\n    \\<subseteq> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}\n 2. {Bernstein_Poly_01 x p |x. x \\<le> p}\n    \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "show \"{Bernstein_Poly x p c d |x. x \\<le> p}\n      \\<subseteq> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Bernstein_Poly x p c d |x. x \\<le> p}\n    \\<subseteq> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "apply (subst Setcompr_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<le>p.\n       Bernstein_Poly x p c d\n       \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "apply (rule allI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> p \\<Longrightarrow>\n       Bernstein_Poly x p c d\n       \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "apply (rule Bernstein_Poly_01_span1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> p \\<Longrightarrow> degree (Bernstein_Poly x p c d) \\<le> p", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> p \\<Longrightarrow> degree (Bernstein_Poly x p c d) \\<le> p", "by (auto simp: degree_Bernstein_le Bernstein_Poly_eq_rescale_01\n                    degree_pcompose)"], ["proof (state)\nthis:\n  {Bernstein_Poly x p c d |x. x \\<le> p}\n  \\<subseteq> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}\n\ngoal (1 subgoal):\n 1. {Bernstein_Poly_01 x p |x. x \\<le> p}\n    \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "show \"{Bernstein_Poly_01 x p |x. x \\<le> p}\n      \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Bernstein_Poly_01 x p |x. x \\<le> p}\n    \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "apply (subst Setcompr_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<le>p.\n       Bernstein_Poly_01 x p\n       \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "apply (rule allI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> p \\<Longrightarrow>\n       Bernstein_Poly_01 x p\n       \\<in> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}", "apply (rule Bernstein_Poly_span1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<le> p \\<Longrightarrow> c \\<noteq> d\n 2. \\<And>x.\n       x \\<le> p \\<Longrightarrow> degree (Bernstein_Poly_01 x p) \\<le> p", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<le> p \\<Longrightarrow> c \\<noteq> d\n 2. \\<And>x.\n       x \\<le> p \\<Longrightarrow> degree (Bernstein_Poly_01 x p) \\<le> p", "by (auto simp: degree_Bernstein_le)"], ["proof (state)\nthis:\n  {Bernstein_Poly_01 x p |x. x \\<le> p}\n  \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<le> p}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_Poly_independent: assumes \"c \\<noteq> d\" \n  shows \"poly_vs.independent {Bernstein_Poly x p c d | x. x \\<in> {..p}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_vs.independent {Bernstein_Poly x p c d |x. x \\<in> {..p}}", "proof (rule poly_vs.card_le_dim_spanning)"], ["proof (state)\ngoal (4 subgoals):\n 1. {Bernstein_Poly x p c d |x. x \\<in> {..p}} \\<subseteq> ?V\n 2. ?V \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n 3. finite {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n 4. card {Bernstein_Poly x p c d |x. x \\<in> {..p}} \\<le> poly_vs.dim ?V", "show \"{Bernstein_Poly x p c d |x. x \\<in> {.. p}} \\<subseteq> {x. degree x \\<le> p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n    \\<subseteq> {x. degree x \\<le> p}", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n    \\<subseteq> {x. degree x \\<le> p}", "by (auto simp: degree_Bernstein Bernstein_Poly_eq_rescale_01 degree_pcompose)"], ["proof (state)\nthis:\n  {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n  \\<subseteq> {x. degree x \\<le> p}\n\ngoal (3 subgoals):\n 1. {x. degree x \\<le> p}\n    \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n 2. finite {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n 3. card {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n    \\<le> poly_vs.dim {x. degree x \\<le> p}", "show \"{x. degree x \\<le> p} \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<in> {..p}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. degree x \\<le> p}\n    \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<in> {..p}}", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. {x. degree x \\<le> p}\n    \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<in> {..p}}", "by (auto simp: Bernstein_Poly_span1)"], ["proof (state)\nthis:\n  {x. degree x \\<le> p}\n  \\<subseteq> poly_vs.span {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n\ngoal (2 subgoals):\n 1. finite {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n 2. card {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n    \\<le> poly_vs.dim {x. degree x \\<le> p}", "show \"finite {Bernstein_Poly x p c d |x. x \\<in> {..p}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {Bernstein_Poly x p c d |x. x \\<in> {..p}}", "by fastforce"], ["proof (state)\nthis:\n  finite {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n\ngoal (1 subgoal):\n 1. card {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n    \\<le> poly_vs.dim {x. degree x \\<le> p}", "show \"card {Bernstein_Poly x p c d |x. x \\<in> {..p}} \\<le> poly_vs.dim {x. degree x \\<le> p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n    \\<le> poly_vs.dim {x. degree x \\<le> p}", "apply (rule le_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. card {Bernstein_Poly x p c d |x. x \\<in> {..p}} \\<le> ?j\n 2. ?j \\<le> poly_vs.dim {x. degree x \\<le> p}", "apply (subst image_Collect[symmetric], rule card_image_le, force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x. x \\<in> {..p}} \\<le> poly_vs.dim {x. degree x \\<le> p}", "by (force simp: dim_degree)"], ["proof (state)\nthis:\n  card {Bernstein_Poly x p c d |x. x \\<in> {..p}}\n  \\<le> poly_vs.dim {x. degree x \\<le> p}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Bernstein coefficients and changes over any interval\\<close>"], ["", "definition Bernstein_coeffs ::\n  \"nat \\<Rightarrow> real \\<Rightarrow> real \\<Rightarrow> real poly \\<Rightarrow> real list\" where \n  \"Bernstein_coeffs p c d P = \n    [(inverse (real (p choose j)) * \n      coeff (reciprocal_poly p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:]) \\<circ>\\<^sub>p [:1, 1:]) (p-j)). \n     j \\<leftarrow> [0..<(p+1)]]\""], ["", "lemma Bernstein_coeffs_eq_rescale: assumes \"c \\<noteq> d\"\n  shows \"Bernstein_coeffs p c d P = Bernstein_coeffs_01 p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_coeffs p c d P =\n    Bernstein_coeffs_01 p\n     (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs p c d P =\n    Bernstein_coeffs_01 p\n     (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])", "by (auto simp: pcompose_pCons pcompose_assoc[symmetric]\n                  Bernstein_coeffs_def Bernstein_coeffs_01_def)"], ["", "lemma nth_default_Bernstein_coeffs: assumes \"degree P \\<le> p\"\n  shows \"nth_default 0 (Bernstein_coeffs p c d P) i =\n         inverse (p choose i) * coeff\n         (reciprocal_poly p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:]) \\<circ>\\<^sub>p [:1, 1:]) (p-i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs p c d P) i =\n    inverse (real (p choose i)) *\n    coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i)", "apply (cases \"p = i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. p = i \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i =\n    inverse (real (p choose i)) *\n    coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i)\n 2. p \\<noteq> i \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i =\n    inverse (real (p choose i)) *\n    coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i)", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n\ngoal (2 subgoals):\n 1. p = i \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i =\n    inverse (real (p choose i)) *\n    coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i)\n 2. p \\<noteq> i \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i =\n    inverse (real (p choose i)) *\n    coeff\n     (reciprocal_poly p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n        [:0, d - c:]) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i)", "by (auto simp: Bernstein_coeffs_def nth_default_append\n                  nth_default_Cons Nitpick.case_nat_unfold binomial_eq_0)"], ["", "lemma Bernstein_coeffs_sum: assumes \"c \\<noteq> d\" and hP: \"degree P \\<le> p\"\n  shows \"P = (\\<Sum>j = 0..p. smult (nth_default 0 (Bernstein_coeffs p c d P) j)\n         (Bernstein_Poly j p c d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult (nth_default 0 (Bernstein_coeffs p c d P) j)\n         (Bernstein_Poly j p c d))", "apply (subst nth_default_Bernstein_coeffs[OF hP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly j p c d))", "apply (subst Bernstein_sum[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly j p c d)) =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff\n           (reciprocal_poly p\n             (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n              [:0, d - c:]) \\<circ>\\<^sub>p\n            [:1, 1:])\n           (p - j))\n         (Bernstein_Poly j p c d))", "by argo"], ["", "definition Bernstein_changes :: \"nat \\<Rightarrow> real \\<Rightarrow> real \\<Rightarrow> real poly \\<Rightarrow> int\" where\n  \"Bernstein_changes p c d P = nat (changes (Bernstein_coeffs p c d P))\""], ["", "lemma Bernstein_changes_eq_rescale: assumes \"c \\<noteq> d\" and \"degree P \\<le> p\"\n  shows \"Bernstein_changes p c d P =\n         Bernstein_changes_01 p (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d-c:])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_changes p c d P =\n    Bernstein_changes_01 p\n     (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> d\n  degree P \\<le> p\n\ngoal (1 subgoal):\n 1. Bernstein_changes p c d P =\n    Bernstein_changes_01 p\n     (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])", "by (auto simp: Bernstein_coeffs_eq_rescale Bernstein_changes_def\n                  Bernstein_changes_01_def)"], ["", "text \\<open>This is related and mostly equivalent to previous Descartes test \\cite{li2019counting}\\<close>"], ["", "lemma Bernstein_changes_test: \n  fixes P::\"real poly\"\n  assumes \"degree P \\<le> p\" and \"P \\<noteq> 0\" and \"c < d\"\n  shows \"proots_count P {x. c < x \\<and> x < d} \\<le> Bernstein_changes p c d P \\<and>\n        even (Bernstein_changes p c d P - proots_count P {x. c < x \\<and> x < d})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count P {x. c < x \\<and> x < d})\n    \\<le> Bernstein_changes p c d P \\<and>\n    even\n     (Bernstein_changes p c d P -\n      int (proots_count P {x. c < x \\<and> x < d}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. int (proots_count P {x. c < x \\<and> x < d})\n    \\<le> Bernstein_changes p c d P \\<and>\n    even\n     (Bernstein_changes p c d P -\n      int (proots_count P {x. c < x \\<and> x < d}))", "define Q where \"Q=P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]\""], ["proof (state)\nthis:\n  Q = P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. c < x \\<and> x < d})\n    \\<le> Bernstein_changes p c d P \\<and>\n    even\n     (Bernstein_changes p c d P -\n      int (proots_count P {x. c < x \\<and> x < d}))", "have \"int (proots_count Q {x. 0 < x \\<and> x < 1}) \n          \\<le> Bernstein_changes_01 p Q \\<and>\n              even (Bernstein_changes_01 p Q - \n                  int (proots_count Q {x. 0 < x \\<and> x < 1}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count Q {x. 0 < x \\<and> x < 1})\n    \\<le> Bernstein_changes_01 p Q \\<and>\n    even\n     (Bernstein_changes_01 p Q -\n      int (proots_count Q {x. 0 < x \\<and> x < 1}))", "unfolding Q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count\n          (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])\n          {x. 0 < x \\<and> x < 1})\n    \\<le> Bernstein_changes_01 p\n           (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]) \\<and>\n    even\n     (Bernstein_changes_01 p\n       (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]) -\n      int (proots_count\n            (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])\n            {x. 0 < x \\<and> x < 1}))", "apply (rule Bernstein_changes_01_test)"], ["proof (prove)\ngoal (2 subgoals):\n 1. degree (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]) \\<le> p\n 2. P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] \\<noteq> 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]) \\<le> p", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n  P \\<noteq> 0\n  c < d\n\ngoal (1 subgoal):\n 1. degree (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]) \\<le> p", "by fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] \\<noteq> 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n  P \\<noteq> 0\n  c < d\n\ngoal (1 subgoal):\n 1. P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] \\<noteq> 0", "by (auto simp: pcompose_eq_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  int (proots_count Q {x. 0 < x \\<and> x < 1})\n  \\<le> Bernstein_changes_01 p Q \\<and>\n  even\n   (Bernstein_changes_01 p Q - int (proots_count Q {x. 0 < x \\<and> x < 1}))\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. c < x \\<and> x < d})\n    \\<le> Bernstein_changes p c d P \\<and>\n    even\n     (Bernstein_changes p c d P -\n      int (proots_count P {x. c < x \\<and> x < d}))", "moreover"], ["proof (state)\nthis:\n  int (proots_count Q {x. 0 < x \\<and> x < 1})\n  \\<le> Bernstein_changes_01 p Q \\<and>\n  even\n   (Bernstein_changes_01 p Q - int (proots_count Q {x. 0 < x \\<and> x < 1}))\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. c < x \\<and> x < d})\n    \\<le> Bernstein_changes p c d P \\<and>\n    even\n     (Bernstein_changes p c d P -\n      int (proots_count P {x. c < x \\<and> x < d}))", "have \"proots_count P {x. c < x \\<and> x < d} =\n            proots_count Q {x. 0 < x \\<and> x < 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proots_count P {x. c < x \\<and> x < d} =\n    proots_count Q {x. 0 < x \\<and> x < 1}", "unfolding Q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. proots_count P {x. c < x \\<and> x < d} =\n    proots_count (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])\n     {x. 0 < x \\<and> x < 1}", "proof (subst proots_pcompose)"], ["proof (state)\ngoal (3 subgoals):\n 1. P \\<circ>\\<^sub>p [:c, 1:] \\<noteq> 0\n 2. degree [:0, d - c:] = 1\n 3. proots_count P {x. c < x \\<and> x < d} =\n    proots_count (P \\<circ>\\<^sub>p [:c, 1:])\n     (poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1})", "have \"poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1} =\n        {x. c < x \\<and> x < d}\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1} =\n    {x. c < x \\<and> x < d}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n    \\<subseteq> {x. c < x \\<and> x < d}\n 2. {x. c < x \\<and> x < d}\n    \\<subseteq> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "have \"c + x * (d - c) < d\" if \"x < 1\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. c + x * (d - c) < d", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. c + x * (d - c) < d", "have \"x * (d - c) < 1 * (d - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * (d - c) < 1 * (d - c)", "using \\<open>c < d\\<close> that"], ["proof (prove)\nusing this:\n  c < d\n  x < 1\n\ngoal (1 subgoal):\n 1. x * (d - c) < 1 * (d - c)", "by force"], ["proof (state)\nthis:\n  x * (d - c) < 1 * (d - c)\n\ngoal (1 subgoal):\n 1. c + x * (d - c) < d", "then"], ["proof (chain)\npicking this:\n  x * (d - c) < 1 * (d - c)", "show ?thesis"], ["proof (prove)\nusing this:\n  x * (d - c) < 1 * (d - c)\n\ngoal (1 subgoal):\n 1. c + x * (d - c) < d", "by fastforce"], ["proof (state)\nthis:\n  c + x * (d - c) < d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x < 1 \\<Longrightarrow> c + ?x * (d - c) < d\n\ngoal (2 subgoals):\n 1. poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n    \\<subseteq> {x. c < x \\<and> x < d}\n 2. {x. c < x \\<and> x < d}\n    \\<subseteq> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "then"], ["proof (chain)\npicking this:\n  ?x < 1 \\<Longrightarrow> c + ?x * (d - c) < d", "show \"?L \\<subseteq> ?R\""], ["proof (prove)\nusing this:\n  ?x < 1 \\<Longrightarrow> c + ?x * (d - c) < d\n\ngoal (1 subgoal):\n 1. poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n    \\<subseteq> {x. c < x \\<and> x < d}", "using assms"], ["proof (prove)\nusing this:\n  ?x < 1 \\<Longrightarrow> c + ?x * (d - c) < d\n  degree P \\<le> p\n  P \\<noteq> 0\n  c < d\n\ngoal (1 subgoal):\n 1. poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n    \\<subseteq> {x. c < x \\<and> x < d}", "by auto"], ["proof (state)\nthis:\n  poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n  \\<subseteq> {x. c < x \\<and> x < d}\n\ngoal (1 subgoal):\n 1. {x. c < x \\<and> x < d}\n    \\<subseteq> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {x. c < x \\<and> x < d}\n    \\<subseteq> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "show \"?R \\<subseteq> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. c < x \\<and> x < d}\n    \\<subseteq> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. c < x \\<and> x < d} \\<Longrightarrow>\n       x \\<in> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "fix x::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. c < x \\<and> x < d} \\<Longrightarrow>\n       x \\<in> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "assume \"x \\<in> ?R\""], ["proof (state)\nthis:\n  x \\<in> {x. c < x \\<and> x < d}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. c < x \\<and> x < d} \\<Longrightarrow>\n       x \\<in> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "hence \"c < x\" and \"x < d\""], ["proof (prove)\nusing this:\n  x \\<in> {x. c < x \\<and> x < d}\n\ngoal (1 subgoal):\n 1. c < x &&& x < d", "by auto"], ["proof (state)\nthis:\n  c < x\n  x < d\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. c < x \\<and> x < d} \\<Longrightarrow>\n       x \\<in> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "thus \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  c < x\n  x < d\n\ngoal (1 subgoal):\n 1. x \\<in> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "proof (subst image_eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>c < x; x < d\\<rbrakk> \\<Longrightarrow> x = poly [:c, 1:] ?x2\n 2. \\<lbrakk>c < x; x < d\\<rbrakk>\n    \\<Longrightarrow> ?x2 \\<in> poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n 3. \\<lbrakk>c < x; x < d\\<rbrakk> \\<Longrightarrow> True", "show \"x = poly [:c, 1:] (x - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = poly [:c, 1:] (x - c)", "by force"], ["proof (state)\nthis:\n  x = poly [:c, 1:] (x - c)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c < x; x < d\\<rbrakk>\n    \\<Longrightarrow> x - c\n                      \\<in> poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n 2. \\<lbrakk>c < x; x < d\\<rbrakk> \\<Longrightarrow> True", "assume \"c < x\" and \"x < d\""], ["proof (state)\nthis:\n  c < x\n  x < d\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c < x; x < d\\<rbrakk>\n    \\<Longrightarrow> x - c\n                      \\<in> poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n 2. \\<lbrakk>c < x; x < d\\<rbrakk> \\<Longrightarrow> True", "thus \"x - c \\<in> poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\""], ["proof (prove)\nusing this:\n  c < x\n  x < d\n\ngoal (1 subgoal):\n 1. x - c \\<in> poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}", "proof (subst image_eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>c < x; x < d\\<rbrakk>\n    \\<Longrightarrow> x - c = poly [:0, d - c:] ?x2\n 2. \\<lbrakk>c < x; x < d\\<rbrakk>\n    \\<Longrightarrow> ?x2 \\<in> {x. 0 < x \\<and> x < 1}\n 3. \\<lbrakk>c < x; x < d\\<rbrakk> \\<Longrightarrow> True", "show \"x - c = poly [:0, d - c:] ((x - c)/(d - c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x - c = poly [:0, d - c:] ((x - c) / (d - c))", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n  P \\<noteq> 0\n  c < d\n\ngoal (1 subgoal):\n 1. x - c = poly [:0, d - c:] ((x - c) / (d - c))", "by fastforce"], ["proof (state)\nthis:\n  x - c = poly [:0, d - c:] ((x - c) / (d - c))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c < x; x < d\\<rbrakk>\n    \\<Longrightarrow> (x - c) / (d - c) \\<in> {x. 0 < x \\<and> x < 1}\n 2. \\<lbrakk>c < x; x < d\\<rbrakk> \\<Longrightarrow> True", "assume \"c < x\" and \"x < d\""], ["proof (state)\nthis:\n  c < x\n  x < d\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c < x; x < d\\<rbrakk>\n    \\<Longrightarrow> (x - c) / (d - c) \\<in> {x. 0 < x \\<and> x < 1}\n 2. \\<lbrakk>c < x; x < d\\<rbrakk> \\<Longrightarrow> True", "thus \"(x - c) / (d - c) \\<in> {x. 0 < x \\<and> x < 1}\""], ["proof (prove)\nusing this:\n  c < x\n  x < d\n\ngoal (1 subgoal):\n 1. (x - c) / (d - c) \\<in> {x. 0 < x \\<and> x < 1}", "by auto"], ["proof (state)\nthis:\n  (x - c) / (d - c) \\<in> {x. 0 < x \\<and> x < 1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c < x; x < d\\<rbrakk> \\<Longrightarrow> True", "qed fast"], ["proof (state)\nthis:\n  x - c \\<in> poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c < x; x < d\\<rbrakk> \\<Longrightarrow> True", "qed fast"], ["proof (state)\nthis:\n  x \\<in> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x. c < x \\<and> x < d}\n  \\<subseteq> poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1} =\n  {x. c < x \\<and> x < d}\n\ngoal (3 subgoals):\n 1. P \\<circ>\\<^sub>p [:c, 1:] \\<noteq> 0\n 2. degree [:0, d - c:] = 1\n 3. proots_count P {x. c < x \\<and> x < d} =\n    proots_count (P \\<circ>\\<^sub>p [:c, 1:])\n     (poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1})", "then"], ["proof (chain)\npicking this:\n  poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1} =\n  {x. c < x \\<and> x < d}", "show \"proots_count P {x. c < x \\<and> x < d} =\n        proots_count (P \\<circ>\\<^sub>p [:c, 1:]) \n        (poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1})\""], ["proof (prove)\nusing this:\n  poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1} =\n  {x. c < x \\<and> x < d}\n\ngoal (1 subgoal):\n 1. proots_count P {x. c < x \\<and> x < d} =\n    proots_count (P \\<circ>\\<^sub>p [:c, 1:])\n     (poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1})", "using assms"], ["proof (prove)\nusing this:\n  poly [:c, 1:] ` poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1} =\n  {x. c < x \\<and> x < d}\n  degree P \\<le> p\n  P \\<noteq> 0\n  c < d\n\ngoal (1 subgoal):\n 1. proots_count P {x. c < x \\<and> x < d} =\n    proots_count (P \\<circ>\\<^sub>p [:c, 1:])\n     (poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1})", "by (auto simp:proots_pcompose)"], ["proof (state)\nthis:\n  proots_count P {x. c < x \\<and> x < d} =\n  proots_count (P \\<circ>\\<^sub>p [:c, 1:])\n   (poly [:0, d - c:] ` {x. 0 < x \\<and> x < 1})\n\ngoal (2 subgoals):\n 1. P \\<circ>\\<^sub>p [:c, 1:] \\<noteq> 0\n 2. degree [:0, d - c:] = 1", "show \"P \\<circ>\\<^sub>p [:c, 1:] \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<circ>\\<^sub>p [:c, 1:] \\<noteq> 0", "by (simp add: pcompose_eq_0 assms(2))"], ["proof (state)\nthis:\n  P \\<circ>\\<^sub>p [:c, 1:] \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree [:0, d - c:] = 1", "show \"degree [:0, d - c:] = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree [:0, d - c:] = 1", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n  P \\<noteq> 0\n  c < d\n\ngoal (1 subgoal):\n 1. degree [:0, d - c:] = 1", "by auto"], ["proof (state)\nthis:\n  degree [:0, d - c:] = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proots_count P {x. c < x \\<and> x < d} =\n  proots_count Q {x. 0 < x \\<and> x < 1}\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. c < x \\<and> x < d})\n    \\<le> Bernstein_changes p c d P \\<and>\n    even\n     (Bernstein_changes p c d P -\n      int (proots_count P {x. c < x \\<and> x < d}))", "moreover"], ["proof (state)\nthis:\n  proots_count P {x. c < x \\<and> x < d} =\n  proots_count Q {x. 0 < x \\<and> x < 1}\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. c < x \\<and> x < d})\n    \\<le> Bernstein_changes p c d P \\<and>\n    even\n     (Bernstein_changes p c d P -\n      int (proots_count P {x. c < x \\<and> x < d}))", "have \" Bernstein_changes p c d P = Bernstein_changes_01 p Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_changes p c d P = Bernstein_changes_01 p Q", "unfolding Q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_changes p c d P =\n    Bernstein_changes_01 p\n     (P \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])", "apply (rule Bernstein_changes_eq_rescale)"], ["proof (prove)\ngoal (2 subgoals):\n 1. c \\<noteq> d\n 2. degree P \\<le> p", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n  P \\<noteq> 0\n  c < d\n\ngoal (2 subgoals):\n 1. c \\<noteq> d\n 2. degree P \\<le> p", "by auto"], ["proof (state)\nthis:\n  Bernstein_changes p c d P = Bernstein_changes_01 p Q\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. c < x \\<and> x < d})\n    \\<le> Bernstein_changes p c d P \\<and>\n    even\n     (Bernstein_changes p c d P -\n      int (proots_count P {x. c < x \\<and> x < d}))", "ultimately"], ["proof (chain)\npicking this:\n  int (proots_count Q {x. 0 < x \\<and> x < 1})\n  \\<le> Bernstein_changes_01 p Q \\<and>\n  even\n   (Bernstein_changes_01 p Q - int (proots_count Q {x. 0 < x \\<and> x < 1}))\n  proots_count P {x. c < x \\<and> x < d} =\n  proots_count Q {x. 0 < x \\<and> x < 1}\n  Bernstein_changes p c d P = Bernstein_changes_01 p Q", "show ?thesis"], ["proof (prove)\nusing this:\n  int (proots_count Q {x. 0 < x \\<and> x < 1})\n  \\<le> Bernstein_changes_01 p Q \\<and>\n  even\n   (Bernstein_changes_01 p Q - int (proots_count Q {x. 0 < x \\<and> x < 1}))\n  proots_count P {x. c < x \\<and> x < d} =\n  proots_count Q {x. 0 < x \\<and> x < 1}\n  Bernstein_changes p c d P = Bernstein_changes_01 p Q\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. c < x \\<and> x < d})\n    \\<le> Bernstein_changes p c d P \\<and>\n    even\n     (Bernstein_changes p c d P -\n      int (proots_count P {x. c < x \\<and> x < d}))", "by auto"], ["proof (state)\nthis:\n  int (proots_count P {x. c < x \\<and> x < d})\n  \\<le> Bernstein_changes p c d P \\<and>\n  even\n   (Bernstein_changes p c d P -\n    int (proots_count P {x. c < x \\<and> x < d}))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The control polygon of a polynomial\\<close>"], ["", "definition control_points ::\n  \"nat \\<Rightarrow> real \\<Rightarrow> real \\<Rightarrow> real poly \\<Rightarrow> (real \\<times> real) list\"\nwhere\n  \"control_points p c d P = \n   [(((real i)*d + (real (p - i))*c)/p, \n      nth_default 0 (Bernstein_coeffs p c d P) i).\n      i \\<leftarrow> [0..<(p+1)]]\""], ["", "lemma line_above: \n  fixes a b c d :: real and p :: nat and P :: \"real poly\"\n  assumes hline: \"\\<And>i. i \\<le> p \\<Longrightarrow> a * (((real i)*d + (real (p - i))*c)/p) + b \\<ge>\n                  nth_default 0 (Bernstein_coeffs p c d P) i\"\n  and hp: \"p \\<noteq> 0\" and hcd: \"c \\<noteq> d\" and hP: \"degree P \\<le> p\"\n  shows \"\\<And>x. c \\<le> x \\<Longrightarrow> x \\<le> d \\<Longrightarrow> a*x + b \\<ge> poly P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "assume hc: \"c \\<le> x\" and  hd: \"x \\<le> d\""], ["proof (state)\nthis:\n  c \\<le> x\n  x \\<le> d\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "have bern_eq:\"Bernstein_coeffs p c d [:b, a:] =\n           [a*(real i * d + real (p - i) * c)/p + b. i \\<leftarrow> [0..<(p+1)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_coeffs p c d [:b, a:] =\n    map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bernstein_coeffs p c d [:b, a:] =\n    map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1]", "have \"Bernstein_coeffs p c d [:b, a:] = map (nth_default 0\n          (Bernstein_coeffs_01 p ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])))\n         [0..<p+1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_coeffs p c d [:b, a:] =\n    map (nth_default 0\n          (Bernstein_coeffs_01 p\n            ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:])))\n     [0..<p + 1]", "apply (subst Bernstein_coeffs_eq_rescale[\"OF\" hcd])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p\n     ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]) =\n    map (nth_default 0\n          (Bernstein_coeffs_01 p\n            ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:])))\n     [0..<p + 1]", "apply (subst map_nth_default[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (nth_default ?xa\n          (Bernstein_coeffs_01 p\n            ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:])))\n     [0..<\n      length\n       (Bernstein_coeffs_01 p\n         ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n          [:0, d - c:]))] =\n    map (nth_default 0\n          (Bernstein_coeffs_01 p\n            ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:])))\n     [0..<p + 1]", "apply (subst length_Bernstein_coeffs_01)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (nth_default ?xa\n          (Bernstein_coeffs_01 p\n            ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:])))\n     [0..<p + 1] =\n    map (nth_default 0\n          (Bernstein_coeffs_01 p\n            ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:])))\n     [0..<p + 1]", "by blast"], ["proof (state)\nthis:\n  Bernstein_coeffs p c d [:b, a:] =\n  map (nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs p c d [:b, a:] =\n    map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1]", "also"], ["proof (state)\nthis:\n  Bernstein_coeffs p c d [:b, a:] =\n  map (nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs p c d [:b, a:] =\n    map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1]", "have \n      \"... = map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b) [0..<p + 1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (nth_default 0\n          (Bernstein_coeffs_01 p\n            ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p\n             [:0, d - c:])))\n     [0..<p + 1] =\n    map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1]", "proof (rule map_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "assume hx: \"x \\<in> set [0..<p + 1]\""], ["proof (state)\nthis:\n  x \\<in> set [0..<p + 1]\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "have \"nth_default 0 (Bernstein_coeffs_01 p\n            ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])) x =\n            nth_default 0 (Bernstein_coeffs_01 p\n            (smult (b + a*c) 1 + smult (a*(d - c)) (monom 1 1))) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0\n     (Bernstein_coeffs_01 p\n       ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n     x =\n    nth_default 0\n     (Bernstein_coeffs_01 p\n       (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n     x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nth_default 0\n     (Bernstein_coeffs_01 p\n       ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n     x =\n    nth_default 0\n     (Bernstein_coeffs_01 p\n       (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n     x", "have \"[:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n                  smult (b + a*c) 1 + smult (a*(d - c)) (monom 1 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n    smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)", "by (simp add: monom_altdef pcompose_pCons)"], ["proof (state)\nthis:\n  [:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n  smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)\n\ngoal (1 subgoal):\n 1. nth_default 0\n     (Bernstein_coeffs_01 p\n       ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n     x =\n    nth_default 0\n     (Bernstein_coeffs_01 p\n       (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n     x", "then"], ["proof (chain)\npicking this:\n  [:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n  smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  [:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:] =\n  smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)\n\ngoal (1 subgoal):\n 1. nth_default 0\n     (Bernstein_coeffs_01 p\n       ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n     x =\n    nth_default 0\n     (Bernstein_coeffs_01 p\n       (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n     x", "by auto"], ["proof (state)\nthis:\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n   x =\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n   x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n   x =\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n   x\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "also"], ["proof (state)\nthis:\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n   x =\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n   x\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "have \"... = \n          nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n          nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1))) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0\n     (Bernstein_coeffs_01 p\n       (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n     x =\n    nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n    nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n     x", "apply (subst Bernstein_coeffs_01_add)"], ["proof (prove)\ngoal (3 subgoals):\n 1. degree (smult (b + a * c) 1) \\<le> p\n 2. degree (smult (a * (d - c)) (monom 1 1)) \\<le> p\n 3. nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n    nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n     x =\n    nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n    nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n     x", "using hp"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (3 subgoals):\n 1. degree (smult (b + a * c) 1) \\<le> p\n 2. degree (smult (a * (d - c)) (monom 1 1)) \\<le> p\n 3. nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n    nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n     x =\n    nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n    nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n     x", "by (auto simp: degree_monom_eq)"], ["proof (state)\nthis:\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n   x =\n  nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n  nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1))) x\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "also"], ["proof (state)\nthis:\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     (smult (b + a * c) 1 + smult (a * (d - c)) (monom 1 1)))\n   x =\n  nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n  nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1))) x\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "have \"...  =\n            (b + a*c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n            (a*(d - c)) * nth_default 0 (Bernstein_coeffs_01 p (monom 1 1)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n    nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n     x =\n    (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n    a * (d - c) * nth_default 0 (Bernstein_coeffs_01 p (monom 1 1)) x", "apply (subst Bernstein_coeffs_01_smult)"], ["proof (prove)\ngoal (2 subgoals):\n 1. degree 1 \\<le> p\n 2. (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n    nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n     x =\n    (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n    a * (d - c) * nth_default 0 (Bernstein_coeffs_01 p (monom 1 1)) x", "using hp"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. degree 1 \\<le> p\n 2. (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n    nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n     x =\n    (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n    a * (d - c) * nth_default 0 (Bernstein_coeffs_01 p (monom 1 1)) x", "by (auto simp: Bernstein_coeffs_01_smult degree_monom_eq)"], ["proof (state)\nthis:\n  nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n  nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n   x =\n  (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n  a * (d - c) * nth_default 0 (Bernstein_coeffs_01 p (monom 1 1)) x\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "also"], ["proof (state)\nthis:\n  nth_default 0 (Bernstein_coeffs_01 p (smult (b + a * c) 1)) x +\n  nth_default 0 (Bernstein_coeffs_01 p (smult (a * (d - c)) (monom 1 1)))\n   x =\n  (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n  a * (d - c) * nth_default 0 (Bernstein_coeffs_01 p (monom 1 1)) x\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "have \"... =\n          (b + a * c) * (if x < p + 1 then 1 else 0) +\n           a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n    a * (d - c) * nth_default 0 (Bernstein_coeffs_01 p (monom 1 1)) x =\n    (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p)", "apply (subst Bernstein_coeffs_01_1, subst Bernstein_coeffs_01_x[OF hp])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (b + a * c) * nth_default 0 (replicate (p + 1) 1) x +\n    a * (d - c) *\n    nth_default 0 (map (\\<lambda>i. real i / real p) [0..<p + 1]) x =\n    (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p)", "apply (subst nth_default_replicate_eq, subst nth_default_map_eq[of _ 0])"], ["proof (prove)\ngoal (2 subgoals):\n 1. real 0 / real p = 0\n 2. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p) =\n    (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p)", "by auto"], ["proof (state)\nthis:\n  (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n  a * (d - c) * nth_default 0 (Bernstein_coeffs_01 p (monom 1 1)) x =\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p)\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "also"], ["proof (state)\nthis:\n  (b + a * c) * nth_default 0 (Bernstein_coeffs_01 p 1) x +\n  a * (d - c) * nth_default 0 (Bernstein_coeffs_01 p (monom 1 1)) x =\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p)\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "have \"... =\n              (b + a * c) * (if x < p + 1 then 1 else 0) +\n              a * (d - c) * (real ([0..<p + 1] ! x) / real p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p) =\n    (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real ([0..<p + 1] ! x) / real p)", "apply (subst nth_default_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x < length [0..<p + 1]\n 2. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real ([0..<p + 1] ! x) / real p) =\n    (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real ([0..<p + 1] ! x) / real p)", "using hx"], ["proof (prove)\nusing this:\n  x \\<in> set [0..<p + 1]\n\ngoal (2 subgoals):\n 1. x < length [0..<p + 1]\n 2. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real ([0..<p + 1] ! x) / real p) =\n    (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real ([0..<p + 1] ! x) / real p)", "by auto"], ["proof (state)\nthis:\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p) =\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real ([0..<p + 1] ! x) / real p)\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "also"], ["proof (state)\nthis:\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real (nth_default 0 [0..<p + 1] x) / real p) =\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real ([0..<p + 1] ! x) / real p)\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "have \"... = (b + a * c) * (if x < p + 1 then 1 else 0) +\n              a * (d - c) * (real (0 + x) / real p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real ([0..<p + 1] ! x) / real p) =\n    (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (0 + x) / real p)", "apply (subst nth_upt)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 + x < p + 1\n 2. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (0 + x) / real p) =\n    (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (0 + x) / real p)", "using hx"], ["proof (prove)\nusing this:\n  x \\<in> set [0..<p + 1]\n\ngoal (2 subgoals):\n 1. 0 + x < p + 1\n 2. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (0 + x) / real p) =\n    (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (0 + x) / real p)", "by auto"], ["proof (state)\nthis:\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real ([0..<p + 1] ! x) / real p) =\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real (0 + x) / real p)\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "also"], ["proof (state)\nthis:\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real ([0..<p + 1] ! x) / real p) =\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real (0 + x) / real p)\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "have \"... = a * (real x * d + real (p - x) * c) / real p + b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (0 + x) / real p) =\n    a * (real x * d + real (p - x) * c) / real p + b", "apply (subst of_nat_diff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<le> p\n 2. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (0 + x) / real p) =\n    a * (real x * d + (real p - real x) * c) / real p + b", "using hx hp"], ["proof (prove)\nusing this:\n  x \\<in> set [0..<p + 1]\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. x \\<le> p\n 2. (b + a * c) * (if x < p + 1 then 1 else 0) +\n    a * (d - c) * (real (0 + x) / real p) =\n    a * (real x * d + (real p - real x) * c) / real p + b", "by (auto simp: field_simps)"], ["proof (state)\nthis:\n  (b + a * c) * (if x < p + 1 then 1 else 0) +\n  a * (d - c) * (real (0 + x) / real p) =\n  a * (real x * d + real (p - x) * c) / real p + b\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n        x =\n       a * (real x * d + real (p - x) * c) / real p + b", "finally"], ["proof (chain)\npicking this:\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n   x =\n  a * (real x * d + real (p - x) * c) / real p + b", "show \"nth_default 0 (Bernstein_coeffs_01 p\n                    ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])) x =\n                    a * (real x * d + real (p - x) * c) / real p + b\""], ["proof (prove)\nusing this:\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n   x =\n  a * (real x * d + real (p - x) * c) / real p + b\n\ngoal (1 subgoal):\n 1. nth_default 0\n     (Bernstein_coeffs_01 p\n       ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n     x =\n    a * (real x * d + real (p - x) * c) / real p + b", "."], ["proof (state)\nthis:\n  nth_default 0\n   (Bernstein_coeffs_01 p\n     ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:]))\n   x =\n  a * (real x * d + real (p - x) * c) / real p + b\n\ngoal (1 subgoal):\n 1. [0..<p + 1] = [0..<p + 1]", "qed blast"], ["proof (state)\nthis:\n  map (nth_default 0\n        (Bernstein_coeffs_01 p\n          ([:b, a:] \\<circ>\\<^sub>p [:c, 1:] \\<circ>\\<^sub>p [:0, d - c:])))\n   [0..<p + 1] =\n  map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs p c d [:b, a:] =\n    map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1]", "finally"], ["proof (chain)\npicking this:\n  Bernstein_coeffs p c d [:b, a:] =\n  map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n   [0..<p + 1]", "show ?thesis"], ["proof (prove)\nusing this:\n  Bernstein_coeffs p c d [:b, a:] =\n  map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs p c d [:b, a:] =\n    map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1]", "."], ["proof (state)\nthis:\n  Bernstein_coeffs p c d [:b, a:] =\n  map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n   [0..<p + 1]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Bernstein_coeffs p c d [:b, a:] =\n  map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "have nth_default_geq:\"nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i \\<ge>\n           nth_default 0 (Bernstein_coeffs p c d P) i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "show \"nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i \\<ge>\n          nth_default 0 (Bernstein_coeffs p c d P) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n 2. \\<not> ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "define p1 where \"p1 \\<equiv> p+1\""], ["proof (state)\nthis:\n  p1 \\<equiv> p + 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n 2. \\<not> ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "assume h: \"i \\<le> p\""], ["proof (state)\nthis:\n  i \\<le> p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n 2. \\<not> ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "hence \"nth_default 0 (Bernstein_coeffs p c d P) i \\<le>\n             a * (((real i)*d + (real (p - i))*c)/p) + b\""], ["proof (prove)\nusing this:\n  i \\<le> p\n\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> a * ((real i * d + real (p - i) * c) / real p) + b", "by (rule hline)"], ["proof (state)\nthis:\n  nth_default 0 (Bernstein_coeffs p c d P) i\n  \\<le> a * ((real i * d + real (p - i) * c) / real p) + b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n 2. \\<not> ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "also"], ["proof (state)\nthis:\n  nth_default 0 (Bernstein_coeffs p c d P) i\n  \\<le> a * ((real i * d + real (p - i) * c) / real p) + b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n 2. \\<not> ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "have \"... = nth_default 0 (map (\\<lambda>i. a * (real i * d \n          + real (p - i) * c) / real p + b) [0..<p + 1]) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * ((real i * d + real (p - i) * c) / real p) + b =\n    nth_default 0\n     (map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n       [0..<p + 1])\n     i", "apply (subst p1_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. a * ((real i * d + real (p - i) * c) / real p) + b =\n    nth_default 0\n     (map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n       [0..<p1])\n     i", "using h"], ["proof (prove)\nusing this:\n  i \\<le> p\n\ngoal (1 subgoal):\n 1. a * ((real i * d + real (p - i) * c) / real p) + b =\n    nth_default 0\n     (map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n       [0..<p1])\n     i", "apply (auto simp: nth_default_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> p; \\<not> i < p1\\<rbrakk>\n    \\<Longrightarrow> a * (real i * d + real (p - i) * c) / real p + b = 0", "by (auto simp: p1_def)"], ["proof (state)\nthis:\n  a * ((real i * d + real (p - i) * c) / real p) + b =\n  nth_default 0\n   (map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1])\n   i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n 2. \\<not> ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "also"], ["proof (state)\nthis:\n  a * ((real i * d + real (p - i) * c) / real p) + b =\n  nth_default 0\n   (map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1])\n   i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n 2. \\<not> ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "have \"... = nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0\n     (map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n       [0..<p + 1])\n     i =\n    nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "using bern_eq"], ["proof (prove)\nusing this:\n  Bernstein_coeffs p c d [:b, a:] =\n  map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. nth_default 0\n     (map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n       [0..<p + 1])\n     i =\n    nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "by simp"], ["proof (state)\nthis:\n  nth_default 0\n   (map (\\<lambda>i. a * (real i * d + real (p - i) * c) / real p + b)\n     [0..<p + 1])\n   i =\n  nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n 2. \\<not> ?P \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "finally"], ["proof (chain)\npicking this:\n  nth_default 0 (Bernstein_coeffs p c d P) i\n  \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "show ?thesis"], ["proof (prove)\nusing this:\n  nth_default 0 (Bernstein_coeffs p c d P) i\n  \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "."], ["proof (state)\nthis:\n  nth_default 0 (Bernstein_coeffs p c d P) i\n  \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> p \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i \\<le> p \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "assume h: \"\\<not>i \\<le> p\""], ["proof (state)\nthis:\n  \\<not> i \\<le> p\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> p \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> i \\<le> p\n\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "using assms"], ["proof (prove)\nusing this:\n  \\<not> i \\<le> p\n  ?i \\<le> p \\<Longrightarrow>\n  nth_default 0 (Bernstein_coeffs p c d P) ?i\n  \\<le> a * ((real ?i * d + real (p - ?i) * c) / real p) + b\n  p \\<noteq> 0\n  c \\<noteq> d\n  degree P \\<le> p\n\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs p c d P) i\n    \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i", "by (auto simp: nth_default_def Bernstein_coeffs_eq_rescale\n                        length_Bernstein_coeffs_01)"], ["proof (state)\nthis:\n  nth_default 0 (Bernstein_coeffs p c d P) i\n  \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nth_default 0 (Bernstein_coeffs p c d P) i\n  \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nth_default 0 (Bernstein_coeffs p c d P) ?i\n  \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) ?i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "have \"poly P x = (\\<Sum>k = 0..p.\n        poly (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n        (Bernstein_Poly k p c d)) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly P x =\n    (\\<Sum>k = 0..p.\n        poly\n         (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n           (Bernstein_Poly k p c d))\n         x)", "apply (subst Bernstein_coeffs_sum[OF hcd hP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly\n     (\\<Sum>j = 0..p.\n         smult (nth_default 0 (Bernstein_coeffs p c d P) j)\n          (Bernstein_Poly j p c d))\n     x =\n    (\\<Sum>k = 0..p.\n        poly\n         (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n           (Bernstein_Poly k p c d))\n         x)", "by (rule poly_sum)"], ["proof (state)\nthis:\n  poly P x =\n  (\\<Sum>k = 0..p.\n      poly\n       (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n         (Bernstein_Poly k p c d))\n       x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "also"], ["proof (state)\nthis:\n  poly P x =\n  (\\<Sum>k = 0..p.\n      poly\n       (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n         (Bernstein_Poly k p c d))\n       x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "have \"... \\<le> (\\<Sum>k = 0..p.\n      poly (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n        (Bernstein_Poly k p c d)) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..p.\n        poly\n         (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n           (Bernstein_Poly k p c d))\n         x)\n    \\<le> (\\<Sum>k = 0..p.\n              poly\n               (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n                 (Bernstein_Poly k p c d))\n               x)", "apply (rule sum_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<in> {0..p} \\<Longrightarrow>\n       poly\n        (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n          (Bernstein_Poly k p c d))\n        x\n       \\<le> poly\n              (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n                (Bernstein_Poly k p c d))\n              x", "using mult_right_mono[OF nth_default_geq] Bernstein_Poly_nonneg[OF hc hd]"], ["proof (prove)\nusing this:\n  0 \\<le> ?c \\<Longrightarrow>\n  nth_default 0 (Bernstein_coeffs p c d P) ?i1 * ?c\n  \\<le> nth_default 0 (Bernstein_coeffs p c d [:b, a:]) ?i1 * ?c\n  0 \\<le> poly (Bernstein_Poly ?j ?p c d) x\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<in> {0..p} \\<Longrightarrow>\n       poly\n        (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n          (Bernstein_Poly k p c d))\n        x\n       \\<le> poly\n              (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n                (Bernstein_Poly k p c d))\n              x", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..p.\n      poly\n       (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n         (Bernstein_Poly k p c d))\n       x)\n  \\<le> (\\<Sum>k = 0..p.\n            poly\n             (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n               (Bernstein_Poly k p c d))\n             x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..p.\n      poly\n       (smult (nth_default 0 (Bernstein_coeffs p c d P) k)\n         (Bernstein_Poly k p c d))\n       x)\n  \\<le> (\\<Sum>k = 0..p.\n            poly\n             (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n               (Bernstein_Poly k p c d))\n             x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "have \"... = poly [:b, a:] x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..p.\n        poly\n         (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n           (Bernstein_Poly k p c d))\n         x) =\n    poly [:b, a:] x", "apply (subst(2) Bernstein_coeffs_sum[of c d \"[:b, a:]\" p])"], ["proof (prove)\ngoal (3 subgoals):\n 1. c \\<noteq> d\n 2. degree [:b, a:] \\<le> p\n 3. (\\<Sum>k = 0..p.\n        poly\n         (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n           (Bernstein_Poly k p c d))\n         x) =\n    poly\n     (\\<Sum>j = 0..p.\n         smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) j)\n          (Bernstein_Poly j p c d))\n     x", "using assms"], ["proof (prove)\nusing this:\n  ?i \\<le> p \\<Longrightarrow>\n  nth_default 0 (Bernstein_coeffs p c d P) ?i\n  \\<le> a * ((real ?i * d + real (p - ?i) * c) / real p) + b\n  p \\<noteq> 0\n  c \\<noteq> d\n  degree P \\<le> p\n\ngoal (3 subgoals):\n 1. c \\<noteq> d\n 2. degree [:b, a:] \\<le> p\n 3. (\\<Sum>k = 0..p.\n        poly\n         (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n           (Bernstein_Poly k p c d))\n         x) =\n    poly\n     (\\<Sum>j = 0..p.\n         smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) j)\n          (Bernstein_Poly j p c d))\n     x", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..p.\n        poly\n         (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n           (Bernstein_Poly k p c d))\n         x) =\n    poly\n     (\\<Sum>j = 0..p.\n         smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) j)\n          (Bernstein_Poly j p c d))\n     x", "by (rule poly_sum[symmetric])"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..p.\n      poly\n       (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n         (Bernstein_Poly k p c d))\n       x) =\n  poly [:b, a:] x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..p.\n      poly\n       (smult (nth_default 0 (Bernstein_coeffs p c d [:b, a:]) k)\n         (Bernstein_Poly k p c d))\n       x) =\n  poly [:b, a:] x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "have \"... = a*x + b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly [:b, a:] x = a * x + b", "by force"], ["proof (state)\nthis:\n  poly [:b, a:] x = a * x + b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<le> x; x \\<le> d\\<rbrakk>\n       \\<Longrightarrow> poly P x \\<le> a * x + b", "finally"], ["proof (chain)\npicking this:\n  poly P x \\<le> a * x + b", "show \"poly P x \\<le> a*x + b\""], ["proof (prove)\nusing this:\n  poly P x \\<le> a * x + b\n\ngoal (1 subgoal):\n 1. poly P x \\<le> a * x + b", "."], ["proof (state)\nthis:\n  poly P x \\<le> a * x + b\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}