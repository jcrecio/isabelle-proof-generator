{"file_name": "/home/qj213/afp-2021-10-22/thys/Three_Circles/Bernstein_01.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Three_Circles", "problem_names": ["lemma degree_Bernstein: \n  assumes hb: \"j \\<le> p\" \n  shows \"degree (Bernstein_Poly_01 j p) = p\"", "lemma coeff_gt: \n  assumes hb: \"j > p\" \n  shows \"Bernstein_Poly_01 j p = 0\"", "lemma degree_Bernstein_le: \"degree (Bernstein_Poly_01 j p) \\<le> p\"", "lemma poly_Bernstein_nonneg: \n  assumes \"x \\<ge> 0\" and \"1 \\<ge> x\" \n  shows \"poly (Bernstein_Poly_01 j p) x \\<ge> 0\"", "lemma Bernstein_symmetry: \n  assumes \"j \\<le> p\"\n  shows \"(Bernstein_Poly_01 j p) \\<circ>\\<^sub>p [:1, -1:] = Bernstein_Poly_01 (p-j) p\"", "lemma Bernstein_reciprocal: \n  \"reciprocal_poly p (Bernstein_Poly_01 i p) \n    = smult (p choose i) ([:-1, 1:]^(p-i))\"", "lemma Bernstein_reciprocal_translate: \n  \"reciprocal_poly p (Bernstein_Poly_01 i p) \\<circ>\\<^sub>p [:1, 1:] = \n   monom (p choose i) (p - i)\"", "lemma coeff_Bernstein_sum_01: fixes b::\"nat \\<Rightarrow> real\" assumes hi: \"p \\<ge> i\"\n  shows \n    \"coeff (reciprocal_poly p \n            (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p [:1, 1:]) \n      (p - i) = (p choose i) * (b i)\" (is \"?L = ?R\")", "lemma Bernstein_sum_01: assumes hP: \"degree P \\<le> p\"\n  shows \n  \"P = (\\<Sum>j = 0..p. smult \n     (inverse (real (p choose j)) * \n      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j))\n   (Bernstein_Poly_01 j p))\"", "lemma Bernstein_Poly_01_span1: \n  assumes hP: \"degree P \\<le> p\"\n  shows \"P \\<in> poly_vs.span {Bernstein_Poly_01 x p | x. x \\<le> p}\"", "lemma Bernstein_Poly_01_span:\n  \"poly_vs.span {Bernstein_Poly_01 x p | x. x \\<le> p} \n      = {x. degree x \\<le> p}\"", "lemma length_Bernstein_coeffs_01: \"length (Bernstein_coeffs_01 p P) = p + 1\"", "lemma nth_default_Bernstein_coeffs_01: assumes \"degree P \\<le> p\"\n  shows \"nth_default 0 (Bernstein_coeffs_01 p P) i = \n         inverse (p choose i) * coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-i)\"", "lemma Bernstein_coeffs_01_sum: assumes \"degree P \\<le> p\"\n  shows \"P = (\\<Sum>j = 0..p. smult (nth_default 0 (Bernstein_coeffs_01 p P) j) \n             (Bernstein_Poly_01 j p))\"", "lemma Bernstein_changes_01_def': \n  \"Bernstein_changes_01 p P = nat (changes [(inverse (real (p choose j)) * \n     coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j)). j \\<leftarrow> [0..<p + 1]])\"", "lemma Bernstein_changes_01_eq_changes: \n  assumes hP: \"degree P \\<le> p\"\n  shows \"Bernstein_changes_01 p P = \n         changes (coeffs ((reciprocal_poly p P) \\<circ>\\<^sub>p [:1, 1:]))\"", "lemma Bernstein_changes_01_test: fixes P::\"real poly\"\n  assumes hP: \"degree P \\<le> p\" and h0: \"P \\<noteq> 0\"\n  shows \"proots_count P {x. 0 < x \\<and> x < 1} \\<le> Bernstein_changes_01 p P \\<and>\n        even (Bernstein_changes_01 p P - proots_count P {x. 0 < x \\<and> x < 1})\"", "lemma Bernstein_coeffs_01_0: \"Bernstein_coeffs_01 p 0 = replicate (p+1) 0\"", "lemma Bernstein_coeffs_01_1: \"Bernstein_coeffs_01 p 1 = replicate (p+1) 1\"", "lemma Bernstein_coeffs_01_x: assumes \"p \\<noteq> 0\"\n  shows \"Bernstein_coeffs_01 p (monom 1 1) = [i/p. i \\<leftarrow> [0..<(p+1)]]\"", "lemma Bernstein_coeffs_01_add: \n  assumes \"degree P \\<le> p\" and \"degree Q \\<le> p\"\n  shows \"nth_default 0 (Bernstein_coeffs_01 p (P + Q)) i = \n    nth_default 0 (Bernstein_coeffs_01 p P) i +\n    nth_default 0 (Bernstein_coeffs_01 p Q) i\"", "lemma Bernstein_coeffs_01_smult: \n  assumes \"degree P \\<le> p\"\n  shows \"nth_default 0 (Bernstein_coeffs_01 p (smult a P)) i =\n          a * nth_default 0 (Bernstein_coeffs_01 p P) i\""], "translations": [["", "lemma degree_Bernstein: \n  assumes hb: \"j \\<le> p\" \n  shows \"degree (Bernstein_Poly_01 j p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (Bernstein_Poly_01 j p) = p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. degree (Bernstein_Poly_01 j p) = p", "have ha: \"monom (p choose j) j \\<noteq> (0::real poly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (real (p choose j)) j \\<noteq> 0", "using hb"], ["proof (prove)\nusing this:\n  j \\<le> p\n\ngoal (1 subgoal):\n 1. monom (real (p choose j)) j \\<noteq> 0", "by force"], ["proof (state)\nthis:\n  monom (real (p choose j)) j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree (Bernstein_Poly_01 j p) = p", "have hb: \"monom 1 (p-j) \\<circ>\\<^sub>p [:1, -1:] \\<noteq> (0::real poly)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] = 0 \\<Longrightarrow> False", "assume \"monom 1 (p-j) \\<circ>\\<^sub>p [:1, -1:] = (0::real poly)\""], ["proof (state)\nthis:\n  monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] = 0\n\ngoal (1 subgoal):\n 1. monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] = 0 \\<Longrightarrow> False", "hence \"lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, -1:]) = (0::real)\""], ["proof (prove)\nusing this:\n  monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] = 0\n\ngoal (1 subgoal):\n 1. lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) = 0", "apply (subst leading_coeff_0_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] = 0 \\<Longrightarrow>\n    monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] = 0", "by simp"], ["proof (state)\nthis:\n  lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) = 0\n\ngoal (1 subgoal):\n 1. monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] = 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) = 0\n\ngoal (1 subgoal):\n 1. monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] = 0 \\<Longrightarrow> False", "have \"lead_coeff (monom (1::real) (p - j) \n        \\<circ>\\<^sub>p [:1, -1:]) = (((- 1) ^ (p - j))::real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) =\n    (- 1) ^ (p - j)", "by (subst lead_coeff_comp, auto simp: degree_monom_eq)"], ["proof (state)\nthis:\n  lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) = (- 1) ^ (p - j)\n\ngoal (1 subgoal):\n 1. monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] = 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) = 0\n  lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) = (- 1) ^ (p - j)", "show \"False\""], ["proof (prove)\nusing this:\n  lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) = 0\n  lead_coeff (monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) = (- 1) ^ (p - j)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree (Bernstein_Poly_01 j p) = p", "from ha hb"], ["proof (chain)\npicking this:\n  monom (real (p choose j)) j \\<noteq> 0\n  monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  monom (real (p choose j)) j \\<noteq> 0\n  monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:] \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree (Bernstein_Poly_01 j p) = p", "by (auto simp add: Bernstein_Poly_01_def degree_mult_eq \n          degree_monom_eq degree_pcompose)"], ["proof (state)\nthis:\n  degree (Bernstein_Poly_01 j p) = p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coeff_gt: \n  assumes hb: \"j > p\" \n  shows \"Bernstein_Poly_01 j p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p = 0", "by (simp add: hb Bernstein_Poly_01_def)"], ["", "lemma degree_Bernstein_le: \"degree (Bernstein_Poly_01 j p) \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (Bernstein_Poly_01 j p) \\<le> p", "apply (cases \"j \\<le> p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. j \\<le> p \\<Longrightarrow> degree (Bernstein_Poly_01 j p) \\<le> p\n 2. \\<not> j \\<le> p \\<Longrightarrow>\n    degree (Bernstein_Poly_01 j p) \\<le> p", "by (simp_all add: degree_Bernstein coeff_gt)"], ["", "lemma poly_Bernstein_nonneg: \n  assumes \"x \\<ge> 0\" and \"1 \\<ge> x\" \n  shows \"poly (Bernstein_Poly_01 j p) x \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> poly (Bernstein_Poly_01 j p) x", "using assms"], ["proof (prove)\nusing this:\n  0 \\<le> x\n  x \\<le> 1\n\ngoal (1 subgoal):\n 1. 0 \\<le> poly (Bernstein_Poly_01 j p) x", "by (simp add: poly_monom poly_pcompose Bernstein_Poly_01_def)"], ["", "lemma Bernstein_symmetry: \n  assumes \"j \\<le> p\"\n  shows \"(Bernstein_Poly_01 j p) \\<circ>\\<^sub>p [:1, -1:] = Bernstein_Poly_01 (p-j) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "have \"(Bernstein_Poly_01 j p) \\<circ>\\<^sub>p [:1, -1:]\n         = ((monom (p choose j) j) * (monom 1 (p-j) \\<circ>\\<^sub>p [:1, -1:])) \\<circ>\\<^sub>p [:1, -1:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    (monom (real (p choose j)) j *\n     monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n    [:1, - 1:]", "by (simp add: Bernstein_Poly_01_def)"], ["proof (state)\nthis:\n  Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n  (monom (real (p choose j)) j *\n   monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n  [:1, - 1:]\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "also"], ["proof (state)\nthis:\n  Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n  (monom (real (p choose j)) j *\n   monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n  [:1, - 1:]\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "have \"... = (monom (p choose (p-j)) j * \n                    (monom 1 (p-j) \\<circ>\\<^sub>p [:1, -1:])) \\<circ>\\<^sub>p [:1, -1:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom (real (p choose j)) j *\n     monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n    [:1, - 1:] =\n    (monom (real (p choose (p - j))) j *\n     monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n    [:1, - 1:]", "by (fastforce simp: binomial_symmetric[OF assms])"], ["proof (state)\nthis:\n  (monom (real (p choose j)) j *\n   monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n  [:1, - 1:] =\n  (monom (real (p choose (p - j))) j *\n   monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n  [:1, - 1:]\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "also"], ["proof (state)\nthis:\n  (monom (real (p choose j)) j *\n   monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n  [:1, - 1:] =\n  (monom (real (p choose (p - j))) j *\n   monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n  [:1, - 1:]\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "have \"... = monom (p choose (p-j)) j \\<circ>\\<^sub>p [:1, -1:] * \n                   (monom 1 (p-j)) \\<circ>\\<^sub>p ([:1, -1:] \\<circ>\\<^sub>p [:1, -1:])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (monom (real (p choose (p - j))) j *\n     monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n    [:1, - 1:] =\n    monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom 1 (p - j) \\<circ>\\<^sub>p ([:1, - 1:] \\<circ>\\<^sub>p [:1, - 1:])", "by (force simp: pcompose_mult pcompose_assoc)"], ["proof (state)\nthis:\n  (monom (real (p choose (p - j))) j *\n   monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n  [:1, - 1:] =\n  monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom 1 (p - j) \\<circ>\\<^sub>p ([:1, - 1:] \\<circ>\\<^sub>p [:1, - 1:])\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "also"], ["proof (state)\nthis:\n  (monom (real (p choose (p - j))) j *\n   monom 1 (p - j) \\<circ>\\<^sub>p [:1, - 1:]) \\<circ>\\<^sub>p\n  [:1, - 1:] =\n  monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom 1 (p - j) \\<circ>\\<^sub>p ([:1, - 1:] \\<circ>\\<^sub>p [:1, - 1:])\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "have \"... = (monom (p choose (p-j)) j \\<circ>\\<^sub>p [:1, -1:]) * monom 1 (p-j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom 1 (p - j) \\<circ>\\<^sub>p\n    ([:1, - 1:] \\<circ>\\<^sub>p [:1, - 1:]) =\n    monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom 1 (p - j)", "by (force simp: pcompose_pCons)"], ["proof (state)\nthis:\n  monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom 1 (p - j) \\<circ>\\<^sub>p ([:1, - 1:] \\<circ>\\<^sub>p [:1, - 1:]) =\n  monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom 1 (p - j)\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "also"], ["proof (state)\nthis:\n  monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom 1 (p - j) \\<circ>\\<^sub>p ([:1, - 1:] \\<circ>\\<^sub>p [:1, - 1:]) =\n  monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom 1 (p - j)\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "have \"... = smult (p choose (p-j)) (monom 1 j \\<circ>\\<^sub>p [:1, -1:]) \n                    * monom 1 (p-j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom 1 (p - j) =\n    smult (real (p choose (p - j))) (monom 1 j \\<circ>\\<^sub>p [:1, - 1:]) *\n    monom 1 (p - j)", "by (simp add: assms smult_monom pcompose_smult[symmetric])"], ["proof (state)\nthis:\n  monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom 1 (p - j) =\n  smult (real (p choose (p - j))) (monom 1 j \\<circ>\\<^sub>p [:1, - 1:]) *\n  monom 1 (p - j)\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "also"], ["proof (state)\nthis:\n  monom (real (p choose (p - j))) j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom 1 (p - j) =\n  smult (real (p choose (p - j))) (monom 1 j \\<circ>\\<^sub>p [:1, - 1:]) *\n  monom 1 (p - j)\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "have \"... = (monom 1 j \\<circ>\\<^sub>p [:1, -1:]) * monom (p choose (p-j)) (p-j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose (p - j))) (monom 1 j \\<circ>\\<^sub>p [:1, - 1:]) *\n    monom 1 (p - j) =\n    monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom (real (p choose (p - j))) (p - j)", "apply (subst mult_smult_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (real (p choose (p - j)))\n     (monom 1 j \\<circ>\\<^sub>p [:1, - 1:] * monom 1 (p - j)) =\n    monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom (real (p choose (p - j))) (p - j)", "apply (subst mult_smult_right[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n    smult (real (p choose (p - j))) (monom 1 (p - j)) =\n    monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom (real (p choose (p - j))) (p - j)", "apply (subst smult_monom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom (real (p choose (p - j)) * 1) (p - j) =\n    monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom (real (p choose (p - j))) (p - j)", "by force"], ["proof (state)\nthis:\n  smult (real (p choose (p - j))) (monom 1 j \\<circ>\\<^sub>p [:1, - 1:]) *\n  monom 1 (p - j) =\n  monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom (real (p choose (p - j))) (p - j)\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "also"], ["proof (state)\nthis:\n  smult (real (p choose (p - j))) (monom 1 j \\<circ>\\<^sub>p [:1, - 1:]) *\n  monom 1 (p - j) =\n  monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom (real (p choose (p - j))) (p - j)\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "have \"... = Bernstein_Poly_01 (p-j) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom (real (p choose (p - j))) (p - j) =\n    Bernstein_Poly_01 (p - j) p", "using assms"], ["proof (prove)\nusing this:\n  j \\<le> p\n\ngoal (1 subgoal):\n 1. monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n    monom (real (p choose (p - j))) (p - j) =\n    Bernstein_Poly_01 (p - j) p", "by (auto simp: Bernstein_Poly_01_def)"], ["proof (state)\nthis:\n  monom 1 j \\<circ>\\<^sub>p [:1, - 1:] *\n  monom (real (p choose (p - j))) (p - j) =\n  Bernstein_Poly_01 (p - j) p\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "finally"], ["proof (chain)\npicking this:\n  Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n  Bernstein_Poly_01 (p - j) p", "show ?thesis"], ["proof (prove)\nusing this:\n  Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n  Bernstein_Poly_01 (p - j) p\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n    Bernstein_Poly_01 (p - j) p", "."], ["proof (state)\nthis:\n  Bernstein_Poly_01 j p \\<circ>\\<^sub>p [:1, - 1:] =\n  Bernstein_Poly_01 (p - j) p\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>@{term Bernstein_Poly_01} and @{term reciprocal_poly}\\<close>"], ["", "lemma Bernstein_reciprocal: \n  \"reciprocal_poly p (Bernstein_Poly_01 i p) \n    = smult (p choose i) ([:-1, 1:]^(p-i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n 2. \\<not> ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "assume \"i \\<le> p\""], ["proof (state)\nthis:\n  i \\<le> p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n 2. \\<not> ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "hence \"reciprocal_poly p (Bernstein_Poly_01 i p) = \n         reciprocal_poly (degree (Bernstein_Poly_01 i p)) (Bernstein_Poly_01 i p)\""], ["proof (prove)\nusing this:\n  i \\<le> p\n\ngoal (1 subgoal):\n 1. reciprocal_poly p (Bernstein_Poly_01 i p) =\n    reciprocal_poly (degree (Bernstein_Poly_01 i p)) (Bernstein_Poly_01 i p)", "by (auto simp: degree_Bernstein)"], ["proof (state)\nthis:\n  reciprocal_poly p (Bernstein_Poly_01 i p) =\n  reciprocal_poly (degree (Bernstein_Poly_01 i p)) (Bernstein_Poly_01 i p)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n 2. \\<not> ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "also"], ["proof (state)\nthis:\n  reciprocal_poly p (Bernstein_Poly_01 i p) =\n  reciprocal_poly (degree (Bernstein_Poly_01 i p)) (Bernstein_Poly_01 i p)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n 2. \\<not> ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "have \"... = reflect_poly (Bernstein_Poly_01 i p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reciprocal_poly (degree (Bernstein_Poly_01 i p))\n     (Bernstein_Poly_01 i p) =\n    reflect_poly (Bernstein_Poly_01 i p)", "by (rule reciprocal_degree)"], ["proof (state)\nthis:\n  reciprocal_poly (degree (Bernstein_Poly_01 i p)) (Bernstein_Poly_01 i p) =\n  reflect_poly (Bernstein_Poly_01 i p)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n 2. \\<not> ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "also"], ["proof (state)\nthis:\n  reciprocal_poly (degree (Bernstein_Poly_01 i p)) (Bernstein_Poly_01 i p) =\n  reflect_poly (Bernstein_Poly_01 i p)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n 2. \\<not> ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "have \"... = smult (p choose i) ([:-1, 1:]^(p-i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflect_poly (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "by (auto simp: Bernstein_Poly_01_def reflect_poly_simps monom_altdef\n         pcompose_pCons reflect_poly_pCons' hom_distribs)"], ["proof (state)\nthis:\n  reflect_poly (Bernstein_Poly_01 i p) =\n  smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n 2. \\<not> ?P \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "finally"], ["proof (chain)\npicking this:\n  reciprocal_poly p (Bernstein_Poly_01 i p) =\n  smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "show ?thesis"], ["proof (prove)\nusing this:\n  reciprocal_poly p (Bernstein_Poly_01 i p) =\n  smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n\ngoal (1 subgoal):\n 1. reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "."], ["proof (state)\nthis:\n  reciprocal_poly p (Bernstein_Poly_01 i p) =\n  smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> p \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i \\<le> p \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "assume h:\"\\<not> i \\<le> p\""], ["proof (state)\nthis:\n  \\<not> i \\<le> p\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> p \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "hence \"reciprocal_poly p (Bernstein_Poly_01 i p) = (0::real poly)\""], ["proof (prove)\nusing this:\n  \\<not> i \\<le> p\n\ngoal (1 subgoal):\n 1. reciprocal_poly p (Bernstein_Poly_01 i p) = 0", "by (auto simp: coeff_gt reciprocal_poly_def)"], ["proof (state)\nthis:\n  reciprocal_poly p (Bernstein_Poly_01 i p) = 0\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> p \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "also"], ["proof (state)\nthis:\n  reciprocal_poly p (Bernstein_Poly_01 i p) = 0\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> p \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "have \"... = smult (p choose i) ([:-1, 1:]^(p - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "using h"], ["proof (prove)\nusing this:\n  \\<not> i \\<le> p\n\ngoal (1 subgoal):\n 1. 0 = smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "by fastforce"], ["proof (state)\nthis:\n  0 = smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> p \\<Longrightarrow>\n    reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "finally"], ["proof (chain)\npicking this:\n  reciprocal_poly p (Bernstein_Poly_01 i p) =\n  smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "show ?thesis"], ["proof (prove)\nusing this:\n  reciprocal_poly p (Bernstein_Poly_01 i p) =\n  smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n\ngoal (1 subgoal):\n 1. reciprocal_poly p (Bernstein_Poly_01 i p) =\n    smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))", "."], ["proof (state)\nthis:\n  reciprocal_poly p (Bernstein_Poly_01 i p) =\n  smult (real (p choose i)) ([:- 1, 1:] ^ (p - i))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_reciprocal_translate: \n  \"reciprocal_poly p (Bernstein_Poly_01 i p) \\<circ>\\<^sub>p [:1, 1:] = \n   monom (p choose i) (p - i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reciprocal_poly p (Bernstein_Poly_01 i p) \\<circ>\\<^sub>p [:1, 1:] =\n    monom (real (p choose i)) (p - i)", "by (auto simp: Bernstein_reciprocal pcompose_smult pcompose_pCons monom_altdef hom_distribs)"], ["", "lemma coeff_Bernstein_sum_01: fixes b::\"nat \\<Rightarrow> real\" assumes hi: \"p \\<ge> i\"\n  shows \n    \"coeff (reciprocal_poly p \n            (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p [:1, 1:]) \n      (p - i) = (p choose i) * (b i)\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "define P where \"P \\<equiv> (\\<Sum>x = 0..p. (smult (b x) (Bernstein_Poly_01 x p)))\""], ["proof (state)\nthis:\n  P \\<equiv> \\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "have \"\\<And>x. degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p", "show \"degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p", "apply (cases \"x \\<le> p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<le> p \\<Longrightarrow>\n    degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p\n 2. \\<not> x \\<le> p \\<Longrightarrow>\n    degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p", "by (auto simp: degree_Bernstein coeff_gt)"], ["proof (state)\nthis:\n  degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree (smult (b ?x) (Bernstein_Poly_01 ?x p)) \\<le> p\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "hence \"reciprocal_poly p P = \n         (\\<Sum>x = 0..p. reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)))\""], ["proof (prove)\nusing this:\n  degree (smult (b ?x) (Bernstein_Poly_01 ?x p)) \\<le> p\n\ngoal (1 subgoal):\n 1. reciprocal_poly p P =\n    (\\<Sum>x = 0..p.\n        reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)))", "apply (subst P_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        degree (smult (b x) (Bernstein_Poly_01 x p))\n        \\<le> p) \\<Longrightarrow>\n    reciprocal_poly p\n     (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) =\n    (\\<Sum>x = 0..p.\n        reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)))", "apply (rule reciprocal_sum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<And>x.\n           degree (smult (b x) (Bernstein_Poly_01 x p))\n           \\<le> p) \\<Longrightarrow>\n       degree (smult (b x) (Bernstein_Poly_01 x p)) \\<le> p", "by presburger"], ["proof (state)\nthis:\n  reciprocal_poly p P =\n  (\\<Sum>x = 0..p. reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)))\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "also"], ["proof (state)\nthis:\n  reciprocal_poly p P =\n  (\\<Sum>x = 0..p. reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)))\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "have\n    \"... = (\\<Sum>x = 0..p. (smult (b x * (p choose x)) ([:-1, 1:]^(p-x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x = 0..p.\n        reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p))) =\n    (\\<Sum>x = 0..p. smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)))", "proof (rule sum.cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)) =\n       smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)) =\n       smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x))", "assume \"x \\<in> {0..p}\""], ["proof (state)\nthis:\n  x \\<in> {0..p}\n\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)) =\n       smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x))", "hence \"x \\<le> p\""], ["proof (prove)\nusing this:\n  x \\<in> {0..p}\n\ngoal (1 subgoal):\n 1. x \\<le> p", "by simp"], ["proof (state)\nthis:\n  x \\<le> p\n\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)) =\n       smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x))", "thus \"reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)) =\n          smult ((b x) * (p choose x)) ([:-1, 1:]^(p-x))\""], ["proof (prove)\nusing this:\n  x \\<le> p\n\ngoal (1 subgoal):\n 1. reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)) =\n    smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x))", "by (auto simp add: reciprocal_smult degree_Bernstein Bernstein_reciprocal)"], ["proof (state)\nthis:\n  reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p)) =\n  smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x))\n\ngoal (1 subgoal):\n 1. {0..p} = {0..p}", "qed (simp)"], ["proof (state)\nthis:\n  (\\<Sum>x = 0..p.\n      reciprocal_poly p (smult (b x) (Bernstein_Poly_01 x p))) =\n  (\\<Sum>x = 0..p. smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)))\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "finally"], ["proof (chain)\npicking this:\n  reciprocal_poly p P =\n  (\\<Sum>x = 0..p. smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)))", "have \n    \"reciprocal_poly p P = \n     (\\<Sum>x = 0..p. (smult ((b x) * (p choose x)) ([:-1, 1:]^(p-x))))\""], ["proof (prove)\nusing this:\n  reciprocal_poly p P =\n  (\\<Sum>x = 0..p. smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)))\n\ngoal (1 subgoal):\n 1. reciprocal_poly p P =\n    (\\<Sum>x = 0..p. smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)))", "."], ["proof (state)\nthis:\n  reciprocal_poly p P =\n  (\\<Sum>x = 0..p. smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)))\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "hence \n    \"(reciprocal_poly p P) \\<circ>\\<^sub>p [:1, 1:] = \n     (\\<Sum>x = 0..p. (smult ((b x) * (p choose x)) ([:-1, 1:]^(p-x))) \\<circ>\\<^sub>p [:1, 1:])\""], ["proof (prove)\nusing this:\n  reciprocal_poly p P =\n  (\\<Sum>x = 0..p. smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)))\n\ngoal (1 subgoal):\n 1. reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n    (\\<Sum>x = 0..p.\n        smult (b x * real (p choose x))\n         ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n        [:1, 1:])", "by (simp add: pcompose_sum pcompose_add)"], ["proof (state)\nthis:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n  (\\<Sum>x = 0..p.\n      smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n      [:1, 1:])\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "also"], ["proof (state)\nthis:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n  (\\<Sum>x = 0..p.\n      smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n      [:1, 1:])\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "have \"... = (\\<Sum>x = 0..p. (monom ((b x) * (p choose x)) (p - x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x = 0..p.\n        smult (b x * real (p choose x))\n         ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n        [:1, 1:]) =\n    (\\<Sum>x = 0..p. monom (b x * real (p choose x)) (p - x))", "proof (rule sum.cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       smult (b x * real (p choose x))\n        ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n       [:1, 1:] =\n       monom (b x * real (p choose x)) (p - x)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       smult (b x * real (p choose x))\n        ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n       [:1, 1:] =\n       monom (b x * real (p choose x)) (p - x)", "assume \"x \\<in> {0..p}\""], ["proof (state)\nthis:\n  x \\<in> {0..p}\n\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       smult (b x * real (p choose x))\n        ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n       [:1, 1:] =\n       monom (b x * real (p choose x)) (p - x)", "hence \"x \\<le> p\""], ["proof (prove)\nusing this:\n  x \\<in> {0..p}\n\ngoal (1 subgoal):\n 1. x \\<le> p", "by simp"], ["proof (state)\nthis:\n  x \\<le> p\n\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       smult (b x * real (p choose x))\n        ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n       [:1, 1:] =\n       monom (b x * real (p choose x)) (p - x)", "thus \"smult (b x * (p choose x)) ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p [:1, 1:] =\n          monom (b x * (p choose x)) (p - x)\""], ["proof (prove)\nusing this:\n  x \\<le> p\n\ngoal (1 subgoal):\n 1. smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n    [:1, 1:] =\n    monom (b x * real (p choose x)) (p - x)", "by (simp add: hom_distribs pcompose_smult pcompose_pCons monom_altdef)"], ["proof (state)\nthis:\n  smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n  [:1, 1:] =\n  monom (b x * real (p choose x)) (p - x)\n\ngoal (1 subgoal):\n 1. {0..p} = {0..p}", "qed (simp)"], ["proof (state)\nthis:\n  (\\<Sum>x = 0..p.\n      smult (b x * real (p choose x)) ([:- 1, 1:] ^ (p - x)) \\<circ>\\<^sub>p\n      [:1, 1:]) =\n  (\\<Sum>x = 0..p. monom (b x * real (p choose x)) (p - x))\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "finally"], ["proof (chain)\npicking this:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n  (\\<Sum>x = 0..p. monom (b x * real (p choose x)) (p - x))", "have \"(reciprocal_poly p P) \\<circ>\\<^sub>p [:1, 1:] = \n                (\\<Sum>x = 0..p. (monom ((b x) * (p choose x)) (p - x)))\""], ["proof (prove)\nusing this:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n  (\\<Sum>x = 0..p. monom (b x * real (p choose x)) (p - x))\n\ngoal (1 subgoal):\n 1. reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n    (\\<Sum>x = 0..p. monom (b x * real (p choose x)) (p - x))", "."], ["proof (state)\nthis:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n  (\\<Sum>x = 0..p. monom (b x * real (p choose x)) (p - x))\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "hence \"?L = (\\<Sum>x = 0..p. if p - x = p - i then b x * real (p choose x) else 0)\""], ["proof (prove)\nusing this:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n  (\\<Sum>x = 0..p. monom (b x * real (p choose x)) (p - x))\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    (\\<Sum>x = 0..p. if p - x = p - i then b x * real (p choose x) else 0)", "by (auto simp add: P_def coeff_sum)"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - i) =\n  (\\<Sum>x = 0..p. if p - x = p - i then b x * real (p choose x) else 0)\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "also"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - i) =\n  (\\<Sum>x = 0..p. if p - x = p - i then b x * real (p choose x) else 0)\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "have \"... = (\\<Sum>x = 0..p. if x = i then b x * real (p choose x) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x = 0..p. if p - x = p - i then b x * real (p choose x) else 0) =\n    (\\<Sum>x = 0..p. if x = i then b x * real (p choose x) else 0)", "proof (rule sum.cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       (if p - x = p - i then b x * real (p choose x) else 0) =\n       (if x = i then b x * real (p choose x) else 0)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       (if p - x = p - i then b x * real (p choose x) else 0) =\n       (if x = i then b x * real (p choose x) else 0)", "assume \"x \\<in> {0..p}\""], ["proof (state)\nthis:\n  x \\<in> {0..p}\n\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       (if p - x = p - i then b x * real (p choose x) else 0) =\n       (if x = i then b x * real (p choose x) else 0)", "hence \"x \\<le> p\""], ["proof (prove)\nusing this:\n  x \\<in> {0..p}\n\ngoal (1 subgoal):\n 1. x \\<le> p", "by simp"], ["proof (state)\nthis:\n  x \\<le> p\n\ngoal (2 subgoals):\n 1. {0..p} = {0..p}\n 2. \\<And>x.\n       x \\<in> {0..p} \\<Longrightarrow>\n       (if p - x = p - i then b x * real (p choose x) else 0) =\n       (if x = i then b x * real (p choose x) else 0)", "thus \"(if p - x = p - i then b x * real (p choose x) else 0) =\n          (if x = i then b x * real (p choose x) else 0)\""], ["proof (prove)\nusing this:\n  x \\<le> p\n\ngoal (1 subgoal):\n 1. (if p - x = p - i then b x * real (p choose x) else 0) =\n    (if x = i then b x * real (p choose x) else 0)", "using hi"], ["proof (prove)\nusing this:\n  x \\<le> p\n  i \\<le> p\n\ngoal (1 subgoal):\n 1. (if p - x = p - i then b x * real (p choose x) else 0) =\n    (if x = i then b x * real (p choose x) else 0)", "by (auto simp add: leI)"], ["proof (state)\nthis:\n  (if p - x = p - i then b x * real (p choose x) else 0) =\n  (if x = i then b x * real (p choose x) else 0)\n\ngoal (1 subgoal):\n 1. {0..p} = {0..p}", "qed (simp)"], ["proof (state)\nthis:\n  (\\<Sum>x = 0..p. if p - x = p - i then b x * real (p choose x) else 0) =\n  (\\<Sum>x = 0..p. if x = i then b x * real (p choose x) else 0)\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "also"], ["proof (state)\nthis:\n  (\\<Sum>x = 0..p. if p - x = p - i then b x * real (p choose x) else 0) =\n  (\\<Sum>x = 0..p. if x = i then b x * real (p choose x) else 0)\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "have \"... = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x = 0..p. if x = i then b x * real (p choose x) else 0) =\n    real (p choose i) * b i", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x = 0..p. if x = i then b x * real (p choose x) else 0) =\n  real (p choose i) * b i\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "finally"], ["proof (chain)\npicking this:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - i) =\n  real (p choose i) * b i", "show ?thesis"], ["proof (prove)\nusing this:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - i) =\n  real (p choose i) * b i\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - i) =\n    real (p choose i) * b i", "."], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>x = 0..p. smult (b x) (Bernstein_Poly_01 x p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - i) =\n  real (p choose i) * b i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_sum_01: assumes hP: \"degree P \\<le> p\"\n  shows \n  \"P = (\\<Sum>j = 0..p. smult \n     (inverse (real (p choose j)) * \n      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j))\n   (Bernstein_Poly_01 j p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "define Q where \"Q \\<equiv> reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]\""], ["proof (state)\nthis:\n  Q \\<equiv> reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]\n\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "from hP Q_def"], ["proof (chain)\npicking this:\n  degree P \\<le> p\n  Q \\<equiv> reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]", "have hQ: \"degree Q \\<le> p\""], ["proof (prove)\nusing this:\n  degree P \\<le> p\n  Q \\<equiv> reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]\n\ngoal (1 subgoal):\n 1. degree Q \\<le> p", "by (auto simp: degree_reciprocal degree_pcompose)"], ["proof (state)\nthis:\n  degree Q \\<le> p\n\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "have \"reciprocal_poly p (\\<Sum>j = 0..p. \n        smult (inverse (real (p choose j)) * coeff Q (p-j)) \n        (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p [:1, 1:] = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:] =\n    Q", "proof (rule poly_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       coeff\n        (reciprocal_poly p\n          (\\<Sum>j = 0..p.\n              smult (inverse (real (p choose j)) * coeff Q (p - j))\n               (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n         [:1, 1:])\n        n =\n       coeff Q n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       coeff\n        (reciprocal_poly p\n          (\\<Sum>j = 0..p.\n              smult (inverse (real (p choose j)) * coeff Q (p - j))\n               (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n         [:1, 1:])\n        n =\n       coeff Q n", "show \"coeff (reciprocal_poly p (\\<Sum>j = 0..p. \n          smult (inverse (real (p choose j)) * coeff Q (p-j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p [:1, 1:]) n = coeff Q n\" \n      (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n\n 2. \\<not> ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "assume hn: \"n \\<le> p\""], ["proof (state)\nthis:\n  n \\<le> p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n\n 2. \\<not> ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "hence \"?L = coeff (reciprocal_poly p (\\<Sum>j = 0..p. \n             smult (inverse (real (p choose j)) * coeff Q (p-j)) \n             (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p [:1, 1:]) (p - (p - n))\""], ["proof (prove)\nusing this:\n  n \\<le> p\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - (p - n))", "by force"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - (p - n))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n\n 2. \\<not> ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "also"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - (p - n))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n\n 2. \\<not> ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "have \"... = (p choose (p-n)) * \n                       (inverse (real (p choose (p-n))) * \n                        coeff Q (p-(p-n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     (p - (p - n)) =\n    real (p choose (p - n)) *\n    (inverse (real (p choose (p - n))) * coeff Q (p - (p - n)))", "apply (subst coeff_Bernstein_sum_01)"], ["proof (prove)\ngoal (2 subgoals):\n 1. p - n \\<le> p\n 2. real (p choose (p - n)) *\n    (inverse (real (p choose (p - n))) * coeff Q (p - (p - n))) =\n    real (p choose (p - n)) *\n    (inverse (real (p choose (p - n))) * coeff Q (p - (p - n)))", "by auto"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - (p - n)) =\n  real (p choose (p - n)) *\n  (inverse (real (p choose (p - n))) * coeff Q (p - (p - n)))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n\n 2. \\<not> ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "also"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   (p - (p - n)) =\n  real (p choose (p - n)) *\n  (inverse (real (p choose (p - n))) * coeff Q (p - (p - n)))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n\n 2. \\<not> ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "have \"... = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (p choose (p - n)) *\n    (inverse (real (p choose (p - n))) * coeff Q (p - (p - n))) =\n    coeff Q n", "using hn"], ["proof (prove)\nusing this:\n  n \\<le> p\n\ngoal (1 subgoal):\n 1. real (p choose (p - n)) *\n    (inverse (real (p choose (p - n))) * coeff Q (p - (p - n))) =\n    coeff Q n", "by fastforce"], ["proof (state)\nthis:\n  real (p choose (p - n)) *\n  (inverse (real (p choose (p - n))) * coeff Q (p - (p - n))) =\n  coeff Q n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n\n 2. \\<not> ?P \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "finally"], ["proof (chain)\npicking this:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  coeff Q n", "show \"?L = ?R\""], ["proof (prove)\nusing this:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  coeff Q n\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "."], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  coeff Q n\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> p \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> p \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "assume hn: \"\\<not> n \\<le> p\""], ["proof (state)\nthis:\n  \\<not> n \\<le> p\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> p \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "have \"degree (\\<Sum>j = 0..p.\n            smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p))\n    \\<le> p", "proof (rule degree_sum_le)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {0..p}\n 2. \\<And>pa.\n       pa \\<in> {0..p} \\<Longrightarrow>\n       degree\n        (smult (inverse (real (p choose pa)) * coeff Q (p - pa))\n          (Bernstein_Poly_01 pa p))\n       \\<le> p", "fix q"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {0..p}\n 2. \\<And>pa.\n       pa \\<in> {0..p} \\<Longrightarrow>\n       degree\n        (smult (inverse (real (p choose pa)) * coeff Q (p - pa))\n          (Bernstein_Poly_01 pa p))\n       \\<le> p", "assume \"q \\<in> {0..p}\""], ["proof (state)\nthis:\n  q \\<in> {0..p}\n\ngoal (2 subgoals):\n 1. finite {0..p}\n 2. \\<And>pa.\n       pa \\<in> {0..p} \\<Longrightarrow>\n       degree\n        (smult (inverse (real (p choose pa)) * coeff Q (p - pa))\n          (Bernstein_Poly_01 pa p))\n       \\<le> p", "hence \"q \\<le> p\""], ["proof (prove)\nusing this:\n  q \\<in> {0..p}\n\ngoal (1 subgoal):\n 1. q \\<le> p", "by fastforce"], ["proof (state)\nthis:\n  q \\<le> p\n\ngoal (2 subgoals):\n 1. finite {0..p}\n 2. \\<And>pa.\n       pa \\<in> {0..p} \\<Longrightarrow>\n       degree\n        (smult (inverse (real (p choose pa)) * coeff Q (p - pa))\n          (Bernstein_Poly_01 pa p))\n       \\<le> p", "thus \"degree (smult (inverse (real (p choose q)) * \n              coeff Q (p - q)) (Bernstein_Poly_01 q p)) \\<le> p\""], ["proof (prove)\nusing this:\n  q \\<le> p\n\ngoal (1 subgoal):\n 1. degree\n     (smult (inverse (real (p choose q)) * coeff Q (p - q))\n       (Bernstein_Poly_01 q p))\n    \\<le> p", "by (auto simp add: degree_Bernstein degree_smult_le)"], ["proof (state)\nthis:\n  degree\n   (smult (inverse (real (p choose q)) * coeff Q (p - q))\n     (Bernstein_Poly_01 q p))\n  \\<le> p\n\ngoal (1 subgoal):\n 1. finite {0..p}", "qed simp"], ["proof (state)\nthis:\n  degree\n   (\\<Sum>j = 0..p.\n       smult (inverse (real (p choose j)) * coeff Q (p - j))\n        (Bernstein_Poly_01 j p))\n  \\<le> p\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> p \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "hence \"degree (reciprocal_poly p (\\<Sum>j = 0..p.\n            smult (inverse (real (p choose j)) * coeff Q (p - j)) \n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p [:1, 1:]) \\<le> p\""], ["proof (prove)\nusing this:\n  degree\n   (\\<Sum>j = 0..p.\n       smult (inverse (real (p choose j)) * coeff Q (p - j))\n        (Bernstein_Poly_01 j p))\n  \\<le> p\n\ngoal (1 subgoal):\n 1. degree\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n    \\<le> p", "by (auto simp add: degree_pcompose degree_reciprocal)"], ["proof (state)\nthis:\n  degree\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n  \\<le> p\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> p \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "hence \"?L = 0\""], ["proof (prove)\nusing this:\n  degree\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n  \\<le> p\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    0", "using hn"], ["proof (prove)\nusing this:\n  degree\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n  \\<le> p\n  \\<not> n \\<le> p\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    0", "by (auto simp add: coeff_eq_0)"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  0\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> p \\<Longrightarrow>\n    coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "thus \"?L = ?R\""], ["proof (prove)\nusing this:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  0\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "using hQ hn"], ["proof (prove)\nusing this:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  0\n  degree Q \\<le> p\n  \\<not> n \\<le> p\n\ngoal (1 subgoal):\n 1. coeff\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult (inverse (real (p choose j)) * coeff Q (p - j))\n            (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n      [:1, 1:])\n     n =\n    coeff Q n", "by (simp add: coeff_eq_0)"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  coeff Q n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  coeff\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult (inverse (real (p choose j)) * coeff Q (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:])\n   n =\n  coeff Q n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  reciprocal_poly p\n   (\\<Sum>j = 0..p.\n       smult (inverse (real (p choose j)) * coeff Q (p - j))\n        (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n  [:1, 1:] =\n  Q\n\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "hence \"reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] = \n         reciprocal_poly p (\\<Sum>j = 0..p. \n         smult (inverse (real (p choose j)) *\n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j))\n         (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p [:1, 1:]\""], ["proof (prove)\nusing this:\n  reciprocal_poly p\n   (\\<Sum>j = 0..p.\n       smult (inverse (real (p choose j)) * coeff Q (p - j))\n        (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n  [:1, 1:] =\n  Q\n\ngoal (1 subgoal):\n 1. reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n    reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult\n          (inverse (real (p choose j)) *\n           coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    [:1, 1:]", "by (auto simp: degree_reciprocal degree_pcompose Q_def)"], ["proof (state)\nthis:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n  reciprocal_poly p\n   (\\<Sum>j = 0..p.\n       smult\n        (inverse (real (p choose j)) *\n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n        (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n  [:1, 1:]\n\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "hence \"reciprocal_poly p P \\<circ>\\<^sub>p ([:1, 1:] \\<circ>\\<^sub>p [:-1, 1:]) =\n         reciprocal_poly p (\\<Sum>j = 0..p. smult (inverse (real (p choose j)) * \n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j)) \n         (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p ([:1, 1:] \\<circ>\\<^sub>p [:-1, 1:])\""], ["proof (prove)\nusing this:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] =\n  reciprocal_poly p\n   (\\<Sum>j = 0..p.\n       smult\n        (inverse (real (p choose j)) *\n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n        (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n  [:1, 1:]\n\ngoal (1 subgoal):\n 1. reciprocal_poly p P \\<circ>\\<^sub>p\n    ([:1, 1:] \\<circ>\\<^sub>p [:- 1, 1:]) =\n    reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult\n          (inverse (real (p choose j)) *\n           coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n          (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n    ([:1, 1:] \\<circ>\\<^sub>p [:- 1, 1:])", "by (auto simp: pcompose_assoc)"], ["proof (state)\nthis:\n  reciprocal_poly p P \\<circ>\\<^sub>p\n  ([:1, 1:] \\<circ>\\<^sub>p [:- 1, 1:]) =\n  reciprocal_poly p\n   (\\<Sum>j = 0..p.\n       smult\n        (inverse (real (p choose j)) *\n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n        (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n  ([:1, 1:] \\<circ>\\<^sub>p [:- 1, 1:])\n\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "hence \"reciprocal_poly p P = reciprocal_poly p (\\<Sum>j = 0..p. \n         smult (inverse (real (p choose j)) *\n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j)) (Bernstein_Poly_01 j p))\""], ["proof (prove)\nusing this:\n  reciprocal_poly p P \\<circ>\\<^sub>p\n  ([:1, 1:] \\<circ>\\<^sub>p [:- 1, 1:]) =\n  reciprocal_poly p\n   (\\<Sum>j = 0..p.\n       smult\n        (inverse (real (p choose j)) *\n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n        (Bernstein_Poly_01 j p)) \\<circ>\\<^sub>p\n  ([:1, 1:] \\<circ>\\<^sub>p [:- 1, 1:])\n\ngoal (1 subgoal):\n 1. reciprocal_poly p P =\n    reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult\n          (inverse (real (p choose j)) *\n           coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n          (Bernstein_Poly_01 j p))", "by (auto simp: pcompose_pCons)"], ["proof (state)\nthis:\n  reciprocal_poly p P =\n  reciprocal_poly p\n   (\\<Sum>j = 0..p.\n       smult\n        (inverse (real (p choose j)) *\n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n        (Bernstein_Poly_01 j p))\n\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "hence \"reciprocal_poly p (reciprocal_poly p P) = \n         reciprocal_poly p (reciprocal_poly p (\\<Sum>j = 0..p. \n         smult (inverse (real (p choose j)) *\n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j)) (Bernstein_Poly_01 j p)))\""], ["proof (prove)\nusing this:\n  reciprocal_poly p P =\n  reciprocal_poly p\n   (\\<Sum>j = 0..p.\n       smult\n        (inverse (real (p choose j)) *\n         coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n        (Bernstein_Poly_01 j p))\n\ngoal (1 subgoal):\n 1. reciprocal_poly p (reciprocal_poly p P) =\n    reciprocal_poly p\n     (reciprocal_poly p\n       (\\<Sum>j = 0..p.\n           smult\n            (inverse (real (p choose j)) *\n             coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n            (Bernstein_Poly_01 j p)))", "by argo"], ["proof (state)\nthis:\n  reciprocal_poly p (reciprocal_poly p P) =\n  reciprocal_poly p\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult\n          (inverse (real (p choose j)) *\n           coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n          (Bernstein_Poly_01 j p)))\n\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "thus \"P = (\\<Sum>j = 0..p. smult (inverse (real (p choose j)) * \n        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j)) (Bernstein_Poly_01 j p))\""], ["proof (prove)\nusing this:\n  reciprocal_poly p (reciprocal_poly p P) =\n  reciprocal_poly p\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult\n          (inverse (real (p choose j)) *\n           coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n          (Bernstein_Poly_01 j p)))\n\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "using hP"], ["proof (prove)\nusing this:\n  reciprocal_poly p (reciprocal_poly p P) =\n  reciprocal_poly p\n   (reciprocal_poly p\n     (\\<Sum>j = 0..p.\n         smult\n          (inverse (real (p choose j)) *\n           coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n          (Bernstein_Poly_01 j p)))\n  degree P \\<le> p\n\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "by (auto simp: reciprocal_reciprocal degree_sum_le degree_smult_le \n                 degree_Bernstein degree_add_le)"], ["proof (state)\nthis:\n  P =\n  (\\<Sum>j = 0..p.\n      smult\n       (inverse (real (p choose j)) *\n        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n       (Bernstein_Poly_01 j p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_Poly_01_span1: \n  assumes hP: \"degree P \\<le> p\"\n  shows \"P \\<in> poly_vs.span {Bernstein_Poly_01 x p | x. x \\<le> p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "have \"Bernstein_Poly_01 x p\n         \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}\"\n    if \"x \\<in> {0..p}\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 x p\n    \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 x p\n    \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "have \"\\<exists>n. Bernstein_Poly_01 x p = Bernstein_Poly_01 n p \\<and> n \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       Bernstein_Poly_01 x p = Bernstein_Poly_01 n p \\<and> n \\<le> p", "using that"], ["proof (prove)\nusing this:\n  x \\<in> {0..p}\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       Bernstein_Poly_01 x p = Bernstein_Poly_01 n p \\<and> n \\<le> p", "by force"], ["proof (state)\nthis:\n  \\<exists>n. Bernstein_Poly_01 x p = Bernstein_Poly_01 n p \\<and> n \\<le> p\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 x p\n    \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. Bernstein_Poly_01 x p = Bernstein_Poly_01 n p \\<and> n \\<le> p", "show \n      \"Bernstein_Poly_01 x p \\<in> poly_vs.span {Bernstein_Poly_01 n p |n. n \\<le> p}\""], ["proof (prove)\nusing this:\n  \\<exists>n. Bernstein_Poly_01 x p = Bernstein_Poly_01 n p \\<and> n \\<le> p\n\ngoal (1 subgoal):\n 1. Bernstein_Poly_01 x p\n    \\<in> poly_vs.span {Bernstein_Poly_01 n p |n. n \\<le> p}", "by (simp add: poly_vs.span_base)"], ["proof (state)\nthis:\n  Bernstein_Poly_01 x p\n  \\<in> poly_vs.span {Bernstein_Poly_01 n p |n. n \\<le> p}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> {0..p} \\<Longrightarrow>\n  Bernstein_Poly_01 ?x p\n  \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}\n\ngoal (1 subgoal):\n 1. P \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> {0..p} \\<Longrightarrow>\n  Bernstein_Poly_01 ?x p\n  \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}\n\ngoal (1 subgoal):\n 1. P \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "apply (subst Bernstein_sum_01[OF hP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> {0..p} \\<Longrightarrow>\n        Bernstein_Poly_01 x p\n        \\<in> poly_vs.span\n               {Bernstein_Poly_01 x p |x. x \\<le> p}) \\<Longrightarrow>\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))\n    \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "apply (rule poly_vs.span_sum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> {0..p} \\<Longrightarrow>\n                   Bernstein_Poly_01 x p\n                   \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p};\n        x \\<in> {0..p}\\<rbrakk>\n       \\<Longrightarrow> smult\n                          (inverse (real (p choose x)) *\n                           coeff\n                            (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                            (p - x))\n                          (Bernstein_Poly_01 x p)\n                         \\<in> poly_vs.span\n                                {Bernstein_Poly_01 x p |x. x \\<le> p}", "apply (rule poly_vs.span_scale)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> {0..p} \\<Longrightarrow>\n                   Bernstein_Poly_01 x p\n                   \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p};\n        x \\<in> {0..p}\\<rbrakk>\n       \\<Longrightarrow> Bernstein_Poly_01 x p\n                         \\<in> poly_vs.span\n                                {Bernstein_Poly_01 x p |x. x \\<le> p}", "by blast"], ["proof (state)\nthis:\n  P \\<in> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_Poly_01_span:\n  \"poly_vs.span {Bernstein_Poly_01 x p | x. x \\<le> p} \n      = {x. degree x \\<le> p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p} =\n    {x. degree x \\<le> p}", "apply (subst monom_span[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p} =\n    poly_vs.span {monom 1 x |x. x \\<le> p}", "apply (subst poly_vs.span_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Bernstein_Poly_01 x p |x. x \\<le> p}\n    \\<subseteq> poly_vs.span {monom 1 x |x. x \\<le> p} \\<and>\n    {monom 1 x |x. x \\<le> p}\n    \\<subseteq> poly_vs.span {Bernstein_Poly_01 x p |x. x \\<le> p}", "by (auto simp: monom_span degree_Bernstein_le\n      Bernstein_Poly_01_span1 degree_monom_eq)"], ["", "subsection \\<open>Bernstein coefficients and changes\\<close>"], ["", "definition Bernstein_coeffs_01 :: \"nat \\<Rightarrow> real poly \\<Rightarrow> real list\" where \n  \"Bernstein_coeffs_01 p P = \n   [(inverse (real (p choose j)) * \n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j)). j \\<leftarrow> [0..<(p+1)]]\""], ["", "lemma length_Bernstein_coeffs_01: \"length (Bernstein_coeffs_01 p P) = p + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (Bernstein_coeffs_01 p P) = p + 1", "by (auto simp: Bernstein_coeffs_01_def)"], ["", "lemma nth_default_Bernstein_coeffs_01: assumes \"degree P \\<le> p\"\n  shows \"nth_default 0 (Bernstein_coeffs_01 p P) i = \n         inverse (p choose i) * coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs_01 p P) i =\n    inverse (real (p choose i)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - i)", "apply (cases \"p = i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. p = i \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs_01 p P) i =\n    inverse (real (p choose i)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - i)\n 2. p \\<noteq> i \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs_01 p P) i =\n    inverse (real (p choose i)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - i)", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n\ngoal (2 subgoals):\n 1. p = i \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs_01 p P) i =\n    inverse (real (p choose i)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - i)\n 2. p \\<noteq> i \\<Longrightarrow>\n    nth_default 0 (Bernstein_coeffs_01 p P) i =\n    inverse (real (p choose i)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - i)", "by (auto simp: Bernstein_coeffs_01_def nth_default_append\n                  nth_default_Cons Nitpick.case_nat_unfold binomial_eq_0)"], ["", "lemma Bernstein_coeffs_01_sum: assumes \"degree P \\<le> p\"\n  shows \"P = (\\<Sum>j = 0..p. smult (nth_default 0 (Bernstein_coeffs_01 p P) j) \n             (Bernstein_Poly_01 j p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult (nth_default 0 (Bernstein_coeffs_01 p P) j)\n         (Bernstein_Poly_01 j p))", "apply (subst nth_default_Bernstein_coeffs_01[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "apply (subst Bernstein_sum_01[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p)) =\n    (\\<Sum>j = 0..p.\n        smult\n         (inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n         (Bernstein_Poly_01 j p))", "by argo"], ["", "definition Bernstein_changes_01 :: \"nat \\<Rightarrow> real poly \\<Rightarrow> int\" where\n  \"Bernstein_changes_01 p P = nat (changes (Bernstein_coeffs_01 p P))\""], ["", "lemma Bernstein_changes_01_def': \n  \"Bernstein_changes_01 p P = nat (changes [(inverse (real (p choose j)) * \n     coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p-j)). j \\<leftarrow> [0..<p + 1]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_changes_01 p P =\n    int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1])))", "by (simp add: Bernstein_changes_01_def Bernstein_coeffs_01_def)"], ["", "lemma Bernstein_changes_01_eq_changes: \n  assumes hP: \"degree P \\<le> p\"\n  shows \"Bernstein_changes_01 p P = \n         changes (coeffs ((reciprocal_poly p P) \\<circ>\\<^sub>p [:1, 1:]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_changes_01 p P =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "proof (subst Bernstein_changes_01_def')"], ["proof (state)\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "have h: \n    \"map (\\<lambda>j. inverse (real (p choose j)) * \n     coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j)) [0..<p + 1] = \n     map (\\<lambda>j. inverse (real (p choose j)) * \n     nth_default 0 [nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                    (p - j). j \\<leftarrow> [0..<p + 1]] j) [0..<p + 1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>j.\n            inverse (real (p choose j)) *\n            coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n     [0..<p + 1] =\n    map (\\<lambda>j.\n            inverse (real (p choose j)) *\n            nth_default 0\n             (map (\\<lambda>j.\n                      nth_default 0\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                       (p - j))\n               [0..<p + 1])\n             j)\n     [0..<p + 1]", "proof (rule map_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) *\n       coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n       inverse (real (p choose x)) *\n       nth_default 0\n        (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1])\n        x", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) *\n       coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n       inverse (real (p choose x)) *\n       nth_default 0\n        (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1])\n        x", "assume \"x \\<in> set [0..<p+1]\""], ["proof (state)\nthis:\n  x \\<in> set [0..<p + 1]\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) *\n       coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n       inverse (real (p choose x)) *\n       nth_default 0\n        (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1])\n        x", "hence hx: \"x \\<le> p\""], ["proof (prove)\nusing this:\n  x \\<in> set [0..<p + 1]\n\ngoal (1 subgoal):\n 1. x \\<le> p", "by fastforce"], ["proof (state)\nthis:\n  x \\<le> p\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) *\n       coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n       inverse (real (p choose x)) *\n       nth_default 0\n        (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1])\n        x", "moreover"], ["proof (state)\nthis:\n  x \\<le> p\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) *\n       coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n       inverse (real (p choose x)) *\n       nth_default 0\n        (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1])\n        x", "have 1:\n      \"length (map (\\<lambda>j. nth_default 0 \n       (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - j)) [0..<p + 1]) \\<le> Suc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (map (\\<lambda>j.\n              nth_default 0\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n               (p - j))\n       [0..<p + 1])\n    \\<le> Suc p", "by force"], ["proof (state)\nthis:\n  length\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n  \\<le> Suc p\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) *\n       coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n       inverse (real (p choose x)) *\n       nth_default 0\n        (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1])\n        x", "moreover"], ["proof (state)\nthis:\n  length\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n  \\<le> Suc p\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) *\n       coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n       inverse (real (p choose x)) *\n       nth_default 0\n        (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1])\n        x", "have \"length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p", "proof (cases \"P=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. P = 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p\n 2. P \\<noteq> 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p", "case False"], ["proof (state)\nthis:\n  P \\<noteq> 0\n\ngoal (2 subgoals):\n 1. P = 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p\n 2. P \\<noteq> 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p", "then"], ["proof (chain)\npicking this:\n  P \\<noteq> 0", "have \"reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0\""], ["proof (prove)\nusing this:\n  P \\<noteq> 0\n\ngoal (1 subgoal):\n 1. reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0", "using hP"], ["proof (prove)\nusing this:\n  P \\<noteq> 0\n  degree P \\<le> p\n\ngoal (1 subgoal):\n 1. reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0", "by (simp add: Missing_Polynomial.pcompose_eq_0 reciprocal_0_iff)"], ["proof (state)\nthis:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0\n\ngoal (2 subgoals):\n 1. P = 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p\n 2. P \\<noteq> 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p", "moreover"], ["proof (state)\nthis:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0\n\ngoal (2 subgoals):\n 1. P = 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p\n 2. P \\<noteq> 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p", "have \"Suc (degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p", "using hP"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n\ngoal (1 subgoal):\n 1. Suc (degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p", "by (auto simp: degree_pcompose degree_reciprocal)"], ["proof (state)\nthis:\n  Suc (degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p\n\ngoal (2 subgoals):\n 1. P = 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p\n 2. P \\<noteq> 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p", "ultimately"], ["proof (chain)\npicking this:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0\n  Suc (degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p", "show ?thesis"], ["proof (prove)\nusing this:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0\n  Suc (degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p\n\ngoal (1 subgoal):\n 1. length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p", "using length_coeffs_degree"], ["proof (prove)\nusing this:\n  reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0\n  Suc (degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p\n  ?p \\<noteq> 0 \\<Longrightarrow> length (coeffs ?p) = Suc (degree ?p)\n\ngoal (1 subgoal):\n 1. length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p", "by force"], ["proof (state)\nthis:\n  length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p\n\ngoal (1 subgoal):\n 1. P = 0 \\<Longrightarrow>\n    length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n    \\<le> Suc p", "qed (auto simp: reciprocal_0)"], ["proof (state)\nthis:\n  length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) *\n       coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n       inverse (real (p choose x)) *\n       nth_default 0\n        (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1])\n        x", "ultimately"], ["proof (chain)\npicking this:\n  x \\<le> p\n  length\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n  \\<le> Suc p\n  length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p", "have h: \n      \"nth_default 0 (map (\\<lambda>j. nth_default 0 (coeffs \n       (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - j)) [0..<p + 1]) x =\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - x)\"\n      (is \"?L = ?R\")"], ["proof (prove)\nusing this:\n  x \\<le> p\n  length\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n  \\<le> Suc p\n  length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<le> Suc p\n\ngoal (1 subgoal):\n 1. nth_default 0\n     (map (\\<lambda>j.\n              nth_default 0\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n               (p - j))\n       [0..<p + 1])\n     x =\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p;\n     length\n      (map (\\<lambda>j.\n               nth_default 0\n                (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                (p - j))\n        [0..<p + 1])\n     \\<le> Suc p;\n     length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     \\<le> Suc p\\<rbrakk>\n    \\<Longrightarrow> nth_default 0\n                       (map (\\<lambda>j.\n                                nth_default 0\n                                 (coeffs\n                                   (reciprocal_poly p P \\<circ>\\<^sub>p\n                                    [:1, 1:]))\n                                 (p - j))\n                         [0..<p + 1])\n                       x =\n                      nth_default 0\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                       (p - x)", "have \"?L = (map (\\<lambda>j. nth_default 0 (coeffs\n            (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - j)) [0..<p + 1]) ! x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0\n     (map (\\<lambda>j.\n              nth_default 0\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n               (p - j))\n       [0..<p + 1])\n     x =\n    map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1] !\n    x", "using hx"], ["proof (prove)\nusing this:\n  x \\<le> p\n\ngoal (1 subgoal):\n 1. nth_default 0\n     (map (\\<lambda>j.\n              nth_default 0\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n               (p - j))\n       [0..<p + 1])\n     x =\n    map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1] !\n    x", "by (auto simp: nth_default_nth)"], ["proof (state)\nthis:\n  nth_default 0\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n   x =\n  map (\\<lambda>j.\n          nth_default 0\n           (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - j))\n   [0..<p + 1] !\n  x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p;\n     length\n      (map (\\<lambda>j.\n               nth_default 0\n                (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                (p - j))\n        [0..<p + 1])\n     \\<le> Suc p;\n     length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     \\<le> Suc p\\<rbrakk>\n    \\<Longrightarrow> nth_default 0\n                       (map (\\<lambda>j.\n                                nth_default 0\n                                 (coeffs\n                                   (reciprocal_poly p P \\<circ>\\<^sub>p\n                                    [:1, 1:]))\n                                 (p - j))\n                         [0..<p + 1])\n                       x =\n                      nth_default 0\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                       (p - x)", "also"], ["proof (state)\nthis:\n  nth_default 0\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n   x =\n  map (\\<lambda>j.\n          nth_default 0\n           (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - j))\n   [0..<p + 1] !\n  x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p;\n     length\n      (map (\\<lambda>j.\n               nth_default 0\n                (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                (p - j))\n        [0..<p + 1])\n     \\<le> Suc p;\n     length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     \\<le> Suc p\\<rbrakk>\n    \\<Longrightarrow> nth_default 0\n                       (map (\\<lambda>j.\n                                nth_default 0\n                                 (coeffs\n                                   (reciprocal_poly p P \\<circ>\\<^sub>p\n                                    [:1, 1:]))\n                                 (p - j))\n                         [0..<p + 1])\n                       x =\n                      nth_default 0\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                       (p - x)", "have \"... =  nth_default 0 \n          (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - [0..<p + 1] ! x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1] !\n    x =\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - [0..<p + 1] ! x)", "apply (subst nth_map)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x < length [0..<p + 1]\n 2. nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - [0..<p + 1] ! x) =\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - [0..<p + 1] ! x)", "using hx"], ["proof (prove)\nusing this:\n  x \\<le> p\n\ngoal (2 subgoals):\n 1. x < length [0..<p + 1]\n 2. nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - [0..<p + 1] ! x) =\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - [0..<p + 1] ! x)", "by auto"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          nth_default 0\n           (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - j))\n   [0..<p + 1] !\n  x =\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n   (p - [0..<p + 1] ! x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p;\n     length\n      (map (\\<lambda>j.\n               nth_default 0\n                (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                (p - j))\n        [0..<p + 1])\n     \\<le> Suc p;\n     length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     \\<le> Suc p\\<rbrakk>\n    \\<Longrightarrow> nth_default 0\n                       (map (\\<lambda>j.\n                                nth_default 0\n                                 (coeffs\n                                   (reciprocal_poly p P \\<circ>\\<^sub>p\n                                    [:1, 1:]))\n                                 (p - j))\n                         [0..<p + 1])\n                       x =\n                      nth_default 0\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                       (p - x)", "also"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          nth_default 0\n           (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - j))\n   [0..<p + 1] !\n  x =\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n   (p - [0..<p + 1] ! x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p;\n     length\n      (map (\\<lambda>j.\n               nth_default 0\n                (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                (p - j))\n        [0..<p + 1])\n     \\<le> Suc p;\n     length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     \\<le> Suc p\\<rbrakk>\n    \\<Longrightarrow> nth_default 0\n                       (map (\\<lambda>j.\n                                nth_default 0\n                                 (coeffs\n                                   (reciprocal_poly p P \\<circ>\\<^sub>p\n                                    [:1, 1:]))\n                                 (p - j))\n                         [0..<p + 1])\n                       x =\n                      nth_default 0\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                       (p - x)", "have \"... = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - [0..<p + 1] ! x) =\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - x)", "apply (subst nth_upt)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 + x < p + 1\n 2. nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - (0 + x)) =\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - x)", "using hx"], ["proof (prove)\nusing this:\n  x \\<le> p\n\ngoal (2 subgoals):\n 1. 0 + x < p + 1\n 2. nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - (0 + x)) =\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - x)", "by auto"], ["proof (state)\nthis:\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n   (p - [0..<p + 1] ! x) =\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n   (p - x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p;\n     length\n      (map (\\<lambda>j.\n               nth_default 0\n                (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                (p - j))\n        [0..<p + 1])\n     \\<le> Suc p;\n     length (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     \\<le> Suc p\\<rbrakk>\n    \\<Longrightarrow> nth_default 0\n                       (map (\\<lambda>j.\n                                nth_default 0\n                                 (coeffs\n                                   (reciprocal_poly p P \\<circ>\\<^sub>p\n                                    [:1, 1:]))\n                                 (p - j))\n                         [0..<p + 1])\n                       x =\n                      nth_default 0\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                       (p - x)", "finally"], ["proof (chain)\npicking this:\n  nth_default 0\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n   x =\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n   (p - x)", "show ?thesis"], ["proof (prove)\nusing this:\n  nth_default 0\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n   x =\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n   (p - x)\n\ngoal (1 subgoal):\n 1. nth_default 0\n     (map (\\<lambda>j.\n              nth_default 0\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n               (p - j))\n       [0..<p + 1])\n     x =\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - x)", "."], ["proof (state)\nthis:\n  nth_default 0\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n   x =\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n   (p - x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nth_default 0\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n   x =\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n   (p - x)\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) *\n       coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n       inverse (real (p choose x)) *\n       nth_default 0\n        (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1])\n        x", "show \"inverse (real (p choose x)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n          inverse (real (p choose x)) *\n          nth_default 0 (map (\\<lambda>j. nth_default 0 \n          (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - j)) [0..<p + 1]) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (real (p choose x)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n    inverse (real (p choose x)) *\n    nth_default 0\n     (map (\\<lambda>j.\n              nth_default 0\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n               (p - j))\n       [0..<p + 1])\n     x", "apply (subst h)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (real (p choose x)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n    inverse (real (p choose x)) *\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - x)", "apply (subst nth_default_coeffs_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (real (p choose x)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n    inverse (real (p choose x)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x)", "by blast"], ["proof (state)\nthis:\n  inverse (real (p choose x)) *\n  coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - x) =\n  inverse (real (p choose x)) *\n  nth_default 0\n   (map (\\<lambda>j.\n            nth_default 0\n             (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n             (p - j))\n     [0..<p + 1])\n   x\n\ngoal (1 subgoal):\n 1. [0..<p + 1] = [0..<p + 1]", "qed auto"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n   [0..<p + 1] =\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          nth_default 0\n           (map (\\<lambda>j.\n                    nth_default 0\n                     (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                     (p - j))\n             [0..<p + 1])\n           j)\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "have 1: \n    \"rev (map (\\<lambda>j. nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \n     (p - j)) [0..<p + 1]) = map (\\<lambda>j. nth_default 0 (coeffs \n     (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) j) [0..<p + 1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (map (\\<lambda>j.\n                 nth_default 0\n                  (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                  (p - j))\n          [0..<p + 1]) =\n    map (nth_default 0\n          (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])))\n     [0..<p + 1]", "proof (subst rev_map, rule map_cong')"], ["proof (state)\ngoal (2 subgoals):\n 1. rev [0..<p + 1] = map ?h [0..<p + 1]\n 2. \\<And>y.\n       y \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        (p - ?h y) =\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        y", "have \"\\<And>q. (q \\<ge> p \\<longrightarrow> rev [q-p..<q+1] = map ((-) q) [0..<p+1])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q.\n       p \\<le> q \\<longrightarrow>\n       rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]", "proof (induction p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       0 \\<le> q \\<longrightarrow>\n       rev [q - 0..<q + 1] = map ((-) q) [0..<0 + 1]\n 2. \\<And>p q.\n       (\\<And>q.\n           p \\<le> q \\<longrightarrow>\n           rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]) \\<Longrightarrow>\n       Suc p \\<le> q \\<longrightarrow>\n       rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>q.\n       0 \\<le> q \\<longrightarrow>\n       rev [q - 0..<q + 1] = map ((-) q) [0..<0 + 1]\n 2. \\<And>p q.\n       (\\<And>q.\n           p \\<le> q \\<longrightarrow>\n           rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]) \\<Longrightarrow>\n       Suc p \\<le> q \\<longrightarrow>\n       rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> q \\<longrightarrow>\n    rev [q - 0..<q + 1] = map ((-) q) [0..<0 + 1]", "by simp"], ["proof (state)\nthis:\n  0 \\<le> q \\<longrightarrow> rev [q - 0..<q + 1] = map ((-) q) [0..<0 + 1]\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       (\\<And>q.\n           p \\<le> q \\<longrightarrow>\n           rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]) \\<Longrightarrow>\n       Suc p \\<le> q \\<longrightarrow>\n       rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q.\n       (\\<And>q.\n           p \\<le> q \\<longrightarrow>\n           rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]) \\<Longrightarrow>\n       Suc p \\<le> q \\<longrightarrow>\n       rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "case (Suc p)"], ["proof (state)\nthis:\n  p \\<le> ?q \\<longrightarrow>\n  rev [?q - p..<?q + 1] = map ((-) ?q) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       (\\<And>q.\n           p \\<le> q \\<longrightarrow>\n           rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]) \\<Longrightarrow>\n       Suc p \\<le> q \\<longrightarrow>\n       rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "have IH: \"\\<And>q. (q \\<ge> p \\<longrightarrow> rev [q-p..<q+1] = map ((-) q) [0..<p+1])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q.\n       p \\<le> q \\<longrightarrow>\n       rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]", "using Suc.IH"], ["proof (prove)\nusing this:\n  p \\<le> ?q \\<longrightarrow>\n  rev [?q - p..<?q + 1] = map ((-) ?q) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       p \\<le> q \\<longrightarrow>\n       rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]", "by blast"], ["proof (state)\nthis:\n  p \\<le> ?q \\<longrightarrow>\n  rev [?q - p..<?q + 1] = map ((-) ?q) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       (\\<And>q.\n           p \\<le> q \\<longrightarrow>\n           rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]) \\<Longrightarrow>\n       Suc p \\<le> q \\<longrightarrow>\n       rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<Longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "assume hq: \"Suc p \\<le> q\""], ["proof (state)\nthis:\n  Suc p \\<le> q\n\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<Longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "then"], ["proof (chain)\npicking this:\n  Suc p \\<le> q", "have h: \"rev [q - p..<q + 1] = map ((-) (q)) [0..<p + 1]\""], ["proof (prove)\nusing this:\n  Suc p \\<le> q\n\ngoal (1 subgoal):\n 1. rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]", "apply (subst IH)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Suc p \\<le> q \\<Longrightarrow> p \\<le> q\n 2. Suc p \\<le> q \\<Longrightarrow>\n    map ((-) q) [0..<p + 1] = map ((-) q) [0..<p + 1]", "using hq"], ["proof (prove)\nusing this:\n  Suc p \\<le> q\n\ngoal (2 subgoals):\n 1. Suc p \\<le> q \\<Longrightarrow> p \\<le> q\n 2. Suc p \\<le> q \\<Longrightarrow>\n    map ((-) q) [0..<p + 1] = map ((-) q) [0..<p + 1]", "by auto"], ["proof (state)\nthis:\n  rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<Longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "have \"[q - Suc p..<q + 1] = (q - Suc p) # [q - p..<q + 1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [q - Suc p..<q + 1] = (q - Suc p) # [q - p..<q + 1]", "by (simp add: Suc_diff_Suc Suc_le_lessD hq upt_conv_Cons)"], ["proof (state)\nthis:\n  [q - Suc p..<q + 1] = (q - Suc p) # [q - p..<q + 1]\n\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<Longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "hence \"rev [q - Suc p..<q + 1] = rev [q - p..<q + 1] @ [q - Suc p]\""], ["proof (prove)\nusing this:\n  [q - Suc p..<q + 1] = (q - Suc p) # [q - p..<q + 1]\n\ngoal (1 subgoal):\n 1. rev [q - Suc p..<q + 1] = rev [q - p..<q + 1] @ [q - Suc p]", "by force"], ["proof (state)\nthis:\n  rev [q - Suc p..<q + 1] = rev [q - p..<q + 1] @ [q - Suc p]\n\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<Longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "also"], ["proof (state)\nthis:\n  rev [q - Suc p..<q + 1] = rev [q - p..<q + 1] @ [q - Suc p]\n\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<Longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "have \"... = map ((-) (q)) [0..<p + 1] @ [q - Suc p]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev [q - p..<q + 1] @ [q - Suc p] =\n    map ((-) q) [0..<p + 1] @ [q - Suc p]", "using h"], ["proof (prove)\nusing this:\n  rev [q - p..<q + 1] = map ((-) q) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. rev [q - p..<q + 1] @ [q - Suc p] =\n    map ((-) q) [0..<p + 1] @ [q - Suc p]", "by blast"], ["proof (state)\nthis:\n  rev [q - p..<q + 1] @ [q - Suc p] = map ((-) q) [0..<p + 1] @ [q - Suc p]\n\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<Longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "also"], ["proof (state)\nthis:\n  rev [q - p..<q + 1] @ [q - Suc p] = map ((-) q) [0..<p + 1] @ [q - Suc p]\n\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<Longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "have \"... = map ((-) q) [0..<Suc p + 1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((-) q) [0..<p + 1] @ [q - Suc p] = map ((-) q) [0..<Suc p + 1]", "by force"], ["proof (state)\nthis:\n  map ((-) q) [0..<p + 1] @ [q - Suc p] = map ((-) q) [0..<Suc p + 1]\n\ngoal (1 subgoal):\n 1. Suc p \\<le> q \\<Longrightarrow>\n    rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "finally"], ["proof (chain)\npicking this:\n  rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "show \"rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]\""], ["proof (prove)\nusing this:\n  rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]\n\ngoal (1 subgoal):\n 1. rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]", "."], ["proof (state)\nthis:\n  rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc p \\<le> q \\<longrightarrow>\n  rev [q - Suc p..<q + 1] = map ((-) q) [0..<Suc p + 1]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<le> ?q \\<longrightarrow>\n  rev [?q - p..<?q + 1] = map ((-) ?q) [0..<p + 1]\n\ngoal (2 subgoals):\n 1. rev [0..<p + 1] = map ?h [0..<p + 1]\n 2. \\<And>y.\n       y \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        (p - ?h y) =\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        y", "thus \"rev [0..<p + 1] = map ((-) p) [0..<p + 1]\""], ["proof (prove)\nusing this:\n  p \\<le> ?q \\<longrightarrow>\n  rev [?q - p..<?q + 1] = map ((-) ?q) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. rev [0..<p + 1] = map ((-) p) [0..<p + 1]", "by force"], ["proof (state)\nthis:\n  rev [0..<p + 1] = map ((-) p) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        (p - (p - y)) =\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        (p - (p - y)) =\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        y", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        (p - (p - y)) =\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        y", "assume \"y \\<in> set [0..<p + 1]\""], ["proof (state)\nthis:\n  y \\<in> set [0..<p + 1]\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        (p - (p - y)) =\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        y", "hence \"y \\<le> p\""], ["proof (prove)\nusing this:\n  y \\<in> set [0..<p + 1]\n\ngoal (1 subgoal):\n 1. y \\<le> p", "by fastforce"], ["proof (state)\nthis:\n  y \\<le> p\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set [0..<p + 1] \\<Longrightarrow>\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        (p - (p - y)) =\n       nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n        y", "thus \"nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) (p - (p - y)) =\n          nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) y\""], ["proof (prove)\nusing this:\n  y \\<le> p\n\ngoal (1 subgoal):\n 1. nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n     (p - (p - y)) =\n    nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) y", "by fastforce"], ["proof (state)\nthis:\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n   (p - (p - y)) =\n  nth_default 0 (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rev (map (\\<lambda>j.\n               nth_default 0\n                (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                (p - j))\n        [0..<p + 1]) =\n  map (nth_default 0\n        (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "have 2: \"\\<And> f. f \\<noteq> 0 \\<longrightarrow> degree f \\<le> p \\<longrightarrow>\n           map (nth_default 0 (coeffs f)) [0..<p + 1] = \n           coeffs f @ replicate (p - degree f) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> p \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n       coeffs f @ replicate (p - degree f) (0::'a)", "proof (induction p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> 0 \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<0 + 1] =\n       coeffs f @ replicate (0 - degree f) (0::'a)\n 2. \\<And>p f.\n       (\\<And>f.\n           f \\<noteq> 0 \\<longrightarrow>\n           degree f \\<le> p \\<longrightarrow>\n           map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n           coeffs f @ replicate (p - degree f) (0::'a)) \\<Longrightarrow>\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> Suc p \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n       coeffs f @ replicate (Suc p - degree f) (0::'a)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>f.\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> 0 \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<0 + 1] =\n       coeffs f @ replicate (0 - degree f) (0::'a)\n 2. \\<And>p f.\n       (\\<And>f.\n           f \\<noteq> 0 \\<longrightarrow>\n           degree f \\<le> p \\<longrightarrow>\n           map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n           coeffs f @ replicate (p - degree f) (0::'a)) \\<Longrightarrow>\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> Suc p \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n       coeffs f @ replicate (Suc p - degree f) (0::'a)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<longrightarrow>\n    degree f \\<le> 0 \\<longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<0 + 1] =\n    coeffs f @ replicate (0 - degree f) (0::'a)", "by (auto simp: degree_0_iff)"], ["proof (state)\nthis:\n  f \\<noteq> 0 \\<longrightarrow>\n  degree f \\<le> 0 \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs f)) [0..<0 + 1] =\n  coeffs f @ replicate (0 - degree f) (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p f.\n       (\\<And>f.\n           f \\<noteq> 0 \\<longrightarrow>\n           degree f \\<le> p \\<longrightarrow>\n           map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n           coeffs f @ replicate (p - degree f) (0::'a)) \\<Longrightarrow>\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> Suc p \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n       coeffs f @ replicate (Suc p - degree f) (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p f.\n       (\\<And>f.\n           f \\<noteq> 0 \\<longrightarrow>\n           degree f \\<le> p \\<longrightarrow>\n           map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n           coeffs f @ replicate (p - degree f) (0::'a)) \\<Longrightarrow>\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> Suc p \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n       coeffs f @ replicate (Suc p - degree f) (0::'a)", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p f.\n       (\\<And>f.\n           f \\<noteq> 0 \\<longrightarrow>\n           degree f \\<le> p \\<longrightarrow>\n           map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n           coeffs f @ replicate (p - degree f) (0::'a)) \\<Longrightarrow>\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> Suc p \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n       coeffs f @ replicate (Suc p - degree f) (0::'a)", "case (Suc p)"], ["proof (state)\nthis:\n  ?f \\<noteq> 0 \\<longrightarrow>\n  degree ?f \\<le> p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs ?f)) [0..<p + 1] =\n  coeffs ?f @ replicate (p - degree ?f) (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p f.\n       (\\<And>f.\n           f \\<noteq> 0 \\<longrightarrow>\n           degree f \\<le> p \\<longrightarrow>\n           map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n           coeffs f @ replicate (p - degree f) (0::'a)) \\<Longrightarrow>\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> Suc p \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n       coeffs f @ replicate (Suc p - degree f) (0::'a)", "hence IH: \"(f \\<noteq> 0 \\<longrightarrow>\n                degree f \\<le> p \\<longrightarrow>\n                map (nth_default 0 (coeffs f)) [0..<p + 1] =\n                coeffs f @ replicate (p - degree f) 0)\""], ["proof (prove)\nusing this:\n  ?f \\<noteq> 0 \\<longrightarrow>\n  degree ?f \\<le> p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs ?f)) [0..<p + 1] =\n  coeffs ?f @ replicate (p - degree ?f) (0::'a)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<longrightarrow>\n    degree f \\<le> p \\<longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n    coeffs f @ replicate (p - degree f) (0::'a)", "by blast"], ["proof (state)\nthis:\n  f \\<noteq> 0 \\<longrightarrow>\n  degree f \\<le> p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n  coeffs f @ replicate (p - degree f) (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p f.\n       (\\<And>f.\n           f \\<noteq> 0 \\<longrightarrow>\n           degree f \\<le> p \\<longrightarrow>\n           map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n           coeffs f @ replicate (p - degree f) (0::'a)) \\<Longrightarrow>\n       f \\<noteq> 0 \\<longrightarrow>\n       degree f \\<le> Suc p \\<longrightarrow>\n       map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n       coeffs f @ replicate (Suc p - degree f) (0::'a)", "then"], ["proof (chain)\npicking this:\n  f \\<noteq> 0 \\<longrightarrow>\n  degree f \\<le> p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n  coeffs f @ replicate (p - degree f) (0::'a)", "show ?case"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<longrightarrow>\n  degree f \\<le> p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n  coeffs f @ replicate (p - degree f) (0::'a)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<longrightarrow>\n    degree f \\<le> Suc p \\<longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<noteq> 0 \\<longrightarrow>\n             degree f \\<le> p \\<longrightarrow>\n             map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n             coeffs f @ replicate (p - degree f) (0::'a);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> f \\<noteq> 0 \\<longrightarrow>\n                      degree f \\<le> Suc p \\<longrightarrow>\n                      map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n                      coeffs f @ replicate (Suc p - degree f) (0::'a)\n 2. \\<lbrakk>f \\<noteq> 0 \\<longrightarrow>\n             degree f \\<le> p \\<longrightarrow>\n             map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n             coeffs f @ replicate (p - degree f) (0::'a);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> f \\<noteq> 0 \\<longrightarrow>\n                      degree f \\<le> Suc p \\<longrightarrow>\n                      map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n                      coeffs f @ replicate (Suc p - degree f) (0::'a)", "assume h': \"Suc p = degree f\""], ["proof (state)\nthis:\n  Suc p = degree f\n\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<noteq> 0 \\<longrightarrow>\n             degree f \\<le> p \\<longrightarrow>\n             map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n             coeffs f @ replicate (p - degree f) (0::'a);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> f \\<noteq> 0 \\<longrightarrow>\n                      degree f \\<le> Suc p \\<longrightarrow>\n                      map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n                      coeffs f @ replicate (Suc p - degree f) (0::'a)\n 2. \\<lbrakk>f \\<noteq> 0 \\<longrightarrow>\n             degree f \\<le> p \\<longrightarrow>\n             map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n             coeffs f @ replicate (p - degree f) (0::'a);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> f \\<noteq> 0 \\<longrightarrow>\n                      degree f \\<le> Suc p \\<longrightarrow>\n                      map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n                      coeffs f @ replicate (Suc p - degree f) (0::'a)", "hence h: \"[0..<Suc p + 1] = [0..<length (coeffs f)]\""], ["proof (prove)\nusing this:\n  Suc p = degree f\n\ngoal (1 subgoal):\n 1. [0..<Suc p + 1] = [0..<length (coeffs f)]", "by (metis add_is_0 degree_0 length_coeffs plus_1_eq_Suc zero_neq_one)"], ["proof (state)\nthis:\n  [0..<Suc p + 1] = [0..<length (coeffs f)]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<noteq> 0 \\<longrightarrow>\n             degree f \\<le> p \\<longrightarrow>\n             map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n             coeffs f @ replicate (p - degree f) (0::'a);\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> f \\<noteq> 0 \\<longrightarrow>\n                      degree f \\<le> Suc p \\<longrightarrow>\n                      map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n                      coeffs f @ replicate (Suc p - degree f) (0::'a)\n 2. \\<lbrakk>f \\<noteq> 0 \\<longrightarrow>\n             degree f \\<le> p \\<longrightarrow>\n             map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n             coeffs f @ replicate (p - degree f) (0::'a);\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> f \\<noteq> 0 \\<longrightarrow>\n                      degree f \\<le> Suc p \\<longrightarrow>\n                      map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n                      coeffs f @ replicate (Suc p - degree f) (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  [0..<Suc p + 1] = [0..<length (coeffs f)]\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<longrightarrow>\n    degree f \\<le> Suc p \\<longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "apply (subst h)"], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<Suc p + 1] = [0..<length (coeffs f)] \\<Longrightarrow>\n    f \\<noteq> 0 \\<longrightarrow>\n    degree f \\<le> Suc p \\<longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<length (coeffs f)] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "apply (subst map_nth_default)"], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<Suc p + 1] = [0..<length (coeffs f)] \\<Longrightarrow>\n    f \\<noteq> 0 \\<longrightarrow>\n    degree f \\<le> Suc p \\<longrightarrow>\n    coeffs f = coeffs f @ replicate (Suc p - degree f) (0::'a)", "using h'"], ["proof (prove)\nusing this:\n  Suc p = degree f\n\ngoal (1 subgoal):\n 1. [0..<Suc p + 1] = [0..<length (coeffs f)] \\<Longrightarrow>\n    f \\<noteq> 0 \\<longrightarrow>\n    degree f \\<le> Suc p \\<longrightarrow>\n    coeffs f = coeffs f @ replicate (Suc p - degree f) (0::'a)", "by fastforce"], ["proof (state)\nthis:\n  f \\<noteq> 0 \\<longrightarrow>\n  degree f \\<le> Suc p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n  coeffs f @ replicate (Suc p - degree f) (0::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0 \\<longrightarrow>\n             degree f \\<le> p \\<longrightarrow>\n             map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n             coeffs f @ replicate (p - degree f) (0::'a);\n     Suc p \\<noteq> degree f\\<rbrakk>\n    \\<Longrightarrow> f \\<noteq> 0 \\<longrightarrow>\n                      degree f \\<le> Suc p \\<longrightarrow>\n                      map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n                      coeffs f @ replicate (Suc p - degree f) (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0 \\<longrightarrow>\n             degree f \\<le> p \\<longrightarrow>\n             map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n             coeffs f @ replicate (p - degree f) (0::'a);\n     Suc p \\<noteq> degree f\\<rbrakk>\n    \\<Longrightarrow> f \\<noteq> 0 \\<longrightarrow>\n                      degree f \\<le> Suc p \\<longrightarrow>\n                      map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n                      coeffs f @ replicate (Suc p - degree f) (0::'a)", "assume h': \"Suc p \\<noteq> degree f\""], ["proof (state)\nthis:\n  Suc p \\<noteq> degree f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0 \\<longrightarrow>\n             degree f \\<le> p \\<longrightarrow>\n             map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n             coeffs f @ replicate (p - degree f) (0::'a);\n     Suc p \\<noteq> degree f\\<rbrakk>\n    \\<Longrightarrow> f \\<noteq> 0 \\<longrightarrow>\n                      degree f \\<le> Suc p \\<longrightarrow>\n                      map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n                      coeffs f @ replicate (Suc p - degree f) (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<longrightarrow>\n    degree f \\<le> Suc p \\<longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    degree f \\<le> Suc p \\<longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "assume hf: \"f \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    degree f \\<le> Suc p \\<longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "show \"degree f \\<le> Suc p \\<longrightarrow>\n            map (nth_default 0 (coeffs f)) [0..<Suc p + 1] =\n            coeffs f @ replicate (Suc p - degree f) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "assume \"degree f \\<le> Suc p\""], ["proof (state)\nthis:\n  degree f \\<le> Suc p\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "hence 1: \"degree f \\<le> p\""], ["proof (prove)\nusing this:\n  degree f \\<le> Suc p\n\ngoal (1 subgoal):\n 1. degree f \\<le> p", "using h'"], ["proof (prove)\nusing this:\n  degree f \\<le> Suc p\n  Suc p \\<noteq> degree f\n\ngoal (1 subgoal):\n 1. degree f \\<le> p", "by fastforce"], ["proof (state)\nthis:\n  degree f \\<le> p\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "hence 2: \"map (nth_default 0 (coeffs f)) [0..<p + 1] =\n                  coeffs f @ replicate (p - degree f) 0\""], ["proof (prove)\nusing this:\n  degree f \\<le> p\n\ngoal (1 subgoal):\n 1. map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n    coeffs f @ replicate (p - degree f) (0::'a)", "using IH hf"], ["proof (prove)\nusing this:\n  degree f \\<le> p\n  f \\<noteq> 0 \\<longrightarrow>\n  degree f \\<le> p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n  coeffs f @ replicate (p - degree f) (0::'a)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n    coeffs f @ replicate (p - degree f) (0::'a)", "by blast"], ["proof (state)\nthis:\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n  coeffs f @ replicate (p - degree f) (0::'a)\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "have \"map (nth_default 0 (coeffs f)) [0..<Suc p + 1] = \n                map (nth_default 0 (coeffs f)) [0..<p + 1] @\n                     [nth_default 0 (coeffs f) (Suc p)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    map (nth_default (0::'a) (coeffs f)) [0..<p + 1] @\n    [nth_default (0::'a) (coeffs f) (Suc p)]", "by fastforce"], ["proof (state)\nthis:\n  map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] @\n  [nth_default (0::'a) (coeffs f) (Suc p)]\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "also"], ["proof (state)\nthis:\n  map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] @\n  [nth_default (0::'a) (coeffs f) (Suc p)]\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "have\n            \"... = coeffs f @ replicate (p - degree f) 0 @ [coeff f (Suc p)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (nth_default (0::'a) (coeffs f)) [0..<p + 1] @\n    [nth_default (0::'a) (coeffs f) (Suc p)] =\n    coeffs f @ replicate (p - degree f) (0::'a) @ [coeff f (Suc p)]", "using 2"], ["proof (prove)\nusing this:\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] =\n  coeffs f @ replicate (p - degree f) (0::'a)\n\ngoal (1 subgoal):\n 1. map (nth_default (0::'a) (coeffs f)) [0..<p + 1] @\n    [nth_default (0::'a) (coeffs f) (Suc p)] =\n    coeffs f @ replicate (p - degree f) (0::'a) @ [coeff f (Suc p)]", "by (auto simp: nth_default_coeffs_eq)"], ["proof (state)\nthis:\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] @\n  [nth_default (0::'a) (coeffs f) (Suc p)] =\n  coeffs f @ replicate (p - degree f) (0::'a) @ [coeff f (Suc p)]\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "also"], ["proof (state)\nthis:\n  map (nth_default (0::'a) (coeffs f)) [0..<p + 1] @\n  [nth_default (0::'a) (coeffs f) (Suc p)] =\n  coeffs f @ replicate (p - degree f) (0::'a) @ [coeff f (Suc p)]\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "have \"... = coeffs f @ replicate (p - degree f) 0 @ [0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeffs f @ replicate (p - degree f) (0::'a) @ [coeff f (Suc p)] =\n    coeffs f @ replicate (p - degree f) (0::'a) @ [0::'a]", "using \\<open>degree f \\<le> Suc p\\<close> h' le_antisym le_degree"], ["proof (prove)\nusing this:\n  degree f \\<le> Suc p\n  Suc p \\<noteq> degree f\n  \\<lbrakk>?m \\<le> ?n; ?n \\<le> ?m\\<rbrakk> \\<Longrightarrow> ?m = ?n\n  coeff ?p ?n \\<noteq> (0::?'a) \\<Longrightarrow> ?n \\<le> degree ?p\n\ngoal (1 subgoal):\n 1. coeffs f @ replicate (p - degree f) (0::'a) @ [coeff f (Suc p)] =\n    coeffs f @ replicate (p - degree f) (0::'a) @ [0::'a]", "by blast"], ["proof (state)\nthis:\n  coeffs f @ replicate (p - degree f) (0::'a) @ [coeff f (Suc p)] =\n  coeffs f @ replicate (p - degree f) (0::'a) @ [0::'a]\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "also"], ["proof (state)\nthis:\n  coeffs f @ replicate (p - degree f) (0::'a) @ [coeff f (Suc p)] =\n  coeffs f @ replicate (p - degree f) (0::'a) @ [0::'a]\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "have \"... = coeffs f @ replicate (Suc p - degree f) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeffs f @ replicate (p - degree f) (0::'a) @ [0::'a] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "using 1"], ["proof (prove)\nusing this:\n  degree f \\<le> p\n\ngoal (1 subgoal):\n 1. coeffs f @ replicate (p - degree f) (0::'a) @ [0::'a] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "by (simp add: Suc_diff_le replicate_app_Cons_same)"], ["proof (state)\nthis:\n  coeffs f @ replicate (p - degree f) (0::'a) @ [0::'a] =\n  coeffs f @ replicate (Suc p - degree f) (0::'a)\n\ngoal (1 subgoal):\n 1. degree f \\<le> Suc p \\<Longrightarrow>\n    map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "finally"], ["proof (chain)\npicking this:\n  map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n  coeffs f @ replicate (Suc p - degree f) (0::'a)", "show \"map (nth_default 0 (coeffs f)) [0..<Suc p + 1] =\n                coeffs f @ replicate (Suc p - degree f) 0\""], ["proof (prove)\nusing this:\n  map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n  coeffs f @ replicate (Suc p - degree f) (0::'a)\n\ngoal (1 subgoal):\n 1. map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n    coeffs f @ replicate (Suc p - degree f) (0::'a)", "."], ["proof (state)\nthis:\n  map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n  coeffs f @ replicate (Suc p - degree f) (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  degree f \\<le> Suc p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n  coeffs f @ replicate (Suc p - degree f) (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<noteq> 0 \\<longrightarrow>\n  degree f \\<le> Suc p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n  coeffs f @ replicate (Suc p - degree f) (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<noteq> 0 \\<longrightarrow>\n  degree f \\<le> Suc p \\<longrightarrow>\n  map (nth_default (0::'a) (coeffs f)) [0..<Suc p + 1] =\n  coeffs f @ replicate (Suc p - degree f) (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?f \\<noteq> 0 \\<longrightarrow>\n  degree ?f \\<le> p \\<longrightarrow>\n  map (nth_default (0::?'a1) (coeffs ?f)) [0..<p + 1] =\n  coeffs ?f @ replicate (p - degree ?f) (0::?'a1)\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "thus \"int (nat (changes (map (\\<lambda>j. inverse (real (p choose j)) *\n        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j)) [0..<p + 1]))) =\n        changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\""], ["proof (prove)\nusing this:\n  ?f \\<noteq> 0 \\<longrightarrow>\n  degree ?f \\<le> p \\<longrightarrow>\n  map (nth_default (0::?'a1) (coeffs ?f)) [0..<p + 1] =\n  coeffs ?f @ replicate (p - degree ?f) (0::?'a1)\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f.\n                f \\<noteq> 0 \\<longrightarrow>\n                degree f \\<le> p \\<longrightarrow>\n                map (nth_default (0::?'a1) (coeffs f)) [0..<p + 1] =\n                coeffs f @ replicate (p - degree f) (0::?'a1);\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> int (nat (changes\n                                 (map (\\<lambda>j.\n    inverse (real (p choose j)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n                                   [0..<p + 1]))) =\n                      changes\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n 2. \\<lbrakk>\\<And>f.\n                f \\<noteq> 0 \\<longrightarrow>\n                degree f \\<le> p \\<longrightarrow>\n                map (nth_default (0::?'a1) (coeffs f)) [0..<p + 1] =\n                coeffs f @ replicate (p - degree f) (0::?'a1);\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> int (nat (changes\n                                 (map (\\<lambda>j.\n    inverse (real (p choose j)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n                                   [0..<p + 1]))) =\n                      changes\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "assume hP: \"P = 0\""], ["proof (state)\nthis:\n  P = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f.\n                f \\<noteq> 0 \\<longrightarrow>\n                degree f \\<le> p \\<longrightarrow>\n                map (nth_default (0::?'a1) (coeffs f)) [0..<p + 1] =\n                coeffs f @ replicate (p - degree f) (0::?'a1);\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> int (nat (changes\n                                 (map (\\<lambda>j.\n    inverse (real (p choose j)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n                                   [0..<p + 1]))) =\n                      changes\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n 2. \\<lbrakk>\\<And>f.\n                f \\<noteq> 0 \\<longrightarrow>\n                degree f \\<le> p \\<longrightarrow>\n                map (nth_default (0::?'a1) (coeffs f)) [0..<p + 1] =\n                coeffs f @ replicate (p - degree f) (0::?'a1);\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> int (nat (changes\n                                 (map (\\<lambda>j.\n    inverse (real (p choose j)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n                                   [0..<p + 1]))) =\n                      changes\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "show \"int (nat (changes (map (\\<lambda>j. inverse (real (p choose j)) *\n          coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j)) [0..<p + 1]))) =\n          changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "have \"?L = int (nat (changes (map (\\<lambda>j. 0::real) [0..<p+1])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    int (nat (changes (map (\\<lambda>j. 0) [0..<p + 1])))", "using hP"], ["proof (prove)\nusing this:\n  P = 0\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    int (nat (changes (map (\\<lambda>j. 0) [0..<p + 1])))", "by (auto simp: reciprocal_0 changes_nonneg)"], ["proof (state)\nthis:\n  int (nat (changes\n             (map (\\<lambda>j.\n                      inverse (real (p choose j)) *\n                      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                       (p - j))\n               [0..<p + 1]))) =\n  int (nat (changes (map (\\<lambda>j. 0) [0..<p + 1])))\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "also"], ["proof (state)\nthis:\n  int (nat (changes\n             (map (\\<lambda>j.\n                      inverse (real (p choose j)) *\n                      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                       (p - j))\n               [0..<p + 1]))) =\n  int (nat (changes (map (\\<lambda>j. 0) [0..<p + 1])))\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (nat (changes (map (\\<lambda>j. 0) [0..<p + 1]))) = 0", "apply (induction p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. int (nat (changes (map (\\<lambda>j. 0) [0..<0 + 1]))) = 0\n 2. \\<And>p.\n       int (nat (changes (map (\\<lambda>j. 0) [0..<p + 1]))) =\n       0 \\<Longrightarrow>\n       int (nat (changes (map (\\<lambda>j. 0) [0..<Suc p + 1]))) = 0", "by (auto simp: map_replicate_trivial changes_nonneg\n            replicate_app_Cons_same)"], ["proof (state)\nthis:\n  int (nat (changes (map (\\<lambda>j. 0) [0..<p + 1]))) = 0\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "also"], ["proof (state)\nthis:\n  int (nat (changes (map (\\<lambda>j. 0) [0..<p + 1]))) = 0\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "have \"0 = changes ([]::real list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = changes []", "by simp"], ["proof (state)\nthis:\n  0 = changes []\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "also"], ["proof (state)\nthis:\n  0 = changes []\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "have \"... = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. changes [] =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "using hP"], ["proof (prove)\nusing this:\n  P = 0\n\ngoal (1 subgoal):\n 1. changes [] =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "by (auto simp: reciprocal_0)"], ["proof (state)\nthis:\n  changes [] =\n  changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "finally"], ["proof (chain)\npicking this:\n  int (nat (changes\n             (map (\\<lambda>j.\n                      inverse (real (p choose j)) *\n                      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                       (p - j))\n               [0..<p + 1]))) =\n  changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "show ?thesis"], ["proof (prove)\nusing this:\n  int (nat (changes\n             (map (\\<lambda>j.\n                      inverse (real (p choose j)) *\n                      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                       (p - j))\n               [0..<p + 1]))) =\n  changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "."], ["proof (state)\nthis:\n  int (nat (changes\n             (map (\\<lambda>j.\n                      inverse (real (p choose j)) *\n                      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                       (p - j))\n               [0..<p + 1]))) =\n  changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  int (nat (changes\n             (map (\\<lambda>j.\n                      inverse (real (p choose j)) *\n                      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                       (p - j))\n               [0..<p + 1]))) =\n  changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f.\n                f \\<noteq> 0 \\<longrightarrow>\n                degree f \\<le> p \\<longrightarrow>\n                map (nth_default (0::?'a1) (coeffs f)) [0..<p + 1] =\n                coeffs f @ replicate (p - degree f) (0::?'a1);\n     P \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> int (nat (changes\n                                 (map (\\<lambda>j.\n    inverse (real (p choose j)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n                                   [0..<p + 1]))) =\n                      changes\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f.\n                f \\<noteq> 0 \\<longrightarrow>\n                degree f \\<le> p \\<longrightarrow>\n                map (nth_default (0::?'a1) (coeffs f)) [0..<p + 1] =\n                coeffs f @ replicate (p - degree f) (0::?'a1);\n     P \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> int (nat (changes\n                                 (map (\\<lambda>j.\n    inverse (real (p choose j)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n                                   [0..<p + 1]))) =\n                      changes\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "assume hP': \"P \\<noteq> 0\""], ["proof (state)\nthis:\n  P \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f.\n                f \\<noteq> 0 \\<longrightarrow>\n                degree f \\<le> p \\<longrightarrow>\n                map (nth_default (0::?'a1) (coeffs f)) [0..<p + 1] =\n                coeffs f @ replicate (p - degree f) (0::?'a1);\n     P \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> int (nat (changes\n                                 (map (\\<lambda>j.\n    inverse (real (p choose j)) *\n    coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n                                   [0..<p + 1]))) =\n                      changes\n                       (coeffs\n                         (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "thus ?thesis"], ["proof (prove)\nusing this:\n  P \\<noteq> 0\n\ngoal (1 subgoal):\n 1. int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "apply (subst h)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<noteq> 0 \\<Longrightarrow>\n    int (nat (changes\n               (map (\\<lambda>j.\n                        inverse (real (p choose j)) *\n                        nth_default 0\n                         (map (\\<lambda>j.\n                                  nth_default 0\n                                   (coeffs\n                                     (reciprocal_poly p P \\<circ>\\<^sub>p\n[:1, 1:]))\n                                   (p - j))\n                           [0..<p + 1])\n                         j)\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "apply (subst changes_scale)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>P \\<noteq> 0; i < p + 1\\<rbrakk>\n       \\<Longrightarrow> 0 < inverse (real (p choose i))\n 2. P \\<noteq> 0 \\<Longrightarrow>\n    length\n     (map (\\<lambda>j.\n              nth_default 0\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n               (p - j))\n       [0..<p + 1])\n    \\<le> p + 1\n 3. P \\<noteq> 0 \\<Longrightarrow>\n    int (nat (changes\n               (map (\\<lambda>j.\n                        nth_default 0\n                         (coeffs\n                           (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<noteq> 0 \\<Longrightarrow>\n    int (nat (changes\n               (map (\\<lambda>j.\n                        nth_default 0\n                         (coeffs\n                           (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                         (p - j))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "apply (subst changes_rev[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<noteq> 0 \\<Longrightarrow>\n    int (nat (changes\n               (rev (map (\\<lambda>j.\n                             nth_default 0\n                              (coeffs\n                                (reciprocal_poly p P \\<circ>\\<^sub>p\n                                 [:1, 1:]))\n                              (p - j))\n                      [0..<p + 1])))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "apply (subst 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<noteq> 0 \\<Longrightarrow>\n    int (nat (changes\n               (map (nth_default 0\n                      (coeffs\n                        (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])))\n                 [0..<p + 1]))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "apply (subst 2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. P \\<noteq> 0 \\<Longrightarrow>\n    reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0\n 2. P \\<noteq> 0 \\<Longrightarrow>\n    degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) \\<le> p\n 3. P \\<noteq> 0 \\<Longrightarrow>\n    int (nat (changes\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) @\n                replicate\n                 (p - degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                 0))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "apply (simp add: pcompose_eq_0 hP reciprocal_0_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. P \\<noteq> 0 \\<Longrightarrow>\n    degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) \\<le> p\n 2. P \\<noteq> 0 \\<Longrightarrow>\n    int (nat (changes\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) @\n                replicate\n                 (p - degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                 0))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n\ngoal (2 subgoals):\n 1. P \\<noteq> 0 \\<Longrightarrow>\n    degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) \\<le> p\n 2. P \\<noteq> 0 \\<Longrightarrow>\n    int (nat (changes\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) @\n                replicate\n                 (p - degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                 0))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "apply (auto simp: degree_reciprocal)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<noteq> 0 \\<Longrightarrow>\n    int (nat (changes\n               (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) @\n                replicate\n                 (p - degree (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n                 0))) =\n    changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))", "by (auto simp: changes_append_replicate_0 changes_nonneg)"], ["proof (state)\nthis:\n  int (nat (changes\n             (map (\\<lambda>j.\n                      inverse (real (p choose j)) *\n                      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                       (p - j))\n               [0..<p + 1]))) =\n  changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  int (nat (changes\n             (map (\\<lambda>j.\n                      inverse (real (p choose j)) *\n                      coeff (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n                       (p - j))\n               [0..<p + 1]))) =\n  changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_changes_01_test: fixes P::\"real poly\"\n  assumes hP: \"degree P \\<le> p\" and h0: \"P \\<noteq> 0\"\n  shows \"proots_count P {x. 0 < x \\<and> x < 1} \\<le> Bernstein_changes_01 p P \\<and>\n        even (Bernstein_changes_01 p P - proots_count P {x. 0 < x \\<and> x < 1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count P {x. 0 < x \\<and> x < 1})\n    \\<le> Bernstein_changes_01 p P \\<and>\n    even\n     (Bernstein_changes_01 p P -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. int (proots_count P {x. 0 < x \\<and> x < 1})\n    \\<le> Bernstein_changes_01 p P \\<and>\n    even\n     (Bernstein_changes_01 p P -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "let ?Q = \"(reciprocal_poly p P) \\<circ>\\<^sub>p [:1, 1:]\""], ["proof (state)\ngoal (1 subgoal):\n 1. int (proots_count P {x. 0 < x \\<and> x < 1})\n    \\<le> Bernstein_changes_01 p P \\<and>\n    even\n     (Bernstein_changes_01 p P -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "have 1: \"changes (coeffs ?Q) \\<ge> proots_count ?Q {x. 0 < x} \\<and> \n        even (changes (coeffs ?Q) - proots_count ?Q {x. 0 < x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n          {x. 0 < x})\n    \\<le> changes\n           (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<and>\n    even\n     (changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) -\n      int (proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n            {x. 0 < x}))", "apply (rule descartes_sign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:] \\<noteq> 0", "by (simp add: Missing_Polynomial.pcompose_eq_0 h0 hP reciprocal_0_iff)"], ["proof (state)\nthis:\n  int (proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n        {x. 0 < x})\n  \\<le> changes\n         (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<and>\n  even\n   (changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) -\n    int (proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n          {x. 0 < x}))\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. 0 < x \\<and> x < 1})\n    \\<le> Bernstein_changes_01 p P \\<and>\n    even\n     (Bernstein_changes_01 p P -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "have \"((+) (1::real) ` Collect ((<) (0::real))) = {x. (1::real)<x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (+) 1 ` Collect ((<) 0) = {x. 1 < x}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (+) 1 ` Collect ((<) 0) \\<subseteq> {x. 1 < x}\n 2. {x. 1 < x} \\<subseteq> (+) 1 ` Collect ((<) 0)", "show \"{x::real. 1 < x} \\<subseteq> (+) 1 ` Collect ((<) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. 1 < x} \\<subseteq> (+) 1 ` Collect ((<) 0)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. 1 < x} \\<Longrightarrow> x \\<in> (+) 1 ` Collect ((<) 0)", "fix x::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. 1 < x} \\<Longrightarrow> x \\<in> (+) 1 ` Collect ((<) 0)", "assume \"x \\<in> {x. 1 < x}\""], ["proof (state)\nthis:\n  x \\<in> {x. 1 < x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. 1 < x} \\<Longrightarrow> x \\<in> (+) 1 ` Collect ((<) 0)", "hence \"1 < x\""], ["proof (prove)\nusing this:\n  x \\<in> {x. 1 < x}\n\ngoal (1 subgoal):\n 1. 1 < x", "by simp"], ["proof (state)\nthis:\n  1 < x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. 1 < x} \\<Longrightarrow> x \\<in> (+) 1 ` Collect ((<) 0)", "hence \"-1 + x \\<in> Collect ((<) 0)\""], ["proof (prove)\nusing this:\n  1 < x\n\ngoal (1 subgoal):\n 1. - 1 + x \\<in> Collect ((<) 0)", "by auto"], ["proof (state)\nthis:\n  - 1 + x \\<in> Collect ((<) 0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. 1 < x} \\<Longrightarrow> x \\<in> (+) 1 ` Collect ((<) 0)", "hence \"1 + (-1 + x) \\<in> (+) 1 ` Collect ((<) 0)\""], ["proof (prove)\nusing this:\n  - 1 + x \\<in> Collect ((<) 0)\n\ngoal (1 subgoal):\n 1. 1 + (- 1 + x) \\<in> (+) 1 ` Collect ((<) 0)", "by blast"], ["proof (state)\nthis:\n  1 + (- 1 + x) \\<in> (+) 1 ` Collect ((<) 0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {x. 1 < x} \\<Longrightarrow> x \\<in> (+) 1 ` Collect ((<) 0)", "thus \"x \\<in> (+) 1 ` Collect ((<) 0)\""], ["proof (prove)\nusing this:\n  1 + (- 1 + x) \\<in> (+) 1 ` Collect ((<) 0)\n\ngoal (1 subgoal):\n 1. x \\<in> (+) 1 ` Collect ((<) 0)", "by argo"], ["proof (state)\nthis:\n  x \\<in> (+) 1 ` Collect ((<) 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x. 1 < x} \\<subseteq> (+) 1 ` Collect ((<) 0)\n\ngoal (1 subgoal):\n 1. (+) 1 ` Collect ((<) 0) \\<subseteq> {x. 1 < x}", "qed auto"], ["proof (state)\nthis:\n  (+) 1 ` Collect ((<) 0) = {x. 1 < x}\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. 0 < x \\<and> x < 1})\n    \\<le> Bernstein_changes_01 p P \\<and>\n    even\n     (Bernstein_changes_01 p P -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "hence 2:  \"proots_count P {x. 0 < x \\<and> x < 1} = proots_count ?Q {x. 0 < x}\""], ["proof (prove)\nusing this:\n  (+) 1 ` Collect ((<) 0) = {x. 1 < x}\n\ngoal (1 subgoal):\n 1. proots_count P {x. 0 < x \\<and> x < 1} =\n    proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) {x. 0 < x}", "using assms"], ["proof (prove)\nusing this:\n  (+) 1 ` Collect ((<) 0) = {x. 1 < x}\n  degree P \\<le> p\n  P \\<noteq> 0\n\ngoal (1 subgoal):\n 1. proots_count P {x. 0 < x \\<and> x < 1} =\n    proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) {x. 0 < x}", "by (auto simp: proots_pcompose reciprocal_0_iff proots_count_reciprocal')"], ["proof (state)\nthis:\n  proots_count P {x. 0 < x \\<and> x < 1} =\n  proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:]) {x. 0 < x}\n\ngoal (1 subgoal):\n 1. int (proots_count P {x. 0 < x \\<and> x < 1})\n    \\<le> Bernstein_changes_01 p P \\<and>\n    even\n     (Bernstein_changes_01 p P -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count P {x. 0 < x \\<and> x < 1})\n    \\<le> Bernstein_changes_01 p P \\<and>\n    even\n     (Bernstein_changes_01 p P -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "apply (subst Bernstein_changes_01_eq_changes[OF hP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count P {x. 0 < x \\<and> x < 1})\n    \\<le> changes\n           (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<and>\n    even\n     (Bernstein_changes_01 p P -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "apply (subst Bernstein_changes_01_eq_changes[OF hP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count P {x. 0 < x \\<and> x < 1})\n    \\<le> changes\n           (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<and>\n    even\n     (changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "apply (subst 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n          (Collect ((<) 0)))\n    \\<le> changes\n           (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<and>\n    even\n     (changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) -\n      int (proots_count P {x. 0 < x \\<and> x < 1}))", "apply (subst 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. int (proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n          (Collect ((<) 0)))\n    \\<le> changes\n           (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) \\<and>\n    even\n     (changes (coeffs (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])) -\n      int (proots_count (reciprocal_poly p P \\<circ>\\<^sub>p [:1, 1:])\n            (Collect ((<) 0))))", "by (rule 1)"], ["proof (state)\nthis:\n  int (proots_count P {x. 0 < x \\<and> x < 1})\n  \\<le> Bernstein_changes_01 p P \\<and>\n  even\n   (Bernstein_changes_01 p P - int (proots_count P {x. 0 < x \\<and> x < 1}))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Expression as a Bernstein sum\\<close>"], ["", "lemma Bernstein_coeffs_01_0: \"Bernstein_coeffs_01 p 0 = replicate (p+1) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 0 = replicate (p + 1) 0", "by (auto simp: Bernstein_coeffs_01_def reciprocal_0 map_replicate_trivial\n      replicate_append_same)"], ["", "lemma Bernstein_coeffs_01_1: \"Bernstein_coeffs_01 p 1 = replicate (p+1) 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "have \"Bernstein_coeffs_01 p 1 =\n     map (\\<lambda>j. inverse (real (p choose j)) *\n     coeff (\\<Sum>k\\<le>p. smult (real (p choose k)) ([:0, 1:] ^ k)) (p - j)) [0..<(p+1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 =\n    map (\\<lambda>j.\n            inverse (real (p choose j)) *\n            coeff (\\<Sum>k\\<le>p. smult (real (p choose k)) ([:0, 1:] ^ k))\n             (p - j))\n     [0..<p + 1]", "by (auto simp: Bernstein_coeffs_01_def reciprocal_1 monom_altdef\n        hom_distribs pcompose_pCons poly_0_coeff_0[symmetric] poly_binomial)"], ["proof (state)\nthis:\n  Bernstein_coeffs_01 p 1 =\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          coeff (\\<Sum>k\\<le>p. smult (real (p choose k)) ([:0, 1:] ^ k))\n           (p - j))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "also"], ["proof (state)\nthis:\n  Bernstein_coeffs_01 p 1 =\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          coeff (\\<Sum>k\\<le>p. smult (real (p choose k)) ([:0, 1:] ^ k))\n           (p - j))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "have \"... = map (\\<lambda>j. inverse (real (p choose j)) * \n             real (p choose (p - j))) [0..<(p+1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>j.\n            inverse (real (p choose j)) *\n            coeff (\\<Sum>k\\<le>p. smult (real (p choose k)) ([:0, 1:] ^ k))\n             (p - j))\n     [0..<p + 1] =\n    map (\\<lambda>j. inverse (real (p choose j)) * real (p choose (p - j)))\n     [0..<p + 1]", "by (auto simp: monom_altdef[symmetric] coeff_sum binomial)"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          coeff (\\<Sum>k\\<le>p. smult (real (p choose k)) ([:0, 1:] ^ k))\n           (p - j))\n   [0..<p + 1] =\n  map (\\<lambda>j. inverse (real (p choose j)) * real (p choose (p - j)))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "also"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          coeff (\\<Sum>k\\<le>p. smult (real (p choose k)) ([:0, 1:] ^ k))\n           (p - j))\n   [0..<p + 1] =\n  map (\\<lambda>j. inverse (real (p choose j)) * real (p choose (p - j)))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "have \"... = map (\\<lambda>j. 1) [0..<(p+1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>j. inverse (real (p choose j)) * real (p choose (p - j)))\n     [0..<p + 1] =\n    map (\\<lambda>j. 1) [0..<p + 1]", "apply (rule map_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) * real (p choose (p - x)) = 1", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<p + 1] = [0..<p + 1]", "by argo"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) * real (p choose (p - x)) = 1", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ \\<in> set [0..<p + 1] \\<Longrightarrow>\n    inverse (real (p choose x_)) * real (p choose (p - x_)) = 1", "apply (subst binomial_symmetric)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x_ \\<in> set [0..<p + 1] \\<Longrightarrow> x_ \\<le> p\n 2. x_ \\<in> set [0..<p + 1] \\<Longrightarrow>\n    inverse (real (p choose (p - x_))) * real (p choose (p - x_)) = 1", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  map (\\<lambda>j. inverse (real (p choose j)) * real (p choose (p - j)))\n   [0..<p + 1] =\n  map (\\<lambda>j. 1) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "also"], ["proof (state)\nthis:\n  map (\\<lambda>j. inverse (real (p choose j)) * real (p choose (p - j)))\n   [0..<p + 1] =\n  map (\\<lambda>j. 1) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "have \"... = replicate (p+1) 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>j. 1) [0..<p + 1] = replicate (p + 1) 1", "by (auto simp: map_replicate_trivial replicate_append_same)"], ["proof (state)\nthis:\n  map (\\<lambda>j. 1) [0..<p + 1] = replicate (p + 1) 1\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "finally"], ["proof (chain)\npicking this:\n  Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "show ?thesis"], ["proof (prove)\nusing this:\n  Bernstein_coeffs_01 p 1 = replicate (p + 1) 1\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p 1 = replicate (p + 1) 1", "."], ["proof (state)\nthis:\n  Bernstein_coeffs_01 p 1 = replicate (p + 1) 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_coeffs_01_x: assumes \"p \\<noteq> 0\"\n  shows \"Bernstein_coeffs_01 p (monom 1 1) = [i/p. i \\<leftarrow> [0..<(p+1)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "have \n    \"Bernstein_coeffs_01 p (monom 1 1) = map (\\<lambda>j. inverse (real (p choose j)) *\n     coeff (monom 1 (p - Suc 0) \\<circ>\\<^sub>p [:1, 1:]) (p - j)) [0..<(p+1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>j.\n            inverse (real (p choose j)) *\n            coeff (monom 1 (p - Suc 0) \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n     [0..<p + 1]", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>j.\n            inverse (real (p choose j)) *\n            coeff (monom 1 (p - Suc 0) \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n     [0..<p + 1]", "by (auto simp: Bernstein_coeffs_01_def reciprocal_monom)"], ["proof (state)\nthis:\n  Bernstein_coeffs_01 p (monom 1 1) =\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          coeff (monom 1 (p - Suc 0) \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "also"], ["proof (state)\nthis:\n  Bernstein_coeffs_01 p (monom 1 1) =\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          coeff (monom 1 (p - Suc 0) \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "have \n    \"... = map (\\<lambda>j. inverse (real (p choose j)) *\n     (\\<Sum>k\\<le>p - Suc 0. coeff (monom (real (p -  1 choose k)) k) (p - j))) [0..<(p+1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>j.\n            inverse (real (p choose j)) *\n            coeff (monom 1 (p - Suc 0) \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n     [0..<p + 1] =\n    map (\\<lambda>j.\n            inverse (real (p choose j)) *\n            (\\<Sum>k\\<le>p - Suc 0.\n                coeff (monom (real (p - 1 choose k)) k) (p - j)))\n     [0..<p + 1]", "by (auto simp: monom_altdef hom_distribs pcompose_pCons poly_binomial coeff_sum)"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          coeff (monom 1 (p - Suc 0) \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n   [0..<p + 1] =\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          (\\<Sum>k\\<le>p - Suc 0.\n              coeff (monom (real (p - 1 choose k)) k) (p - j)))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "also"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          coeff (monom 1 (p - Suc 0) \\<circ>\\<^sub>p [:1, 1:]) (p - j))\n   [0..<p + 1] =\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          (\\<Sum>k\\<le>p - Suc 0.\n              coeff (monom (real (p - 1 choose k)) k) (p - j)))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "have\"... = map (\\<lambda>j. inverse (real (p choose j)) *\n            real (p -  1 choose (p - j))) [0..<(p+1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>j.\n            inverse (real (p choose j)) *\n            (\\<Sum>k\\<le>p - Suc 0.\n                coeff (monom (real (p - 1 choose k)) k) (p - j)))\n     [0..<p + 1] =\n    map (\\<lambda>j.\n            inverse (real (p choose j)) * real (p - 1 choose (p - j)))\n     [0..<p + 1]", "by auto"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          (\\<Sum>k\\<le>p - Suc 0.\n              coeff (monom (real (p - 1 choose k)) k) (p - j)))\n   [0..<p + 1] =\n  map (\\<lambda>j.\n          inverse (real (p choose j)) * real (p - 1 choose (p - j)))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "also"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          inverse (real (p choose j)) *\n          (\\<Sum>k\\<le>p - Suc 0.\n              coeff (monom (real (p - 1 choose k)) k) (p - j)))\n   [0..<p + 1] =\n  map (\\<lambda>j.\n          inverse (real (p choose j)) * real (p - 1 choose (p - j)))\n   [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "have \"... = map (\\<lambda>j. j/p) [0..<(p+1)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>j.\n            inverse (real (p choose j)) * real (p - 1 choose (p - j)))\n     [0..<p + 1] =\n    map (\\<lambda>j. real j / real p) [0..<p + 1]", "proof (rule map_cong)"], ["proof (state)\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n       real x / real p", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n       real x / real p", "assume \"x \\<in> set [0..<(p+1)]\""], ["proof (state)\nthis:\n  x \\<in> set [0..<p + 1]\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n       real x / real p", "hence \"x \\<le> p\""], ["proof (prove)\nusing this:\n  x \\<in> set [0..<p + 1]\n\ngoal (1 subgoal):\n 1. x \\<le> p", "by force"], ["proof (state)\nthis:\n  x \\<le> p\n\ngoal (2 subgoals):\n 1. [0..<p + 1] = [0..<p + 1]\n 2. \\<And>x.\n       x \\<in> set [0..<p + 1] \\<Longrightarrow>\n       inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n       real x / real p", "thus \"inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n          real x / real p\""], ["proof (prove)\nusing this:\n  x \\<le> p\n\ngoal (1 subgoal):\n 1. inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n    real x / real p", "proof (cases \"x = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> p; x = 0\\<rbrakk>\n    \\<Longrightarrow> inverse (real (p choose x)) *\n                      real (p - 1 choose (p - x)) =\n                      real x / real p\n 2. \\<lbrakk>x \\<le> p; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> inverse (real (p choose x)) *\n                      real (p - 1 choose (p - x)) =\n                      real x / real p", "show \"x = 0 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow>\n    inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n    real x / real p", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow>\n    inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n    real x / real p", "by fastforce"], ["proof (state)\nthis:\n  x = 0 \\<Longrightarrow>\n  inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n  real x / real p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> inverse (real (p choose x)) *\n                      real (p - 1 choose (p - x)) =\n                      real x / real p", "assume 1: \"x \\<le> p\" and 2: \"x \\<noteq> 0\""], ["proof (state)\nthis:\n  x \\<le> p\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> inverse (real (p choose x)) *\n                      real (p - 1 choose (p - x)) =\n                      real x / real p", "hence \"p - x \\<le> p - 1\""], ["proof (prove)\nusing this:\n  x \\<le> p\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p - x \\<le> p - 1", "by force"], ["proof (state)\nthis:\n  p - x \\<le> p - 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> inverse (real (p choose x)) *\n                      real (p - 1 choose (p - x)) =\n                      real x / real p", "hence \"(p - 1 choose (p - x)) = (p - 1 choose (x - 1))\""], ["proof (prove)\nusing this:\n  p - x \\<le> p - 1\n\ngoal (1 subgoal):\n 1. p - 1 choose (p - x) = p - 1 choose (x - 1)", "apply (subst binomial_symmetric)"], ["proof (prove)\ngoal (2 subgoals):\n 1. p - x \\<le> p - 1 \\<Longrightarrow> p - x \\<le> p - 1\n 2. p - x \\<le> p - 1 \\<Longrightarrow>\n    p - 1 choose (p - 1 - (p - x)) = p - 1 choose (x - 1)", "using 1 2"], ["proof (prove)\nusing this:\n  x \\<le> p\n  x \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p - x \\<le> p - 1 \\<Longrightarrow> p - x \\<le> p - 1\n 2. p - x \\<le> p - 1 \\<Longrightarrow>\n    p - 1 choose (p - 1 - (p - x)) = p - 1 choose (x - 1)", "by auto"], ["proof (state)\nthis:\n  p - 1 choose (p - x) = p - 1 choose (x - 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> inverse (real (p choose x)) *\n                      real (p - 1 choose (p - x)) =\n                      real x / real p", "hence \"x * (p choose x) = p * (p - 1 choose (p - x))\""], ["proof (prove)\nusing this:\n  p - 1 choose (p - x) = p - 1 choose (x - 1)\n\ngoal (1 subgoal):\n 1. x * (p choose x) = p * (p - 1 choose (p - x))", "using 2 times_binomial_minus1_eq"], ["proof (prove)\nusing this:\n  p - 1 choose (p - x) = p - 1 choose (x - 1)\n  x \\<noteq> 0\n  0 < ?k \\<Longrightarrow>\n  ?k * (?n choose ?k) = ?n * (?n - 1 choose (?k - 1))\n\ngoal (1 subgoal):\n 1. x * (p choose x) = p * (p - 1 choose (p - x))", "by simp"], ["proof (state)\nthis:\n  x * (p choose x) = p * (p - 1 choose (p - x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> inverse (real (p choose x)) *\n                      real (p - 1 choose (p - x)) =\n                      real x / real p", "hence \"real x * real (p choose x) = real p * real (p - 1 choose (p - x))\""], ["proof (prove)\nusing this:\n  x * (p choose x) = p * (p - 1 choose (p - x))\n\ngoal (1 subgoal):\n 1. real x * real (p choose x) = real p * real (p - 1 choose (p - x))", "by (metis of_nat_mult)"], ["proof (state)\nthis:\n  real x * real (p choose x) = real p * real (p - 1 choose (p - x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> p; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> inverse (real (p choose x)) *\n                      real (p - 1 choose (p - x)) =\n                      real x / real p", "thus ?thesis"], ["proof (prove)\nusing this:\n  real x * real (p choose x) = real p * real (p - 1 choose (p - x))\n\ngoal (1 subgoal):\n 1. inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n    real x / real p", "using 1 2"], ["proof (prove)\nusing this:\n  real x * real (p choose x) = real p * real (p - 1 choose (p - x))\n  x \\<le> p\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n    real x / real p", "by (auto simp: divide_simps)"], ["proof (state)\nthis:\n  inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n  real x / real p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inverse (real (p choose x)) * real (p - 1 choose (p - x)) =\n  real x / real p\n\ngoal (1 subgoal):\n 1. [0..<p + 1] = [0..<p + 1]", "qed blast"], ["proof (state)\nthis:\n  map (\\<lambda>j.\n          inverse (real (p choose j)) * real (p - 1 choose (p - j)))\n   [0..<p + 1] =\n  map (\\<lambda>j. real j / real p) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "finally"], ["proof (chain)\npicking this:\n  Bernstein_coeffs_01 p (monom 1 1) =\n  map (\\<lambda>j. real j / real p) [0..<p + 1]", "show ?thesis"], ["proof (prove)\nusing this:\n  Bernstein_coeffs_01 p (monom 1 1) =\n  map (\\<lambda>j. real j / real p) [0..<p + 1]\n\ngoal (1 subgoal):\n 1. Bernstein_coeffs_01 p (monom 1 1) =\n    map (\\<lambda>i. real i / real p) [0..<p + 1]", "."], ["proof (state)\nthis:\n  Bernstein_coeffs_01 p (monom 1 1) =\n  map (\\<lambda>i. real i / real p) [0..<p + 1]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Bernstein_coeffs_01_add: \n  assumes \"degree P \\<le> p\" and \"degree Q \\<le> p\"\n  shows \"nth_default 0 (Bernstein_coeffs_01 p (P + Q)) i = \n    nth_default 0 (Bernstein_coeffs_01 p P) i +\n    nth_default 0 (Bernstein_coeffs_01 p Q) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs_01 p (P + Q)) i =\n    nth_default 0 (Bernstein_coeffs_01 p P) i +\n    nth_default 0 (Bernstein_coeffs_01 p Q) i", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n  degree Q \\<le> p\n\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs_01 p (P + Q)) i =\n    nth_default 0 (Bernstein_coeffs_01 p P) i +\n    nth_default 0 (Bernstein_coeffs_01 p Q) i", "by (auto simp: nth_default_Bernstein_coeffs_01 degree_add_le\n                    reciprocal_add pcompose_add algebra_simps)"], ["", "lemma Bernstein_coeffs_01_smult: \n  assumes \"degree P \\<le> p\"\n  shows \"nth_default 0 (Bernstein_coeffs_01 p (smult a P)) i =\n          a * nth_default 0 (Bernstein_coeffs_01 p P) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs_01 p (smult a P)) i =\n    a * nth_default 0 (Bernstein_coeffs_01 p P) i", "using assms"], ["proof (prove)\nusing this:\n  degree P \\<le> p\n\ngoal (1 subgoal):\n 1. nth_default 0 (Bernstein_coeffs_01 p (smult a P)) i =\n    a * nth_default 0 (Bernstein_coeffs_01 p P) i", "by (auto simp: nth_default_Bernstein_coeffs_01 reciprocal_smult\n      pcompose_smult)"], ["", "end"]]}