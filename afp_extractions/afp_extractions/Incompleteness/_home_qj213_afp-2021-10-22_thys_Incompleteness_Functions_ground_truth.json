{"file_name": "/home/qj213/afp-2021-10-22/thys/Incompleteness/Functions.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Incompleteness", "problem_names": ["lemma not_IndP_VarP: \"{IndP x, VarP x} \\<turnstile> A\"", "lemma IndP_HPairE: \"insert (IndP (HPair (HPair Zero (HPair Zero Zero)) x)) H \\<turnstile> A\"", "lemma atom_HPairE: \n  assumes \"H \\<turnstile> x EQ HPair (HPair Zero (HPair Zero Zero)) y\"\n    shows \"insert (IndP x OR x NEQ v) H \\<turnstile> A\"", "lemma SeqStTermP_lemma:\n  assumes \"atom m \\<sharp> (v,i,t,u,s,k,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (v,i,t,u,s,k,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (v,i,t,u,s,k,sm',sn,sn')\" \"atom sm' \\<sharp> (v,i,t,u,s,k,sn,sn')\"\n          \"atom sn \\<sharp> (v,i,t,u,s,k,sn')\" \"atom sn' \\<sharp> (v,i,t,u,s,k)\"\n    shows \"{ SeqStTermP v i t u s k }\n           \\<turnstile> ((t EQ v AND u EQ i) OR\n              ((IndP t OR t NEQ v) AND u EQ t)) OR\n              Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN k AND Var n IN k AND\n                       SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                       SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                       t EQ Q_Eats (Var sm) (Var sn) AND\n                       u EQ Q_Eats (Var sm') (Var sn')))))))\"", "lemma SeqStTermP_unique: \"{SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile> u' EQ u\"", "theorem SubstTermP_unique: \"{SubstTermP v tm t u, SubstTermP v tm t u'} \\<turnstile> u' EQ u\"", "lemma SubstTermP_eq:\n  \"\\<lbrakk>H \\<turnstile> SubstTermP v tm x z; insert (SubstTermP v tm y z) H \\<turnstile> A\\<rbrakk> \\<Longrightarrow> insert (x EQ y) H \\<turnstile> A\"", "lemma SubstAtomicP_unique: \"{SubstAtomicP v tm x y, SubstAtomicP v tm x y'} \\<turnstile> y' EQ y\"", "lemma SeqSubstFormP_lemma:\n  assumes \"atom m \\<sharp> (v,u,x,y,s,k,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (v,u,x,y,s,k,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (v,u,x,y,s,k,sm',sn,sn')\"  \"atom sm' \\<sharp> (v,u,x,y,s,k,sn,sn')\"\n          \"atom sn \\<sharp> (v,u,x,y,s,k,sn')\"         \"atom sn' \\<sharp> (v,u,x,y,s,k)\"\n  shows \"{ SeqSubstFormP v u x y s k }\n         \\<turnstile> SubstAtomicP v u x y  OR\n           Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN k AND Var n IN k AND\n                       SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                       SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                       (((x EQ Q_Disj (Var sm) (Var sn) AND y EQ Q_Disj (Var sm') (Var sn')) OR\n                        (x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm')) OR\n                        (x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))))\"", "lemma \n  shows Neg_SubstAtomicP_Fls:  \"{y EQ Q_Neg z,  SubstAtomicP v tm y y'} \\<turnstile> Fls\"    (is ?thesis1)\n    and Disj_SubstAtomicP_Fls: \"{y EQ Q_Disj z w, SubstAtomicP v tm y y'} \\<turnstile> Fls\"  (is ?thesis2)\n    and Ex_SubstAtomicP_Fls:   \"{y EQ Q_Ex z,   SubstAtomicP v tm y y'} \\<turnstile> Fls\"    (is ?thesis3)", "lemma SeqSubstFormP_eq:\n  \"\\<lbrakk>H \\<turnstile> SeqSubstFormP v tm x z s k; insert (SeqSubstFormP v tm y z s k) H \\<turnstile> A\\<rbrakk> \n   \\<Longrightarrow> insert (x EQ y) H \\<turnstile> A\"", "lemma SeqSubstFormP_unique: \"{SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile> y' EQ y\"", "theorem SubstFormP_unique: \"{SubstFormP v tm x y, SubstFormP v tm x y'} \\<turnstile> y' EQ y\""], "translations": [["", "lemma not_IndP_VarP: \"{IndP x, VarP x} \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {IndP x, VarP x} \\<turnstile> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {IndP x, VarP x} \\<turnstile> A", "obtain m::name  where \"atom m \\<sharp> (x,A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        atom m \\<sharp> (x, A) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom m \\<sharp> (x, A)\n\ngoal (1 subgoal):\n 1. {IndP x, VarP x} \\<turnstile> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom m \\<sharp> (x, A)\n\ngoal (1 subgoal):\n 1. {IndP x, VarP x} \\<turnstile> A", "by  (auto simp: fresh_Pair) (blast intro: ExFalso cut_same [OF VarP_cong [THEN Iff_MP_same]])"], ["proof (state)\nthis:\n  {IndP x, VarP x} \\<turnstile> A\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>It IS a pair, but not just any pair.\\<close>"], ["", "lemma IndP_HPairE: \"insert (IndP (HPair (HPair Zero (HPair Zero Zero)) x)) H \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (IndP (HPair (HPair Zero (HPair Zero Zero)) x)) H \\<turnstile> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insert (IndP (HPair (HPair Zero (HPair Zero Zero)) x)) H \\<turnstile> A", "obtain m::name  where \"atom m \\<sharp> (x,A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        atom m \\<sharp> (x, A) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom m \\<sharp> (x, A)\n\ngoal (1 subgoal):\n 1. insert (IndP (HPair (HPair Zero (HPair Zero Zero)) x)) H \\<turnstile> A", "hence \"{ IndP (HPair (HPair Zero (HPair Zero Zero)) x) } \\<turnstile> A\""], ["proof (prove)\nusing this:\n  atom m \\<sharp> (x, A)\n\ngoal (1 subgoal):\n 1. {IndP (HPair (HPair Zero (HPair Zero Zero)) x)} \\<turnstile> A", "by (auto simp: IndP.simps [of m] HTuple_minus_1 intro: thin1)"], ["proof (state)\nthis:\n  {IndP (HPair (HPair Zero (HPair Zero Zero)) x)} \\<turnstile> A\n\ngoal (1 subgoal):\n 1. insert (IndP (HPair (HPair Zero (HPair Zero Zero)) x)) H \\<turnstile> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  {IndP (HPair (HPair Zero (HPair Zero Zero)) x)} \\<turnstile> A\n\ngoal (1 subgoal):\n 1. insert (IndP (HPair (HPair Zero (HPair Zero Zero)) x)) H \\<turnstile> A", "by (metis Assume cut1)"], ["proof (state)\nthis:\n  insert (IndP (HPair (HPair Zero (HPair Zero Zero)) x)) H \\<turnstile> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma atom_HPairE: \n  assumes \"H \\<turnstile> x EQ HPair (HPair Zero (HPair Zero Zero)) y\"\n    shows \"insert (IndP x OR x NEQ v) H \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (IndP x OR x NEQ v) H \\<turnstile> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insert (IndP x OR x NEQ v) H \\<turnstile> A", "have \"{ IndP x OR x NEQ v, x EQ HPair (HPair Zero (HPair Zero Zero)) y } \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {IndP x OR x NEQ v,\n     x EQ HPair (HPair Zero (HPair Zero Zero)) y} \\<turnstile>\n    A", "by (auto intro!: OrdNotEqP_OrdP_E IndP_HPairE\n             intro: cut_same [OF IndP_cong [THEN Iff_MP_same]] \n                    cut_same [OF OrdP_cong [THEN Iff_MP_same]])"], ["proof (state)\nthis:\n  {IndP x OR x NEQ v,\n   x EQ HPair (HPair Zero (HPair Zero Zero)) y} \\<turnstile>\n  A\n\ngoal (1 subgoal):\n 1. insert (IndP x OR x NEQ v) H \\<turnstile> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  {IndP x OR x NEQ v,\n   x EQ HPair (HPair Zero (HPair Zero Zero)) y} \\<turnstile>\n  A\n\ngoal (1 subgoal):\n 1. insert (IndP x OR x NEQ v) H \\<turnstile> A", "by (metis Assume assms rcut2)"], ["proof (state)\nthis:\n  insert (IndP x OR x NEQ v) H \\<turnstile> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqStTermP_lemma:\n  assumes \"atom m \\<sharp> (v,i,t,u,s,k,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (v,i,t,u,s,k,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (v,i,t,u,s,k,sm',sn,sn')\" \"atom sm' \\<sharp> (v,i,t,u,s,k,sn,sn')\"\n          \"atom sn \\<sharp> (v,i,t,u,s,k,sn')\" \"atom sn' \\<sharp> (v,i,t,u,s,k)\"\n    shows \"{ SeqStTermP v i t u s k }\n           \\<turnstile> ((t EQ v AND u EQ i) OR\n              ((IndP t OR t NEQ v) AND u EQ t)) OR\n              Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN k AND Var n IN k AND\n                       SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                       SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                       t EQ Q_Eats (Var sm) (Var sn) AND\n                       u EQ Q_Eats (Var sm') (Var sn')))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqStTermP v i t u s k} \\<turnstile>\n    (t EQ v AND u EQ i OR (IndP t OR t NEQ v) AND u EQ t) OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                t EQ Q_Eats (Var sm) (Var sn) AND\n                u EQ Q_Eats (Var sm') (Var sn')))))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqStTermP v i t u s k} \\<turnstile>\n    (t EQ v AND u EQ i OR (IndP t OR t NEQ v) AND u EQ t) OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                t EQ Q_Eats (Var sm) (Var sn) AND\n                u EQ Q_Eats (Var sm') (Var sn')))))))", "obtain l::name and sl::name and sl'::name\n    where \"atom l \\<sharp> (v,i,t,u,s,k,sl,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl \\<sharp> (v,i,t,u,s,k,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl' \\<sharp> (v,i,t,u,s,k,m,n,sm,sm',sn,sn')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl'.\n        \\<lbrakk>atom\n                  l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                              sn');\n         atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n         atom\n          sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn')\n\ngoal (1 subgoal):\n 1. {SeqStTermP v i t u s k} \\<turnstile>\n    (t EQ v AND u EQ i OR (IndP t OR t NEQ v) AND u EQ t) OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                t EQ Q_Eats (Var sm) (Var sn) AND\n                u EQ Q_Eats (Var sm') (Var sn')))))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn')\n\ngoal (1 subgoal):\n 1. {SeqStTermP v i t u s k} \\<turnstile>\n    (t EQ v AND u EQ i OR (IndP t OR t NEQ v) AND u EQ t) OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                t EQ Q_Eats (Var sm) (Var sn) AND\n                u EQ Q_Eats (Var sm') (Var sn')))))))", "using assms"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn')\n  atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn')\n  atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn')\n  atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn')\n  atom sn \\<sharp> (v, i, t, u, s, k, sn')\n  atom sn' \\<sharp> (v, i, t, u, s, k)\n\ngoal (1 subgoal):\n 1. {SeqStTermP v i t u s k} \\<turnstile>\n    (t EQ v AND u EQ i OR (IndP t OR t NEQ v) AND u EQ t) OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                t EQ Q_Eats (Var sm) (Var sn) AND\n                u EQ Q_Eats (Var sm') (Var sn')))))))", "apply (simp add: SeqStTermP.simps [of l s k v i sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {VarP v AND\n                       LstSeqP s k (HPair t u) AND\n                       All2 l (SUCC k)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn')))))))))))} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))", "apply (rule Conj_EH Ex_EH All2_SUCC_E [THEN rotate2] | simp)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (HPair (Var sl) (Var sl')) IN s,\n                       (Var sl EQ v AND Var sl' EQ i OR\n                        (IndP (Var sl) OR Var sl NEQ v) AND\n                        Var sl' EQ Var sl) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply (rule cut_same [where A = \"HPair t u EQ HPair (Var sl) (Var sl')\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (HPair (Var sl) (Var sl')) IN s,\n                       (Var sl EQ v AND Var sl' EQ i OR\n                        (IndP (Var sl) OR Var sl NEQ v) AND\n                        Var sl' EQ Var sl) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      HPair t u EQ HPair (Var sl) (Var sl')\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair t u EQ HPair (Var sl) (Var sl'),\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       (Var sl EQ v AND Var sl' EQ i OR\n                        (IndP (Var sl) OR Var sl NEQ v) AND\n                        Var sl' EQ Var sl) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply (metis Assume AssumeH(4) LstSeqP_EQ)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair t u EQ HPair (Var sl) (Var sl'),\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       (Var sl EQ v AND Var sl' EQ i OR\n                        (IndP (Var sl) OR Var sl NEQ v) AND\n                        Var sl' EQ Var sl) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply clarify"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       (Var sl EQ v AND Var sl' EQ i OR\n                        (IndP (Var sl) OR Var sl NEQ v) AND\n                        Var sl' EQ Var sl) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply (rule Disj_EH)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ v AND Var sl' EQ i OR\n                       (IndP (Var sl) OR Var sl NEQ v) AND\n                       Var sl' EQ Var sl,\n                       t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply (rule Disj_I1)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ v AND Var sl' EQ i OR\n                       (IndP (Var sl) OR Var sl NEQ v) AND\n                       Var sl' EQ Var sl,\n                       t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      t EQ v AND u EQ i OR (IndP t OR t NEQ v) AND u EQ t\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply (rule anti_deduction)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      Var sl EQ v AND Var sl' EQ i OR\n                      (IndP (Var sl) OR Var sl NEQ v) AND\n                      Var sl' EQ Var sl IMP\n                      t EQ v AND u EQ i OR (IndP t OR t NEQ v) AND u EQ t\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply (rule Var_Eq_subst_Iff [THEN Sym_L, THEN Iff_MP_same])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (Var sl EQ v AND Var sl' EQ i OR\n                       (IndP (Var sl) OR Var sl NEQ v) AND\n                       Var sl' EQ Var sl IMP\n                       t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t)(sl::=t)\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply (rule Sym_L [THEN rotate2])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl' EQ u, t EQ Var sl,\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (Var sl EQ v AND Var sl' EQ i OR\n                       (IndP (Var sl) OR Var sl NEQ v) AND\n                       Var sl' EQ Var sl IMP\n                       t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t)(sl::=t)\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply (rule Var_Eq_subst_Iff [THEN Iff_MP_same], force)\n    \\<comment> \\<open>now the quantified case\\<close>\n    \\<comment> \\<open>auto could be used but is VERY SLOW\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sl \\<sharp> C", "apply (rule Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{t EQ Var sl, u EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{t EQ Var sl, u EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> (t EQ v AND u EQ i OR\n                                     (IndP t OR t NEQ v) AND u EQ t) OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n          t EQ Q_Eats (Var sm) (Var sn) AND\n          u EQ Q_Eats (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{t EQ Var sl, u EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{t EQ Var sl, u EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      ((Var sl EQ v AND Var sl' EQ i OR\n        (IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl) OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                   Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair t u), VarP v}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom\n               l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                           sn');\n      atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n      atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n      atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n      atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n      atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n      atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n      atom sn \\<sharp> (v, i, t, u, s, k, sn');\n      atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> (t EQ v AND u EQ i OR\n                                    (IndP t OR t NEQ v) AND u EQ t) OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n         SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n         t EQ Q_Eats (Var sm) (Var sn) AND\n         u EQ Q_Eats (Var sm') (Var sn')))))))\nA total of 17 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (t EQ v AND u EQ i OR\n                       (IndP t OR t NEQ v) AND u EQ t) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))", "apply (rule Disj_I2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqStTermP v i (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqStTermP v i (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  t EQ Q_Eats (Var sm) (Var sn) AND\n                                  u EQ Q_Eats (Var sm') (Var sn')))))))", "apply (rule Ex_I [where x = \"Var m\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      SyntaxN.Ex n\n                       (SyntaxN.Ex sm\n                         (SyntaxN.Ex sm'\n                           (SyntaxN.Ex sn\n                             (SyntaxN.Ex sn'\n                               (Var m IN k AND\n                                Var n IN k AND\n                                SeqStTermP v i (Var sm) (Var sm') s\n                                 (Var m) AND\n                                SeqStTermP v i (Var sn) (Var sn') s\n                                 (Var n) AND\n                                t EQ Q_Eats (Var sm) (Var sn) AND\n                                u EQ Q_Eats (Var sm') (Var sn'))))))", "apply (rule Ex_I [where x = \"Var n\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      SyntaxN.Ex sm\n                       (SyntaxN.Ex sm'\n                         (SyntaxN.Ex sn\n                           (SyntaxN.Ex sn'\n                             (Var m IN k AND\n                              Var n IN k AND\n                              SeqStTermP v i (Var sm) (Var sm') s\n                               (Var m) AND\n                              SeqStTermP v i (Var sn) (Var sn') s\n                               (Var n) AND\n                              t EQ Q_Eats (Var sm) (Var sn) AND\n                              u EQ Q_Eats (Var sm') (Var sn')))))", "apply (rule Ex_I [where x = \"Var sm\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      SyntaxN.Ex sm'\n                       (SyntaxN.Ex sn\n                         (SyntaxN.Ex sn'\n                           (Var m IN k AND\n                            Var n IN k AND\n                            SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                            SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                            t EQ Q_Eats (Var sm) (Var sn) AND\n                            u EQ Q_Eats (Var sm') (Var sn'))))", "apply (rule Ex_I [where x = \"Var sm'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      SyntaxN.Ex sn\n                       (SyntaxN.Ex sn'\n                         (Var m IN k AND\n                          Var n IN k AND\n                          SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                          SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                          t EQ Q_Eats (Var sm) (Var sn) AND\n                          u EQ Q_Eats (Var sm') (Var sn')))", "apply (rule Ex_I [where x = \"Var sn\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      SyntaxN.Ex sn'\n                       (Var m IN k AND\n                        Var n IN k AND\n                        SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                        SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                        t EQ Q_Eats (Var sm) (Var sn) AND\n                        u EQ Q_Eats (Var sm') (Var sn'))", "apply (rule Ex_I [where x = \"Var sn'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      Var m IN k AND\n                      Var n IN k AND\n                      SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n                      SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n                      t EQ Q_Eats (Var sm) (Var sn) AND\n                      u EQ Q_Eats (Var sm') (Var sn')", "apply (simp_all add: SeqStTermP.simps [of l s _ v i sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      Var m IN k AND\n                      Var n IN k AND\n                      (VarP v AND\n                       LstSeqP s (Var m) (HPair (Var sm) (Var sm')) AND\n                       All2 l (SUCC (Var m))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn')))))))))))) AND\n                      (VarP v AND\n                       LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn')))))))))))) AND\n                      t EQ Q_Eats (Var sm) (Var sn) AND\n                      u EQ Q_Eats (Var sm') (Var sn')", "apply ((rule Conj_I)+, blast intro: LstSeqP_Mem)+\n    \\<comment> \\<open>first SeqStTermP subgoal\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      All2 l (SUCC (Var m))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            ((Var sl EQ v AND Var sl' EQ i OR\n                              (IndP (Var sl) OR Var sl NEQ v) AND\n                              Var sl' EQ Var sl) OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n   Var sl' EQ Q_Eats (Var sm') (Var sn')))))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (VarP v AND\n                       LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn')))))))))))) AND\n                      t EQ Q_Eats (Var sm) (Var sn) AND\n                      u EQ Q_Eats (Var sm') (Var sn')", "apply (rule All2_Subset [OF Hyp], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      SUCC (Var m) SUBS k\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                           ((Var sl EQ v AND Var sl' EQ i OR\n                             (IndP (Var sl) OR Var sl NEQ v) AND\n                             Var sl' EQ Var sl) OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ Q_Eats (Var sm) (Var sn) AND\n  Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                          ((Var sl EQ v AND Var sl' EQ i OR\n                            (IndP (Var sl) OR Var sl NEQ v) AND\n                            Var sl' EQ Var sl) OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n Var sl EQ Q_Eats (Var sm) (Var sn) AND\n Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> (SUCC (Var m), k)\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (VarP v AND\n                       LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn')))))))))))) AND\n                      t EQ Q_Eats (Var sm) (Var sn) AND\n                      u EQ Q_Eats (Var sm') (Var sn')", "apply (blast intro!: SUCC_Subset_Ord LstSeqP_OrdP, blast, simp)\n    \\<comment> \\<open>next SeqStTermP subgoal\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      (VarP v AND\n                       LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn')))))))))))) AND\n                      t EQ Q_Eats (Var sm) (Var sn) AND\n                      u EQ Q_Eats (Var sm') (Var sn')", "apply ((rule Conj_I)+, blast intro: LstSeqP_Mem)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      All2 l (SUCC (Var n))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            ((Var sl EQ v AND Var sl' EQ i OR\n                              (IndP (Var sl) OR Var sl NEQ v) AND\n                              Var sl' EQ Var sl) OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ Q_Eats (Var sm) (Var sn) AND\n   Var sl' EQ Q_Eats (Var sm') (Var sn')))))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      t EQ Q_Eats (Var sm) (Var sn) AND\n                      u EQ Q_Eats (Var sm') (Var sn')", "apply (rule All2_Subset [OF Hyp], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      SUCC (Var n) SUBS k\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                           ((Var sl EQ v AND Var sl' EQ i OR\n                             (IndP (Var sl) OR Var sl NEQ v) AND\n                             Var sl' EQ Var sl) OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ Q_Eats (Var sm) (Var sn) AND\n  Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                          ((Var sl EQ v AND Var sl' EQ i OR\n                            (IndP (Var sl) OR Var sl NEQ v) AND\n                            Var sl' EQ Var sl) OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n Var sl EQ Q_Eats (Var sm) (Var sn) AND\n Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> (SUCC (Var n), k)\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      t EQ Q_Eats (Var sm) (Var sn) AND\n                      u EQ Q_Eats (Var sm') (Var sn')", "apply (blast intro!: SUCC_Subset_Ord LstSeqP_OrdP, blast, simp)\n    \\<comment> \\<open>finally, the equality pair\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, i, t, u, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, i, t, u, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, i, t, u, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, i, t, u, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, i, t, u, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, i, t, u, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, i, t, u, s, k, sn, sn');\n     atom sn \\<sharp> (v, i, t, u, s, k, sn');\n     atom sn' \\<sharp> (v, i, t, u, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Q_Eats (Var sm) (Var sn),\n                       Var sl' EQ Q_Eats (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, t EQ Var sl, u EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             ((Var sl EQ v AND Var sl' EQ i OR\n                               (IndP (Var sl) OR Var sl NEQ v) AND\n                               Var sl' EQ Var sl) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ Q_Eats (Var sm) (Var sn) AND\n    Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair t u), VarP v} \\<turnstile>\n                      t EQ Q_Eats (Var sm) (Var sn) AND\n                      u EQ Q_Eats (Var sm') (Var sn')", "apply (blast intro: Trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {SeqStTermP v i t u s k} \\<turnstile>\n  (t EQ v AND u EQ i OR (IndP t OR t NEQ v) AND u EQ t) OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN k AND\n              Var n IN k AND\n              SeqStTermP v i (Var sm) (Var sm') s (Var m) AND\n              SeqStTermP v i (Var sn) (Var sn') s (Var n) AND\n              t EQ Q_Eats (Var sm) (Var sn) AND\n              u EQ Q_Eats (Var sm') (Var sn')))))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqStTermP_unique: \"{SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile> u' EQ u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "obtain i::name and j::name and j'::name and k::name and k'::name and l::name\n     and m::name and n::name and sm::name and sn::name and sm'::name and sn'::name\n     and m2::name and n2::name and sm2::name and sn2::name and sm2'::name and sn2'::name\n    where atoms:  \"atom i \\<sharp> (s,s',v,a,t,u,u')\"   \"atom j \\<sharp> (s,s',v,a,t,i,t,u,u')\"\n                  \"atom j' \\<sharp> (s,s',v,a,t,i,j,t,u,u')\"\n                  \"atom k \\<sharp> (s,s',v,a,t,u,u',kk',i,j,j')\" \"atom k' \\<sharp> (s,s',v,a,t,u,u',k,i,j,j')\"\n                  \"atom l \\<sharp> (s,s',v,a,t,i,j,j',k,k')\"\n                  \"atom m \\<sharp> (s,s',v,a,i,j,j',k,k',l)\"   \"atom n \\<sharp> (s,s',v,a,i,j,j',k,k',l,m)\"\n                  \"atom sm \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n)\"  \"atom sn \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm)\"\n                  \"atom sm' \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn)\"   \"atom sn' \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm')\"\n                  \"atom m2 \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn')\"   \"atom n2 \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2)\"\n                  \"atom sm2 \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2)\"  \"atom sn2 \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2)\"\n                  \"atom sm2' \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2,sn2)\"   \"atom sn2' \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2,sn2,sm2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j j' k k' l m n sm sn sm' sn' m2 n2 sm2 sn2 sm2' sn2'.\n        \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n         atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n         atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n         atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n         atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n         atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n         atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n         atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n         atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n         atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n         atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n         atom\n          sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n         atom\n          m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                       sn');\n         atom\n          n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                       sn', m2);\n         atom\n          sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                        sn', m2, n2);\n         atom\n          sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                        sn', m2, n2, sm2);\n         atom\n          sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                         sn', m2, n2, sm2, sn2);\n         atom\n          sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                         sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom i \\<sharp> (s, s', v, a, t, u, u')\n  atom j \\<sharp> (s, s', v, a, t, i, t, u, u')\n  atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u')\n  atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "have \"{ OrdP (Var k), VarP v }\n       \\<turnstile> All i (All j (All j' (All k' (SeqStTermP v a (Var i) (Var j) s (Var k)\n                                  IMP (SeqStTermP v a (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    SyntaxN.All i\n     (SyntaxN.All j\n       (SyntaxN.All j'\n         (SyntaxN.All k'\n           (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n            SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n            Var j' EQ Var j))))", "apply (rule OrdIndH [where j=l])"], ["proof (prove)\ngoal (2 subgoals):\n 1. atom\n     l \\<sharp> (k, SyntaxN.All i\n                     (SyntaxN.All j\n                       (SyntaxN.All j'\n                         (SyntaxN.All k'\n                           (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n                            SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n                            Var j' EQ Var j)))))\n 2. {VarP v} \\<turnstile>\n    SyntaxN.All k\n     (OrdP (Var k) IMP\n      All2 l (Var k)\n       ((SyntaxN.All i\n          (SyntaxN.All j\n            (SyntaxN.All j'\n              (SyntaxN.All k'\n                (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n                 SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n                 Var j' EQ Var j)))))(k::=Var l)) IMP\n      SyntaxN.All i\n       (SyntaxN.All j\n         (SyntaxN.All j'\n           (SyntaxN.All k'\n             (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n              SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n              Var j' EQ Var j)))))", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', v, a, t, u, u')\n  atom j \\<sharp> (s, s', v, a, t, i, t, u, u')\n  atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u')\n  atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (2 subgoals):\n 1. atom\n     l \\<sharp> (k, SyntaxN.All i\n                     (SyntaxN.All j\n                       (SyntaxN.All j'\n                         (SyntaxN.All k'\n                           (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n                            SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n                            Var j' EQ Var j)))))\n 2. {VarP v} \\<turnstile>\n    SyntaxN.All k\n     (OrdP (Var k) IMP\n      All2 l (Var k)\n       ((SyntaxN.All i\n          (SyntaxN.All j\n            (SyntaxN.All j'\n              (SyntaxN.All k'\n                (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n                 SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n                 Var j' EQ Var j)))))(k::=Var l)) IMP\n      SyntaxN.All i\n       (SyntaxN.All j\n         (SyntaxN.All j'\n           (SyntaxN.All k'\n             (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n              SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n              Var j' EQ Var j)))))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Neg (Var j' EQ Var j),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      SyntaxN.Ex l\n                       (Neg (Var l IN Var k IMP\n                             SyntaxN.All i\n                              (SyntaxN.All j\n                                (SyntaxN.All j'\n                                  (SyntaxN.All k'\n                                    (SeqStTermP v a (Var i) (Var j) s\n(Var l) IMP\n                                     SeqStTermP v a (Var i) (Var j') s'\n(Var k') IMP\n                                     Var j' EQ Var j))))))", "apply (rule Swap)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      ?A107\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {?A107,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut1 [OF SeqStTermP_lemma [of m v a \"Var i\" \"Var j\" s \"Var k\" n sm sm' sn sn']], simp_all, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      ?A121\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {?A121,\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut1 [OF SeqStTermP_lemma [of m2 v a \"Var i\" \"Var j'\" s' \"Var k'\" n2 sm2 sm2' sn2 sn2']], simp_all, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(Var i EQ v AND Var j' EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND\n                        Var j' EQ Var i) OR\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH Conj_EH)+\n    \\<comment> \\<open>case 1, both sides equal @{term v}\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ v, Var j' EQ a, Var i EQ v, Var j EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i,\n                       Var i EQ v AND Var j' EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       Var i EQ v AND Var j' EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans Sym)\n    \\<comment> \\<open>case 2, @{term \"Var i EQ v\"} and also @{term \"IndP (Var i) OR Var i NEQ v\"}\\<close>"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i,\n                       Var i EQ v AND Var j' EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       Var i EQ v AND Var j' EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {IndP (Var i), Var i EQ v, Var j' EQ a,\n                       Var j EQ Var i,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i NEQ v, Var i EQ v, Var j' EQ a, Var j EQ Var i,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       Var i EQ v AND Var j' EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: IndP_cong [THEN Iff_MP_same] not_IndP_VarP [THEN cut2])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i NEQ v, Var i EQ v, Var j' EQ a, Var j EQ Var i,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       Var i EQ v AND Var j' EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (metis Assume OrdNotEqP_E)\n    \\<comment> \\<open>case 3, both a variable and a pair\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       Var i EQ v AND Var j' EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ v, Var j' EQ a,\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ v AND Var j' EQ a,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ v AND Var j' EQ a,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ v AND Var j' EQ a,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ v AND Var j' EQ a,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n      atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n      atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n      atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n \\<sharp> Var j' EQ Var j\nA total of 15 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ v, Var j' EQ a,\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"VarP (Q_Eats (Var sm) (Var sn))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ v, Var j' EQ a,\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      VarP (Q_Eats (Var sm) (Var sn))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {VarP (Q_Eats (Var sm) (Var sn)), Var i EQ v,\n                       Var j' EQ a, Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans Sym VarP_cong [where x=v, THEN Iff_MP_same] Hyp, blast)\n    \\<comment> \\<open>towards remaining cases\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH Ex_EH)+\n    \\<comment> \\<open>case 4, @{term \"Var i EQ v\"} and also @{term \"IndP (Var i) OR Var i NEQ v\"}\\<close>"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ v AND Var j EQ a,\n                       (IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i,\n                       (IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       (IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: IndP_cong [THEN Iff_MP_same] not_IndP_VarP [THEN cut2] OrdNotEqP_E)\n    \\<comment> \\<open>case 5, @{term \"Var i EQ v\"} for both\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i,\n                       (IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       (IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans Sym)\n    \\<comment> \\<open>case 6, both an atom and a pair\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       (IndP (Var i) OR Var i NEQ v) AND Var j' EQ Var i,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {IndP (Var i) OR Var i NEQ v, Var j' EQ Var i,\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{(IndP (Var i) OR Var i NEQ v) AND\nVar j' EQ Var i,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{(IndP (Var i) OR Var i NEQ v) AND\nVar j' EQ Var i,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{(IndP (Var i) OR Var i NEQ v) AND\nVar j' EQ Var i,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{(IndP (Var i) OR Var i NEQ v) AND\nVar j' EQ Var i,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n      atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n      atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n      atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n \\<sharp> Var j' EQ Var j\nA total of 14 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {IndP (Var i) OR Var i NEQ v, Var j' EQ Var i,\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule atom_HPairE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Var i, Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var i EQ HPair (HPair Zero (HPair Zero Zero)) ?y464\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (simp add: HTuple.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Var i,\n                       Var i EQ\n                       HPair (HPair Zero (HPair Zero Zero))\n                        (HPair (Var sm) (Var sn)),\n                       Var j EQ\n                       HPair (HPair Zero (HPair Zero Zero))\n                        (HPair (Var sm') (Var sn')),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var i EQ HPair (HPair Zero (HPair Zero Zero)) ?y464\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans)\n    \\<comment> \\<open>towards remaining cases\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       (Var i EQ v AND Var j EQ a OR\n                        (IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH Ex_EH)+"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', Var i EQ v,\n                       Var j EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ v, Var j EQ a,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn2' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ v, Var j EQ a,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn2 \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ v, Var j EQ a,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm2' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ v, Var j EQ a,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm2 \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n      atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n      atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n      atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n2 \\<sharp> Var j' EQ Var j\nA total of 15 subgoals...", "apply simp_all\n    \\<comment> \\<open>case 7, both an atom and a pair\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', Var i EQ v,\n                       Var j EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"VarP (Q_Eats (Var sm2) (Var sn2))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', Var i EQ v,\n                       Var j EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      VarP (Q_Eats (Var sm2) (Var sn2))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {VarP (Q_Eats (Var sm2) (Var sn2)),\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', Var i EQ v,\n                       Var j EQ a,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans Sym VarP_cong [where x=v, THEN Iff_MP_same] Hyp, blast)\n    \\<comment> \\<open>case 8, both an atom and a pair\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(IndP (Var i) OR Var i NEQ v) AND Var j EQ Var i,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {IndP (Var i) OR Var i NEQ v, Var j EQ Var i,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{(IndP (Var i) OR Var i NEQ v) AND\nVar j EQ Var i,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn2' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{(IndP (Var i) OR Var i NEQ v) AND\nVar j EQ Var i,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn2 \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{(IndP (Var i) OR Var i NEQ v) AND\nVar j EQ Var i,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm2' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{(IndP (Var i) OR Var i NEQ v) AND\nVar j EQ Var i,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm2 \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n      atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n      atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n      atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n2 \\<sharp> Var j' EQ Var j\nA total of 14 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {IndP (Var i) OR Var i NEQ v, Var j EQ Var i,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule atom_HPairE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ Var i, Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var i EQ HPair (HPair Zero (HPair Zero Zero)) ?y649\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (simp add: HTuple.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ Var i,\n                       Var i EQ\n                       HPair (HPair Zero (HPair Zero Zero))\n                        (HPair (Var sm2) (Var sn2)),\n                       Var j' EQ\n                       HPair (HPair Zero (HPair Zero Zero))\n                        (HPair (Var sm2') (Var sn2')),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var i EQ HPair (HPair Zero (HPair Zero Zero)) ?y649\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans)\n    \\<comment> \\<open>case 9, two Eats terms\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqStTermP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqStTermP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   Var i EQ Q_Eats (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_Eats (Var sm') (Var sn'))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqStTermP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqStTermP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ Q_Eats (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_Eats (Var sm2') (Var sn2'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Ex_EH Disj_EH Conj_EH)+"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m IN Var k AND\nVar n IN Var k AND\nSeqStTermP v a (Var sm) (Var sm') s (Var m) AND\nSeqStTermP v a (Var sn) (Var sn') s (Var n) AND\nVar i EQ Q_Eats (Var sm) (Var sn) AND Var j EQ Q_Eats (Var sm') (Var sn'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn2' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m IN Var k AND\nVar n IN Var k AND\nSeqStTermP v a (Var sm) (Var sm') s (Var m) AND\nSeqStTermP v a (Var sn) (Var sn') s (Var n) AND\nVar i EQ Q_Eats (Var sm) (Var sn) AND Var j EQ Q_Eats (Var sm') (Var sn'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sn2 \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m IN Var k AND\nVar n IN Var k AND\nSeqStTermP v a (Var sm) (Var sm') s (Var m) AND\nSeqStTermP v a (Var sn) (Var sn') s (Var n) AND\nVar i EQ Q_Eats (Var sm) (Var sn) AND Var j EQ Q_Eats (Var sm') (Var sn'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm2' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m IN Var k AND\nVar n IN Var k AND\nSeqStTermP v a (Var sm) (Var sm') s (Var m) AND\nSeqStTermP v a (Var sn) (Var sn') s (Var n) AND\nVar i EQ Q_Eats (Var sm) (Var sn) AND Var j EQ Q_Eats (Var sm') (Var sn'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqStTermP v a (Var i) (Var j') s' (Var k'),\nSeqStTermP v a (Var i) (Var j) s (Var k), OrdP (Var k), VarP v}.\n                         atom sm2 \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n      atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n      atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n      atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n2 \\<sharp> Var j' EQ Var j\nA total of 25 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E' [OF Hyp, where x=\"Var m\"], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(Var l IN Var k IMP\n                        SyntaxN.All i\n                         (SyntaxN.All j\n                           (SyntaxN.All j'\n                             (SyntaxN.All k'\n                               (SeqStTermP v a (Var i) (Var j) s (Var l) IMP\n                                SeqStTermP v a (Var i) (Var j') s'\n                                 (Var k') IMP\n                                Var j' EQ Var j)))))(l::=Var m),\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E' [OF Hyp, where x=\"Var n\"], blast, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var n IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqStTermP v a (Var i) (Var j) s (Var n) IMP\n                               SeqStTermP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var m IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqStTermP v a (Var i) (Var j) s (Var m) IMP\n                               SeqStTermP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH, blast intro: thin1 ContraProve)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqStTermP v a (Var i) (Var j) s (Var m) IMP\n                               SeqStTermP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqStTermP v a (Var i) (Var j) s (Var n) IMP\n                               SeqStTermP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqStTermP v a (Var sm) (Var j) s (Var m) IMP\n                             SeqStTermP v a (Var sm) (Var j') s'\n                              (Var k') IMP\n                             Var j' EQ Var j))),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqStTermP v a (Var i) (Var j) s (Var n) IMP\n                               SeqStTermP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                           SeqStTermP v a (Var sm) (Var j') s' (Var k') IMP\n                           Var j' EQ Var sm')),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqStTermP v a (Var i) (Var j) s (Var n) IMP\n                               SeqStTermP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm2'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                         SeqStTermP v a (Var sm) (Var sm2') s' (Var k') IMP\n                         Var sm2' EQ Var sm'),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqStTermP v a (Var i) (Var j) s (Var n) IMP\n                               SeqStTermP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var m2\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqStTermP v a (Var i) (Var j) s (Var n) IMP\n                               SeqStTermP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn\", THEN rotate2], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqStTermP v a (Var sn) (Var j) s (Var n) IMP\n                             SeqStTermP v a (Var sn) (Var j') s'\n                              (Var k') IMP\n                             Var j' EQ Var j))),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                           SeqStTermP v a (Var sn) (Var j') s' (Var k') IMP\n                           Var j' EQ Var sn')),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn2'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                         SeqStTermP v a (Var sn) (Var sn2') s' (Var k') IMP\n                         Var sn2' EQ Var sn'),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var n2\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"Q_Eats (Var sm) (Var sn) EQ Q_Eats (Var sm2) (Var sn2)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Q_Eats (Var sm) (Var sn) EQ Q_Eats (Var sm2) (Var sn2)\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Q_Eats (Var sm) (Var sn) EQ\n                       Q_Eats (Var sm2) (Var sn2),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Sym Trans, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm EQ Var sm2, Var sn EQ Var sn2,\n                       HTuple (Suc 0) EQ HTuple (Suc 0),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"SeqStTermP v a (Var sn) (Var sn2') s' (Var n2)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm EQ Var sm2, Var sn EQ Var sn2,\n                       HTuple (Suc 0) EQ HTuple (Suc 0),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      SeqStTermP v a (Var sn) (Var sn2') s' (Var n2)\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqStTermP v a (Var sn) (Var sn2') s' (Var n2),\n                       Var sm EQ Var sm2, Var sn EQ Var sn2,\n                       HTuple (Suc 0) EQ HTuple (Suc 0),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Hyp SeqStTermP_cong [OF Hyp Refl Refl, THEN Iff_MP2_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqStTermP v a (Var sn) (Var sn2') s' (Var n2),\n                       Var sm EQ Var sm2, Var sn EQ Var sn2,\n                       HTuple (Suc 0) EQ HTuple (Suc 0),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"SeqStTermP v a (Var sm) (Var sm2') s' (Var m2)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqStTermP v a (Var sn) (Var sn2') s' (Var n2),\n                       Var sm EQ Var sm2, Var sn EQ Var sn2,\n                       HTuple (Suc 0) EQ HTuple (Suc 0),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      SeqStTermP v a (Var sm) (Var sm2') s' (Var m2)\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqStTermP v a (Var sm) (Var sm2') s' (Var m2),\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2),\n                       Var sm EQ Var sm2, Var sn EQ Var sn2,\n                       HTuple (Suc 0) EQ HTuple (Suc 0),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Hyp SeqStTermP_cong [OF Hyp Refl Refl, THEN Iff_MP2_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqStTermP v a (Var sm) (Var sm2') s' (Var m2),\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2),\n                       Var sm EQ Var sm2, Var sn EQ Var sn2,\n                       HTuple (Suc 0) EQ HTuple (Suc 0),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH, blast intro: thin1 ContraProve)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm2' EQ Var sm', Var sn2' EQ Var sn',\n                       SeqStTermP v a (Var sm) (Var sm2') s' (Var m2),\n                       SeqStTermP v a (Var sn) (Var sn2') s' (Var n2),\n                       Var sm EQ Var sm2, Var sn EQ Var sn2,\n                       HTuple (Suc 0) EQ HTuple (Suc 0),\n                       Var i EQ Q_Eats (Var sm) (Var sn),\n                       Var j EQ Q_Eats (Var sm') (Var sn'),\n                       SeqStTermP v a (Var sn) (Var sn') s (Var n),\n                       SeqStTermP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       Var i EQ Q_Eats (Var sm2) (Var sn2),\n                       Var j' EQ Q_Eats (Var sm2') (Var sn2'),\n                       SeqStTermP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqStTermP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqStTermP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqStTermP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqStTermP v a (Var i) (Var j') s' (Var k'),\n                       SeqStTermP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k), VarP v} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: HPair_cong Trans [OF Hyp Sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {OrdP (Var k), VarP v} \\<turnstile>\n  SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "hence p1: \"{OrdP (Var k), VarP v}\n             \\<turnstile> (All j (All j' (All k' (SeqStTermP v a (Var i) (Var j) s (Var k)\n                 IMP (SeqStTermP v a (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))(i::=t)\""], ["proof (prove)\nusing this:\n  {OrdP (Var k), VarP v} \\<turnstile>\n  SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n          SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))\n\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    (SyntaxN.All j\n      (SyntaxN.All j'\n        (SyntaxN.All k'\n          (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n           SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n           Var j' EQ Var j))))(i::=t)", "by (metis All_D)"], ["proof (state)\nthis:\n  {OrdP (Var k), VarP v} \\<turnstile>\n  (SyntaxN.All j\n    (SyntaxN.All j'\n      (SyntaxN.All k'\n        (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n         SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n         Var j' EQ Var j))))(i::=t)\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "have p2: \"{OrdP (Var k), VarP v}\n         \\<turnstile> (All j' (All k' (SeqStTermP v a t (Var j) s (Var k)\n                 IMP (SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ Var j))))(j::=u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    (SyntaxN.All j'\n      (SyntaxN.All k'\n        (SeqStTermP v a t (Var j) s (Var k) IMP\n         SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ Var j)))(j::=u)", "apply (rule All_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a t (Var j) s (Var k) IMP\n          SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ Var j)))", "using atoms p1"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', v, a, t, u, u')\n  atom j \\<sharp> (s, s', v, a, t, i, t, u, u')\n  atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u')\n  atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n  {OrdP (Var k), VarP v} \\<turnstile>\n  (SyntaxN.All j\n    (SyntaxN.All j'\n      (SyntaxN.All k'\n        (SeqStTermP v a (Var i) (Var j) s (Var k) IMP\n         SeqStTermP v a (Var i) (Var j') s' (Var k') IMP\n         Var j' EQ Var j))))(i::=t)\n\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqStTermP v a t (Var j) s (Var k) IMP\n          SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ Var j)))", "by simp"], ["proof (state)\nthis:\n  {OrdP (Var k), VarP v} \\<turnstile>\n  (SyntaxN.All j'\n    (SyntaxN.All k'\n      (SeqStTermP v a t (Var j) s (Var k) IMP\n       SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ Var j)))(j::=u)\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "have p3: \"{OrdP (Var k), VarP v}\n             \\<turnstile> (All k' (SeqStTermP v a t u s (Var k) IMP (SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ u)))(j'::=u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    (SyntaxN.All k'\n      (SeqStTermP v a t u s (Var k) IMP\n       SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ u))(j'::=u')", "apply (rule All_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqStTermP v a t u s (Var k) IMP\n        SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ u))", "using atoms p2"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', v, a, t, u, u')\n  atom j \\<sharp> (s, s', v, a, t, i, t, u, u')\n  atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u')\n  atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n  {OrdP (Var k), VarP v} \\<turnstile>\n  (SyntaxN.All j'\n    (SyntaxN.All k'\n      (SeqStTermP v a t (Var j) s (Var k) IMP\n       SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ Var j)))(j::=u)\n\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqStTermP v a t u s (Var k) IMP\n        SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ u))", "by simp"], ["proof (state)\nthis:\n  {OrdP (Var k), VarP v} \\<turnstile>\n  (SyntaxN.All k'\n    (SeqStTermP v a t u s (Var k) IMP\n     SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ u))(j'::=u')\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "have p4: \"{OrdP (Var k), VarP v}\n          \\<turnstile> (SeqStTermP v a t u s (Var k) IMP (SeqStTermP v a t u' s' (Var k') IMP u' EQ u))(k'::=kk')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    (SeqStTermP v a t u s (Var k) IMP\n     SeqStTermP v a t u' s' (Var k') IMP u' EQ u)(k'::=kk')", "apply (rule All_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    SyntaxN.All k'\n     (SeqStTermP v a t u s (Var k) IMP\n      SeqStTermP v a t u' s' (Var k') IMP u' EQ u)", "using atoms p3"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', v, a, t, u, u')\n  atom j \\<sharp> (s, s', v, a, t, i, t, u, u')\n  atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u')\n  atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n  {OrdP (Var k), VarP v} \\<turnstile>\n  (SyntaxN.All k'\n    (SeqStTermP v a t u s (Var k) IMP\n     SeqStTermP v a t (Var j') s' (Var k') IMP Var j' EQ u))(j'::=u')\n\ngoal (1 subgoal):\n 1. {OrdP (Var k), VarP v} \\<turnstile>\n    SyntaxN.All k'\n     (SeqStTermP v a t u s (Var k) IMP\n      SeqStTermP v a t u' s' (Var k') IMP u' EQ u)", "by simp"], ["proof (state)\nthis:\n  {OrdP (Var k), VarP v} \\<turnstile>\n  (SeqStTermP v a t u s (Var k) IMP\n   SeqStTermP v a t u' s' (Var k') IMP u' EQ u)(k'::=kk')\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "hence \"{SeqStTermP v a t u s (Var k), VarP v} \\<turnstile> SeqStTermP v a t u s (Var k) IMP (SeqStTermP v a t u' s' kk' IMP u' EQ u)\""], ["proof (prove)\nusing this:\n  {OrdP (Var k), VarP v} \\<turnstile>\n  (SeqStTermP v a t u s (Var k) IMP\n   SeqStTermP v a t u' s' (Var k') IMP u' EQ u)(k'::=kk')\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s (Var k), VarP v} \\<turnstile>\n    SeqStTermP v a t u s (Var k) IMP SeqStTermP v a t u' s' kk' IMP u' EQ u", "using atoms"], ["proof (prove)\nusing this:\n  {OrdP (Var k), VarP v} \\<turnstile>\n  (SeqStTermP v a t u s (Var k) IMP\n   SeqStTermP v a t u' s' (Var k') IMP u' EQ u)(k'::=kk')\n  atom i \\<sharp> (s, s', v, a, t, u, u')\n  atom j \\<sharp> (s, s', v, a, t, i, t, u, u')\n  atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u')\n  atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s (Var k), VarP v} \\<turnstile>\n    SeqStTermP v a t u s (Var k) IMP SeqStTermP v a t u' s' kk' IMP u' EQ u", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{OrdP (Var k), VarP v} \\<turnstile>\n             SeqStTermP v a t u s (Var k) IMP\n             SeqStTermP v a t u' s' kk' IMP u' EQ u;\n     atom i \\<sharp> (s, s', v, a, t, u, u');\n     atom j \\<sharp> (s, s', v, a, t, i, t, u, u');\n     atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u');\n     atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqStTermP v a t u s (Var k), VarP v} \\<turnstile>\n                      SeqStTermP v a t u s (Var k) IMP\n                      SeqStTermP v a t u' s' kk' IMP u' EQ u", "by (metis SeqStTermP_imp_OrdP rcut1)"], ["proof (state)\nthis:\n  {SeqStTermP v a t u s (Var k), VarP v} \\<turnstile>\n  SeqStTermP v a t u s (Var k) IMP SeqStTermP v a t u' s' kk' IMP u' EQ u\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "hence \"{VarP v} \\<turnstile> ((SeqStTermP v a t u s (Var k) IMP (SeqStTermP v a t u' s' kk' IMP u' EQ u)))\""], ["proof (prove)\nusing this:\n  {SeqStTermP v a t u s (Var k), VarP v} \\<turnstile>\n  SeqStTermP v a t u s (Var k) IMP SeqStTermP v a t u' s' kk' IMP u' EQ u\n\ngoal (1 subgoal):\n 1. {VarP v} \\<turnstile>\n    SeqStTermP v a t u s (Var k) IMP SeqStTermP v a t u' s' kk' IMP u' EQ u", "by (metis Assume MP_same Imp_I)"], ["proof (state)\nthis:\n  {VarP v} \\<turnstile>\n  SeqStTermP v a t u s (Var k) IMP SeqStTermP v a t u' s' kk' IMP u' EQ u\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "hence \"{VarP v} \\<turnstile> ((SeqStTermP v a t u s (Var k) IMP (SeqStTermP v a t u' s' kk' IMP u' EQ u)))(k::=kk)\""], ["proof (prove)\nusing this:\n  {VarP v} \\<turnstile>\n  SeqStTermP v a t u s (Var k) IMP SeqStTermP v a t u' s' kk' IMP u' EQ u\n\ngoal (1 subgoal):\n 1. {VarP v} \\<turnstile>\n    (SeqStTermP v a t u s (Var k) IMP\n     SeqStTermP v a t u' s' kk' IMP u' EQ u)(k::=kk)", "using atoms"], ["proof (prove)\nusing this:\n  {VarP v} \\<turnstile>\n  SeqStTermP v a t u s (Var k) IMP SeqStTermP v a t u' s' kk' IMP u' EQ u\n  atom i \\<sharp> (s, s', v, a, t, u, u')\n  atom j \\<sharp> (s, s', v, a, t, i, t, u, u')\n  atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u')\n  atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {VarP v} \\<turnstile>\n    (SeqStTermP v a t u s (Var k) IMP\n     SeqStTermP v a t u' s' kk' IMP u' EQ u)(k::=kk)", "by (force intro!: Subst)"], ["proof (state)\nthis:\n  {VarP v} \\<turnstile>\n  (SeqStTermP v a t u s (Var k) IMP\n   SeqStTermP v a t u' s' kk' IMP u' EQ u)(k::=kk)\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "hence \"{VarP v} \\<turnstile> SeqStTermP v a t u s kk IMP (SeqStTermP v a t u' s' kk' IMP u' EQ u)\""], ["proof (prove)\nusing this:\n  {VarP v} \\<turnstile>\n  (SeqStTermP v a t u s (Var k) IMP\n   SeqStTermP v a t u' s' kk' IMP u' EQ u)(k::=kk)\n\ngoal (1 subgoal):\n 1. {VarP v} \\<turnstile>\n    SeqStTermP v a t u s kk IMP SeqStTermP v a t u' s' kk' IMP u' EQ u", "using atoms"], ["proof (prove)\nusing this:\n  {VarP v} \\<turnstile>\n  (SeqStTermP v a t u s (Var k) IMP\n   SeqStTermP v a t u' s' kk' IMP u' EQ u)(k::=kk)\n  atom i \\<sharp> (s, s', v, a, t, u, u')\n  atom j \\<sharp> (s, s', v, a, t, i, t, u, u')\n  atom j' \\<sharp> (s, s', v, a, t, i, j, t, u, u')\n  atom k \\<sharp> (s, s', v, a, t, u, u', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, t, u, u', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, t, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {VarP v} \\<turnstile>\n    SeqStTermP v a t u s kk IMP SeqStTermP v a t u' s' kk' IMP u' EQ u", "by simp"], ["proof (state)\nthis:\n  {VarP v} \\<turnstile>\n  SeqStTermP v a t u s kk IMP SeqStTermP v a t u' s' kk' IMP u' EQ u\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "hence \"{SeqStTermP v a t u s kk} \\<turnstile> SeqStTermP v a t u s kk IMP (SeqStTermP v a t u' s' kk' IMP u' EQ u)\""], ["proof (prove)\nusing this:\n  {VarP v} \\<turnstile>\n  SeqStTermP v a t u s kk IMP SeqStTermP v a t u' s' kk' IMP u' EQ u\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk} \\<turnstile>\n    SeqStTermP v a t u s kk IMP SeqStTermP v a t u' s' kk' IMP u' EQ u", "by (metis SeqStTermP_imp_VarP rcut1)"], ["proof (state)\nthis:\n  {SeqStTermP v a t u s kk} \\<turnstile>\n  SeqStTermP v a t u s kk IMP SeqStTermP v a t u' s' kk' IMP u' EQ u\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "thus ?thesis"], ["proof (prove)\nusing this:\n  {SeqStTermP v a t u s kk} \\<turnstile>\n  SeqStTermP v a t u s kk IMP SeqStTermP v a t u' s' kk' IMP u' EQ u\n\ngoal (1 subgoal):\n 1. {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile>\n    u' EQ u", "by (metis Assume AssumeH(2) MP_same rcut1)"], ["proof (state)\nthis:\n  {SeqStTermP v a t u s kk, SeqStTermP v a t u' s' kk'} \\<turnstile> u' EQ u\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem SubstTermP_unique: \"{SubstTermP v tm t u, SubstTermP v tm t u'} \\<turnstile> u' EQ u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SubstTermP v tm t u, SubstTermP v tm t u'} \\<turnstile> u' EQ u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SubstTermP v tm t u, SubstTermP v tm t u'} \\<turnstile> u' EQ u", "obtain s::name and s'::name and k::name and k'::name\n    where \"atom s \\<sharp> (v,tm,t,u,u',k,k')\" \"atom s' \\<sharp> (v,tm,t,u,u',k,k',s)\"\n          \"atom k \\<sharp> (v,tm,t,u,u')\" \"atom k' \\<sharp> (v,tm,t,u,u',k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k k' s'.\n        \\<lbrakk>atom s \\<sharp> (v, tm, t, u, u', k, k');\n         atom s' \\<sharp> (v, tm, t, u, u', k, k', s);\n         atom k \\<sharp> (v, tm, t, u, u');\n         atom k' \\<sharp> (v, tm, t, u, u', k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, tm, t, u, u', k, k')\n  atom s' \\<sharp> (v, tm, t, u, u', k, k', s)\n  atom k \\<sharp> (v, tm, t, u, u')\n  atom k' \\<sharp> (v, tm, t, u, u', k)\n\ngoal (1 subgoal):\n 1. {SubstTermP v tm t u, SubstTermP v tm t u'} \\<turnstile> u' EQ u", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, tm, t, u, u', k, k')\n  atom s' \\<sharp> (v, tm, t, u, u', k, k', s)\n  atom k \\<sharp> (v, tm, t, u, u')\n  atom k' \\<sharp> (v, tm, t, u, u', k)\n\ngoal (1 subgoal):\n 1. {SubstTermP v tm t u, SubstTermP v tm t u'} \\<turnstile> u' EQ u", "by (auto simp: SubstTermP.simps [of s v tm t u k]  SubstTermP.simps [of s' v tm t u' k'])\n       (metis SeqStTermP_unique rotate3 thin1)"], ["proof (state)\nthis:\n  {SubstTermP v tm t u, SubstTermP v tm t u'} \\<turnstile> u' EQ u\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>@{term SubstAtomicP}\\<close>"], ["", "lemma SubstTermP_eq:\n  \"\\<lbrakk>H \\<turnstile> SubstTermP v tm x z; insert (SubstTermP v tm y z) H \\<turnstile> A\\<rbrakk> \\<Longrightarrow> insert (x EQ y) H \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile> SubstTermP v tm x z;\n     insert (SubstTermP v tm y z) H \\<turnstile> A\\<rbrakk>\n    \\<Longrightarrow> insert (x EQ y) H \\<turnstile> A", "by (metis Assume rotate2 Iff_E1 cut_same thin1 SubstTermP_cong [OF Refl Refl _ Refl])"], ["", "lemma SubstAtomicP_unique: \"{SubstAtomicP v tm x y, SubstAtomicP v tm x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SubstAtomicP v tm x y, SubstAtomicP v tm x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SubstAtomicP v tm x y, SubstAtomicP v tm x y'} \\<turnstile> y' EQ y", "obtain t::name and ts::name and u::name and us::name\n     and t'::name and ts'::name and u'::name and us'::name\n    where \"atom t \\<sharp> (v,tm,x,y,y',ts,u,us)\"  \"atom ts \\<sharp> (v,tm,x,y,y',u,us)\"\n          \"atom u \\<sharp> (v,tm,x,y,y',us)\"       \"atom us \\<sharp> (v,tm,x,y,y')\"\n          \"atom t' \\<sharp> (v,tm,x,y,y',t,ts,u,us,ts',u',us')\" \"atom ts' \\<sharp> (v,tm,x,y,y',t,ts,u,us,u',us')\"\n          \"atom u' \\<sharp> (v,tm,x,y,y',t,ts,u,us,us')\"        \"atom us' \\<sharp> (v,tm,x,y,y',t,ts,u,us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t ts u us t' ts' u' us'.\n        \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n         atom ts \\<sharp> (v, tm, x, y, y', u, us);\n         atom u \\<sharp> (v, tm, x, y, y', us);\n         atom us \\<sharp> (v, tm, x, y, y');\n         atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n         atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n         atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n         atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom t \\<sharp> (v, tm, x, y, y', ts, u, us)\n  atom ts \\<sharp> (v, tm, x, y, y', u, us)\n  atom u \\<sharp> (v, tm, x, y, y', us)\n  atom us \\<sharp> (v, tm, x, y, y')\n  atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us')\n  atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us')\n  atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us')\n  atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\n\ngoal (1 subgoal):\n 1. {SubstAtomicP v tm x y, SubstAtomicP v tm x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom t \\<sharp> (v, tm, x, y, y', ts, u, us)\n  atom ts \\<sharp> (v, tm, x, y, y', u, us)\n  atom u \\<sharp> (v, tm, x, y, y', us)\n  atom us \\<sharp> (v, tm, x, y, y')\n  atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us')\n  atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us')\n  atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us')\n  atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\n\ngoal (1 subgoal):\n 1. {SubstAtomicP v tm x y, SubstAtomicP v tm x y'} \\<turnstile> y' EQ y", "apply (simp add: SubstAtomicP.simps [of t v tm x y ts u us]\n                     SubstAtomicP.simps [of t' v tm x y' ts' u' us'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex t\n                        (SyntaxN.Ex u\n                          (SyntaxN.Ex ts\n                            (SyntaxN.Ex us\n                              (SubstTermP v tm (Var t) (Var ts) AND\n                               SubstTermP v tm (Var u) (Var us) AND\n                               (x EQ Q_Eq (Var t) (Var u) AND\n                                y EQ Q_Eq (Var ts) (Var us) OR\n                                x EQ Q_Mem (Var t) (Var u) AND\n                                y EQ Q_Mem (Var ts) (Var us)))))),\n                       SyntaxN.Ex t'\n                        (SyntaxN.Ex u'\n                          (SyntaxN.Ex ts'\n                            (SyntaxN.Ex us'\n                              (SubstTermP v tm (Var t') (Var ts') AND\n                               SubstTermP v tm (Var u') (Var us') AND\n                               (x EQ Q_Eq (Var t') (Var u') AND\n                                y' EQ Q_Eq (Var ts') (Var us') OR\n                                x EQ Q_Mem (Var t') (Var u') AND\n                                y' EQ\n                                Q_Mem (Var ts') (Var us'))))))} \\<turnstile>\n                      y' EQ y", "apply (rule Ex_EH Disj_EH Conj_EH)+"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ Q_Eq (Var t) (Var u),\n                       y EQ Q_Eq (Var ts) (Var us),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ Q_Eq (Var t') (Var u'),\n                       y' EQ Q_Eq (Var ts') (Var us'),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 2. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ Q_Mem (Var t) (Var u) AND\n                       y EQ Q_Mem (Var ts) (Var us),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ Q_Eq (Var t') (Var u'),\n                       y' EQ Q_Eq (Var ts') (Var us'),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 3. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ Q_Mem (Var t') (Var u') AND\n                       y' EQ Q_Mem (Var ts') (Var us'),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts'),\n                       SubstTermP v tm (Var t) (Var ts) AND\n                       SubstTermP v tm (Var u) (Var us) AND\n                       (x EQ Q_Eq (Var t) (Var u) AND\n                        y EQ Q_Eq (Var ts) (Var us) OR\n                        x EQ Q_Mem (Var t) (Var u) AND\n                        y EQ Q_Mem (Var ts) (Var us))} \\<turnstile>\n                      y' EQ y\n 4. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> atom us' \\<sharp> y' EQ y\n 5. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SubstTermP v tm (Var t) (Var ts) AND\nSubstTermP v tm (Var u) (Var us) AND\n(x EQ Q_Eq (Var t) (Var u) AND y EQ Q_Eq (Var ts) (Var us) OR\n x EQ Q_Mem (Var t) (Var u) AND y EQ Q_Mem (Var ts) (Var us))}.\n                         atom us' \\<sharp> C\n 6. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> atom ts' \\<sharp> y' EQ y\n 7. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SubstTermP v tm (Var t) (Var ts) AND\nSubstTermP v tm (Var u) (Var us) AND\n(x EQ Q_Eq (Var t) (Var u) AND y EQ Q_Eq (Var ts) (Var us) OR\n x EQ Q_Mem (Var t) (Var u) AND y EQ Q_Mem (Var ts) (Var us))}.\n                         atom ts' \\<sharp> C\n 8. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> atom u' \\<sharp> y' EQ y\n 9. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SubstTermP v tm (Var t) (Var ts) AND\nSubstTermP v tm (Var u) (Var us) AND\n(x EQ Q_Eq (Var t) (Var u) AND y EQ Q_Eq (Var ts) (Var us) OR\n x EQ Q_Mem (Var t) (Var u) AND y EQ Q_Mem (Var ts) (Var us))}.\n                         atom u' \\<sharp> C\n 10. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n      atom ts \\<sharp> (v, tm, x, y, y', u, us);\n      atom u \\<sharp> (v, tm, x, y, y', us);\n      atom us \\<sharp> (v, tm, x, y, y');\n      atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n      atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n      atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n      atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n     \\<Longrightarrow> atom t' \\<sharp> y' EQ y\nA total of 19 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ Q_Eq (Var t) (Var u),\n                       y EQ Q_Eq (Var ts) (Var us),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ Q_Eq (Var t') (Var u'),\n                       y' EQ Q_Eq (Var ts') (Var us'),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 2. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ Q_Mem (Var t) (Var u) AND\n                       y EQ Q_Mem (Var ts) (Var us),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ Q_Eq (Var t') (Var u'),\n                       y' EQ Q_Eq (Var ts') (Var us'),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 3. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ Q_Mem (Var t') (Var u') AND\n                       y' EQ Q_Mem (Var ts') (Var us'),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts'),\n                       SubstTermP v tm (Var t) (Var ts) AND\n                       SubstTermP v tm (Var u) (Var us) AND\n                       (x EQ Q_Eq (Var t) (Var u) AND\n                        y EQ Q_Eq (Var ts) (Var us) OR\n                        x EQ Q_Mem (Var t) (Var u) AND\n                        y EQ Q_Mem (Var ts) (Var us))} \\<turnstile>\n                      y' EQ y", "apply (rule Eq_Trans_E [OF Hyp], auto simp: HTS)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {Zero EQ Zero, Var t EQ Var t', Var u EQ Var u',\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 2. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 3. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 4. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule SubstTermP_eq [THEN thin1], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {SubstTermP v tm (Var t') (Var ts), Var u EQ Var u',\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 2. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 3. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 4. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule SubstTermP_eq [THEN rotate2], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {SubstTermP v tm (Var u') (Var us),\n                       SubstTermP v tm (Var t') (Var ts),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 2. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 3. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 4. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule Trans [OF Hyp Sym], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {SubstTermP v tm (Var u') (Var us),\n                       SubstTermP v tm (Var t') (Var ts),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y EQ\n                      HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                       (HPair (Var ts') (Var us'))\n 2. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 3. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 4. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule Trans [OF Hyp], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {SubstTermP v tm (Var u') (Var us),\n                       SubstTermP v tm (Var t') (Var ts),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                       (HPair (Var ts) (Var us)) EQ\n                      HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                       (HPair (Var ts') (Var us'))\n 2. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 3. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 4. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (metis Assume AssumeH(8) HPair_cong Refl cut2 [OF SubstTermP_unique] thin1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       SubstTermP v tm (Var t) (Var ts),\n                       x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 2. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 3. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule Eq_Trans_E [OF Hyp], blast, force simp add: HTS)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero (HPair Zero (HPair Zero Zero)))\n                        (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y\n 2. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule Eq_Trans_E [OF Hyp], blast, force simp add: HTS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {x EQ HPair (HPair Zero Zero) (HPair (Var t) (Var u)),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule Eq_Trans_E [OF Hyp], auto simp: HTS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {Zero EQ Zero, Var t EQ Var t', Var u EQ Var u',\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule SubstTermP_eq [THEN thin1], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {SubstTermP v tm (Var t') (Var ts), Var u EQ Var u',\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule SubstTermP_eq [THEN rotate2], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {SubstTermP v tm (Var u') (Var us),\n                       SubstTermP v tm (Var t') (Var ts),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y' EQ y", "apply (rule Trans [OF Hyp Sym], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {SubstTermP v tm (Var u') (Var us),\n                       SubstTermP v tm (Var t') (Var ts),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      y EQ\n                      HPair (HPair Zero Zero) (HPair (Var ts') (Var us'))", "apply (rule Trans [OF Hyp], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom t \\<sharp> (v, tm, x, y, y', ts, u, us);\n     atom ts \\<sharp> (v, tm, x, y, y', u, us);\n     atom u \\<sharp> (v, tm, x, y, y', us);\n     atom us \\<sharp> (v, tm, x, y, y');\n     atom t' \\<sharp> (v, tm, x, y, y', t, ts, u, us, ts', u', us');\n     atom ts' \\<sharp> (v, tm, x, y, y', t, ts, u, us, u', us');\n     atom u' \\<sharp> (v, tm, x, y, y', t, ts, u, us, us');\n     atom us' \\<sharp> (v, tm, x, y, y', t, ts, u, us)\\<rbrakk>\n    \\<Longrightarrow> {SubstTermP v tm (Var u') (Var us),\n                       SubstTermP v tm (Var t') (Var ts),\n                       y EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts) (Var us)),\n                       SubstTermP v tm (Var u) (Var us),\n                       x EQ\n                       HPair (HPair Zero Zero) (HPair (Var t') (Var u')),\n                       y' EQ\n                       HPair (HPair Zero Zero) (HPair (Var ts') (Var us')),\n                       SubstTermP v tm (Var t) (Var ts),\n                       SubstTermP v tm (Var u') (Var us'),\n                       SubstTermP v tm (Var t') (Var ts')} \\<turnstile>\n                      HPair (HPair Zero Zero) (HPair (Var ts) (Var us)) EQ\n                      HPair (HPair Zero Zero) (HPair (Var ts') (Var us'))", "apply (metis Assume AssumeH(8) HPair_cong Refl cut2 [OF SubstTermP_unique] thin1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {SubstAtomicP v tm x y, SubstAtomicP v tm x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>@{term SeqSubstFormP}\\<close>"], ["", "lemma SeqSubstFormP_lemma:\n  assumes \"atom m \\<sharp> (v,u,x,y,s,k,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (v,u,x,y,s,k,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (v,u,x,y,s,k,sm',sn,sn')\"  \"atom sm' \\<sharp> (v,u,x,y,s,k,sn,sn')\"\n          \"atom sn \\<sharp> (v,u,x,y,s,k,sn')\"         \"atom sn' \\<sharp> (v,u,x,y,s,k)\"\n  shows \"{ SeqSubstFormP v u x y s k }\n         \\<turnstile> SubstAtomicP v u x y  OR\n           Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN k AND Var n IN k AND\n                       SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                       SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                       (((x EQ Q_Disj (Var sm) (Var sn) AND y EQ Q_Disj (Var sm') (Var sn')) OR\n                        (x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm')) OR\n                        (x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqSubstFormP v u x y s k} \\<turnstile>\n    SubstAtomicP v u x y OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                (x EQ Q_Disj (Var sm) (Var sn) AND\n                 y EQ Q_Disj (Var sm') (Var sn') OR\n                 x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                 x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqSubstFormP v u x y s k} \\<turnstile>\n    SubstAtomicP v u x y OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                (x EQ Q_Disj (Var sm) (Var sn) AND\n                 y EQ Q_Disj (Var sm') (Var sn') OR\n                 x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                 x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))", "obtain l::name and sl::name and sl'::name\n    where \"atom l \\<sharp> (v,u,x,y,s,k,sl,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl \\<sharp> (v,u,x,y,s,k,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl' \\<sharp> (v,u,x,y,s,k,m,n,sm,sm',sn,sn')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl'.\n        \\<lbrakk>atom\n                  l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                              sn');\n         atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n         atom\n          sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn')\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v u x y s k} \\<turnstile>\n    SubstAtomicP v u x y OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                (x EQ Q_Disj (Var sm) (Var sn) AND\n                 y EQ Q_Disj (Var sm') (Var sn') OR\n                 x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                 x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn')\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v u x y s k} \\<turnstile>\n    SubstAtomicP v u x y OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                (x EQ Q_Disj (Var sm) (Var sn) AND\n                 y EQ Q_Disj (Var sm') (Var sn') OR\n                 x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                 x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))", "using assms"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn')\n  atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn')\n  atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn')\n  atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn')\n  atom sn \\<sharp> (v, u, x, y, s, k, sn')\n  atom sn' \\<sharp> (v, u, x, y, s, k)\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v u x y s k} \\<turnstile>\n    SubstAtomicP v u x y OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                (x EQ Q_Disj (Var sm) (Var sn) AND\n                 y EQ Q_Disj (Var sm') (Var sn') OR\n                 x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                 x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))", "apply (simp add: SeqSubstFormP.simps [of l s k v u sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {LstSeqP s k (HPair x y) AND\n                       All2 l (SUCC k)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND\n     Var sl' EQ Q_Ex (Var sm'))))))))))))} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))", "apply (rule Conj_EH Ex_EH All2_SUCC_E [THEN rotate2] | simp)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (HPair (Var sl) (Var sl')) IN s,\n                       SubstAtomicP v u (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var sl EQ Q_Neg (Var sm) AND\n                                    Var sl' EQ Q_Neg (Var sm') OR\n                                    Var sl EQ Q_Ex (Var sm) AND\n                                    Var sl' EQ Q_Ex (Var sm')))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SubstAtomicP v u x y OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n          SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n          (x EQ Q_Disj (Var sm) (Var sn) AND\n           y EQ Q_Disj (Var sm') (Var sn') OR\n           x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n           x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SubstAtomicP v u x y OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n         SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n         (x EQ Q_Disj (Var sm) (Var sn) AND\n          y EQ Q_Disj (Var sm') (Var sn') OR\n          x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n          x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl \\<sharp> C", "apply (rule cut_same [where A = \"HPair x y EQ HPair (Var sl) (Var sl')\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (HPair (Var sl) (Var sl')) IN s,\n                       SubstAtomicP v u (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var sl EQ Q_Neg (Var sm) AND\n                                    Var sl' EQ Q_Neg (Var sm') OR\n                                    Var sl EQ Q_Ex (Var sm) AND\n                                    Var sl' EQ Q_Ex (Var sm')))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      HPair x y EQ HPair (Var sl) (Var sl')\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair x y EQ HPair (Var sl) (Var sl'),\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       SubstAtomicP v u (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var sl EQ Q_Neg (Var sm) AND\n                                    Var sl' EQ Q_Neg (Var sm') OR\n                                    Var sl EQ Q_Ex (Var sm) AND\n                                    Var sl' EQ Q_Ex (Var sm')))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SubstAtomicP v u x y OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n          SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n          (x EQ Q_Disj (Var sm) (Var sn) AND\n           y EQ Q_Disj (Var sm') (Var sn') OR\n           x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n           x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SubstAtomicP v u x y OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n         SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n         (x EQ Q_Disj (Var sm) (Var sn) AND\n          y EQ Q_Disj (Var sm') (Var sn') OR\n          x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n          x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl \\<sharp> C", "apply (metis Assume AssumeH(4) LstSeqP_EQ)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair x y EQ HPair (Var sl) (Var sl'),\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       SubstAtomicP v u (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var sl EQ Q_Neg (Var sm) AND\n                                    Var sl' EQ Q_Neg (Var sm') OR\n                                    Var sl EQ Q_Ex (Var sm) AND\n                                    Var sl' EQ Q_Ex (Var sm')))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SubstAtomicP v u x y OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n          SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n          (x EQ Q_Disj (Var sm) (Var sn) AND\n           y EQ Q_Disj (Var sm') (Var sn') OR\n           x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n           x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SubstAtomicP v u x y OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n         SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n         (x EQ Q_Disj (Var sm) (Var sn) AND\n          y EQ Q_Disj (Var sm') (Var sn') OR\n          x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n          x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl \\<sharp> C", "apply clarify"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       SubstAtomicP v u (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var sl EQ Q_Neg (Var sm) AND\n                                    Var sl' EQ Q_Neg (Var sm') OR\n                                    Var sl EQ Q_Ex (Var sm) AND\n                                    Var sl' EQ Q_Ex (Var sm')))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SubstAtomicP v u x y OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n          SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n          (x EQ Q_Disj (Var sm) (Var sn) AND\n           y EQ Q_Disj (Var sm') (Var sn') OR\n           x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n           x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SubstAtomicP v u x y OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n         SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n         (x EQ Q_Disj (Var sm) (Var sn) AND\n          y EQ Q_Disj (Var sm') (Var sn') OR\n          x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n          x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl \\<sharp> C", "apply (rule Disj_EH)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SubstAtomicP v u (Var sl) (Var sl'), x EQ Var sl,\n                       y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var sl EQ Q_Neg (Var sm) AND\n                                    Var sl' EQ Q_Neg (Var sm') OR\n                                    Var sl EQ Q_Ex (Var sm) AND\n                                    Var sl' EQ Q_Ex (Var sm')))))))),\n                       x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SubstAtomicP v u x y OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n          SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n          (x EQ Q_Disj (Var sm) (Var sn) AND\n           y EQ Q_Disj (Var sm') (Var sn') OR\n           x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n           x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SubstAtomicP v u x y OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n         SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n         (x EQ Q_Disj (Var sm) (Var sn) AND\n          y EQ Q_Disj (Var sm') (Var sn') OR\n          x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n          x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl \\<sharp> C", "apply (blast intro: Disj_I1 SubstAtomicP_cong [THEN Iff_MP2_same])\n    \\<comment> \\<open>now the quantified cases\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var sl EQ Q_Neg (Var sm) AND\n                                    Var sl' EQ Q_Neg (Var sm') OR\n                                    Var sl EQ Q_Ex (Var sm) AND\n                                    Var sl' EQ Q_Ex (Var sm')))))))),\n                       x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SubstAtomicP v u x y OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n          SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n          (x EQ Q_Disj (Var sm) (Var sn) AND\n           y EQ Q_Disj (Var sm') (Var sn') OR\n           x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n           x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SubstAtomicP v u x y OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n         SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n         (x EQ Q_Disj (Var sm) (Var sn) AND\n          y EQ Q_Disj (Var sm') (Var sn') OR\n          x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n          x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sl \\<sharp> C", "apply (rule Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SubstAtomicP v u x y OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n          SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n          (x EQ Q_Disj (Var sm) (Var sn) AND\n           y EQ Q_Disj (Var sm') (Var sn') OR\n           x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n           x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, y EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SubstAtomicP v u x y OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n         SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n         (x EQ Q_Disj (Var sm) (Var sn) AND\n          y EQ Q_Disj (Var sm') (Var sn') OR\n          x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n          x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 5. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, y EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SubstAtomicP v u x y OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n          SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n          (x EQ Q_Disj (Var sm) (Var sn) AND\n           y EQ Q_Disj (Var sm') (Var sn') OR\n           x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n           x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 7. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, y EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SubstAtomicP v u x y OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n         SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n         (x EQ Q_Disj (Var sm) (Var sn) AND\n          y EQ Q_Disj (Var sm') (Var sn') OR\n          x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n          x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n 9. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, y EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (SubstAtomicP v u (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                    Var sl EQ Q_Neg (Var sm) AND\n                    Var sl' EQ Q_Neg (Var sm') OR\n                    Var sl EQ Q_Ex (Var sm) AND\n                    Var sl' EQ Q_Ex (Var sm')))))))))))),\nLstSeqP s k (HPair x y)}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom\n               l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                           sn');\n      atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n      atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n      atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n      atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n      atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n      atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n      atom sn \\<sharp> (v, u, x, y, s, k, sn');\n      atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SubstAtomicP v u x y OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n         SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n         (x EQ Q_Disj (Var sm) (Var sn) AND\n          y EQ Q_Disj (Var sm') (Var sn') OR\n          x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n          x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\nA total of 17 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SubstAtomicP v u x y OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))", "apply (rule Disj_I2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqSubstFormP v u (Var sm) (Var sm') s\n                                   (Var m) AND\n                                  SeqSubstFormP v u (Var sn) (Var sn') s\n                                   (Var n) AND\n                                  (x EQ Q_Disj (Var sm) (Var sn) AND\n                                   y EQ Q_Disj (Var sm') (Var sn') OR\n                                   x EQ Q_Neg (Var sm) AND\n                                   y EQ Q_Neg (Var sm') OR\n                                   x EQ Q_Ex (Var sm) AND\n                                   y EQ Q_Ex (Var sm'))))))))", "apply (rule Ex_I [where x = \"Var m\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SyntaxN.Ex n\n                       (SyntaxN.Ex sm\n                         (SyntaxN.Ex sm'\n                           (SyntaxN.Ex sn\n                             (SyntaxN.Ex sn'\n                               (Var m IN k AND\n                                Var n IN k AND\n                                SeqSubstFormP v u (Var sm) (Var sm') s\n                                 (Var m) AND\n                                SeqSubstFormP v u (Var sn) (Var sn') s\n                                 (Var n) AND\n                                (x EQ Q_Disj (Var sm) (Var sn) AND\n                                 y EQ Q_Disj (Var sm') (Var sn') OR\n                                 x EQ Q_Neg (Var sm) AND\n                                 y EQ Q_Neg (Var sm') OR\n                                 x EQ Q_Ex (Var sm) AND\n                                 y EQ Q_Ex (Var sm')))))))", "apply (rule Ex_I [where x = \"Var n\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SyntaxN.Ex sm\n                       (SyntaxN.Ex sm'\n                         (SyntaxN.Ex sn\n                           (SyntaxN.Ex sn'\n                             (Var m IN k AND\n                              Var n IN k AND\n                              SeqSubstFormP v u (Var sm) (Var sm') s\n                               (Var m) AND\n                              SeqSubstFormP v u (Var sn) (Var sn') s\n                               (Var n) AND\n                              (x EQ Q_Disj (Var sm) (Var sn) AND\n                               y EQ Q_Disj (Var sm') (Var sn') OR\n                               x EQ Q_Neg (Var sm) AND\n                               y EQ Q_Neg (Var sm') OR\n                               x EQ Q_Ex (Var sm) AND\n                               y EQ Q_Ex (Var sm'))))))", "apply (rule Ex_I [where x = \"Var sm\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SyntaxN.Ex sm'\n                       (SyntaxN.Ex sn\n                         (SyntaxN.Ex sn'\n                           (Var m IN k AND\n                            Var n IN k AND\n                            SeqSubstFormP v u (Var sm) (Var sm') s\n                             (Var m) AND\n                            SeqSubstFormP v u (Var sn) (Var sn') s\n                             (Var n) AND\n                            (x EQ Q_Disj (Var sm) (Var sn) AND\n                             y EQ Q_Disj (Var sm') (Var sn') OR\n                             x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                             x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm')))))", "apply (rule Ex_I [where x = \"Var sm'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SyntaxN.Ex sn\n                       (SyntaxN.Ex sn'\n                         (Var m IN k AND\n                          Var n IN k AND\n                          SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                          SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                          (x EQ Q_Disj (Var sm) (Var sn) AND\n                           y EQ Q_Disj (Var sm') (Var sn') OR\n                           x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                           x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))", "apply (rule Ex_I [where x = \"Var sn\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SyntaxN.Ex sn'\n                       (Var m IN k AND\n                        Var n IN k AND\n                        SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                        SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                        (x EQ Q_Disj (Var sm) (Var sn) AND\n                         y EQ Q_Disj (Var sm') (Var sn') OR\n                         x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                         x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm')))", "apply (rule Ex_I [where x = \"Var sn'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      Var m IN k AND\n                      Var n IN k AND\n                      SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n                      SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n                      (x EQ Q_Disj (Var sm) (Var sn) AND\n                       y EQ Q_Disj (Var sm') (Var sn') OR\n                       x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                       x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))", "apply (simp_all add: SeqSubstFormP.simps [of l s _ v u sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      Var m IN k AND\n                      Var n IN k AND\n                      (LstSeqP s (Var m) (HPair (Var sm) (Var sm')) AND\n                       All2 l (SUCC (Var m))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm'))))))))))))) AND\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm'))))))))))))) AND\n                      (x EQ Q_Disj (Var sm) (Var sn) AND\n                       y EQ Q_Disj (Var sm') (Var sn') OR\n                       x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                       x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))", "apply ((rule Conj_I)+, blast intro: LstSeqP_Mem)+\n    \\<comment> \\<open>first SeqSubstFormP subgoal\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      All2 l (SUCC (Var m))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (SubstAtomicP v u (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n    Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n    Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm'))))))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm'))))))))))))) AND\n                      (x EQ Q_Disj (Var sm) (Var sn) AND\n                       y EQ Q_Disj (Var sm') (Var sn') OR\n                       x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                       x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))", "apply (rule All2_Subset [OF Hyp], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SUCC (Var m) SUBS k\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                           (SubstAtomicP v u (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n   Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n   Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n   Var sl EQ Q_Ex (Var sm) AND\n   Var sl' EQ Q_Ex (Var sm')))))))))))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                          (SubstAtomicP v u (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n  Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n  Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n  Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> (SUCC (Var m), k)\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm'))))))))))))) AND\n                      (x EQ Q_Disj (Var sm) (Var sn) AND\n                       y EQ Q_Disj (Var sm') (Var sn') OR\n                       x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                       x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))", "apply (blast intro!: SUCC_Subset_Ord LstSeqP_OrdP, blast, simp)\n    \\<comment> \\<open>next SeqSubstFormP subgoal\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm'))))))))))))) AND\n                      (x EQ Q_Disj (Var sm) (Var sn) AND\n                       y EQ Q_Disj (Var sm') (Var sn') OR\n                       x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                       x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))", "apply ((rule Conj_I)+, blast intro: LstSeqP_Mem)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      All2 l (SUCC (Var n))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (SubstAtomicP v u (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n    Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n    Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n    Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm'))))))))))))\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      x EQ Q_Disj (Var sm) (Var sn) AND\n                      y EQ Q_Disj (Var sm') (Var sn') OR\n                      x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                      x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm')", "apply (rule All2_Subset [OF Hyp], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      SUCC (Var n) SUBS k\n 2. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                           (SubstAtomicP v u (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n   Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n   Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n   Var sl EQ Q_Ex (Var sm) AND\n   Var sl' EQ Q_Ex (Var sm')))))))))))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                          (SubstAtomicP v u (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n  Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n  Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n  Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))\n 3. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> (SUCC (Var n), k)\n 4. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      x EQ Q_Disj (Var sm) (Var sn) AND\n                      y EQ Q_Disj (Var sm') (Var sn') OR\n                      x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                      x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm')", "apply (blast intro!: SUCC_Subset_Ord LstSeqP_OrdP, blast, simp)\n    \\<comment> \\<open>finally, the equality pairs\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm'),\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      x EQ Q_Disj (Var sm) (Var sn) AND\n                      y EQ Q_Disj (Var sm') (Var sn') OR\n                      x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                      x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm')", "apply (rule anti_deduction [THEN thin1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                      Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                      Var sl EQ Q_Neg (Var sm) AND\n                      Var sl' EQ Q_Neg (Var sm') OR\n                      Var sl EQ Q_Ex (Var sm) AND\n                      Var sl' EQ Q_Ex (Var sm') IMP\n                      x EQ Q_Disj (Var sm) (Var sn) AND\n                      y EQ Q_Disj (Var sm') (Var sn') OR\n                      x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                      x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm')", "apply (rule Sym_L [THEN rotate4])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ x,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                      Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                      Var sl EQ Q_Neg (Var sm) AND\n                      Var sl' EQ Q_Neg (Var sm') OR\n                      Var sl EQ Q_Ex (Var sm) AND\n                      Var sl' EQ Q_Ex (Var sm') IMP\n                      x EQ Q_Disj (Var sm) (Var sn) AND\n                      y EQ Q_Disj (Var sm') (Var sn') OR\n                      x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                      x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm')", "apply (rule Var_Eq_subst_Iff [THEN Iff_MP_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ x,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, y EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm') IMP\n                       x EQ Q_Disj (Var sm) (Var sn) AND\n                       y EQ Q_Disj (Var sm') (Var sn') OR\n                       x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                       x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))(sl::=x)", "apply (rule Sym_L [THEN rotate5])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom\n              l \\<sharp> (v, u, x, y, s, k, sl, sl', m, n, sm, sm', sn,\n                          sn');\n     atom sl \\<sharp> (v, u, x, y, s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (v, u, x, y, s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (v, u, x, y, s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (v, u, x, y, s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (v, u, x, y, s, k, sm', sn, sn');\n     atom sm' \\<sharp> (v, u, x, y, s, k, sn, sn');\n     atom sn \\<sharp> (v, u, x, y, s, k, sn');\n     atom sn' \\<sharp> (v, u, x, y, s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl' EQ y, Var sl EQ x,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k,\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (SubstAtomicP v u (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n     Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n     Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n     Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))),\n                       LstSeqP s k (HPair x y)} \\<turnstile>\n                      (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n                       Var sl EQ Q_Neg (Var sm) AND\n                       Var sl' EQ Q_Neg (Var sm') OR\n                       Var sl EQ Q_Ex (Var sm) AND\n                       Var sl' EQ Q_Ex (Var sm') IMP\n                       x EQ Q_Disj (Var sm) (Var sn) AND\n                       y EQ Q_Disj (Var sm') (Var sn') OR\n                       x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n                       x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))(sl::=x)", "apply (rule Var_Eq_subst_Iff [THEN Iff_MP_same], force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {SeqSubstFormP v u x y s k} \\<turnstile>\n  SubstAtomicP v u x y OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN k AND\n              Var n IN k AND\n              SeqSubstFormP v u (Var sm) (Var sm') s (Var m) AND\n              SeqSubstFormP v u (Var sn) (Var sn') s (Var n) AND\n              (x EQ Q_Disj (Var sm) (Var sn) AND\n               y EQ Q_Disj (Var sm') (Var sn') OR\n               x EQ Q_Neg (Var sm) AND y EQ Q_Neg (Var sm') OR\n               x EQ Q_Ex (Var sm) AND y EQ Q_Ex (Var sm'))))))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \n  shows Neg_SubstAtomicP_Fls:  \"{y EQ Q_Neg z,  SubstAtomicP v tm y y'} \\<turnstile> Fls\"    (is ?thesis1)\n    and Disj_SubstAtomicP_Fls: \"{y EQ Q_Disj z w, SubstAtomicP v tm y y'} \\<turnstile> Fls\"  (is ?thesis2)\n    and Ex_SubstAtomicP_Fls:   \"{y EQ Q_Ex z,   SubstAtomicP v tm y y'} \\<turnstile> Fls\"    (is ?thesis3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y EQ Q_Neg z, SubstAtomicP v tm y y'} \\<turnstile> Fls &&&\n    {y EQ Q_Disj z w, SubstAtomicP v tm y y'} \\<turnstile> Fls &&&\n    {y EQ Q_Ex z, SubstAtomicP v tm y y'} \\<turnstile> Fls", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. {y EQ Q_Neg z, SubstAtomicP v tm y y'} \\<turnstile> Fls\n 2. {y EQ Q_Disj z w, SubstAtomicP v tm y y'} \\<turnstile> Fls\n 3. {y EQ Q_Ex z, SubstAtomicP v tm y y'} \\<turnstile> Fls", "obtain t::name and u::name and t'::name  and u'::name\n    where \"atom t \\<sharp> (z,w,v,tm,y,y',t',u,u')\" \"atom t' \\<sharp> (z,w,v,tm,y,y',u,u')\"\n          \"atom u \\<sharp> (z,w,v,tm,y,y',u')\" \"atom u' \\<sharp> (z,w,v,tm,y,y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t t' u u'.\n        \\<lbrakk>atom t \\<sharp> (z, w, v, tm, y, y', t', u, u');\n         atom t' \\<sharp> (z, w, v, tm, y, y', u, u');\n         atom u \\<sharp> (z, w, v, tm, y, y', u');\n         atom u' \\<sharp> (z, w, v, tm, y, y')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom t \\<sharp> (z, w, v, tm, y, y', t', u, u')\n  atom t' \\<sharp> (z, w, v, tm, y, y', u, u')\n  atom u \\<sharp> (z, w, v, tm, y, y', u')\n  atom u' \\<sharp> (z, w, v, tm, y, y')\n\ngoal (3 subgoals):\n 1. {y EQ Q_Neg z, SubstAtomicP v tm y y'} \\<turnstile> Fls\n 2. {y EQ Q_Disj z w, SubstAtomicP v tm y y'} \\<turnstile> Fls\n 3. {y EQ Q_Ex z, SubstAtomicP v tm y y'} \\<turnstile> Fls", "thus ?thesis1 ?thesis2 ?thesis3"], ["proof (prove)\nusing this:\n  atom t \\<sharp> (z, w, v, tm, y, y', t', u, u')\n  atom t' \\<sharp> (z, w, v, tm, y, y', u, u')\n  atom u \\<sharp> (z, w, v, tm, y, y', u')\n  atom u' \\<sharp> (z, w, v, tm, y, y')\n\ngoal (1 subgoal):\n 1. {y EQ Q_Neg z, SubstAtomicP v tm y y'} \\<turnstile> Fls &&&\n    {y EQ Q_Disj z w, SubstAtomicP v tm y y'} \\<turnstile> Fls &&&\n    {y EQ Q_Ex z, SubstAtomicP v tm y y'} \\<turnstile> Fls", "by (auto simp: SubstAtomicP.simps [of t v tm y y' t' u u'] HTS  intro: Eq_Trans_E [OF Hyp])"], ["proof (state)\nthis:\n  {y EQ Q_Neg z, SubstAtomicP v tm y y'} \\<turnstile> Fls\n  {y EQ Q_Disj z w, SubstAtomicP v tm y y'} \\<turnstile> Fls\n  {y EQ Q_Ex z, SubstAtomicP v tm y y'} \\<turnstile> Fls\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqSubstFormP_eq:\n  \"\\<lbrakk>H \\<turnstile> SeqSubstFormP v tm x z s k; insert (SeqSubstFormP v tm y z s k) H \\<turnstile> A\\<rbrakk> \n   \\<Longrightarrow> insert (x EQ y) H \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile> SeqSubstFormP v tm x z s k;\n     insert (SeqSubstFormP v tm y z s k) H \\<turnstile> A\\<rbrakk>\n    \\<Longrightarrow> insert (x EQ y) H \\<turnstile> A", "apply (rule cut_same [OF SeqSubstFormP_cong [OF Assume Refl Refl Refl, THEN Iff_MP_same]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>H \\<turnstile> SeqSubstFormP v tm x z s k;\n     insert (SeqSubstFormP v tm y z s k) H \\<turnstile> A\\<rbrakk>\n    \\<Longrightarrow> insert (x EQ y) H \\<turnstile>\n                      SeqSubstFormP ?v2 ?i2 x ?u2 ?s2 ?k2\n 2. \\<lbrakk>H \\<turnstile> SeqSubstFormP v tm x z s k;\n     insert (SeqSubstFormP v tm y z s k) H \\<turnstile> A\\<rbrakk>\n    \\<Longrightarrow> insert (SeqSubstFormP ?v2 ?i2 y ?u2 ?s2 ?k2)\n                       (insert (x EQ y) H) \\<turnstile>\n                      A", "apply (auto simp: insert_commute intro: thin1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SeqSubstFormP_unique: \"{SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "obtain i::name and j::name and j'::name and k::name and k'::name and l::name\n     and m::name and n::name and sm::name and sn::name and sm'::name and sn'::name\n     and m2::name and n2::name and sm2::name and sn2::name and sm2'::name and sn2'::name\n    where atoms:  \"atom i \\<sharp> (s,s',v,a,x,y,y')\"   \"atom j \\<sharp> (s,s',v,a,x,i,x,y,y')\"\n                  \"atom j' \\<sharp> (s,s',v,a,x,i,j,x,y,y')\"\n                  \"atom k \\<sharp> (s,s',v,a,x,y,y',kk',i,j,j')\" \"atom k' \\<sharp> (s,s',v,a,x,y,y',k,i,j,j')\"\n                  \"atom l \\<sharp> (s,s',v,a,x,i,j,j',k,k')\"\n                  \"atom m \\<sharp> (s,s',v,a,i,j,j',k,k',l)\"   \"atom n \\<sharp> (s,s',v,a,i,j,j',k,k',l,m)\"\n                  \"atom sm \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n)\"  \"atom sn \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm)\"\n                  \"atom sm' \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn)\"   \"atom sn' \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm')\"\n                  \"atom m2 \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn')\"   \"atom n2 \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2)\"\n                  \"atom sm2 \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2)\"  \"atom sn2 \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2)\"\n                  \"atom sm2' \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2,sn2)\"   \"atom sn2' \\<sharp> (s,s',v,a,i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2,sn2,sm2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j j' k k' l m n sm sn sm' sn' m2 n2 sm2 sn2 sm2' sn2'.\n        \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n         atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n         atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n         atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n         atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n         atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n         atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n         atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n         atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n         atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n         atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n         atom\n          sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n         atom\n          m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                       sn');\n         atom\n          n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                       sn', m2);\n         atom\n          sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                        sn', m2, n2);\n         atom\n          sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                        sn', m2, n2, sm2);\n         atom\n          sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                         sn', m2, n2, sm2, sn2);\n         atom\n          sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                         sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom i \\<sharp> (s, s', v, a, x, y, y')\n  atom j \\<sharp> (s, s', v, a, x, i, x, y, y')\n  atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y')\n  atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "have \"{ OrdP (Var k) }\n       \\<turnstile> All i (All j (All j' (All k' (SeqSubstFormP v a (Var i) (Var j) s (Var k)\n                                  IMP (SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All i\n     (SyntaxN.All j\n       (SyntaxN.All j'\n         (SyntaxN.All k'\n           (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n            SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n            Var j' EQ Var j))))", "apply (rule OrdIndH [where j=l])"], ["proof (prove)\ngoal (2 subgoals):\n 1. atom\n     l \\<sharp> (k, SyntaxN.All i\n                     (SyntaxN.All j\n                       (SyntaxN.All j'\n                         (SyntaxN.All k'\n                           (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n                            SeqSubstFormP v a (Var i) (Var j') s'\n                             (Var k') IMP\n                            Var j' EQ Var j)))))\n 2. {} \\<turnstile>\n    SyntaxN.All k\n     (OrdP (Var k) IMP\n      All2 l (Var k)\n       ((SyntaxN.All i\n          (SyntaxN.All j\n            (SyntaxN.All j'\n              (SyntaxN.All k'\n                (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n                 SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n                 Var j' EQ Var j)))))(k::=Var l)) IMP\n      SyntaxN.All i\n       (SyntaxN.All j\n         (SyntaxN.All j'\n           (SyntaxN.All k'\n             (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n              SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n              Var j' EQ Var j)))))", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', v, a, x, y, y')\n  atom j \\<sharp> (s, s', v, a, x, i, x, y, y')\n  atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y')\n  atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (2 subgoals):\n 1. atom\n     l \\<sharp> (k, SyntaxN.All i\n                     (SyntaxN.All j\n                       (SyntaxN.All j'\n                         (SyntaxN.All k'\n                           (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n                            SeqSubstFormP v a (Var i) (Var j') s'\n                             (Var k') IMP\n                            Var j' EQ Var j)))))\n 2. {} \\<turnstile>\n    SyntaxN.All k\n     (OrdP (Var k) IMP\n      All2 l (Var k)\n       ((SyntaxN.All i\n          (SyntaxN.All j\n            (SyntaxN.All j'\n              (SyntaxN.All k'\n                (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n                 SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n                 Var j' EQ Var j)))))(k::=Var l)) IMP\n      SyntaxN.All i\n       (SyntaxN.All j\n         (SyntaxN.All j'\n           (SyntaxN.All k'\n             (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n              SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n              Var j' EQ Var j)))))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Neg (Var j' EQ Var j),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      SyntaxN.Ex l\n                       (Neg (Var l IN Var k IMP\n                             SyntaxN.All i\n                              (SyntaxN.All j\n                                (SyntaxN.All j'\n                                  (SyntaxN.All k'\n                                    (SeqSubstFormP v a (Var i) (Var j) s\n(Var l) IMP\n                                     SeqSubstFormP v a (Var i) (Var j') s'\n(Var k') IMP\n                                     Var j' EQ Var j))))))", "apply (rule Swap)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      ?A88\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {?A88,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut1 [OF SeqSubstFormP_lemma [of m v a \"Var i\" \"Var j\" s \"Var k\" n sm sm' sn sn']], simp_all, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      ?A102\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {?A102,\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut1 [OF SeqSubstFormP_lemma [of m2 v a \"Var i\" \"Var j'\" s' \"Var k'\" n2 sm2 sm2' sn2 sn2']], simp_all, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SubstAtomicP v a (Var i) (Var j') OR\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH Conj_EH)+\n    \\<comment> \\<open>case 1, both sides are atomic\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SubstAtomicP v a (Var i) (Var j),\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: cut2 [OF SubstAtomicP_unique])\n    \\<comment> \\<open>case 2, atomic and also not\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Ex_EH Conj_EH Disj_EH)+"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn' \\<sharp> Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SubstAtomicP v a (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn' \\<sharp> C\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn \\<sharp> Var j' EQ Var j\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SubstAtomicP v a (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn \\<sharp> C\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm' \\<sharp> Var j' EQ Var j\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SubstAtomicP v a (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sm' \\<sharp> C\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm \\<sharp> Var j' EQ Var j\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n      atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n      atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n      atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> \\<forall>C\\<in>{SubstAtomicP v a (Var i) (Var j'),\n All2 l (Var k)\n  (SyntaxN.All i\n    (SyntaxN.All j\n      (SyntaxN.All j'\n        (SyntaxN.All k'\n          (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n           SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n           Var j' EQ Var j))))),\n SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n SeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                          atom sm \\<sharp> C\nA total of 15 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (metis Assume AssumeH(7) Disj_I1 Neg_I anti_deduction cut2 [OF Disj_SubstAtomicP_Fls])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (metis Assume AssumeH(7) Disj_I1 Neg_I anti_deduction cut2 [OF Neg_SubstAtomicP_Fls])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SubstAtomicP v a (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (metis Assume AssumeH(7) Disj_I1 Neg_I anti_deduction cut2 [OF Ex_SubstAtomicP_Fls])\n    \\<comment> \\<open>towards remaining cases\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       SubstAtomicP v a (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH Ex_EH)+"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       SubstAtomicP v a (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       SubstAtomicP v a (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SubstAtomicP v a (Var i) (Var j),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SubstAtomicP v a (Var i) (Var j),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SubstAtomicP v a (Var i) (Var j),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n      atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n      atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n      atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> \\<forall>C\\<in>{SubstAtomicP v a (Var i) (Var j),\n All2 l (Var k)\n  (SyntaxN.All i\n    (SyntaxN.All j\n      (SyntaxN.All j'\n        (SyntaxN.All k'\n          (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n           SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n           Var j' EQ Var j))))),\n SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n SeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                          atom sm2 \\<sharp> C\nA total of 15 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       SubstAtomicP v a (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       SubstAtomicP v a (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (metis Assume AssumeH(7) Disj_I1 Neg_I anti_deduction cut2 [OF Disj_SubstAtomicP_Fls])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       SubstAtomicP v a (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2), Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       SubstAtomicP v a (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       SubstAtomicP v a (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (metis Assume AssumeH(7) Disj_I1 Neg_I anti_deduction cut2 [OF Neg_SubstAtomicP_Fls])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       SubstAtomicP v a (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2), Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       SubstAtomicP v a (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (metis Assume AssumeH(7) Disj_I1 Neg_I anti_deduction cut2 [OF Ex_SubstAtomicP_Fls])\n    \\<comment> \\<open>towards remaining cases\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqSubstFormP v a (Var sm) (Var sm') s\n                                    (Var m) AND\n                                   SeqSubstFormP v a (Var sn) (Var sn') s\n                                    (Var n) AND\n                                   (Var i EQ Q_Disj (Var sm) (Var sn) AND\n                                    Var j EQ Q_Disj (Var sm') (Var sn') OR\n                                    Var i EQ Q_Neg (Var sm) AND\n                                    Var j EQ Q_Neg (Var sm') OR\n                                    Var i EQ Q_Ex (Var sm) AND\n                                    Var j EQ Q_Ex (Var sm')))))))),\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH Ex_EH)+"], ["proof (prove)\ngoal (27 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Disj (Var sm) (Var sn),\nVar j EQ Q_Disj (Var sm') (Var sn'),\nSeqSubstFormP v a (Var sn) (Var sn') s (Var n),\nSeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\nVar m IN Var k,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Disj (Var sm) (Var sn),\nVar j EQ Q_Disj (Var sm') (Var sn'),\nSeqSubstFormP v a (Var sn) (Var sn') s (Var n),\nSeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\nVar m IN Var k,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Disj (Var sm) (Var sn),\nVar j EQ Q_Disj (Var sm') (Var sn'),\nSeqSubstFormP v a (Var sn) (Var sn') s (Var n),\nSeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\nVar m IN Var k,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n      atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n      atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n      atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Disj (Var sm) (Var sn),\n Var j EQ Q_Disj (Var sm') (Var sn'),\n SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n SeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\n Var m IN Var k,\n All2 l (Var k)\n  (SyntaxN.All i\n    (SyntaxN.All j\n      (SyntaxN.All j'\n        (SyntaxN.All k'\n          (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n           SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n           Var j' EQ Var j))))),\n SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n SeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                          atom sm2 \\<sharp> C\nA total of 27 subgoals...", "apply simp_all\n    \\<comment> \\<open>case two Disj terms\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E' [OF Hyp, where x=\"Var m\"], blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(Var l IN Var k IMP\n                        SyntaxN.All i\n                         (SyntaxN.All j\n                           (SyntaxN.All j'\n                             (SyntaxN.All k'\n                               (SeqSubstFormP v a (Var i) (Var j) s\n                                 (Var l) IMP\n                                SeqSubstFormP v a (Var i) (Var j') s'\n                                 (Var k') IMP\n                                Var j' EQ Var j)))))(l::=Var m),\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E' [OF Hyp, where x=\"Var n\"], blast, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var n IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var n) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var m IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var m) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH, blast intro: thin1 ContraProve)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var m) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var n) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqSubstFormP v a (Var sm) (Var j) s\n                              (Var m) IMP\n                             SeqSubstFormP v a (Var sm) (Var j') s'\n                              (Var k') IMP\n                             Var j' EQ Var j))),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var n) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm'\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqSubstFormP v a (Var sm) (Var sm') s\n                            (Var m) IMP\n                           SeqSubstFormP v a (Var sm) (Var j') s'\n                            (Var k') IMP\n                           Var j' EQ Var sm')),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var n) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm2'\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                         SeqSubstFormP v a (Var sm) (Var sm2') s'\n                          (Var k') IMP\n                         Var sm2' EQ Var sm'),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var n) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var m2\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var n) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn\", THEN rotate2], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqSubstFormP v a (Var sn) (Var j) s\n                              (Var n) IMP\n                             SeqSubstFormP v a (Var sn) (Var j') s'\n                              (Var k') IMP\n                             Var j' EQ Var j))),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn'\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqSubstFormP v a (Var sn) (Var sn') s\n                            (Var n) IMP\n                           SeqSubstFormP v a (Var sn) (Var j') s'\n                            (Var k') IMP\n                           Var j' EQ Var sn')),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn2'\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqSubstFormP v a (Var sn) (Var sn') s (Var n) IMP\n                         SeqSubstFormP v a (Var sn) (Var sn2') s'\n                          (Var k') IMP\n                         Var sn2' EQ Var sn'),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var n2\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqSubstFormP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqSubstFormP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule rotate3)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqSubstFormP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Eq_Trans_E [OF Hyp], blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Q_Disj (Var sm2) (Var sn2) EQ\n                       Q_Disj (Var sm) (Var sn),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqSubstFormP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (clarsimp simp add: HTS)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Zero EQ Zero, Var sm2 EQ Var sm, Var sn2 EQ Var sn,\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqSubstFormP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var j' EQ\n                       HPair\n                        (HPair Zero\n                          (HPair Zero (HPair Zero (HPair Zero Zero))))\n                        (HPair (Var sm2') (Var sn2')),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ\n                       HPair\n                        (HPair Zero\n                          (HPair Zero (HPair Zero (HPair Zero Zero))))\n                        (HPair (Var sm) (Var sn)),\n                       Var j EQ\n                       HPair\n                        (HPair Zero\n                          (HPair Zero (HPair Zero (HPair Zero Zero))))\n                        (HPair (Var sm') (Var sn')),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule thin1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm2 EQ Var sm, Var sn2 EQ Var sn,\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n) IMP\n                       SeqSubstFormP v a (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var j' EQ\n                       HPair\n                        (HPair Zero\n                          (HPair Zero (HPair Zero (HPair Zero Zero))))\n                        (HPair (Var sm2') (Var sn2')),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ\n                       HPair\n                        (HPair Zero\n                          (HPair Zero (HPair Zero (HPair Zero Zero))))\n                        (HPair (Var sm) (Var sn)),\n                       Var j EQ\n                       HPair\n                        (HPair Zero\n                          (HPair Zero (HPair Zero (HPair Zero Zero))))\n                        (HPair (Var sm') (Var sn')),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH [OF ContraProve], blast intro: thin1 SeqSubstFormP_eq)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm2' EQ Var sm', Var sn2' EQ Var sn',\n                       Var sm2 EQ Var sm, Var sn2 EQ Var sn,\n                       Var j' EQ\n                       HPair\n                        (HPair Zero\n                          (HPair Zero (HPair Zero (HPair Zero Zero))))\n                        (HPair (Var sm2') (Var sn2')),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ\n                       HPair\n                        (HPair Zero\n                          (HPair Zero (HPair Zero (HPair Zero Zero))))\n                        (HPair (Var sm) (Var sn)),\n                       Var j EQ\n                       HPair\n                        (HPair Zero\n                          (HPair Zero (HPair Zero (HPair Zero Zero))))\n                        (HPair (Var sm') (Var sn')),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: HPair_cong Trans [OF Hyp Sym])\n    \\<comment> \\<open>towards remaining cases\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH)+\n    \\<comment> \\<open>Negation = Disjunction?\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2), Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Eq_Trans_E [OF Hyp], blast, force simp add: HTS)\n   \\<comment> \\<open>Existential = Disjunction?\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2), Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Disj (Var sm) (Var sn),\n                       Var j EQ Q_Disj (Var sm') (Var sn'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Eq_Trans_E [OF Hyp], blast, force simp add: HTS)\n     \\<comment> \\<open>towards remaining cases\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm) AND\n                       Var j EQ Q_Neg (Var sm') OR\n                       Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH Ex_EH)+"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Neg (Var sm),\nVar j EQ Q_Neg (Var sm'), SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\nSeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\nVar m IN Var k,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Neg (Var sm),\nVar j EQ Q_Neg (Var sm'), SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\nSeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\nVar m IN Var k,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Neg (Var sm),\nVar j EQ Q_Neg (Var sm'), SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\nSeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\nVar m IN Var k,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n      atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n      atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n      atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Neg (Var sm),\n Var j EQ Q_Neg (Var sm'), SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n SeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\n Var m IN Var k,\n All2 l (Var k)\n  (SyntaxN.All i\n    (SyntaxN.All j\n      (SyntaxN.All j'\n        (SyntaxN.All k'\n          (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n           SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n           Var j' EQ Var j))))),\n SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n SeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                          atom sm2 \\<sharp> C\nA total of 15 subgoals...", "apply simp_all\n    \\<comment> \\<open>Disjunction = Negation?\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Eq_Trans_E [OF Hyp], blast, force simp add: HTS)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH)+\n    \\<comment> \\<open>case two Neg terms\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2), Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Eq_Trans_E [OF Hyp], blast, clarify)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {HTuple 4 EQ HTuple 4, Var sm2 EQ Var sm,\n                       Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule thin1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm2 EQ Var sm, Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E' [OF Hyp, where x=\"Var m\"], blast, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var m IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var m) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH, blast intro: thin1 ContraProve)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var m) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqSubstFormP v a (Var sm) (Var j) s\n                              (Var m) IMP\n                             SeqSubstFormP v a (Var sm) (Var j') s'\n                              (Var k') IMP\n                             Var j' EQ Var j))),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm'\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqSubstFormP v a (Var sm) (Var sm') s\n                            (Var m) IMP\n                           SeqSubstFormP v a (Var sm) (Var j') s'\n                            (Var k') IMP\n                           Var j' EQ Var sm')),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm2'\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                         SeqSubstFormP v a (Var sm) (Var sm2') s'\n                          (Var k') IMP\n                         Var sm2' EQ Var sm'),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var m2\"], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var sm2 EQ Var sm, Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH [OF ContraProve], blast intro: SeqSubstFormP_eq Sym_L)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm2' EQ Var sm', Var sm2 EQ Var sm,\n                       Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: HPair_cong Sym Trans [OF Hyp])\n    \\<comment> \\<open>Existential = Negation?\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2), Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Neg (Var sm), Var j EQ Q_Neg (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Eq_Trans_E [OF Hyp], blast, force simp add: HTS)\n     \\<comment> \\<open>towards remaining cases\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm) AND Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqSubstFormP v a (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqSubstFormP v a (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   (Var i EQ Q_Disj (Var sm2) (Var sn2) AND\n                                    Var j' EQ\n                                    Q_Disj (Var sm2') (Var sn2') OR\n                                    Var i EQ Q_Neg (Var sm2) AND\n                                    Var j' EQ Q_Neg (Var sm2') OR\n                                    Var i EQ Q_Ex (Var sm2) AND\n                                    Var j' EQ Q_Ex (Var sm2')))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH Ex_EH)+"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Ex (Var sm),\nVar j EQ Q_Ex (Var sm'), SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\nSeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\nVar m IN Var k,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 5. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 6. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Ex (Var sm),\nVar j EQ Q_Ex (Var sm'), SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\nSeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\nVar m IN Var k,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 7. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 8. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Ex (Var sm),\nVar j EQ Q_Ex (Var sm'), SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\nSeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\nVar m IN Var k,\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))),\nSeqSubstFormP v a (Var i) (Var j') s' (Var k'),\nSeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 9. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 10. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n      atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n      atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n      atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n      atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n      atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n      atom\n       sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom\n       m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                    sn');\n      atom\n       n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2);\n      atom\n       sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2);\n      atom\n       sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                      sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> \\<forall>C\\<in>{Var i EQ Q_Ex (Var sm),\n Var j EQ Q_Ex (Var sm'), SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n SeqSubstFormP v a (Var sm) (Var sm') s (Var m), Var n IN Var k,\n Var m IN Var k,\n All2 l (Var k)\n  (SyntaxN.All i\n    (SyntaxN.All j\n      (SyntaxN.All j'\n        (SyntaxN.All k'\n          (SeqSubstFormP v a (Var i) (Var j) s (Var l) IMP\n           SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n           Var j' EQ Var j))))),\n SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n SeqSubstFormP v a (Var i) (Var j) s (Var k), OrdP (Var k)}.\n                          atom sm2 \\<sharp> C\nA total of 14 subgoals...", "apply simp_all\n    \\<comment> \\<open>Disjunction = Existential\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Disj (Var sm2) (Var sn2),\n                       Var j' EQ Q_Disj (Var sm2') (Var sn2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Eq_Trans_E [OF Hyp], blast, force simp add: HTS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2) AND\n                       Var j' EQ Q_Neg (Var sm2') OR\n                       Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Disj_EH Ex_EH)+\n    \\<comment> \\<open>Negation = Existential\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Neg (Var sm2), Var j' EQ Q_Neg (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Eq_Trans_E [OF Hyp], blast, force simp add: HTS)\n   \\<comment> \\<open>case two Ex terms\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2) AND\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Q_Ex (Var sm2), Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Eq_Trans_E [OF Hyp], blast, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {HTuple 5 EQ HTuple 5, Var sm2 EQ Var sm,\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule thin1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm2 EQ Var sm, Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E' [OF Hyp, where x=\"Var m\"], blast, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var m IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var m) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH, blast intro: thin1 ContraProve)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqSubstFormP v a (Var i) (Var j) s\n                                (Var m) IMP\n                               SeqSubstFormP v a (Var i) (Var j') s'\n                                (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqSubstFormP v a (Var sm) (Var j) s\n                              (Var m) IMP\n                             SeqSubstFormP v a (Var sm) (Var j') s'\n                              (Var k') IMP\n                             Var j' EQ Var j))),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqSubstFormP v a (Var sm) (Var sm') s\n                            (Var m) IMP\n                           SeqSubstFormP v a (Var sm) (Var j') s'\n                            (Var k') IMP\n                           Var j' EQ Var sm')),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm2'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                         SeqSubstFormP v a (Var sm) (Var sm2') s'\n                          (Var k') IMP\n                         Var sm2' EQ Var sm'),\n                       Var sm2 EQ Var sm, Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var m2\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqSubstFormP v a (Var sm) (Var sm') s (Var m) IMP\n                       SeqSubstFormP v a (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var sm2 EQ Var sm, Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH [OF ContraProve], blast intro: SeqSubstFormP_eq Sym_L)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', v, a, x, y, y');\n     atom j \\<sharp> (s, s', v, a, x, i, x, y, y');\n     atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y');\n     atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j');\n     atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k');\n     atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom\n      m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                   m2);\n     atom\n      sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2);\n     atom\n      sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                    m2, n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm',\n                     sn', m2, n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm2' EQ Var sm', Var sm2 EQ Var sm,\n                       Var j' EQ Q_Ex (Var sm2'),\n                       SeqSubstFormP v a (Var sn2) (Var sn2') s' (Var n2),\n                       SeqSubstFormP v a (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ Q_Ex (Var sm), Var j EQ Q_Ex (Var sm'),\n                       SeqSubstFormP v a (Var sn) (Var sn') s (Var n),\n                       SeqSubstFormP v a (Var sm) (Var sm') s (Var m),\n                       Var n IN Var k, Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqSubstFormP v a (Var i) (Var j) s\n                                  (Var l) IMP\n                                 SeqSubstFormP v a (Var i) (Var j') s'\n                                  (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqSubstFormP v a (Var i) (Var j') s' (Var k'),\n                       SeqSubstFormP v a (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: HPair_cong Sym Trans [OF Hyp])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "hence p1: \"{OrdP (Var k)}\n             \\<turnstile> (All j (All j' (All k' (SeqSubstFormP v a (Var i) (Var j) s (Var k)\n                 IMP (SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))(i::=x)\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n          SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n          Var j' EQ Var j))))\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    (SyntaxN.All j\n      (SyntaxN.All j'\n        (SyntaxN.All k'\n          (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n           SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n           Var j' EQ Var j))))(i::=x)", "by (metis All_D)"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  (SyntaxN.All j\n    (SyntaxN.All j'\n      (SyntaxN.All k'\n        (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n         SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n         Var j' EQ Var j))))(i::=x)\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "have p2: \"{OrdP (Var k)}\n            \\<turnstile> (All j' (All k' (SeqSubstFormP v a x (Var j) s (Var k)\n                 IMP (SeqSubstFormP v a x (Var j') s' (Var k') IMP Var j' EQ Var j))))(j::=y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    (SyntaxN.All j'\n      (SyntaxN.All k'\n        (SeqSubstFormP v a x (Var j) s (Var k) IMP\n         SeqSubstFormP v a x (Var j') s' (Var k') IMP\n         Var j' EQ Var j)))(j::=y)", "apply (rule All_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a x (Var j) s (Var k) IMP\n          SeqSubstFormP v a x (Var j') s' (Var k') IMP Var j' EQ Var j)))", "using atoms p1"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', v, a, x, y, y')\n  atom j \\<sharp> (s, s', v, a, x, i, x, y, y')\n  atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y')\n  atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n  {OrdP (Var k)} \\<turnstile>\n  (SyntaxN.All j\n    (SyntaxN.All j'\n      (SyntaxN.All k'\n        (SeqSubstFormP v a (Var i) (Var j) s (Var k) IMP\n         SeqSubstFormP v a (Var i) (Var j') s' (Var k') IMP\n         Var j' EQ Var j))))(i::=x)\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqSubstFormP v a x (Var j) s (Var k) IMP\n          SeqSubstFormP v a x (Var j') s' (Var k') IMP Var j' EQ Var j)))", "by simp"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  (SyntaxN.All j'\n    (SyntaxN.All k'\n      (SeqSubstFormP v a x (Var j) s (Var k) IMP\n       SeqSubstFormP v a x (Var j') s' (Var k') IMP\n       Var j' EQ Var j)))(j::=y)\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "have p3: \"{OrdP (Var k)}\n            \\<turnstile> (All k' (SeqSubstFormP v a x y s (Var k) \n                 IMP (SeqSubstFormP v a x (Var j') s' (Var k') IMP Var j' EQ y)))(j'::=y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    (SyntaxN.All k'\n      (SeqSubstFormP v a x y s (Var k) IMP\n       SeqSubstFormP v a x (Var j') s' (Var k') IMP Var j' EQ y))(j'::=y')", "apply (rule All_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqSubstFormP v a x y s (Var k) IMP\n        SeqSubstFormP v a x (Var j') s' (Var k') IMP Var j' EQ y))", "using atoms p2"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', v, a, x, y, y')\n  atom j \\<sharp> (s, s', v, a, x, i, x, y, y')\n  atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y')\n  atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n  {OrdP (Var k)} \\<turnstile>\n  (SyntaxN.All j'\n    (SyntaxN.All k'\n      (SeqSubstFormP v a x (Var j) s (Var k) IMP\n       SeqSubstFormP v a x (Var j') s' (Var k') IMP\n       Var j' EQ Var j)))(j::=y)\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqSubstFormP v a x y s (Var k) IMP\n        SeqSubstFormP v a x (Var j') s' (Var k') IMP Var j' EQ y))", "by simp"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  (SyntaxN.All k'\n    (SeqSubstFormP v a x y s (Var k) IMP\n     SeqSubstFormP v a x (Var j') s' (Var k') IMP Var j' EQ y))(j'::=y')\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "have p4: \"{OrdP (Var k)}\n          \\<turnstile> (SeqSubstFormP v a x y s (Var k) IMP (SeqSubstFormP v a x y' s' (Var k') IMP y' EQ y))(k'::=kk')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    (SeqSubstFormP v a x y s (Var k) IMP\n     SeqSubstFormP v a x y' s' (Var k') IMP y' EQ y)(k'::=kk')", "apply (rule All_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All k'\n     (SeqSubstFormP v a x y s (Var k) IMP\n      SeqSubstFormP v a x y' s' (Var k') IMP y' EQ y)", "using atoms p3"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', v, a, x, y, y')\n  atom j \\<sharp> (s, s', v, a, x, i, x, y, y')\n  atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y')\n  atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n  {OrdP (Var k)} \\<turnstile>\n  (SyntaxN.All k'\n    (SeqSubstFormP v a x y s (Var k) IMP\n     SeqSubstFormP v a x (Var j') s' (Var k') IMP Var j' EQ y))(j'::=y')\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All k'\n     (SeqSubstFormP v a x y s (Var k) IMP\n      SeqSubstFormP v a x y' s' (Var k') IMP y' EQ y)", "by simp"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  (SeqSubstFormP v a x y s (Var k) IMP\n   SeqSubstFormP v a x y' s' (Var k') IMP y' EQ y)(k'::=kk')\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "hence \"{OrdP (Var k)} \\<turnstile> SeqSubstFormP v a x y s (Var k) IMP (SeqSubstFormP v a x y' s' kk' IMP y' EQ y)\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  (SeqSubstFormP v a x y s (Var k) IMP\n   SeqSubstFormP v a x y' s' (Var k') IMP y' EQ y)(k'::=kk')\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SeqSubstFormP v a x y s (Var k) IMP\n    SeqSubstFormP v a x y' s' kk' IMP y' EQ y", "using atoms"], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  (SeqSubstFormP v a x y s (Var k) IMP\n   SeqSubstFormP v a x y' s' (Var k') IMP y' EQ y)(k'::=kk')\n  atom i \\<sharp> (s, s', v, a, x, y, y')\n  atom j \\<sharp> (s, s', v, a, x, i, x, y, y')\n  atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y')\n  atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SeqSubstFormP v a x y s (Var k) IMP\n    SeqSubstFormP v a x y' s' kk' IMP y' EQ y", "by simp"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SeqSubstFormP v a x y s (Var k) IMP\n  SeqSubstFormP v a x y' s' kk' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "hence \"{SeqSubstFormP v a x y s (Var k)} \n         \\<turnstile> SeqSubstFormP v a x y s (Var k) IMP (SeqSubstFormP v a x y' s' kk' IMP y' EQ y)\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SeqSubstFormP v a x y s (Var k) IMP\n  SeqSubstFormP v a x y' s' kk' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s (Var k)} \\<turnstile>\n    SeqSubstFormP v a x y s (Var k) IMP\n    SeqSubstFormP v a x y' s' kk' IMP y' EQ y", "by (metis SeqSubstFormP_imp_OrdP rcut1)"], ["proof (state)\nthis:\n  {SeqSubstFormP v a x y s (Var k)} \\<turnstile>\n  SeqSubstFormP v a x y s (Var k) IMP\n  SeqSubstFormP v a x y' s' kk' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "hence \"{} \\<turnstile> SeqSubstFormP v a x y s (Var k) IMP (SeqSubstFormP v a x y' s' kk' IMP y' EQ y)\""], ["proof (prove)\nusing this:\n  {SeqSubstFormP v a x y s (Var k)} \\<turnstile>\n  SeqSubstFormP v a x y s (Var k) IMP\n  SeqSubstFormP v a x y' s' kk' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    SeqSubstFormP v a x y s (Var k) IMP\n    SeqSubstFormP v a x y' s' kk' IMP y' EQ y", "by (metis Assume Disj_Neg_2 Disj_commute anti_deduction Imp_I)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  SeqSubstFormP v a x y s (Var k) IMP\n  SeqSubstFormP v a x y' s' kk' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "hence \"{} \\<turnstile> ((SeqSubstFormP v a x y s (Var k) IMP (SeqSubstFormP v a x y' s' kk' IMP y' EQ y)))(k::=kk)\""], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  SeqSubstFormP v a x y s (Var k) IMP\n  SeqSubstFormP v a x y' s' kk' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    (SeqSubstFormP v a x y s (Var k) IMP\n     SeqSubstFormP v a x y' s' kk' IMP y' EQ y)(k::=kk)", "using atoms"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  SeqSubstFormP v a x y s (Var k) IMP\n  SeqSubstFormP v a x y' s' kk' IMP y' EQ y\n  atom i \\<sharp> (s, s', v, a, x, y, y')\n  atom j \\<sharp> (s, s', v, a, x, i, x, y, y')\n  atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y')\n  atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    (SeqSubstFormP v a x y s (Var k) IMP\n     SeqSubstFormP v a x y' s' kk' IMP y' EQ y)(k::=kk)", "by (force intro!: Subst)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  (SeqSubstFormP v a x y s (Var k) IMP\n   SeqSubstFormP v a x y' s' kk' IMP y' EQ y)(k::=kk)\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (SeqSubstFormP v a x y s (Var k) IMP\n   SeqSubstFormP v a x y' s' kk' IMP y' EQ y)(k::=kk)\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "using atoms"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (SeqSubstFormP v a x y s (Var k) IMP\n   SeqSubstFormP v a x y' s' kk' IMP y' EQ y)(k::=kk)\n  atom i \\<sharp> (s, s', v, a, x, y, y')\n  atom j \\<sharp> (s, s', v, a, x, i, x, y, y')\n  atom j' \\<sharp> (s, s', v, a, x, i, j, x, y, y')\n  atom k \\<sharp> (s, s', v, a, x, y, y', kk', i, j, j')\n  atom k' \\<sharp> (s, s', v, a, x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', v, a, x, i, j, j', k, k')\n  atom m \\<sharp> (s, s', v, a, i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', v, a, i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom\n   n2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                 m2, n2, sm2)\n  atom\n   sm2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', v, a, i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                  m2, n2, sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n    y' EQ y", "by simp (metis DisjAssoc2 Disj_commute anti_deduction)"], ["proof (state)\nthis:\n  {SeqSubstFormP v a x y s kk, SeqSubstFormP v a x y' s' kk'} \\<turnstile>\n  y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>@{term SubstFormP}\\<close>"], ["", "theorem SubstFormP_unique: \"{SubstFormP v tm x y, SubstFormP v tm x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SubstFormP v tm x y, SubstFormP v tm x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SubstFormP v tm x y, SubstFormP v tm x y'} \\<turnstile> y' EQ y", "obtain s::name and s'::name and k::name and k'::name\n    where \"atom s \\<sharp> (v,tm,x,y,y',k,k')\" \"atom s' \\<sharp> (v,tm,x,y,y',k,k',s)\"\n          \"atom k \\<sharp> (v,tm,x,y,y')\" \"atom k' \\<sharp> (v,tm,x,y,y',k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k k' s'.\n        \\<lbrakk>atom s \\<sharp> (v, tm, x, y, y', k, k');\n         atom s' \\<sharp> (v, tm, x, y, y', k, k', s);\n         atom k \\<sharp> (v, tm, x, y, y');\n         atom k' \\<sharp> (v, tm, x, y, y', k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, tm, x, y, y', k, k')\n  atom s' \\<sharp> (v, tm, x, y, y', k, k', s)\n  atom k \\<sharp> (v, tm, x, y, y')\n  atom k' \\<sharp> (v, tm, x, y, y', k)\n\ngoal (1 subgoal):\n 1. {SubstFormP v tm x y, SubstFormP v tm x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, tm, x, y, y', k, k')\n  atom s' \\<sharp> (v, tm, x, y, y', k, k', s)\n  atom k \\<sharp> (v, tm, x, y, y')\n  atom k' \\<sharp> (v, tm, x, y, y', k)\n\ngoal (1 subgoal):\n 1. {SubstFormP v tm x y, SubstFormP v tm x y'} \\<turnstile> y' EQ y", "by (force simp: SubstFormP.simps [of s v tm x y k]  SubstFormP.simps [of s' v tm x y' k']\n                    SeqSubstFormP_unique rotate3 thin1)"], ["proof (state)\nthis:\n  {SubstFormP v tm x y, SubstFormP v tm x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}