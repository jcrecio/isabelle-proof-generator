{"file_name": "/home/qj213/afp-2021-10-22/thys/Incompleteness/Sigma.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Incompleteness", "problem_names": ["lemma ground_aux_simps[simp]:\n  \"ground_aux Zero S = True\"\n  \"ground_aux (Var k) S = (if atom k \\<in> S then True else False)\"\n  \"ground_aux (Eats t u) S = (ground_aux t S \\<and> ground_aux u S)\"", "lemma ground_fm_aux_simps[simp]:\n  \"ground_fm_aux Fls S = True\"\n  \"ground_fm_aux (t IN u) S = (ground_aux t S \\<and> ground_aux u S)\"\n  \"ground_fm_aux (t EQ u) S = (ground_aux t S \\<and> ground_aux u S)\"\n  \"ground_fm_aux (A OR B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (A AND B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (A IFF B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (Neg A) S =  (ground_fm_aux A S)\"\n  \"ground_fm_aux (Ex x A) S = (ground_fm_aux A (S \\<union> {atom x}))\"", "lemma ground_fresh[simp]:\n  \"ground t \\<Longrightarrow> atom i \\<sharp> t\"\n  \"ground_fm A \\<Longrightarrow> atom i \\<sharp> A\"", "lemma Sigma_fm_Iff: \"\\<lbrakk>{} \\<turnstile> B IFF A; supp A \\<subseteq> supp B; Sigma_fm A\\<rbrakk> \\<Longrightarrow> Sigma_fm B\"", "lemma ss_fm_imp_Sigma_fm [intro]: \"ss_fm A \\<Longrightarrow> Sigma_fm A\"", "lemma Sigma_fm_Fls [iff]: \"Sigma_fm Fls\"", "lemma\n  assumes \"Sigma_fm A\" \"Sigma_fm B\"  \n    shows Sigma_fm_AND [intro!]: \"Sigma_fm (A AND B)\" \n      and Sigma_fm_OR [intro!]:  \"Sigma_fm (A OR B)\"\n      and Sigma_fm_Ex [intro!]:  \"Sigma_fm (Ex i A)\"", "lemma Sigma_fm_All2_Var:\n  assumes H0: \"Sigma_fm A\" and ij: \"atom j \\<sharp> (i,A)\"\n  shows \"Sigma_fm (All2 i (Var j) A)\"", "lemma Eq_Eats_Iff:\n   assumes [unfolded fresh_Pair, simp]: \"atom i \\<sharp> (z,x,y)\"\n   shows \"{} \\<turnstile> z EQ Eats x y IFF (All2 i z (Var i IN x OR Var i EQ y)) AND x SUBS z AND y IN z\"", "lemma Subset_Zero_sf: \"Sigma_fm (Var i SUBS Zero)\"", "lemma Eq_Zero_sf: \"Sigma_fm (Var i EQ Zero)\"", "lemma theorem_sf: assumes \"{} \\<turnstile> A\" shows \"Sigma_fm A\"", "lemma Var_Subset_sf: \"Sigma_fm (Var i SUBS Var j)\"", "lemma Zero_Mem_sf: \"Sigma_fm (Zero IN Var i)\"", "lemma ijk: \"i + k < Suc (i + j + k)\"", "lemma All2_term_Iff_fresh: \"i\\<noteq>j \\<Longrightarrow> atom j' \\<sharp> (i,j,A) \\<Longrightarrow>\n   {} \\<turnstile> (All2 i (Var j) A) IFF Ex j' (Var j EQ Var j' AND All2 i (Var j') A)\"", "lemma Sigma_fm_All2_fresh:\n  assumes \"Sigma_fm A\" \"i\\<noteq>j\"\n    shows \"Sigma_fm (All2 i (Var j) A)\"", "lemma Subset_Eats_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j IN t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Var i SUBS Eats t u)\"", "lemma Eq_Eats_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j EQ t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Var i EQ Eats t u)\"", "lemma Eats_Mem_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j EQ t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Eats t u IN Var i)\"", "lemma Subset_Mem_sf_lemma:\n  \"size t + size u < n \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)\"", "lemma Subset_sf [iff]: \"Sigma_fm (t SUBS u)\"", "lemma Mem_sf [iff]: \"Sigma_fm (t IN u)\"", "lemma Equality_sf [iff]: \"Sigma_fm (t EQ u)\"", "lemma All2_term_Iff: \"atom i \\<sharp> t \\<Longrightarrow> atom j \\<sharp> (i,t,A) \\<Longrightarrow> \n                  {} \\<turnstile> (All2 i t A) IFF Ex j (Var j EQ t AND All2 i (Var j) A)\"", "lemma Sigma_fm_All2 [intro!]:\n  assumes \"Sigma_fm A\" \"atom i \\<sharp> t\"\n    shows \"Sigma_fm (All2 i t A)\"", "lemma OrdP_sf [iff]: \"Sigma_fm (OrdP t)\"", "lemma OrdNotEqP_sf [iff]: \"Sigma_fm (OrdNotEqP t u)\"", "lemma HDomain_Incl_sf [iff]: \"Sigma_fm (HDomain_Incl t u)\"", "lemma HFun_Sigma_Iff:\n  assumes \"atom z \\<sharp> (r,z',x,y,x',y')\"  \"atom z' \\<sharp> (r,x,y,x',y')\"\n       \"atom x \\<sharp> (r,y,x',y')\"  \"atom y \\<sharp> (r,x',y')\"\n       \"atom x' \\<sharp> (r,y')\"  \"atom y' \\<sharp> (r)\"\n  shows\n  \"{} \\<turnstile>HFun_Sigma r IFF\n         All2 z r (All2 z' r (Ex x (Ex y (Ex x' (Ex y'\n             (Var z EQ HPair (Var x) (Var y) AND Var z' EQ HPair (Var x') (Var y')\n              AND OrdP (Var x) AND OrdP (Var x') AND\n              ((Var x NEQ Var x') OR (Var y EQ Var y'))))))))\"", "lemma HFun_Sigma_sf [iff]: \"Sigma_fm (HFun_Sigma t)\"", "lemma LstSeqP_sf [iff]: \"Sigma_fm (LstSeqP t u v)\"", "lemma subst_fm_in_se_fm: \"se_fm A \\<Longrightarrow> se_fm (A(k::=x))\"", "lemma obtain_const_tm:  obtains t where \"\\<lbrakk>t\\<rbrakk>e = x\" \"ground t\"", "lemma ex_eval_fm_iff_exists_tm:\n  \"eval_fm e (Ex k A) \\<longleftrightarrow> (\\<exists>t. eval_fm e (A(k::=t)) \\<and> ground t)\"", "lemma ex_eval_fm_iff_exists_tm':\n  \"eval_fm e (Ex k A) \\<longleftrightarrow> (\\<exists>t. eval_fm e (A(k::=t)))\"", "lemma eval_fm_All2_Eats:\n  \"atom i \\<sharp> (t,u) \\<Longrightarrow>\n   eval_fm e (All2 i (Eats t u) A) \\<longleftrightarrow> eval_fm e (A(i::=u)) \\<and> eval_fm e (All2 i t A)\"", "lemma eval_fm_All2_Iff_elts:\n  \"ground t \\<Longrightarrow> eval_fm e (All2 i t A) \\<longleftrightarrow> (\\<forall>u \\<in> elts t. eval_fm e (A(i::=u)))\"", "lemma prove_elts_imp_prove_All2:\n   \"ground t \\<Longrightarrow> (\\<And>u. u \\<in> elts t \\<Longrightarrow> {} \\<turnstile> A(i::=u)) \\<Longrightarrow> {} \\<turnstile> All2 i t A\"", "lemma ground_prove:\n   \"\\<lbrakk>size t + size u < n; ground t; ground u\\<rbrakk>\n    \\<Longrightarrow> (\\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow> {} \\<turnstile> t SUBS u) \\<and> (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow> {} \\<turnstile> t IN u)\"", "lemma \n  assumes \"ground t\" \"ground u\"\n    shows ground_prove_SUBS: \"\\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<Longrightarrow> {} \\<turnstile> t SUBS u\"\n      and ground_prove_IN:   \"\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in> \\<lbrakk>u\\<rbrakk>e \\<Longrightarrow> {} \\<turnstile> t IN u\"\n      and ground_prove_EQ:   \"\\<lbrakk>t\\<rbrakk>e = \\<lbrakk>u\\<rbrakk>e \\<Longrightarrow> {} \\<turnstile> t EQ u\"", "lemma ground_subst: \n  \"ground_aux tm (insert (atom i) S) \\<Longrightarrow> ground t \\<Longrightarrow> ground_aux (subst i t tm) S\"", "lemma ground_subst_fm: \n  \"ground_fm_aux A (insert (atom i) S) \\<Longrightarrow> ground t \\<Longrightarrow> ground_fm_aux (A(i::=t)) S\"", "lemma elts_imp_ground: \"u \\<in> elts t \\<Longrightarrow> ground_aux t S \\<Longrightarrow> ground_aux u S\"", "lemma ground_se_fm_induction:\n   \"ground_fm \\<alpha> \\<Longrightarrow> size \\<alpha> < n \\<Longrightarrow> se_fm \\<alpha> \\<Longrightarrow> eval_fm e \\<alpha> \\<Longrightarrow> {} \\<turnstile> \\<alpha>\"", "lemma ss_imp_se_fm: \"ss_fm A \\<Longrightarrow> se_fm A\"", "lemma se_fm_imp_thm: \"\\<lbrakk>se_fm A; ground_fm A; eval_fm e A\\<rbrakk> \\<Longrightarrow> {} \\<turnstile> A\"", "theorem Sigma_fm_imp_thm: \"\\<lbrakk>Sigma_fm A; ground_fm A; eval_fm e0 A\\<rbrakk> \\<Longrightarrow> {} \\<turnstile> A\""], "translations": [["", "lemma ground_aux_simps[simp]:\n  \"ground_aux Zero S = True\"\n  \"ground_aux (Var k) S = (if atom k \\<in> S then True else False)\"\n  \"ground_aux (Eats t u) S = (ground_aux t S \\<and> ground_aux u S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_aux Zero S = True &&&\n    ground_aux (Var k) S = (if atom k \\<in> S then True else False) &&&\n    ground_aux (Eats t u) S = (ground_aux t S \\<and> ground_aux u S)", "unfolding ground_aux_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (supp Zero \\<subseteq> S) = True &&&\n    (supp (Var k) \\<subseteq> S) =\n    (if atom k \\<in> S then True else False) &&&\n    (supp (Eats t u) \\<subseteq> S) =\n    (supp t \\<subseteq> S \\<and> supp u \\<subseteq> S)", "by (simp_all add: supp_at_base)"], ["", "lemma ground_fm_aux_simps[simp]:\n  \"ground_fm_aux Fls S = True\"\n  \"ground_fm_aux (t IN u) S = (ground_aux t S \\<and> ground_aux u S)\"\n  \"ground_fm_aux (t EQ u) S = (ground_aux t S \\<and> ground_aux u S)\"\n  \"ground_fm_aux (A OR B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (A AND B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (A IFF B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (Neg A) S =  (ground_fm_aux A S)\"\n  \"ground_fm_aux (Ex x A) S = (ground_fm_aux A (S \\<union> {atom x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ground_fm_aux Fls S = True &&&\n      ground_fm_aux (t IN u) S = (ground_aux t S \\<and> ground_aux u S)) &&&\n     ground_fm_aux (t EQ u) S = (ground_aux t S \\<and> ground_aux u S) &&&\n     ground_fm_aux (A OR B) S =\n     (ground_fm_aux A S \\<and> ground_fm_aux B S)) &&&\n    (ground_fm_aux (A AND B) S =\n     (ground_fm_aux A S \\<and> ground_fm_aux B S) &&&\n     ground_fm_aux (A IFF B) S =\n     (ground_fm_aux A S \\<and> ground_fm_aux B S)) &&&\n    ground_fm_aux (Neg A) S = ground_fm_aux A S &&&\n    ground_fm_aux (SyntaxN.Ex x A) S = ground_fm_aux A (S \\<union> {atom x})", "by (auto simp: ground_fm_aux_def ground_aux_def supp_conv_fresh)"], ["", "lemma ground_fresh[simp]:\n  \"ground t \\<Longrightarrow> atom i \\<sharp> t\"\n  \"ground_fm A \\<Longrightarrow> atom i \\<sharp> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ground t \\<Longrightarrow> atom i \\<sharp> t) &&&\n    (ground_fm A \\<Longrightarrow> atom i \\<sharp> A)", "unfolding ground_aux_def ground_fm_aux_def fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (supp t \\<subseteq> {} \\<Longrightarrow> atom i \\<notin> supp t) &&&\n    (supp A \\<subseteq> {} \\<Longrightarrow> atom i \\<notin> supp A)", "by simp_all"], ["", "section\\<open>Sigma Formulas\\<close>"], ["", "text\\<open>Section 2 material\\<close>"], ["", "subsection \\<open>Strict Sigma Formulas\\<close>"], ["", "text\\<open>Definition 2.1\\<close>"], ["", "inductive ss_fm :: \"fm \\<Rightarrow> bool\" where\n    MemI:  \"ss_fm (Var i IN Var j)\"\n  | DisjI: \"ss_fm A \\<Longrightarrow> ss_fm B \\<Longrightarrow> ss_fm (A OR B)\"\n  | ConjI: \"ss_fm A \\<Longrightarrow> ss_fm B \\<Longrightarrow> ss_fm (A AND B)\"\n  | ExI:   \"ss_fm A \\<Longrightarrow> ss_fm (Ex i A)\"\n  | All2I: \"ss_fm A \\<Longrightarrow> atom j \\<sharp> (i,A) \\<Longrightarrow> ss_fm (All2 i (Var j) A)\""], ["", "equivariance ss_fm"], ["", "nominal_inductive ss_fm\n  avoids ExI: \"i\" | All2I: \"i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>A i.\n         ss_fm A \\<Longrightarrow> {atom i} \\<sharp>* SyntaxN.Ex i A) &&&\n     (\\<And>A i. ss_fm A \\<Longrightarrow> finite {atom i})) &&&\n    (\\<And>A j i.\n        \\<lbrakk>ss_fm A; atom j \\<sharp> (i, A)\\<rbrakk>\n        \\<Longrightarrow> {atom i} \\<sharp>* All2 i (Var j) A) &&&\n    (\\<And>A j i.\n        \\<lbrakk>ss_fm A; atom j \\<sharp> (i, A)\\<rbrakk>\n        \\<Longrightarrow> finite {atom i})", "by (simp_all add: fresh_star_def)"], ["", "declare ss_fm.intros [intro]"], ["", "definition Sigma_fm :: \"fm \\<Rightarrow> bool\"\n  where \"Sigma_fm A \\<longleftrightarrow> (\\<exists>B. ss_fm B \\<and> supp B \\<subseteq> supp A \\<and> {} \\<turnstile> A IFF B)\""], ["", "lemma Sigma_fm_Iff: \"\\<lbrakk>{} \\<turnstile> B IFF A; supp A \\<subseteq> supp B; Sigma_fm A\\<rbrakk> \\<Longrightarrow> Sigma_fm B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{} \\<turnstile> B IFF A; supp A \\<subseteq> supp B;\n     Sigma_fm A\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm B", "by (metis Sigma_fm_def Iff_trans order_trans)"], ["", "lemma ss_fm_imp_Sigma_fm [intro]: \"ss_fm A \\<Longrightarrow> Sigma_fm A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss_fm A \\<Longrightarrow> Sigma_fm A", "by (metis Iff_refl Sigma_fm_def order_refl)"], ["", "lemma Sigma_fm_Fls [iff]: \"Sigma_fm Fls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm Fls", "by (rule Sigma_fm_Iff [of _ \"Ex i (Var i IN Var i)\"]) auto"], ["", "subsection\\<open>Closure properties for Sigma-formulas\\<close>"], ["", "lemma\n  assumes \"Sigma_fm A\" \"Sigma_fm B\"  \n    shows Sigma_fm_AND [intro!]: \"Sigma_fm (A AND B)\" \n      and Sigma_fm_OR [intro!]:  \"Sigma_fm (A OR B)\"\n      and Sigma_fm_Ex [intro!]:  \"Sigma_fm (Ex i A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (A AND B) &&& Sigma_fm (A OR B) &&& Sigma_fm (SyntaxN.Ex i A)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. Sigma_fm (A AND B)\n 2. Sigma_fm (A OR B)\n 3. Sigma_fm (SyntaxN.Ex i A)", "obtain SA SB where \"ss_fm SA\" \"{} \\<turnstile> A IFF SA\" \"supp SA \\<subseteq> supp A\"\n                 and \"ss_fm SB\" \"{} \\<turnstile> B IFF SB\" \"supp SB \\<subseteq> supp B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>SA SB.\n        \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n         supp SA \\<subseteq> supp A; ss_fm SB; {} \\<turnstile> B IFF SB;\n         supp SB \\<subseteq> supp B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  Sigma_fm A\n  Sigma_fm B\n\ngoal (1 subgoal):\n 1. (\\<And>SA SB.\n        \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n         supp SA \\<subseteq> supp A; ss_fm SB; {} \\<turnstile> B IFF SB;\n         supp SB \\<subseteq> supp B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: Sigma_fm_def)"], ["proof (state)\nthis:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n  ss_fm SB\n  {} \\<turnstile> B IFF SB\n  supp SB \\<subseteq> supp B\n\ngoal (3 subgoals):\n 1. Sigma_fm (A AND B)\n 2. Sigma_fm (A OR B)\n 3. Sigma_fm (SyntaxN.Ex i A)", "then"], ["proof (chain)\npicking this:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n  ss_fm SB\n  {} \\<turnstile> B IFF SB\n  supp SB \\<subseteq> supp B", "show \"Sigma_fm (A AND B)\"  \"Sigma_fm (A OR B)\"  \"Sigma_fm (Ex i A)\""], ["proof (prove)\nusing this:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n  ss_fm SB\n  {} \\<turnstile> B IFF SB\n  supp SB \\<subseteq> supp B\n\ngoal (1 subgoal):\n 1. Sigma_fm (A AND B) &&& Sigma_fm (A OR B) &&& Sigma_fm (SyntaxN.Ex i A)", "apply (auto simp: Sigma_fm_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ba.\n                         ss_fm Ba \\<and>\n                         supp Ba \\<subseteq> supp A \\<union> supp B \\<and>\n                         {} \\<turnstile> A AND B IFF Ba\n 2. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ba.\n                         ss_fm Ba \\<and>\n                         supp Ba \\<subseteq> supp A \\<union> supp B \\<and>\n                         {} \\<turnstile> A OR B IFF Ba\n 3. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B.\n                         ss_fm B \\<and>\n                         supp B \\<subseteq> supp A - {atom i} \\<and>\n                         {} \\<turnstile> SyntaxN.Ex i A IFF B", "apply (metis ss_fm.ConjI Conj_cong Un_mono supp_Conj)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ba.\n                         ss_fm Ba \\<and>\n                         supp Ba \\<subseteq> supp A \\<union> supp B \\<and>\n                         {} \\<turnstile> A OR B IFF Ba\n 2. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B.\n                         ss_fm B \\<and>\n                         supp B \\<subseteq> supp A - {atom i} \\<and>\n                         {} \\<turnstile> SyntaxN.Ex i A IFF B", "apply (metis ss_fm.DisjI Disj_cong Un_mono fm.supp(3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B.\n                         ss_fm B \\<and>\n                         supp B \\<subseteq> supp A - {atom i} \\<and>\n                         {} \\<turnstile> SyntaxN.Ex i A IFF B", "apply (rule exI [where x = \"Ex i SA\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> ss_fm (SyntaxN.Ex i SA) \\<and>\n                      supp (SyntaxN.Ex i SA)\n                      \\<subseteq> supp A - {atom i} \\<and>\n                      {} \\<turnstile> SyntaxN.Ex i A IFF SyntaxN.Ex i SA", "apply (auto intro!: Ex_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (A AND B)\n  Sigma_fm (A OR B)\n  Sigma_fm (SyntaxN.Ex i A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Sigma_fm_All2_Var:\n  assumes H0: \"Sigma_fm A\" and ij: \"atom j \\<sharp> (i,A)\"\n  shows \"Sigma_fm (All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "obtain SA where SA: \"ss_fm SA\" \"{} \\<turnstile> A IFF SA\" \"supp SA \\<subseteq> supp A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>SA.\n        \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n         supp SA \\<subseteq> supp A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using H0"], ["proof (prove)\nusing this:\n  Sigma_fm A\n\ngoal (1 subgoal):\n 1. (\\<And>SA.\n        \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n         supp SA \\<subseteq> supp A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: Sigma_fm_def)"], ["proof (state)\nthis:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "show \"Sigma_fm (All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "apply (rule Sigma_fm_Iff [of _ \"All2 i (Var j) SA\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. {} \\<turnstile> All2 i (Var j) A IFF All2 i (Var j) SA\n 2. supp (All2 i (Var j) SA) \\<subseteq> supp (All2 i (Var j) A)\n 3. Sigma_fm (All2 i (Var j) SA)", "apply (metis All2_cong Refl SA(2) emptyE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. supp (All2 i (Var j) SA) \\<subseteq> supp (All2 i (Var j) A)\n 2. Sigma_fm (All2 i (Var j) SA)", "using SA ij"], ["proof (prove)\nusing this:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n  atom j \\<sharp> (i, A)\n\ngoal (2 subgoals):\n 1. supp (All2 i (Var j) SA) \\<subseteq> supp (All2 i (Var j) A)\n 2. Sigma_fm (All2 i (Var j) SA)", "apply (auto simp: supp_conv_fresh subset_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n     \\<forall>t. \\<not> t \\<sharp> SA \\<longrightarrow> \\<not> t \\<sharp> A;\n     atom j \\<sharp> (i, A)\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (All2 i (Var j) SA)", "apply (metis ss_fm.All2I fresh_Pair ss_fm_imp_Sigma_fm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (All2 i (Var j) A)\n\ngoal:\nNo subgoals!", "qed"], ["", "section\\<open>Lemma 2.2: Atomic formulas are Sigma-formulas\\<close>"], ["", "lemma Eq_Eats_Iff:\n   assumes [unfolded fresh_Pair, simp]: \"atom i \\<sharp> (z,x,y)\"\n   shows \"{} \\<turnstile> z EQ Eats x y IFF (All2 i z (Var i IN x OR Var i EQ y)) AND x SUBS z AND y IN z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    z EQ Eats x y IFF\n    All2 i z (Var i IN x OR Var i EQ y) AND x SUBS z AND y IN z", "proof (rule Iff_I, auto)"], ["proof (state)\ngoal (4 subgoals):\n 1. {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y\n 2. {z EQ Eats x y} \\<turnstile> x SUBS z\n 3. {z EQ Eats x y} \\<turnstile> y IN z\n 4. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "have \"{Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y", "by (metis Assume Iff_MP_left Iff_sym Mem_cong Refl)"], ["proof (state)\nthis:\n  {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y\n\ngoal (4 subgoals):\n 1. {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y\n 2. {z EQ Eats x y} \\<turnstile> x SUBS z\n 3. {z EQ Eats x y} \\<turnstile> y IN z\n 4. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "then"], ["proof (chain)\npicking this:\n  {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y", "show \"{Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y\""], ["proof (prove)\nusing this:\n  {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y\n\ngoal (1 subgoal):\n 1. {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y", "by (metis Iff_MP_same Mem_Eats_Iff)"], ["proof (state)\nthis:\n  {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y\n\ngoal (3 subgoals):\n 1. {z EQ Eats x y} \\<turnstile> x SUBS z\n 2. {z EQ Eats x y} \\<turnstile> y IN z\n 3. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. {z EQ Eats x y} \\<turnstile> x SUBS z\n 2. {z EQ Eats x y} \\<turnstile> y IN z\n 3. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "show \"{z EQ Eats x y} \\<turnstile> x SUBS z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z EQ Eats x y} \\<turnstile> x SUBS z", "by (metis Iff_MP2_same Subset_cong [OF Refl Assume] Subset_Eats_I)"], ["proof (state)\nthis:\n  {z EQ Eats x y} \\<turnstile> x SUBS z\n\ngoal (2 subgoals):\n 1. {z EQ Eats x y} \\<turnstile> y IN z\n 2. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. {z EQ Eats x y} \\<turnstile> y IN z\n 2. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "show \"{z EQ Eats x y} \\<turnstile> y IN z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z EQ Eats x y} \\<turnstile> y IN z", "by (metis Iff_MP2_same Mem_cong Assume Refl Mem_Eats_I2)"], ["proof (state)\nthis:\n  {z EQ Eats x y} \\<turnstile> y IN z\n\ngoal (1 subgoal):\n 1. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "show \"{x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile> z EQ Eats x y\"\n       (is \"{_, _, ?allHyp} \\<turnstile> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "apply (rule Eq_Eats_iff [OF assms, THEN Iff_MP2_same], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Neg (Var i IN z IFF Var i IN x OR Var i EQ y), x SUBS z,\n     y IN z} \\<turnstile>\n    SyntaxN.Ex i (Neg (Var i IN z IMP Var i IN x OR Var i EQ y))", "apply (rule Ex_I [where x=\"Var i\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Neg (Var i IN z IFF Var i IN x OR Var i EQ y), x SUBS z,\n     y IN z} \\<turnstile>\n    (Neg (Var i IN z IMP Var i IN x OR Var i EQ y))(i::=Var i)", "apply (auto intro: Subset_D  Mem_cong [OF Assume Refl, THEN Iff_MP2_same])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n  z EQ Eats x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subset_Zero_sf: \"Sigma_fm (Var i SUBS Zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "obtain j::name where j: \"atom j \\<sharp> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j. atom j \\<sharp> i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "hence Subset_Zero_Iff: \"{} \\<turnstile> Var i SUBS Zero IFF (All2 j (Var i) Fls)\""], ["proof (prove)\nusing this:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> Var i SUBS Zero IFF All2 j (Var i) Fls", "by (auto intro!: Subset_I [of j] intro: Eq_Zero_D Subset_Zero_D All2_E [THEN rotate2])"], ["proof (state)\nthis:\n  {} \\<turnstile> Var i SUBS Zero IFF All2 j (Var i) Fls\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile> Var i SUBS Zero IFF All2 j (Var i) Fls\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "using j"], ["proof (prove)\nusing this:\n  {} \\<turnstile> Var i SUBS Zero IFF All2 j (Var i) Fls\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "by (auto simp: supp_conv_fresh \n             intro!: Sigma_fm_Iff [OF Subset_Zero_Iff] Sigma_fm_All2_Var)"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Zero)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eq_Zero_sf: \"Sigma_fm (Var i EQ Zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Zero)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Zero)", "obtain j::name where \"atom j \\<sharp> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j. atom j \\<sharp> i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Zero)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Zero)", "by (auto simp add: supp_conv_fresh\n             intro!: Sigma_fm_Iff [OF _ _ Subset_Zero_sf] Subset_Zero_D EQ_imp_SUBS)"], ["proof (state)\nthis:\n  Sigma_fm (Var i EQ Zero)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma theorem_sf: assumes \"{} \\<turnstile> A\" shows \"Sigma_fm A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm A", "obtain i::name and j::name\n    where ij: \"atom i \\<sharp> (j,A)\" \"atom j \\<sharp> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom i \\<sharp> (j, A)\n  atom j \\<sharp> A\n\ngoal (1 subgoal):\n 1. Sigma_fm A", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm A", "apply (rule Sigma_fm_Iff [where A = \"Ex i (Ex j (Var i IN Var j))\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. {} \\<turnstile> A IFF SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))\n 2. supp (SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))) \\<subseteq> supp A\n 3. Sigma_fm (SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j)))", "using ij"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (j, A)\n  atom j \\<sharp> A\n\ngoal (3 subgoals):\n 1. {} \\<turnstile> A IFF SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))\n 2. supp (SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))) \\<subseteq> supp A\n 3. Sigma_fm (SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j)))", "apply (auto simp: )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {A} \\<turnstile>\n                      SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))\n 2. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {Var i IN Var j} \\<turnstile> A", "apply (rule Ex_I [where x=Zero], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {A} \\<turnstile> SyntaxN.Ex j (Zero IN Var j)\n 2. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {Var i IN Var j} \\<turnstile> A", "apply (rule Ex_I [where x=\"Eats Zero Zero\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {A} \\<turnstile> (Zero IN Var j)(j::=Eats Zero Zero)\n 2. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {Var i IN Var j} \\<turnstile> A", "apply (auto intro: Mem_Eats_I2 assms thin0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm A\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The subset relation\\<close>"], ["", "lemma Var_Subset_sf: \"Sigma_fm (Var i SUBS Var j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "obtain k::name where k: \"atom (k::name) \\<sharp> (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        atom k \\<sharp> (i, j) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (i, j)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (i, j)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "proof (cases \"i=j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i = j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)\n 2. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "case True"], ["proof (state)\nthis:\n  i = j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i = j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)\n 2. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = j\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "using k"], ["proof (prove)\nusing this:\n  i = j\n  atom k \\<sharp> (i, j)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "by (auto intro!: theorem_sf Subset_I [where i=k])"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Var j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "using k"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  atom k \\<sharp> (i, j)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "by (auto simp: ss_fm_imp_Sigma_fm Subset.simps [of k] ss_fm.intros)"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Var j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Var j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Zero_Mem_sf: \"Sigma_fm (Zero IN Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "obtain j::name where \"atom j \\<sharp> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j. atom j \\<sharp> i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "hence Zero_Mem_Iff: \"{} \\<turnstile> Zero IN Var i IFF (Ex j (Var j  EQ Zero AND Var j  IN Var i))\""], ["proof (prove)\nusing this:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    Zero IN Var i IFF SyntaxN.Ex j (Var j EQ Zero AND Var j IN Var i)", "by (auto intro: Ex_I [where x = Zero]  Mem_cong [OF Assume Refl, THEN Iff_MP_same])"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  Zero IN Var i IFF SyntaxN.Ex j (Var j EQ Zero AND Var j IN Var i)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "by (auto intro!: Sigma_fm_Iff [OF Zero_Mem_Iff] Eq_Zero_sf)"], ["proof (state)\nthis:\n  Sigma_fm (Zero IN Var i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ijk: \"i + k < Suc (i + j + k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + k < Suc (i + j + k)", "by arith"], ["", "lemma All2_term_Iff_fresh: \"i\\<noteq>j \\<Longrightarrow> atom j' \\<sharp> (i,j,A) \\<Longrightarrow>\n   {} \\<turnstile> (All2 i (Var j) A) IFF Ex j' (Var j EQ Var j' AND All2 i (Var j') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; atom j' \\<sharp> (i, j, A)\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      All2 i (Var j) A IFF\n                      SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> j; atom j' \\<sharp> (i, j, A)\\<rbrakk>\n    \\<Longrightarrow> {All2 i (Var j) A} \\<turnstile>\n                      SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A)\n 2. \\<lbrakk>i \\<noteq> j; atom j' \\<sharp> (i, j, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN Var j, Var j EQ Var j'} \\<turnstile>\n                      SyntaxN.Ex i (Neg (Var i IN Var j' IMP A))", "apply (rule Ex_I [where x=\"Var j\"], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; atom j' \\<sharp> (i, j, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN Var j, Var j EQ Var j'} \\<turnstile>\n                      SyntaxN.Ex i (Neg (Var i IN Var j' IMP A))", "apply (rule Ex_I [where x=\"Var i\"], auto intro: ContraProve Mem_cong [THEN Iff_MP_same])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Sigma_fm_All2_fresh:\n  assumes \"Sigma_fm A\" \"i\\<noteq>j\"\n    shows \"Sigma_fm (All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "obtain j'::name where j': \"atom j' \\<sharp> (i,j,A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        atom j' \\<sharp> (i, j, A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom j' \\<sharp> (i, j, A)\n\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "show \"Sigma_fm (All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "apply (rule Sigma_fm_Iff [OF All2_term_Iff_fresh [OF _ j']])"], ["proof (prove)\ngoal (3 subgoals):\n 1. i \\<noteq> j\n 2. supp (SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A))\n    \\<subseteq> supp (All2 i (Var j) A)\n 3. Sigma_fm (SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A))", "using assms j'"], ["proof (prove)\nusing this:\n  Sigma_fm A\n  i \\<noteq> j\n  atom j' \\<sharp> (i, j, A)\n\ngoal (3 subgoals):\n 1. i \\<noteq> j\n 2. supp (SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A))\n    \\<subseteq> supp (All2 i (Var j) A)\n 3. Sigma_fm (SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A))", "apply (auto simp: supp_conv_fresh Var_Subset_sf\n                intro!: Sigma_fm_All2_Var Sigma_fm_Iff [OF Extensionality _ _])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (All2 i (Var j) A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subset_Eats_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j IN t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Var i SUBS Eats t u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "obtain k::name where k: \"atom k \\<sharp> (t,u,Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        atom k \\<sharp> (t, u, Var i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (t, u, Var i)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "hence \"{} \\<turnstile> Var i SUBS Eats t u IFF All2 k (Var i) (Var k IN t OR Var k EQ u)\""], ["proof (prove)\nusing this:\n  atom k \\<sharp> (t, u, Var i)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    Var i SUBS Eats t u IFF All2 k (Var i) (Var k IN t OR Var k EQ u)", "apply (auto simp: fresh_Pair intro: Set_MP Disj_I1 Disj_I2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> t; atom k \\<sharp> u;\n     atom k \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {All2 k (Var i)\n                        (Var k IN t OR Var k EQ u)} \\<turnstile>\n                      Var i SUBS Eats t u", "apply (force intro!: Subset_I [where i=k] intro: All2_E' [OF Hyp] Mem_Eats_I1 Mem_Eats_I2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  Var i SUBS Eats t u IFF All2 k (Var i) (Var k IN t OR Var k EQ u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  Var i SUBS Eats t u IFF All2 k (Var i) (Var k IN t OR Var k EQ u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "apply (rule Sigma_fm_Iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. supp (All2 k (Var i) (Var k IN t OR Var k EQ u))\n    \\<subseteq> supp (Var i SUBS Eats t u)\n 2. Sigma_fm (All2 k (Var i) (Var k IN t OR Var k EQ u))", "using k"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (t, u, Var i)\n\ngoal (2 subgoals):\n 1. supp (All2 k (Var i) (Var k IN t OR Var k EQ u))\n    \\<subseteq> supp (Var i SUBS Eats t u)\n 2. Sigma_fm (All2 k (Var i) (Var k IN t OR Var k EQ u))", "apply (auto intro!: Sigma_fm_All2_fresh simp add: assms fresh_Pair supp_conv_fresh fresh_at_base)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Eats t u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eq_Eats_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j EQ t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Var i EQ Eats t u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "obtain j::name and k::name and l::name\n    where atoms: \"atom j \\<sharp> (t,u,i)\" \"atom k \\<sharp> (t,u,i,j)\" \"atom l \\<sharp> (t,u,i,j,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j k l.\n        \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n         atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> (t, u, i)\n  atom k \\<sharp> (t, u, i, j)\n  atom l \\<sharp> (t, u, i, j, k)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "hence \"{} \\<turnstile> Var i EQ Eats t u IFF\n              Ex j (Ex k (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u))\""], ["proof (prove)\nusing this:\n  atom j \\<sharp> (t, u, i)\n  atom k \\<sharp> (t, u, i, j)\n  atom l \\<sharp> (t, u, i, j, k)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    Var i EQ Eats t u IFF\n    SyntaxN.Ex j\n     (SyntaxN.Ex k\n       (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n     atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Eats t u} \\<turnstile>\n                      SyntaxN.Ex j\n                       (SyntaxN.Ex k\n                         (Var i EQ Eats (Var j) (Var k) AND\n                          Var j EQ t AND Var k EQ u))\n 2. \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n     atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ t, Var k EQ u,\n                       Var i EQ Eats (Var j) (Var k)} \\<turnstile>\n                      Var i EQ Eats t u", "apply (rule Ex_I [where x=t], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n     atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Eats t u} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Var i EQ Eats t (Var k) AND t EQ t AND Var k EQ u)\n 2. \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n     atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ t, Var k EQ u,\n                       Var i EQ Eats (Var j) (Var k)} \\<turnstile>\n                      Var i EQ Eats t u", "apply (rule Ex_I [where x=u], auto intro: Trans Eats_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  Var i EQ Eats t u IFF\n  SyntaxN.Ex j\n   (SyntaxN.Ex k\n     (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u))\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  Var i EQ Eats t u IFF\n  SyntaxN.Ex j\n   (SyntaxN.Ex k\n     (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u))\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "apply (rule Sigma_fm_Iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. supp\n     (SyntaxN.Ex j\n       (SyntaxN.Ex k\n         (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u)))\n    \\<subseteq> supp (Var i EQ Eats t u)\n 2. Sigma_fm\n     (SyntaxN.Ex j\n       (SyntaxN.Ex k\n         (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u)))", "apply (auto simp: assms supp_at_base)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats (Var j) (Var k))", "apply (rule Sigma_fm_Iff [OF Eq_Eats_Iff [of l]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. atom l \\<sharp> (Var i, Var j, Var k)\n 2. supp\n     (All2 l (Var i) (Var l IN Var j OR Var l EQ Var k) AND\n      Var j SUBS Var i AND Var k IN Var i)\n    \\<subseteq> supp (Var i EQ Eats (Var j) (Var k))\n 3. Sigma_fm\n     (All2 l (Var i) (Var l IN Var j OR Var l EQ Var k) AND\n      Var j SUBS Var i AND Var k IN Var i)", "using atoms"], ["proof (prove)\nusing this:\n  atom j \\<sharp> (t, u, i)\n  atom k \\<sharp> (t, u, i, j)\n  atom l \\<sharp> (t, u, i, j, k)\n\ngoal (3 subgoals):\n 1. atom l \\<sharp> (Var i, Var j, Var k)\n 2. supp\n     (All2 l (Var i) (Var l IN Var j OR Var l EQ Var k) AND\n      Var j SUBS Var i AND Var k IN Var i)\n    \\<subseteq> supp (Var i EQ Eats (Var j) (Var k))\n 3. Sigma_fm\n     (All2 l (Var i) (Var l IN Var j OR Var l EQ Var k) AND\n      Var j SUBS Var i AND Var k IN Var i)", "apply (auto simp: supp_conv_fresh fresh_at_base Var_Subset_sf \n                intro!: Sigma_fm_All2_Var Sigma_fm_Iff [OF Extensionality _ _])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (Var i EQ Eats t u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eats_Mem_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j EQ t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Eats t u IN Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "obtain j::name where j: \"atom j \\<sharp> (t,u,Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        atom j \\<sharp> (t, u, Var i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> (t, u, Var i)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "hence \"{} \\<turnstile> Eats t u IN Var i IFF\n              Ex j (Var j IN Var i AND Var j EQ Eats t u)\""], ["proof (prove)\nusing this:\n  atom j \\<sharp> (t, u, Var i)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    Eats t u IN Var i IFF\n    SyntaxN.Ex j (Var j IN Var i AND Var j EQ Eats t u)", "apply (auto simp: fresh_Pair intro: Ex_I [where x=\"Eats t u\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom j \\<sharp> t; atom j \\<sharp> u;\n     atom j \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {Var j IN Var i, Var j EQ Eats t u} \\<turnstile>\n                      Eats t u IN Var i", "apply (metis Assume Mem_cong [OF _ Refl, THEN Iff_MP_same] rotate2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  Eats t u IN Var i IFF SyntaxN.Ex j (Var j IN Var i AND Var j EQ Eats t u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  Eats t u IN Var i IFF SyntaxN.Ex j (Var j IN Var i AND Var j EQ Eats t u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "by (rule Sigma_fm_Iff) (auto simp: assms supp_conv_fresh Eq_Eats_sf)"], ["proof (state)\nthis:\n  Sigma_fm (Eats t u IN Var i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subset_Mem_sf_lemma:\n  \"size t + size u < n \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size t + size u < n \\<Longrightarrow>\n    Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)", "proof (induction n arbitrary: t u rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x t u.\n       \\<lbrakk>\\<And>y t u.\n                   \\<lbrakk>y < x; size t + size u < y\\<rbrakk>\n                   \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and>\n                                     Sigma_fm (t IN u);\n        size t + size u < x\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)", "case (less n t u)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; size ?t + size ?u < ?y\\<rbrakk>\n  \\<Longrightarrow> Sigma_fm (?t SUBS ?u) \\<and> Sigma_fm (?t IN ?u)\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. \\<And>x t u.\n       \\<lbrakk>\\<And>y t u.\n                   \\<lbrakk>y < x; size t + size u < y\\<rbrakk>\n                   \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and>\n                                     Sigma_fm (t IN u);\n        size t + size u < x\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Sigma_fm (t SUBS u)\n 2. Sigma_fm (t IN u)", "show \"Sigma_fm (t SUBS u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "proof (cases t rule: tm.exhaust)"], ["proof (state)\ngoal (3 subgoals):\n 1. t = Zero \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 3. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "case Zero"], ["proof (state)\nthis:\n  t = Zero\n\ngoal (3 subgoals):\n 1. t = Zero \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 3. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Zero\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "by (auto intro: theorem_sf)"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u)\n\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "case (Var i)"], ["proof (state)\nthis:\n  t = Var i\n\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Var i\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "using less.prems"], ["proof (prove)\nusing this:\n  t = Var i\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "apply (cases u rule: tm.exhaust)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t = Var i; size t + size u < n; u = Zero\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x2.\n       \\<lbrakk>t = Var i; size t + size u < n; u = Var x2\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (t SUBS u)\n 3. \\<And>x31 x32.\n       \\<lbrakk>t = Var i; size t + size u < n; u = Eats x31 x32\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (t SUBS u)", "apply (auto simp: Subset_Zero_sf Var_Subset_sf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32.\n       \\<lbrakk>t = Var i; Suc (size x31 + size x32) < n;\n        u = Eats x31 x32\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (Var i SUBS Eats x31 x32)", "apply (force simp: supp_conv_fresh less.IH \n                       intro: Subset_Eats_sf Sigma_fm_Iff [OF Extensionality])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "case (Eats t1 t2)"], ["proof (state)\nthis:\n  t = Eats t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Eats t1 t2\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "using less.IH [OF _ ijk] less.prems"], ["proof (prove)\nusing this:\n  t = Eats t1 t2\n  Suc (size ?t + ?j1 + size ?u) < n \\<Longrightarrow>\n  Sigma_fm (?t SUBS ?u) \\<and> Sigma_fm (?t IN ?u)\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "by (auto intro!: Sigma_fm_Iff [OF Eats_Subset_Iff]  simp: supp_conv_fresh)\n             (metis add.commute)"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "show \"Sigma_fm (t IN u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "proof (cases u rule: tm.exhaust)"], ["proof (state)\ngoal (3 subgoals):\n 1. u = Zero \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 3. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case Zero"], ["proof (state)\nthis:\n  u = Zero\n\ngoal (3 subgoals):\n 1. u = Zero \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 3. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (rule Sigma_fm_Iff [where A=Fls]) (auto simp: supp_conv_fresh Zero)"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal (2 subgoals):\n 1. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case (Var i)"], ["proof (state)\nthis:\n  u = Var i\n\ngoal (2 subgoals):\n 1. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "proof (cases t rule: tm.exhaust)"], ["proof (state)\ngoal (3 subgoals):\n 1. t = Zero \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 3. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case Zero"], ["proof (state)\nthis:\n  t = Zero\n\ngoal (3 subgoals):\n 1. t = Zero \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 3. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Zero\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "using \\<open>u = Var i\\<close>"], ["proof (prove)\nusing this:\n  t = Zero\n  u = Var i\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (auto intro: Zero_Mem_sf)"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case (Var j)"], ["proof (state)\nthis:\n  t = Var j\n\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Var j\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "using \\<open>u = Var i\\<close>"], ["proof (prove)\nusing this:\n  t = Var j\n  u = Var i\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by auto"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case (Eats t1 t2)"], ["proof (state)\nthis:\n  t = Eats t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Eats t1 t2\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "using \\<open>u = Var i\\<close> less.prems"], ["proof (prove)\nusing this:\n  t = Eats t1 t2\n  u = Var i\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (force intro: Eats_Mem_sf Sigma_fm_Iff [OF Extensionality _ _] \n                      simp: supp_conv_fresh less.IH [THEN conjunct1])"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case (Eats t1 t2)"], ["proof (state)\nthis:\n  u = Eats t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  u = Eats t1 t2\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "using  less.prems"], ["proof (prove)\nusing this:\n  u = Eats t1 t2\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (force intro: Sigma_fm_Iff [OF Mem_Eats_Iff] Sigma_fm_Iff [OF Extensionality _ _] \n                    simp: supp_conv_fresh less.IH)"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subset_sf [iff]: \"Sigma_fm (t SUBS u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "by (metis Subset_Mem_sf_lemma [OF lessI])"], ["", "lemma Mem_sf [iff]: \"Sigma_fm (t IN u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (metis Subset_Mem_sf_lemma [OF lessI])"], ["", "text \\<open>The equality relation is a Sigma-Formula\\<close>"], ["", "lemma Equality_sf [iff]: \"Sigma_fm (t EQ u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t EQ u)", "by (auto intro: Sigma_fm_Iff [OF Extensionality] simp: supp_conv_fresh)"], ["", "section\\<open>Universal Quantification Bounded by an Arbitrary Term\\<close>"], ["", "lemma All2_term_Iff: \"atom i \\<sharp> t \\<Longrightarrow> atom j \\<sharp> (i,t,A) \\<Longrightarrow> \n                  {} \\<turnstile> (All2 i t A) IFF Ex j (Var j EQ t AND All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      All2 i t A IFF\n                      SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {All2 i t A} \\<turnstile>\n                      SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A)\n 2. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN t, Var j EQ t} \\<turnstile>\n                      SyntaxN.Ex i (Neg (Var i IN Var j IMP A))", "apply (rule Ex_I [where x=t], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN t, Var j EQ t} \\<turnstile>\n                      SyntaxN.Ex i (Neg (Var i IN Var j IMP A))", "apply (rule Ex_I [where x=\"Var i\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN t, Var j EQ t} \\<turnstile>\n                      (Neg (Var i IN Var j IMP A))(i::=Var i)", "apply (auto intro: ContraProve Mem_cong [THEN Iff_MP2_same])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Sigma_fm_All2 [intro!]:\n  assumes \"Sigma_fm A\" \"atom i \\<sharp> t\"\n    shows \"Sigma_fm (All2 i t A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i t A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i t A)", "obtain j::name where j: \"atom j \\<sharp> (i,t,A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        atom j \\<sharp> (i, t, A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> (i, t, A)\n\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i t A)", "show \"Sigma_fm (All2 i t A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i t A)", "apply (rule Sigma_fm_Iff [OF All2_term_Iff [of i t j]])"], ["proof (prove)\ngoal (4 subgoals):\n 1. atom i \\<sharp> t\n 2. atom j \\<sharp> (i, t, A)\n 3. supp (SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A))\n    \\<subseteq> supp (All2 i t A)\n 4. Sigma_fm (SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A))", "using assms j"], ["proof (prove)\nusing this:\n  Sigma_fm A\n  atom i \\<sharp> t\n  atom j \\<sharp> (i, t, A)\n\ngoal (4 subgoals):\n 1. atom i \\<sharp> t\n 2. atom j \\<sharp> (i, t, A)\n 3. supp (SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A))\n    \\<subseteq> supp (All2 i t A)\n 4. Sigma_fm (SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A))", "apply (auto simp: supp_conv_fresh Sigma_fm_All2_Var)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (All2 i t A)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Lemma 2.3: Sequence-related concepts are Sigma-formulas\\<close>"], ["", "lemma OrdP_sf [iff]: \"Sigma_fm (OrdP t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (OrdP t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (OrdP t)", "obtain z::name and y::name where \"atom z \\<sharp> t\" \"atom y \\<sharp> (t, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z y.\n        \\<lbrakk>atom z \\<sharp> t; atom y \\<sharp> (t, z)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom z \\<sharp> t\n  atom y \\<sharp> (t, z)\n\ngoal (1 subgoal):\n 1. Sigma_fm (OrdP t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom z \\<sharp> t\n  atom y \\<sharp> (t, z)\n\ngoal (1 subgoal):\n 1. Sigma_fm (OrdP t)", "by (auto simp: OrdP.simps)"], ["proof (state)\nthis:\n  Sigma_fm (OrdP t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OrdNotEqP_sf [iff]: \"Sigma_fm (OrdNotEqP t u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t NEQ u)", "by (auto simp: OrdNotEqP.simps)"], ["", "lemma HDomain_Incl_sf [iff]: \"Sigma_fm (HDomain_Incl t u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (HDomain_Incl t u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (HDomain_Incl t u)", "obtain x::name and y::name and z::name\n    where \"atom x \\<sharp> (t,u,y,z)\" \"atom y \\<sharp> (t,u,z)\" \"atom z \\<sharp> (t,u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y z.\n        \\<lbrakk>atom x \\<sharp> (t, u, y, z); atom y \\<sharp> (t, u, z);\n         atom z \\<sharp> (t, u)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom x \\<sharp> (t, u, y, z)\n  atom y \\<sharp> (t, u, z)\n  atom z \\<sharp> (t, u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (HDomain_Incl t u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom x \\<sharp> (t, u, y, z)\n  atom y \\<sharp> (t, u, z)\n  atom z \\<sharp> (t, u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (HDomain_Incl t u)", "by auto"], ["proof (state)\nthis:\n  Sigma_fm (HDomain_Incl t u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HFun_Sigma_Iff:\n  assumes \"atom z \\<sharp> (r,z',x,y,x',y')\"  \"atom z' \\<sharp> (r,x,y,x',y')\"\n       \"atom x \\<sharp> (r,y,x',y')\"  \"atom y \\<sharp> (r,x',y')\"\n       \"atom x' \\<sharp> (r,y')\"  \"atom y' \\<sharp> (r)\"\n  shows\n  \"{} \\<turnstile>HFun_Sigma r IFF\n         All2 z r (All2 z' r (Ex x (Ex y (Ex x' (Ex y'\n             (Var z EQ HPair (Var x) (Var y) AND Var z' EQ HPair (Var x') (Var y')\n              AND OrdP (Var x) AND OrdP (Var x') AND\n              ((Var x NEQ Var x') OR (Var y EQ Var y'))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    HFun_Sigma r IFF\n    All2 z r\n     (All2 z' r\n       (SyntaxN.Ex x\n         (SyntaxN.Ex y\n           (SyntaxN.Ex x'\n             (SyntaxN.Ex y'\n               (Var z EQ HPair (Var x) (Var y) AND\n                Var z' EQ HPair (Var x') (Var y') AND\n                OrdP (Var x) AND\n                OrdP (Var x') AND\n                (Var x NEQ Var x' OR Var y EQ Var y')))))))", "apply (simp add: HFun_Sigma.simps [OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    All2 z r\n     (All2 z' r\n       (SyntaxN.Ex x\n         (SyntaxN.Ex y\n           (SyntaxN.Ex x'\n             (SyntaxN.Ex y'\n               (Var z EQ HPair (Var x) (Var y) AND\n                Var z' EQ HPair (Var x') (Var y') AND\n                OrdP (Var x) AND\n                OrdP (Var x') AND\n                (Var x EQ Var x' IMP Var y EQ Var y'))))))) IFF\n    All2 z r\n     (All2 z' r\n       (SyntaxN.Ex x\n         (SyntaxN.Ex y\n           (SyntaxN.Ex x'\n             (SyntaxN.Ex y'\n               (Var z EQ HPair (Var x) (Var y) AND\n                Var z' EQ HPair (Var x') (Var y') AND\n                OrdP (Var x) AND\n                OrdP (Var x') AND\n                (Var x NEQ Var x' OR Var y EQ Var y')))))))", "apply (rule Iff_refl All_cong Imp_cong Ex_cong)+"], ["proof (prove)\ngoal (7 subgoals):\n 1. {} \\<turnstile>\n    Var z EQ HPair (Var x) (Var y) AND\n    Var z' EQ HPair (Var x') (Var y') AND\n    OrdP (Var x) AND\n    OrdP (Var x') AND (Var x EQ Var x' IMP Var y EQ Var y') IFF\n    Var z EQ HPair (Var x) (Var y) AND\n    Var z' EQ HPair (Var x') (Var y') AND\n    OrdP (Var x) AND OrdP (Var x') AND (Var x NEQ Var x' OR Var y EQ Var y')\n 2. \\<forall>C\\<in>{}. atom y' \\<sharp> C\n 3. \\<forall>C\\<in>{}. atom x' \\<sharp> C\n 4. \\<forall>C\\<in>{}. atom y \\<sharp> C\n 5. \\<forall>C\\<in>{}. atom x \\<sharp> C\n 6. \\<forall>C\\<in>{}. atom z' \\<sharp> C\n 7. \\<forall>C\\<in>{}. atom z \\<sharp> C", "apply (rule Conj_cong [OF Iff_refl])"], ["proof (prove)\ngoal (7 subgoals):\n 1. {} \\<turnstile>\n    Var z' EQ HPair (Var x') (Var y') AND\n    OrdP (Var x) AND\n    OrdP (Var x') AND (Var x EQ Var x' IMP Var y EQ Var y') IFF\n    Var z' EQ HPair (Var x') (Var y') AND\n    OrdP (Var x) AND OrdP (Var x') AND (Var x NEQ Var x' OR Var y EQ Var y')\n 2. \\<forall>C\\<in>{}. atom y' \\<sharp> C\n 3. \\<forall>C\\<in>{}. atom x' \\<sharp> C\n 4. \\<forall>C\\<in>{}. atom y \\<sharp> C\n 5. \\<forall>C\\<in>{}. atom x \\<sharp> C\n 6. \\<forall>C\\<in>{}. atom z' \\<sharp> C\n 7. \\<forall>C\\<in>{}. atom z \\<sharp> C", "apply (rule Conj_cong [OF Iff_refl], auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. {Neg (Var x EQ Var x'), OrdP (Var x'), OrdP (Var x)} \\<turnstile>\n    Var x NEQ Var x' OR Var y EQ Var y'\n 2. {Var y EQ Var y', OrdP (Var x'), OrdP (Var x)} \\<turnstile>\n    Var x NEQ Var x' OR Var y EQ Var y'\n 3. {Var x EQ Var x', Var x NEQ Var x', OrdP (Var x'),\n     OrdP (Var x)} \\<turnstile>\n    Var y EQ Var y'", "apply (blast intro: Disj_I1 Neg_D OrdNotEqP_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {Var y EQ Var y', OrdP (Var x'), OrdP (Var x)} \\<turnstile>\n    Var x NEQ Var x' OR Var y EQ Var y'\n 2. {Var x EQ Var x', Var x NEQ Var x', OrdP (Var x'),\n     OrdP (Var x)} \\<turnstile>\n    Var y EQ Var y'", "apply (blast intro: Disj_I2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Var x EQ Var x', Var x NEQ Var x', OrdP (Var x'),\n     OrdP (Var x)} \\<turnstile>\n    Var y EQ Var y'", "apply (blast intro: OrdNotEqP_E rotate2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HFun_Sigma_sf [iff]: \"Sigma_fm (HFun_Sigma t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (HFun_Sigma t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (HFun_Sigma t)", "obtain x::name and y::name and z::name and x'::name and y'::name and z'::name\n    where atoms: \"atom z \\<sharp> (t,z',x,y,x',y')\"  \"atom z' \\<sharp> (t,x,y,x',y')\"\n       \"atom x \\<sharp> (t,y,x',y')\"  \"atom y \\<sharp> (t,x',y')\"\n       \"atom x' \\<sharp> (t,y')\"  \"atom y' \\<sharp> (t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z z' x y x' y'.\n        \\<lbrakk>atom z \\<sharp> (t, z', x, y, x', y');\n         atom z' \\<sharp> (t, x, y, x', y'); atom x \\<sharp> (t, y, x', y');\n         atom y \\<sharp> (t, x', y'); atom x' \\<sharp> (t, y');\n         atom y' \\<sharp> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom z \\<sharp> (t, z', x, y, x', y')\n  atom z' \\<sharp> (t, x, y, x', y')\n  atom x \\<sharp> (t, y, x', y')\n  atom y \\<sharp> (t, x', y')\n  atom x' \\<sharp> (t, y')\n  atom y' \\<sharp> t\n\ngoal (1 subgoal):\n 1. Sigma_fm (HFun_Sigma t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (HFun_Sigma t)", "by (auto intro!: Sigma_fm_Iff [OF HFun_Sigma_Iff [OF atoms]] simp: supp_conv_fresh atoms)"], ["proof (state)\nthis:\n  Sigma_fm (HFun_Sigma t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LstSeqP_sf [iff]: \"Sigma_fm (LstSeqP t u v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (LstSeqP t u v)", "by (auto simp: LstSeqP.simps)"], ["", "section \\<open>A Key Result: Theorem 2.5\\<close>"], ["", "subsection \\<open>Sigma-Eats Formulas\\<close>"], ["", "inductive se_fm :: \"fm \\<Rightarrow> bool\" where\n    MemI:  \"se_fm (t IN u)\"\n  | DisjI: \"se_fm A \\<Longrightarrow> se_fm B \\<Longrightarrow> se_fm (A OR B)\"\n  | ConjI: \"se_fm A \\<Longrightarrow> se_fm B \\<Longrightarrow> se_fm (A AND B)\"\n  | ExI:   \"se_fm A \\<Longrightarrow> se_fm (Ex i A)\"\n  | All2I: \"se_fm A \\<Longrightarrow> atom i \\<sharp> t \\<Longrightarrow> se_fm (All2 i t A)\""], ["", "equivariance se_fm"], ["", "nominal_inductive se_fm\n  avoids ExI: \"i\" | All2I: \"i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>A i.\n         se_fm A \\<Longrightarrow> {atom i} \\<sharp>* SyntaxN.Ex i A) &&&\n     (\\<And>A i. se_fm A \\<Longrightarrow> finite {atom i})) &&&\n    (\\<And>A i t.\n        \\<lbrakk>se_fm A; atom i \\<sharp> t\\<rbrakk>\n        \\<Longrightarrow> {atom i} \\<sharp>* All2 i t A) &&&\n    (\\<And>A i t.\n        \\<lbrakk>se_fm A; atom i \\<sharp> t\\<rbrakk>\n        \\<Longrightarrow> finite {atom i})", "by (simp_all add: fresh_star_def)"], ["", "declare se_fm.intros [intro]"], ["", "lemma subst_fm_in_se_fm: \"se_fm A \\<Longrightarrow> se_fm (A(k::=x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. se_fm A \\<Longrightarrow> se_fm (A(k::=x))", "by (nominal_induct avoiding: k x rule: se_fm.strong_induct) (auto)"], ["", "subsection\\<open>Preparation\\<close>"], ["", "text\\<open>To begin, we require some facts connecting quantification and ground terms.\\<close>"], ["", "lemma obtain_const_tm:  obtains t where \"\\<lbrakk>t\\<rbrakk>e = x\" \"ground t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = x; ground t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct x rule: hf_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>t.\n        \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = 0; ground t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis\n 2. \\<And>x y.\n       \\<lbrakk>(\\<And>t.\n                    \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = x; ground t\\<rbrakk>\n                    \\<Longrightarrow> thesis) \\<Longrightarrow>\n                thesis;\n        (\\<And>t.\n            \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y; ground t\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        x \\<^bold>\\<notin> y;\n        \\<And>t.\n           \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y \\<triangleleft> x;\n            ground t\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case 0"], ["proof (state)\nthis:\n  \\<lbrakk>\\<lbrakk>?t\\<rbrakk>e = 0; ground ?t\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. (\\<And>t.\n        \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = 0; ground t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis\n 2. \\<And>x y.\n       \\<lbrakk>(\\<And>t.\n                    \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = x; ground t\\<rbrakk>\n                    \\<Longrightarrow> thesis) \\<Longrightarrow>\n                thesis;\n        (\\<And>t.\n            \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y; ground t\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        x \\<^bold>\\<notin> y;\n        \\<And>t.\n           \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y \\<triangleleft> x;\n            ground t\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>?t\\<rbrakk>e = 0; ground ?t\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (metis ground_aux_simps(1) eval_tm.simps(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(\\<And>t.\n                    \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = x; ground t\\<rbrakk>\n                    \\<Longrightarrow> thesis) \\<Longrightarrow>\n                thesis;\n        (\\<And>t.\n            \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y; ground t\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        x \\<^bold>\\<notin> y;\n        \\<And>t.\n           \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y \\<triangleleft> x;\n            ground t\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(\\<And>t.\n                    \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = x; ground t\\<rbrakk>\n                    \\<Longrightarrow> thesis) \\<Longrightarrow>\n                thesis;\n        (\\<And>t.\n            \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y; ground t\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        x \\<^bold>\\<notin> y;\n        \\<And>t.\n           \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y \\<triangleleft> x;\n            ground t\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (hinsert y x)"], ["proof (state)\nthis:\n  (\\<And>t.\n      \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y; ground t\\<rbrakk>\n      \\<Longrightarrow> thesis) \\<Longrightarrow>\n  thesis\n  (\\<And>t.\n      \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = x; ground t\\<rbrakk>\n      \\<Longrightarrow> thesis) \\<Longrightarrow>\n  thesis\n  y \\<^bold>\\<notin> x\n  \\<lbrakk>\\<lbrakk>?t\\<rbrakk>e = x \\<triangleleft> y; ground ?t\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(\\<And>t.\n                    \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = x; ground t\\<rbrakk>\n                    \\<Longrightarrow> thesis) \\<Longrightarrow>\n                thesis;\n        (\\<And>t.\n            \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y; ground t\\<rbrakk>\n            \\<Longrightarrow> thesis) \\<Longrightarrow>\n        thesis;\n        x \\<^bold>\\<notin> y;\n        \\<And>t.\n           \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y \\<triangleleft> x;\n            ground t\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  (\\<And>t.\n      \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = y; ground t\\<rbrakk>\n      \\<Longrightarrow> thesis) \\<Longrightarrow>\n  thesis\n  (\\<And>t.\n      \\<lbrakk>\\<lbrakk>t\\<rbrakk>e = x; ground t\\<rbrakk>\n      \\<Longrightarrow> thesis) \\<Longrightarrow>\n  thesis\n  y \\<^bold>\\<notin> x\n  \\<lbrakk>\\<lbrakk>?t\\<rbrakk>e = x \\<triangleleft> y; ground ?t\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (metis ground_aux_simps(3) eval_tm.simps(3))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ex_eval_fm_iff_exists_tm:\n  \"eval_fm e (Ex k A) \\<longleftrightarrow> (\\<exists>t. eval_fm e (A(k::=t)) \\<and> ground t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fm e (SyntaxN.Ex k A) =\n    (\\<exists>t. eval_fm e (A(k::=t)) \\<and> ground t)", "by (auto simp: eval_subst_fm) (metis obtain_const_tm)"], ["", "text\\<open>In a negative context, the formulation above is actually weaker than this one.\\<close>"], ["", "lemma ex_eval_fm_iff_exists_tm':\n  \"eval_fm e (Ex k A) \\<longleftrightarrow> (\\<exists>t. eval_fm e (A(k::=t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fm e (SyntaxN.Ex k A) = (\\<exists>t. eval_fm e (A(k::=t)))", "by (auto simp: eval_subst_fm) (metis obtain_const_tm)"], ["", "text\\<open>A ground term defines a finite set of ground terms, its elements.\\<close>"], ["", "nominal_function elts :: \"tm \\<Rightarrow> tm set\" where\n   \"elts Zero       = {}\"\n | \"elts (Var k)    = {}\"\n | \"elts (Eats t u) = insert u (elts t)\""], ["proof (prove)\ngoal (9 subgoals):\n 1. eqvt elts_graph_aux\n 2. \\<And>x y. elts_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       \\<lbrakk>x = Zero \\<Longrightarrow> P;\n        \\<And>k. x = Var k \\<Longrightarrow> P;\n        \\<And>t u. x = Eats t u \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 4. Zero = Zero \\<Longrightarrow> {} = {}\n 5. \\<And>k. Zero = Var k \\<Longrightarrow> {} = {}\n 6. \\<And>t u.\n       \\<lbrakk>eqvt_at elts_sumC t; True; Zero = Eats t u\\<rbrakk>\n       \\<Longrightarrow> {} = insert u (elts_sumC t)\n 7. \\<And>k ka. Var k = Var ka \\<Longrightarrow> {} = {}\n 8. \\<And>k t u.\n       \\<lbrakk>eqvt_at elts_sumC t; True; Var k = Eats t u\\<rbrakk>\n       \\<Longrightarrow> {} = insert u (elts_sumC t)\n 9. \\<And>t u ta ua.\n       \\<lbrakk>eqvt_at elts_sumC t; eqvt_at elts_sumC ta; True; True;\n        Eats t u = Eats ta ua\\<rbrakk>\n       \\<Longrightarrow> insert u (elts_sumC t) = insert ua (elts_sumC ta)", "by (auto simp: eqvt_def elts_graph_aux_def) (metis tm.exhaust)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All elts_dom", "by lexicographic_order"], ["", "lemma eval_fm_All2_Eats:\n  \"atom i \\<sharp> (t,u) \\<Longrightarrow>\n   eval_fm e (All2 i (Eats t u) A) \\<longleftrightarrow> eval_fm e (A(i::=u)) \\<and> eval_fm e (All2 i t A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom i \\<sharp> (t, u) \\<Longrightarrow>\n    eval_fm e (All2 i (Eats t u) A) =\n    (eval_fm e (A(i::=u)) \\<and> eval_fm e (All2 i t A))", "by (simp only: ex_eval_fm_iff_exists_tm' eval_fm.simps) (auto simp: eval_subst_fm)"], ["", "text\\<open>The term @{term t} must be ground, since @{term elts} doesn't handle variables.\\<close>"], ["", "lemma eval_fm_All2_Iff_elts:\n  \"ground t \\<Longrightarrow> eval_fm e (All2 i t A) \\<longleftrightarrow> (\\<forall>u \\<in> elts t. eval_fm e (A(i::=u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground t \\<Longrightarrow>\n    eval_fm e (All2 i t A) = (\\<forall>u\\<in>elts t. eval_fm e (A(i::=u)))", "apply (induct t rule: tm.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ground Zero \\<Longrightarrow>\n    eval_fm e (All2 i Zero A) =\n    (\\<forall>u\\<in>elts Zero. eval_fm e (A(i::=u)))\n 2. \\<And>x.\n       ground (Var x) \\<Longrightarrow>\n       eval_fm e (All2 i (Var x) A) =\n       (\\<forall>u\\<in>elts (Var x). eval_fm e (A(i::=u)))\n 3. \\<And>x1 x2a.\n       \\<lbrakk>ground x1 \\<Longrightarrow>\n                eval_fm e (All2 i x1 A) =\n                (\\<forall>u\\<in>elts x1. eval_fm e (A(i::=u)));\n        ground x2a \\<Longrightarrow>\n        eval_fm e (All2 i x2a A) =\n        (\\<forall>u\\<in>elts x2a. eval_fm e (A(i::=u)));\n        ground (Eats x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval_fm e (All2 i (Eats x1 x2a) A) =\n                         (\\<forall>u\\<in>elts (Eats x1 x2a).\n                             eval_fm e (A(i::=u)))", "apply auto [2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>ground x1 \\<Longrightarrow>\n                eval_fm e (All2 i x1 A) =\n                (\\<forall>u\\<in>elts x1. eval_fm e (A(i::=u)));\n        ground x2a \\<Longrightarrow>\n        eval_fm e (All2 i x2a A) =\n        (\\<forall>u\\<in>elts x2a. eval_fm e (A(i::=u)));\n        ground (Eats x1 x2a)\\<rbrakk>\n       \\<Longrightarrow> eval_fm e (All2 i (Eats x1 x2a) A) =\n                         (\\<forall>u\\<in>elts (Eats x1 x2a).\n                             eval_fm e (A(i::=u)))", "apply (simp add: eval_fm_All2_Eats del: eval_fm.simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma prove_elts_imp_prove_All2:\n   \"ground t \\<Longrightarrow> (\\<And>u. u \\<in> elts t \\<Longrightarrow> {} \\<turnstile> A(i::=u)) \\<Longrightarrow> {} \\<turnstile> All2 i t A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ground t;\n     \\<And>u.\n        u \\<in> elts t \\<Longrightarrow> {} \\<turnstile> A(i::=u)\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile> All2 i t A", "proof (induct t rule: tm.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>ground Zero;\n     \\<And>u.\n        u \\<in> elts Zero \\<Longrightarrow>\n        {} \\<turnstile> A(i::=u)\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile> All2 i Zero A\n 2. \\<And>x.\n       \\<lbrakk>ground (Var x);\n        \\<And>u.\n           u \\<in> elts (Var x) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Var x) A\n 3. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "case Zero"], ["proof (state)\nthis:\n  ground Zero\n  ?u \\<in> elts Zero \\<Longrightarrow> {} \\<turnstile> A(i::=?u)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ground Zero;\n     \\<And>u.\n        u \\<in> elts Zero \\<Longrightarrow>\n        {} \\<turnstile> A(i::=u)\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile> All2 i Zero A\n 2. \\<And>x.\n       \\<lbrakk>ground (Var x);\n        \\<And>u.\n           u \\<in> elts (Var x) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Var x) A\n 3. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "thus ?case"], ["proof (prove)\nusing this:\n  ground Zero\n  ?u \\<in> elts Zero \\<Longrightarrow> {} \\<turnstile> A(i::=?u)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> All2 i Zero A", "by auto"], ["proof (state)\nthis:\n  {} \\<turnstile> All2 i Zero A\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>ground (Var x);\n        \\<And>u.\n           u \\<in> elts (Var x) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Var x) A\n 2. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>ground (Var x);\n        \\<And>u.\n           u \\<in> elts (Var x) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Var x) A\n 2. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "case (Var i)"], ["proof (state)\nthis:\n  ground (Var i)\n  ?u \\<in> elts (Var i) \\<Longrightarrow> {} \\<turnstile> A(i::=?u)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>ground (Var x);\n        \\<And>u.\n           u \\<in> elts (Var x) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Var x) A\n 2. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "thus ?case  \\<comment> \\<open>again: vacuously!\\<close>"], ["proof (prove)\nusing this:\n  ground (Var i)\n  ?u \\<in> elts (Var i) \\<Longrightarrow> {} \\<turnstile> A(i::=?u)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> All2 i (Var i) A", "by simp"], ["proof (state)\nthis:\n  {} \\<turnstile> All2 i (Var i) A\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "case (Eats t u)"], ["proof (state)\nthis:\n  \\<lbrakk>ground t;\n   \\<And>u.\n      u \\<in> elts t \\<Longrightarrow> {} \\<turnstile> A(i::=u)\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> All2 i t A\n  \\<lbrakk>ground u;\n   \\<And>ua.\n      ua \\<in> elts u \\<Longrightarrow> {} \\<turnstile> A(i::=ua)\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> All2 i u A\n  ground (Eats t u)\n  ?u \\<in> elts (Eats t u) \\<Longrightarrow> {} \\<turnstile> A(i::=?u)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "hence pt: \"{} \\<turnstile> All2 i t A\" and pu: \"{} \\<turnstile> A(i::=u)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>ground t;\n   \\<And>u.\n      u \\<in> elts t \\<Longrightarrow> {} \\<turnstile> A(i::=u)\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> All2 i t A\n  \\<lbrakk>ground u;\n   \\<And>ua.\n      ua \\<in> elts u \\<Longrightarrow> {} \\<turnstile> A(i::=ua)\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> All2 i u A\n  ground (Eats t u)\n  ?u \\<in> elts (Eats t u) \\<Longrightarrow> {} \\<turnstile> A(i::=?u)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> All2 i t A &&& {} \\<turnstile> A(i::=u)", "by auto"], ["proof (state)\nthis:\n  {} \\<turnstile> All2 i t A\n  {} \\<turnstile> A(i::=u)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "have \"{} \\<turnstile> ((Var i IN t) IMP A)(i ::= Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile> (Var i IN t IMP A)(i::=Var i)", "by (rule All_D [OF pt])"], ["proof (state)\nthis:\n  {} \\<turnstile> (Var i IN t IMP A)(i::=Var i)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "hence \"{} \\<turnstile> ((Var i IN t) IMP A)\""], ["proof (prove)\nusing this:\n  {} \\<turnstile> (Var i IN t IMP A)(i::=Var i)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> Var i IN t IMP A", "by simp"], ["proof (state)\nthis:\n  {} \\<turnstile> Var i IN t IMP A\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2a.\n       \\<lbrakk>\\<lbrakk>ground x1;\n                 \\<And>u.\n                    u \\<in> elts x1 \\<Longrightarrow>\n                    {} \\<turnstile> A(i::=u)\\<rbrakk>\n                \\<Longrightarrow> {} \\<turnstile> All2 i x1 A;\n        \\<lbrakk>ground x2a;\n         \\<And>u.\n            u \\<in> elts x2a \\<Longrightarrow>\n            {} \\<turnstile> A(i::=u)\\<rbrakk>\n        \\<Longrightarrow> {} \\<turnstile> All2 i x2a A;\n        ground (Eats x1 x2a);\n        \\<And>u.\n           u \\<in> elts (Eats x1 x2a) \\<Longrightarrow>\n           {} \\<turnstile> A(i::=u)\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> All2 i (Eats x1 x2a) A", "thus ?case"], ["proof (prove)\nusing this:\n  {} \\<turnstile> Var i IN t IMP A\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> All2 i (Eats t u) A", "using pu"], ["proof (prove)\nusing this:\n  {} \\<turnstile> Var i IN t IMP A\n  {} \\<turnstile> A(i::=u)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> All2 i (Eats t u) A", "by (auto intro: anti_deduction) (metis Iff_MP_same Var_Eq_subst_Iff thin1)"], ["proof (state)\nthis:\n  {} \\<turnstile> All2 i (Eats t u) A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>The base cases: ground atomic formulas\\<close>"], ["", "lemma ground_prove:\n   \"\\<lbrakk>size t + size u < n; ground t; ground u\\<rbrakk>\n    \\<Longrightarrow> (\\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow> {} \\<turnstile> t SUBS u) \\<and> (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow> {} \\<turnstile> t IN u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>size t + size u < n; ground t; ground u\\<rbrakk>\n    \\<Longrightarrow> (\\<lbrakk>t\\<rbrakk>e\n                       \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n                       {} \\<turnstile> t SUBS u) \\<and>\n                      (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n                       \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n                       {} \\<turnstile> t IN u)", "proof (induction n arbitrary: t u rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x t u.\n       \\<lbrakk>\\<And>y t u.\n                   \\<lbrakk>y < x; size t + size u < y; ground t;\n                    ground u\\<rbrakk>\n                   \\<Longrightarrow> (\\<lbrakk>t\\<rbrakk>e\n\\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n{} \\<turnstile> t SUBS u) \\<and>\n                                     (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n\\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n{} \\<turnstile> t IN u);\n        size t + size u < x; ground t; ground u\\<rbrakk>\n       \\<Longrightarrow> (\\<lbrakk>t\\<rbrakk>e\n                          \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n                          {} \\<turnstile> t SUBS u) \\<and>\n                         (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n                          \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n                          {} \\<turnstile> t IN u)", "case (less n t u)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; size ?t + size ?u < ?y; ground ?t; ground ?u\\<rbrakk>\n  \\<Longrightarrow> (\\<lbrakk>?t\\<rbrakk>e\n                     \\<le> \\<lbrakk>?u\\<rbrakk>e \\<longrightarrow>\n                     {} \\<turnstile> ?t SUBS ?u) \\<and>\n                    (\\<lbrakk>?t\\<rbrakk>e \\<^bold>\\<in>\n                     \\<lbrakk>?u\\<rbrakk>e \\<longrightarrow>\n                     {} \\<turnstile> ?t IN ?u)\n  size t + size u < n\n  ground t\n  ground u\n\ngoal (1 subgoal):\n 1. \\<And>x t u.\n       \\<lbrakk>\\<And>y t u.\n                   \\<lbrakk>y < x; size t + size u < y; ground t;\n                    ground u\\<rbrakk>\n                   \\<Longrightarrow> (\\<lbrakk>t\\<rbrakk>e\n\\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n{} \\<turnstile> t SUBS u) \\<and>\n                                     (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n\\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n{} \\<turnstile> t IN u);\n        size t + size u < x; ground t; ground u\\<rbrakk>\n       \\<Longrightarrow> (\\<lbrakk>t\\<rbrakk>e\n                          \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n                          {} \\<turnstile> t SUBS u) \\<and>\n                         (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n                          \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n                          {} \\<turnstile> t IN u)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n     {} \\<turnstile> t SUBS u) \\<and>\n    (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n     \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n     {} \\<turnstile> t IN u)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t SUBS u\n 2. \\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n    \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t IN u", "show \"\\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow> {} \\<turnstile> t SUBS u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t SUBS u", "using less"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y < n; size ?t + size ?u < ?y; ground ?t; ground ?u\\<rbrakk>\n  \\<Longrightarrow> (\\<lbrakk>?t\\<rbrakk>e\n                     \\<le> \\<lbrakk>?u\\<rbrakk>e \\<longrightarrow>\n                     {} \\<turnstile> ?t SUBS ?u) \\<and>\n                    (\\<lbrakk>?t\\<rbrakk>e \\<^bold>\\<in>\n                     \\<lbrakk>?u\\<rbrakk>e \\<longrightarrow>\n                     {} \\<turnstile> ?t IN ?u)\n  size t + size u < n\n  ground t\n  ground u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t SUBS u", "by (cases t rule: tm.exhaust) auto"], ["proof (state)\nthis:\n  \\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n  {} \\<turnstile> t SUBS u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n    \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t IN u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n    \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t IN u", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n    \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t IN u", "fix y t u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ta__\\<rbrakk>e \\<^bold>\\<in>\n    \\<lbrakk>ua__\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> ta__ IN ua__", "have \"\\<lbrakk>y < n; size t + size u < y; ground t; ground u; \\<lbrakk>t\\<rbrakk>e = \\<lbrakk>u\\<rbrakk>e\\<rbrakk>\n           \\<Longrightarrow> {} \\<turnstile> t EQ u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y < n; size t + size u < y; ground t; ground u;\n     \\<lbrakk>t\\<rbrakk>e = \\<lbrakk>u\\<rbrakk>e\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile> t EQ u", "by (metis Equality_I less.IH add.commute order_refl)"], ["proof (state)\nthis:\n  \\<lbrakk>y < n; size t + size u < y; ground t; ground u;\n   \\<lbrakk>t\\<rbrakk>e = \\<lbrakk>u\\<rbrakk>e\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> t EQ u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ta__\\<rbrakk>e \\<^bold>\\<in>\n    \\<lbrakk>ua__\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> ta__ IN ua__", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?y2 < n; size ?tb2 + size ?ub2 < ?y2; ground ?tb2; ground ?ub2;\n   \\<lbrakk>?tb2\\<rbrakk>e = \\<lbrakk>?ub2\\<rbrakk>e\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> ?tb2 EQ ?ub2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n    \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t IN u", "thus \"\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow> {} \\<turnstile> t IN u\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y2 < n; size ?tb2 + size ?ub2 < ?y2; ground ?tb2; ground ?ub2;\n   \\<lbrakk>?tb2\\<rbrakk>e = \\<lbrakk>?ub2\\<rbrakk>e\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> ?tb2 EQ ?ub2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n    \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t IN u", "using less.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y2 < n; size ?tb2 + size ?ub2 < ?y2; ground ?tb2; ground ?ub2;\n   \\<lbrakk>?tb2\\<rbrakk>e = \\<lbrakk>?ub2\\<rbrakk>e\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> ?tb2 EQ ?ub2\n  size t + size u < n\n  ground t\n  ground u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n    \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n    {} \\<turnstile> t IN u", "by (cases u rule: tm.exhaust) (auto simp: Mem_Eats_I1 Mem_Eats_I2 less.IH)"], ["proof (state)\nthis:\n  \\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n  {} \\<turnstile> t IN u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n   {} \\<turnstile> t SUBS u) \\<and>\n  (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in> \\<lbrakk>u\\<rbrakk>e \\<longrightarrow>\n   {} \\<turnstile> t IN u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \n  assumes \"ground t\" \"ground u\"\n    shows ground_prove_SUBS: \"\\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<Longrightarrow> {} \\<turnstile> t SUBS u\"\n      and ground_prove_IN:   \"\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in> \\<lbrakk>u\\<rbrakk>e \\<Longrightarrow> {} \\<turnstile> t IN u\"\n      and ground_prove_EQ:   \"\\<lbrakk>t\\<rbrakk>e = \\<lbrakk>u\\<rbrakk>e \\<Longrightarrow> {} \\<turnstile> t EQ u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>t\\<rbrakk>e \\<le> \\<lbrakk>u\\<rbrakk>e \\<Longrightarrow>\n     {} \\<turnstile> t SUBS u) &&&\n    (\\<lbrakk>t\\<rbrakk>e \\<^bold>\\<in>\n     \\<lbrakk>u\\<rbrakk>e \\<Longrightarrow>\n     {} \\<turnstile> t IN u) &&&\n    (\\<lbrakk>t\\<rbrakk>e = \\<lbrakk>u\\<rbrakk>e \\<Longrightarrow>\n     {} \\<turnstile> t EQ u)", "by (metis Equality_I assms ground_prove [OF lessI] order_refl)+"], ["", "lemma ground_subst: \n  \"ground_aux tm (insert (atom i) S) \\<Longrightarrow> ground t \\<Longrightarrow> ground_aux (subst i t tm) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ground_aux tm (insert (atom i) S); ground t\\<rbrakk>\n    \\<Longrightarrow> ground_aux (subst i t tm) S", "by (induct tm rule: tm.induct) (auto simp: ground_aux_def)"], ["", "lemma ground_subst_fm: \n  \"ground_fm_aux A (insert (atom i) S) \\<Longrightarrow> ground t \\<Longrightarrow> ground_fm_aux (A(i::=t)) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ground_fm_aux A (insert (atom i) S); ground t\\<rbrakk>\n    \\<Longrightarrow> ground_fm_aux (A(i::=t)) S", "apply (nominal_induct A avoiding: i arbitrary: S rule: fm.strong_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 i S.\n       \\<lbrakk>ground_fm_aux (x1 IN x2) (insert (atom i) S);\n        ground t\\<rbrakk>\n       \\<Longrightarrow> ground_fm_aux ((x1 IN x2)(i::=t)) S\n 2. \\<And>x1 x2 i S.\n       \\<lbrakk>ground_fm_aux (x1 EQ x2) (insert (atom i) S);\n        ground t\\<rbrakk>\n       \\<Longrightarrow> ground_fm_aux ((x1 EQ x2)(i::=t)) S\n 3. \\<And>x1 x2 i S.\n       \\<lbrakk>\\<And>b S.\n                   \\<lbrakk>ground_fm_aux x1 (insert (atom b) S);\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> ground_fm_aux (x1(b::=t)) S;\n        \\<And>b S.\n           \\<lbrakk>ground_fm_aux x2 (insert (atom b) S); ground t\\<rbrakk>\n           \\<Longrightarrow> ground_fm_aux (x2(b::=t)) S;\n        ground_fm_aux (x1 OR x2) (insert (atom i) S); ground t\\<rbrakk>\n       \\<Longrightarrow> ground_fm_aux ((x1 OR x2)(i::=t)) S\n 4. \\<And>x i S.\n       \\<lbrakk>\\<And>b S.\n                   \\<lbrakk>ground_fm_aux x (insert (atom b) S);\n                    ground t\\<rbrakk>\n                   \\<Longrightarrow> ground_fm_aux (x(b::=t)) S;\n        ground_fm_aux (Neg x) (insert (atom i) S); ground t\\<rbrakk>\n       \\<Longrightarrow> ground_fm_aux ((Neg x)(i::=t)) S\n 5. \\<And>x1 x2 i S.\n       \\<lbrakk>atom x1 \\<sharp> i;\n        \\<And>b S.\n           \\<lbrakk>ground_fm_aux x2 (insert (atom b) S); ground t\\<rbrakk>\n           \\<Longrightarrow> ground_fm_aux (x2(b::=t)) S;\n        ground_fm_aux (SyntaxN.Ex x1 x2) (insert (atom i) S);\n        ground t\\<rbrakk>\n       \\<Longrightarrow> ground_fm_aux ((SyntaxN.Ex x1 x2)(i::=t)) S", "apply (auto simp: ground_subst Set.insert_commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma elts_imp_ground: \"u \\<in> elts t \\<Longrightarrow> ground_aux t S \\<Longrightarrow> ground_aux u S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u \\<in> elts t; ground_aux t S\\<rbrakk>\n    \\<Longrightarrow> ground_aux u S", "by (induct t rule: tm.induct) auto"], ["", "lemma ground_se_fm_induction:\n   \"ground_fm \\<alpha> \\<Longrightarrow> size \\<alpha> < n \\<Longrightarrow> se_fm \\<alpha> \\<Longrightarrow> eval_fm e \\<alpha> \\<Longrightarrow> {} \\<turnstile> \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ground_fm \\<alpha>; size \\<alpha> < n; se_fm \\<alpha>;\n     eval_fm e \\<alpha>\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "proof (induction n arbitrary: \\<alpha> rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<alpha>.\n       \\<lbrakk>\\<And>y \\<alpha>.\n                   \\<lbrakk>y < x; ground_fm \\<alpha>; size \\<alpha> < y;\n                    se_fm \\<alpha>; eval_fm e \\<alpha>\\<rbrakk>\n                   \\<Longrightarrow> {} \\<turnstile> \\<alpha>;\n        ground_fm \\<alpha>; size \\<alpha> < x; se_fm \\<alpha>;\n        eval_fm e \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "case (less n \\<alpha>)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; ground_fm ?\\<alpha>; size ?\\<alpha> < ?y;\n   se_fm ?\\<alpha>; eval_fm e ?\\<alpha>\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> ?\\<alpha>\n  ground_fm \\<alpha>\n  size \\<alpha> < n\n  se_fm \\<alpha>\n  eval_fm e \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<alpha>.\n       \\<lbrakk>\\<And>y \\<alpha>.\n                   \\<lbrakk>y < x; ground_fm \\<alpha>; size \\<alpha> < y;\n                    se_fm \\<alpha>; eval_fm e \\<alpha>\\<rbrakk>\n                   \\<Longrightarrow> {} \\<turnstile> \\<alpha>;\n        ground_fm \\<alpha>; size \\<alpha> < x; se_fm \\<alpha>;\n        eval_fm e \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "using \\<open>se_fm \\<alpha>\\<close>"], ["proof (prove)\nusing this:\n  se_fm \\<alpha>\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "proof (cases rule: se_fm.cases)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>t u. \\<alpha> = t IN u \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A OR B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 3. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A AND B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 4. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 5. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "case (MemI t u)"], ["proof (state)\nthis:\n  \\<alpha> = t IN u\n\ngoal (5 subgoals):\n 1. \\<And>t u. \\<alpha> = t IN u \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A OR B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 3. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A AND B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 4. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 5. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "thus \"{} \\<turnstile> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<alpha> = t IN u\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "using less"], ["proof (prove)\nusing this:\n  \\<alpha> = t IN u\n  \\<lbrakk>?y < n; ground_fm ?\\<alpha>; size ?\\<alpha> < ?y;\n   se_fm ?\\<alpha>; eval_fm e ?\\<alpha>\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> ?\\<alpha>\n  ground_fm \\<alpha>\n  size \\<alpha> < n\n  se_fm \\<alpha>\n  eval_fm e \\<alpha>\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "by (auto intro: ground_prove_IN)"], ["proof (state)\nthis:\n  {} \\<turnstile> \\<alpha>\n\ngoal (4 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A OR B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A AND B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 3. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 4. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A OR B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A AND B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 3. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 4. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "case (DisjI A B)"], ["proof (state)\nthis:\n  \\<alpha> = A OR B\n  se_fm A\n  se_fm B\n\ngoal (4 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A OR B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A AND B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 3. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 4. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "thus \"{} \\<turnstile> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<alpha> = A OR B\n  se_fm A\n  se_fm B\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "using less"], ["proof (prove)\nusing this:\n  \\<alpha> = A OR B\n  se_fm A\n  se_fm B\n  \\<lbrakk>?y < n; ground_fm ?\\<alpha>; size ?\\<alpha> < ?y;\n   se_fm ?\\<alpha>; eval_fm e ?\\<alpha>\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> ?\\<alpha>\n  ground_fm \\<alpha>\n  size \\<alpha> < n\n  se_fm \\<alpha>\n  eval_fm e \\<alpha>\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "by (auto intro: Disj_I1 Disj_I2)"], ["proof (state)\nthis:\n  {} \\<turnstile> \\<alpha>\n\ngoal (3 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A AND B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 3. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A AND B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 3. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "case (ConjI A B)"], ["proof (state)\nthis:\n  \\<alpha> = A AND B\n  se_fm A\n  se_fm B\n\ngoal (3 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>\\<alpha> = A AND B; se_fm A; se_fm B\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 3. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "thus \"{} \\<turnstile> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<alpha> = A AND B\n  se_fm A\n  se_fm B\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "using less"], ["proof (prove)\nusing this:\n  \\<alpha> = A AND B\n  se_fm A\n  se_fm B\n  \\<lbrakk>?y < n; ground_fm ?\\<alpha>; size ?\\<alpha> < ?y;\n   se_fm ?\\<alpha>; eval_fm e ?\\<alpha>\\<rbrakk>\n  \\<Longrightarrow> {} \\<turnstile> ?\\<alpha>\n  ground_fm \\<alpha>\n  size \\<alpha> < n\n  se_fm \\<alpha>\n  eval_fm e \\<alpha>\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "by auto"], ["proof (state)\nthis:\n  {} \\<turnstile> \\<alpha>\n\ngoal (2 subgoals):\n 1. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "case (ExI A i)"], ["proof (state)\nthis:\n  \\<alpha> = SyntaxN.Ex i A\n  se_fm A\n\ngoal (2 subgoals):\n 1. \\<And>A i.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>\n 2. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "thus \"{} \\<turnstile> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<alpha> = SyntaxN.Ex i A\n  se_fm A\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "using less.prems"], ["proof (prove)\nusing this:\n  \\<alpha> = SyntaxN.Ex i A\n  se_fm A\n  ground_fm \\<alpha>\n  size \\<alpha> < n\n  se_fm \\<alpha>\n  eval_fm e \\<alpha>\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "apply (auto simp: ex_eval_fm_iff_exists_tm simp del: better_ex_eval_fm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<alpha> = SyntaxN.Ex i A; se_fm A;\n        ground_fm_aux A {atom i}; Suc (size A) < n; se_fm (SyntaxN.Ex i A);\n        eval_fm e (A(i::=t)); ground t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> SyntaxN.Ex i A", "apply (auto intro!: Ex_I less.IH subst_fm_in_se_fm ground_subst_fm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "case (All2I A i t)"], ["proof (state)\nthis:\n  \\<alpha> = All2 i t A\n  se_fm A\n  atom i \\<sharp> t\n\ngoal (1 subgoal):\n 1. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "hence t: \"ground t\""], ["proof (prove)\nusing this:\n  \\<alpha> = All2 i t A\n  se_fm A\n  atom i \\<sharp> t\n\ngoal (1 subgoal):\n 1. ground t", "using less.prems"], ["proof (prove)\nusing this:\n  \\<alpha> = All2 i t A\n  se_fm A\n  atom i \\<sharp> t\n  ground_fm \\<alpha>\n  size \\<alpha> < n\n  se_fm \\<alpha>\n  eval_fm e \\<alpha>\n\ngoal (1 subgoal):\n 1. ground t", "by (auto simp: ground_aux_def fresh_def)"], ["proof (state)\nthis:\n  ground t\n\ngoal (1 subgoal):\n 1. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "hence \"(\\<forall>u\\<in>elts t. eval_fm e (A(i::=u)))\""], ["proof (prove)\nusing this:\n  ground t\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>elts t. eval_fm e (A(i::=u))", "by (metis All2I(1) t eval_fm_All2_Iff_elts less(5))"], ["proof (state)\nthis:\n  \\<forall>u\\<in>elts t. eval_fm e (A(i::=u))\n\ngoal (1 subgoal):\n 1. \\<And>A i t.\n       \\<lbrakk>\\<alpha> = All2 i t A; se_fm A; atom i \\<sharp> t\\<rbrakk>\n       \\<Longrightarrow> {} \\<turnstile> \\<alpha>", "thus \"{} \\<turnstile> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>elts t. eval_fm e (A(i::=u))\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "using less.prems All2I t"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>elts t. eval_fm e (A(i::=u))\n  ground_fm \\<alpha>\n  size \\<alpha> < n\n  se_fm \\<alpha>\n  eval_fm e \\<alpha>\n  \\<alpha> = All2 i t A\n  se_fm A\n  atom i \\<sharp> t\n  ground t\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> \\<alpha>", "apply (auto del: Neg_I intro!: prove_elts_imp_prove_All2 less.IH)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>\\<forall>u\\<in>elts t. eval_fm e (A(i::=u));\n        Suc (Suc (Suc (Suc (Suc (size A))))) < n; se_fm (All2 i t A);\n        \\<forall>x.\n           x \\<^bold>\\<in> \\<lbrakk>t\\<rbrakk>e \\<longrightarrow>\n           eval_fm (finfun_update e i x) A;\n        \\<alpha> = All2 i t A; se_fm A; ground t; ground_aux t {atom i};\n        ground_fm_aux A {atom i}; u \\<in> elts t\\<rbrakk>\n       \\<Longrightarrow> ground_fm (A(i::=u))\n 2. \\<And>u.\n       \\<lbrakk>\\<forall>u\\<in>elts t. eval_fm e (A(i::=u));\n        Suc (Suc (Suc (Suc (Suc (size A))))) < n; se_fm (All2 i t A);\n        \\<forall>x.\n           x \\<^bold>\\<in> \\<lbrakk>t\\<rbrakk>e \\<longrightarrow>\n           eval_fm (finfun_update e i x) A;\n        \\<alpha> = All2 i t A; se_fm A; ground t; ground_aux t {atom i};\n        ground_fm_aux A {atom i}; u \\<in> elts t\\<rbrakk>\n       \\<Longrightarrow> se_fm (A(i::=u))", "apply (auto intro: subst_fm_in_se_fm ground_subst_fm elts_imp_ground)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile> \\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {} \\<turnstile> \\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ss_imp_se_fm: \"ss_fm A \\<Longrightarrow> se_fm A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss_fm A \\<Longrightarrow> se_fm A", "by (erule ss_fm.induct) auto"], ["", "lemma se_fm_imp_thm: \"\\<lbrakk>se_fm A; ground_fm A; eval_fm e A\\<rbrakk> \\<Longrightarrow> {} \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>se_fm A; ground_fm A; eval_fm e A\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile> A", "by (metis ground_se_fm_induction lessI)"], ["", "text\\<open>Theorem 2.5\\<close>"], ["", "theorem Sigma_fm_imp_thm: \"\\<lbrakk>Sigma_fm A; ground_fm A; eval_fm e0 A\\<rbrakk> \\<Longrightarrow> {} \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Sigma_fm A; ground_fm A; eval_fm e0 A\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile> A", "by (metis Iff_MP2_same ss_imp_se_fm empty_iff Sigma_fm_def eval_fm_Iff ground_fm_aux_def \n            hfthm_sound se_fm_imp_thm subset_empty)"], ["", "end"]]}