{"file_name": "/home/qj213/afp-2021-10-22/thys/Incompleteness/Goedel_I.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Incompleteness", "problem_names": ["lemma\n  shows SeqWRP_fresh_iff [simp]: \"a \\<sharp> SeqWRP s k y \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y\" (is ?thesis1)\n    and eval_fm_SeqWRP [simp]:   \"eval_fm e (SeqWRP s k y) \\<longleftrightarrow> SeqWR \\<lbrakk>s\\<rbrakk>e \\<lbrakk>k\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\"  (is ?thesis2)\n    and SeqWRP_sf [iff]:         \"Sigma_fm (SeqWRP s k y)\"  (is ?thsf)", "lemma SeqWRP_subst [simp]:\n      \"(SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)\"", "lemma SeqWRP_cong:\n  assumes \"H \\<turnstile> s EQ s'\" and  \"H \\<turnstile> k EQ k'\" and  \"H \\<turnstile> y EQ y'\"\n  shows \"H \\<turnstile> SeqWRP s k y IFF SeqWRP s' k' y'\"", "lemma\n  shows WRP_fresh_iff [simp]: \"a \\<sharp> WRP x y \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> y\" (is ?thesis1)\n    and eval_fm_WRP [simp]:   \"eval_fm e (WRP x y) \\<longleftrightarrow> WR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\"  (is ?thesis2)\n    and sigma_fm_WRP [simp]:  \"Sigma_fm (WRP x y)\"  (is ?thsf)", "lemma WRP_subst [simp]: \"(WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)\"", "lemma WRP_cong: \"H \\<turnstile> t EQ t' \\<Longrightarrow> H \\<turnstile> u EQ u' \\<Longrightarrow> H \\<turnstile> WRP t u IFF WRP t' u'\"", "lemma WR0_iff: \"WR 0 y \\<longleftrightarrow> y=0\"", "lemma WR0: \"WR 0 0\"", "lemma WR_succ_iff: assumes i: \"Ord i\" shows \"WR (succ i) z = (\\<exists>y. z = q_Eats y y \\<and> WR i y)\"", "lemma WR_succ: \"Ord i \\<Longrightarrow> WR (succ i) (q_Eats y y) = WR i y\"", "lemma WR_ord_of: \"WR (ord_of i) \\<lbrakk>\\<guillemotleft>ORD_OF i\\<guillemotright>\\<rbrakk>e\"", "lemma WR_quot_Var: \"WR \\<lbrakk>\\<guillemotleft>Var x\\<guillemotright>\\<rbrakk>e \\<lbrakk>\\<guillemotleft>\\<guillemotleft>Var x\\<guillemotright>\\<guillemotright>\\<rbrakk>e\"", "lemma ground_WRP [simp]: \"ground_fm (WRP x y) \\<longleftrightarrow> ground x \\<and> ground y\"", "lemma prove_WRP:  \"{} \\<turnstile> WRP \\<guillemotleft>Var x\\<guillemotright> \\<guillemotleft>\\<guillemotleft>Var x\\<guillemotright>\\<guillemotright>\"", "lemma SeqWRP_Zero_E:\n  assumes \"insert (y EQ Zero) H \\<turnstile> A\"  \"H \\<turnstile> k EQ Zero\"\n  shows \"insert (SeqWRP s k y) H \\<turnstile> A\"", "lemma SeqWRP_SUCC_lemma:\n  assumes y': \"atom y' \\<sharp> (s,k,y)\"\n  shows \"{SeqWRP s (SUCC k) y} \\<turnstile> Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\"", "lemma SeqWRP_SUCC_E:\n  assumes y': \"atom y' \\<sharp> (s,k,y)\" and k': \"H \\<turnstile> k' EQ (SUCC k)\"\n  shows \"insert (SeqWRP s k' y) H  \\<turnstile> Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\"", "lemma SeqWRP_unique: \"{OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y\"", "theorem WRP_unique: \"{OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y\"", "lemma W0 [simp]: \"W 0 = Zero\"", "lemma W_succ [simp]: \"Ord i \\<Longrightarrow> W (succ i) = Q_Eats (W i) (W i)\"", "lemma W_ord_of [simp]: \"W (ord_of i) = \\<guillemotleft>ORD_OF i\\<guillemotright>\"", "lemma WR_iff_eq_W: \"Ord x \\<Longrightarrow> WR x y \\<longleftrightarrow> y = \\<lbrakk>W x\\<rbrakk>e\"", "lemma\n shows SeqHRP_fresh_iff [simp]:\n      \"a \\<sharp> SeqHRP x x' s k \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n   and eval_fm_SeqHRP [simp]:\n      \"eval_fm e (SeqHRP x x' s k) \\<longleftrightarrow> SeqHR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e \\<lbrakk>s\\<rbrakk>e \\<lbrakk>k\\<rbrakk>e\"  (is ?thesis2)\n  and SeqHRP_sf [iff]:  \"Sigma_fm (SeqHRP x x' s k)\"  (is ?thsf)\n  and SeqHRP_imp_OrdP: \"{ SeqHRP x y s k } \\<turnstile> OrdP k\"  (is ?thord)", "lemma SeqHRP_subst [simp]:\n      \"(SeqHRP x x' s k)(i::=t) = SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)\"", "lemma SeqHRP_cong:\n  assumes \"H \\<turnstile> x EQ x'\" and \"H \\<turnstile> y EQ y'\" \"H \\<turnstile> s EQ s'\" and  \"H \\<turnstile> k EQ k'\"\n  shows \"H \\<turnstile> SeqHRP x y s k IFF SeqHRP x' y' s' k'\"", "lemma\n shows HRP_fresh_iff [simp]: \"a \\<sharp> HRP x x' \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> x'\"  (is ?thesis1)\n   and eval_fm_HRP [simp]:   \"eval_fm e (HRP x x') \\<longleftrightarrow> HR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e\"  (is ?thesis2)\n   and HRP_sf [iff]:         \"Sigma_fm (HRP x x')\"  (is ?thsf)", "lemma HRP_subst [simp]: \"(HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')\"", "lemma SeqHRP_lemma:\n  assumes \"atom m \\<sharp> (x,x',s,k,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (x,x',s,k,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (x,x',s,k,sm',sn,sn')\" \"atom sm' \\<sharp> (x,x',s,k,sn,sn')\"\n          \"atom sn \\<sharp> (x,x',s,k,sn')\" \"atom sn' \\<sharp> (x,x',s,k)\"\n    shows \"{ SeqHRP x x' s k }\n         \\<turnstile> (OrdP x AND WRP x x') OR\n             Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN k AND Var n IN k AND\n                       SeqHRP (Var sm) (Var sm') s (Var m) AND\n                       SeqHRP (Var sn) (Var sn') s (Var n) AND\n                       x EQ HPair (Var sm) (Var sn) AND\n                       x' EQ Q_HPair (Var sm') (Var sn')))))))\"", "lemma SeqHRP_unique: \"{SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y\"", "theorem HRP_unique: \"{HRP x y, HRP x y'} \\<turnstile> y' EQ y\"", "lemma HF_Ord [simp]: \"Ord i \\<Longrightarrow> HF i = W i\"", "lemma HF_pair [simp]: \"HF (hpair x y) = Q_HPair (HF x) (HF y)\"", "lemma SeqHR_hpair: \"SeqHR x1 x3 s1 k1 \\<Longrightarrow> SeqHR x2 x4 s2 k2 \\<Longrightarrow> \\<exists>s k. SeqHR \\<langle>x1,x2\\<rangle> (q_HPair x3 x4) s k\"", "lemma HR_H:  \"coding_hf x \\<Longrightarrow> HR x \\<lbrakk>HF x\\<rbrakk>e\"", "lemma HF_quot_coding_tm: \"coding_tm t \\<Longrightarrow> HF \\<lbrakk>t\\<rbrakk>e = \\<guillemotleft>t\\<guillemotright>\"", "lemma HR_quot_fm: fixes A::fm shows \"HR \\<lbrakk>\\<guillemotleft>A\\<guillemotright>\\<rbrakk>e \\<lbrakk>\\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\\<rbrakk>e\"", "lemma prove_HRP: fixes A::fm shows \"{} \\<turnstile> HRP \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\"", "lemma KRP_fresh_iff [simp]: \"a \\<sharp> KRP v x x' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x'\"", "lemma KRP_subst [simp]: \"(KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')\"", "lemma prove_SubstFormP: \"{} \\<turnstile> SubstFormP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright> \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>\"", "lemma prove_KRP: \"{} \\<turnstile> KRP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>\"", "lemma KRP_unique: \"{KRP v x y, KRP v x y'} \\<turnstile> y' EQ y\"", "lemma KRP_subst_fm: \"{KRP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>\\<beta>\\<guillemotright> (Var j)} \\<turnstile> Var j EQ \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>\"", "lemma diagonal: \n  obtains \\<delta> where \"{} \\<turnstile> \\<delta> IFF \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>)\"  \"supp \\<delta> = supp \\<alpha> - {atom i}\"", "theorem Goedel_I:\n  obtains \\<delta> where \"{} \\<turnstile> \\<delta> IFF Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>)\"  \"\\<not> {} \\<turnstile> \\<delta>\"  \"\\<not> {} \\<turnstile> Neg \\<delta>\"  \n                  \"eval_fm e \\<delta>\"  \"ground_fm \\<delta>\""], "translations": [["", "lemma\n  shows SeqWRP_fresh_iff [simp]: \"a \\<sharp> SeqWRP s k y \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y\" (is ?thesis1)\n    and eval_fm_SeqWRP [simp]:   \"eval_fm e (SeqWRP s k y) \\<longleftrightarrow> SeqWR \\<lbrakk>s\\<rbrakk>e \\<lbrakk>k\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\"  (is ?thesis2)\n    and SeqWRP_sf [iff]:         \"Sigma_fm (SeqWRP s k y)\"  (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> SeqWRP s k y =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y) &&&\n    eval_fm e (SeqWRP s k y) =\n    SeqWR \\<lbrakk>s\\<rbrakk>e \\<lbrakk>k\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e &&&\n    Sigma_fm (SeqWRP s k y)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. a \\<sharp> SeqWRP s k y =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y)\n 2. eval_fm e (SeqWRP s k y) =\n    SeqWR \\<lbrakk>s\\<rbrakk>e \\<lbrakk>k\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\n 3. Sigma_fm (SeqWRP s k y)", "obtain l::name and sl::name where \"atom l \\<sharp> (s,k,sl)\" \"atom sl \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, sl)\n  atom sl \\<sharp> s\n\ngoal (3 subgoals):\n 1. a \\<sharp> SeqWRP s k y =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y)\n 2. eval_fm e (SeqWRP s k y) =\n    SeqWR \\<lbrakk>s\\<rbrakk>e \\<lbrakk>k\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\n 3. Sigma_fm (SeqWRP s k y)", "thus ?thesis1 ?thesis2 ?thsf"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl)\n  atom sl \\<sharp> s\n\ngoal (1 subgoal):\n 1. a \\<sharp> SeqWRP s k y =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y) &&&\n    eval_fm e (SeqWRP s k y) =\n    SeqWR \\<lbrakk>s\\<rbrakk>e \\<lbrakk>k\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e &&&\n    Sigma_fm (SeqWRP s k y)", "by (auto simp: SeqWR_def q_defs LstSeq_imp_Ord\n             Seq_iff_app [of \"\\<lbrakk>s\\<rbrakk>e\", OF LstSeq_imp_Seq_succ]\n             Ord_trans [of _ _ \"succ \\<lbrakk>k\\<rbrakk>e\"])"], ["proof (state)\nthis:\n  a \\<sharp> SeqWRP s k y =\n  (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y)\n  eval_fm e (SeqWRP s k y) =\n  SeqWR \\<lbrakk>s\\<rbrakk>e \\<lbrakk>k\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\n  Sigma_fm (SeqWRP s k y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqWRP_subst [simp]:\n      \"(SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)", "obtain l::name and sl::name\n    where \"atom l \\<sharp> (s,k,sl,t,i)\" \"atom sl \\<sharp> (s,k,t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> (s, k, sl, t, i);\n         atom sl \\<sharp> (s, k, t, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, sl, t, i)\n  atom sl \\<sharp> (s, k, t, i)\n\ngoal (1 subgoal):\n 1. (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl, t, i)\n  atom sl \\<sharp> (s, k, t, i)\n\ngoal (1 subgoal):\n 1. (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)", "by (auto simp: SeqWRP.simps [where l=l and sl=sl])"], ["proof (state)\nthis:\n  (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqWRP_cong:\n  assumes \"H \\<turnstile> s EQ s'\" and  \"H \\<turnstile> k EQ k'\" and  \"H \\<turnstile> y EQ y'\"\n  shows \"H \\<turnstile> SeqWRP s k y IFF SeqWRP s' k' y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<turnstile> SeqWRP s k y IFF SeqWRP s' k' y'", "by (rule P3_cong [OF _ assms], auto)"], ["", "declare SeqWRP.simps [simp del]"], ["", "subsection\\<open>Predicate form of W\\<close>"], ["", "definition WR :: \"hf \\<Rightarrow> hf \\<Rightarrow> bool\"\n  where \"WR x y \\<equiv> (\\<exists>s. SeqWR s x y)\""], ["", "nominal_function WRP :: \"tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom s \\<sharp> (x,y)\\<rbrakk> \\<Longrightarrow>\n    WRP x y = Ex s (SeqWRP (Var s) x y)\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt WRP_graph_aux\n 2. \\<And>x y. WRP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>s xa y.\n           \\<lbrakk>atom s \\<sharp> (xa, y); x = (xa, y)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>s x y sa xa ya.\n       \\<lbrakk>atom s \\<sharp> (x, y); atom sa \\<sharp> (xa, ya);\n        (x, y) = (xa, ya)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex s (SeqWRP (Var s) x y) =\n                         SyntaxN.Ex sa (SeqWRP (Var sa) xa ya)", "by (auto simp: eqvt_def WRP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All WRP_dom", "by lexicographic_order"], ["", "lemma\n  shows WRP_fresh_iff [simp]: \"a \\<sharp> WRP x y \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> y\" (is ?thesis1)\n    and eval_fm_WRP [simp]:   \"eval_fm e (WRP x y) \\<longleftrightarrow> WR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\"  (is ?thesis2)\n    and sigma_fm_WRP [simp]:  \"Sigma_fm (WRP x y)\"  (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y) &&&\n    eval_fm e (WRP x y) = WR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e &&&\n    Sigma_fm (WRP x y)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y)\n 2. eval_fm e (WRP x y) = WR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\n 3. Sigma_fm (WRP x y)", "obtain s::name where \"atom s \\<sharp> (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        atom s \\<sharp> (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, y)\n\ngoal (3 subgoals):\n 1. a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y)\n 2. eval_fm e (WRP x y) = WR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\n 3. Sigma_fm (WRP x y)", "thus ?thesis1 ?thesis2 ?thsf"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, y)\n\ngoal (1 subgoal):\n 1. a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y) &&&\n    eval_fm e (WRP x y) = WR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e &&&\n    Sigma_fm (WRP x y)", "by (auto simp: WR_def)"], ["proof (state)\nthis:\n  a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y)\n  eval_fm e (WRP x y) = WR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>y\\<rbrakk>e\n  Sigma_fm (WRP x y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WRP_subst [simp]: \"(WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)", "obtain s::name where \"atom s \\<sharp> (x,y,t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        atom s \\<sharp> (x, y, t, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, y, t, i)\n\ngoal (1 subgoal):\n 1. (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, y, t, i)\n\ngoal (1 subgoal):\n 1. (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)", "by (auto simp: WRP.simps [of s])"], ["proof (state)\nthis:\n  (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WRP_cong: \"H \\<turnstile> t EQ t' \\<Longrightarrow> H \\<turnstile> u EQ u' \\<Longrightarrow> H \\<turnstile> WRP t u IFF WRP t' u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'\\<rbrakk>\n    \\<Longrightarrow> H \\<turnstile> WRP t u IFF WRP t' u'", "by (rule P2_cong) auto"], ["", "declare WRP.simps [simp del]"], ["", "lemma WR0_iff: \"WR 0 y \\<longleftrightarrow> y=0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WR 0 y = (y = 0)", "by (simp add: WR_def SeqWR_def) (metis LstSeq_1 LstSeq_app)"], ["", "lemma WR0: \"WR 0 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WR 0 0", "by (simp add: WR0_iff)"], ["", "lemma WR_succ_iff: assumes i: \"Ord i\" shows \"WR (succ i) z = (\\<exists>y. z = q_Eats y y \\<and> WR i y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WR (succ i) z = (\\<exists>y. z = q_Eats y y \\<and> WR i y)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. WR (succ i) z \\<Longrightarrow> \\<exists>y. z = q_Eats y y \\<and> WR i y\n 2. \\<exists>y. z = q_Eats y y \\<and> WR i y \\<Longrightarrow> WR (succ i) z", "assume \"WR (succ i) z\""], ["proof (state)\nthis:\n  WR (succ i) z\n\ngoal (2 subgoals):\n 1. WR (succ i) z \\<Longrightarrow> \\<exists>y. z = q_Eats y y \\<and> WR i y\n 2. \\<exists>y. z = q_Eats y y \\<and> WR i y \\<Longrightarrow> WR (succ i) z", "then"], ["proof (chain)\npicking this:\n  WR (succ i) z", "obtain s where s: \"SeqWR s (succ i) z\""], ["proof (prove)\nusing this:\n  WR (succ i) z\n\ngoal (1 subgoal):\n 1. (\\<And>s. SeqWR s (succ i) z \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: WR_def i)"], ["proof (state)\nthis:\n  SeqWR s (succ i) z\n\ngoal (2 subgoals):\n 1. WR (succ i) z \\<Longrightarrow> \\<exists>y. z = q_Eats y y \\<and> WR i y\n 2. \\<exists>y. z = q_Eats y y \\<and> WR i y \\<Longrightarrow> WR (succ i) z", "moreover"], ["proof (state)\nthis:\n  SeqWR s (succ i) z\n\ngoal (2 subgoals):\n 1. WR (succ i) z \\<Longrightarrow> \\<exists>y. z = q_Eats y y \\<and> WR i y\n 2. \\<exists>y. z = q_Eats y y \\<and> WR i y \\<Longrightarrow> WR (succ i) z", "then"], ["proof (chain)\npicking this:\n  SeqWR s (succ i) z", "have \"app s (succ i) = z\""], ["proof (prove)\nusing this:\n  SeqWR s (succ i) z\n\ngoal (1 subgoal):\n 1. app s (succ i) = z", "by (auto simp: SeqWR_def)"], ["proof (state)\nthis:\n  app s (succ i) = z\n\ngoal (2 subgoals):\n 1. WR (succ i) z \\<Longrightarrow> \\<exists>y. z = q_Eats y y \\<and> WR i y\n 2. \\<exists>y. z = q_Eats y y \\<and> WR i y \\<Longrightarrow> WR (succ i) z", "ultimately"], ["proof (chain)\npicking this:\n  SeqWR s (succ i) z\n  app s (succ i) = z", "show \"\\<exists>y. z = q_Eats y y \\<and> WR i y\""], ["proof (prove)\nusing this:\n  SeqWR s (succ i) z\n  app s (succ i) = z\n\ngoal (1 subgoal):\n 1. \\<exists>y. z = q_Eats y y \\<and> WR i y", "using i"], ["proof (prove)\nusing this:\n  SeqWR s (succ i) z\n  app s (succ i) = z\n  Ord i\n\ngoal (1 subgoal):\n 1. \\<exists>y. z = q_Eats y y \\<and> WR i y", "by (auto simp: WR_def SeqWR_def) (metis LstSeq_trunc hmem_succ_self)"], ["proof (state)\nthis:\n  \\<exists>y. z = q_Eats y y \\<and> WR i y\n\ngoal (1 subgoal):\n 1. \\<exists>y. z = q_Eats y y \\<and> WR i y \\<Longrightarrow> WR (succ i) z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y. z = q_Eats y y \\<and> WR i y \\<Longrightarrow> WR (succ i) z", "assume \"\\<exists>y. z = q_Eats y y \\<and> WR i y\""], ["proof (state)\nthis:\n  \\<exists>y. z = q_Eats y y \\<and> WR i y\n\ngoal (1 subgoal):\n 1. \\<exists>y. z = q_Eats y y \\<and> WR i y \\<Longrightarrow> WR (succ i) z", "then"], ["proof (chain)\npicking this:\n  \\<exists>y. z = q_Eats y y \\<and> WR i y", "obtain y where z: \"z = q_Eats y y\" and y: \"WR i y\""], ["proof (prove)\nusing this:\n  \\<exists>y. z = q_Eats y y \\<and> WR i y\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>z = q_Eats y y; WR i y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  z = q_Eats y y\n  WR i y\n\ngoal (1 subgoal):\n 1. \\<exists>y. z = q_Eats y y \\<and> WR i y \\<Longrightarrow> WR (succ i) z", "thus \"WR (succ i) z\""], ["proof (prove)\nusing this:\n  z = q_Eats y y\n  WR i y\n\ngoal (1 subgoal):\n 1. WR (succ i) z", "using i"], ["proof (prove)\nusing this:\n  z = q_Eats y y\n  WR i y\n  Ord i\n\ngoal (1 subgoal):\n 1. WR (succ i) z", "apply (auto simp: WR_def SeqWR_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>z = q_Eats y y; Ord i; LstSeq s i y; app s 0 = 0;\n        \\<forall>l\\<^bold>\\<in>i.\n           app s (succ l) = q_Eats (app s l) (app s l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            LstSeq s (succ i) (q_Eats y y) \\<and>\n                            app s 0 = 0 \\<and>\n                            app s (succ i) =\n                            q_Eats (app s i) (app s i) \\<and>\n                            (\\<forall>l\\<^bold>\\<in>i.\n                                app s (succ l) = q_Eats (app s l) (app s l))", "apply (rule_tac x=\"insf s (succ i) (q_Eats y y)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>z = q_Eats y y; Ord i; LstSeq s i y; app s 0 = 0;\n        \\<forall>l\\<^bold>\\<in>i.\n           app s (succ l) = q_Eats (app s l) (app s l)\\<rbrakk>\n       \\<Longrightarrow> LstSeq (insf s (succ i) (q_Eats y y)) (succ i)\n                          (q_Eats y y) \\<and>\n                         app (insf s (succ i) (q_Eats y y)) 0 = 0 \\<and>\n                         app (insf s (succ i) (q_Eats y y)) (succ i) =\n                         q_Eats (app (insf s (succ i) (q_Eats y y)) i)\n                          (app (insf s (succ i) (q_Eats y y)) i) \\<and>\n                         (\\<forall>l\\<^bold>\\<in>i.\n                             app (insf s (succ i) (q_Eats y y)) (succ l) =\n                             q_Eats (app (insf s (succ i) (q_Eats y y)) l)\n                              (app (insf s (succ i) (q_Eats y y)) l))", "apply (auto simp: LstSeq_imp_Seq_succ app_insf_Seq_if LstSeq_insf succ_notin_self)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  WR (succ i) z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WR_succ: \"Ord i \\<Longrightarrow> WR (succ i) (q_Eats y y) = WR i y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord i \\<Longrightarrow> WR (succ i) (q_Eats y y) = WR i y", "by (metis WR_succ_iff q_Eats_iff)"], ["", "lemma WR_ord_of: \"WR (ord_of i) \\<lbrakk>\\<guillemotleft>ORD_OF i\\<guillemotright>\\<rbrakk>e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WR (ord_of i)\n     \\<lbrakk>\\<guillemotleft>ORD_OF i\\<guillemotright>\\<rbrakk>e", "by (induct i) (auto simp: WR0_iff WR_succ_iff quot_Succ q_defs)"], ["", "text\\<open>Lemma 6.1\\<close>"], ["", "lemma WR_quot_Var: \"WR \\<lbrakk>\\<guillemotleft>Var x\\<guillemotright>\\<rbrakk>e \\<lbrakk>\\<guillemotleft>\\<guillemotleft>Var x\\<guillemotright>\\<guillemotright>\\<rbrakk>e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WR \\<lbrakk>\\<guillemotleft>Var x\\<guillemotright>\\<rbrakk>e\n     \\<lbrakk>\\<guillemotleft>\\<guillemotleft>Var\n         x\\<guillemotright>\\<guillemotright>\\<rbrakk>e", "by (auto simp: quot_Var quot_Succ)\n     (metis One_nat_def Ord_ord_of WR_ord_of WR_succ htuple.simps q_Eats_def)"], ["", "lemma ground_WRP [simp]: \"ground_fm (WRP x y) \\<longleftrightarrow> ground x \\<and> ground y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_fm (WRP x y) = (ground x \\<and> ground y)", "by (auto simp: ground_aux_def ground_fm_aux_def supp_conv_fresh)"], ["", "lemma prove_WRP:  \"{} \\<turnstile> WRP \\<guillemotleft>Var x\\<guillemotright> \\<guillemotleft>\\<guillemotleft>Var x\\<guillemotright>\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    WRP \\<guillemotleft>Var x\\<guillemotright>\n     \\<guillemotleft>\\<guillemotleft>Var x\\<guillemotright>\\<guillemotright>", "by (auto simp: WR_quot_Var ground_aux_def supp_conv_fresh intro: Sigma_fm_imp_thm)"], ["", "subsection\\<open>Proving that these relations are functions\\<close>"], ["", "lemma SeqWRP_Zero_E:\n  assumes \"insert (y EQ Zero) H \\<turnstile> A\"  \"H \\<turnstile> k EQ Zero\"\n  shows \"insert (SeqWRP s k y) H \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (SeqWRP s k y) H \\<turnstile> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insert (SeqWRP s k y) H \\<turnstile> A", "obtain l::name and sl::name\n    where \"atom l \\<sharp> (s,k,sl)\" \"atom sl \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, sl)\n  atom sl \\<sharp> s\n\ngoal (1 subgoal):\n 1. insert (SeqWRP s k y) H \\<turnstile> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl)\n  atom sl \\<sharp> s\n\ngoal (1 subgoal):\n 1. insert (SeqWRP s k y) H \\<turnstile> A", "apply (auto simp: SeqWRP.simps [where s=s and l=l and sl=sl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (HPair Zero Zero IN s)\n                       (insert\n                         (All2 l k\n                           (SyntaxN.Ex sl\n                             (HPair (Var l) (Var sl) IN s AND\n                              HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)))\n                         (insert (LstSeqP s k y) H)) \\<turnstile>\n                      A", "apply (rule cut_same [where A = \"LstSeqP s Zero y\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (HPair Zero Zero IN s)\n                       (insert\n                         (All2 l k\n                           (SyntaxN.Ex sl\n                             (HPair (Var l) (Var sl) IN s AND\n                              HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)))\n                         (insert (LstSeqP s k y) H)) \\<turnstile>\n                      LstSeqP s Zero y\n 2. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (LstSeqP s Zero y)\n                       (insert (HPair Zero Zero IN s)\n                         (insert\n                           (All2 l k\n                             (SyntaxN.Ex sl\n                               (HPair (Var l) (Var sl) IN s AND\n                                HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                s)))\n                           (insert (LstSeqP s k y) H))) \\<turnstile>\n                      A", "apply (blast intro: thin1 assms  LstSeqP_cong [OF Refl _ Refl, THEN Iff_MP_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (LstSeqP s Zero y)\n                       (insert (HPair Zero Zero IN s)\n                         (insert\n                           (All2 l k\n                             (SyntaxN.Ex sl\n                               (HPair (Var l) (Var sl) IN s AND\n                                HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                s)))\n                           (insert (LstSeqP s k y) H))) \\<turnstile>\n                      A", "apply (rule cut_same [where A = \"y EQ Zero\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (LstSeqP s Zero y)\n                       (insert (HPair Zero Zero IN s)\n                         (insert\n                           (All2 l k\n                             (SyntaxN.Ex sl\n                               (HPair (Var l) (Var sl) IN s AND\n                                HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                s)))\n                           (insert (LstSeqP s k y) H))) \\<turnstile>\n                      y EQ Zero\n 2. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (y EQ Zero)\n                       (insert (LstSeqP s Zero y)\n                         (insert (HPair Zero Zero IN s)\n                           (insert\n                             (All2 l k\n                               (SyntaxN.Ex sl\n                                 (HPair (Var l) (Var sl) IN s AND\n                                  HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                  s)))\n                             (insert (LstSeqP s k y) H)))) \\<turnstile>\n                      A", "apply (blast intro: LstSeqP_EQ)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (y EQ Zero)\n                       (insert (LstSeqP s Zero y)\n                         (insert (HPair Zero Zero IN s)\n                           (insert\n                             (All2 l k\n                               (SyntaxN.Ex sl\n                                 (HPair (Var l) (Var sl) IN s AND\n                                  HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                  s)))\n                             (insert (LstSeqP s k y) H)))) \\<turnstile>\n                      A", "apply (metis rotate2 assms(1) thin1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  insert (SeqWRP s k y) H \\<turnstile> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqWRP_SUCC_lemma:\n  assumes y': \"atom y' \\<sharp> (s,k,y)\"\n  shows \"{SeqWRP s (SUCC k) y} \\<turnstile> Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "obtain l::name and sl::name\n    where atoms: \"atom l \\<sharp> (s,k,y,y',sl)\" \"atom sl \\<sharp> (s,k,y,y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n         atom sl \\<sharp> (s, k, y, y')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, y, y', sl)\n  atom sl \\<sharp> (s, k, y, y')\n\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, y, y', sl)\n  atom sl \\<sharp> (s, k, y, y')\n\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "using y'"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, y, y', sl)\n  atom sl \\<sharp> (s, k, y, y')\n  atom y' \\<sharp> (s, k, y)\n\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "apply (auto simp: SeqWRP.simps [where s=s and l=l and sl=sl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair Zero Zero IN s,\n                       All2 l (SUCC k)\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      SyntaxN.Ex y'\n                       ((LstSeqP s k (Var y') AND\n                         HPair Zero Zero IN s AND\n                         All2 l k\n                          (SyntaxN.Ex sl\n                            (HPair (Var l) (Var sl) IN s AND\n                             HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                             s))) AND\n                        y EQ Q_Succ (Var y'))", "apply (rule All2_SUCC_E' [where t=k, THEN rotate2], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (Var sl) IN s,\n                       HPair (SUCC k) (Q_Succ (Var sl)) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       HPair Zero Zero IN s,\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      SyntaxN.Ex y'\n                       ((LstSeqP s k (Var y') AND\n                         HPair Zero Zero IN s AND\n                         All2 l k\n                          (SyntaxN.Ex sl\n                            (HPair (Var l) (Var sl) IN s AND\n                             HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                             s))) AND\n                        y EQ Q_Succ (Var y'))", "apply (rule Ex_I [where x = \"Var sl\"], auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (Var sl) IN s,\n                       HPair (SUCC k) (Q_Succ (Var sl)) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       HPair Zero Zero IN s,\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      LstSeqP s k (Var sl)\n 2. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (Var sl) IN s,\n                       HPair (SUCC k) (Q_Succ (Var sl)) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       HPair Zero Zero IN s,\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      y EQ Q_Succ (Var sl)", "apply (blast intro: LstSeqP_SUCC) \\<comment> \\<open>showing @{term\"SeqWRP s k (Var sl)\"}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (Var sl) IN s,\n                       HPair (SUCC k) (Q_Succ (Var sl)) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       HPair Zero Zero IN s,\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      y EQ Q_Succ (Var sl)", "apply (blast intro: ContraProve LstSeqP_EQ)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {SeqWRP s (SUCC k) y} \\<turnstile>\n  SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqWRP_SUCC_E:\n  assumes y': \"atom y' \\<sharp> (s,k,y)\" and k': \"H \\<turnstile> k' EQ (SUCC k)\"\n  shows \"insert (SeqWRP s k' y) H  \\<turnstile> Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (SeqWRP s k' y) H \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "using SeqWRP_cong [OF Refl k' Refl] cut1 [OF SeqWRP_SUCC_lemma [of y' s k y]]"], ["proof (prove)\nusing this:\n  H \\<turnstile> SeqWRP ?s k' ?y IFF SeqWRP ?s (SUCC k) ?y\n  \\<lbrakk>atom y' \\<sharp> (s, k, y);\n   ?H \\<turnstile> SeqWRP s (SUCC k) y\\<rbrakk>\n  \\<Longrightarrow> ?H \\<turnstile>\n                    SyntaxN.Ex y'\n                     (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\n\ngoal (1 subgoal):\n 1. insert (SeqWRP s k' y) H \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "by (metis Assume Iff_MP_left Iff_sym y')"], ["", "lemma SeqWRP_unique: \"{OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "obtain i::name and j::name and j'::name and k::name and sl::name and sl'::name and l::name and pi::name\n    where  i: \"atom i \\<sharp> (s,s',y,y')\" and j: \"atom j \\<sharp> (s,s',i,x,y,y')\" and j': \"atom j' \\<sharp> (s,s',i,j,x,y,y')\"\n      and atoms: \"atom k \\<sharp> (s,s',i,j,j')\" \"atom sl \\<sharp> (s,s',i,j,j',k)\" \"atom sl' \\<sharp> (s,s',i,j,j',k,sl)\"\n                 \"atom pi \\<sharp> (s,s',i,j,j',k,sl,sl')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j j' k sl sl' pi.\n        \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n         atom j \\<sharp> (s, s', i, x, y, y');\n         atom j' \\<sharp> (s, s', i, j, x, y, y');\n         atom k \\<sharp> (s, s', i, j, j');\n         atom sl \\<sharp> (s, s', i, j, j', k);\n         atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n         atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', i, j, j')\n  atom sl \\<sharp> (s, s', i, j, j', k)\n  atom sl' \\<sharp> (s, s', i, j, j', k, sl)\n  atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "have \"{OrdP (Var i)} \\<turnstile> All j (All j' (SeqWRP s (Var i) (Var j) IMP (SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var i)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SeqWRP s (Var i) (Var j) IMP\n        SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))", "apply (rule OrdIndH [where j=k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. atom\n     k \\<sharp> (i, SyntaxN.All j\n                     (SyntaxN.All j'\n                       (SeqWRP s (Var i) (Var j) IMP\n                        SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))\n 2. {} \\<turnstile>\n    SyntaxN.All i\n     (OrdP (Var i) IMP\n      All2 k (Var i)\n       ((SyntaxN.All j\n          (SyntaxN.All j'\n            (SeqWRP s (Var i) (Var j) IMP\n             SeqWRP s' (Var i) (Var j') IMP\n             Var j' EQ Var j)))(i::=Var k)) IMP\n      SyntaxN.All j\n       (SyntaxN.All j'\n         (SeqWRP s (Var i) (Var j) IMP\n          SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))", "using i j j' atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', i, j, j')\n  atom sl \\<sharp> (s, s', i, j, j', k)\n  atom sl' \\<sharp> (s, s', i, j, j', k, sl)\n  atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\n\ngoal (2 subgoals):\n 1. atom\n     k \\<sharp> (i, SyntaxN.All j\n                     (SyntaxN.All j'\n                       (SeqWRP s (Var i) (Var j) IMP\n                        SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))\n 2. {} \\<turnstile>\n    SyntaxN.All i\n     (OrdP (Var i) IMP\n      All2 k (Var i)\n       ((SyntaxN.All j\n          (SyntaxN.All j'\n            (SeqWRP s (Var i) (Var j) IMP\n             SeqWRP s' (Var i) (Var j') IMP\n             Var j' EQ Var j)))(i::=Var k)) IMP\n      SyntaxN.All j\n       (SyntaxN.All j'\n         (SeqWRP s (Var i) (Var j) IMP\n          SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j), OrdP (Var i)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule rotate4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i), Neg (Var j' EQ Var j),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule OrdP_cases_E [where k=pi], simp_all)\n    \\<comment> \\<open>Zero case\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule SeqWRP_Zero_E [THEN rotate3])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var i EQ Zero\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var i EQ Zero\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule SeqWRP_Zero_E [THEN rotate4])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ Zero, Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      Var i EQ Zero\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      Var i EQ Zero\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ Zero, Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ Zero, Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (blast intro: ContraProve [THEN rotate4] Sym Trans)\n    \\<comment> \\<open>SUCC case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule Ex_I [where x = \"Var pi\"], auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Neg (Var pi IN Var i), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (metis ContraProve EQ_imp_SUBS2 Mem_SUCC_I2 Refl Subset_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      ?A91\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {?A91,\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule SeqWRP_SUCC_E [of sl' s' \"Var pi\", THEN rotate4], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'),\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'),\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      ?A124\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {?A124, SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'),\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule SeqWRP_SUCC_E [of sl s \"Var pi\", THEN rotate7], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s (Var pi) (Var sl), Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'),\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x = \"Var sl\", THEN rotate5], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SeqWRP s (Var pi) (Var sl) IMP\n                         SeqWRP s' (Var pi) (Var j') IMP Var j' EQ Var sl),\n                       SeqWRP s (Var pi) (Var sl), Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x = \"Var sl'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s (Var pi) (Var sl) IMP\n                       SeqWRP s' (Var pi) (Var sl') IMP Var sl' EQ Var sl,\n                       SeqWRP s (Var pi) (Var sl), Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Imp_E, blast)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var sl' EQ Var sl, SeqWRP s (Var pi) (Var sl),\n                       Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [OF Q_Succ_cong [OF Assume]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Q_Succ (Var sl') EQ Q_Succ (Var sl),\n                       Var sl' EQ Var sl, SeqWRP s (Var pi) (Var sl),\n                       Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans [OF Hyp Sym] HPair_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {OrdP (Var i)} \\<turnstile>\n  SyntaxN.All j\n   (SyntaxN.All j'\n     (SeqWRP s (Var i) (Var j) IMP\n      SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var i)} \\<turnstile> (All j' (SeqWRP s (Var i) (Var j) IMP (SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))(j::=y)\""], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  SyntaxN.All j\n   (SyntaxN.All j'\n     (SeqWRP s (Var i) (Var j) IMP\n      SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))\n\ngoal (1 subgoal):\n 1. {OrdP (Var i)} \\<turnstile>\n    (SyntaxN.All j'\n      (SeqWRP s (Var i) (Var j) IMP\n       SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))(j::=y)", "by (metis All_D)"], ["proof (state)\nthis:\n  {OrdP (Var i)} \\<turnstile>\n  (SyntaxN.All j'\n    (SeqWRP s (Var i) (Var j) IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))(j::=y)\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var i)} \\<turnstile> (SeqWRP s (Var i) y IMP (SeqWRP s' (Var i) (Var j') IMP Var j' EQ y))(j'::=y')\""], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  (SyntaxN.All j'\n    (SeqWRP s (Var i) (Var j) IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))(j::=y)\n\ngoal (1 subgoal):\n 1. {OrdP (Var i)} \\<turnstile>\n    (SeqWRP s (Var i) y IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')", "using j j'"], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  (SyntaxN.All j'\n    (SeqWRP s (Var i) (Var j) IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))(j::=y)\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n\ngoal (1 subgoal):\n 1. {OrdP (Var i)} \\<turnstile>\n    (SeqWRP s (Var i) y IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')", "by simp (drule All_D [where x=y'], simp)"], ["proof (state)\nthis:\n  {OrdP (Var i)} \\<turnstile>\n  (SeqWRP s (Var i) y IMP\n   SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "hence \"{} \\<turnstile> OrdP (Var i) IMP (SeqWRP s (Var i) y IMP (SeqWRP s' (Var i) y' IMP y' EQ y))\""], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  (SeqWRP s (Var i) y IMP\n   SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    OrdP (Var i) IMP SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y", "using j j'"], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  (SeqWRP s (Var i) y IMP\n   SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    OrdP (Var i) IMP SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y", "by simp (metis Imp_I)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  OrdP (Var i) IMP SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "hence \"{} \\<turnstile> (OrdP (Var i) IMP (SeqWRP s (Var i) y IMP (SeqWRP s' (Var i) y' IMP y' EQ y)))(i::=x)\""], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  OrdP (Var i) IMP SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    (OrdP (Var i) IMP\n     SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y)(i::=x)", "by (metis Subst emptyE)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  (OrdP (Var i) IMP\n   SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y)(i::=x)\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (OrdP (Var i) IMP\n   SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y)(i::=x)\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "using i"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (OrdP (Var i) IMP\n   SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y)(i::=x)\n  atom i \\<sharp> (s, s', y, y')\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "by simp (metis anti_deduction insert_commute)"], ["proof (state)\nthis:\n  {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem WRP_unique: \"{OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y", "obtain s::name and s'::name\n    where \"atom s \\<sharp> (x,y,y')\"  \"atom s' \\<sharp> (x,y,y',s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s s'.\n        \\<lbrakk>atom s \\<sharp> (x, y, y');\n         atom s' \\<sharp> (x, y, y', s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, y, y')\n  atom s' \\<sharp> (x, y, y', s)\n\ngoal (1 subgoal):\n 1. {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, y, y')\n  atom s' \\<sharp> (x, y, y', s)\n\ngoal (1 subgoal):\n 1. {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y", "by (auto simp: SeqWRP_unique [THEN rotate3] WRP.simps [of s _ y]  WRP.simps [of s' _ y'])"], ["proof (state)\nthis:\n  {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>The equivalent function\\<close>"], ["", "definition W :: \"hf \\<Rightarrow> tm\"\n  where \"W \\<equiv> hmemrec (\\<lambda>f z. if z=0 then Zero else Q_Eats (f (pred z)) (f (pred z)))\""], ["", "lemma W0 [simp]: \"W 0 = Zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. W 0 = Zero", "by (rule trans [OF def_hmemrec [OF W_def]]) auto"], ["", "lemma W_succ [simp]: \"Ord i \\<Longrightarrow> W (succ i) = Q_Eats (W i) (W i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord i \\<Longrightarrow> W (succ i) = Q_Succ (W i)", "by (rule trans [OF def_hmemrec [OF W_def]]) (auto simp: ecut_apply SUCC_def W_def)"], ["", "lemma W_ord_of [simp]: \"W (ord_of i) = \\<guillemotleft>ORD_OF i\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. W (ord_of i) = \\<guillemotleft>ORD_OF i\\<guillemotright>", "by (induct i, auto simp: SUCC_def quot_simps)"], ["", "lemma WR_iff_eq_W: \"Ord x \\<Longrightarrow> WR x y \\<longleftrightarrow> y = \\<lbrakk>W x\\<rbrakk>e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord x \\<Longrightarrow> WR x y = (y = \\<lbrakk>W x\\<rbrakk>e)", "proof (induct x arbitrary: y rule: Ord_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y. WR 0 y = (y = \\<lbrakk>W 0\\<rbrakk>e)\n 2. \\<And>k y.\n       \\<lbrakk>Ord k;\n        \\<And>y. WR k y = (y = \\<lbrakk>W k\\<rbrakk>e)\\<rbrakk>\n       \\<Longrightarrow> WR (succ k) y = (y = \\<lbrakk>W (succ k)\\<rbrakk>e)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>y. WR 0 y = (y = \\<lbrakk>W 0\\<rbrakk>e)\n 2. \\<And>k y.\n       \\<lbrakk>Ord k;\n        \\<And>y. WR k y = (y = \\<lbrakk>W k\\<rbrakk>e)\\<rbrakk>\n       \\<Longrightarrow> WR (succ k) y = (y = \\<lbrakk>W (succ k)\\<rbrakk>e)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. WR 0 y = (y = \\<lbrakk>W 0\\<rbrakk>e)", "by (metis W0 WR0_iff eval_tm.simps(1))"], ["proof (state)\nthis:\n  WR 0 y = (y = \\<lbrakk>W 0\\<rbrakk>e)\n\ngoal (1 subgoal):\n 1. \\<And>k y.\n       \\<lbrakk>Ord k;\n        \\<And>y. WR k y = (y = \\<lbrakk>W k\\<rbrakk>e)\\<rbrakk>\n       \\<Longrightarrow> WR (succ k) y = (y = \\<lbrakk>W (succ k)\\<rbrakk>e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k y.\n       \\<lbrakk>Ord k;\n        \\<And>y. WR k y = (y = \\<lbrakk>W k\\<rbrakk>e)\\<rbrakk>\n       \\<Longrightarrow> WR (succ k) y = (y = \\<lbrakk>W (succ k)\\<rbrakk>e)", "case (succ k)"], ["proof (state)\nthis:\n  Ord k\n  WR k ?y = (?y = \\<lbrakk>W k\\<rbrakk>e)\n\ngoal (1 subgoal):\n 1. \\<And>k y.\n       \\<lbrakk>Ord k;\n        \\<And>y. WR k y = (y = \\<lbrakk>W k\\<rbrakk>e)\\<rbrakk>\n       \\<Longrightarrow> WR (succ k) y = (y = \\<lbrakk>W (succ k)\\<rbrakk>e)", "thus ?case"], ["proof (prove)\nusing this:\n  Ord k\n  WR k ?y = (?y = \\<lbrakk>W k\\<rbrakk>e)\n\ngoal (1 subgoal):\n 1. WR (succ k) y = (y = \\<lbrakk>W (succ k)\\<rbrakk>e)", "by (auto simp: WR_succ_iff q_Eats_def)"], ["proof (state)\nthis:\n  WR (succ k) y = (y = \\<lbrakk>W (succ k)\\<rbrakk>e)\n\ngoal:\nNo subgoals!", "qed"], ["", "section\\<open>The Function HF and Lemma 6.2\\<close>"], ["", "definition SeqHR :: \"hf \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> bool\"\nwhere \"SeqHR x x' s k \\<equiv>\n       BuildSeq2 (\\<lambda>y y'. Ord y \\<and> WR y y')\n                 (\\<lambda>u u' v v' w w'. u = \\<langle>v,w\\<rangle> \\<and> u' = q_HPair v' w') s k x x'\""], ["", "subsection \\<open>Defining the syntax: quantified body\\<close>"], ["", "nominal_function SeqHRP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom l \\<sharp> (s,k,sl,sl',m,n,sm,sm',sn,sn');\n          atom sl \\<sharp> (s,sl',m,n,sm,sm',sn,sn');\n          atom sl' \\<sharp> (s,m,n,sm,sm',sn,sn');\n          atom m \\<sharp> (s,n,sm,sm',sn,sn');\n          atom n \\<sharp> (s,sm,sm',sn,sn');\n          atom sm \\<sharp> (s,sm',sn,sn');\n          atom sm' \\<sharp> (s,sn,sn');\n          atom sn \\<sharp> (s,sn');\n          atom sn' \\<sharp> (s)\\<rbrakk> \\<Longrightarrow>\n    SeqHRP x x' s k =\n      LstSeqP s k (HPair x x') AND\n      All2 l (SUCC k) (Ex sl (Ex sl' (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                ((OrdP (Var sl) AND WRP (Var sl) (Var sl')) OR\n                 Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN Var l AND Var n IN Var l AND\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                       Var sl EQ HPair (Var sm) (Var sn) AND\n                       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SeqHRP_graph_aux\n 2. \\<And>x y. SeqHRP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>l s k sl sl' m n sm sm' sn sn' xa x'.\n           \\<lbrakk>atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn');\n            atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn');\n            atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn');\n            atom m \\<sharp> (s, n, sm, sm', sn, sn');\n            atom n \\<sharp> (s, sm, sm', sn, sn');\n            atom sm \\<sharp> (s, sm', sn, sn');\n            atom sm' \\<sharp> (s, sn, sn'); atom sn \\<sharp> (s, sn');\n            atom sn' \\<sharp> s; x = (xa, x', s, k)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>l s k sl sl' m n sm sm' sn sn' x x' la sa ka sla sl'a ma na sma\n       sm'a sna sn'a xa x'a.\n       \\<lbrakk>atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn');\n        atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn');\n        atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn');\n        atom m \\<sharp> (s, n, sm, sm', sn, sn');\n        atom n \\<sharp> (s, sm, sm', sn, sn');\n        atom sm \\<sharp> (s, sm', sn, sn'); atom sm' \\<sharp> (s, sn, sn');\n        atom sn \\<sharp> (s, sn'); atom sn' \\<sharp> s;\n        atom la \\<sharp> (sa, ka, sla, sl'a, ma, na, sma, sm'a, sna, sn'a);\n        atom sla \\<sharp> (sa, sl'a, ma, na, sma, sm'a, sna, sn'a);\n        atom sl'a \\<sharp> (sa, ma, na, sma, sm'a, sna, sn'a);\n        atom ma \\<sharp> (sa, na, sma, sm'a, sna, sn'a);\n        atom na \\<sharp> (sa, sma, sm'a, sna, sn'a);\n        atom sma \\<sharp> (sa, sm'a, sna, sn'a);\n        atom sm'a \\<sharp> (sa, sna, sn'a); atom sna \\<sharp> (sa, sn'a);\n        atom sn'a \\<sharp> sa; (x, x', s, k) = (xa, x'a, sa, ka)\\<rbrakk>\n       \\<Longrightarrow> LstSeqP s k (HPair x x') AND\n                         All2 l (SUCC k)\n                          (SyntaxN.Ex sl\n                            (SyntaxN.Ex sl'\n                              (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                               s AND\n                               (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                SyntaxN.Ex m\n                                 (SyntaxN.Ex n\n                                   (SyntaxN.Ex sm\n                                     (SyntaxN.Ex sm'\n (SyntaxN.Ex sn\n   (SyntaxN.Ex sn'\n     (Var m IN Var l AND\n      Var n IN Var l AND\n      HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n      HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n      Var sl EQ HPair (Var sm) (Var sn) AND\n      Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))) =\n                         LstSeqP sa ka (HPair xa x'a) AND\n                         All2 la (SUCC ka)\n                          (SyntaxN.Ex sla\n                            (SyntaxN.Ex sl'a\n                              (HPair (Var la)\n                                (HPair (Var sla) (Var sl'a)) IN\n                               sa AND\n                               (OrdP (Var sla) AND\n                                WRP (Var sla) (Var sl'a) OR\n                                SyntaxN.Ex ma\n                                 (SyntaxN.Ex na\n                                   (SyntaxN.Ex sma\n                                     (SyntaxN.Ex sm'a\n (SyntaxN.Ex sna\n   (SyntaxN.Ex sn'a\n     (Var ma IN Var la AND\n      Var na IN Var la AND\n      HPair (Var ma) (HPair (Var sma) (Var sm'a)) IN sa AND\n      HPair (Var na) (HPair (Var sna) (Var sn'a)) IN sa AND\n      Var sla EQ HPair (Var sma) (Var sna) AND\n      Var sl'a EQ Q_HPair (Var sm'a) (Var sn'a)))))))))))", "by (auto simp: eqvt_def SeqHRP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SeqHRP_dom", "by lexicographic_order"], ["", "lemma\n shows SeqHRP_fresh_iff [simp]:\n      \"a \\<sharp> SeqHRP x x' s k \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n   and eval_fm_SeqHRP [simp]:\n      \"eval_fm e (SeqHRP x x' s k) \\<longleftrightarrow> SeqHR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e \\<lbrakk>s\\<rbrakk>e \\<lbrakk>k\\<rbrakk>e\"  (is ?thesis2)\n  and SeqHRP_sf [iff]:  \"Sigma_fm (SeqHRP x x' s k)\"  (is ?thsf)\n  and SeqHRP_imp_OrdP: \"{ SeqHRP x y s k } \\<turnstile> OrdP k\"  (is ?thord)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqHRP x x' s k =\n     (a \\<sharp> x \\<and>\n      a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n     eval_fm e (SeqHRP x x' s k) =\n     SeqHR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e \\<lbrakk>s\\<rbrakk>e\n      \\<lbrakk>k\\<rbrakk>e) &&&\n    Sigma_fm (SeqHRP x x' s k) &&& {SeqHRP x y s k} \\<turnstile> OrdP k", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> SeqHRP x x' s k =\n    (a \\<sharp> x \\<and>\n     a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. eval_fm e (SeqHRP x x' s k) =\n    SeqHR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e \\<lbrakk>s\\<rbrakk>e\n     \\<lbrakk>k\\<rbrakk>e\n 3. Sigma_fm (SeqHRP x x' s k)\n 4. {SeqHRP x y s k} \\<turnstile> OrdP k", "obtain l::name and sl::name and sl'::name and m::name and n::name and\n         sm::name and sm'::name and sn::name and sn'::name\n    where atoms:\n         \"atom l \\<sharp> (s,k,sl,sl',m,n,sm,sm',sn,sn')\"\n         \"atom sl \\<sharp> (s,sl',m,n,sm,sm',sn,sn')\" \"atom sl' \\<sharp> (s,m,n,sm,sm',sn,sn')\"\n         \"atom m \\<sharp> (s,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (s,sm,sm',sn,sn')\"\n         \"atom sm \\<sharp> (s,sm',sn,sn')\" \"atom sm' \\<sharp> (s,sn,sn')\"\n         \"atom sn \\<sharp> (s,sn')\" \"atom sn' \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl' m n sm sm' sn sn'.\n        \\<lbrakk>atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn');\n         atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn');\n         atom m \\<sharp> (s, n, sm, sm', sn, sn');\n         atom n \\<sharp> (s, sm, sm', sn, sn');\n         atom sm \\<sharp> (s, sm', sn, sn'); atom sm' \\<sharp> (s, sn, sn');\n         atom sn \\<sharp> (s, sn'); atom sn' \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, sm', sn, sn')\n  atom sm' \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (4 subgoals):\n 1. a \\<sharp> SeqHRP x x' s k =\n    (a \\<sharp> x \\<and>\n     a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. eval_fm e (SeqHRP x x' s k) =\n    SeqHR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e \\<lbrakk>s\\<rbrakk>e\n     \\<lbrakk>k\\<rbrakk>e\n 3. Sigma_fm (SeqHRP x x' s k)\n 4. {SeqHRP x y s k} \\<turnstile> OrdP k", "thus ?thesis1 ?thsf ?thord"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, sm', sn, sn')\n  atom sm' \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (1 subgoal):\n 1. a \\<sharp> SeqHRP x x' s k =\n    (a \\<sharp> x \\<and>\n     a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n    Sigma_fm (SeqHRP x x' s k) &&& {SeqHRP x y s k} \\<turnstile> OrdP k", "by (auto intro: LstSeqP_OrdP)"], ["proof (state)\nthis:\n  a \\<sharp> SeqHRP x x' s k =\n  (a \\<sharp> x \\<and>\n   a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n  Sigma_fm (SeqHRP x x' s k)\n  {SeqHRP x y s k} \\<turnstile> OrdP k\n\ngoal (1 subgoal):\n 1. eval_fm e (SeqHRP x x' s k) =\n    SeqHR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e \\<lbrakk>s\\<rbrakk>e\n     \\<lbrakk>k\\<rbrakk>e", "show ?thesis2"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fm e (SeqHRP x x' s k) =\n    SeqHR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e \\<lbrakk>s\\<rbrakk>e\n     \\<lbrakk>k\\<rbrakk>e", "using atoms"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, sm', sn, sn')\n  atom sm' \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (1 subgoal):\n 1. eval_fm e (SeqHRP x x' s k) =\n    SeqHR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e \\<lbrakk>s\\<rbrakk>e\n     \\<lbrakk>k\\<rbrakk>e", "by (fastforce simp: LstSeq_imp_Ord SeqHR_def \n             BuildSeq2_def BuildSeq_def Builds_def\n             HBall_def q_HPair_def q_Eats_def\n             Seq_iff_app [of \"\\<lbrakk>s\\<rbrakk>e\", OF LstSeq_imp_Seq_succ]\n             Ord_trans [of _ _ \"succ \\<lbrakk>k\\<rbrakk>e\"]\n             cong: conj_cong)"], ["proof (state)\nthis:\n  eval_fm e (SeqHRP x x' s k) =\n  SeqHR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e \\<lbrakk>s\\<rbrakk>e\n   \\<lbrakk>k\\<rbrakk>e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqHRP_subst [simp]:\n      \"(SeqHRP x x' s k)(i::=t) = SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SeqHRP x x' s k)(i::=t) =\n    SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SeqHRP x x' s k)(i::=t) =\n    SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)", "obtain l::name and sl::name and sl'::name and m::name and n::name and\n         sm::name and sm'::name and sn::name and sn'::name\n    where \"atom l \\<sharp> (s,k,t,i,sl,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl \\<sharp> (s,t,i,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl' \\<sharp> (s,t,i,m,n,sm,sm',sn,sn')\"\n          \"atom m \\<sharp> (s,t,i,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (s,t,i,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (s,t,i,sm',sn,sn')\" \"atom sm' \\<sharp> (s,t,i,sn,sn')\"\n          \"atom sn \\<sharp> (s,t,i,sn')\" \"atom sn' \\<sharp> (s,t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl' m n sm sm' sn sn'.\n        \\<lbrakk>atom\n                  l \\<sharp> (s, k, t, i, sl, sl', m, n, sm, sm', sn, sn');\n         atom sl \\<sharp> (s, t, i, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (s, t, i, m, n, sm, sm', sn, sn');\n         atom m \\<sharp> (s, t, i, n, sm, sm', sn, sn');\n         atom n \\<sharp> (s, t, i, sm, sm', sn, sn');\n         atom sm \\<sharp> (s, t, i, sm', sn, sn');\n         atom sm' \\<sharp> (s, t, i, sn, sn');\n         atom sn \\<sharp> (s, t, i, sn');\n         atom sn' \\<sharp> (s, t, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, t, i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, t, i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, t, i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, t, i, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, t, i, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, t, i, sm', sn, sn')\n  atom sm' \\<sharp> (s, t, i, sn, sn')\n  atom sn \\<sharp> (s, t, i, sn')\n  atom sn' \\<sharp> (s, t, i)\n\ngoal (1 subgoal):\n 1. (SeqHRP x x' s k)(i::=t) =\n    SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, t, i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, t, i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, t, i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, t, i, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, t, i, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, t, i, sm', sn, sn')\n  atom sm' \\<sharp> (s, t, i, sn, sn')\n  atom sn \\<sharp> (s, t, i, sn')\n  atom sn' \\<sharp> (s, t, i)\n\ngoal (1 subgoal):\n 1. (SeqHRP x x' s k)(i::=t) =\n    SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)", "by (auto simp: SeqHRP.simps [of l _ _ sl sl' m n sm sm' sn sn'])"], ["proof (state)\nthis:\n  (SeqHRP x x' s k)(i::=t) =\n  SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqHRP_cong:\n  assumes \"H \\<turnstile> x EQ x'\" and \"H \\<turnstile> y EQ y'\" \"H \\<turnstile> s EQ s'\" and  \"H \\<turnstile> k EQ k'\"\n  shows \"H \\<turnstile> SeqHRP x y s k IFF SeqHRP x' y' s' k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<turnstile> SeqHRP x y s k IFF SeqHRP x' y' s' k'", "by (rule P4_cong [OF _ assms], auto)"], ["", "subsection \\<open>Defining the syntax: main predicate\\<close>"], ["", "definition HR :: \"hf \\<Rightarrow> hf \\<Rightarrow> bool\"\n  where \"HR x x' \\<equiv> \\<exists>s k. SeqHR x x' s k\""], ["", "nominal_function HRP :: \"tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom s \\<sharp> (x,x',k); atom k \\<sharp> (x,x')\\<rbrakk> \\<Longrightarrow>\n         HRP x x' = Ex s (Ex k (SeqHRP x x' (Var s) (Var k)))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt HRP_graph_aux\n 2. \\<And>x y. HRP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>s xa x' k.\n           \\<lbrakk>atom s \\<sharp> (xa, x', k); atom k \\<sharp> (xa, x');\n            x = (xa, x')\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>s x x' k sa xa x'a ka.\n       \\<lbrakk>atom s \\<sharp> (x, x', k); atom k \\<sharp> (x, x');\n        atom sa \\<sharp> (xa, x'a, ka); atom ka \\<sharp> (xa, x'a);\n        (x, x') = (xa, x'a)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex s\n                          (SyntaxN.Ex k (SeqHRP x x' (Var s) (Var k))) =\n                         SyntaxN.Ex sa\n                          (SyntaxN.Ex ka (SeqHRP xa x'a (Var sa) (Var ka)))", "by (auto simp: eqvt_def HRP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All HRP_dom", "by lexicographic_order"], ["", "lemma\n shows HRP_fresh_iff [simp]: \"a \\<sharp> HRP x x' \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> x'\"  (is ?thesis1)\n   and eval_fm_HRP [simp]:   \"eval_fm e (HRP x x') \\<longleftrightarrow> HR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e\"  (is ?thesis2)\n   and HRP_sf [iff]:         \"Sigma_fm (HRP x x')\"  (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x') &&&\n    eval_fm e (HRP x x') = HR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e &&&\n    Sigma_fm (HRP x x')", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x')\n 2. eval_fm e (HRP x x') = HR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e\n 3. Sigma_fm (HRP x x')", "obtain s::name and k::name  where \"atom s \\<sharp> (x,x',k)\"  \"atom k \\<sharp> (x,x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (x, x', k);\n         atom k \\<sharp> (x, x')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, x', k)\n  atom k \\<sharp> (x, x')\n\ngoal (3 subgoals):\n 1. a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x')\n 2. eval_fm e (HRP x x') = HR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e\n 3. Sigma_fm (HRP x x')", "thus ?thesis1 ?thesis2 ?thsf"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, x', k)\n  atom k \\<sharp> (x, x')\n\ngoal (1 subgoal):\n 1. a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x') &&&\n    eval_fm e (HRP x x') = HR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e &&&\n    Sigma_fm (HRP x x')", "by (auto simp: HR_def q_defs)"], ["proof (state)\nthis:\n  a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x')\n  eval_fm e (HRP x x') = HR \\<lbrakk>x\\<rbrakk>e \\<lbrakk>x'\\<rbrakk>e\n  Sigma_fm (HRP x x')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HRP_subst [simp]: \"(HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')", "obtain s::name and k::name where \"atom s \\<sharp> (x,x',t,i,k)\"  \"atom k \\<sharp> (x,x',t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (x, x', t, i, k);\n         atom k \\<sharp> (x, x', t, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, x', t, i, k)\n  atom k \\<sharp> (x, x', t, i)\n\ngoal (1 subgoal):\n 1. (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, x', t, i, k)\n  atom k \\<sharp> (x, x', t, i)\n\ngoal (1 subgoal):\n 1. (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')", "by (auto simp: HRP.simps [of s _ _ k])"], ["proof (state)\nthis:\n  (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Proving that these relations are functions\\<close>"], ["", "lemma SeqHRP_lemma:\n  assumes \"atom m \\<sharp> (x,x',s,k,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (x,x',s,k,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (x,x',s,k,sm',sn,sn')\" \"atom sm' \\<sharp> (x,x',s,k,sn,sn')\"\n          \"atom sn \\<sharp> (x,x',s,k,sn')\" \"atom sn' \\<sharp> (x,x',s,k)\"\n    shows \"{ SeqHRP x x' s k }\n         \\<turnstile> (OrdP x AND WRP x x') OR\n             Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN k AND Var n IN k AND\n                       SeqHRP (Var sm) (Var sm') s (Var m) AND\n                       SeqHRP (Var sn) (Var sn') s (Var n) AND\n                       x EQ HPair (Var sm) (Var sn) AND\n                       x' EQ Q_HPair (Var sm') (Var sn')))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "obtain l::name and sl::name and sl'::name\n    where atoms:\n          \"atom l \\<sharp> (x,x',s,k,sl,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl \\<sharp> (x,x',s,k,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl' \\<sharp> (x,x',s,k,m,n,sm,sm',sn,sn')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl'.\n        \\<lbrakk>atom\n                  l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n         atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\n\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\n\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "using atoms assms"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\n  atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn')\n  atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn')\n  atom sm \\<sharp> (x, x', s, k, sm', sn, sn')\n  atom sm' \\<sharp> (x, x', s, k, sn, sn')\n  atom sn \\<sharp> (x, x', s, k, sn')\n  atom sn' \\<sharp> (x, x', s, k)\n\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (simp add: SeqHRP.simps [of l s k sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {LstSeqP s k (HPair x x') AND\n                       All2 l (SUCC k)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Conj_E)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {LstSeqP s k (HPair x x'),\n                       All2 l (SUCC k)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule All2_SUCC_E' [where t=k, THEN rotate2], simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair k (HPair (Var sl) (Var sl')) IN s AND\n                           (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN k AND\n  Var n IN k AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ HPair (Var sm) (Var sn) AND\n  Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule rotate2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair k (HPair (Var sl) (Var sl')) IN s AND\n                           (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN k AND\n  Var n IN k AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ HPair (Var sm) (Var sn) AND\n  Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Ex_E Conj_E)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (HPair (Var sl) (Var sl')) IN s,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> OrdP x AND WRP x x' OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqHRP (Var sm) (Var sm') s (Var m) AND\n          SeqHRP (Var sn) (Var sn') s (Var n) AND\n          x EQ HPair (Var sm) (Var sn) AND\n          x' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> OrdP x AND WRP x x' OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sl \\<sharp> C", "apply (rule cut_same [where A = \"HPair x x' EQ HPair (Var sl) (Var sl')\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (HPair (Var sl) (Var sl')) IN s,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      HPair x x' EQ HPair (Var sl) (Var sl')\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair x x' EQ HPair (Var sl) (Var sl'),\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> OrdP x AND WRP x x' OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqHRP (Var sm) (Var sm') s (Var m) AND\n          SeqHRP (Var sn) (Var sn') s (Var n) AND\n          x EQ HPair (Var sm) (Var sn) AND\n          x' EQ Q_HPair (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> OrdP x AND WRP x x' OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\n 6. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sl \\<sharp> C", "apply (metis Assume LstSeqP_EQ rotate4, simp_all, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Disj_E [THEN rotate4])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var sl) AND WRP (Var sl) (Var sl'),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Disj_I1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var sl) AND WRP (Var sl) (Var sl'),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x'\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (metis Assume AssumeH(3) Sym thin1  Iff_MP_same [OF Conj_cong [OF OrdP_cong WRP_cong] Assume])\n    \\<comment> \\<open>auto could be used but is VERY SLOW\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Disj_I2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Ex_E Conj_EH)+"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqHRP (Var sm) (Var sm') s (Var m) AND\n          SeqHRP (Var sn) (Var sn') s (Var n) AND\n          x EQ HPair (Var sm) (Var sn) AND\n          x' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, x' EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, x' EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqHRP (Var sm) (Var sm') s (Var m) AND\n          SeqHRP (Var sn) (Var sn') s (Var n) AND\n          x EQ HPair (Var sm) (Var sn) AND\n          x' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, x' EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, x' EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom\n               l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n      atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n      atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n      atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n      atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n      atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n      atom sm' \\<sharp> (x, x', s, k, sn, sn');\n      atom sn \\<sharp> (x, x', s, k, sn');\n      atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 13 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Ex_I [where x = \"Var m\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex n\n                       (SyntaxN.Ex sm\n                         (SyntaxN.Ex sm'\n                           (SyntaxN.Ex sn\n                             (SyntaxN.Ex sn'\n                               (Var m IN k AND\n                                Var n IN k AND\n                                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                x EQ HPair (Var sm) (Var sn) AND\n                                x' EQ Q_HPair (Var sm') (Var sn'))))))", "apply (rule Ex_I [where x = \"Var n\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex sm\n                       (SyntaxN.Ex sm'\n                         (SyntaxN.Ex sn\n                           (SyntaxN.Ex sn'\n                             (Var m IN k AND\n                              Var n IN k AND\n                              SeqHRP (Var sm) (Var sm') s (Var m) AND\n                              SeqHRP (Var sn) (Var sn') s (Var n) AND\n                              x EQ HPair (Var sm) (Var sn) AND\n                              x' EQ Q_HPair (Var sm') (Var sn')))))", "apply (rule Ex_I [where x = \"Var sm\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex sm'\n                       (SyntaxN.Ex sn\n                         (SyntaxN.Ex sn'\n                           (Var m IN k AND\n                            Var n IN k AND\n                            SeqHRP (Var sm) (Var sm') s (Var m) AND\n                            SeqHRP (Var sn) (Var sn') s (Var n) AND\n                            x EQ HPair (Var sm) (Var sn) AND\n                            x' EQ Q_HPair (Var sm') (Var sn'))))", "apply (rule Ex_I [where x = \"Var sm'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex sn\n                       (SyntaxN.Ex sn'\n                         (Var m IN k AND\n                          Var n IN k AND\n                          SeqHRP (Var sm) (Var sm') s (Var m) AND\n                          SeqHRP (Var sn) (Var sn') s (Var n) AND\n                          x EQ HPair (Var sm) (Var sn) AND\n                          x' EQ Q_HPair (Var sm') (Var sn')))", "apply (rule Ex_I [where x = \"Var sn\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex sn'\n                       (Var m IN k AND\n                        Var n IN k AND\n                        SeqHRP (Var sm) (Var sm') s (Var m) AND\n                        SeqHRP (Var sn) (Var sn') s (Var n) AND\n                        x EQ HPair (Var sm) (Var sn) AND\n                        x' EQ Q_HPair (Var sm') (Var sn'))", "apply (rule Ex_I [where x = \"Var sn'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      Var m IN k AND\n                      Var n IN k AND\n                      SeqHRP (Var sm) (Var sm') s (Var m) AND\n                      SeqHRP (Var sn) (Var sn') s (Var n) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (simp add: SeqHRP.simps [of l _ _ sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      Var m IN k AND\n                      Var n IN k AND\n                      (LstSeqP s (Var m) (HPair (Var sm) (Var sm')) AND\n                       All2 l (SUCC (Var m))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule Conj_I, blast)+\n    \\<comment> \\<open>first SeqHRP subgoal\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var m) (HPair (Var sm) (Var sm')) AND\n                       All2 l (SUCC (Var m))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule Conj_I)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      LstSeqP s (Var m) (HPair (Var sm) (Var sm'))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      All2 l (SUCC (Var m))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (blast intro: LstSeqP_Mem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      All2 l (SUCC (Var m))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule All2_Subset [OF Hyp], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SUCC (Var m) SUBS k\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                           (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ HPair (Var sm) (Var sn) AND\n  Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> (SUCC (Var m), k)\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (blast intro!: SUCC_Subset_Ord LstSeqP_OrdP, blast, simp)\n    \\<comment> \\<open>next SeqHRP subgoal\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule Conj_I)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      LstSeqP s (Var n) (HPair (Var sn) (Var sn'))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      All2 l (SUCC (Var n))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (blast intro: LstSeqP_Mem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      All2 l (SUCC (Var n))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule All2_Subset [OF Hyp], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SUCC (Var n) SUBS k\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                           (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ HPair (Var sm) (Var sn) AND\n  Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> (SUCC (Var n), k)\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (auto intro!: SUCC_Subset_Ord LstSeqP_OrdP)\n    \\<comment> \\<open>finally, the equality pair\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x EQ HPair (Var sm) (Var sn)\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (blast intro: Trans)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {SeqHRP x x' s k} \\<turnstile>\n  OrdP x AND WRP x x' OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN k AND\n              Var n IN k AND\n              SeqHRP (Var sm) (Var sm') s (Var m) AND\n              SeqHRP (Var sn) (Var sn') s (Var n) AND\n              x EQ HPair (Var sm) (Var sn) AND\n              x' EQ Q_HPair (Var sm') (Var sn')))))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqHRP_unique: \"{SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "obtain i::name and j::name and j'::name and k::name and k'::name and l::name\n     and m::name and n::name and sm::name and sn::name and sm'::name and sn'::name\n     and m2::name and n2::name and sm2::name and sn2::name and sm2'::name and sn2'::name\n    where atoms:  \"atom i \\<sharp> (s,s',y,y')\"   \"atom j \\<sharp> (s,s',i,x,y,y')\"  \"atom j' \\<sharp> (s,s',i,j,x,y,y')\"\n                  \"atom k \\<sharp> (s,s',x,y,y',u',i,j,j')\" \"atom k' \\<sharp> (s,s',x,y,y',k,i,j,j')\" \"atom l \\<sharp> (s,s',i,j,j',k,k')\"\n                  \"atom m \\<sharp> (s,s',i,j,j',k,k',l)\"   \"atom n \\<sharp> (s,s',i,j,j',k,k',l,m)\"\n                  \"atom sm \\<sharp> (s,s',i,j,j',k,k',l,m,n)\"  \"atom sn \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm)\"\n                  \"atom sm' \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn)\"   \"atom sn' \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm')\"\n                  \"atom m2 \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn')\"   \"atom n2 \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2)\"\n                  \"atom sm2 \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2)\"  \"atom sn2 \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2)\"\n                  \"atom sm2' \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2,sn2)\"   \"atom sn2' \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2,sn2,sm2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j j' k k' l m n sm sn sm' sn' m2 n2 sm2 sn2 sm2' sn2'.\n        \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n         atom j \\<sharp> (s, s', i, x, y, y');\n         atom j' \\<sharp> (s, s', i, j, x, y, y');\n         atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n         atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n         atom l \\<sharp> (s, s', i, j, j', k, k');\n         atom m \\<sharp> (s, s', i, j, j', k, k', l);\n         atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n         atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n         atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n         atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n         atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n         atom\n          m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n         atom\n          n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                       m2);\n         atom\n          sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                        m2, n2);\n         atom\n          sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                        m2, n2, sm2);\n         atom\n          sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                         m2, n2, sm2, sn2);\n         atom\n          sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                         m2, n2, sm2, sn2, sm2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "have \"{OrdP (Var k)}\n       \\<turnstile> All i (All j (All j' (All k' (SeqHRP (Var i) (Var j) s (Var k) IMP (SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All i\n     (SyntaxN.All j\n       (SyntaxN.All j'\n         (SyntaxN.All k'\n           (SeqHRP (Var i) (Var j) s (Var k) IMP\n            SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))", "apply (rule OrdIndH [where j=l])"], ["proof (prove)\ngoal (2 subgoals):\n 1. atom\n     l \\<sharp> (k, SyntaxN.All i\n                     (SyntaxN.All j\n                       (SyntaxN.All j'\n                         (SyntaxN.All k'\n                           (SeqHRP (Var i) (Var j) s (Var k) IMP\n                            SeqHRP (Var i) (Var j') s' (Var k') IMP\n                            Var j' EQ Var j)))))\n 2. {} \\<turnstile>\n    SyntaxN.All k\n     (OrdP (Var k) IMP\n      All2 l (Var k)\n       ((SyntaxN.All i\n          (SyntaxN.All j\n            (SyntaxN.All j'\n              (SyntaxN.All k'\n                (SeqHRP (Var i) (Var j) s (Var k) IMP\n                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                 Var j' EQ Var j)))))(k::=Var l)) IMP\n      SyntaxN.All i\n       (SyntaxN.All j\n         (SyntaxN.All j'\n           (SyntaxN.All k'\n             (SeqHRP (Var i) (Var j) s (Var k) IMP\n              SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (2 subgoals):\n 1. atom\n     l \\<sharp> (k, SyntaxN.All i\n                     (SyntaxN.All j\n                       (SyntaxN.All j'\n                         (SyntaxN.All k'\n                           (SeqHRP (Var i) (Var j) s (Var k) IMP\n                            SeqHRP (Var i) (Var j') s' (Var k') IMP\n                            Var j' EQ Var j)))))\n 2. {} \\<turnstile>\n    SyntaxN.All k\n     (OrdP (Var k) IMP\n      All2 l (Var k)\n       ((SyntaxN.All i\n          (SyntaxN.All j\n            (SyntaxN.All j'\n              (SyntaxN.All k'\n                (SeqHRP (Var i) (Var j) s (Var k) IMP\n                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                 Var j' EQ Var j)))))(k::=Var l)) IMP\n      SyntaxN.All i\n       (SyntaxN.All j\n         (SyntaxN.All j'\n           (SyntaxN.All k'\n             (SeqHRP (Var i) (Var j) s (Var k) IMP\n              SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Neg (Var j' EQ Var j),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      SyntaxN.Ex l\n                       (Neg (Var l IN Var k IMP\n                             SyntaxN.All i\n                              (SyntaxN.All j\n                                (SyntaxN.All j'\n                                  (SyntaxN.All k'\n                                    (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                     SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                     Var j' EQ Var j))))))", "apply (rule Swap)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      ?A88\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {?A88,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut1 [OF SeqHRP_lemma [of m \"Var i\" \"Var j\" s \"Var k\" n sm sm' sn sn']], simp_all, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      ?A102\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {?A102,\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut1 [OF SeqHRP_lemma [of m2 \"Var i\" \"Var j'\" s' \"Var k'\" n2 sm2 sm2' sn2 sn2']], simp_all, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i) AND WRP (Var i) (Var j') OR\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH Conj_EH)+\n    \\<comment> \\<open>case 1, both are ordinals\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i), WRP (Var i) (Var j'), OrdP (Var i),\n                       WRP (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: cut3 [OF WRP_unique])\n    \\<comment> \\<open>case 2, @{term \"OrdP (Var i)\"} but also a pair\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Ex_EH)+"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k, OrdP (Var i), WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i), WRP (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i), WRP (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i), WRP (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i), WRP (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n \\<sharp> Var j' EQ Var j\nA total of 14 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k, OrdP (Var i), WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"OrdP (HPair (Var sm) (Var sn))\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k, OrdP (Var i), WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      OrdP (HPair (Var sm) (Var sn))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (HPair (Var sm) (Var sn)),\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k, OrdP (Var i), WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: OrdP_cong [OF Hyp, THEN Iff_MP_same], blast)\n    \\<comment> \\<open>towards second two cases\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Ex_E Disj_EH Conj_EH)+\n    \\<comment> \\<open>case 3, @{term \"OrdP (Var i)\"} but also a pair\\<close>"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', OrdP (Var i),\n                       WRP (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       Var m2 IN Var k' AND\n                       Var n2 IN Var k' AND\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\n                       Var i EQ HPair (Var sm2) (Var sn2) AND\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\n WRP (Var i) (Var j) OR\n SyntaxN.Ex m\n  (SyntaxN.Ex n\n    (SyntaxN.Ex sm\n      (SyntaxN.Ex sm'\n        (SyntaxN.Ex sn\n          (SyntaxN.Ex sn'\n            (Var m IN Var k AND\n             Var n IN Var k AND\n             SeqHRP (Var sm) (Var sm') s (Var m) AND\n             SeqHRP (Var sn) (Var sn') s (Var n) AND\n             Var i EQ HPair (Var sm) (Var sn) AND\n             Var j EQ Q_HPair (Var sm') (Var sn'))))))),\n All2 l (Var k)\n  (SyntaxN.All i\n    (SyntaxN.All j\n      (SyntaxN.All j'\n        (SyntaxN.All k'\n          (SeqHRP (Var i) (Var j) s (Var l) IMP\n           SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\n SeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\n OrdP (Var k)}.\n                          atom sm2 \\<sharp> C\nA total of 14 subgoals...", "apply (rule cut_same [where A = \"OrdP (HPair (Var sm2) (Var sn2))\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', OrdP (Var i),\n                       WRP (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      OrdP (HPair (Var sm2) (Var sn2))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (HPair (Var sm2) (Var sn2)),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', OrdP (Var i),\n                       WRP (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       Var m2 IN Var k' AND\n                       Var n2 IN Var k' AND\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\n                       Var i EQ HPair (Var sm2) (Var sn2) AND\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\nA total of 15 subgoals...", "apply (blast intro: OrdP_cong [OF Hyp, THEN Iff_MP_same], blast)\n    \\<comment> \\<open>case 4, two pairs\\<close>"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       Var m2 IN Var k' AND\n                       Var n2 IN Var k' AND\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\n                       Var i EQ HPair (Var sm2) (Var sn2) AND\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm2 \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n2 \\<sharp> Var j' EQ Var j\nA total of 13 subgoals...", "apply (rule Ex_E Disj_EH Conj_EH)+"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n \\<sharp> Var j' EQ Var j\nA total of 25 subgoals...", "apply (rule All_E' [OF Hyp, where x=\"Var m\"], blast)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(Var l IN Var k IMP\n                        SyntaxN.All i\n                         (SyntaxN.All j\n                           (SyntaxN.All j'\n                             (SyntaxN.All k'\n                               (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                Var j' EQ Var j)))))(l::=Var m),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n \\<sharp> Var j' EQ Var j\nA total of 25 subgoals...", "apply (rule All_E' [OF Hyp, where x=\"Var n\"], blast, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var n IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var m IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var m) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH, blast intro: thin1 ContraProve)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var m) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqHRP (Var sm) (Var j) s (Var m) IMP\n                             SeqHRP (Var sm) (Var j') s' (Var k') IMP\n                             Var j' EQ Var j))),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                           SeqHRP (Var sm) (Var j') s' (Var k') IMP\n                           Var j' EQ Var sm')),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm2'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                         SeqHRP (Var sm) (Var sm2') s' (Var k') IMP\n                         Var sm2' EQ Var sm'),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var m2\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn\", THEN rotate2], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqHRP (Var sn) (Var j) s (Var n) IMP\n                             SeqHRP (Var sn) (Var j') s' (Var k') IMP\n                             Var j' EQ Var j))),\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                           SeqHRP (Var sn) (Var j') s' (Var k') IMP\n                           Var j' EQ Var sn')),\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn2'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                         SeqHRP (Var sn) (Var sn2') s' (Var k') IMP\n                         Var sn2' EQ Var sn'),\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var n2\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2)\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Sym Trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"SeqHRP (Var sn) (Var sn2') s' (Var n2)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      SeqHRP (Var sn) (Var sn2') s' (Var n2)\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: SeqHRP_cong [OF Hyp Refl Refl, THEN Iff_MP2_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"SeqHRP (Var sm) (Var sm2') s' (Var m2)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      SeqHRP (Var sm) (Var sm2') s' (Var m2)\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sm) (Var sm2') s' (Var m2),\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: SeqHRP_cong [OF Hyp Refl Refl, THEN Iff_MP2_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sm) (Var sm2') s' (Var m2),\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH, blast intro: thin1 ContraProve)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm2' EQ Var sm', Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2),\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans [OF Hyp Sym] intro!: HPair_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var k) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var k)}\n         \\<turnstile> All j (All j' (All k' (SeqHRP x (Var j) s (Var k)\n               IMP (SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j))))\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var k) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))", "apply (rule All_D [where x = x, THEN cut_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(SyntaxN.All j\n       (SyntaxN.All j'\n         (SyntaxN.All k'\n           (SeqHRP (Var i) (Var j) s (Var k) IMP\n            SeqHRP (Var i) (Var j') s' (Var k') IMP\n            Var j' EQ Var j))))(i::=x),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {(SyntaxN.All j\n       (SyntaxN.All j'\n         (SyntaxN.All k'\n           (SeqHRP (Var i) (Var j) s (Var k) IMP\n            SeqHRP (Var i) (Var j') s' (Var k') IMP\n            Var j' EQ Var j))))(i::=x),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))", "by auto"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All j\n   (SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x (Var j) s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var k)}\n         \\<turnstile> All j' (All k' (SeqHRP x y s (Var k) IMP (SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y)))\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All j\n   (SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x (Var j) s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))", "apply (rule All_D [where x = y, THEN cut_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))(j::=y),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {(SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))(j::=y),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))", "by auto"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All j'\n   (SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP\n      SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var k)}\n          \\<turnstile> All k' (SeqHRP x y s (Var k) IMP (SeqHRP x y' s' (Var k') IMP y' EQ y))\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All j'\n   (SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP\n      SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)", "apply (rule All_D [where x = y', THEN cut_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))(j'::=y'),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {(SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))(j'::=y'),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)", "by auto"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All k'\n   (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var k)} \\<turnstile> SeqHRP x y s (Var k) IMP (SeqHRP x y' s' u' IMP y' EQ y)\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All k'\n   (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y", "apply (rule All_D [where x = u', THEN cut_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(SeqHRP x y s (Var k) IMP\n      SeqHRP x y' s' (Var k') IMP y' EQ y)(k'::=u'),\n     OrdP (Var k)} \\<turnstile>\n    SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {(SeqHRP x y s (Var k) IMP\n      SeqHRP x y' s' (Var k') IMP y' EQ y)(k'::=u'),\n     OrdP (Var k)} \\<turnstile>\n    SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y", "by auto"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{SeqHRP x y s (Var k)} \\<turnstile> SeqHRP x y s (Var k) IMP (SeqHRP x y' s' u' IMP y' EQ y)\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s (Var k)} \\<turnstile>\n    SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y", "by (metis SeqHRP_imp_OrdP cut1)"], ["proof (state)\nthis:\n  {SeqHRP x y s (Var k)} \\<turnstile>\n  SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{} \\<turnstile> ((SeqHRP x y s (Var k) IMP (SeqHRP x y' s' u' IMP y' EQ y)))(k::=u)\""], ["proof (prove)\nusing this:\n  {SeqHRP x y s (Var k)} \\<turnstile>\n  SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    (SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y)(k::=u)", "by (metis Subst emptyE Assume MP_same Imp_I)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  (SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y)(k::=u)\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{} \\<turnstile> SeqHRP x y s u IMP (SeqHRP x y' s' u' IMP y' EQ y)\""], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y)(k::=u)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> SeqHRP x y s u IMP SeqHRP x y' s' u' IMP y' EQ y", "using atoms"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y)(k::=u)\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> SeqHRP x y s u IMP SeqHRP x y' s' u' IMP y' EQ y", "by simp"], ["proof (state)\nthis:\n  {} \\<turnstile> SeqHRP x y s u IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile> SeqHRP x y s u IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "by (metis anti_deduction insert_commute)"], ["proof (state)\nthis:\n  {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HRP_unique: \"{HRP x y, HRP x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {HRP x y, HRP x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {HRP x y, HRP x y'} \\<turnstile> y' EQ y", "obtain s::name and s'::name and k::name and k'::name\n    where \"atom s \\<sharp> (x,y,y')\" \"atom s' \\<sharp> (x,y,y',s)\" \n          \"atom k \\<sharp> (x,y,y',s,s')\" \"atom k' \\<sharp> (x,y,y',s,s',k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s s' k k'.\n        \\<lbrakk>atom s \\<sharp> (x, y, y'); atom s' \\<sharp> (x, y, y', s);\n         atom k \\<sharp> (x, y, y', s, s');\n         atom k' \\<sharp> (x, y, y', s, s', k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, y, y')\n  atom s' \\<sharp> (x, y, y', s)\n  atom k \\<sharp> (x, y, y', s, s')\n  atom k' \\<sharp> (x, y, y', s, s', k)\n\ngoal (1 subgoal):\n 1. {HRP x y, HRP x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, y, y')\n  atom s' \\<sharp> (x, y, y', s)\n  atom k \\<sharp> (x, y, y', s, s')\n  atom k' \\<sharp> (x, y, y', s, s', k)\n\ngoal (1 subgoal):\n 1. {HRP x y, HRP x y'} \\<turnstile> y' EQ y", "by (auto simp: SeqHRP_unique HRP.simps [of s x y k]  HRP.simps [of s' x y' k'])"], ["proof (state)\nthis:\n  {HRP x y, HRP x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Finally The Function HF Itself\\<close>"], ["", "definition HF :: \"hf \\<Rightarrow> tm\"\n  where \"HF \\<equiv> hmemrec (\\<lambda>f z. if Ord z then W z else Q_HPair (f (hfst z)) (f (hsnd z)))\""], ["", "lemma HF_Ord [simp]: \"Ord i \\<Longrightarrow> HF i = W i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord i \\<Longrightarrow> Goedel_I.HF i = W i", "by (rule trans [OF def_hmemrec [OF HF_def]]) auto"], ["", "lemma HF_pair [simp]: \"HF (hpair x y) = Q_HPair (HF x) (HF y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Goedel_I.HF \\<langle>x, y\\<rangle> =\n    Q_HPair (Goedel_I.HF x) (Goedel_I.HF y)", "by (rule trans [OF def_hmemrec [OF HF_def]]) (auto simp: ecut_apply HF_def)"], ["", "lemma SeqHR_hpair: \"SeqHR x1 x3 s1 k1 \\<Longrightarrow> SeqHR x2 x4 s2 k2 \\<Longrightarrow> \\<exists>s k. SeqHR \\<langle>x1,x2\\<rangle> (q_HPair x3 x4) s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SeqHR x1 x3 s1 k1; SeqHR x2 x4 s2 k2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s k.\n                         SeqHR \\<langle>x1, x2\\<rangle> (q_HPair x3 x4) s k", "by (auto simp: SeqHR_def intro: BuildSeq2_combine)"], ["", "lemma HR_H:  \"coding_hf x \\<Longrightarrow> HR x \\<lbrakk>HF x\\<rbrakk>e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coding_hf x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "proof (induct x rule: hmem_rel_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> hmem_rel; coding_hf y\\<rbrakk>\n                   \\<Longrightarrow> HR y \\<lbrakk>Goedel_I.HF y\\<rbrakk>e;\n        coding_hf x\\<rbrakk>\n       \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "case (step x)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, x) \\<in> hmem_rel; coding_hf ?y\\<rbrakk>\n  \\<Longrightarrow> HR ?y \\<lbrakk>Goedel_I.HF ?y\\<rbrakk>e\n  coding_hf x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> hmem_rel; coding_hf y\\<rbrakk>\n                   \\<Longrightarrow> HR y \\<lbrakk>Goedel_I.HF y\\<rbrakk>e;\n        coding_hf x\\<rbrakk>\n       \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "proof (cases \"Ord x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e\n 2. \\<not> Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "case True"], ["proof (state)\nthis:\n  Ord x\n\ngoal (2 subgoals):\n 1. Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e\n 2. \\<not> Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "thus ?thesis"], ["proof (prove)\nusing this:\n  Ord x\n\ngoal (1 subgoal):\n 1. HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "by (auto simp: HR_def SeqHR_def Ord_not_hpair WR_iff_eq_W [where e=e] intro!: BuildSeq2_exI)"], ["proof (state)\nthis:\n  HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e\n\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "case False"], ["proof (state)\nthis:\n  \\<not> Ord x\n\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "then"], ["proof (chain)\npicking this:\n  \\<not> Ord x", "obtain x1 x2 where x: \"x = \\<langle>x1,x2\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<not> Ord x\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        x = \\<langle>x1, x2\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Ord_ord_of coding_hf.simps step.prems)"], ["proof (state)\nthis:\n  x = \\<langle>x1, x2\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "then"], ["proof (chain)\npicking this:\n  x = \\<langle>x1, x2\\<rangle>", "have x12: \"(x1, x) \\<in> hmem_rel\" \"(x2, x) \\<in> hmem_rel\""], ["proof (prove)\nusing this:\n  x = \\<langle>x1, x2\\<rangle>\n\ngoal (1 subgoal):\n 1. (x1, x) \\<in> hmem_rel &&& (x2, x) \\<in> hmem_rel", "by (auto simp: hmem_rel_iff_hmem_eclose)"], ["proof (state)\nthis:\n  (x1, x) \\<in> hmem_rel\n  (x2, x) \\<in> hmem_rel\n\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "have co12: \"coding_hf x1\"  \"coding_hf x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coding_hf x1 &&& coding_hf x2", "using False step x"], ["proof (prove)\nusing this:\n  \\<not> Ord x\n  \\<lbrakk>(?y, x) \\<in> hmem_rel; coding_hf ?y\\<rbrakk>\n  \\<Longrightarrow> HR ?y \\<lbrakk>Goedel_I.HF ?y\\<rbrakk>e\n  coding_hf x\n  x = \\<langle>x1, x2\\<rangle>\n\ngoal (1 subgoal):\n 1. coding_hf x1 &&& coding_hf x2", "by (metis Ord_ord_of coding_hf_hpair)+"], ["proof (state)\nthis:\n  coding_hf x1\n  coding_hf x2\n\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "hence \"HR x1 \\<lbrakk>HF x1\\<rbrakk>e\"  \"HR x2 \\<lbrakk>HF x2\\<rbrakk>e\""], ["proof (prove)\nusing this:\n  coding_hf x1\n  coding_hf x2\n\ngoal (1 subgoal):\n 1. HR x1 \\<lbrakk>Goedel_I.HF x1\\<rbrakk>e &&&\n    HR x2 \\<lbrakk>Goedel_I.HF x2\\<rbrakk>e", "by (auto simp: x12 step)"], ["proof (state)\nthis:\n  HR x1 \\<lbrakk>Goedel_I.HF x1\\<rbrakk>e\n  HR x2 \\<lbrakk>Goedel_I.HF x2\\<rbrakk>e\n\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "thus ?thesis"], ["proof (prove)\nusing this:\n  HR x1 \\<lbrakk>Goedel_I.HF x1\\<rbrakk>e\n  HR x2 \\<lbrakk>Goedel_I.HF x2\\<rbrakk>e\n\ngoal (1 subgoal):\n 1. HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "using x SeqHR_hpair"], ["proof (prove)\nusing this:\n  HR x1 \\<lbrakk>Goedel_I.HF x1\\<rbrakk>e\n  HR x2 \\<lbrakk>Goedel_I.HF x2\\<rbrakk>e\n  x = \\<langle>x1, x2\\<rangle>\n  \\<lbrakk>SeqHR ?x1.0 ?x3.0 ?s1.0 ?k1.0;\n   SeqHR ?x2.0 ?x4.0 ?s2.0 ?k2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s k.\n                       SeqHR \\<langle>?x1.0, ?x2.0\\<rangle>\n                        (q_HPair ?x3.0 ?x4.0) s k\n\ngoal (1 subgoal):\n 1. HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e", "by (auto simp: HR_def q_defs)"], ["proof (state)\nthis:\n  HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  HR x \\<lbrakk>Goedel_I.HF x\\<rbrakk>e\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Lemma 6.2\\<close>"], ["", "lemma HF_quot_coding_tm: \"coding_tm t \\<Longrightarrow> HF \\<lbrakk>t\\<rbrakk>e = \\<guillemotleft>t\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coding_tm t \\<Longrightarrow>\n    Goedel_I.HF \\<lbrakk>t\\<rbrakk>e = \\<guillemotleft>t\\<guillemotright>", "by (induct t rule: coding_tm.induct) (auto, simp add: HPair_def quot_Eats)"], ["", "lemma HR_quot_fm: fixes A::fm shows \"HR \\<lbrakk>\\<guillemotleft>A\\<guillemotright>\\<rbrakk>e \\<lbrakk>\\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\\<rbrakk>e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HR \\<lbrakk>\\<guillemotleft>A\\<guillemotright>\\<rbrakk>e\n     \\<lbrakk>\\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\\<rbrakk>e", "by (metis HR_H HF_quot_coding_tm coding_tm_hf quot_fm_coding)"], ["", "lemma prove_HRP: fixes A::fm shows \"{} \\<turnstile> HRP \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    HRP \\<guillemotleft>A\\<guillemotright>\n     \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>", "by (auto simp: supp_conv_fresh Sigma_fm_imp_thm ground_aux_def ground_fm_aux_def HR_quot_fm)"], ["", "section\\<open>The Function K and Lemma 6.3\\<close>"], ["", "nominal_function KRP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"atom y \\<sharp> (v,x,x') \\<Longrightarrow>\n         KRP v x x' = Ex y (HRP x (Var y) AND SubstFormP v (Var y) x x')\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt KRP_graph_aux\n 2. \\<And>x y. KRP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>y v xa x'.\n           \\<lbrakk>atom y \\<sharp> (v, xa, x'); x = (v, xa, x')\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>y v x x' ya va xa x'a.\n       \\<lbrakk>atom y \\<sharp> (v, x, x'); atom ya \\<sharp> (va, xa, x'a);\n        (v, x, x') = (va, xa, x'a)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex y\n                          (HRP x (Var y) AND SubstFormP v (Var y) x x') =\n                         SyntaxN.Ex ya\n                          (HRP xa (Var ya) AND\n                           SubstFormP va (Var ya) xa x'a)", "by (auto simp: eqvt_def KRP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All KRP_dom", "by lexicographic_order"], ["", "lemma KRP_fresh_iff [simp]: \"a \\<sharp> KRP v x x' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> KRP v x x' =\n    (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<sharp> KRP v x x' =\n    (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')", "obtain y::name where \"atom y \\<sharp> (v,x,x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        atom y \\<sharp> (v, x, x') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom y \\<sharp> (v, x, x')\n\ngoal (1 subgoal):\n 1. a \\<sharp> KRP v x x' =\n    (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom y \\<sharp> (v, x, x')\n\ngoal (1 subgoal):\n 1. a \\<sharp> KRP v x x' =\n    (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> KRP v x x' =\n  (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma KRP_subst [simp]: \"(KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')", "obtain y::name where \"atom y \\<sharp> (v,x,x',t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        atom y \\<sharp> (v, x, x', t, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom y \\<sharp> (v, x, x', t, i)\n\ngoal (1 subgoal):\n 1. (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom y \\<sharp> (v, x, x', t, i)\n\ngoal (1 subgoal):\n 1. (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')", "by (auto simp: KRP.simps [of y])"], ["proof (state)\nthis:\n  (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')\n\ngoal:\nNo subgoals!", "qed"], ["", "declare KRP.simps [simp del]"], ["", "lemma prove_SubstFormP: \"{} \\<turnstile> SubstFormP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright> \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    SubstFormP \\<guillemotleft>Var i\\<guillemotright>\n     \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\n     \\<guillemotleft>A\\<guillemotright>\n     \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>", "by (auto simp: supp_conv_fresh Sigma_fm_imp_thm ground_aux_def SubstForm_quot)"], ["", "lemma prove_KRP: \"{} \\<turnstile> KRP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    KRP \\<guillemotleft>Var i\\<guillemotright>\n     \\<guillemotleft>A\\<guillemotright>\n     \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>", "by (auto simp: KRP.simps [of y] \n           intro!: Ex_I [where x=\"\\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\"] prove_HRP prove_SubstFormP)"], ["", "lemma KRP_unique: \"{KRP v x y, KRP v x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y", "obtain u::name and u'::name where \"atom u \\<sharp> (v,x,y,y')\" \"atom u' \\<sharp> (v,x,y,y',u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u u'.\n        \\<lbrakk>atom u \\<sharp> (v, x, y, y');\n         atom u' \\<sharp> (v, x, y, y', u)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom u \\<sharp> (v, x, y, y')\n  atom u' \\<sharp> (v, x, y, y', u)\n\ngoal (1 subgoal):\n 1. {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom u \\<sharp> (v, x, y, y')\n  atom u' \\<sharp> (v, x, y, y', u)\n\ngoal (1 subgoal):\n 1. {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y", "by (auto simp: KRP.simps [of u v x y] KRP.simps [of u' v x y'] \n             intro: SubstFormP_cong [THEN Iff_MP2_same]\n                    SubstFormP_unique [THEN cut2] HRP_unique [THEN cut2])"], ["proof (state)\nthis:\n  {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma KRP_subst_fm: \"{KRP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>\\<beta>\\<guillemotright> (Var j)} \\<turnstile> Var j EQ \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {KRP \\<guillemotleft>Var i\\<guillemotright>\n      \\<guillemotleft>\\<beta>\\<guillemotright> (Var j)} \\<turnstile>\n    Var j EQ\n    \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>", "by (metis KRP_unique cut0 prove_KRP)"], ["", "section\\<open>The Diagonal Lemma and G?del's Theorem\\<close>"], ["", "lemma diagonal: \n  obtains \\<delta> where \"{} \\<turnstile> \\<delta> IFF \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>)\"  \"supp \\<delta> = supp \\<alpha> - {atom i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>);\n         supp \\<delta> = supp \\<alpha> - {atom i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>);\n         supp \\<delta> = supp \\<alpha> - {atom i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain k::name and j::name\n    where atoms: \"atom k \\<sharp> (i,j,\\<alpha>)\" \"atom j \\<sharp> (i,\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k j.\n        \\<lbrakk>atom k \\<sharp> (i, j, \\<alpha>);\n         atom j \\<sharp> (i, \\<alpha>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (i, j, \\<alpha>)\n  atom j \\<sharp> (i, \\<alpha>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>);\n         supp \\<delta> = supp \\<alpha> - {atom i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define \\<beta> where \"\\<beta> = Ex j (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND \\<alpha>(i ::= Var j))\""], ["proof (state)\nthis:\n  \\<beta> =\n  SyntaxN.Ex j\n   (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND\n    \\<alpha>(i::=Var j))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>);\n         supp \\<delta> = supp \\<alpha> - {atom i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence 1: \"{} \\<turnstile> \\<beta>(i ::= \\<guillemotleft>\\<beta>\\<guillemotright>) IFF (Ex j (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND \\<alpha>(i ::= Var j)))(i ::= \\<guillemotleft>\\<beta>\\<guillemotright>)\""], ["proof (prove)\nusing this:\n  \\<beta> =\n  SyntaxN.Ex j\n   (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND\n    \\<alpha>(i::=Var j))\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    \\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>) IFF\n    (SyntaxN.Ex j\n      (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND\n       \\<alpha>(i::=Var j)))(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)", "by (metis Iff_refl)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  \\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>) IFF\n  (SyntaxN.Ex j\n    (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND\n     \\<alpha>(i::=Var j)))(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>);\n         supp \\<delta> = supp \\<alpha> - {atom i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 2: \"{} \\<turnstile> (Ex j (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND \\<alpha>(i ::= Var j)))(i ::= \\<guillemotleft>\\<beta>\\<guillemotright>) IFF\n                Ex j (Var j EQ \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND \\<alpha>(i::=Var j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    (SyntaxN.Ex j\n      (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND\n       \\<alpha>(i::=Var j)))(i::=\\<guillemotleft>\\<beta>\\<guillemotright>) IFF\n    SyntaxN.Ex j\n     (Var j EQ\n      \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND\n      \\<alpha>(i::=Var j))", "using atoms"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (i, j, \\<alpha>)\n  atom j \\<sharp> (i, \\<alpha>)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    (SyntaxN.Ex j\n      (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND\n       \\<alpha>(i::=Var j)))(i::=\\<guillemotleft>\\<beta>\\<guillemotright>) IFF\n    SyntaxN.Ex j\n     (Var j EQ\n      \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND\n      \\<alpha>(i::=Var j))", "apply (auto intro!: Ex_cong Conj_cong KRP_subst_fm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (i, j, \\<alpha>);\n     atom j \\<sharp> (i, \\<alpha>)\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ\n                       \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>} \\<turnstile>\n                      KRP \\<guillemotleft>Var i\\<guillemotright>\n                       \\<guillemotleft>\\<beta>\\<guillemotright> (Var j)", "apply (rule Iff_MP_same [OF Var_Eq_subst_Iff])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (i, j, \\<alpha>);\n     atom j \\<sharp> (i, \\<alpha>)\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ\n                       \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>} \\<turnstile>\n                      (KRP \\<guillemotleft>Var i\\<guillemotright>\n                        \\<guillemotleft>\\<beta>\\<guillemotright>\n                        (Var j))(j::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>)", "apply (auto intro: prove_KRP thin0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  (SyntaxN.Ex j\n    (KRP \\<guillemotleft>Var i\\<guillemotright> (Var i) (Var j) AND\n     \\<alpha>(i::=Var j)))(i::=\\<guillemotleft>\\<beta>\\<guillemotright>) IFF\n  SyntaxN.Ex j\n   (Var j EQ\n    \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND\n    \\<alpha>(i::=Var j))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>);\n         supp \\<delta> = supp \\<alpha> - {atom i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have 3: \"{} \\<turnstile> Ex j (Var j EQ \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND \\<alpha>(i::=Var j)) IFF \\<alpha>(i::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    SyntaxN.Ex j\n     (Var j EQ\n      \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND\n      \\<alpha>(i::=Var j)) IFF\n    \\<alpha>(i::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>)", "using atoms"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (i, j, \\<alpha>)\n  atom j \\<sharp> (i, \\<alpha>)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    SyntaxN.Ex j\n     (Var j EQ\n      \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND\n      \\<alpha>(i::=Var j)) IFF\n    \\<alpha>(i::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom k \\<sharp> (i, j, \\<alpha>);\n     atom j \\<sharp> (i, \\<alpha>)\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ\n                       \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>,\n                       \\<alpha>(i::=Var j)} \\<turnstile>\n                      \\<alpha>(i::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>)\n 2. \\<lbrakk>atom k \\<sharp> (i, j, \\<alpha>);\n     atom j \\<sharp> (i, \\<alpha>)\\<rbrakk>\n    \\<Longrightarrow> {\\<alpha>(i::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>)} \\<turnstile>\n                      SyntaxN.Ex j\n                       (Var j EQ\n                        \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND\n                        \\<alpha>(i::=Var j))", "apply (rule cut_same [OF Iff_MP2_same [OF Var_Eq_subst_Iff AssumeH(2)]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom k \\<sharp> (i, j, \\<alpha>);\n     atom j \\<sharp> (i, \\<alpha>)\\<rbrakk>\n    \\<Longrightarrow> {(\\<alpha>(i::=Var\nj))(j::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>),\n                       Var j EQ\n                       \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>,\n                       \\<alpha>(i::=Var j)} \\<turnstile>\n                      \\<alpha>(i::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>)\n 2. \\<lbrakk>atom k \\<sharp> (i, j, \\<alpha>);\n     atom j \\<sharp> (i, \\<alpha>)\\<rbrakk>\n    \\<Longrightarrow> {\\<alpha>(i::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>)} \\<turnstile>\n                      SyntaxN.Ex j\n                       (Var j EQ\n                        \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND\n                        \\<alpha>(i::=Var j))", "apply (auto intro: Ex_I [where x=\"\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  SyntaxN.Ex j\n   (Var j EQ\n    \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright> AND\n    \\<alpha>(i::=Var j)) IFF\n  \\<alpha>(i::=\\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>);\n         supp \\<delta> = supp \\<alpha> - {atom i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"supp (\\<beta>(i ::= \\<guillemotleft>\\<beta>\\<guillemotright>)) = supp \\<alpha> - {atom i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)) =\n    supp \\<alpha> - {atom i}", "using atoms"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (i, j, \\<alpha>)\n  atom j \\<sharp> (i, \\<alpha>)\n\ngoal (1 subgoal):\n 1. supp (\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)) =\n    supp \\<alpha> - {atom i}", "by (auto simp: fresh_at_base ground_fm_aux_def \\<beta>_def supp_conv_fresh)"], ["proof (state)\nthis:\n  supp (\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)) =\n  supp \\<alpha> - {atom i}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 \\<alpha>(i::=\\<guillemotleft>\\<delta>\\<guillemotright>);\n         supp \\<delta> = supp \\<alpha> - {atom i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  supp (\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)) =\n  supp \\<alpha> - {atom i}\n\ngoal (1 subgoal):\n 1. thesis", "using atoms"], ["proof (prove)\nusing this:\n  supp (\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)) =\n  supp \\<alpha> - {atom i}\n  atom k \\<sharp> (i, j, \\<alpha>)\n  atom j \\<sharp> (i, \\<alpha>)\n\ngoal (1 subgoal):\n 1. thesis", "by (metis that 1 2 3 Iff_trans)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>G?del's first incompleteness theorem: Our theory is incomplete. NB it is provably consistent\\<close>"], ["", "theorem Goedel_I:\n  obtains \\<delta> where \"{} \\<turnstile> \\<delta> IFF Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>)\"  \"\\<not> {} \\<turnstile> \\<delta>\"  \"\\<not> {} \\<turnstile> Neg \\<delta>\"  \n                  \"eval_fm e \\<delta>\"  \"ground_fm \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>);\n         \\<not> {} \\<turnstile> \\<delta>;\n         \\<not> {} \\<turnstile> Neg \\<delta>; eval_fm e \\<delta>;\n         ground_fm \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>);\n         \\<not> {} \\<turnstile> \\<delta>;\n         \\<not> {} \\<turnstile> Neg \\<delta>; eval_fm e \\<delta>;\n         ground_fm \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix i::name"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>);\n         \\<not> {} \\<turnstile> \\<delta>;\n         \\<not> {} \\<turnstile> Neg \\<delta>; eval_fm e \\<delta>;\n         ground_fm \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain \\<delta> where        \"{} \\<turnstile> \\<delta> IFF Neg ((PfP (Var i))(i::=\\<guillemotleft>\\<delta>\\<guillemotright>))\"\n             and suppd: \"supp \\<delta> = supp (Neg (PfP (Var i))) - {atom i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg ((PfP (Var i))(i::=\\<guillemotleft>\\<delta>\\<guillemotright>));\n         supp \\<delta> = supp (Neg (PfP (Var i))) - {atom i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis SyntaxN.Neg diagonal)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  \\<delta> IFF\n  Neg ((PfP (Var i))(i::=\\<guillemotleft>\\<delta>\\<guillemotright>))\n  supp \\<delta> = supp (Neg (PfP (Var i))) - {atom i}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>);\n         \\<not> {} \\<turnstile> \\<delta>;\n         \\<not> {} \\<turnstile> Neg \\<delta>; eval_fm e \\<delta>;\n         ground_fm \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  {} \\<turnstile>\n  \\<delta> IFF\n  Neg ((PfP (Var i))(i::=\\<guillemotleft>\\<delta>\\<guillemotright>))\n  supp \\<delta> = supp (Neg (PfP (Var i))) - {atom i}", "have diag: \"{} \\<turnstile> \\<delta> IFF Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>)\""], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  \\<delta> IFF\n  Neg ((PfP (Var i))(i::=\\<guillemotleft>\\<delta>\\<guillemotright>))\n  supp \\<delta> = supp (Neg (PfP (Var i))) - {atom i}\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    \\<delta> IFF Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>)", "by simp"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  \\<delta> IFF Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>);\n         \\<not> {} \\<turnstile> \\<delta>;\n         \\<not> {} \\<turnstile> Neg \\<delta>; eval_fm e \\<delta>;\n         ground_fm \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  {} \\<turnstile>\n  \\<delta> IFF Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>)", "have np: \"\\<not> {} \\<turnstile> \\<delta> \\<and> \\<not> {} \\<turnstile> Neg \\<delta>\""], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  \\<delta> IFF Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. \\<not> {} \\<turnstile> \\<delta> \\<and>\n    \\<not> {} \\<turnstile> Neg \\<delta>", "by (metis Iff_MP_same NegNeg_D Neg_D Neg_cong consistent proved_iff_proved_PfP)"], ["proof (state)\nthis:\n  \\<not> {} \\<turnstile> \\<delta> \\<and> \\<not> {} \\<turnstile> Neg \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>);\n         \\<not> {} \\<turnstile> \\<delta>;\n         \\<not> {} \\<turnstile> Neg \\<delta>; eval_fm e \\<delta>;\n         ground_fm \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<not> {} \\<turnstile> \\<delta> \\<and> \\<not> {} \\<turnstile> Neg \\<delta>", "have \"eval_fm e \\<delta>\""], ["proof (prove)\nusing this:\n  \\<not> {} \\<turnstile> \\<delta> \\<and> \\<not> {} \\<turnstile> Neg \\<delta>\n\ngoal (1 subgoal):\n 1. eval_fm e \\<delta>", "using hfthm_sound [where e=e, OF diag]"], ["proof (prove)\nusing this:\n  \\<not> {} \\<turnstile> \\<delta> \\<and> \\<not> {} \\<turnstile> Neg \\<delta>\n  \\<forall>B\\<in>{}. eval_fm e B \\<Longrightarrow>\n  eval_fm e\n   (\\<delta> IFF Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>))\n\ngoal (1 subgoal):\n 1. eval_fm e \\<delta>", "by simp (metis Pf_quot_imp_is_proved)"], ["proof (state)\nthis:\n  eval_fm e \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>);\n         \\<not> {} \\<turnstile> \\<delta>;\n         \\<not> {} \\<turnstile> Neg \\<delta>; eval_fm e \\<delta>;\n         ground_fm \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  eval_fm e \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>);\n         \\<not> {} \\<turnstile> \\<delta>;\n         \\<not> {} \\<turnstile> Neg \\<delta>; eval_fm e \\<delta>;\n         ground_fm \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"ground_fm \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_fm \\<delta>", "using suppd"], ["proof (prove)\nusing this:\n  supp \\<delta> = supp (Neg (PfP (Var i))) - {atom i}\n\ngoal (1 subgoal):\n 1. ground_fm \\<delta>", "by (simp add: supp_conv_fresh ground_fm_aux_def subset_eq) (metis fresh_ineq_at_base)"], ["proof (state)\nthis:\n  ground_fm \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>{} \\<turnstile>\n                 \\<delta> IFF\n                 Neg (PfP \\<guillemotleft>\\<delta>\\<guillemotright>);\n         \\<not> {} \\<turnstile> \\<delta>;\n         \\<not> {} \\<turnstile> Neg \\<delta>; eval_fm e \\<delta>;\n         ground_fm \\<delta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  eval_fm e \\<delta>\n  ground_fm \\<delta>", "show ?thesis"], ["proof (prove)\nusing this:\n  eval_fm e \\<delta>\n  ground_fm \\<delta>\n\ngoal (1 subgoal):\n 1. thesis", "by (metis diag np that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}