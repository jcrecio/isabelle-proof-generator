{"file_name": "/home/qj213/afp-2021-10-22/thys/Statecharts/CarAudioSystem.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Statecharts", "problem_names": ["lemma check_Root_CTRL:\n  \"(Root_CTRL_States,Root_CTRL_Init,Root_CTRL_Labels,Root_CTRL_Delta) : seqauto\"", "lemma States_Root_CTRL:\n  \"States Root_CTRL = Root_CTRL_States\"", "lemma Init_State_Root_CTRL:\n  \"InitState Root_CTRL = Root_CTRL_Init\"", "lemma Labels_Root_CTRL:\n  \"Labels Root_CTRL = Root_CTRL_Labels\"", "lemma Delta_Root_CTRL:\n  \"Delta Root_CTRL = Root_CTRL_Delta\"", "lemma check_CDPlayer_CTRL:\n  \"(CDPlayer_CTRL_States,CDPlayer_CTRL_Init,CDPlayer_CTRL_Labels,CDPlayer_CTRL_Delta) : seqauto\"", "lemma States_CDPlayer_CTRL:\n  \"States CDPlayer_CTRL = CDPlayer_CTRL_States\"", "lemma Init_State_CDPlayer_CTRL:\n  \"InitState CDPlayer_CTRL = CDPlayer_CTRL_Init\"", "lemma Labels_CDPlayer_CTRL:\n  \"Labels CDPlayer_CTRL = CDPlayer_CTRL_Labels\"", "lemma Delta_CDPlayer_CTRL:\n  \"Delta CDPlayer_CTRL = CDPlayer_CTRL_Delta\"", "lemma check_AudioPlayer_CTRL:\n  \"(AudioPlayer_CTRL_States,AudioPlayer_CTRL_Init,AudioPlayer_CTRL_Labels,AudioPlayer_CTRL_Delta) : seqauto\"", "lemma States_AudioPlayer_CTRL:\n  \"States AudioPlayer_CTRL = AudioPlayer_CTRL_States\"", "lemma Init_State_AudioPlayer_CTRL:\n  \"InitState AudioPlayer_CTRL = AudioPlayer_CTRL_Init\"", "lemma Labels_AudioPlayer_CTRL:\n  \"Labels AudioPlayer_CTRL = AudioPlayer_CTRL_Labels\"", "lemma Delta_AudioPlayer_CTRL:\n  \"Delta AudioPlayer_CTRL = AudioPlayer_CTRL_Delta\"", "lemma check_On_CTRL:\n  \"(On_CTRL_States,On_CTRL_Init,On_CTRL_Labels,On_CTRL_Delta) : seqauto\"", "lemma States_On_CTRL:\n  \"States On_CTRL = On_CTRL_States\"", "lemma Init_State_On_CTRL:\n  \"InitState On_CTRL = On_CTRL_Init\"", "lemma Labels_On_CTRL:\n  \"Labels On_CTRL = On_CTRL_Labels\"", "lemma Delta_On_CTRL:\n  \"Delta On_CTRL = On_CTRL_Delta\"", "lemma check_TunerMode_CTRL:\n  \"(TunerMode_CTRL_States,TunerMode_CTRL_Init,TunerMode_CTRL_Labels,TunerMode_CTRL_Delta) : seqauto\"", "lemma States_TunerMode_CTRL:\n  \"States TunerMode_CTRL = TunerMode_CTRL_States\"", "lemma Init_State_TunerMode_CTRL:\n  \"InitState TunerMode_CTRL = TunerMode_CTRL_Init\"", "lemma Labels_TunerMode_CTRL:\n  \"Labels TunerMode_CTRL = TunerMode_CTRL_Labels\"", "lemma Delta_TunerMode_CTRL:\n  \"Delta TunerMode_CTRL = TunerMode_CTRL_Delta\"", "lemma check_CDMode_CTRL:\n  \"(CDMode_CTRL_States,CDMode_CTRL_Init,CDMode_CTRL_Labels,CDMode_CTRL_Delta) : seqauto\"", "lemma States_CDMode_CTRL:\n  \"States CDMode_CTRL = CDMode_CTRL_States\"", "lemma Init_State_CDMode_CTRL:\n  \"InitState CDMode_CTRL = CDMode_CTRL_Init\"", "lemma Labels_CDMode_CTRL:\n  \"Labels CDMode_CTRL = CDMode_CTRL_Labels\"", "lemma Delta_CDMode_CTRL:\n  \"Delta CDMode_CTRL = CDMode_CTRL_Delta\"", "lemmas CarAudioSystemStates = States_Root_CTRL States_CDPlayer_CTRL States_AudioPlayer_CTRL States_On_CTRL \n                              States_TunerMode_CTRL States_CDMode_CTRL\n                              Root_CTRL_States_def CDPlayer_CTRL_States_def AudioPlayer_CTRL_States_def \n                              On_CTRL_States_def TunerMode_CTRL_States_def CDMode_CTRL_States_def", "lemmas CarAudioSystemInitState = Init_State_Root_CTRL Init_State_CDPlayer_CTRL Init_State_AudioPlayer_CTRL \n                                 Init_State_On_CTRL Init_State_TunerMode_CTRL Init_State_CDMode_CTRL\n                                 Root_CTRL_Init_def CDPlayer_CTRL_Init_def AudioPlayer_CTRL_Init_def\n                                 On_CTRL_Init_def TunerMode_CTRL_Init_def CDMode_CTRL_Init_def", "lemmas CarAudioSystemEvents = Events_Root_CTRL Events_CDPlayer_CTRL Events_AudioPlayer_CTRL Events_On_CTRL \n                              Events_TunerMode_CTRL Events_CDMode_CTRL", "lemmas CarAudioSystemthms = CarAudioSystemStates CarAudioSystemEvents CarAudioSystemInitState", "lemmas CarAudioSystemthms_1 = CarAudioSystemthms CarAudioSystem_StatesRoot", "lemmas CarAudioSystemthms_2 = CarAudioSystemthms_1 CarAudioSystem_StatesCDPlayer", "lemmas CarAudioSystemthms_3 = CarAudioSystemthms_2 CarAudioSystem_StatesAudioPlayer", "lemmas CarAudioSystemthms_4 = CarAudioSystemthms_3 CarAudioSystem_StatesTunerMode", "lemmas CarAudioSystemthms_5 = CarAudioSystemthms_4 CarAudioSystem_StatesCDMode", "lemma check_DataSpace [simp]:\n  \"[range V0, range V1] \\<in> dataspace\"", "lemma PartNum_DataSpace [simp]:\n  \"PartNum (DSpace) = 2\"", "lemma PartDom_DataSpace_V0 [simp]:\n  \"(PartDom DSpace 0) = range V0\"", "lemma PartDom_DataSpace_V1 [simp]:\n  \"(PartDom DSpace (Suc 0)) = range V1\"", "lemma check_InitialData [simp]:\n  \"([V0 0, V1 0],DSpace) \\<in> data\"", "lemma Select0_InitData [simp]:\n  \"Select0 (LiftInitData [V0 0, V1 0]) = 0\"", "lemma Select1_InitData [simp]:\n  \"Select1 (LiftInitData [V0 0, V1 0]) = 0\"", "lemma HAInitValue1_CarAudioSystem:\n  \"CarAudioSystem |=H= Atom (VAL (\\<lambda> d. (Select0 d) = 0))\"", "lemma HAInitValue2_CarAudioSystem:\n  \"CarAudioSystem |=H= Atom (VAL (\\<lambda> d. (Select1 d) = 0))\"", "lemma HAInitValue_DSpace_CarAudioSystem [simp]:\n  \"Data.DataSpace (LiftInitData [V0 0, V1 0]) = DSpace\"", "lemma check_InitStatus [simp]:\n  \"(CarAudioSystem, InitConf CarAudioSystem, {},LiftInitData [V0 0, V1 0]) \\<in> status\"", "lemma InitData_InitStatus [simp]:\n  \"Value (InitStatus CarAudioSystem) = LiftInitData [V0 0, V1 0]\"", "lemma Events_InitStatus [simp]:\n  \"Events (InitStatus CarAudioSystem) = {}\"", "lemma Conf_InitStatus [simp]:\n  \"Conf (InitStatus CarAudioSystem) = InitConf CarAudioSystem\"", "lemma CompFunCarAudioSystem_the:\n  \"the (CompFun CarAudioSystem ''On'') =  {CDMode_CTRL,TunerMode_CTRL}\"", "lemma CompFunCarAudioSystem_the2:\n  \"the (CompFun CarAudioSystem ''CarAudioSystem'') =  {AudioPlayer_CTRL, CDPlayer_CTRL}\"", "lemma CompFunCarAudioSystem_the3:\n  \"the (CompFun CarAudioSystem ''Off'') =  {}\"", "lemma Root_CTRL_CDPlayer_CTRL_noteq [simp]:\n  \"Root_CTRL \\<noteq> CDPlayer_CTRL\"", "lemma Root_CTRL_AudioPlayer_CTRL_noteq [simp]:\n  \"Root_CTRL \\<noteq> AudioPlayer_CTRL\"", "lemma Root_CTRL_TunerMode_CTRL_noteq [simp]:\n  \"Root_CTRL \\<noteq> TunerMode_CTRL\"", "lemma Root_CTRL_CDMode_CTRL_noteq [simp]:\n  \"Root_CTRL \\<noteq> CDMode_CTRL\"", "lemma CDPlayer_CTRL_AudioPlayer_CTRL_noteq [simp]:\n  \"CDPlayer_CTRL \\<noteq> AudioPlayer_CTRL\"", "lemma CDPlayer_CTRL_TunerMode_CTRL_noteq [simp]:\n  \"CDPlayer_CTRL \\<noteq> TunerMode_CTRL\"", "lemma CDPlayer_CTRL_CDMode_CTRL_noteq [simp]:\n  \"CDPlayer_CTRL \\<noteq> CDMode_CTRL\"", "lemma AudioPlayer_CTRL_TunerMode_CTRL_noteq [simp]:\n  \"AudioPlayer_CTRL \\<noteq>  TunerMode_CTRL\"", "lemma AudioPlayer_CTRL_CDMode_CTRL_noteq [simp]:\n  \"AudioPlayer_CTRL \\<noteq> CDMode_CTRL\"", "lemma TunerMode_CTRL_CDMode_CTRL_noteq [simp]:\n  \"TunerMode_CTRL \\<noteq>  CDMode_CTRL\"", "lemma Initial_State_CarAudioSystem:\n  \"CarAudioSystem |=H= Atom (IN ''Off'')\""], "translations": [["", "lemma check_Root_CTRL:\n  \"(Root_CTRL_States,Root_CTRL_Init,Root_CTRL_Labels,Root_CTRL_Delta) : seqauto\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Root_CTRL_States, Root_CTRL_Init, Root_CTRL_Labels, Root_CTRL_Delta)\n    \\<in> seqauto", "apply (unfold seqauto_def SeqAuto_def Root_CTRL_States_def Root_CTRL_Init_def Root_CTRL_Labels_def Root_CTRL_Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({''CarAudioSystem''}, ''CarAudioSystem'', {}, {})\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and> t \\<in> S \\<and> l \\<in> L)}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma States_Root_CTRL:\n  \"States Root_CTRL = Root_CTRL_States\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States Root_CTRL = Root_CTRL_States", "apply (simp add: Root_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States\n     (Abs_seqauto\n       (Root_CTRL_States, Root_CTRL_Init, Root_CTRL_Labels,\n        Root_CTRL_Delta)) =\n    Root_CTRL_States", "apply (unfold States_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (Root_CTRL_States, Root_CTRL_Init, Root_CTRL_Labels,\n        Root_CTRL_Delta)) =\n    Root_CTRL_States", "apply (simp add: Abs_seqauto_inverse check_Root_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Init_State_Root_CTRL:\n  \"InitState Root_CTRL = Root_CTRL_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState Root_CTRL = Root_CTRL_Init", "apply (simp add: Root_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState\n     (Abs_seqauto\n       (Root_CTRL_States, Root_CTRL_Init, Root_CTRL_Labels,\n        Root_CTRL_Delta)) =\n    Root_CTRL_Init", "apply (unfold InitState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (Root_CTRL_States, Root_CTRL_Init, Root_CTRL_Labels,\n        Root_CTRL_Delta)) =\n    Root_CTRL_Init", "apply (simp add: Abs_seqauto_inverse check_Root_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Labels_Root_CTRL:\n  \"Labels Root_CTRL = Root_CTRL_Labels\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels Root_CTRL = Root_CTRL_Labels", "apply (simp add: Root_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels\n     (Abs_seqauto\n       (Root_CTRL_States, Root_CTRL_Init, Root_CTRL_Labels,\n        Root_CTRL_Delta)) =\n    Root_CTRL_Labels", "apply (unfold Labels_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (Root_CTRL_States, Root_CTRL_Init, Root_CTRL_Labels,\n        Root_CTRL_Delta)) =\n    Root_CTRL_Labels", "apply (simp add: Abs_seqauto_inverse check_Root_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Delta_Root_CTRL:\n  \"Delta Root_CTRL = Root_CTRL_Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta Root_CTRL = Root_CTRL_Delta", "apply (simp add: Root_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta\n     (Abs_seqauto\n       (Root_CTRL_States, Root_CTRL_Init, Root_CTRL_Labels,\n        Root_CTRL_Delta)) =\n    Root_CTRL_Delta", "apply (unfold Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (Root_CTRL_States, Root_CTRL_Init, Root_CTRL_Labels,\n        Root_CTRL_Delta)) =\n    Root_CTRL_Delta", "apply (simp add: Abs_seqauto_inverse check_Root_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal Events_Root_CTRL:\n  \"SAEvents Root_CTRL = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAEvents Root_CTRL = ?X", "apply (unfold SAEvents_def expr_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>l\\<in>Label (Delta Root_CTRL).\n        fst (action l) \\<union> ExprEvents (fst l)) =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Union>l\\<in>Label (Delta Root_CTRL).\n        fst (action l) \\<union> ExprEvents (fst l)) =\n    ?s4\n 2. ?s4 = ?X", "apply (simp add: expr_def Delta_Root_CTRL Root_CTRL_Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} = ?X", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Sequential Automaton \\<open>CDPlayer_CTRL\\<close>\\<close>"], ["", "lemma check_CDPlayer_CTRL:\n  \"(CDPlayer_CTRL_States,CDPlayer_CTRL_Init,CDPlayer_CTRL_Labels,CDPlayer_CTRL_Delta) : seqauto\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CDPlayer_CTRL_States, CDPlayer_CTRL_Init, CDPlayer_CTRL_Labels,\n     CDPlayer_CTRL_Delta)\n    \\<in> seqauto", "apply (unfold seqauto_def SeqAuto_def CDPlayer_CTRL_States_def CDPlayer_CTRL_Init_def CDPlayer_CTRL_Labels_def CDPlayer_CTRL_Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({''ReadTracks'', ''CDFull'', ''CDEmpty''}, ''CDEmpty'',\n     {(En ''LastTrack'', defaultguard, CDPlayer_CTRL_Action1),\n      (En ''NewTrack'', defaultguard, CDPlayer_CTRL_Action2),\n      (And (En ''CDEject'') (In ''On''), defaultguard,\n       CDPlayer_CTRL_Action3),\n      (En ''CDIn'', defaultguard, defaultaction)},\n     {(''ReadTracks'',\n       (En ''LastTrack'', defaultguard, CDPlayer_CTRL_Action1), ''CDFull''),\n      (''CDFull'',\n       (And (En ''CDEject'') (In ''On''), defaultguard,\n        CDPlayer_CTRL_Action3),\n       ''CDEmpty''),\n      (''ReadTracks'',\n       (En ''NewTrack'', defaultguard, CDPlayer_CTRL_Action2),\n       ''ReadTracks''),\n      (''CDEmpty'', (En ''CDIn'', defaultguard, defaultaction),\n       ''ReadTracks'')})\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and> t \\<in> S \\<and> l \\<in> L)}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma States_CDPlayer_CTRL:\n  \"States CDPlayer_CTRL = CDPlayer_CTRL_States\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States CDPlayer_CTRL = CDPlayer_CTRL_States", "apply (simp add: CDPlayer_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States\n     (Abs_seqauto\n       (CDPlayer_CTRL_States, CDPlayer_CTRL_Init, CDPlayer_CTRL_Labels,\n        CDPlayer_CTRL_Delta)) =\n    CDPlayer_CTRL_States", "apply (unfold States_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (CDPlayer_CTRL_States, CDPlayer_CTRL_Init, CDPlayer_CTRL_Labels,\n        CDPlayer_CTRL_Delta)) =\n    CDPlayer_CTRL_States", "apply (simp add: Abs_seqauto_inverse check_CDPlayer_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Init_State_CDPlayer_CTRL:\n  \"InitState CDPlayer_CTRL = CDPlayer_CTRL_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState CDPlayer_CTRL = CDPlayer_CTRL_Init", "apply (simp add: CDPlayer_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState\n     (Abs_seqauto\n       (CDPlayer_CTRL_States, CDPlayer_CTRL_Init, CDPlayer_CTRL_Labels,\n        CDPlayer_CTRL_Delta)) =\n    CDPlayer_CTRL_Init", "apply (unfold InitState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (CDPlayer_CTRL_States, CDPlayer_CTRL_Init, CDPlayer_CTRL_Labels,\n        CDPlayer_CTRL_Delta)) =\n    CDPlayer_CTRL_Init", "apply (simp add: Abs_seqauto_inverse check_CDPlayer_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Labels_CDPlayer_CTRL:\n  \"Labels CDPlayer_CTRL = CDPlayer_CTRL_Labels\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels CDPlayer_CTRL = CDPlayer_CTRL_Labels", "apply (simp add: CDPlayer_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels\n     (Abs_seqauto\n       (CDPlayer_CTRL_States, CDPlayer_CTRL_Init, CDPlayer_CTRL_Labels,\n        CDPlayer_CTRL_Delta)) =\n    CDPlayer_CTRL_Labels", "apply (unfold Labels_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (CDPlayer_CTRL_States, CDPlayer_CTRL_Init, CDPlayer_CTRL_Labels,\n        CDPlayer_CTRL_Delta)) =\n    CDPlayer_CTRL_Labels", "apply (simp add: Abs_seqauto_inverse check_CDPlayer_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Delta_CDPlayer_CTRL:\n  \"Delta CDPlayer_CTRL = CDPlayer_CTRL_Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta CDPlayer_CTRL = CDPlayer_CTRL_Delta", "apply (simp add: CDPlayer_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta\n     (Abs_seqauto\n       (CDPlayer_CTRL_States, CDPlayer_CTRL_Init, CDPlayer_CTRL_Labels,\n        CDPlayer_CTRL_Delta)) =\n    CDPlayer_CTRL_Delta", "apply (unfold Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (CDPlayer_CTRL_States, CDPlayer_CTRL_Init, CDPlayer_CTRL_Labels,\n        CDPlayer_CTRL_Delta)) =\n    CDPlayer_CTRL_Delta", "apply (simp add: Abs_seqauto_inverse check_CDPlayer_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal Events_CDPlayer_CTRL:\n  \"SAEvents CDPlayer_CTRL = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAEvents CDPlayer_CTRL = ?X", "apply (unfold SAEvents_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>l\\<in>Label (Delta CDPlayer_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Union>l\\<in>Label (Delta CDPlayer_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?s4\n 2. ?s4 = ?X", "apply (simp add: expr_def Delta_CDPlayer_CTRL CDPlayer_CTRL_Delta_def CDPlayer_CTRL_Action1_def CDPlayer_CTRL_Action2_def CDPlayer_CTRL_Action3_def Label_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {''CDIn'', ''NewTrack'', ''CDEject'', ''LastTrack''} = ?X", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Sequential Automaton \\<open>AudioPlayer_CTRL\\<close>\\<close>"], ["", "lemma check_AudioPlayer_CTRL:\n  \"(AudioPlayer_CTRL_States,AudioPlayer_CTRL_Init,AudioPlayer_CTRL_Labels,AudioPlayer_CTRL_Delta) : seqauto\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AudioPlayer_CTRL_States, AudioPlayer_CTRL_Init,\n     AudioPlayer_CTRL_Labels, AudioPlayer_CTRL_Delta)\n    \\<in> seqauto", "apply (unfold seqauto_def SeqAuto_def AudioPlayer_CTRL_States_def AudioPlayer_CTRL_Init_def AudioPlayer_CTRL_Labels_def AudioPlayer_CTRL_Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({''Off'', ''On''}, ''Off'', {(En ''O'', defaultguard, defaultaction)},\n     {(''Off'', (En ''O'', defaultguard, defaultaction), ''On''),\n      (''On'', (En ''O'', defaultguard, defaultaction), ''Off'')})\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and> t \\<in> S \\<and> l \\<in> L)}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma States_AudioPlayer_CTRL:\n  \"States AudioPlayer_CTRL = AudioPlayer_CTRL_States\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States AudioPlayer_CTRL = AudioPlayer_CTRL_States", "apply (simp add: AudioPlayer_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States\n     (Abs_seqauto\n       (AudioPlayer_CTRL_States, AudioPlayer_CTRL_Init,\n        AudioPlayer_CTRL_Labels, AudioPlayer_CTRL_Delta)) =\n    AudioPlayer_CTRL_States", "apply (unfold States_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (AudioPlayer_CTRL_States, AudioPlayer_CTRL_Init,\n        AudioPlayer_CTRL_Labels, AudioPlayer_CTRL_Delta)) =\n    AudioPlayer_CTRL_States", "apply (simp add: Abs_seqauto_inverse check_AudioPlayer_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Init_State_AudioPlayer_CTRL:\n  \"InitState AudioPlayer_CTRL = AudioPlayer_CTRL_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState AudioPlayer_CTRL = AudioPlayer_CTRL_Init", "apply (simp add: AudioPlayer_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState\n     (Abs_seqauto\n       (AudioPlayer_CTRL_States, AudioPlayer_CTRL_Init,\n        AudioPlayer_CTRL_Labels, AudioPlayer_CTRL_Delta)) =\n    AudioPlayer_CTRL_Init", "apply (unfold InitState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (AudioPlayer_CTRL_States, AudioPlayer_CTRL_Init,\n        AudioPlayer_CTRL_Labels, AudioPlayer_CTRL_Delta)) =\n    AudioPlayer_CTRL_Init", "apply (simp add: Abs_seqauto_inverse check_AudioPlayer_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Labels_AudioPlayer_CTRL:\n  \"Labels AudioPlayer_CTRL = AudioPlayer_CTRL_Labels\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels AudioPlayer_CTRL = AudioPlayer_CTRL_Labels", "apply (simp add: AudioPlayer_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels\n     (Abs_seqauto\n       (AudioPlayer_CTRL_States, AudioPlayer_CTRL_Init,\n        AudioPlayer_CTRL_Labels, AudioPlayer_CTRL_Delta)) =\n    AudioPlayer_CTRL_Labels", "apply (unfold Labels_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (AudioPlayer_CTRL_States, AudioPlayer_CTRL_Init,\n        AudioPlayer_CTRL_Labels, AudioPlayer_CTRL_Delta)) =\n    AudioPlayer_CTRL_Labels", "apply (simp add: Abs_seqauto_inverse check_AudioPlayer_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Delta_AudioPlayer_CTRL:\n  \"Delta AudioPlayer_CTRL = AudioPlayer_CTRL_Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta AudioPlayer_CTRL = AudioPlayer_CTRL_Delta", "apply (simp add: AudioPlayer_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta\n     (Abs_seqauto\n       (AudioPlayer_CTRL_States, AudioPlayer_CTRL_Init,\n        AudioPlayer_CTRL_Labels, AudioPlayer_CTRL_Delta)) =\n    AudioPlayer_CTRL_Delta", "apply (unfold Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (AudioPlayer_CTRL_States, AudioPlayer_CTRL_Init,\n        AudioPlayer_CTRL_Labels, AudioPlayer_CTRL_Delta)) =\n    AudioPlayer_CTRL_Delta", "apply (simp add: Abs_seqauto_inverse check_AudioPlayer_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal Events_AudioPlayer_CTRL:\n  \"SAEvents AudioPlayer_CTRL = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAEvents AudioPlayer_CTRL = ?X", "apply (unfold SAEvents_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>l\\<in>Label (Delta AudioPlayer_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Union>l\\<in>Label (Delta AudioPlayer_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?s4\n 2. ?s4 = ?X", "apply (simp add: expr_def Delta_AudioPlayer_CTRL AudioPlayer_CTRL_Delta_def Label_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {''O''} = ?X", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Sequential Automaton \\<open>On_CTRL\\<close>\\<close>"], ["", "lemma check_On_CTRL:\n  \"(On_CTRL_States,On_CTRL_Init,On_CTRL_Labels,On_CTRL_Delta) : seqauto\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (On_CTRL_States, On_CTRL_Init, On_CTRL_Labels, On_CTRL_Delta)\n    \\<in> seqauto", "apply (unfold seqauto_def SeqAuto_def On_CTRL_States_def On_CTRL_Init_def On_CTRL_Labels_def On_CTRL_Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({''TunerMode'', ''CDMode''}, ''TunerMode'',\n     {(And (En ''Src'') (In ''CDFull''), defaultguard, defaultaction),\n      (En ''Src'', defaultguard, defaultaction),\n      (En ''CDEject'', defaultguard, defaultaction),\n      (En ''EndOfTitle'', \\<lambda>d. (d !P! 0) = (d !P! 1),\n       defaultaction)},\n     {(''TunerMode'',\n       (And (En ''Src'') (In ''CDFull''), defaultguard, defaultaction),\n       ''CDMode''),\n      (''CDMode'', (En ''Src'', defaultguard, defaultaction),\n       ''TunerMode''),\n      (''CDMode'', (En ''CDEject'', defaultguard, defaultaction),\n       ''TunerMode''),\n      (''CDMode'',\n       (En ''EndOfTitle'', \\<lambda>d. (d !P! 0) = (d !P! 1),\n        defaultaction),\n       ''TunerMode'')})\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and> t \\<in> S \\<and> l \\<in> L)}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma States_On_CTRL:\n  \"States On_CTRL = On_CTRL_States\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States On_CTRL = On_CTRL_States", "apply (simp add: On_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States\n     (Abs_seqauto\n       (On_CTRL_States, On_CTRL_Init, On_CTRL_Labels, On_CTRL_Delta)) =\n    On_CTRL_States", "apply (unfold States_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (On_CTRL_States, On_CTRL_Init, On_CTRL_Labels, On_CTRL_Delta)) =\n    On_CTRL_States", "apply (simp add: Abs_seqauto_inverse check_On_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Init_State_On_CTRL:\n  \"InitState On_CTRL = On_CTRL_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState On_CTRL = On_CTRL_Init", "apply (simp add: On_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState\n     (Abs_seqauto\n       (On_CTRL_States, On_CTRL_Init, On_CTRL_Labels, On_CTRL_Delta)) =\n    On_CTRL_Init", "apply (unfold InitState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (On_CTRL_States, On_CTRL_Init, On_CTRL_Labels, On_CTRL_Delta)) =\n    On_CTRL_Init", "apply (simp add: Abs_seqauto_inverse check_On_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Labels_On_CTRL:\n  \"Labels On_CTRL = On_CTRL_Labels\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels On_CTRL = On_CTRL_Labels", "apply (simp add: On_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels\n     (Abs_seqauto\n       (On_CTRL_States, On_CTRL_Init, On_CTRL_Labels, On_CTRL_Delta)) =\n    On_CTRL_Labels", "apply (unfold Labels_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (On_CTRL_States, On_CTRL_Init, On_CTRL_Labels, On_CTRL_Delta)) =\n    On_CTRL_Labels", "apply (simp add: Abs_seqauto_inverse check_On_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Delta_On_CTRL:\n  \"Delta On_CTRL = On_CTRL_Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta On_CTRL = On_CTRL_Delta", "apply (simp add: On_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta\n     (Abs_seqauto\n       (On_CTRL_States, On_CTRL_Init, On_CTRL_Labels, On_CTRL_Delta)) =\n    On_CTRL_Delta", "apply (unfold Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (On_CTRL_States, On_CTRL_Init, On_CTRL_Labels, On_CTRL_Delta)) =\n    On_CTRL_Delta", "apply (simp add: Abs_seqauto_inverse check_On_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal Events_On_CTRL:\n  \"SAEvents On_CTRL = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAEvents On_CTRL = ?X", "apply (unfold SAEvents_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>l\\<in>Label (Delta On_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Union>l\\<in>Label (Delta On_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?s4\n 2. ?s4 = ?X", "apply (simp add: expr_def Delta_On_CTRL On_CTRL_Delta_def Label_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {''EndOfTitle'', ''CDEject'', ''Src''} = ?X", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Sequential Automaton \\<open>TunerMode_CTRL\\<close>\\<close>"], ["", "lemma check_TunerMode_CTRL:\n  \"(TunerMode_CTRL_States,TunerMode_CTRL_Init,TunerMode_CTRL_Labels,TunerMode_CTRL_Delta) : seqauto\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (TunerMode_CTRL_States, TunerMode_CTRL_Init, TunerMode_CTRL_Labels,\n     TunerMode_CTRL_Delta)\n    \\<in> seqauto", "apply (unfold seqauto_def SeqAuto_def TunerMode_CTRL_States_def TunerMode_CTRL_Init_def TunerMode_CTRL_Labels_def TunerMode_CTRL_Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({''1'', ''2'', ''3'', ''4''}, ''1'',\n     {(En ''Next'', defaultguard, defaultaction),\n      (En ''Back'', defaultguard, defaultaction)},\n     {(''1'', (En ''Next'', defaultguard, defaultaction), ''2''),\n      (''2'', (En ''Next'', defaultguard, defaultaction), ''3''),\n      (''3'', (En ''Next'', defaultguard, defaultaction), ''4''),\n      (''4'', (En ''Next'', defaultguard, defaultaction), ''1''),\n      (''1'', (En ''Back'', defaultguard, defaultaction), ''4''),\n      (''4'', (En ''Back'', defaultguard, defaultaction), ''3''),\n      (''3'', (En ''Back'', defaultguard, defaultaction), ''2''),\n      (''2'', (En ''Back'', defaultguard, defaultaction), ''1'')})\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and> t \\<in> S \\<and> l \\<in> L)}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma States_TunerMode_CTRL:\n  \"States TunerMode_CTRL = TunerMode_CTRL_States\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States TunerMode_CTRL = TunerMode_CTRL_States", "apply (simp add: TunerMode_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States\n     (Abs_seqauto\n       (TunerMode_CTRL_States, TunerMode_CTRL_Init, TunerMode_CTRL_Labels,\n        TunerMode_CTRL_Delta)) =\n    TunerMode_CTRL_States", "apply (unfold States_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (TunerMode_CTRL_States, TunerMode_CTRL_Init, TunerMode_CTRL_Labels,\n        TunerMode_CTRL_Delta)) =\n    TunerMode_CTRL_States", "apply (simp add: Abs_seqauto_inverse check_TunerMode_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Init_State_TunerMode_CTRL:\n  \"InitState TunerMode_CTRL = TunerMode_CTRL_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState TunerMode_CTRL = TunerMode_CTRL_Init", "apply (simp add: TunerMode_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState\n     (Abs_seqauto\n       (TunerMode_CTRL_States, TunerMode_CTRL_Init, TunerMode_CTRL_Labels,\n        TunerMode_CTRL_Delta)) =\n    TunerMode_CTRL_Init", "apply (unfold InitState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (TunerMode_CTRL_States, TunerMode_CTRL_Init, TunerMode_CTRL_Labels,\n        TunerMode_CTRL_Delta)) =\n    TunerMode_CTRL_Init", "apply (simp add: Abs_seqauto_inverse check_TunerMode_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Labels_TunerMode_CTRL:\n  \"Labels TunerMode_CTRL = TunerMode_CTRL_Labels\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels TunerMode_CTRL = TunerMode_CTRL_Labels", "apply (simp add: TunerMode_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels\n     (Abs_seqauto\n       (TunerMode_CTRL_States, TunerMode_CTRL_Init, TunerMode_CTRL_Labels,\n        TunerMode_CTRL_Delta)) =\n    TunerMode_CTRL_Labels", "apply (unfold Labels_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (TunerMode_CTRL_States, TunerMode_CTRL_Init, TunerMode_CTRL_Labels,\n        TunerMode_CTRL_Delta)) =\n    TunerMode_CTRL_Labels", "apply (simp add: Abs_seqauto_inverse check_TunerMode_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Delta_TunerMode_CTRL:\n  \"Delta TunerMode_CTRL = TunerMode_CTRL_Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta TunerMode_CTRL = TunerMode_CTRL_Delta", "apply (simp add: TunerMode_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta\n     (Abs_seqauto\n       (TunerMode_CTRL_States, TunerMode_CTRL_Init, TunerMode_CTRL_Labels,\n        TunerMode_CTRL_Delta)) =\n    TunerMode_CTRL_Delta", "apply (unfold Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (TunerMode_CTRL_States, TunerMode_CTRL_Init, TunerMode_CTRL_Labels,\n        TunerMode_CTRL_Delta)) =\n    TunerMode_CTRL_Delta", "apply (simp add: Abs_seqauto_inverse check_TunerMode_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal Events_TunerMode_CTRL:\n  \"SAEvents TunerMode_CTRL = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAEvents TunerMode_CTRL = ?X", "apply (unfold SAEvents_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>l\\<in>Label (Delta TunerMode_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Union>l\\<in>Label (Delta TunerMode_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?s4\n 2. ?s4 = ?X", "apply (simp add: expr_def Delta_TunerMode_CTRL TunerMode_CTRL_Delta_def Label_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {''Back'', ''Next''} = ?X", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Sequential Automaton \\<open>CDMode_CTRL\\<close>\\<close>"], ["", "lemma check_CDMode_CTRL:\n  \"(CDMode_CTRL_States,CDMode_CTRL_Init,CDMode_CTRL_Labels,CDMode_CTRL_Delta) : seqauto\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CDMode_CTRL_States, CDMode_CTRL_Init, CDMode_CTRL_Labels,\n     CDMode_CTRL_Delta)\n    \\<in> seqauto", "apply (unfold seqauto_def SeqAuto_def CDMode_CTRL_States_def CDMode_CTRL_Init_def CDMode_CTRL_Labels_def CDMode_CTRL_Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({''Playing'', ''SelectingNextTrack'', ''SelectingPreviousTrack''},\n     ''Playing'',\n     {(En ''Next'', defaultguard, defaultaction),\n      (En ''Back'', defaultguard, defaultaction),\n      (En ''Ready'', defaultguard, CDMode_CTRL_Action1),\n      (En ''Ready'', defaultguard, CDMode_CTRL_Action2),\n      (En ''EndOfTitle'', \\<lambda>d. Select0 d < Select1 d,\n       defaultaction)},\n     {(''Playing'', (En ''Next'', defaultguard, defaultaction),\n       ''SelectingNextTrack''),\n      (''SelectingNextTrack'',\n       (En ''Ready'', defaultguard, CDMode_CTRL_Action1), ''Playing''),\n      (''Playing'', (En ''Back'', defaultguard, defaultaction),\n       ''SelectingPreviousTrack''),\n      (''SelectingPreviousTrack'',\n       (En ''Ready'', defaultguard, CDMode_CTRL_Action2), ''Playing''),\n      (''Playing'',\n       (En ''EndOfTitle'', \\<lambda>d. Select0 d < Select1 d,\n        defaultaction),\n       ''SelectingNextTrack'')})\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and> t \\<in> S \\<and> l \\<in> L)}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma States_CDMode_CTRL:\n  \"States CDMode_CTRL = CDMode_CTRL_States\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States CDMode_CTRL = CDMode_CTRL_States", "apply (simp add: CDMode_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States\n     (Abs_seqauto\n       (CDMode_CTRL_States, CDMode_CTRL_Init, CDMode_CTRL_Labels,\n        CDMode_CTRL_Delta)) =\n    CDMode_CTRL_States", "apply (unfold States_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (CDMode_CTRL_States, CDMode_CTRL_Init, CDMode_CTRL_Labels,\n        CDMode_CTRL_Delta)) =\n    CDMode_CTRL_States", "apply (simp add: Abs_seqauto_inverse check_CDMode_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Init_State_CDMode_CTRL:\n  \"InitState CDMode_CTRL = CDMode_CTRL_Init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState CDMode_CTRL = CDMode_CTRL_Init", "apply (simp add: CDMode_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState\n     (Abs_seqauto\n       (CDMode_CTRL_States, CDMode_CTRL_Init, CDMode_CTRL_Labels,\n        CDMode_CTRL_Delta)) =\n    CDMode_CTRL_Init", "apply (unfold InitState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (CDMode_CTRL_States, CDMode_CTRL_Init, CDMode_CTRL_Labels,\n        CDMode_CTRL_Delta)) =\n    CDMode_CTRL_Init", "apply (simp add: Abs_seqauto_inverse check_CDMode_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Labels_CDMode_CTRL:\n  \"Labels CDMode_CTRL = CDMode_CTRL_Labels\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels CDMode_CTRL = CDMode_CTRL_Labels", "apply (simp add: CDMode_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Labels\n     (Abs_seqauto\n       (CDMode_CTRL_States, CDMode_CTRL_Init, CDMode_CTRL_Labels,\n        CDMode_CTRL_Delta)) =\n    CDMode_CTRL_Labels", "apply (unfold Labels_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (CDMode_CTRL_States, CDMode_CTRL_Init, CDMode_CTRL_Labels,\n        CDMode_CTRL_Delta)) =\n    CDMode_CTRL_Labels", "apply (simp add: Abs_seqauto_inverse check_CDMode_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Delta_CDMode_CTRL:\n  \"Delta CDMode_CTRL = CDMode_CTRL_Delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta CDMode_CTRL = CDMode_CTRL_Delta", "apply (simp add: CDMode_CTRL_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Delta\n     (Abs_seqauto\n       (CDMode_CTRL_States, CDMode_CTRL_Init, CDMode_CTRL_Labels,\n        CDMode_CTRL_Delta)) =\n    CDMode_CTRL_Delta", "apply (unfold Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n     (Abs_seqauto\n       (CDMode_CTRL_States, CDMode_CTRL_Init, CDMode_CTRL_Labels,\n        CDMode_CTRL_Delta)) =\n    CDMode_CTRL_Delta", "apply (simp add: Abs_seqauto_inverse check_CDMode_CTRL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal Events_CDMode_CTRL:\n  \"SAEvents CDMode_CTRL = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAEvents CDMode_CTRL = ?X", "apply (unfold SAEvents_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>l\\<in>Label (Delta CDMode_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Union>l\\<in>Label (Delta CDMode_CTRL).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    ?s4\n 2. ?s4 = ?X", "apply (simp add: expr_def Label_def Delta_CDMode_CTRL CDMode_CTRL_Delta_def CDMode_CTRL_Action1_def CDMode_CTRL_Action2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {''EndOfTitle'', ''Ready'', ''Back'', ''Ready'', ''Next''} = ?X", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Hierarchical Automaton \\<open>CarAudioSystem\\<close>\\<close>"], ["", "lemmas CarAudioSystemStates = States_Root_CTRL States_CDPlayer_CTRL States_AudioPlayer_CTRL States_On_CTRL \n                              States_TunerMode_CTRL States_CDMode_CTRL\n                              Root_CTRL_States_def CDPlayer_CTRL_States_def AudioPlayer_CTRL_States_def \n                              On_CTRL_States_def TunerMode_CTRL_States_def CDMode_CTRL_States_def"], ["", "lemmas CarAudioSystemInitState = Init_State_Root_CTRL Init_State_CDPlayer_CTRL Init_State_AudioPlayer_CTRL \n                                 Init_State_On_CTRL Init_State_TunerMode_CTRL Init_State_CDMode_CTRL\n                                 Root_CTRL_Init_def CDPlayer_CTRL_Init_def AudioPlayer_CTRL_Init_def\n                                 On_CTRL_Init_def TunerMode_CTRL_Init_def CDMode_CTRL_Init_def"], ["", "lemmas CarAudioSystemEvents = Events_Root_CTRL Events_CDPlayer_CTRL Events_AudioPlayer_CTRL Events_On_CTRL \n                              Events_TunerMode_CTRL Events_CDMode_CTRL"], ["", "lemmas CarAudioSystemthms = CarAudioSystemStates CarAudioSystemEvents CarAudioSystemInitState"], ["", "(* -------------------------------------------------------------- *)\n(*                  States of \\<guillemotright> CarAudioSystem \\<guillemotleft>                  *)\n(* -------------------------------------------------------------- *)"], ["", "schematic_goal CarAudioSystem_StatesRoot:\n  \"HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])) = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])) = ?X", "apply (wellformed CarAudioSystemthms)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas CarAudioSystemthms_1 = CarAudioSystemthms CarAudioSystem_StatesRoot"], ["", "schematic_goal CarAudioSystem_StatesCDPlayer:\n  \"HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++] \n            (''CarAudioSystem'',CDPlayer_CTRL)) = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_1)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas CarAudioSystemthms_2 = CarAudioSystemthms_1 CarAudioSystem_StatesCDPlayer"], ["", "schematic_goal CarAudioSystem_StatesAudioPlayer:\n  \"HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])\n                  [++] (''CarAudioSystem'',CDPlayer_CTRL)\n                  [++] (''CarAudioSystem'',AudioPlayer_CTRL)) = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_2)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas CarAudioSystemthms_3 = CarAudioSystemthms_2 CarAudioSystem_StatesAudioPlayer"], ["", "schematic_goal CarAudioSystem_StatesTunerMode:\n  \"HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])\n                  [++] (''CarAudioSystem'',CDPlayer_CTRL)\n                  [++] (''CarAudioSystem'',AudioPlayer_CTRL)\n                  [++] (''On'', TunerMode_CTRL )) = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_3)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas CarAudioSystemthms_4 = CarAudioSystemthms_3 CarAudioSystem_StatesTunerMode"], ["", "schematic_goal CarAudioSystem_StatesCDMode:\n  \"HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])\n                  [++] (''CarAudioSystem'',CDPlayer_CTRL)\n                  [++] (''CarAudioSystem'',AudioPlayer_CTRL)\n                  [++] (''On'', TunerMode_CTRL )\n                  [++] (''On'', CDMode_CTRL)) = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL) [++]\n      (''On'', CDMode_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_4)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas CarAudioSystemthms_5 = CarAudioSystemthms_4 CarAudioSystem_StatesCDMode"], ["", "schematic_goal SAsCarAudioSystem:\n  \"SAs CarAudioSystem = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAs CarAudioSystem = ?X", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SAs (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n         (''CarAudioSystem'', CDPlayer_CTRL) [++]\n         (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n         (''On'', TunerMode_CTRL) [++]\n         (''On'', CDMode_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal EventsCarAudioSystem:\n \"HAEvents CarAudioSystem = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAEvents CarAudioSystem = ?X", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HAEvents\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL) [++]\n      (''On'', CDMode_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal CompFunCarAudioSystem:\n  \"CompFun CarAudioSystem = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CompFun CarAudioSystem = ?X", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. CompFun\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL) [++]\n      (''On'', CDMode_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal StatesCarAudioSystem:\n  \"HAStates CarAudioSystem = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAStates CarAudioSystem = ?X", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL) [++]\n      (''On'', CDMode_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal ValueCarAudioSystem:\n  \"HAInitValue CarAudioSystem = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAInitValue CarAudioSystem = ?X", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HAInitValue\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL) [++]\n      (''On'', CDMode_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal HAInitStatesCarAudioSystem:\n  \"HAInitStates CarAudioSystem = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAInitStates CarAudioSystem = ?X", "by (simp add: HAInitStates_def SAsCarAudioSystem CarAudioSystemInitState)"], ["", "schematic_goal HARootCarAudioSystem:\n  \"HARoot CarAudioSystem = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HARoot CarAudioSystem = ?X", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HARoot\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL) [++]\n      (''On'', CDMode_CTRL)) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal HAInitStateCarAudioSystem:\n  \"HAInitState CarAudioSystem = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAInitState CarAudioSystem = ?X", "by (simp add: HARootCarAudioSystem HAInitState_def CarAudioSystemInitState)"], ["", "(* -------------------------------------------------------------- *)\n(*      Components of the initial data space assignement          *)\n(* -------------------------------------------------------------- *)"], ["", "lemma check_DataSpace [simp]:\n  \"[range V0, range V1] \\<in> dataspace\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [range V0, range V1] \\<in> dataspace", "apply (unfold dataspace_def DataSpace.DataSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. [range V0, range V1]\n    \\<in> {L |L.\n           distinct L \\<and>\n           (\\<forall>D1\\<in>set L.\n               \\<forall>D2\\<in>set L.\n                  D1 \\<noteq> D2 \\<longrightarrow>\n                  D1 \\<inter> D2 = {}) \\<and>\n           \\<Union> (set L) = UNIV}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<notin> range V1 \\<Longrightarrow> x \\<in> range V0", "apply (rename_tac D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D. D \\<notin> range V1 \\<Longrightarrow> D \\<in> range V0", "apply (case_tac \"D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>D x1.\n       \\<lbrakk>D \\<notin> range V1; D = V0 x1\\<rbrakk>\n       \\<Longrightarrow> D \\<in> range V0\n 2. \\<And>D x2.\n       \\<lbrakk>D \\<notin> range V1; D = V1 x2\\<rbrakk>\n       \\<Longrightarrow> D \\<in> range V0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PartNum_DataSpace [simp]:\n  \"PartNum (DSpace) = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PartNum DSpace = 2", "apply (unfold PartNum_def DSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length \\<circ> Rep_dataspace) (Abs_dataspace [range V0, range V1]) = 2", "apply (simp add: Abs_dataspace_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PartDom_DataSpace_V0 [simp]:\n  \"(PartDom DSpace 0) = range V0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DSpace !D! 0 = range V0", "apply (unfold PartDom_def DSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_dataspace (Abs_dataspace [range V0, range V1]) ! 0 = range V0", "apply (simp add: Abs_dataspace_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PartDom_DataSpace_V1 [simp]:\n  \"(PartDom DSpace (Suc 0)) = range V1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DSpace !D! Suc 0 = range V1", "apply (unfold PartDom_def DSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_dataspace (Abs_dataspace [range V0, range V1]) ! Suc 0 = range V1", "apply (simp add: Abs_dataspace_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma check_InitialData [simp]:\n  \"([V0 0, V1 0],DSpace) \\<in> data\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([V0 0, V1 0], DSpace) \\<in> data", "apply (unfold data_def Data.Data_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([V0 0, V1 0], DSpace)\n    \\<in> {(L, D) |L D.\n           length L = PartNum D \\<and>\n           (\\<forall>i\\<in>{n. n < PartNum D}. L ! i \\<in> D !D! i)}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i < 2 \\<Longrightarrow> [V0 0, V1 0] ! i \\<in> DSpace !D! i", "apply (rename_tac d)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d. d < 2 \\<Longrightarrow> [V0 0, V1 0] ! d \\<in> DSpace !D! d", "apply (case_tac \"d=0 \\<or> d = 1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>d < 2; d = 0 \\<or> d = 1\\<rbrakk>\n       \\<Longrightarrow> [V0 0, V1 0] ! d \\<in> DSpace !D! d\n 2. \\<And>d.\n       \\<lbrakk>d < 2; \\<not> (d = 0 \\<or> d = 1)\\<rbrakk>\n       \\<Longrightarrow> [V0 0, V1 0] ! d \\<in> DSpace !D! d", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Select0_InitData [simp]:\n  \"Select0 (LiftInitData [V0 0, V1 0]) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Select0 (LiftInitData [V0 0, V1 0]) = 0", "apply (unfold LiftInitData_def Select0_def DataPart_def DataValue_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sel0 ((fst \\<circ> Rep_data) (Abs_data ([V0 0, V1 0], DSpace)) ! 0) = 0", "apply (simp add: Abs_data_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Select1_InitData [simp]:\n  \"Select1 (LiftInitData [V0 0, V1 0]) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Select1 (LiftInitData [V0 0, V1 0]) = 0", "apply (unfold LiftInitData_def Select1_def DataPart_def DataValue_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sel1 ((fst \\<circ> Rep_data) (Abs_data ([V0 0, V1 0], DSpace)) ! 1) = 0", "apply (simp add: Abs_data_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HAInitValue1_CarAudioSystem:\n  \"CarAudioSystem |=H= Atom (VAL (\\<lambda> d. (Select0 d) = 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CarAudioSystem |=H= Atom (VAL (\\<lambda>d. Select0 d = 0))", "apply (simp add: ValueCarAudioSystem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HAInitValue2_CarAudioSystem:\n  \"CarAudioSystem |=H= Atom (VAL (\\<lambda> d. (Select1 d) = 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CarAudioSystem |=H= Atom (VAL (\\<lambda>d. Select1 d = 0))", "apply (simp add: ValueCarAudioSystem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HAInitValue_DSpace_CarAudioSystem [simp]:\n  \"Data.DataSpace (LiftInitData [V0 0, V1 0]) = DSpace\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Data.DataSpace (LiftInitData [V0 0, V1 0]) = DSpace", "apply (unfold LiftInitData_def Data.DataSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> Rep_data) (Abs_data ([V0 0, V1 0], DSpace)) = DSpace", "apply (simp add: Abs_data_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma check_InitStatus [simp]:\n  \"(CarAudioSystem, InitConf CarAudioSystem, {},LiftInitData [V0 0, V1 0]) \\<in> status\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CarAudioSystem, InitConf CarAudioSystem, {}, LiftInitData [V0 0, V1 0])\n    \\<in> status", "apply (unfold status_def Status_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (CarAudioSystem, InitConf CarAudioSystem, {}, LiftInitData [V0 0, V1 0])\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           IsConfSet (SAs HA) (CompFun HA) C \\<and>\n           Data.DataSpace (HAInitValue HA) = Data.DataSpace D}", "apply (simp add: ValueCarAudioSystem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma InitData_InitStatus [simp]:\n  \"Value (InitStatus CarAudioSystem) = LiftInitData [V0 0, V1 0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Value (InitStatus CarAudioSystem) = LiftInitData [V0 0, V1 0]", "apply (simp add: ValueCarAudioSystem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Events_InitStatus [simp]:\n  \"Events (InitStatus CarAudioSystem) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Events (InitStatus CarAudioSystem) = {}", "apply (unfold InitStatus_def Events_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> snd \\<circ> Rep_status)\n     (Abs_status\n       (CarAudioSystem, InitConf CarAudioSystem, {},\n        HAInitValue CarAudioSystem)) =\n    {}", "apply (simp add: Abs_status_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Conf_InitStatus [simp]:\n  \"Conf (InitStatus CarAudioSystem) = InitConf CarAudioSystem\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conf (InitStatus CarAudioSystem) = InitConf CarAudioSystem", "apply (unfold InitStatus_def Conf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> Rep_status)\n     (Abs_status\n       (CarAudioSystem, InitConf CarAudioSystem, {},\n        HAInitValue CarAudioSystem)) =\n    InitConf CarAudioSystem", "apply (simp add: Abs_status_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CompFunCarAudioSystem_the:\n  \"the (CompFun CarAudioSystem ''On'') =  {CDMode_CTRL,TunerMode_CTRL}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (CompFun CarAudioSystem ''On'') = {CDMode_CTRL, TunerMode_CTRL}", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n           (''On'', TunerMode_CTRL) [++]\n           (''On'', CDMode_CTRL))\n          ''On'') =\n    {CDMode_CTRL, TunerMode_CTRL}", "apply (subst AddSA_CompFun_the)"], ["proof (prove)\ngoal (3 subgoals):\n 1. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 2. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 3. insert CDMode_CTRL\n     (the (CompFun\n            (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n             (''CarAudioSystem'', CDPlayer_CTRL) [++]\n             (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n             (''On'', TunerMode_CTRL))\n            ''On'')) =\n    {CDMode_CTRL, TunerMode_CTRL}", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. insert CDMode_CTRL\n     (the (CompFun\n            (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n             (''CarAudioSystem'', CDPlayer_CTRL) [++]\n             (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n             (''On'', TunerMode_CTRL))\n            ''On'')) =\n    {CDMode_CTRL, TunerMode_CTRL}\n 2. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 3. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "apply (subst AddSA_CompFun_the)"], ["proof (prove)\ngoal (5 subgoals):\n 1. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 2. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 3. insert CDMode_CTRL\n     (insert TunerMode_CTRL\n       (the (CompFun\n              (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n               (''CarAudioSystem'', CDPlayer_CTRL) [++]\n               (''CarAudioSystem'', AudioPlayer_CTRL))\n              ''On''))) =\n    {CDMode_CTRL, TunerMode_CTRL}\n 4. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "prefer 3"], ["proof (prove)\ngoal (5 subgoals):\n 1. insert CDMode_CTRL\n     (insert TunerMode_CTRL\n       (the (CompFun\n              (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n               (''CarAudioSystem'', CDPlayer_CTRL) [++]\n               (''CarAudioSystem'', AudioPlayer_CTRL))\n              ''On''))) =\n    {CDMode_CTRL, TunerMode_CTRL}\n 2. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 3. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 4. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "apply (subst AddSA_CompFun_the2)"], ["proof (prove)\ngoal (8 subgoals):\n 1. ''On'' \\<in> States AudioPlayer_CTRL\n 2. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 3. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 4. {CDMode_CTRL, TunerMode_CTRL} = {CDMode_CTRL, TunerMode_CTRL}\n 5. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 6. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 7. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 8. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CompFunCarAudioSystem_the2:\n  \"the (CompFun CarAudioSystem ''CarAudioSystem'') =  {AudioPlayer_CTRL, CDPlayer_CTRL}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (CompFun CarAudioSystem ''CarAudioSystem'') =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n           (''On'', TunerMode_CTRL) [++]\n           (''On'', CDMode_CTRL))\n          ''CarAudioSystem'') =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}", "apply (subst AddSA_CompFun_the3)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ''CarAudioSystem'' \\<notin> States CDMode_CTRL\n 2. ''On'' \\<noteq> ''CarAudioSystem''\n 3. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 4. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 5. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n           (''On'', TunerMode_CTRL))\n          ''CarAudioSystem'') =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}", "prefer 5"], ["proof (prove)\ngoal (5 subgoals):\n 1. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n           (''On'', TunerMode_CTRL))\n          ''CarAudioSystem'') =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}\n 2. ''CarAudioSystem'' \\<notin> States CDMode_CTRL\n 3. ''On'' \\<noteq> ''CarAudioSystem''\n 4. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "apply (subst AddSA_CompFun_the3)"], ["proof (prove)\ngoal (9 subgoals):\n 1. ''CarAudioSystem'' \\<notin> States TunerMode_CTRL\n 2. ''On'' \\<noteq> ''CarAudioSystem''\n 3. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 4. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 5. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL))\n          ''CarAudioSystem'') =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}\n 6. ''CarAudioSystem'' \\<notin> States CDMode_CTRL\n 7. ''On'' \\<noteq> ''CarAudioSystem''\n 8. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 9. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "prefer 5"], ["proof (prove)\ngoal (9 subgoals):\n 1. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL))\n          ''CarAudioSystem'') =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}\n 2. ''CarAudioSystem'' \\<notin> States TunerMode_CTRL\n 3. ''On'' \\<noteq> ''CarAudioSystem''\n 4. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 6. ''CarAudioSystem'' \\<notin> States CDMode_CTRL\n 7. ''On'' \\<noteq> ''CarAudioSystem''\n 8. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 9. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "apply (subst AddSA_CompFun_the)"], ["proof (prove)\ngoal (11 subgoals):\n 1. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 2. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 3. insert AudioPlayer_CTRL\n     (the (CompFun\n            (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n             (''CarAudioSystem'', CDPlayer_CTRL))\n            ''CarAudioSystem'')) =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}\n 4. ''CarAudioSystem'' \\<notin> States TunerMode_CTRL\n 5. ''On'' \\<noteq> ''CarAudioSystem''\n 6. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 7. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 8. ''CarAudioSystem'' \\<notin> States CDMode_CTRL\n 9. ''On'' \\<noteq> ''CarAudioSystem''\n 10. States CDMode_CTRL \\<inter>\n     HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL) [++]\n       (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n       (''On'', TunerMode_CTRL)) =\n     {}\nA total of 11 subgoals...", "prefer 3"], ["proof (prove)\ngoal (11 subgoals):\n 1. insert AudioPlayer_CTRL\n     (the (CompFun\n            (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n             (''CarAudioSystem'', CDPlayer_CTRL))\n            ''CarAudioSystem'')) =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}\n 2. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 3. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 4. ''CarAudioSystem'' \\<notin> States TunerMode_CTRL\n 5. ''On'' \\<noteq> ''CarAudioSystem''\n 6. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 7. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 8. ''CarAudioSystem'' \\<notin> States CDMode_CTRL\n 9. ''On'' \\<noteq> ''CarAudioSystem''\n 10. States CDMode_CTRL \\<inter>\n     HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL) [++]\n       (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n       (''On'', TunerMode_CTRL)) =\n     {}\nA total of 11 subgoals...", "apply (subst AddSA_CompFun_the)"], ["proof (prove)\ngoal (13 subgoals):\n 1. States CDPlayer_CTRL \\<inter>\n    HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])) =\n    {}\n 2. ''CarAudioSystem''\n    \\<in> HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]))\n 3. insert AudioPlayer_CTRL\n     (insert CDPlayer_CTRL\n       (the (CompFun (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]))\n              ''CarAudioSystem''))) =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}\n 4. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 5. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 6. ''CarAudioSystem'' \\<notin> States TunerMode_CTRL\n 7. ''On'' \\<noteq> ''CarAudioSystem''\n 8. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 9. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 10. ''CarAudioSystem'' \\<notin> States CDMode_CTRL\nA total of 13 subgoals...", "prefer 3"], ["proof (prove)\ngoal (13 subgoals):\n 1. insert AudioPlayer_CTRL\n     (insert CDPlayer_CTRL\n       (the (CompFun (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]))\n              ''CarAudioSystem''))) =\n    {AudioPlayer_CTRL, CDPlayer_CTRL}\n 2. States CDPlayer_CTRL \\<inter>\n    HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])) =\n    {}\n 3. ''CarAudioSystem''\n    \\<in> HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]))\n 4. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 5. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 6. ''CarAudioSystem'' \\<notin> States TunerMode_CTRL\n 7. ''On'' \\<noteq> ''CarAudioSystem''\n 8. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 9. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 10. ''CarAudioSystem'' \\<notin> States CDMode_CTRL\nA total of 13 subgoals...", "apply (subst PseudoHA_CompFun_the)"], ["proof (prove)\ngoal (14 subgoals):\n 1. ''CarAudioSystem'' \\<in> States Root_CTRL\n 2. {AudioPlayer_CTRL, CDPlayer_CTRL} = {AudioPlayer_CTRL, CDPlayer_CTRL}\n 3. States CDPlayer_CTRL \\<inter>\n    HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])) =\n    {}\n 4. ''CarAudioSystem''\n    \\<in> HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]))\n 5. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 6. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 7. ''CarAudioSystem'' \\<notin> States TunerMode_CTRL\n 8. ''On'' \\<noteq> ''CarAudioSystem''\n 9. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 10. ''On''\n     \\<in> HAStates\n            (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n             (''CarAudioSystem'', CDPlayer_CTRL) [++]\n             (''CarAudioSystem'', AudioPlayer_CTRL))\nA total of 14 subgoals...", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CompFunCarAudioSystem_the3:\n  \"the (CompFun CarAudioSystem ''Off'') =  {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (CompFun CarAudioSystem ''Off'') = {}", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n           (''On'', TunerMode_CTRL) [++]\n           (''On'', CDMode_CTRL))\n          ''Off'') =\n    {}", "apply (subst AddSA_CompFun_the3)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ''Off'' \\<notin> States CDMode_CTRL\n 2. ''On'' \\<noteq> ''Off''\n 3. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 4. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 5. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n           (''On'', TunerMode_CTRL))\n          ''Off'') =\n    {}", "prefer 5"], ["proof (prove)\ngoal (5 subgoals):\n 1. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n           (''On'', TunerMode_CTRL))\n          ''Off'') =\n    {}\n 2. ''Off'' \\<notin> States CDMode_CTRL\n 3. ''On'' \\<noteq> ''Off''\n 4. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "apply (subst AddSA_CompFun_the3)"], ["proof (prove)\ngoal (9 subgoals):\n 1. ''Off'' \\<notin> States TunerMode_CTRL\n 2. ''On'' \\<noteq> ''Off''\n 3. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 4. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 5. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL))\n          ''Off'') =\n    {}\n 6. ''Off'' \\<notin> States CDMode_CTRL\n 7. ''On'' \\<noteq> ''Off''\n 8. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 9. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "prefer 5"], ["proof (prove)\ngoal (9 subgoals):\n 1. the (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL))\n          ''Off'') =\n    {}\n 2. ''Off'' \\<notin> States TunerMode_CTRL\n 3. ''On'' \\<noteq> ''Off''\n 4. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 6. ''Off'' \\<notin> States CDMode_CTRL\n 7. ''On'' \\<noteq> ''Off''\n 8. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 9. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))", "apply (subst AddSA_CompFun_the2)"], ["proof (prove)\ngoal (12 subgoals):\n 1. ''Off'' \\<in> States AudioPlayer_CTRL\n 2. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 3. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 4. {} = {}\n 5. ''Off'' \\<notin> States TunerMode_CTRL\n 6. ''On'' \\<noteq> ''Off''\n 7. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 8. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 9. ''Off'' \\<notin> States CDMode_CTRL\n 10. ''On'' \\<noteq> ''Off''\nA total of 12 subgoals...", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal CompFunCarAudioSystem_ran:\n  \"ran (CompFun CarAudioSystem) = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (CompFun CarAudioSystem) = ?X", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (CompFun\n          (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n           (''CarAudioSystem'', CDPlayer_CTRL) [++]\n           (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n           (''On'', TunerMode_CTRL) [++]\n           (''On'', CDMode_CTRL))) =\n    ?X", "apply (rule AddSA_CompFun_ran3_IFF)"], ["proof (prove)\ngoal (6 subgoals):\n 1. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 2. States TunerMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL) =\n    {}\n 3. States CDMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL \\<union>\n     States TunerMode_CTRL) =\n    {}\n 4. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 5. ''On'' \\<in> States AudioPlayer_CTRL\n 6. insert {}\n     (insert {CDMode_CTRL, TunerMode_CTRL}\n       (ran (CompFun\n              (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n               (''CarAudioSystem'', CDPlayer_CTRL) [++]\n               (''CarAudioSystem'', AudioPlayer_CTRL))))) =\n    ?X", "prefer 6"], ["proof (prove)\ngoal (6 subgoals):\n 1. insert {}\n     (insert {CDMode_CTRL, TunerMode_CTRL}\n       (ran (CompFun\n              (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n               (''CarAudioSystem'', CDPlayer_CTRL) [++]\n               (''CarAudioSystem'', AudioPlayer_CTRL))))) =\n    ?X\n 2. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 3. States TunerMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL) =\n    {}\n 4. States CDMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL \\<union>\n     States TunerMode_CTRL) =\n    {}\n 5. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 6. ''On'' \\<in> States AudioPlayer_CTRL", "apply (subst AddSA_CompFun_PseudoHA_ran2)"], ["proof (prove)\ngoal (9 subgoals):\n 1. States CDPlayer_CTRL \\<inter> States Root_CTRL = {}\n 2. States AudioPlayer_CTRL \\<inter>\n    (States Root_CTRL \\<union> States CDPlayer_CTRL) =\n    {}\n 3. ''CarAudioSystem'' \\<in> States Root_CTRL\n 4. {{}, {CDMode_CTRL, TunerMode_CTRL}, {},\n     {AudioPlayer_CTRL, CDPlayer_CTRL}} =\n    ?X\n 5. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 6. States TunerMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL) =\n    {}\n 7. States CDMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL \\<union>\n     States TunerMode_CTRL) =\n    {}\n 8. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 9. ''On'' \\<in> States AudioPlayer_CTRL", "prefer 4"], ["proof (prove)\ngoal (9 subgoals):\n 1. {{}, {CDMode_CTRL, TunerMode_CTRL}, {},\n     {AudioPlayer_CTRL, CDPlayer_CTRL}} =\n    ?X\n 2. States CDPlayer_CTRL \\<inter> States Root_CTRL = {}\n 3. States AudioPlayer_CTRL \\<inter>\n    (States Root_CTRL \\<union> States CDPlayer_CTRL) =\n    {}\n 4. ''CarAudioSystem'' \\<in> States Root_CTRL\n 5. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 6. States TunerMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL) =\n    {}\n 7. States CDMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL \\<union>\n     States TunerMode_CTRL) =\n    {}\n 8. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 9. ''On'' \\<in> States AudioPlayer_CTRL", "apply (simp add: insert_commute)"], ["proof (prove)\ngoal (8 subgoals):\n 1. States CDPlayer_CTRL \\<inter> States Root_CTRL = {}\n 2. States AudioPlayer_CTRL \\<inter>\n    (States Root_CTRL \\<union> States CDPlayer_CTRL) =\n    {}\n 3. ''CarAudioSystem'' \\<in> States Root_CTRL\n 4. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 5. States TunerMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL) =\n    {}\n 6. States CDMode_CTRL \\<inter>\n    (HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL)) \\<union>\n     States AudioPlayer_CTRL \\<union>\n     States TunerMode_CTRL) =\n    {}\n 7. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 8. ''On'' \\<in> States AudioPlayer_CTRL", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Root_CTRL_CDPlayer_CTRL_noteq [simp]:\n  \"Root_CTRL \\<noteq> CDPlayer_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Root_CTRL \\<noteq> CDPlayer_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States CDPlayer_CTRL \\<inter> States Root_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Root_CTRL_AudioPlayer_CTRL_noteq [simp]:\n  \"Root_CTRL \\<noteq> AudioPlayer_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Root_CTRL \\<noteq> AudioPlayer_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States AudioPlayer_CTRL \\<inter> States Root_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Root_CTRL_TunerMode_CTRL_noteq [simp]:\n  \"Root_CTRL \\<noteq> TunerMode_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Root_CTRL \\<noteq> TunerMode_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States TunerMode_CTRL \\<inter> States Root_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Root_CTRL_CDMode_CTRL_noteq [simp]:\n  \"Root_CTRL \\<noteq> CDMode_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Root_CTRL \\<noteq> CDMode_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States CDMode_CTRL \\<inter> States Root_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CDPlayer_CTRL_AudioPlayer_CTRL_noteq [simp]:\n  \"CDPlayer_CTRL \\<noteq> AudioPlayer_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CDPlayer_CTRL \\<noteq> AudioPlayer_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States AudioPlayer_CTRL \\<inter> States CDPlayer_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CDPlayer_CTRL_TunerMode_CTRL_noteq [simp]:\n  \"CDPlayer_CTRL \\<noteq> TunerMode_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CDPlayer_CTRL \\<noteq> TunerMode_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States TunerMode_CTRL \\<inter> States CDPlayer_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CDPlayer_CTRL_CDMode_CTRL_noteq [simp]:\n  \"CDPlayer_CTRL \\<noteq> CDMode_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CDPlayer_CTRL \\<noteq> CDMode_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States CDMode_CTRL \\<inter> States CDPlayer_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AudioPlayer_CTRL_TunerMode_CTRL_noteq [simp]:\n  \"AudioPlayer_CTRL \\<noteq>  TunerMode_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AudioPlayer_CTRL \\<noteq> TunerMode_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States TunerMode_CTRL \\<inter> States AudioPlayer_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AudioPlayer_CTRL_CDMode_CTRL_noteq [simp]:\n  \"AudioPlayer_CTRL \\<noteq> CDMode_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AudioPlayer_CTRL \\<noteq> CDMode_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States CDMode_CTRL \\<inter> States AudioPlayer_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TunerMode_CTRL_CDMode_CTRL_noteq [simp]:\n  \"TunerMode_CTRL \\<noteq>  CDMode_CTRL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TunerMode_CTRL \\<noteq> CDMode_CTRL", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. States CDMode_CTRL \\<inter> States TunerMode_CTRL = {}", "apply (wellformed CarAudioSystemthms_5)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal Chi_CarAudioSystem:\n  \"Chi CarAudioSystem ''CarAudioSystem'' = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chi CarAudioSystem ''CarAudioSystem'' = ?X", "apply (unfold Chi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>S\\<in>HAStates CarAudioSystem.\n        {S'.\n         \\<exists>SA\\<in>SAs CarAudioSystem.\n            SA \\<in> the (CompFun CarAudioSystem S) \\<and>\n            S' \\<in> States SA})\n     ''CarAudioSystem'' =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<lambda>S\\<in>HAStates CarAudioSystem.\n        {S'.\n         \\<exists>SA\\<in>SAs CarAudioSystem.\n            SA \\<in> the (CompFun CarAudioSystem S) \\<and>\n            S' \\<in> States SA})\n     ''CarAudioSystem'' =\n    ?s4\n 2. ?s4 = ?X", "apply (simp add: SAsCarAudioSystem StatesCarAudioSystem restrict_def CompFunCarAudioSystem_the2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {S'.\n     (CDMode_CTRL = AudioPlayer_CTRL \\<or>\n      CDMode_CTRL = CDPlayer_CTRL) \\<and>\n     S' \\<in> States CDMode_CTRL \\<or>\n     (TunerMode_CTRL = AudioPlayer_CTRL \\<or>\n      TunerMode_CTRL = CDPlayer_CTRL) \\<and>\n     S' \\<in> States TunerMode_CTRL \\<or>\n     S' \\<in> States AudioPlayer_CTRL \\<or> S' \\<in> States CDPlayer_CTRL} =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {S'.\n     (CDMode_CTRL = AudioPlayer_CTRL \\<or>\n      CDMode_CTRL = CDPlayer_CTRL) \\<and>\n     S' \\<in> States CDMode_CTRL \\<or>\n     (TunerMode_CTRL = AudioPlayer_CTRL \\<or>\n      TunerMode_CTRL = CDPlayer_CTRL) \\<and>\n     S' \\<in> States TunerMode_CTRL \\<or>\n     S' \\<in> States AudioPlayer_CTRL \\<or> S' \\<in> States CDPlayer_CTRL} =\n    ?s29\n 2. ?s29 = ?X", "apply (simp add: not_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {S'.\n     S' \\<in> States AudioPlayer_CTRL \\<or> S' \\<in> States CDPlayer_CTRL} =\n    ?X", "apply (simp add: CarAudioSystemStates insert_or)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal Chi_CarAudioSystem_On:\n  \"Chi CarAudioSystem ''On'' = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chi CarAudioSystem ''On'' = ?X", "apply (unfold Chi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>S\\<in>HAStates CarAudioSystem.\n        {S'.\n         \\<exists>SA\\<in>SAs CarAudioSystem.\n            SA \\<in> the (CompFun CarAudioSystem S) \\<and>\n            S' \\<in> States SA})\n     ''On'' =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<lambda>S\\<in>HAStates CarAudioSystem.\n        {S'.\n         \\<exists>SA\\<in>SAs CarAudioSystem.\n            SA \\<in> the (CompFun CarAudioSystem S) \\<and>\n            S' \\<in> States SA})\n     ''On'' =\n    ?s4\n 2. ?s4 = ?X", "apply (simp add: SAsCarAudioSystem StatesCarAudioSystem restrict_def CompFunCarAudioSystem_the)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {S'. S' \\<in> States CDMode_CTRL \\<or> S' \\<in> States TunerMode_CTRL} =\n    ?X", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {S'. S' \\<in> States CDMode_CTRL \\<or> S' \\<in> States TunerMode_CTRL} =\n    ?s29\n 2. ?s29 = ?X", "apply (simp add: not_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {S'. S' \\<in> States CDMode_CTRL \\<or> S' \\<in> States TunerMode_CTRL} =\n    ?X", "apply (simp add: CarAudioSystemStates insert_or)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal Chi_CarAudioSystem_Off:\n  \"Chi CarAudioSystem ''Off'' = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chi CarAudioSystem ''Off'' = ?X", "apply (unfold Chi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>S\\<in>HAStates CarAudioSystem.\n        {S'.\n         \\<exists>SA\\<in>SAs CarAudioSystem.\n            SA \\<in> the (CompFun CarAudioSystem S) \\<and>\n            S' \\<in> States SA})\n     ''Off'' =\n    ?X", "apply (simp add: SAsCarAudioSystem StatesCarAudioSystem restrict_def CompFunCarAudioSystem_the3)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "schematic_goal InitConf_CarAudioSystem:\n  \"InitConf CarAudioSystem = ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitConf CarAudioSystem = ?X", "apply (unfold CarAudioSystem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. InitConf\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL) [++]\n      (''On'', CDMode_CTRL)) =\n    ?X", "apply (rule AddSA_InitConf_IFF)+"], ["proof (prove)\ngoal (13 subgoals):\n 1. InitConf (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])) = ?Y19\n 2. States CDPlayer_CTRL \\<inter>\n    HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])) =\n    {}\n 3. ''CarAudioSystem''\n    \\<in> HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]))\n 4. (if ''CarAudioSystem'' \\<in> ?Y19\n     then insert (InitState CDPlayer_CTRL) ?Y19 else ?Y19) =\n    ?Y14\n 5. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 6. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 7. (if ''CarAudioSystem'' \\<in> ?Y14\n     then insert (InitState AudioPlayer_CTRL) ?Y14 else ?Y14) =\n    ?Y9\n 8. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 9. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 10. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n      else ?Y9) =\n     ?Y4\nA total of 13 subgoals...", "apply simp"], ["proof (prove)\ngoal (12 subgoals):\n 1. States CDPlayer_CTRL \\<inter>\n    HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0])) =\n    {}\n 2. ''CarAudioSystem''\n    \\<in> HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]))\n 3. (if ''CarAudioSystem'' \\<in> {InitState Root_CTRL}\n     then {InitState CDPlayer_CTRL, InitState Root_CTRL}\n     else {InitState Root_CTRL}) =\n    ?Y14\n 4. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 5. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 6. (if ''CarAudioSystem'' \\<in> ?Y14\n     then insert (InitState AudioPlayer_CTRL) ?Y14 else ?Y14) =\n    ?Y9\n 7. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 8. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 9. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 10. States CDMode_CTRL \\<inter>\n     HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL) [++]\n       (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n       (''On'', TunerMode_CTRL)) =\n     {}\nA total of 12 subgoals...", "apply (wellformed CarAudioSystemthms_5)"], ["proof (prove)\ngoal (12 subgoals):\n 1. {''ReadTracks'', ''CDFull'', ''CDEmpty''} \\<inter>\n    {''CarAudioSystem''} =\n    {}\n 2. ''CarAudioSystem''\n    \\<in> HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]))\n 3. (if ''CarAudioSystem'' \\<in> {InitState Root_CTRL}\n     then {InitState CDPlayer_CTRL, InitState Root_CTRL}\n     else {InitState Root_CTRL}) =\n    ?Y14\n 4. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 5. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 6. (if ''CarAudioSystem'' \\<in> ?Y14\n     then insert (InitState AudioPlayer_CTRL) ?Y14 else ?Y14) =\n    ?Y9\n 7. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 8. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 9. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 10. States CDMode_CTRL \\<inter>\n     HAStates\n      (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n       (''CarAudioSystem'', CDPlayer_CTRL) [++]\n       (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n       (''On'', TunerMode_CTRL)) =\n     {}\nA total of 12 subgoals...", "apply fast"], ["proof (prove)\ngoal (11 subgoals):\n 1. ''CarAudioSystem''\n    \\<in> HAStates (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]))\n 2. (if ''CarAudioSystem'' \\<in> {InitState Root_CTRL}\n     then {InitState CDPlayer_CTRL, InitState Root_CTRL}\n     else {InitState Root_CTRL}) =\n    ?Y14\n 3. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 4. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 5. (if ''CarAudioSystem'' \\<in> ?Y14\n     then insert (InitState AudioPlayer_CTRL) ?Y14 else ?Y14) =\n    ?Y9\n 6. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 7. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 8. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 9. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 10. ''On''\n     \\<in> HAStates\n            (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n             (''CarAudioSystem'', CDPlayer_CTRL) [++]\n             (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n             (''On'', TunerMode_CTRL))\nA total of 11 subgoals...", "apply (wellformed CarAudioSystemthms_5)"], ["proof (prove)\ngoal (11 subgoals):\n 1. ''CarAudioSystem'' \\<in> {''CarAudioSystem''}\n 2. (if ''CarAudioSystem'' \\<in> {InitState Root_CTRL}\n     then {InitState CDPlayer_CTRL, InitState Root_CTRL}\n     else {InitState Root_CTRL}) =\n    ?Y14\n 3. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 4. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 5. (if ''CarAudioSystem'' \\<in> ?Y14\n     then insert (InitState AudioPlayer_CTRL) ?Y14 else ?Y14) =\n    ?Y9\n 6. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 7. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 8. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 9. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 10. ''On''\n     \\<in> HAStates\n            (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n             (''CarAudioSystem'', CDPlayer_CTRL) [++]\n             (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n             (''On'', TunerMode_CTRL))\nA total of 11 subgoals...", "apply simp"], ["proof (prove)\ngoal (10 subgoals):\n 1. (if ''CarAudioSystem'' \\<in> {InitState Root_CTRL}\n     then {InitState CDPlayer_CTRL, InitState Root_CTRL}\n     else {InitState Root_CTRL}) =\n    ?Y14\n 2. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 3. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 4. (if ''CarAudioSystem'' \\<in> ?Y14\n     then insert (InitState AudioPlayer_CTRL) ?Y14 else ?Y14) =\n    ?Y9\n 5. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 6. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 7. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 8. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 9. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 10. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4\n      else ?Y4) =\n     ?X", "apply (simp add: CarAudioSystemthms_5)"], ["proof (prove)\ngoal (9 subgoals):\n 1. States AudioPlayer_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL)) =\n    {}\n 2. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 3. (if ''CarAudioSystem'' \\<in> {''CDEmpty'', ''CarAudioSystem''}\n     then {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     else {''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y9\n 4. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 6. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 7. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 8. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 9. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)"], ["proof (prove)\ngoal (9 subgoals):\n 1. {''Off'', ''On''} \\<inter>\n    {''CDEmpty'', ''CDFull'', ''ReadTracks'', ''CarAudioSystem''} =\n    {}\n 2. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 3. (if ''CarAudioSystem'' \\<in> {''CDEmpty'', ''CarAudioSystem''}\n     then {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     else {''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y9\n 4. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 6. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 7. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 8. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 9. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply fast"], ["proof (prove)\ngoal (8 subgoals):\n 1. ''CarAudioSystem''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL))\n 2. (if ''CarAudioSystem'' \\<in> {''CDEmpty'', ''CarAudioSystem''}\n     then {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     else {''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y9\n 3. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 4. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 5. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 6. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 7. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 8. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)"], ["proof (prove)\ngoal (8 subgoals):\n 1. ''CarAudioSystem''\n    \\<in> {''CDEmpty'', ''CDFull'', ''ReadTracks'', ''CarAudioSystem''}\n 2. (if ''CarAudioSystem'' \\<in> {''CDEmpty'', ''CarAudioSystem''}\n     then {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     else {''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y9\n 3. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 4. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 5. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 6. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 7. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 8. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply fast"], ["proof (prove)\ngoal (7 subgoals):\n 1. (if ''CarAudioSystem'' \\<in> {''CDEmpty'', ''CarAudioSystem''}\n     then {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     else {''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y9\n 2. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 3. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 4. (if ''On'' \\<in> ?Y9 then insert (InitState TunerMode_CTRL) ?Y9\n     else ?Y9) =\n    ?Y4\n 5. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 6. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 7. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. States TunerMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL)) =\n    {}\n 2. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 3. (if ''On''\n        \\<in> {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n           ''CDEmpty'', ''CarAudioSystem''}\n     else {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y4\n 4. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 6. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)"], ["proof (prove)\ngoal (6 subgoals):\n 1. {''1'', ''2'', ''3'', ''4''} \\<inter>\n    {''On'', ''Off'', ''CDEmpty'', ''CDFull'', ''ReadTracks'',\n     ''CarAudioSystem''} =\n    {}\n 2. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 3. (if ''On''\n        \\<in> {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n           ''CDEmpty'', ''CarAudioSystem''}\n     else {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y4\n 4. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 5. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 6. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply fast"], ["proof (prove)\ngoal (5 subgoals):\n 1. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL))\n 2. (if ''On''\n        \\<in> {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n           ''CDEmpty'', ''CarAudioSystem''}\n     else {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y4\n 3. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 4. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 5. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ''On''\n    \\<in> {''On'', ''Off'', ''CDEmpty'', ''CDFull'', ''ReadTracks'',\n           ''CarAudioSystem''}\n 2. (if ''On''\n        \\<in> {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n           ''CDEmpty'', ''CarAudioSystem''}\n     else {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y4\n 3. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 4. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 5. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. (if ''On''\n        \\<in> {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}\n     then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n           ''CDEmpty'', ''CarAudioSystem''}\n     else {InitState AudioPlayer_CTRL, ''CDEmpty'', ''CarAudioSystem''}) =\n    ?Y4\n 2. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 3. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 4. (if ''On'' \\<in> ?Y4 then insert (InitState CDMode_CTRL) ?Y4 else ?Y4) =\n    ?X", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. States CDMode_CTRL \\<inter>\n    HAStates\n     (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n      (''CarAudioSystem'', CDPlayer_CTRL) [++]\n      (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n      (''On'', TunerMode_CTRL)) =\n    {}\n 2. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 3. (if ''On''\n        \\<in> (if ''On'' = InitState AudioPlayer_CTRL\n               then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                     ''CDEmpty'', ''CarAudioSystem''}\n               else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                     ''CarAudioSystem''})\n     then insert (InitState CDMode_CTRL)\n           (if ''On'' = InitState AudioPlayer_CTRL\n            then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                  ''CDEmpty'', ''CarAudioSystem''}\n            else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                  ''CarAudioSystem''})\n     else if ''On'' = InitState AudioPlayer_CTRL\n          then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                ''CDEmpty'', ''CarAudioSystem''}\n          else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                ''CarAudioSystem''}) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)"], ["proof (prove)\ngoal (3 subgoals):\n 1. {''Playing'', ''SelectingNextTrack'',\n     ''SelectingPreviousTrack''} \\<inter>\n    {''4'', ''3'', ''2'', ''1'', ''On'', ''Off'', ''CDEmpty'', ''CDFull'',\n     ''ReadTracks'', ''CarAudioSystem''} =\n    {}\n 2. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 3. (if ''On''\n        \\<in> (if ''On'' = InitState AudioPlayer_CTRL\n               then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                     ''CDEmpty'', ''CarAudioSystem''}\n               else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                     ''CarAudioSystem''})\n     then insert (InitState CDMode_CTRL)\n           (if ''On'' = InitState AudioPlayer_CTRL\n            then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                  ''CDEmpty'', ''CarAudioSystem''}\n            else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                  ''CarAudioSystem''})\n     else if ''On'' = InitState AudioPlayer_CTRL\n          then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                ''CDEmpty'', ''CarAudioSystem''}\n          else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                ''CarAudioSystem''}) =\n    ?X", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. ''On''\n    \\<in> HAStates\n           (PseudoHA Root_CTRL (LiftInitData [V0 0, V1 0]) [++]\n            (''CarAudioSystem'', CDPlayer_CTRL) [++]\n            (''CarAudioSystem'', AudioPlayer_CTRL) [++]\n            (''On'', TunerMode_CTRL))\n 2. (if ''On''\n        \\<in> (if ''On'' = InitState AudioPlayer_CTRL\n               then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                     ''CDEmpty'', ''CarAudioSystem''}\n               else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                     ''CarAudioSystem''})\n     then insert (InitState CDMode_CTRL)\n           (if ''On'' = InitState AudioPlayer_CTRL\n            then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                  ''CDEmpty'', ''CarAudioSystem''}\n            else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                  ''CarAudioSystem''})\n     else if ''On'' = InitState AudioPlayer_CTRL\n          then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                ''CDEmpty'', ''CarAudioSystem''}\n          else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                ''CarAudioSystem''}) =\n    ?X", "apply (wellformed CarAudioSystemthms_5)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ''On''\n    \\<in> {''4'', ''3'', ''2'', ''1'', ''On'', ''Off'', ''CDEmpty'',\n           ''CDFull'', ''ReadTracks'', ''CarAudioSystem''}\n 2. (if ''On''\n        \\<in> (if ''On'' = InitState AudioPlayer_CTRL\n               then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                     ''CDEmpty'', ''CarAudioSystem''}\n               else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                     ''CarAudioSystem''})\n     then insert (InitState CDMode_CTRL)\n           (if ''On'' = InitState AudioPlayer_CTRL\n            then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                  ''CDEmpty'', ''CarAudioSystem''}\n            else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                  ''CarAudioSystem''})\n     else if ''On'' = InitState AudioPlayer_CTRL\n          then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                ''CDEmpty'', ''CarAudioSystem''}\n          else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                ''CarAudioSystem''}) =\n    ?X", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if ''On''\n        \\<in> (if ''On'' = InitState AudioPlayer_CTRL\n               then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                     ''CDEmpty'', ''CarAudioSystem''}\n               else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                     ''CarAudioSystem''})\n     then insert (InitState CDMode_CTRL)\n           (if ''On'' = InitState AudioPlayer_CTRL\n            then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                  ''CDEmpty'', ''CarAudioSystem''}\n            else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                  ''CarAudioSystem''})\n     else if ''On'' = InitState AudioPlayer_CTRL\n          then {InitState TunerMode_CTRL, InitState AudioPlayer_CTRL,\n                ''CDEmpty'', ''CarAudioSystem''}\n          else {InitState AudioPlayer_CTRL, ''CDEmpty'',\n                ''CarAudioSystem''}) =\n    ?X", "apply (simp add: CarAudioSystemthms_5)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Initial_State_CarAudioSystem:\n  \"CarAudioSystem |=H= Atom (IN ''Off'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CarAudioSystem |=H= Atom (IN ''Off'')", "apply (simp add: InitConf_CarAudioSystem )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}