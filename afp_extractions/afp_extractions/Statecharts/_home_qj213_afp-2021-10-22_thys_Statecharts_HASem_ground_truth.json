{"file_name": "/home/qj213/afp-2021-10-22/thys/Statecharts/HASem.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Statecharts", "problem_names": ["lemma Status_EmptySet:\n \"(Abs_hierauto ((@ x . True),\n    {Abs_seqauto ({ @ x . True}, (@ x . True), {}, {})}, {}, Map.empty(@ x . True \\<mapsto> {})), \n  {@x. True},{}, @x. True) \\<in> \n  {(HA,C,E,D) | HA C E D. Status HA C E D}\"", "lemma Rep_status_tuple: \n \"Rep_status ST = (HA ST, Conf ST, Events ST, Value ST)\"", "lemma Rep_status_select:\n \"(HA ST, Conf ST, Events ST, Value ST) \\<in> status\"", "lemma Status_select [simp]:\n  \"Status (HA ST) (Conf ST) (Events ST) (Value ST)\"", "lemma IsConfSet_Status [simp]: \n \"IsConfSet (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\"", "lemma IsConfSet_InitConf [simp]:\n  \"IsConfSet (SAs A) (CompFun A) (InitConf A)\"", "lemma InitConf_status [simp]:\n  \"(A, InitConf A, {}, HAInitValue A) \\<in>  status\"", "lemma Conf_InitStatus_InitConf [simp]:\n \"Conf (InitStatus A) = InitConf A\"", "lemma HAInitValue_Value_DataSpace_Status [simp]:\n  \"Data.DataSpace (HAInitValue (HA ST)) = Data.DataSpace (Value ST)\"", "lemma Value_InitStatus_HAInitValue [simp]:\n \"Value (InitStatus A) = HAInitValue A\"", "lemma HA_InitStatus [simp]:\n \"HA (InitStatus A) = A\"", "lemma Events_HAEvents_Status: \n  \"(Events ST) \\<subseteq> HAEvents (HA ST)\"", "lemma TS_EventSet:\n    \"TS \\<subseteq>  ET ST \\<Longrightarrow> \\<Union> (Actevent (Label TS)) \\<subseteq> HAEvents (HA ST)\"", "lemma StepStatus_empty:\n   \"Abs_status (HA ST, Conf ST, {}, U !!! (Value ST)) = StepStatus ST {} U\"", "lemma status_empty_eventset [simp]:\n      \"(HA ST, Conf ST, {}, U !!! (Value ST)) \\<in> status\"", "lemma HA_StepStatus_emptyTS [simp]:\n  \"HA (StepStatus ST {} U) = HA ST\"", "lemma HPT_ETI: \n    \"TS \\<in> HPT ST \\<Longrightarrow> TS \\<subseteq> ET ST\"", "lemma finite_ET [simp]:\n \"finite (ET ST)\"", "lemma finite_MaxNonConflict [simp]:\n \"MaxNonConflict ST TS \\<Longrightarrow> finite TS\"", "lemma finite_HPT [simp]:\n  \"TS \\<in> HPT ST \\<Longrightarrow> finite TS\"", "lemma finite_Update:\n \"finite TS \\<Longrightarrow> finite ((\\<lambda> F. (Rep_pupdate F) (Value ST)) ` (PUpdate (Label TS)))\"", "lemma finite_PUpdate:\n \"TS \\<in> HPT S \\<Longrightarrow> finite (Expr.PUpdate (Label TS))\"", "lemma HPT_ResolveRacing_Some [simp]:\n  \"TS \\<in> HPT S \\<Longrightarrow> (SOME u. u \\<in> ResolveRacing TS) \\<in> ResolveRacing TS\"", "lemma finite_HPT2 [simp]:\n  \"finite (HPT ST)\"", "lemma HPT_target_StepConf [simp]: \n  \"\\<lbrakk> TS \\<in> HPT ST; T \\<in> TS \\<rbrakk> \\<Longrightarrow> target T \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma HPT_target_StepConf2 [simp]: \n  \"\\<lbrakk> TS \\<in> HPT ST; (S,L,T) \\<in> TS \\<rbrakk> \\<Longrightarrow> T \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma ET_Delta: \n  \"\\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> t \\<in> Delta A\"", "lemma ET_Delta_target: \n  \"\\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> t \\<in> Delta A\"", "lemma ET_HADelta:\n   \" \\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS \\<rbrakk> \\<Longrightarrow> t \\<in> HADelta (HA ST)\"", "lemma HPT_HADelta:\n   \" \\<lbrakk> TS \\<in> HPT ST; t \\<in> TS \\<rbrakk> \\<Longrightarrow> t \\<in> HADelta (HA ST)\"", "lemma HPT_Delta: \n  \"\\<lbrakk> TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> t \\<in> Delta A\"", "lemma HPT_Delta_target: \n  \"\\<lbrakk> TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> t \\<in> Delta A\"", "lemma OneTrans_HPT_SA:\n  \"\\<lbrakk> TS \\<in> HPT ST; T \\<in> TS; source T \\<in> States SA;\n     U \\<in> TS; source U \\<in> States SA; SA \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> T = U\"", "lemma OneTrans_HPT_SA2:\n  \"\\<lbrakk> TS \\<in> HPT ST; T \\<in> TS; target T \\<in> States SA;\n     U \\<in> TS; target U \\<in> States SA; SA \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> T = U\"", "lemma ET_Target_HAStates:\n    \"TS \\<subseteq> ET ST \\<Longrightarrow> Target TS \\<subseteq> HAStates (HA ST)\"", "lemma HPT_Target_HAStates:\n \"TS \\<in> HPT ST \\<Longrightarrow> Target TS \\<subseteq> HAStates (HA ST)\"", "lemma HPT_Target_HAStates2 [simp]:\n  \"\\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS\\<rbrakk> \\<Longrightarrow> S \\<in> HAStates (HA ST)\"", "lemma OneState_HPT_Target:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Target TS; \n     T \\<in> Target TS; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST) \\<rbrakk>\n   \\<Longrightarrow> S = T\"", "lemma ET_Source_Conf:\n  \"TS \\<subseteq> ET ST \\<Longrightarrow> (Source TS) \\<subseteq> Conf ST\"", "lemma HPT_Source_Conf [simp]:\n  \"TS \\<in> HPT ST \\<Longrightarrow> (Source TS) \\<subseteq> Conf ST\"", "lemma ET_Source_Target [simp]:\n  \"\\<lbrakk> SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST; States SA \\<inter> Source TS = {} \\<rbrakk> \\<Longrightarrow> States SA \\<inter> Target TS = {}\"", "lemma HPT_Source_Target [simp]:\n  \"\\<lbrakk> TS \\<in> HPT ST; States SA \\<inter> Source TS = {}; SA \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> States SA \\<inter> Target TS = {}\"", "lemma ET_target_source:\n  \"\\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> source t \\<in> States A\"", "lemma ET_source_target:\n  \"\\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> target t \\<in> States A\"", "lemma HPT_target_source:\n  \"\\<lbrakk> TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> source t \\<in> States A\"", "lemma HPT_source_target:\n  \"\\<lbrakk> TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> target t \\<in> States A\"", "lemma HPT_source_target2 [simp]:\n  \"\\<lbrakk> TS \\<in>HPT ST; (s,l,t) \\<in> TS; s \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow>  t \\<in>States A\"", "lemma ChiRel_ChiStar_Source_notmem:\n   \"\\<lbrakk> TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST); S \\<in> Conf ST; \n      T \\<notin> ChiStar (HA ST) `` Source TS \\<rbrakk> \\<Longrightarrow> \n      S \\<notin> ChiStar (HA ST) `` Source TS\"", "lemma ChiRel_ChiStar_notmem:\n  \"\\<lbrakk> TS \\<in> HPT ST; (S,T) \\<in> ChiRel (HA ST); \n     S \\<in> ChiStar (HA ST) `` Source TS \\<rbrakk> \\<Longrightarrow> T \\<notin> Source TS\"", "lemma StepActEvent_empty [simp]:\n  \"StepActEvent {} = {}\"", "lemma StepActEvent_HAEvents:\n \"TS \\<in> HPT ST \\<Longrightarrow> StepActEvent TS \\<subseteq> HAEvents (HA ST)\"", "lemma UniqueSucStates_Status [simp]:\n  \"UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\"", "lemma RootExSem_Status [simp]:\n  \"RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\"", "lemma RootState_HARootState [simp]:\n  \"(RootState ST) \\<in> States (HARoot (HA ST))\"", "lemma RootState_Conf [simp]:\n  \"(RootState ST) \\<in> (Conf ST)\"", "lemma RootState_notmem_Chi [simp]:\n  \"S \\<in> HAStates (HA ST) \\<Longrightarrow> (RootState ST) \\<notin> Chi (HA ST) S\"", "lemma RootState_notmem_Range_ChiRel [simp]:\n  \"RootState ST \\<notin> Range (ChiRel (HA ST))\"", "lemma RootState_Range_ChiPlus [simp]:\n  \"RootState ST \\<notin> Range (ChiPlus (HA ST))\"", "lemma RootState_Range_ChiStar [simp]:\n  \"\\<lbrakk> x \\<noteq> RootState ST \\<rbrakk> \\<Longrightarrow> (x,RootState ST) \\<notin> (ChiStar (HA ST))\"", "lemma RootState_notmem_ChiRel [simp]:\n  \"(x,RootState ST) \\<notin> (ChiRel (HA ST))\"", "lemma RootState_notmem_ChiRel2 [simp]:\n  \"\\<lbrakk> S \\<in> States (HARoot (HA ST))  \\<rbrakk> \\<Longrightarrow> (x,S) \\<notin> (ChiRel (HA ST))\"", "lemma RootState_Conf_StepConf [simp]:\n  \"\\<lbrakk> RootState ST \\<notin> Source TS \\<rbrakk> \\<Longrightarrow> RootState ST \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma OneRootState_Conf [simp]:\n  \"\\<lbrakk> S \\<in> States (HARoot (HA ST)); S \\<in> Conf ST \\<rbrakk> \\<Longrightarrow> S = RootState ST\"", "lemma OneRootState_Source:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Source TS; S \\<in> States (HARoot (HA ST)) \\<rbrakk> \\<Longrightarrow> S = RootState ST\"", "lemma OneState_HPT_Target_Source:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n     States SA \\<inter> Source TS = {} \\<rbrakk> \n   \\<Longrightarrow> S \\<notin> Target TS\"", "lemma RootState_notmem_Target [simp]:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST)); RootState ST \\<notin> Source TS \\<rbrakk> \\<Longrightarrow> S \\<notin> Target TS\"", "lemma Conf_HAStates:\n \"Conf ST \\<subseteq> HAStates (HA ST)\"", "lemma Conf_HAStates2 [simp]:\n  \"S \\<in> Conf ST \\<Longrightarrow> S \\<in> HAStates (HA ST)\"", "lemma OneState_Conf [intro]:\n  \"\\<lbrakk> S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA; T \\<in> States SA;\n     SA \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> T = S\"", "lemma OneState_HPT_SA:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; \n     SA \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> S = T\"", "lemma HPT_SAStates_Target_Source:\n   \"\\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A; T \\<in> States A; S \\<in> Conf ST;\n     T \\<in> Target TS \\<rbrakk> \\<Longrightarrow> S \\<in> Source TS\"", "lemma HPT_Conf_Target_Source:\n   \"\\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n     S \\<in> Target TS \\<rbrakk> \\<Longrightarrow> S \\<in> Source TS\"", "lemma Conf_SA:\n  \"S \\<in> Conf ST \\<Longrightarrow> \\<exists> A \\<in> SAs (HA ST). S \\<in> States A\"", "lemma HPT_Source_HAStates [simp]:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Source TS \\<rbrakk> \\<Longrightarrow> S \\<in> HAStates (HA ST)\"", "lemma Conf_Ancestor: \n  \"\\<lbrakk> S \\<in> Conf ST;  A \\<in> the (CompFun (HA ST) S) \\<rbrakk> \\<Longrightarrow> \\<exists>! T \\<in> States A. T \\<in> Conf ST\"", "lemma Conf_ChiRel: \n   \"\\<lbrakk> (S,T) \\<in> ChiRel (HA ST); T \\<in> Conf ST \\<rbrakk> \\<Longrightarrow> S \\<in> Conf ST\"", "lemma Conf_ChiPlus:\n   \"\\<lbrakk> (T,S) \\<in> ChiPlus (HA ST) \\<rbrakk> \\<Longrightarrow>  S \\<in> Conf ST \\<longrightarrow> T \\<in> Conf ST\"", "lemma HPT_Conf_Target_Source_ChiPlus:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Conf ST; S \\<in> ChiPlus (HA ST) `` Target TS \\<rbrakk>\n     \\<Longrightarrow> S \\<in> ChiStar (HA ST) `` Source TS\"", "lemma OneState_HPT_Target_ChiRel:\n   \"\\<lbrakk> TS \\<in> HPT ST; (U,T) \\<in> ChiRel (HA ST);\n      U \\<in> Target TS; A \\<in> SAs (HA ST); T \\<in> States A;\n      S \\<in> States A \\<rbrakk> \\<Longrightarrow> S \\<notin> Target TS\"", "lemma OneState_HPT_Target_ChiPlus [rule_format]:\n   \"\\<lbrakk> TS \\<in> HPT ST; (U,T) \\<in> ChiPlus (HA ST);\n      S \\<in> Target TS; A \\<in> SAs (HA ST); \n      S \\<in> States A \\<rbrakk> \\<Longrightarrow> T \\<in> States A \\<longrightarrow> U \\<notin> Target TS\"", "lemma RootExSem_StepConf: \n   \"\\<lbrakk> TS \\<in> HPT ST \\<rbrakk> \\<Longrightarrow> \n      RootExSem (SAs (HA ST)) (CompFun (HA ST)) (StepConf (HA ST) (Conf ST) TS)\"", "lemma Target_StepConf:\n   \"S \\<in> Target TS \\<Longrightarrow> S \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma Target_ChiRel_HAInit_StepConf:\n   \"\\<lbrakk> S \\<in> Target TS; (S,T) \\<in> ChiRel A; \n      T \\<in> HAInitStates A \\<rbrakk> \\<Longrightarrow> T \\<in> StepConf A C TS\"", "lemma StepConf_HAStates: \n \"TS \\<in> HPT ST \\<Longrightarrow> StepConf (HA ST) (Conf ST) TS \\<subseteq> HAStates (HA ST)\"", "lemma RootState_Conf_StepConf2 [simp]:\n  \"\\<lbrakk> source T = RootState ST; T \\<in> TS \\<rbrakk> \\<Longrightarrow> target T \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma HPT_StepConf_HAStates [simp]: \n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS \\<rbrakk> \\<Longrightarrow> S \\<in> HAStates (HA ST)\"", "lemma StepConf_Target_HAInitStates: \n  \"\\<lbrakk> S \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Target TS; S \\<notin> Conf ST\\<rbrakk> \\<Longrightarrow> S \\<in> HAInitStates (HA ST)\"", "lemma InitSucState_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n      S \\<notin> Conf ST; S \\<in> StepConf (HA ST) (Conf ST) TS \\<rbrakk> \\<Longrightarrow>\n      InitState A \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma InitSucState_Target_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Target TS; A \\<in> the (CompFun (HA ST) S)\\<rbrakk> \\<Longrightarrow>\n      InitState A \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma InitSucState_Conf_StepConf:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; \n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n     S \\<in> Conf ST; S \\<in> ChiStar (HA ST) `` (Source TS) \\<rbrakk> \\<Longrightarrow> \n     InitState A \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma SucState_Conf_StepConf:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n     S \\<in> Conf ST; States A \\<inter> ChiStar (HA ST) `` (Source TS) = {} \\<rbrakk> \\<Longrightarrow> \n     \\<exists> x. x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma SucState_Conf_Source_StepConf:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; \n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n     S \\<in> Conf ST; States A \\<inter> ChiStar (HA ST) `` (Source TS) \\<noteq> {}; \n     S \\<notin> ChiStar (HA ST) `` (Source TS)\\<rbrakk> \\<Longrightarrow> \n     \\<exists> x. x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma SucState_StepConf:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; \n     A \\<in> the (CompFun (HA ST) S) \\<rbrakk> \\<Longrightarrow> \n     \\<exists> x. x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma StepStatus_expand:\n   \"Abs_status (HA ST, StepConf (HA ST) (Conf ST) TS, \n                StepActEvent TS, U !!! (Value ST)) \n    = (StepStatus ST TS U)\"", "lemma UniqueSucState_Conf_Source_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; A \\<in> SAs (HA ST);\n      A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n      T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U; U \\<in> Conf ST \\<rbrakk> \\<Longrightarrow> \n      U \\<in> ChiStar (HA ST) `` Source TS\"", "lemma UniqueSucState_Target_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; A \\<in> SAs (HA ST);\n      A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n      T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U \\<rbrakk> \\<Longrightarrow> \n      U \\<notin> Target TS\"", "lemma UniqueSucState_Target_ChiRel_StepConf: \n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; A \\<in> SAs (HA ST);\n      A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n      T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U; (V,U) \\<in> ChiRel (HA ST); \n      U \\<in> HAInitStates (HA ST) \\<rbrakk>\n    \\<Longrightarrow> V \\<notin> Target TS\"", "lemma UniqueSucState_Target_ChiPlus_StepConf [rule_format]:\n  \"\\<lbrakk> TS \\<in> HPT ST; (S,T) \\<in> ChiRel (HA ST); (S,U) \\<in> ChiRel (HA ST); \n     V \\<in> Target TS; (V,W) \\<in> ChiRel (HA ST); T \\<notin> ChiStar (HA ST) `` Source TS;\n     (W,U) \\<in> (ChiRel (HA ST) \\<inter> HAInitStates (HA ST) \\<times> HAInitStates (HA ST))\\<^sup>+;\n     T \\<in> Conf ST \\<rbrakk> \\<Longrightarrow> (S,U) \\<in> ChiRel (HA ST) \\<longrightarrow> T=U\"", "lemma UniqueSucStates_SAStates_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; A \\<in> SAs (HA ST);\n      A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n      T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U \\<rbrakk> \\<Longrightarrow> \n      U \\<notin> StepConf (HA ST) (Conf ST) TS\"", "lemma UniqueSucStates_Ancestor_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> HAStates (HA ST); SA \\<in> the (CompFun (HA ST) S); \n      T \\<in> States SA; T \\<in> StepConf (HA ST) (Conf ST) TS \\<rbrakk>\n    \\<Longrightarrow> S \\<in> StepConf (HA ST) (Conf ST) TS\"", "lemma UniqueSucStates_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST \\<rbrakk> \\<Longrightarrow> \n      UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (StepConf (HA ST) (Conf ST) TS)\"", "lemma Status_Step:\n  \"\\<lbrakk> TS \\<in> HPT ST; U \\<in> ResolveRacing TS \\<rbrakk> \\<Longrightarrow>  \n    (HA ST, StepConf (HA ST) (Conf ST) TS, StepActEvent TS, U !!! (Value ST)) \\<in> status\"", "lemma IsConfSet_StepConf:\n       \"TS \\<in> HPT ST \\<Longrightarrow> IsConfSet (SAs (HA ST)) (CompFun (HA ST))\n                                  (StepConf (HA ST) (Conf ST) TS)\"", "lemma HA_StepStatus_HPT_ResolveRacing [simp]:\n  \"\\<lbrakk> TS \\<in> HPT ST; U \\<in> ResolveRacing TS \\<rbrakk> \\<Longrightarrow> \n    HA (StepStatus ST TS U) = HA ST\""], "translations": [["", "lemma Status_EmptySet:\n \"(Abs_hierauto ((@ x . True),\n    {Abs_seqauto ({ @ x . True}, (@ x . True), {}, {})}, {}, Map.empty(@ x . True \\<mapsto> {})), \n  {@x. True},{}, @x. True) \\<in> \n  {(HA,C,E,D) | HA C E D. Status HA C E D}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs_hierauto\n      (SOME x. True, {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})},\n       {}, [SOME x. True \\<mapsto> {}]),\n     {SOME x. True}, {}, SOME x. True)\n    \\<in> {(HA, C, E, D) |HA C E D. Status HA C E D}", "apply (unfold Status_def CompFun_def SAs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs_hierauto\n      (SOME x. True, {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})},\n       {}, [SOME x. True \\<mapsto> {}]),\n     {SOME x. True}, {}, SOME x. True)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           IsConfSet ((fst \\<circ> snd \\<circ> Rep_hierauto) HA)\n            ((snd \\<circ> snd \\<circ> snd \\<circ> Rep_hierauto) HA) C \\<and>\n           Data.DataSpace (HAInitValue HA) = Data.DataSpace D}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. IsConfSet\n     (fst (snd (Rep_hierauto\n                 (Abs_hierauto\n                   (SOME x. True,\n                    {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})},\n                    {}, [SOME x. True \\<mapsto> {}])))))\n     (snd (snd (snd (Rep_hierauto\n                      (Abs_hierauto\n                        (SOME x. True,\n                         {Abs_seqauto\n                           ({SOME x. True}, SOME x. True, {}, {})},\n                         {}, [SOME x. True \\<mapsto> {}]))))))\n     {SOME x. True}\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (subst Abs_hierauto_inverse)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (SOME x. True, {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n     [SOME x. True \\<mapsto> {}])\n    \\<in> hierauto\n 2. IsConfSet\n     (fst (snd (SOME x. True,\n                {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n                [SOME x. True \\<mapsto> {}])))\n     (snd (snd (snd (Rep_hierauto\n                      (Abs_hierauto\n                        (SOME x. True,\n                         {Abs_seqauto\n                           ({SOME x. True}, SOME x. True, {}, {})},\n                         {}, [SOME x. True \\<mapsto> {}]))))))\n     {SOME x. True}\n 3. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (subst hierauto_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (SOME x. True, {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n     [SOME x. True \\<mapsto> {}])\n    \\<in> {(D, F, E, G) |D F E G. HierAuto D F E G}\n 2. IsConfSet\n     (fst (snd (SOME x. True,\n                {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n                [SOME x. True \\<mapsto> {}])))\n     (snd (snd (snd (Rep_hierauto\n                      (Abs_hierauto\n                        (SOME x. True,\n                         {Abs_seqauto\n                           ({SOME x. True}, SOME x. True, {}, {})},\n                         {}, [SOME x. True \\<mapsto> {}]))))))\n     {SOME x. True}\n 3. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (rule HierAuto_EmptySet)"], ["proof (prove)\ngoal (2 subgoals):\n 1. IsConfSet\n     (fst (snd (SOME x. True,\n                {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n                [SOME x. True \\<mapsto> {}])))\n     (snd (snd (snd (Rep_hierauto\n                      (Abs_hierauto\n                        (SOME x. True,\n                         {Abs_seqauto\n                           ({SOME x. True}, SOME x. True, {}, {})},\n                         {}, [SOME x. True \\<mapsto> {}]))))))\n     {SOME x. True}\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (subst Abs_hierauto_inverse)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (SOME x. True, {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n     [SOME x. True \\<mapsto> {}])\n    \\<in> hierauto\n 2. IsConfSet\n     (fst (snd (SOME x. True,\n                {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n                [SOME x. True \\<mapsto> {}])))\n     (snd (snd (snd (SOME x. True,\n                     {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})},\n                     {}, [SOME x. True \\<mapsto> {}]))))\n     {SOME x. True}\n 3. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (subst hierauto_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (SOME x. True, {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n     [SOME x. True \\<mapsto> {}])\n    \\<in> {(D, F, E, G) |D F E G. HierAuto D F E G}\n 2. IsConfSet\n     (fst (snd (SOME x. True,\n                {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n                [SOME x. True \\<mapsto> {}])))\n     (snd (snd (snd (SOME x. True,\n                     {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})},\n                     {}, [SOME x. True \\<mapsto> {}]))))\n     {SOME x. True}\n 3. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (rule HierAuto_EmptySet)"], ["proof (prove)\ngoal (2 subgoals):\n 1. IsConfSet\n     (fst (snd (SOME x. True,\n                {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n                [SOME x. True \\<mapsto> {}])))\n     (snd (snd (snd (SOME x. True,\n                     {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})},\n                     {}, [SOME x. True \\<mapsto> {}]))))\n     {SOME x. True}\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. IsConfSet {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}\n     [SOME x. True \\<mapsto> {}] {SOME x. True}\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (unfold IsConfSet_def UniqueSucStates_def RootExSem_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {SOME x. True}\n    \\<subseteq> \\<Union>\n                 (States `\n                  {Abs_seqauto\n                    ({SOME x. True}, SOME x. True, {}, {})}) \\<and>\n    (\\<exists>!S.\n        S \\<in> States\n                 (Root {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}\n                   [SOME x. True \\<mapsto> {}]) \\<and>\n        S \\<in> {SOME x. True}) \\<and>\n    (\\<forall>S\\<in>\\<Union>\n                     (States `\n                      {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}).\n        \\<forall>A\\<in>the ([SOME x. True \\<mapsto> {}] S).\n           if S \\<in> {SOME x. True}\n           then \\<exists>!S'.\n                   S' \\<in> States A \\<and> S' \\<in> {SOME x. True}\n           else \\<forall>S\\<in>States A. S \\<notin> {SOME x. True})\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. (SOME x. True)\n    \\<in> States\n           (Root {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}\n             [SOME x. True \\<mapsto> {}])\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (unfold States_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (SOME x. True)\n    \\<in> (fst \\<circ> Rep_seqauto)\n           (Root {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}\n             [SOME x. True \\<mapsto> {}])\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. (SOME x. True)\n    \\<in> fst (Rep_seqauto\n                (Root {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}\n                  [SOME x. True \\<mapsto> {}]))\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (unfold Root_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (SOME x. True)\n    \\<in> fst (Rep_seqauto\n                (SOME A.\n                    A \\<in> {Abs_seqauto\n                              ({SOME x. True}, SOME x. True, {}, {})} \\<and>\n                    A \\<notin> \\<Union> (ran [SOME x. True \\<mapsto> {}])))\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (rule someI2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ?a15 \\<in> {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})} \\<and>\n    ?a15 \\<notin> \\<Union> (ran [SOME x. True \\<mapsto> {}])\n 2. \\<And>x.\n       x \\<in> {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})} \\<and>\n       x \\<notin> \\<Union>\n                   (ran [SOME x. True \\<mapsto> {}]) \\<Longrightarrow>\n       (SOME x. True) \\<in> fst (Rep_seqauto x)\n 3. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ?a15 \\<in> {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}\n 2. ?a15 \\<notin> \\<Union> (ran [SOME x. True \\<mapsto> {}])\n 3. \\<And>x.\n       x \\<in> {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})} \\<and>\n       x \\<notin> \\<Union>\n                   (ran [SOME x. True \\<mapsto> {}]) \\<Longrightarrow>\n       (SOME x. True) \\<in> fst (Rep_seqauto x)\n 4. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})\n    \\<notin> \\<Union> (ran [SOME x. True \\<mapsto> {}])\n 2. \\<And>x.\n       x \\<in> {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})} \\<and>\n       x \\<notin> \\<Union>\n                   (ran [SOME x. True \\<mapsto> {}]) \\<Longrightarrow>\n       (SOME x. True) \\<in> fst (Rep_seqauto x)\n 3. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (simp add: ran_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})} \\<and>\n       x \\<notin> \\<Union>\n                   (ran [SOME x. True \\<mapsto> {}]) \\<Longrightarrow>\n       (SOME x. True) \\<in> fst (Rep_seqauto x)\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. (SOME x. True)\n    \\<in> fst (Rep_seqauto\n                (Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})))\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (subst Abs_seqauto_inverse)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ({SOME x. True}, SOME x. True, {}, {}) \\<in> seqauto\n 2. (SOME x. True) \\<in> fst ({SOME x. True}, SOME x. True, {}, {})\n 3. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (subst seqauto_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ({SOME x. True}, SOME x. True, {}, {})\n    \\<in> {(S, I, L, D) |S I L D. SeqAuto S I L D}\n 2. (SOME x. True) \\<in> fst ({SOME x. True}, SOME x. True, {}, {})\n 3. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (rule SeqAuto_EmptySet)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (SOME x. True) \\<in> fst ({SOME x. True}, SOME x. True, {}, {})\n 2. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. Data.DataSpace\n     (HAInitValue\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply (unfold HAInitValue_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Data.DataSpace\n     ((fst \\<circ> Rep_hierauto)\n       (Abs_hierauto\n         (SOME x. True,\n          {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n          [SOME x. True \\<mapsto> {}]))) =\n    Data.DataSpace (SOME x. True)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. Data.DataSpace\n     (fst (Rep_hierauto\n            (Abs_hierauto\n              (SOME x. True,\n               {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n               [SOME x. True \\<mapsto> {}])))) =\n    Data.DataSpace (SOME x. True)", "apply (subst Abs_hierauto_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (SOME x. True, {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n     [SOME x. True \\<mapsto> {}])\n    \\<in> hierauto\n 2. Data.DataSpace\n     (fst (SOME x. True,\n           {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n           [SOME x. True \\<mapsto> {}])) =\n    Data.DataSpace (SOME x. True)", "apply (subst hierauto_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (SOME x. True, {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n     [SOME x. True \\<mapsto> {}])\n    \\<in> {(D, F, E, G) |D F E G. HierAuto D F E G}\n 2. Data.DataSpace\n     (fst (SOME x. True,\n           {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n           [SOME x. True \\<mapsto> {}])) =\n    Data.DataSpace (SOME x. True)", "apply (rule HierAuto_EmptySet)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Data.DataSpace\n     (fst (SOME x. True,\n           {Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})}, {},\n           [SOME x. True \\<mapsto> {}])) =\n    Data.DataSpace (SOME x. True)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  \"status =\n    {(HA,C,E,D) |\n        (HA::('s,'e,'d)hierauto)\n        (C::('s set))\n        (E::('e set))\n        (D::'d data). Status HA C E D}\""], ["", "typedef ('s,'e,'d) status =\n    \"status :: (('s,'e,'d)hierauto * 's set * 'e set * 'd data) set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> status", "unfolding status_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {(HA, C, E, D) |HA C E D. Status HA C E D}", "apply (rule exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ?x \\<in> {(HA, C, E, D) |HA C E D. Status HA C E D}", "apply (rule Status_EmptySet)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  HA :: \"('s,'e,'d) status  => ('s,'e,'d) hierauto\" where\n  \"HA == fst o Rep_status\""], ["", "definition\n  Conf :: \"('s,'e,'d) status  => 's set\" where\n  \"Conf == fst o snd o Rep_status\""], ["", "definition\n  Events :: \"('s,'e,'d) status  => 'e set\" where\n  \"Events == fst o snd o snd o Rep_status\""], ["", "definition\n  Value :: \"('s,'e,'d) status  => 'd data\" where\n  \"Value == snd o snd o snd o Rep_status\""], ["", "definition\n  RootState :: \"('s,'e,'d) status  => 's\" where\n  \"RootState ST == @ S. S \\<in> Conf ST \\<and> S \\<in> States (HARoot (HA ST))\""], ["", "(* -------------------------------------------------------------- *)\n(* enabled transitions                                            *)\n(* -------------------------------------------------------------- *)"], ["", "definition\n  EnabledTrans :: \"(('s,'e,'d)status * ('s,'e,'d)seqauto *\n                    ('s,'e,'d)trans) set\" where\n  \"EnabledTrans == {(ST,SA,T) .\n                       SA \\<in> SAs (HA ST) \\<and> \n                       T \\<in> Delta SA \\<and> \n                       source T \\<in> Conf ST \\<and> \n                       (Conf ST, Events ST, Value ST) |= (label T) }\""], ["", "definition\n  ET :: \"('s,'e,'d) status => (('s,'e,'d) trans) set\" where\n  \"ET ST == \\<Union> SA \\<in> SAs (HA ST). (EnabledTrans `` {ST}) `` {SA}\""], ["", "(* -------------------------------------------------------------- *)\n(* maximal non conflicting set of transitions                     *)\n(* -------------------------------------------------------------- *)"], ["", "definition\n  MaxNonConflict :: \"[('s,'e,'d)status,\n                      ('s,'e,'d)trans set] => bool\" where\n  \"MaxNonConflict ST T ==\n        (T \\<subseteq> ET ST) \\<and> \n        (\\<forall> A \\<in> SAs (HA ST). card (T Int Delta A) \\<le> 1)  \\<and> \n        (\\<forall> t \\<in> (ET ST). (t \\<in> T) =  (\\<not> (\\<exists> t' \\<in> ET ST. HigherPriority (HA ST) (t',t))))\""], ["", "(* -------------------------------------------------------------- *)\n(* resolving the occurrence of racing with interleaving semantic  *)\n(* for one set of transitions                                     *)\n(* -------------------------------------------------------------- *)"], ["", "definition\n ResolveRacing :: \"('s,'e,'d)trans set\n                   => ('d update set)\" where\n \"ResolveRacing TS ==\n            let\n                U = PUpdate (Label TS)\n            in\n                SequentialRacing U\""], ["", "(* -------------------------------------------------------------- *)\n(* HPT is a set, there can be more than one! If there are         *)\n(* nondeterministic transitions t1, t2 in one SA : SAs A, then    *)\n(* they are not in conflict wt higher priority. We have to chose  *)\n(* one and get different sets.                                    *)\n(* -------------------------------------------------------------- *)"], ["", "definition\n HPT :: \"('s,'e,'d)status => (('s,'e,'d)trans set) set\" where\n \"HPT ST == { T. MaxNonConflict ST T}\""], ["", "(* -------------------------------------------------------------- *)\n(* The initials status can be defined now for a given automaton.  *)\n(* -------------------------------------------------------------- *)"], ["", "definition\n InitStatus :: \"('s,'e,'d)hierauto => ('s,'e,'d)status\" where\n \"InitStatus A ==\n    Abs_status (A,InitConf A,{}, HAInitValue A)\""], ["", "(* -------------------------------------------------------------- *)\n(* The next status for a given status can be defined now by a     *)\n(* step.                                                          *)\n(* -------------------------------------------------------------- *)"], ["", "definition\n  StepActEvent :: \"('s,'e,'d)trans set => 'e set\" where\n  \"StepActEvent TS == Union (Actevent (Label TS))\""], ["", "definition\n  StepStatus :: \"[('s,'e,'d)status, ('s,'e,'d)trans set, 'd update]\n                 => ('s,'e,'d)status\" where\n  \"StepStatus ST TS U =\n                (let\n                   (A,C,E,D) = Rep_status ST;\n                   C'        = StepConf A C TS;\n                   E'        = StepActEvent TS;\n                   D'        = U !!! D\n                 in\n                   Abs_status (A,C',E',D'))\""], ["", "(* --------------------------------------------------------------- *)\n(* The Relation StepRel defines semantic transitions on statuses   *)\n(* for given hierarchical automaton.                               *)\n(* --------------------------------------------------------------- *)"], ["", "definition\n  StepRelSem :: \"('s,'e,'d)hierauto\n              => (('s,'e,'d)status * ('s,'e,'d)status) set\" where\n  \"StepRelSem A == {(ST,ST'). (HA ST) = A \\<and>\n                    ((HPT ST \\<noteq> {}) \\<longrightarrow>\n                       (\\<exists>TS \\<in> HPT ST.\n                           \\<exists>U \\<in> ResolveRacing TS.\n                                  ST' = StepStatus ST TS U)) &\n                    ((HPT ST = {}) \\<longrightarrow>\n                       (ST' = StepStatus ST {} DefaultUpdate))}\""], ["", "(* --------------------------------------------------------------- *)\n(* The Relation StepRel defines semantic transitions on statuses   *)\n(* The set of all reachable stati can now be defined inductively   *)\n(* as the set of statuses derived through applications of          *)\n(* transitions starting from the initial status TInitStatus 0.     *)\n(* --------------------------------------------------------------- *)"], ["", "inductive_set\n  ReachStati  :: \"('s,'e,'d)hierauto => ('s,'e,'d) status set\"\n  for A ::  \"('s,'e,'d)hierauto\"\nwhere\n  Status0 : \"InitStatus A \\<in> ReachStati A\"\n| StatusStep :\n     \"\\<lbrakk> ST \\<in> ReachStati A;  TS \\<in> HPT ST; U \\<in> ResolveRacing TS \\<rbrakk>\n      \\<Longrightarrow> StepStatus ST TS U \\<in> ReachStati A\""], ["", "subsection \\<open>Lemmas\\<close>"], ["", "lemma Rep_status_tuple: \n \"Rep_status ST = (HA ST, Conf ST, Events ST, Value ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_status ST = (HA ST, Conf ST, Events ST, Value ST)", "by (unfold HA_def Conf_def Events_def Value_def, simp)"], ["", "lemma Rep_status_select:\n \"(HA ST, Conf ST, Events ST, Value ST) \\<in> status\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ST, Conf ST, Events ST, Value ST) \\<in> status", "by (rule Rep_status_tuple [THEN subst], rule Rep_status)"], ["", "lemma Status_select [simp]:\n  \"Status (HA ST) (Conf ST) (Events ST) (Value ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Status (HA ST) (Conf ST) (Events ST) (Value ST)", "apply (cut_tac Rep_status_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> status \\<Longrightarrow>\n    Status (HA ST) (Conf ST) (Events ST) (Value ST)", "apply (unfold status_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> {(HA, C, E, D) |HA C E D. Status HA C E D} \\<Longrightarrow>\n    Status (HA ST) (Conf ST) (Events ST) (Value ST)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>IsConfSet\\<close>\\<close>"], ["", "lemma IsConfSet_Status [simp]: \n \"IsConfSet (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IsConfSet (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)", "apply (cut_tac Rep_status_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> status \\<Longrightarrow>\n    IsConfSet (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)", "apply (unfold status_def Status_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           IsConfSet (SAs HA) (CompFun HA) C \\<and>\n           Data.DataSpace (HAInitValue HA) =\n           Data.DataSpace D} \\<Longrightarrow>\n    IsConfSet (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>InitStatus\\<close>\\<close>"], ["", "lemma IsConfSet_InitConf [simp]:\n  \"IsConfSet (SAs A) (CompFun A) (InitConf A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IsConfSet (SAs A) (CompFun A) (InitConf A)", "apply (unfold IsConfSet_def RootExSem_def UniqueSucStates_def, fold HARoot_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. InitConf A \\<subseteq> \\<Union> (States ` SAs A) \\<and>\n    (\\<exists>!S.\n        S \\<in> States (HARoot A) \\<and> S \\<in> InitConf A) \\<and>\n    (\\<forall>S\\<in>\\<Union> (States ` SAs A).\n        \\<forall>Aa\\<in>the (CompFun A S).\n           if S \\<in> InitConf A\n           then \\<exists>!S'. S' \\<in> States Aa \\<and> S' \\<in> InitConf A\n           else \\<forall>S\\<in>States Aa. S \\<notin> InitConf A)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. InitConf A \\<subseteq> \\<Union> (States ` SAs A)\n 2. (\\<exists>!S.\n        S \\<in> States (HARoot A) \\<and> S \\<in> InitConf A) \\<and>\n    (\\<forall>S\\<in>\\<Union> (States ` SAs A).\n        \\<forall>Aa\\<in>the (CompFun A S).\n           if S \\<in> InitConf A\n           then \\<exists>!S'. S' \\<in> States Aa \\<and> S' \\<in> InitConf A\n           else \\<forall>S\\<in>States Aa. S \\<notin> InitConf A)", "apply (fold HAStates_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>!S.\n        S \\<in> States (HARoot A) \\<and> S \\<in> InitConf A) \\<and>\n    (\\<forall>S\\<in>HAStates A.\n        \\<forall>Aa\\<in>the (CompFun A S).\n           if S \\<in> InitConf A\n           then \\<exists>!S'. S' \\<in> States Aa \\<and> S' \\<in> InitConf A\n           else \\<forall>S\\<in>States Aa. S \\<notin> InitConf A)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>!S. S \\<in> States (HARoot A) \\<and> S \\<in> InitConf A\n 2. \\<forall>S\\<in>HAStates A.\n       \\<forall>Aa\\<in>the (CompFun A S).\n          if S \\<in> InitConf A\n          then \\<exists>!S'. S' \\<in> States Aa \\<and> S' \\<in> InitConf A\n          else \\<forall>S\\<in>States Aa. S \\<notin> InitConf A", "apply (rule_tac a=\"HAInitState A\" in ex1I)"], ["proof (prove)\ngoal (3 subgoals):\n 1. HAInitState A \\<in> States (HARoot A) \\<and>\n    HAInitState A \\<in> InitConf A\n 2. \\<And>x.\n       x \\<in> States (HARoot A) \\<and> x \\<in> InitConf A \\<Longrightarrow>\n       x = HAInitState A\n 3. \\<forall>S\\<in>HAStates A.\n       \\<forall>Aa\\<in>the (CompFun A S).\n          if S \\<in> InitConf A\n          then \\<exists>!S'. S' \\<in> States Aa \\<and> S' \\<in> InitConf A\n          else \\<forall>S\\<in>States Aa. S \\<notin> InitConf A", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S Aa.\n       \\<lbrakk>Aa \\<in> the (CompFun A S); S \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S'.\n                            S' \\<in> States Aa \\<and> S' \\<in> InitConf A\n 2. \\<And>S Aa S' y.\n       \\<lbrakk>Aa \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S' \\<in> States Aa; S' \\<in> InitConf A; y \\<in> States Aa;\n        y \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> S' = y\n 3. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac S SA)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S SA.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S'.\n                            S' \\<in> States SA \\<and> S' \\<in> InitConf A\n 2. \\<And>S Aa S' y.\n       \\<lbrakk>Aa \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S' \\<in> States Aa; S' \\<in> InitConf A; y \\<in> States Aa;\n        y \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> S' = y\n 3. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"S \\<in> InitConf A\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>S SA.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S'.\n                            S' \\<in> States SA \\<and> S' \\<in> InitConf A\n 2. \\<And>S SA.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S \\<notin> InitConf A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S'.\n                            S' \\<in> States SA \\<and> S' \\<in> InitConf A\n 3. \\<And>S Aa S' y.\n       \\<lbrakk>Aa \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S' \\<in> States Aa; S' \\<in> InitConf A; y \\<in> States Aa;\n        y \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> S' = y\n 4. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S SA.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S'.\n                            S' \\<in> States SA \\<and> S' \\<in> InitConf A\n 2. \\<And>S Aa S' y.\n       \\<lbrakk>Aa \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S' \\<in> States Aa; S' \\<in> InitConf A; y \\<in> States Aa;\n        y \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> S' = y\n 3. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule_tac x=\"InitState SA\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S SA.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> InitState SA \\<in> States SA \\<and>\n                         InitState SA \\<in> InitConf A\n 2. \\<And>S Aa S' y.\n       \\<lbrakk>Aa \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S' \\<in> States Aa; S' \\<in> InitConf A; y \\<in> States Aa;\n        y \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> S' = y\n 3. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S SA.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> InitState SA \\<in> InitConf A\n 2. \\<And>S Aa S' y.\n       \\<lbrakk>Aa \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S' \\<in> States Aa; S' \\<in> InitConf A; y \\<in> States Aa;\n        y \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> S' = y\n 3. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule InitState_CompFun_InitConf)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>S SA.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> ?S23 S SA \\<in> HAStates A\n 2. \\<And>S SA.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> SA \\<in> the (CompFun A (?S23 S SA))\n 3. \\<And>S SA.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> ?S23 S SA \\<in> InitConf A\n 4. \\<And>S Aa S' y.\n       \\<lbrakk>Aa \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S' \\<in> States Aa; S' \\<in> InitConf A; y \\<in> States Aa;\n        y \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> S' = y\n 5. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S Aa S' y.\n       \\<lbrakk>Aa \\<in> the (CompFun A S); S \\<in> InitConf A;\n        S' \\<in> States Aa; S' \\<in> InitConf A; y \\<in> States Aa;\n        y \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> S' = y\n 2. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac S SA T U)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S SA T U.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A;\n        T \\<in> States SA; T \\<in> InitConf A; U \\<in> States SA;\n        U \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> T = U\n 2. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"U = InitState SA\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S SA T U.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A;\n        T \\<in> States SA; T \\<in> InitConf A; U \\<in> States SA;\n        U \\<in> InitConf A; U = InitState SA\\<rbrakk>\n       \\<Longrightarrow> T = U\n 2. \\<And>S SA T U.\n       \\<lbrakk>SA \\<in> the (CompFun A S); S \\<in> InitConf A;\n        T \\<in> States SA; T \\<in> InitConf A; U \\<in> States SA;\n        U \\<in> InitConf A; U \\<noteq> InitState SA\\<rbrakk>\n       \\<Longrightarrow> T = U\n 3. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S Aa Sa.\n       \\<lbrakk>S \\<in> HAStates A; Aa \\<in> the (CompFun A S);\n        S \\<notin> InitConf A; Sa \\<in> States Aa;\n        Sa \\<in> InitConf A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:InitConf_CompFun_Ancestor HAStates_SA_mem, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma InitConf_status [simp]:\n  \"(A, InitConf A, {}, HAInitValue A) \\<in>  status\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, InitConf A, {}, HAInitValue A) \\<in> status", "apply (cut_tac Rep_status_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> status \\<Longrightarrow>\n    (A, InitConf A, {}, HAInitValue A) \\<in> status", "apply (unfold status_def Status_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           IsConfSet (SAs HA) (CompFun HA) C \\<and>\n           Data.DataSpace (HAInitValue HA) =\n           Data.DataSpace D} \\<Longrightarrow>\n    (A, InitConf A, {}, HAInitValue A)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           IsConfSet (SAs HA) (CompFun HA) C \\<and>\n           Data.DataSpace (HAInitValue HA) = Data.DataSpace D}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Conf_InitStatus_InitConf [simp]:\n \"Conf (InitStatus A) = InitConf A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conf (InitStatus A) = InitConf A", "apply (unfold Conf_def InitStatus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> Rep_status)\n     (Abs_status (A, InitConf A, {}, HAInitValue A)) =\n    InitConf A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Rep_status (Abs_status (A, InitConf A, {}, HAInitValue A)))) =\n    InitConf A", "apply (subst Abs_status_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (A, InitConf A, {}, HAInitValue A) \\<in> status\n 2. fst (snd (A, InitConf A, {}, HAInitValue A)) = InitConf A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HAInitValue_Value_DataSpace_Status [simp]:\n  \"Data.DataSpace (HAInitValue (HA ST)) = Data.DataSpace (Value ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Data.DataSpace (HAInitValue (HA ST)) = Data.DataSpace (Value ST)", "apply (cut_tac Rep_status_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> status \\<Longrightarrow>\n    Data.DataSpace (HAInitValue (HA ST)) = Data.DataSpace (Value ST)", "apply (unfold status_def Status_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           IsConfSet (SAs HA) (CompFun HA) C \\<and>\n           Data.DataSpace (HAInitValue HA) =\n           Data.DataSpace D} \\<Longrightarrow>\n    Data.DataSpace (HAInitValue (HA ST)) = Data.DataSpace (Value ST)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Value_InitStatus_HAInitValue [simp]:\n \"Value (InitStatus A) = HAInitValue A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Value (InitStatus A) = HAInitValue A", "apply (unfold Value_def InitStatus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> snd \\<circ> snd \\<circ> Rep_status)\n     (Abs_status (A, InitConf A, {}, HAInitValue A)) =\n    HAInitValue A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (snd (Rep_status\n                    (Abs_status (A, InitConf A, {}, HAInitValue A))))) =\n    HAInitValue A", "apply (subst Abs_status_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (A, InitConf A, {}, HAInitValue A) \\<in> status\n 2. snd (snd (snd (A, InitConf A, {}, HAInitValue A))) = HAInitValue A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HA_InitStatus [simp]:\n \"HA (InitStatus A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HA (InitStatus A) = A", "apply (unfold InitStatus_def HA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_status)\n     (Abs_status (A, InitConf A, {}, HAInitValue A)) =\n    A", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Rep_status (Abs_status (A, InitConf A, {}, HAInitValue A))) = A", "apply (subst Abs_status_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (A, InitConf A, {}, HAInitValue A) \\<in> status\n 2. fst (A, InitConf A, {}, HAInitValue A) = A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>Events\\<close>\\<close>"], ["", "lemma Events_HAEvents_Status: \n  \"(Events ST) \\<subseteq> HAEvents (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Events ST \\<subseteq> HAEvents (HA ST)", "apply (cut_tac Rep_status_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> status \\<Longrightarrow>\n    Events ST \\<subseteq> HAEvents (HA ST)", "apply (unfold status_def Status_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           IsConfSet (SAs HA) (CompFun HA) C \\<and>\n           Data.DataSpace (HAInitValue HA) =\n           Data.DataSpace D} \\<Longrightarrow>\n    Events ST \\<subseteq> HAEvents (HA ST)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TS_EventSet:\n    \"TS \\<subseteq>  ET ST \\<Longrightarrow> \\<Union> (Actevent (Label TS)) \\<subseteq> HAEvents (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<subseteq> ET ST \\<Longrightarrow>\n    \\<Union> (Actevent (Label TS)) \\<subseteq> HAEvents (HA ST)", "apply (unfold Actevent_def actevent_def ET_def EnabledTrans_def Action_def Label_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<subseteq> (\\<Union>SA\\<in>SAs (HA ST).\n                       ({(ST, SA, T).\n                         SA \\<in> SAs (HA ST) \\<and>\n                         T \\<in> Delta SA \\<and>\n                         source T \\<in> Conf ST \\<and>\n                         (Conf ST, Events ST, Value ST) |= label T} ``\n                        {ST}) ``\n                       {SA}) \\<Longrightarrow>\n    \\<Union> ((fst \\<circ> action) ` label ` TS)\n    \\<subseteq> HAEvents (HA ST)", "apply (cut_tac HA=\"HA ST\" in HAEvents_SAEvents_SAs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> (\\<Union>SA\\<in>SAs (HA ST).\n                                ({(ST, SA, T).\n                                  SA \\<in> SAs (HA ST) \\<and>\n                                  T \\<in> Delta SA \\<and>\n                                  source T \\<in> Conf ST \\<and>\n                                  (Conf ST, Events ST,\n                                   Value ST) |= label T} ``\n                                 {ST}) ``\n                                {SA});\n     \\<Union> (SAEvents ` SAs (HA ST)) \\<subseteq> HAEvents (HA ST)\\<rbrakk>\n    \\<Longrightarrow> \\<Union> ((fst \\<circ> action) ` label ` TS)\n                      \\<subseteq> HAEvents (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a aa ab ac b ba.\n       \\<lbrakk>TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                                   {T \\<in> Delta x.\n                                    source T \\<in> Conf ST \\<and>\n                                    (Conf ST, Events ST,\n                                     Value ST) |= label T});\n        \\<Union> (SAEvents ` SAs (HA ST)) \\<subseteq> HAEvents (HA ST);\n        (a, (aa, ab, ac, b), ba) \\<in> TS; x \\<in> ac\\<rbrakk>\n       \\<Longrightarrow> x \\<in> HAEvents (HA ST)", "apply (rename_tac Event Source Trigger Guard Action Update Target)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Event Source Trigger Guard Action Update Target.\n       \\<lbrakk>TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                                   {T \\<in> Delta x.\n                                    source T \\<in> Conf ST \\<and>\n                                    (Conf ST, Events ST,\n                                     Value ST) |= label T});\n        \\<Union> (SAEvents ` SAs (HA ST)) \\<subseteq> HAEvents (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply (unfold SAEvents_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Event Source Trigger Guard Action Update Target.\n       \\<lbrakk>TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                                   {T \\<in> Delta x.\n                                    source T \\<in> Conf ST \\<and>\n                                    (Conf ST, Events ST,\n                                     Value ST) |= label T});\n        (\\<Union>x\\<in>SAs (HA ST).\n            \\<Union>l\\<in>Label (Delta x).\n               fst (action l) \\<union> ExprEvents (expr l))\n        \\<subseteq> HAEvents (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply (erule subsetCE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Event Source Trigger Guard Action Update Target.\n       \\<lbrakk>(\\<Union>x\\<in>SAs (HA ST).\n                    \\<Union>l\\<in>Label (Delta x).\n                       fst (action l) \\<union> ExprEvents (expr l))\n                \\<subseteq> HAEvents (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action;\n        ?c25 Event Source Trigger Guard Action Update Target\n        \\<notin> TS\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)\n 2. \\<And>Event Source Trigger Guard Action Update Target.\n       \\<lbrakk>(\\<Union>x\\<in>SAs (HA ST).\n                    \\<Union>l\\<in>Label (Delta x).\n                       fst (action l) \\<union> ExprEvents (expr l))\n                \\<subseteq> HAEvents (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action;\n        ?c25 Event Source Trigger Guard Action Update Target\n        \\<in> (\\<Union>x\\<in>SAs (HA ST).\n                  {T \\<in> Delta x.\n                   source T \\<in> Conf ST \\<and>\n                   (Conf ST, Events ST, Value ST) |= label T})\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Event Source Trigger Guard Action Update Target x.\n       \\<lbrakk>(\\<Union>x\\<in>SAs (HA ST).\n                    \\<Union>l\\<in>Label (Delta x).\n                       fst (action l) \\<union> ExprEvents (expr l))\n                \\<subseteq> HAEvents (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; x \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta x;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST,\n         Value ST) |= (Trigger, Guard, Action, Update)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply (rename_tac SA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(\\<Union>x\\<in>SAs (HA ST).\n                    \\<Union>l\\<in>Label (Delta x).\n                       fst (action l) \\<union> ExprEvents (expr l))\n                \\<subseteq> HAEvents (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST,\n         Value ST) |= (Trigger, Guard, Action, Update)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply (erule subsetCE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        ?c41 Event Source Trigger Guard Action Update Target SA\n        \\<notin> (\\<Union>x\\<in>SAs (HA ST).\n                     \\<Union>l\\<in>Label (Delta x).\n                        fst (action l) \\<union>\n                        ExprEvents (expr l))\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)\n 2. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        ?c41 Event Source Trigger Guard Action Update Target SA\n        \\<in> HAEvents (HA ST)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        \\<forall>x\\<in>SAs (HA ST).\n           \\<forall>x\\<in>Label (Delta x).\n              Event \\<notin> fst (action x) \\<and>\n              Event \\<notin> ExprEvents (expr x)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply (erule_tac x=SA in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        \\<forall>x\\<in>Label (Delta SA).\n           Event \\<notin> fst (action x) \\<and>\n           Event \\<notin> ExprEvents (expr x)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)\n 2. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        SA \\<notin> SAs (HA ST)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        \\<forall>x\\<in>Label (Delta SA).\n           Event \\<notin> fst (action x) \\<and>\n           Event \\<notin> ExprEvents (expr x)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply (erule_tac x=\"(Trigger, Guard, Action, Update)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Event \\<notin> fst (action (Trigger, Guard, Action, Update)) \\<and>\n        Event\n        \\<notin> ExprEvents (expr (Trigger, Guard, Action, Update))\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)\n 2. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        (Trigger, Guard, Action, Update) \\<notin> Label (Delta SA)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        (Trigger, Guard, Action, Update) \\<notin> Label (Delta SA)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply (cut_tac SA=SA in Label_Delta_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        (Trigger, Guard, Action, Update) \\<notin> Label (Delta SA);\n        Label (Delta SA) \\<subseteq> Labels SA\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply (erule subsetCE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        (Trigger, Guard, Action, Update) \\<notin> Label (Delta SA);\n        ?c48 Event Source Trigger Guard Action Update Target SA\n        \\<notin> Label (Delta SA)\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)\n 2. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        (Trigger, Guard, Action, Update) \\<notin> Label (Delta SA);\n        ?c48 Event Source Trigger Guard Action Update Target SA\n        \\<in> Labels SA\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply (unfold Label_def image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        (Trigger, Guard, Action, Update)\n        \\<notin> {y. \\<exists>x\\<in>Delta SA. y = label x};\n        ?c48 Event Source Trigger Guard Action Update Target SA\n        \\<notin> {y. \\<exists>x\\<in>Delta SA. y = label x}\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)\n 2. \\<And>Event Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Event \\<in> Action; SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        (Trigger, Guard, Action, Update)\n        \\<notin> {y. \\<exists>x\\<in>Delta SA. y = label x};\n        ?c48 Event Source Trigger Guard Action Update Target SA\n        \\<in> Labels SA\\<rbrakk>\n       \\<Longrightarrow> Event \\<in> HAEvents (HA ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>StepStatus\\<close>\\<close>"], ["", "lemma StepStatus_empty:\n   \"Abs_status (HA ST, Conf ST, {}, U !!! (Value ST)) = StepStatus ST {} U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_status (HA ST, Conf ST, {}, U !!! Value ST) = StepStatus ST {} U", "apply (unfold StepStatus_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_status (HA ST, Conf ST, {}, U !!! Value ST) =\n    (case Rep_status ST of\n     (A, C, E, D) \\<Rightarrow>\n       Abs_status (A, StepConf A C {}, StepActEvent {}, U !!! D))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_status (HA ST, Conf ST, {}, U !!! Value ST) =\n    (case Rep_status ST of\n     (A, C, E, D) \\<Rightarrow> Abs_status (A, C, StepActEvent {}, U !!! D))", "apply (subst Rep_status_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_status (HA ST, Conf ST, {}, U !!! Value ST) =\n    (case (HA ST, Conf ST, Events ST, Value ST) of\n     (A, C, E, D) \\<Rightarrow> Abs_status (A, C, StepActEvent {}, U !!! D))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_status (HA ST, Conf ST, {}, U !!! Value ST) =\n    Abs_status (HA ST, Conf ST, StepActEvent {}, U !!! Value ST)", "apply (unfold StepActEvent_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_status (HA ST, Conf ST, {}, U !!! Value ST) =\n    Abs_status\n     (HA ST, Conf ST, \\<Union> (Actevent (Label {})), U !!! Value ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma status_empty_eventset [simp]:\n      \"(HA ST, Conf ST, {}, U !!! (Value ST)) \\<in> status\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ST, Conf ST, {}, U !!! Value ST) \\<in> status", "apply (unfold status_def Status_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ST, Conf ST, {}, U !!! Value ST)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           IsConfSet (SAs HA) (CompFun HA) C \\<and>\n           Data.DataSpace (HAInitValue HA) = Data.DataSpace D}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HA_StepStatus_emptyTS [simp]:\n  \"HA (StepStatus ST {} U) = HA ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HA (StepStatus ST {} U) = HA ST", "apply (subst StepStatus_empty [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. HA (Abs_status (HA ST, Conf ST, {}, U !!! Value ST)) = HA ST", "apply (unfold HA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_status)\n     (Abs_status\n       ((fst \\<circ> Rep_status) ST, Conf ST, {}, U !!! Value ST)) =\n    (fst \\<circ> Rep_status) ST", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Rep_status\n          (Abs_status (fst (Rep_status ST), Conf ST, {}, U !!! Value ST))) =\n    fst (Rep_status ST)", "apply (subst Abs_status_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (fst (Rep_status ST), Conf ST, {}, U !!! Value ST) \\<in> status\n 2. fst (fst (Rep_status ST), Conf ST, {}, U !!! Value ST) =\n    fst (Rep_status ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (Rep_status ST), Conf ST, {}, U !!! Value ST) \\<in> status", "apply (subst Rep_status_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (HA ST, Conf ST, Events ST, Value ST), Conf ST, {}, U !!! Value ST)\n    \\<in> status", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Enabled Transitions \\<open>ET\\<close>\\<close>"], ["", "lemma HPT_ETI: \n    \"TS \\<in> HPT ST \\<Longrightarrow> TS \\<subseteq> ET ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow> TS \\<subseteq> ET ST", "by (unfold HPT_def MaxNonConflict_def, auto)"], ["", "lemma finite_ET [simp]:\n \"finite (ET ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (ET ST)", "by (unfold ET_def Image_def EnabledTrans_def, auto)"], ["", "subsubsection \\<open>Finite Transition Set\\<close>"], ["", "lemma finite_MaxNonConflict [simp]:\n \"MaxNonConflict ST TS \\<Longrightarrow> finite TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MaxNonConflict ST TS \\<Longrightarrow> finite TS", "apply (unfold MaxNonConflict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<subseteq> ET ST \\<and>\n    (\\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> 1) \\<and>\n    (\\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<not> (\\<exists>t'\\<in>ET ST.\n                    HigherPriority (HA ST) (t', t)))) \\<Longrightarrow>\n    finite TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> ET ST;\n     \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST.\n            \\<not> HigherPriority (HA ST) (t', t))\\<rbrakk>\n    \\<Longrightarrow> finite TS", "apply (subst finite_subset)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<subseteq> ET ST;\n     \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST.\n            \\<not> HigherPriority (HA ST) (t', t))\\<rbrakk>\n    \\<Longrightarrow> TS \\<subseteq> ?B11\n 2. \\<lbrakk>TS \\<subseteq> ET ST;\n     \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST.\n            \\<not> HigherPriority (HA ST) (t', t))\\<rbrakk>\n    \\<Longrightarrow> finite ?B11\n 3. \\<lbrakk>TS \\<subseteq> ET ST;\n     \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST.\n            \\<not> HigherPriority (HA ST) (t', t))\\<rbrakk>\n    \\<Longrightarrow> True", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_HPT [simp]:\n  \"TS \\<in> HPT ST \\<Longrightarrow> finite TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow> finite TS", "by (unfold HPT_def, auto)"], ["", "subsubsection \\<open>\\<open>PUpdate\\<close>\\<close>"], ["", "lemma finite_Update:\n \"finite TS \\<Longrightarrow> finite ((\\<lambda> F. (Rep_pupdate F) (Value ST)) ` (PUpdate (Label TS)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite TS \\<Longrightarrow>\n    finite\n     ((\\<lambda>F. Rep_pupdate F (Value ST)) ` Expr.PUpdate (Label TS))", "by (rule finite_imageI, auto)"], ["", "lemma finite_PUpdate:\n \"TS \\<in> HPT S \\<Longrightarrow> finite (Expr.PUpdate (Label TS))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT S \\<Longrightarrow> finite (Expr.PUpdate (Label TS))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_ResolveRacing_Some [simp]:\n  \"TS \\<in> HPT S \\<Longrightarrow> (SOME u. u \\<in> ResolveRacing TS) \\<in> ResolveRacing TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT S \\<Longrightarrow>\n    (SOME u. u \\<in> ResolveRacing TS) \\<in> ResolveRacing TS", "apply (unfold ResolveRacing_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT S \\<Longrightarrow>\n    (SOME u. u \\<in> SequentialRacing (Expr.PUpdate (Label TS)))\n    \\<in> SequentialRacing (Expr.PUpdate (Label TS))", "apply (rule finite_SequentialRacing)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT S \\<Longrightarrow> finite (Expr.PUpdate (Label TS))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Higher Priority Transitions \\<open>HPT\\<close>\\<close>"], ["", "lemma finite_HPT2 [simp]:\n  \"finite (HPT ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (HPT ST)", "apply (cut_tac ST=ST in finite_ET)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (ET ST) \\<Longrightarrow> finite (HPT ST)", "apply (unfold HPT_def MaxNonConflict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (ET ST) \\<Longrightarrow>\n    finite\n     {T. T \\<subseteq> ET ST \\<and>\n         (\\<forall>A\\<in>SAs (HA ST).\n             card (T \\<inter> Delta A) \\<le> 1) \\<and>\n         (\\<forall>t\\<in>ET ST.\n             (t \\<in> T) =\n             (\\<not> (\\<exists>t'\\<in>ET ST.\n                         HigherPriority (HA ST) (t', t))))}", "apply (subst Collect_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (ET ST) \\<Longrightarrow>\n    finite\n     {x \\<in> Pow (ET ST).\n      (\\<forall>A\\<in>SAs (HA ST). card (x \\<inter> Delta A) \\<le> 1) \\<and>\n      (\\<forall>t\\<in>ET ST.\n          (t \\<in> x) =\n          (\\<not> (\\<exists>t'\\<in>ET ST. HigherPriority (HA ST) (t', t))))}", "apply (frule finite_Collect_subsets)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (ET ST); finite {B. B \\<subseteq> ET ST}\\<rbrakk>\n    \\<Longrightarrow> finite\n                       {x \\<in> Pow (ET ST).\n                        (\\<forall>A\\<in>SAs (HA ST).\n                            card (x \\<inter> Delta A) \\<le> 1) \\<and>\n                        (\\<forall>t\\<in>ET ST.\n                            (t \\<in> x) =\n                            (\\<not> (\\<exists>t'\\<in>ET ST.\n  HigherPriority (HA ST) (t', t))))}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_target_StepConf [simp]: \n  \"\\<lbrakk> TS \\<in> HPT ST; T \\<in> TS \\<rbrakk> \\<Longrightarrow> target T \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> target T \\<in> StepConf (HA ST) (Conf ST) TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> target T\n                      \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                            Target TS \\<union>\n                            ChiRel (HA ST) `` Target TS \\<inter>\n                            HAInitStates (HA ST) \\<union>\n                            (Restr (ChiRel (HA ST))\n                              (HAInitStates (HA ST)))\\<^sup>+ ``\n                            (ChiRel (HA ST) `` Target TS \\<inter>\n                             HAInitStates (HA ST))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_target_StepConf2 [simp]: \n  \"\\<lbrakk> TS \\<in> HPT ST; (S,L,T) \\<in> TS \\<rbrakk> \\<Longrightarrow> T \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, L, T) \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> T \\<in> StepConf (HA ST) (Conf ST) TS", "apply (unfold StepConf_def Target_def Source_def source_def target_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, L, T) \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> T \\<in> Conf ST -\n                              ChiStar (HA ST) ``\n                              {y. \\<exists>x\\<in>TS. y = fst x} \\<union>\n                              {y. \\<exists>x\\<in>TS.\n                                     y = snd (snd x)} \\<union>\n                              ChiRel (HA ST) ``\n                              {y. \\<exists>x\\<in>TS.\n                                     y = snd (snd x)} \\<inter>\n                              HAInitStates (HA ST) \\<union>\n                              (Restr (ChiRel (HA ST))\n                                (HAInitStates (HA ST)))\\<^sup>+ ``\n                              (ChiRel (HA ST) ``\n                               {y. \\<exists>x\\<in>TS.\ny = snd (snd x)} \\<inter>\n                               HAInitStates (HA ST))", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, L, T) \\<in> TS;\n     \\<forall>x\\<in>TS. T \\<noteq> snd (snd x);\n     T \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                (ChiRel (HA ST) ``\n                 {y. \\<exists>x\\<in>TS. y = snd (snd x)} \\<inter>\n                 HAInitStates (HA ST));\n     T \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> T \\<in> ChiRel (HA ST) ``\n                              {y. \\<exists>x\\<in>TS. y = snd (snd x)}\n 2. \\<lbrakk>TS \\<in> HPT ST; (S, L, T) \\<in> TS;\n     \\<forall>x\\<in>TS. T \\<noteq> snd (snd x);\n     T \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                (ChiRel (HA ST) ``\n                 {y. \\<exists>x\\<in>TS. y = snd (snd x)} \\<inter>\n                 HAInitStates (HA ST));\n     T \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> T \\<in> HAInitStates (HA ST)\n 3. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> HPT ST; (S, L, T) \\<in> TS;\n        \\<forall>x\\<in>TS. T \\<noteq> snd (snd x);\n        T \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) ``\n                    {y. \\<exists>x\\<in>TS. y = snd (snd x)} \\<inter>\n                    HAInitStates (HA ST));\n        (a, T) \\<in> ChiStar (HA ST);\n        (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> T \\<in> ChiRel (HA ST) ``\n                                 {y. \\<exists>x\\<in>TS. y = snd (snd x)}\n 4. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> HPT ST; (S, L, T) \\<in> TS;\n        \\<forall>x\\<in>TS. T \\<noteq> snd (snd x);\n        T \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) ``\n                    {y. \\<exists>x\\<in>TS. y = snd (snd x)} \\<inter>\n                    HAInitStates (HA ST));\n        (a, T) \\<in> ChiStar (HA ST);\n        (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> T \\<in> HAInitStates (HA ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Delta Transition Set\\<close>"], ["", "lemma ET_Delta: \n  \"\\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> t \\<in> Delta A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply (unfold ET_def EnabledTrans_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> (\\<Union>SA\\<in>SAs (HA ST).\n                                ({(ST, SA, T).\n                                  SA \\<in> SAs (HA ST) \\<and>\n                                  T \\<in> Delta SA \\<and>\n                                  source T \\<in> Conf ST \\<and>\n                                  (Conf ST, Events ST,\n                                   Value ST) |= label T} ``\n                                 {ST}) ``\n                                {SA});\n     t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                                {T \\<in> Delta x.\n                                 source T \\<in> Conf ST \\<and>\n                                 (Conf ST, Events ST,\n                                  Value ST) |= label T});\n     t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply (erule subsetCE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n     ?c23 \\<notin> TS\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A\n 2. \\<lbrakk>t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n     ?c23\n     \\<in> (\\<Union>x\\<in>SAs (HA ST).\n               {T \\<in> Delta x.\n                source T \\<in> Conf ST \\<and>\n                (Conf ST, Events ST, Value ST) |= label T})\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n        x \\<in> SAs (HA ST); t \\<in> Delta x; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply (rename_tac SA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply (case_tac \"A = SA\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A = SA\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A\n 2. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A \\<noteq> SA\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A \\<noteq> SA\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply (cut_tac HA=\"HA ST\" in MutuallyDistinct_HA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A \\<noteq> SA;\n        MutuallyDistinct (SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply (unfold MutuallyDistinct_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A \\<noteq> SA;\n        \\<forall>a\\<in>SAs (HA ST).\n           \\<forall>b\\<in>SAs (HA ST).\n              a \\<noteq> b \\<longrightarrow>\n              States a \\<inter> States b = {}\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ET_Delta_target: \n  \"\\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> t \\<in> Delta A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply (unfold ET_def EnabledTrans_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> (\\<Union>SA\\<in>SAs (HA ST).\n                                ({(ST, SA, T).\n                                  SA \\<in> SAs (HA ST) \\<and>\n                                  T \\<in> Delta SA \\<and>\n                                  source T \\<in> Conf ST \\<and>\n                                  (Conf ST, Events ST,\n                                   Value ST) |= label T} ``\n                                 {ST}) ``\n                                {SA});\n     t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                                {T \\<in> Delta x.\n                                 source T \\<in> Conf ST \\<and>\n                                 (Conf ST, Events ST,\n                                  Value ST) |= label T});\n     t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply (erule subsetCE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n     ?c23 \\<notin> TS\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A\n 2. \\<lbrakk>t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n     ?c23\n     \\<in> (\\<Union>x\\<in>SAs (HA ST).\n               {T \\<in> Delta x.\n                source T \\<in> Conf ST \\<and>\n                (Conf ST, Events ST, Value ST) |= label T})\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n        x \\<in> SAs (HA ST); t \\<in> Delta x; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply (rename_tac SA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply (case_tac \"A = SA\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A = SA\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A\n 2. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A \\<noteq> SA\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A \\<noteq> SA\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply (cut_tac HA=\"HA ST\" in MutuallyDistinct_HA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A \\<noteq> SA;\n        MutuallyDistinct (SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply (unfold MutuallyDistinct_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n        SA \\<in> SAs (HA ST); t \\<in> Delta SA; source t \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= label t; A \\<noteq> SA;\n        \\<forall>a\\<in>SAs (HA ST).\n           \\<forall>b\\<in>SAs (HA ST).\n              a \\<noteq> b \\<longrightarrow>\n              States a \\<inter> States b = {}\\<rbrakk>\n       \\<Longrightarrow> t \\<in> Delta A", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ET_HADelta:\n   \" \\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS \\<rbrakk> \\<Longrightarrow> t \\<in> HADelta (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> t \\<in> HADelta (HA ST)", "apply (unfold HADelta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> t \\<in> \\<Union> (Delta ` SAs (HA ST))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). t \\<in> Delta x", "apply (unfold ET_def EnabledTrans_def Image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> (\\<Union>SA\\<in>SAs (HA ST).\n                                {y. \\<exists>x\\<in>{SA}.\n (x, y)\n \\<in> {y. \\<exists>x\\<in>{ST}.\n              (x, y)\n              \\<in> {(ST, SA, T).\n                     SA \\<in> SAs (HA ST) \\<and>\n                     T \\<in> Delta SA \\<and>\n                     source T \\<in> Conf ST \\<and>\n                     (Conf ST, Events ST, Value ST) |= label T}}});\n     t \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). t \\<in> Delta x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_HADelta:\n   \" \\<lbrakk> TS \\<in> HPT ST; t \\<in> TS \\<rbrakk> \\<Longrightarrow> t \\<in> HADelta (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> t \\<in> HADelta (HA ST)", "apply (rule ET_HADelta)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> ?TS \\<subseteq> ET ST\n 2. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> t \\<in> ?TS", "apply (unfold HPT_def MaxNonConflict_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                          (\\<forall>A\\<in>SAs (HA ST).\n                              card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                          (\\<forall>t\\<in>ET ST.\n                              (t \\<in> T) =\n                              (\\<not> (\\<exists>t'\\<in>ET ST.\n    HigherPriority (HA ST) (t', t))))};\n     t \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> ?TS \\<subseteq> ET ST\n 2. \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                          (\\<forall>A\\<in>SAs (HA ST).\n                              card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                          (\\<forall>t\\<in>ET ST.\n                              (t \\<in> T) =\n                              (\\<not> (\\<exists>t'\\<in>ET ST.\n    HigherPriority (HA ST) (t', t))))};\n     t \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> t \\<in> ?TS", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_Delta: \n  \"\\<lbrakk> TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> t \\<in> Delta A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply (rule ET_Delta)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?TS \\<subseteq> ET ?ST\n 2. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> ?TS\n 3. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> source t \\<in> States A\n 4. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> SAs (HA ?ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n        A \\<in> SAs (HA ST); (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> (a, (aa, ab, ac, b), ba) \\<in> ET ST", "apply (unfold HPT_def MaxNonConflict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                             (\\<forall>A\\<in>SAs (HA ST).\n                                 card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                             (\\<forall>t\\<in>ET ST.\n                                 (t \\<in> T) =\n                                 (\\<not> (\\<exists>t'\\<in>ET ST.\n       HigherPriority (HA ST) (t', t))))};\n        t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n        (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> (a, (aa, ab, ac, b), ba) \\<in> ET ST", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_Delta_target: \n  \"\\<lbrakk> TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> t \\<in> Delta A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> Delta A", "apply (rule ET_Delta_target)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?TS \\<subseteq> ET ?ST\n 2. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> ?TS\n 3. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> target t \\<in> States A\n 4. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> SAs (HA ?ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n        A \\<in> SAs (HA ST); (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> (a, (aa, ab, ac, b), ba) \\<in> ET ST", "apply (unfold HPT_def MaxNonConflict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                             (\\<forall>A\\<in>SAs (HA ST).\n                                 card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                             (\\<forall>t\\<in>ET ST.\n                                 (t \\<in> T) =\n                                 (\\<not> (\\<exists>t'\\<in>ET ST.\n       HigherPriority (HA ST) (t', t))))};\n        t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n        (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> (a, (aa, ab, ac, b), ba) \\<in> ET ST", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneTrans_HPT_SA:\n  \"\\<lbrakk> TS \\<in> HPT ST; T \\<in> TS; source T \\<in> States SA;\n     U \\<in> TS; source U \\<in> States SA; SA \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> T = U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS; source T \\<in> States SA;\n     U \\<in> TS; source U \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (unfold HPT_def MaxNonConflict_def Source_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                          (\\<forall>A\\<in>SAs (HA ST).\n                              card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                          (\\<forall>t\\<in>ET ST.\n                              (t \\<in> T) =\n                              (\\<not> (\\<exists>t'\\<in>ET ST.\n    HigherPriority (HA ST) (t', t))))};\n     T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST.\n            \\<not> HigherPriority (HA ST) (t', t))\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (erule_tac x=SA in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0\\<rbrakk>\n    \\<Longrightarrow> T = U\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (case_tac \"finite (TS \\<inter> Delta SA)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (frule_tac t=T in OneElement_Card)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> card (TS \\<inter> Delta SA) \\<le> Suc 0\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS \\<inter> Delta SA\n 3. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 5. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS \\<inter> Delta SA\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (frule_tac t=T and A=SA in ET_Delta)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> source T \\<in> States SA\n 3. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> SA \\<in> SAs (HA ST)\n 4. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     T \\<in> Delta SA\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS \\<inter> Delta SA\n 5. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 6. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 7. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply assumption+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     T \\<in> Delta SA\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS \\<inter> Delta SA\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (frule_tac t=U in OneElement_Card)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> card (TS \\<inter> Delta SA) \\<le> Suc 0\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> U \\<in> TS \\<inter> Delta SA\n 3. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}; TS \\<inter> Delta SA = {U}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 5. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> U \\<in> TS \\<inter> Delta SA\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}; TS \\<inter> Delta SA = {U}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (frule_tac t=U and A=SA in ET_Delta)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> U \\<in> TS\n 2. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> source U \\<in> States SA\n 3. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> SA \\<in> SAs (HA ST)\n 4. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}; U \\<in> Delta SA\\<rbrakk>\n    \\<Longrightarrow> U \\<in> TS \\<inter> Delta SA\n 5. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}; TS \\<inter> Delta SA = {U}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 6. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 7. \\<lbrakk>T \\<in> TS; source T \\<in> States SA; U \\<in> TS;\n     source U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneTrans_HPT_SA2:\n  \"\\<lbrakk> TS \\<in> HPT ST; T \\<in> TS; target T \\<in> States SA;\n     U \\<in> TS; target U \\<in> States SA; SA \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> T = U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS; target T \\<in> States SA;\n     U \\<in> TS; target U \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (unfold HPT_def MaxNonConflict_def Target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                          (\\<forall>A\\<in>SAs (HA ST).\n                              card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                          (\\<forall>t\\<in>ET ST.\n                              (t \\<in> T) =\n                              (\\<not> (\\<exists>t'\\<in>ET ST.\n    HigherPriority (HA ST) (t', t))))};\n     T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST.\n            \\<not> HigherPriority (HA ST) (t', t))\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (erule_tac x=SA in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0\\<rbrakk>\n    \\<Longrightarrow> T = U\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (case_tac \"finite (TS \\<inter> Delta SA)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (frule_tac t=T in OneElement_Card)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> card (TS \\<inter> Delta SA) \\<le> Suc 0\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS \\<inter> Delta SA\n 3. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 5. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS \\<inter> Delta SA\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (frule_tac t=T and A=SA in ET_Delta_target)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> target T \\<in> States SA\n 3. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     finite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> SA \\<in> SAs (HA ST)\n 4. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     T \\<in> Delta SA\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS \\<inter> Delta SA\n 5. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 6. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 7. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply assumption+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     T \\<in> Delta SA\\<rbrakk>\n    \\<Longrightarrow> T \\<in> TS \\<inter> Delta SA\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (frule_tac t=U in OneElement_Card)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> card (TS \\<inter> Delta SA) \\<le> Suc 0\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> U \\<in> TS \\<inter> Delta SA\n 3. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}; TS \\<inter> Delta SA = {U}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 5. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> U \\<in> TS \\<inter> Delta SA\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}; TS \\<inter> Delta SA = {U}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 3. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 4. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply (frule_tac t=U and A=SA in ET_Delta_target)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> U \\<in> TS\n 2. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> target U \\<in> States SA\n 3. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}\\<rbrakk>\n    \\<Longrightarrow> SA \\<in> SAs (HA ST)\n 4. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}; U \\<in> Delta SA\\<rbrakk>\n    \\<Longrightarrow> U \\<in> TS \\<inter> Delta SA\n 5. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0; finite (TS \\<inter> Delta SA);\n     TS \\<inter> Delta SA = {T}; TS \\<inter> Delta SA = {U}\\<rbrakk>\n    \\<Longrightarrow> T = U\n 6. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     card (TS \\<inter> Delta SA) \\<le> Suc 0;\n     infinite (TS \\<inter> Delta SA)\\<rbrakk>\n    \\<Longrightarrow> T = U\n 7. \\<lbrakk>T \\<in> TS; target T \\<in> States SA; U \\<in> TS;\n     target U \\<in> States SA; SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     \\<forall>t\\<in>ET ST.\n        (t \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST. \\<not> HigherPriority (HA ST) (t', t));\n     SA \\<notin> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = U", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Target Transition Set\\<close>"], ["", "lemma ET_Target_HAStates:\n    \"TS \\<subseteq> ET ST \\<Longrightarrow> Target TS \\<subseteq> HAStates (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<subseteq> ET ST \\<Longrightarrow>\n    Target TS \\<subseteq> HAStates (HA ST)", "apply (unfold HAStates_def Target_def target_def ET_def EnabledTrans_def Action_def Label_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<subseteq> (\\<Union>SA\\<in>SAs (HA ST).\n                       ({(ST, SA, T).\n                         SA \\<in> SAs (HA ST) \\<and>\n                         T \\<in> Delta SA \\<and>\n                         source T \\<in> Conf ST \\<and>\n                         (Conf ST, Events ST, Value ST) |= label T} ``\n                        {ST}) ``\n                       {SA}) \\<Longrightarrow>\n    (\\<lambda>t. snd (snd t)) ` TS\n    \\<subseteq> \\<Union> (States ` SAs (HA ST))", "apply (cut_tac HA=\"HA ST\" in Target_SAs_Delta_States)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> (\\<Union>SA\\<in>SAs (HA ST).\n                                ({(ST, SA, T).\n                                  SA \\<in> SAs (HA ST) \\<and>\n                                  T \\<in> Delta SA \\<and>\n                                  source T \\<in> Conf ST \\<and>\n                                  (Conf ST, Events ST,\n                                   Value ST) |= label T} ``\n                                 {ST}) ``\n                                {SA});\n     Target (\\<Union> (Delta ` ?SAs (HA ST)))\n     \\<subseteq> \\<Union> (States ` ?SAs (HA ST))\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>t. snd (snd t)) ` TS\n                      \\<subseteq> \\<Union> (States ` SAs (HA ST))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                                   {T \\<in> Delta x.\n                                    source T \\<in> Conf ST \\<and>\n                                    (Conf ST, Events ST,\n                                     Value ST) |= label T});\n        Target (\\<Union> (Delta ` ?SAs (HA ST)))\n        \\<subseteq> \\<Union> (States ` ?SAs (HA ST));\n        (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). ba \\<in> States x", "apply (rename_tac Source Trigger Guard Action Update Target)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Targeta.\n       \\<lbrakk>TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                                   {T \\<in> Delta x.\n                                    source T \\<in> Conf ST \\<and>\n                                    (Conf ST, Events ST,\n                                     Value ST) |= label T});\n        Target (\\<Union> (Delta ` ?SAs (HA ST)))\n        \\<subseteq> \\<Union> (States ` ?SAs (HA ST));\n        (Source, (Trigger, Guard, Action, Update), Targeta)\n        \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Targeta \\<in> States x", "apply (unfold Target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                                   {T \\<in> Delta x.\n                                    source T \\<in> Conf ST \\<and>\n                                    (Conf ST, Events ST,\n                                     Value ST) |= label T});\n        target ` \\<Union> (Delta ` ?SAs (HA ST))\n        \\<subseteq> \\<Union> (States ` ?SAs (HA ST));\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x", "apply (erule subsetCE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>target ` \\<Union> (Delta ` ?SAs (HA ST))\n                \\<subseteq> \\<Union> (States ` ?SAs (HA ST));\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        ?c27 Source Trigger Guard Action Update Target \\<notin> TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x\n 2. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>target ` \\<Union> (Delta ` ?SAs (HA ST))\n                \\<subseteq> \\<Union> (States ` ?SAs (HA ST));\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        ?c27 Source Trigger Guard Action Update Target\n        \\<in> (\\<Union>x\\<in>SAs (HA ST).\n                  {T \\<in> Delta x.\n                   source T \\<in> Conf ST \\<and>\n                   (Conf ST, Events ST, Value ST) |= label T})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target x.\n       \\<lbrakk>target ` \\<Union> (Delta ` ?SAs (HA ST))\n                \\<subseteq> \\<Union> (States ` ?SAs (HA ST));\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        x \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta x;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST,\n         Value ST) |= (Trigger, Guard, Action, Update)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x", "apply (rename_tac SA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>target ` \\<Union> (Delta ` ?SAs (HA ST))\n                \\<subseteq> \\<Union> (States ` ?SAs (HA ST));\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST,\n         Value ST) |= (Trigger, Guard, Action, Update)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x", "apply (erule subsetCE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        ?c48 Source Trigger Guard Action Update Target SA\n        \\<notin> target ` \\<Union> (Delta ` ?SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x\n 2. \\<And>Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        ?c48 Source Trigger Guard Action Update Target SA\n        \\<in> \\<Union> (States ` ?SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Target \\<notin> target ` \\<Union> (Delta ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x", "apply (unfold image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Target\n        \\<notin> {y. \\<exists>x\\<in>\\<Union>\n                                     {y.\n\\<exists>x\\<in>SAs (HA ST). y = Delta x}.\n                        y = target x}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SA.\n       \\<lbrakk>(Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        \\<forall>y.\n           (\\<forall>x\\<in>SAs (HA ST). y \\<noteq> Delta x) \\<or>\n           (\\<forall>x\\<in>y. Target \\<noteq> target x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>SAs (HA ST). Target \\<in> States x", "apply (metis target_select)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_Target_HAStates:\n \"TS \\<in> HPT ST \\<Longrightarrow> Target TS \\<subseteq> HAStates (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow> Target TS \\<subseteq> HAStates (HA ST)", "apply (rule HPT_ETI [THEN ET_Target_HAStates])"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow> TS \\<in> HPT ST", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_Target_HAStates2 [simp]:\n  \"\\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS\\<rbrakk> \\<Longrightarrow> S \\<in> HAStates (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (HA ST)", "apply (cut_tac HPT_Target_HAStates)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     Target ?TS1 \\<subseteq> HAStates (HA ?ST1)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (HA ST)\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?TS1 \\<in> HPT ?ST1", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneState_HPT_Target:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Target TS; \n     T \\<in> Target TS; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST) \\<rbrakk>\n   \\<Longrightarrow> S = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS; T \\<in> Target TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S = T", "apply (unfold Target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> target ` TS; T \\<in> target ` TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S = T", "apply (auto dest: OneTrans_HPT_SA2[rotated -1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Source Transition Set\\<close>"], ["", "lemma ET_Source_Conf:\n  \"TS \\<subseteq> ET ST \\<Longrightarrow> (Source TS) \\<subseteq> Conf ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<subseteq> ET ST \\<Longrightarrow> Source TS \\<subseteq> Conf ST", "apply (unfold Source_def ET_def EnabledTrans_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<subseteq> (\\<Union>SA\\<in>SAs (HA ST).\n                       ({(ST, SA, T).\n                         SA \\<in> SAs (HA ST) \\<and>\n                         T \\<in> Delta SA \\<and>\n                         source T \\<in> Conf ST \\<and>\n                         (Conf ST, Events ST, Value ST) |= label T} ``\n                        {ST}) ``\n                       {SA}) \\<Longrightarrow>\n    source ` TS \\<subseteq> Conf ST", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_Source_Conf [simp]:\n  \"TS \\<in> HPT ST \\<Longrightarrow> (Source TS) \\<subseteq> Conf ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow> Source TS \\<subseteq> Conf ST", "apply (unfold HPT_def MaxNonConflict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                 (\\<forall>A\\<in>SAs (HA ST).\n                     card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                 (\\<forall>t\\<in>ET ST.\n                     (t \\<in> T) =\n                     (\\<not> (\\<exists>t'\\<in>ET ST.\n                                 HigherPriority (HA ST)\n                                  (t', t))))} \\<Longrightarrow>\n    Source TS \\<subseteq> Conf ST", "apply (rule ET_Source_Conf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                 (\\<forall>A\\<in>SAs (HA ST).\n                     card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                 (\\<forall>t\\<in>ET ST.\n                     (t \\<in> T) =\n                     (\\<not> (\\<exists>t'\\<in>ET ST.\n                                 HigherPriority (HA ST)\n                                  (t', t))))} \\<Longrightarrow>\n    TS \\<subseteq> ET ST", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ET_Source_Target [simp]:\n  \"\\<lbrakk> SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST; States SA \\<inter> Source TS = {} \\<rbrakk> \\<Longrightarrow> States SA \\<inter> Target TS = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SA \\<in> SAs (HA ST); TS \\<subseteq> ET ST;\n     States SA \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> Target TS = {}", "apply (unfold ET_def EnabledTrans_def Source_def Target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SA \\<in> SAs (HA ST);\n     TS \\<subseteq> (\\<Union>SA\\<in>SAs (HA ST).\n                        ({(ST, SA, T).\n                          SA \\<in> SAs (HA ST) \\<and>\n                          T \\<in> Delta SA \\<and>\n                          source T \\<in> Conf ST \\<and>\n                          (Conf ST, Events ST, Value ST) |= label T} ``\n                         {ST}) ``\n                        {SA});\n     States SA \\<inter> source ` TS = {}\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> target ` TS = {}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>SA \\<in> SAs (HA ST);\n        TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                           {T \\<in> Delta x.\n                            source T \\<in> Conf ST \\<and>\n                            (Conf ST, Events ST, Value ST) |= label T});\n        States SA \\<inter> source ` TS = {}; ba \\<in> States SA;\n        (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac Source Trigger Guard Action Update Target)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>SA \\<in> SAs (HA ST);\n        TS \\<subseteq> (\\<Union>x\\<in>SAs (HA ST).\n                           {T \\<in> Delta x.\n                            source T \\<in> Conf ST \\<and>\n                            (Conf ST, Events ST, Value ST) |= label T});\n        States SA \\<inter> source ` TS = {}; Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule subsetCE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>SA \\<in> SAs (HA ST); States SA \\<inter> source ` TS = {};\n        Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        ?c29 Source Trigger Guard Action Update Target \\<notin> TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>SA \\<in> SAs (HA ST); States SA \\<inter> source ` TS = {};\n        Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        ?c29 Source Trigger Guard Action Update Target\n        \\<in> (\\<Union>x\\<in>SAs (HA ST).\n                  {T \\<in> Delta x.\n                   source T \\<in> Conf ST \\<and>\n                   (Conf ST, Events ST, Value ST) |= label T})\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target x.\n       \\<lbrakk>SA \\<in> SAs (HA ST); States SA \\<inter> source ` TS = {};\n        Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        x \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta x;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST,\n         Value ST) |= (Trigger, Guard, Action, Update)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac SAA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); States SA \\<inter> source ` TS = {};\n        Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST,\n         Value ST) |= (Trigger, Guard, Action, Update)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold image_def source_def Int_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST);\n        {x \\<in> States SA. x \\<in> {y. \\<exists>x\\<in>TS. y = fst x}} = {};\n        Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST,\n         Value ST) |= (Trigger, Guard, Action, Update)\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST);\n        \\<forall>x.\n           x \\<in> States SA \\<longrightarrow>\n           (\\<forall>xa\\<in>TS. x \\<noteq> fst xa);\n        Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST,\n         Value ST) |= (Trigger, Guard, Action, Update)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=Source in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<in> States SA \\<longrightarrow>\n        (\\<forall>x\\<in>TS. Source \\<noteq> fst x)\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Delta_source_States)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA;\n        source (Source, (Trigger, Guard, Action, Update), Target)\n        \\<in> States SAA\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold source_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA;\n        fst (Source, (Trigger, Guard, Action, Update), Target)\n        \\<in> States SAA\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"SA=SAA\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA;\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA;\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA;\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac HA=\"HA ST\" in MutuallyDistinct_HA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        MutuallyDistinct (SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold MutuallyDistinct_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        \\<forall>a\\<in>SAs (HA ST).\n           \\<forall>b\\<in>SAs (HA ST).\n              a \\<noteq> b \\<longrightarrow>\n              States a \\<inter> States b = {}\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=SA in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        \\<forall>b\\<in>SAs (HA ST).\n           SA \\<noteq> b \\<longrightarrow>\n           States SA \\<inter> States b = {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        SA \\<notin> SAs (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=SAA in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        SA \\<noteq> SAA \\<longrightarrow>\n        States SA \\<inter> States SAA = {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        SAA \\<notin> SAs (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        SA \\<notin> SAs (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        States SA \\<inter> States SAA = {}\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Delta_target_States)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        States SA \\<inter> States SAA = {};\n        target (Source, (Trigger, Guard, Action, Update), Target)\n        \\<in> States SAA\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Source Trigger Guard Action Update Target SAA.\n       \\<lbrakk>SA \\<in> SAs (HA ST); Target \\<in> States SA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        SAA \\<in> SAs (HA ST);\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SAA;\n        Source \\<in> Conf ST;\n        (Conf ST, Events ST, Value ST) |= (Trigger, Guard, Action, Update);\n        Source \\<notin> States SA; Source \\<in> States SAA; SA \\<noteq> SAA;\n        States SA \\<inter> States SAA = {};\n        snd (snd (Source, (Trigger, Guard, Action, Update), Target))\n        \\<in> States SAA\\<rbrakk>\n       \\<Longrightarrow> False", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_Source_Target [simp]:\n  \"\\<lbrakk> TS \\<in> HPT ST; States SA \\<inter> Source TS = {}; SA \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> States SA \\<inter> Target TS = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; States SA \\<inter> Source TS = {};\n     SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> Target TS = {}", "apply (unfold HPT_def MaxNonConflict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                          (\\<forall>A\\<in>SAs (HA ST).\n                              card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                          (\\<forall>t\\<in>ET ST.\n                              (t \\<in> T) =\n                              (\\<not> (\\<exists>t'\\<in>ET ST.\n    HigherPriority (HA ST) (t', t))))};\n     States SA \\<inter> Source TS = {}; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> Target TS = {}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ET_target_source:\n  \"\\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> source t \\<in> States A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> source t \\<in> States A", "apply (frule ET_Delta_target)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?t \\<in> TS\n 2. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> target ?t \\<in> States ?A\n 3. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?A \\<in> SAs (HA ST)\n 4. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST); ?t \\<in> Delta ?A\\<rbrakk>\n    \\<Longrightarrow> source t \\<in> States A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ET_source_target:\n  \"\\<lbrakk> TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> target t \\<in> States A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> target t \\<in> States A", "apply (frule ET_Delta)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?t \\<in> TS\n 2. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> source ?t \\<in> States ?A\n 3. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?A \\<in> SAs (HA ST)\n 4. \\<lbrakk>TS \\<subseteq> ET ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST); ?t \\<in> Delta ?A\\<rbrakk>\n    \\<Longrightarrow> target t \\<in> States A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_target_source:\n  \"\\<lbrakk> TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> source t \\<in> States A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> source t \\<in> States A", "apply (rule ET_target_source)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?TS \\<subseteq> ET ?ST\n 2. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> ?TS\n 3. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> target t \\<in> States A\n 4. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> SAs (HA ?ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; target t \\<in> States A;\n        A \\<in> SAs (HA ST); (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> (a, (aa, ab, ac, b), ba) \\<in> ET ST", "apply (unfold HPT_def MaxNonConflict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                             (\\<forall>A\\<in>SAs (HA ST).\n                                 card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                             (\\<forall>t\\<in>ET ST.\n                                 (t \\<in> T) =\n                                 (\\<not> (\\<exists>t'\\<in>ET ST.\n       HigherPriority (HA ST) (t', t))))};\n        t \\<in> TS; target t \\<in> States A; A \\<in> SAs (HA ST);\n        (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> (a, (aa, ab, ac, b), ba) \\<in> ET ST", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_source_target:\n  \"\\<lbrakk> TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> target t \\<in> States A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> target t \\<in> States A", "apply (rule ET_source_target)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?TS \\<subseteq> ET ?ST\n 2. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> ?TS\n 3. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> source t \\<in> States A\n 4. \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> SAs (HA ?ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> HPT ST; t \\<in> TS; source t \\<in> States A;\n        A \\<in> SAs (HA ST); (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> (a, (aa, ab, ac, b), ba) \\<in> ET ST", "apply (unfold HPT_def MaxNonConflict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba.\n       \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                             (\\<forall>A\\<in>SAs (HA ST).\n                                 card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                             (\\<forall>t\\<in>ET ST.\n                                 (t \\<in> T) =\n                                 (\\<not> (\\<exists>t'\\<in>ET ST.\n       HigherPriority (HA ST) (t', t))))};\n        t \\<in> TS; source t \\<in> States A; A \\<in> SAs (HA ST);\n        (a, (aa, ab, ac, b), ba) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> (a, (aa, ab, ac, b), ba) \\<in> ET ST", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_source_target2 [simp]:\n  \"\\<lbrakk> TS \\<in>HPT ST; (s,l,t) \\<in> TS; s \\<in> States A; A \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow>  t \\<in>States A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (s, l, t) \\<in> TS; s \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> t \\<in> States A", "apply (cut_tac ST=ST and TS=TS and t=\"(s,l,t)\" in HPT_source_target)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; (s, l, t) \\<in> TS; s \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> TS \\<in> HPT ST\n 2. \\<lbrakk>TS \\<in> HPT ST; (s, l, t) \\<in> TS; s \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> (s, l, t) \\<in> TS\n 3. \\<lbrakk>TS \\<in> HPT ST; (s, l, t) \\<in> TS; s \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> source (s, l, t) \\<in> States ?A\n 4. \\<lbrakk>TS \\<in> HPT ST; (s, l, t) \\<in> TS; s \\<in> States A;\n     A \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?A \\<in> SAs (HA ST)\n 5. \\<lbrakk>TS \\<in> HPT ST; (s, l, t) \\<in> TS; s \\<in> States A;\n     A \\<in> SAs (HA ST); target (s, l, t) \\<in> States ?A\\<rbrakk>\n    \\<Longrightarrow> t \\<in> States A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ChiRel_ChiStar_Source_notmem:\n   \"\\<lbrakk> TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST); S \\<in> Conf ST; \n      T \\<notin> ChiStar (HA ST) `` Source TS \\<rbrakk> \\<Longrightarrow> \n      S \\<notin> ChiStar (HA ST) `` Source TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> ChiStar (HA ST) `` Source TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S) \\<in> ChiStar (HA ST); x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac U)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (U, S) \\<in> ChiStar (HA ST); U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only: Image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST;\n        T \\<notin> {y. \\<exists>x\\<in>Source TS.\n                          (x, y) \\<in> ChiStar (HA ST)};\n        (U, S) \\<in> ChiStar (HA ST); U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST;\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (U, S) \\<in> ChiStar (HA ST); U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=U in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; (U, S) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (U, T) \\<notin> ChiStar (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; (U, S) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        U \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro: ChiRel_ChiStar_trans)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ChiRel_ChiStar_notmem:\n  \"\\<lbrakk> TS \\<in> HPT ST; (S,T) \\<in> ChiRel (HA ST); \n     S \\<in> ChiStar (HA ST) `` Source TS \\<rbrakk> \\<Longrightarrow> T \\<notin> Source TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n     S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> Source TS", "using [[hypsubst_thin = true]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n     S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> Source TS", "apply (unfold HPT_def MaxNonConflict_def HigherPriority_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                          (\\<forall>A\\<in>SAs (HA ST).\n                              card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                          (\\<forall>t\\<in>ET ST.\n                              (t \\<in> T) =\n                              (\\<not> (\\<exists>t'\\<in>ET ST.\n    if (t', t) \\<in> HADelta (HA ST) \\<times> HADelta (HA ST)\n    then case (t', t) of\n         (t, t') \\<Rightarrow> (source t', source t) \\<in> ChiPlus (HA ST)\n    else SOME y. True)))};\n     (S, T) \\<in> ChiRel (HA ST);\n     S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> Source TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(S, T) \\<in> ChiRel (HA ST); (x, S) \\<in> ChiStar (HA ST);\n        x \\<in> Source TS; TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        T \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac U)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U.\n       \\<lbrakk>(S, T) \\<in> ChiRel (HA ST); (U, S) \\<in> ChiStar (HA ST);\n        U \\<in> Source TS; TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        T \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold Source_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U.\n       \\<lbrakk>(S, T) \\<in> ChiRel (HA ST); (U, S) \\<in> ChiStar (HA ST);\n        U \\<in> {y. \\<exists>x\\<in>TS. y = source x}; TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        T \\<in> {y. \\<exists>x\\<in>TS. y = source x}\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba ad ae af ag bb bc.\n       \\<lbrakk>(S, ad) \\<in> ChiRel (HA ST); (a, S) \\<in> ChiStar (HA ST);\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        (a, (aa, ab, ac, b), ba) \\<in> TS;\n        (ad, (ae, af, ag, bb), bc) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac SSource STrigger SGuard SAction SUpdate STarget \n                  TSource TTrigger TGuard TAction TUpdate TTarget)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=\"(SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        ((SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n         \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST.\n            \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                       (SSource, (STrigger, SGuard, SAction, SUpdate),\n                        STarget)\n                       \\<in> HADelta (HA ST)\n                    then (source\n                           (SSource, (STrigger, SGuard, SAction, SUpdate),\n                            STarget),\n                          source t')\n                         \\<in> ChiPlus (HA ST)\n                    else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t'\\<in>ET ST.\n           \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                      (SSource, (STrigger, SGuard, SAction, SUpdate),\n                       STarget)\n                      \\<in> HADelta (HA ST)\n                   then (source\n                          (SSource, (STrigger, SGuard, SAction, SUpdate),\n                           STarget),\n                         source t')\n                        \\<in> ChiPlus (HA ST)\n                   else SOME y. True);\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=\"(TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        \\<not> (if (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n                   \\<in> HADelta (HA ST) \\<and>\n                   (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n                   \\<in> HADelta (HA ST)\n                then (source\n                       (SSource, (STrigger, SGuard, SAction, SUpdate),\n                        STarget),\n                      source\n                       (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                        TTarget))\n                     \\<in> ChiPlus (HA ST)\n                else SOME y. True)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        \\<not> (if (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n                   \\<in> HADelta (HA ST) \\<and>\n                   (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n                   \\<in> HADelta (HA ST)\n                then (source\n                       (SSource, (STrigger, SGuard, SAction, SUpdate),\n                        STarget),\n                      source\n                       (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                        TTarget))\n                     \\<in> ChiPlus (HA ST)\n                else SOME y. True)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: ET_HADelta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"SSource=S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST); SSource = S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        SSource \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        SSource \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule ChiStar_ChiPlus_noteq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        SSource \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> (SSource, S)\n                         \\<in> ChiStar\n                                (?A58 SSource STrigger SGuard SAction\n                                  SUpdate STarget TSource TTrigger TGuard\n                                  TAction TUpdate TTarget)\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST); SSource \\<noteq> S;\n        (SSource, S)\n        \\<in> ChiPlus\n               (?A58 SSource STrigger SGuard SAction SUpdate STarget TSource\n                 TTrigger TGuard TAction TUpdate TTarget)\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(S, TSource) \\<in> ChiRel (HA ST);\n        (SSource, S) \\<in> ChiStar (HA ST); TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST); SSource \\<noteq> S;\n        (SSource, S) \\<in> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro: ChiRel_ChiPlus_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>StepActEvents\\<close>\\<close>"], ["", "lemma StepActEvent_empty [simp]:\n  \"StepActEvent {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StepActEvent {} = {}", "by (unfold StepActEvent_def, auto)"], ["", "lemma StepActEvent_HAEvents:\n \"TS \\<in> HPT ST \\<Longrightarrow> StepActEvent TS \\<subseteq> HAEvents (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    StepActEvent TS \\<subseteq> HAEvents (HA ST)", "apply (unfold StepActEvent_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    \\<Union> (Actevent (Label TS)) \\<subseteq> HAEvents (HA ST)", "apply (rule HPT_ETI [THEN TS_EventSet])"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow> TS \\<in> HPT ST", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>UniqueSucStates\\<close>\\<close>"], ["", "lemma UniqueSucStates_Status [simp]:\n  \"UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)", "apply (cut_tac Rep_status_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> status \\<Longrightarrow>\n    UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)", "apply (unfold status_def Status_def IsConfSet_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           (C \\<subseteq> \\<Union> (States ` SAs HA) \\<and>\n            RootExSem (SAs HA) (CompFun HA) C \\<and>\n            UniqueSucStates (SAs HA) (CompFun HA) C) \\<and>\n           Data.DataSpace (HAInitValue HA) =\n           Data.DataSpace D} \\<Longrightarrow>\n    UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>RootState\\<close>\\<close>"], ["", "lemma RootExSem_Status [simp]:\n  \"RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)", "apply (cut_tac Rep_status_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> status \\<Longrightarrow>\n    RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)", "apply (unfold status_def Status_def IsConfSet_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           (C \\<subseteq> \\<Union> (States ` SAs HA) \\<and>\n            RootExSem (SAs HA) (CompFun HA) C \\<and>\n            UniqueSucStates (SAs HA) (CompFun HA) C) \\<and>\n           Data.DataSpace (HAInitValue HA) =\n           Data.DataSpace D} \\<Longrightarrow>\n    RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma RootState_HARootState [simp]:\n  \"(RootState ST) \\<in> States (HARoot (HA ST))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RootState ST \\<in> States (HARoot (HA ST))", "apply (unfold RootState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME S. S \\<in> Conf ST \\<and> S \\<in> States (HARoot (HA ST)))\n    \\<in> States (HARoot (HA ST))", "apply (cut_tac ST=ST in RootExSem_Status)"], ["proof (prove)\ngoal (1 subgoal):\n 1. RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<Longrightarrow>\n    (SOME S. S \\<in> Conf ST \\<and> S \\<in> States (HARoot (HA ST)))\n    \\<in> States (HARoot (HA ST))", "apply (unfold RootExSem_def HARoot_def HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!S.\n       S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n       S \\<in> Conf ST \\<Longrightarrow>\n    (SOME S.\n        S \\<in> Conf ST \\<and>\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST))))\n    \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>\\<forall>y y'.\n                   y \\<in> States\n                            (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y \\<in> Conf ST \\<and>\n                   y' \\<in> States\n                             (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y' \\<in> Conf ST \\<longrightarrow>\n                   y = y';\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)));\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> (SOME S.\n                             S \\<in> Conf ST \\<and>\n                             S \\<in> States\n(Root (SAs (HA ST)) (CompFun (HA ST))))\n                         \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)))", "apply (subst some1_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>\\<forall>y y'.\n                   y \\<in> States\n                            (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y \\<in> Conf ST \\<and>\n                   y' \\<in> States\n                             (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y' \\<in> Conf ST \\<longrightarrow>\n                   y = y';\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)));\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!x.\n                            x \\<in> Conf ST \\<and>\n                            x \\<in> States\n                                     (Root (SAs (HA ST)) (CompFun (HA ST)))\n 2. \\<And>S.\n       \\<lbrakk>\\<forall>y y'.\n                   y \\<in> States\n                            (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y \\<in> Conf ST \\<and>\n                   y' \\<in> States\n                             (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y' \\<in> Conf ST \\<longrightarrow>\n                   y = y';\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)));\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?y4 S \\<in> Conf ST \\<and>\n                         ?y4 S\n                         \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)))\n 3. \\<And>S.\n       \\<lbrakk>\\<forall>y y'.\n                   y \\<in> States\n                            (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y \\<in> Conf ST \\<and>\n                   y' \\<in> States\n                             (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y' \\<in> Conf ST \\<longrightarrow>\n                   y = y';\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)));\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?y4 S\n                         \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma RootState_Conf [simp]:\n  \"(RootState ST) \\<in> (Conf ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RootState ST \\<in> Conf ST", "apply (unfold RootState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME S. S \\<in> Conf ST \\<and> S \\<in> States (HARoot (HA ST)))\n    \\<in> Conf ST", "apply (cut_tac ST=ST in RootExSem_Status)"], ["proof (prove)\ngoal (1 subgoal):\n 1. RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<Longrightarrow>\n    (SOME S. S \\<in> Conf ST \\<and> S \\<in> States (HARoot (HA ST)))\n    \\<in> Conf ST", "apply (unfold RootExSem_def HARoot_def HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!S.\n       S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n       S \\<in> Conf ST \\<Longrightarrow>\n    (SOME S.\n        S \\<in> Conf ST \\<and>\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST))))\n    \\<in> Conf ST", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>\\<forall>y y'.\n                   y \\<in> States\n                            (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y \\<in> Conf ST \\<and>\n                   y' \\<in> States\n                             (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y' \\<in> Conf ST \\<longrightarrow>\n                   y = y';\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)));\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> (SOME S.\n                             S \\<in> Conf ST \\<and>\n                             S \\<in> States\n(Root (SAs (HA ST)) (CompFun (HA ST))))\n                         \\<in> Conf ST", "apply (subst some1_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>\\<forall>y y'.\n                   y \\<in> States\n                            (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y \\<in> Conf ST \\<and>\n                   y' \\<in> States\n                             (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y' \\<in> Conf ST \\<longrightarrow>\n                   y = y';\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)));\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!x.\n                            x \\<in> Conf ST \\<and>\n                            x \\<in> States\n                                     (Root (SAs (HA ST)) (CompFun (HA ST)))\n 2. \\<And>S.\n       \\<lbrakk>\\<forall>y y'.\n                   y \\<in> States\n                            (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y \\<in> Conf ST \\<and>\n                   y' \\<in> States\n                             (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y' \\<in> Conf ST \\<longrightarrow>\n                   y = y';\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)));\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?y4 S \\<in> Conf ST \\<and>\n                         ?y4 S\n                         \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)))\n 3. \\<And>S.\n       \\<lbrakk>\\<forall>y y'.\n                   y \\<in> States\n                            (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y \\<in> Conf ST \\<and>\n                   y' \\<in> States\n                             (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n                   y' \\<in> Conf ST \\<longrightarrow>\n                   y = y';\n        S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST)));\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?y4 S \\<in> Conf ST", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma RootState_notmem_Chi [simp]:\n  \"S \\<in> HAStates (HA ST) \\<Longrightarrow> (RootState ST) \\<notin> Chi (HA ST) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> HAStates (HA ST) \\<Longrightarrow>\n    RootState ST \\<notin> Chi (HA ST) S", "by auto"], ["", "lemma RootState_notmem_Range_ChiRel [simp]:\n  \"RootState ST \\<notin> Range (ChiRel (HA ST))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RootState ST \\<notin> Range (ChiRel (HA ST))", "by auto"], ["", "lemma RootState_Range_ChiPlus [simp]:\n  \"RootState ST \\<notin> Range (ChiPlus (HA ST))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RootState ST \\<notin> Range (ChiPlus (HA ST))", "by auto"], ["", "lemma RootState_Range_ChiStar [simp]:\n  \"\\<lbrakk> x \\<noteq> RootState ST \\<rbrakk> \\<Longrightarrow> (x,RootState ST) \\<notin> (ChiStar (HA ST))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> RootState ST \\<Longrightarrow>\n    (x, RootState ST) \\<notin> ChiStar (HA ST)", "by auto"], ["", "lemma RootState_notmem_ChiRel [simp]:\n  \"(x,RootState ST) \\<notin> (ChiRel (HA ST))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, RootState ST) \\<notin> ChiRel (HA ST)", "by (unfold ChiRel_def, auto)"], ["", "lemma RootState_notmem_ChiRel2 [simp]:\n  \"\\<lbrakk> S \\<in> States (HARoot (HA ST))  \\<rbrakk> \\<Longrightarrow> (x,S) \\<notin> (ChiRel (HA ST))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> States (HARoot (HA ST)) \\<Longrightarrow>\n    (x, S) \\<notin> ChiRel (HA ST)", "by (unfold ChiRel_def, auto)"], ["", "lemma RootState_Conf_StepConf [simp]:\n  \"\\<lbrakk> RootState ST \\<notin> Source TS \\<rbrakk> \\<Longrightarrow> RootState ST \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RootState ST \\<notin> Source TS \\<Longrightarrow>\n    RootState ST \\<in> StepConf (HA ST) (Conf ST) TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. RootState ST \\<notin> Source TS \\<Longrightarrow>\n    RootState ST\n    \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union> Target TS \\<union>\n          ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST) \\<union>\n          (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n          (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (x, RootState ST) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> ChiRel (HA ST) `` Target TS\n 2. \\<And>x.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (x, RootState ST) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> HAInitStates (HA ST)", "apply (rename_tac S)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (S, RootState ST) \\<in> ChiStar (HA ST); S \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> ChiRel (HA ST) `` Target TS\n 2. \\<And>x.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (x, RootState ST) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> HAInitStates (HA ST)", "apply (case_tac \"S=RootState ST\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (S, RootState ST) \\<in> ChiStar (HA ST); S \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        S = RootState ST\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> ChiRel (HA ST) `` Target TS\n 2. \\<And>S.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (S, RootState ST) \\<in> ChiStar (HA ST); S \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        S \\<noteq> RootState ST\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> ChiRel (HA ST) `` Target TS\n 3. \\<And>x.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (x, RootState ST) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> HAInitStates (HA ST)", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (S, RootState ST) \\<in> ChiStar (HA ST); S \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        S \\<noteq> RootState ST\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> ChiRel (HA ST) `` Target TS\n 2. \\<And>x.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (x, RootState ST) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> HAInitStates (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (x, RootState ST) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> HAInitStates (HA ST)", "apply (rename_tac S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (S, RootState ST) \\<in> ChiStar (HA ST); S \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> HAInitStates (HA ST)", "apply (case_tac \"S=RootState ST\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (S, RootState ST) \\<in> ChiStar (HA ST); S \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        S = RootState ST\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> HAInitStates (HA ST)\n 2. \\<And>S.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (S, RootState ST) \\<in> ChiStar (HA ST); S \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        S \\<noteq> RootState ST\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> HAInitStates (HA ST)", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>RootState ST \\<notin> Source TS;\n        (S, RootState ST) \\<in> ChiStar (HA ST); S \\<in> Source TS;\n        RootState ST \\<notin> Target TS;\n        RootState ST\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        S \\<noteq> RootState ST\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> HAInitStates (HA ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneRootState_Conf [simp]:\n  \"\\<lbrakk> S \\<in> States (HARoot (HA ST)); S \\<in> Conf ST \\<rbrakk> \\<Longrightarrow> S = RootState ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> States (HARoot (HA ST)); S \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> S = RootState ST", "apply (cut_tac ST=ST in IsConfSet_Status)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> States (HARoot (HA ST)); S \\<in> Conf ST;\n     IsConfSet (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\\<rbrakk>\n    \\<Longrightarrow> S = RootState ST", "apply (unfold IsConfSet_def RootExSem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> States (HARoot (HA ST)); S \\<in> Conf ST;\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     (\\<exists>!S.\n         S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n         S \\<in> Conf ST) \\<and>\n     UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\\<rbrakk>\n    \\<Longrightarrow> S = RootState ST", "apply (fold HARoot_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> States (HARoot (HA ST)); S \\<in> Conf ST;\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     (\\<exists>!S.\n         S \\<in> States (HARoot (HA ST)) \\<and> S \\<in> Conf ST) \\<and>\n     UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\\<rbrakk>\n    \\<Longrightarrow> S = RootState ST", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneRootState_Source:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Source TS; S \\<in> States (HARoot (HA ST)) \\<rbrakk> \\<Longrightarrow> S = RootState ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS;\n     S \\<in> States (HARoot (HA ST))\\<rbrakk>\n    \\<Longrightarrow> S = RootState ST", "apply (cut_tac ST=ST and TS=TS in HPT_Source_Conf, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS;\n     S \\<in> States (HARoot (HA ST)); Source TS \\<subseteq> Conf ST\\<rbrakk>\n    \\<Longrightarrow> S = RootState ST", "apply (cut_tac ST=ST in OneRootState_Conf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS;\n     S \\<in> States (HARoot (HA ST)); Source TS \\<subseteq> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?S2 \\<in> States (HARoot (HA ST))\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS;\n     S \\<in> States (HARoot (HA ST)); Source TS \\<subseteq> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?S2 \\<in> Conf ST\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS;\n     S \\<in> States (HARoot (HA ST)); Source TS \\<subseteq> Conf ST;\n     ?S2 = RootState ST\\<rbrakk>\n    \\<Longrightarrow> S = RootState ST", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneState_HPT_Target_Source:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n     States SA \\<inter> Source TS = {} \\<rbrakk> \n   \\<Longrightarrow> S \\<notin> Target TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n     States SA \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> Target TS", "apply (unfold Target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n     States SA \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> target ` TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n        States SA \\<inter> Source TS = {};\n        (a, (aa, ab, ac, b), S) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold Source_def Image_def Int_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n        {x \\<in> States SA. x \\<in> source ` TS} = {};\n        (a, (aa, ab, ac, b), S) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n        \\<forall>x.\n           x \\<in> States SA \\<longrightarrow> x \\<notin> source ` TS;\n        (a, (aa, ab, ac, b), S) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule HPT_target_source)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a aa ab ac b.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n        \\<forall>x.\n           x \\<in> States SA \\<longrightarrow> x \\<notin> source ` TS;\n        (a, (aa, ab, ac, b), S) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> ?t9 a aa ab ac b \\<in> TS\n 2. \\<And>a aa ab ac b.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n        \\<forall>x.\n           x \\<in> States SA \\<longrightarrow> x \\<notin> source ` TS;\n        (a, (aa, ab, ac, b), S) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> target (?t9 a aa ab ac b)\n                         \\<in> States (?A9 a aa ab ac b)\n 3. \\<And>a aa ab ac b.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n        \\<forall>x.\n           x \\<in> States SA \\<longrightarrow> x \\<notin> source ` TS;\n        (a, (aa, ab, ac, b), S) \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> ?A9 a aa ab ac b \\<in> SAs (HA ST)\n 4. \\<And>a aa ab ac b.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States SA; SA \\<in> SAs (HA ST);\n        \\<forall>x.\n           x \\<in> States SA \\<longrightarrow> x \\<notin> source ` TS;\n        (a, (aa, ab, ac, b), S) \\<in> TS;\n        source (?t9 a aa ab ac b) \\<in> States (?A9 a aa ab ac b)\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma RootState_notmem_Target [simp]:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST)); RootState ST \\<notin> Source TS \\<rbrakk> \\<Longrightarrow> S \\<notin> Target TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> Target TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule OneState_HPT_Target_Source)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?S1 \\<in> States ?SA1\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?SA1 \\<in> SAs (HA ST)\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> States ?SA1 \\<inter> Source TS = {}\n 4. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS;\n     ?S1 \\<notin> Target TS\\<rbrakk>\n    \\<Longrightarrow> False", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS;\n     ?S1 \\<notin> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?S1 \\<in> States ?SA1\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?SA1 \\<in> SAs (HA ST)\n 4. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> States ?SA1 \\<inter> Source TS = {}", "apply fast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> HARoot (HA ST) \\<in> SAs (HA ST)\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> States (HARoot (HA ST)) \\<inter> Source TS = {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> States (HARoot (HA ST)) \\<inter> Source TS = {}", "apply (unfold Int_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n     RootState ST \\<notin> Source TS; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> {x \\<in> States (HARoot (HA ST)). x \\<in> Source TS} =\n                      {}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        RootState ST \\<notin> Source TS; S \\<in> Target TS;\n        x \\<in> States (HARoot (HA ST)); x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule OneRootState_Source)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        RootState ST \\<notin> Source TS; S \\<in> Target TS;\n        x \\<in> States (HARoot (HA ST)); x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> ?S14 x \\<in> Source TS\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        RootState ST \\<notin> Source TS; S \\<in> Target TS;\n        x \\<in> States (HARoot (HA ST)); x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> ?S14 x \\<in> States (HARoot (HA ST))\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        RootState ST \\<notin> Source TS; S \\<in> Target TS;\n        x \\<in> States (HARoot (HA ST)); x \\<in> Source TS;\n        ?S14 x = RootState ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Configuration \\<open>Conf\\<close>\\<close>"], ["", "lemma Conf_HAStates:\n \"Conf ST \\<subseteq> HAStates (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conf ST \\<subseteq> HAStates (HA ST)", "apply (cut_tac Rep_status_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> status \\<Longrightarrow>\n    Conf ST \\<subseteq> HAStates (HA ST)", "apply (unfold IsConfSet_def status_def Status_def HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HA ?ST1, Conf ?ST1, Events ?ST1, Value ?ST1)\n    \\<in> {(HA, C, E, D) |HA C E D.\n           E \\<subseteq> HAEvents HA \\<and>\n           (C \\<subseteq> \\<Union> (States ` SAs HA) \\<and>\n            RootExSem (SAs HA) (CompFun HA) C \\<and>\n            UniqueSucStates (SAs HA) (CompFun HA) C) \\<and>\n           Data.DataSpace (HAInitValue HA) =\n           Data.DataSpace D} \\<Longrightarrow>\n    Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST))", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Conf_HAStates2 [simp]:\n  \"S \\<in> Conf ST \\<Longrightarrow> S \\<in> HAStates (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> Conf ST \\<Longrightarrow> S \\<in> HAStates (HA ST)", "apply (cut_tac ST=\"ST\" in Conf_HAStates)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; Conf ST \\<subseteq> HAStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (HA ST)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneState_Conf [intro]:\n  \"\\<lbrakk> S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA; T \\<in> States SA;\n     SA \\<in> SAs (HA ST)\\<rbrakk> \\<Longrightarrow> T = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (cut_tac ST=ST in IsConfSet_Status)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     IsConfSet (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (unfold IsConfSet_def UniqueSucStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST)\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (case_tac \"SA = HARoot (HA ST)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST);\n     SA = HARoot (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = S\n 2. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST);\n     SA \\<noteq> HARoot (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (cut_tac ST=ST and S=S in OneRootState_Conf)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST);\n     SA = HARoot (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States (HARoot (HA ST))\n 2. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST);\n     SA = HARoot (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Conf ST\n 3. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST);\n     SA = HARoot (HA ST); S = RootState ST\\<rbrakk>\n    \\<Longrightarrow> T = S\n 4. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST);\n     SA \\<noteq> HARoot (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply fast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST);\n     SA = HARoot (HA ST); S = RootState ST\\<rbrakk>\n    \\<Longrightarrow> T = S\n 2. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST);\n     SA \\<noteq> HARoot (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (simp only:OneRootState_Conf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST);\n     SA \\<noteq> HARoot (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (cut_tac HA=\"HA ST\" in OneAncestor_HA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     OneAncestor (SAs (HA ST)) (CompFun (HA ST))\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (unfold OneAncestor_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     \\<forall>A\\<in>SAs (HA ST) - {Root (SAs (HA ST)) (CompFun (HA ST))}.\n        \\<exists>!s.\n           s \\<in> \\<Union> (States ` (SAs (HA ST) - {A})) \\<and>\n           A \\<in> the (CompFun (HA ST) s)\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (fold HARoot_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     \\<forall>A\\<in>SAs (HA ST) - {HARoot (HA ST)}.\n        \\<exists>!s.\n           s \\<in> \\<Union> (States ` (SAs (HA ST) - {A})) \\<and>\n           A \\<in> the (CompFun (HA ST) s)\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (erule_tac x=SA in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     \\<exists>!s.\n        s \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) s)\\<rbrakk>\n    \\<Longrightarrow> T = S\n 2. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     SA \\<notin> SAs (HA ST) - {HARoot (HA ST)}\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (drule ex1_implies_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     \\<exists>s.\n        s \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) s)\\<rbrakk>\n    \\<Longrightarrow> T = S\n 2. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     SA \\<notin> SAs (HA ST) - {HARoot (HA ST)}\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        s \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) s)\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     SA \\<notin> SAs (HA ST) - {HARoot (HA ST)}\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (rename_tac U)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U)\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     SA \\<notin> SAs (HA ST) - {HARoot (HA ST)}\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (erule_tac x=U in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        \\<forall>A\\<in>the (CompFun (HA ST) U).\n           if U \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        U \\<notin> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> T = S\n 3. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     SA \\<notin> SAs (HA ST) - {HARoot (HA ST)}\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (erule_tac x=SA in ballE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        if U \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        SA \\<notin> the (CompFun (HA ST) U)\\<rbrakk>\n       \\<Longrightarrow> T = S\n 3. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        U \\<notin> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> T = S\n 4. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     SA \\<notin> SAs (HA ST) - {HARoot (HA ST)}\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply (case_tac \"U \\<in> Conf ST\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        if U \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST;\n        U \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        if U \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST;\n        U \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = S\n 3. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        SA \\<notin> the (CompFun (HA ST) U)\\<rbrakk>\n       \\<Longrightarrow> T = S\n 4. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        U \\<notin> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> T = S\n 5. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     SA \\<notin> SAs (HA ST) - {HARoot (HA ST)}\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        (\\<exists>x\\<in>SAs (HA ST) - {SA}. U \\<in> States x) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST;\n        U \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        if U \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST;\n        U \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = S\n 3. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        SA \\<notin> the (CompFun (HA ST) U)\\<rbrakk>\n       \\<Longrightarrow> T = S\n 4. \\<And>U.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<in> \\<Union> (States ` (SAs (HA ST) - {SA})) \\<and>\n        SA \\<in> the (CompFun (HA ST) U);\n        U \\<notin> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> T = S\n 5. \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n     T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     SA \\<notin> SAs (HA ST) - {HARoot (HA ST)}\\<rbrakk>\n    \\<Longrightarrow> T = S", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U S' x.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        U \\<in> Conf ST;\n        \\<forall>y y'.\n           (y \\<in> States SA \\<and> y \\<in> Conf ST) \\<and>\n           y' \\<in> States SA \\<and> y' \\<in> Conf ST \\<longrightarrow>\n           y = y';\n        SA \\<in> the (CompFun (HA ST) U); U \\<in> States x;\n        x \\<in> SAs (HA ST); T \\<noteq> S; x \\<notin> {};\n        S' \\<in> States SA; S' \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> x = SA\n 2. \\<And>U x.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        if U \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST;\n        U \\<notin> Conf ST; SA \\<in> the (CompFun (HA ST) U);\n        U \\<in> States x; x \\<in> SAs (HA ST); T \\<noteq> S;\n        x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = SA\n 3. \\<And>U x.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<notin> \\<Union> (States ` SAs (HA ST));\n        SA \\<in> the (CompFun (HA ST) U); U \\<in> States x;\n        x \\<in> SAs (HA ST); T \\<noteq> S; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = SA", "apply fast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U x.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        if U \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST;\n        U \\<notin> Conf ST; SA \\<in> the (CompFun (HA ST) U);\n        U \\<in> States x; x \\<in> SAs (HA ST); T \\<noteq> S;\n        x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = SA\n 2. \\<And>U x.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<notin> \\<Union> (States ` SAs (HA ST));\n        SA \\<in> the (CompFun (HA ST) U); U \\<in> States x;\n        x \\<in> SAs (HA ST); T \\<noteq> S; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = SA", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U x.\n       \\<lbrakk>S \\<in> Conf ST; T \\<in> Conf ST; S \\<in> States SA;\n        T \\<in> States SA; SA \\<in> SAs (HA ST); SA \\<noteq> HARoot (HA ST);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        U \\<notin> \\<Union> (States ` SAs (HA ST));\n        SA \\<in> the (CompFun (HA ST) U); U \\<in> States x;\n        x \\<in> SAs (HA ST); T \\<noteq> S; x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> x = SA", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneState_HPT_SA:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; \n     SA \\<in> SAs (HA ST) \\<rbrakk> \\<Longrightarrow> S = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S = T", "apply (rule OneState_Conf)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T \\<in> Conf ?ST\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Conf ?ST\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States ?SA\n 4. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States ?SA\n 5. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?SA \\<in> SAs (HA ?ST)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> T \\<in> Conf ST\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS; T \\<in> Source TS;\n     S \\<in> States SA; T \\<in> States SA; SA \\<in> SAs (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Conf ST", "apply (frule HPT_Source_Conf, fast)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_SAStates_Target_Source:\n   \"\\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A; T \\<in> States A; S \\<in> Conf ST;\n     T \\<in> Target TS \\<rbrakk> \\<Longrightarrow> S \\<in> Source TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS", "apply (case_tac \"States A \\<inter> Source TS ={}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS\n 2. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS", "apply (frule OneState_HPT_Target_Source)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> ?S1 \\<in> States ?SA1\n 2. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> ?SA1 \\<in> SAs (HA ST)\n 3. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> States ?SA1 \\<inter> Source TS = {}\n 4. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}; ?S1 \\<notin> Target TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS\n 5. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> SAs (HA ST)\n 2. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> States A \\<inter> Source TS = {}\n 3. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}; S \\<notin> Target TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS\n 4. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS", "back"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> SAs (HA ST)\n 2. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> States A \\<inter> Source TS = {}\n 3. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS = {}; T \\<notin> Target TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS\n 4. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n     T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n     States A \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; x \\<in> States A; x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac U)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; U \\<in> States A; U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac ST=ST in HPT_Source_Conf)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; U \\<in> States A; U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> ?TS13 U \\<in> HPT ST\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; U \\<in> States A; U \\<in> Source TS;\n        Source (?TS13 U) \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; U \\<in> States A; U \\<in> Source TS;\n        Source TS \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac S=S and T=U in OneState_Conf)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; U \\<in> States A; U \\<in> Source TS;\n        Source TS \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Conf ST\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; U \\<in> States A; U \\<in> Source TS;\n        Source TS \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> States (?SA17 U)\n 3. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; U \\<in> States A; U \\<in> Source TS;\n        Source TS \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> U \\<in> States (?SA17 U)\n 4. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; U \\<in> States A; U \\<in> Source TS;\n        Source TS \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?SA17 U \\<in> SAs (HA ST)\n 5. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST); S \\<in> States A;\n        T \\<in> States A; S \\<in> Conf ST; T \\<in> Target TS;\n        S \\<notin> Source TS; U \\<in> States A; U \\<in> Source TS;\n        Source TS \\<subseteq> Conf ST; U = S\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_Conf_Target_Source:\n   \"\\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n     S \\<in> Target TS \\<rbrakk> \\<Longrightarrow> S \\<in> Source TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS", "apply (frule Conf_HAStates2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST; S \\<in> Target TS;\n     S \\<in> HAStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST; S \\<in> Target TS;\n     S \\<in> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Source TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST; S \\<in> Target TS;\n        x \\<in> SAs (HA ST); S \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Source TS", "apply (simp only:HPT_SAStates_Target_Source)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Conf_SA:\n  \"S \\<in> Conf ST \\<Longrightarrow> \\<exists> A \\<in> SAs (HA ST). S \\<in> States A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> Conf ST \\<Longrightarrow>\n    \\<exists>A\\<in>SAs (HA ST). S \\<in> States A", "apply (cut_tac ST=ST in IsConfSet_Status)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST;\n     IsConfSet (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>A\\<in>SAs (HA ST). S \\<in> States A", "apply (unfold IsConfSet_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST;\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>A\\<in>SAs (HA ST). S \\<in> States A", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_Source_HAStates [simp]:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Source TS \\<rbrakk> \\<Longrightarrow> S \\<in> HAStates (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (HA ST)", "apply (frule HPT_Source_Conf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS;\n     Source TS \\<subseteq> Conf ST\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (HA ST)", "apply (rule Conf_HAStates2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Source TS;\n     Source TS \\<subseteq> Conf ST\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Conf ST", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Conf_Ancestor: \n  \"\\<lbrakk> S \\<in> Conf ST;  A \\<in> the (CompFun (HA ST) S) \\<rbrakk> \\<Longrightarrow> \\<exists>! T \\<in> States A. T \\<in> Conf ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!T. T \\<in> States A \\<and> T \\<in> Conf ST", "apply (cut_tac ST=ST in IsConfSet_Status)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     IsConfSet (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!T. T \\<in> States A \\<and> T \\<in> Conf ST", "apply (unfold IsConfSet_def UniqueSucStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST) \\<and>\n     (\\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n         \\<forall>A\\<in>the (CompFun (HA ST) S).\n            if S \\<in> Conf ST\n            then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n            else \\<forall>S\\<in>States A. S \\<notin> Conf ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!T. T \\<in> States A \\<and> T \\<in> Conf ST", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 2. \\<And>T y.\n       \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        T \\<in> States A; T \\<in> Conf ST; y \\<in> States A;\n        y \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = y", "apply (erule_tac x=S in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>A\\<in>the (CompFun (HA ST) S).\n        if S \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 2. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     S \\<notin> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 3. \\<And>T y.\n       \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        T \\<in> States A; T \\<in> Conf ST; y \\<in> States A;\n        y \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = y", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     S \\<notin> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 2. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>A\\<in>the (CompFun (HA ST) S).\n        if S \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 3. \\<And>T y.\n       \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        T \\<in> States A; T \\<in> Conf ST; y \\<in> States A;\n        y \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = y", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     \\<forall>A\\<in>the (CompFun (HA ST) S).\n        if S \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 2. \\<And>T y.\n       \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        T \\<in> States A; T \\<in> Conf ST; y \\<in> States A;\n        y \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = y", "apply (erule_tac x=A in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     if S \\<in> Conf ST\n     then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n     else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 2. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     A \\<notin> the (CompFun (HA ST) S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 3. \\<And>T y.\n       \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        T \\<in> States A; T \\<in> Conf ST; y \\<in> States A;\n        y \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = y", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     A \\<notin> the (CompFun (HA ST) S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 2. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     if S \\<in> Conf ST\n     then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n     else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 3. \\<And>T y.\n       \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        T \\<in> States A; T \\<in> Conf ST; y \\<in> States A;\n        y \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = y", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n     if S \\<in> Conf ST\n     then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n     else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 2. \\<And>T y.\n       \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        T \\<in> States A; T \\<in> Conf ST; y \\<in> States A;\n        y \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = y", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n     Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n     \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T. T \\<in> States A \\<and> T \\<in> Conf ST\n 2. \\<And>T y.\n       \\<lbrakk>S \\<in> Conf ST; A \\<in> the (CompFun (HA ST) S);\n        Conf ST \\<subseteq> \\<Union> (States ` SAs (HA ST));\n        RootExSem (SAs (HA ST)) (CompFun (HA ST)) (Conf ST);\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n        T \\<in> States A; T \\<in> Conf ST; y \\<in> States A;\n        y \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = y", "apply (fast intro: HAStates_CompFun_SAs_mem Conf_HAStates2)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Conf_ChiRel: \n   \"\\<lbrakk> (S,T) \\<in> ChiRel (HA ST); T \\<in> Conf ST \\<rbrakk> \\<Longrightarrow> S \\<in> Conf ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(S, T) \\<in> ChiRel (HA ST); T \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Conf ST", "apply (unfold ChiRel_def Chi_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(S, T)\n             \\<in> {(S, S').\n                    S \\<in> HAStates (HA ST) \\<and>\n                    S' \\<in> HAStates (HA ST) \\<and>\n                    S' \\<in> (if S \\<in> HAStates (HA ST)\n                              then {S'.\n                                    \\<exists>SA\\<in>SAs (HA ST).\n SA \\<in> the (CompFun (HA ST) S) \\<and> S' \\<in> States SA}\n                              else SOME y. True)};\n     T \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Conf ST", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> HAStates (HA ST) \\<and>\n             T \\<in> (if S \\<in> HAStates (HA ST)\n                      then {S'.\n                            \\<exists>SA\\<in>SAs (HA ST).\n                               SA \\<in> the (CompFun (HA ST) S) \\<and>\n                               S' \\<in> States SA}\n                      else SOME y. True);\n     T \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Conf ST", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<in> Conf ST; S \\<in> HAStates (HA ST);\n     T \\<in> (if S \\<in> HAStates (HA ST)\n              then {S'.\n                    \\<exists>SA\\<in>SAs (HA ST).\n                       SA \\<in> the (CompFun (HA ST) S) \\<and>\n                       S' \\<in> States SA}\n              else SOME y. True)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Conf ST", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<in> Conf ST; S \\<in> HAStates (HA ST);\n     \\<exists>SA\\<in>SAs (HA ST).\n        SA \\<in> the (CompFun (HA ST) S) \\<and> T \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> Conf ST", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>T \\<in> Conf ST; S \\<in> HAStates (HA ST);\n        SA \\<in> SAs (HA ST); SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply (rename_tac SA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>T \\<in> Conf ST; S \\<in> HAStates (HA ST);\n        SA \\<in> SAs (HA ST); SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>T \\<in> Conf ST; S \\<in> \\<Union> (States ` SAs (HA ST));\n        SA \\<in> SAs (HA ST); SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA.\n       \\<lbrakk>T \\<in> Conf ST;\n        \\<exists>x\\<in>SAs (HA ST). S \\<in> States x; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA x.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        x \\<in> SAs (HA ST); S \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply (rename_tac U)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply (cut_tac ST=ST in UniqueSucStates_Status)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply (unfold UniqueSucStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n           \\<forall>A\\<in>the (CompFun (HA ST) S).\n              if S \\<in> Conf ST\n              then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n              else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply (erule_tac x=S in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST\n 2. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        S \\<notin> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply (erule_tac x=SA in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        if S \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST\n 2. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        SA \\<notin> the (CompFun (HA ST) S)\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST\n 3. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        S \\<notin> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        if S \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply (case_tac \"S \\<in> Conf ST\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        if S \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST;\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST\n 2. \\<And>SA U.\n       \\<lbrakk>T \\<in> Conf ST; SA \\<in> SAs (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        U \\<in> SAs (HA ST); S \\<in> States U;\n        if S \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States SA \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States SA. S \\<notin> Conf ST;\n        S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Conf_ChiPlus:\n   \"\\<lbrakk> (T,S) \\<in> ChiPlus (HA ST) \\<rbrakk> \\<Longrightarrow>  S \\<in> Conf ST \\<longrightarrow> T \\<in> Conf ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (T, S) \\<in> ChiPlus (HA ST) \\<Longrightarrow>\n    S \\<in> Conf ST \\<longrightarrow> T \\<in> Conf ST", "apply (unfold ChiPlus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T, S) \\<in> (ChiRel (HA ST))\\<^sup>+ \\<Longrightarrow>\n    S \\<in> Conf ST \\<longrightarrow> T \\<in> Conf ST", "apply (rule_tac a=\"T\" and b=\"S\" and r=\"(ChiRel (HA ST))\" in trancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (T, S) \\<in> (ChiRel (HA ST))\\<^sup>+ \\<Longrightarrow>\n    (T, S) \\<in> (ChiRel (HA ST))\\<^sup>+\n 2. \\<And>y.\n       \\<lbrakk>(T, S) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        (T, y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> y \\<in> Conf ST \\<longrightarrow> T \\<in> Conf ST\n 3. \\<And>y z.\n       \\<lbrakk>(T, S) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        (T, y) \\<in> (ChiRel (HA ST))\\<^sup>+; (y, z) \\<in> ChiRel (HA ST);\n        y \\<in> Conf ST \\<longrightarrow> T \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> z \\<in> Conf ST \\<longrightarrow> T \\<in> Conf ST", "apply (fast intro: Conf_ChiRel)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_Conf_Target_Source_ChiPlus:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Conf ST; S \\<in> ChiPlus (HA ST) `` Target TS \\<rbrakk>\n     \\<Longrightarrow> S \\<in> ChiStar (HA ST) `` Source TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n     S \\<in> ChiPlus (HA ST) `` Target TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> ChiStar (HA ST) `` Source TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (x, S) \\<in> ChiPlus (HA ST); x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiStar (HA ST) `` Source TS", "apply (rename_tac T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiStar (HA ST) `` Source TS", "apply (simp add: Image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Source TS.\n                            (x, S) \\<in> ChiStar (HA ST)", "apply (frule HPT_Target_HAStates2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?S1 T \\<in> Target TS\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        ?S1 T \\<in> HAStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Source TS.\n                            (x, S) \\<in> ChiStar (HA ST)", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        T \\<in> HAStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Source TS.\n                            (x, S) \\<in> ChiStar (HA ST)", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        T \\<in> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Source TS.\n                            (x, S) \\<in> ChiStar (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        x \\<in> SAs (HA ST); T \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Source TS.\n                            (x, S) \\<in> ChiStar (HA ST)", "apply (rename_tac SA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T SA.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Source TS.\n                            (x, S) \\<in> ChiStar (HA ST)", "apply (case_tac \"States SA \\<inter> Source TS = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T SA.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA;\n        States SA \\<inter> Source TS = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Source TS.\n                            (x, S) \\<in> ChiStar (HA ST)\n 2. \\<And>T SA.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA;\n        States SA \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Source TS.\n                            (x, S) \\<in> ChiStar (HA ST)", "apply (simp only:OneState_HPT_Target_Source)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T SA.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA;\n        States SA \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Source TS.\n                            (x, S) \\<in> ChiStar (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T SA x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA;\n        \\<forall>x\\<in>Source TS. (x, S) \\<notin> ChiStar (HA ST);\n        x \\<in> States SA; x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac U)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA;\n        \\<forall>x\\<in>Source TS. (x, S) \\<notin> ChiStar (HA ST);\n        U \\<in> States SA; U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=U in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; U \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"U=T\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U = T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST);\n        U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST);\n        U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Conf_ChiPlus)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        S \\<in> Conf ST \\<longrightarrow> T \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        T \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule HPT_Conf_Target_Source)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        T \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?S20 T SA U \\<in> Conf ST\n 2. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        T \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?S20 T SA U \\<in> Target TS\n 3. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        T \\<in> Conf ST; ?S20 T SA U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        T \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Target TS\n 2. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        T \\<in> Conf ST; S \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        T \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T \\<in> Target TS\n 2. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        T \\<in> Conf ST; T \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T SA U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> Conf ST;\n        (T, S) \\<in> ChiPlus (HA ST); T \\<in> Target TS;\n        SA \\<in> SAs (HA ST); T \\<in> States SA; U \\<in> States SA;\n        U \\<in> Source TS; (U, S) \\<notin> ChiStar (HA ST); U \\<noteq> T;\n        T \\<in> Conf ST; T \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:OneState_HPT_SA)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneState_HPT_Target_ChiRel:\n   \"\\<lbrakk> TS \\<in> HPT ST; (U,T) \\<in> ChiRel (HA ST);\n      U \\<in> Target TS; A \\<in> SAs (HA ST); T \\<in> States A;\n      S \\<in> States A \\<rbrakk> \\<Longrightarrow> S \\<notin> Target TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> ChiRel (HA ST);\n     U \\<in> Target TS; A \\<in> SAs (HA ST); T \\<in> States A;\n     S \\<in> States A\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> Target TS", "using [[hypsubst_thin = true]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> ChiRel (HA ST);\n     U \\<in> Target TS; A \\<in> SAs (HA ST); T \\<in> States A;\n     S \\<in> States A\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> Target TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> ChiRel (HA ST);\n     U \\<in> Target TS; A \\<in> SAs (HA ST); T \\<in> States A;\n     S \\<in> States A; S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply (unfold HigherPriority_def restrict_def HPT_def MaxNonConflict_def Target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                          (\\<forall>A\\<in>SAs (HA ST).\n                              card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                          (\\<forall>t\\<in>ET ST.\n                              (t \\<in> T) =\n                              (\\<not> (\\<exists>t'\\<in>ET ST.\n    if (t', t) \\<in> HADelta (HA ST) \\<times> HADelta (HA ST)\n    then case (t', t) of\n         (t, t') \\<Rightarrow> (source t', source t) \\<in> ChiPlus (HA ST)\n    else SOME y. True)))};\n     (U, T) \\<in> ChiRel (HA ST); U \\<in> target ` TS; A \\<in> SAs (HA ST);\n     T \\<in> States A; S \\<in> States A; S \\<in> target ` TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa ab ac b ba ad ae af ag bb bc.\n       \\<lbrakk>(ba, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; bc \\<in> States A;\n        (a, (aa, ab, ac, b), ba) \\<in> TS;\n        (ad, (ae, af, ag, bb), bc) \\<in> TS; TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac SSource STrigger SGuard SAction SUpdate STarget \n                  TSource TTrigger TGuard TAction TUpdate TTarget)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac t=\"(TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\" and TS=TS and ST=ST and A=A in ET_target_source)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> TS \\<subseteq> ET ST\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                          TTarget)\n                         \\<in> TS\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> target\n                          (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                           TTarget)\n                         \\<in> States A\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> SAs (HA ST)\n 5. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> target\n                          (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                           TTarget)\n                         \\<in> States A\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> SAs (HA ST)\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> SAs (HA ST)\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> False", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule ChiRel_HAStates)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        STarget \\<in> HAStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        STarget \\<in> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> False", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac t=\"(SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\" and A=x and ST=ST and TS=TS in ET_target_source)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> TS \\<subseteq> ET ST\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> (SSource, (STrigger, SGuard, SAction, SUpdate),\n                          STarget)\n                         \\<in> TS\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> target\n                          (SSource, (STrigger, SGuard, SAction, SUpdate),\n                           STarget)\n                         \\<in> States x\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAs (HA ST)\n 5. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x;\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> target\n                          (SSource, (STrigger, SGuard, SAction, SUpdate),\n                           STarget)\n                         \\<in> States x\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAs (HA ST)\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x;\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAs (HA ST)\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x;\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States A;\n        x \\<in> SAs (HA ST); STarget \\<in> States x;\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=\"(SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        ((SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n         \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST.\n            \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                       (SSource, (STrigger, SGuard, SAction, SUpdate),\n                        STarget)\n                       \\<in> HADelta (HA ST)\n                    then (source\n                           (SSource, (STrigger, SGuard, SAction, SUpdate),\n                            STarget),\n                          source t')\n                         \\<in> ChiPlus (HA ST)\n                    else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        \\<forall>t'\\<in>ET ST.\n           \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                      (SSource, (STrigger, SGuard, SAction, SUpdate),\n                       STarget)\n                      \\<in> HADelta (HA ST)\n                   then (source\n                          (SSource, (STrigger, SGuard, SAction, SUpdate),\n                           STarget),\n                         source t')\n                        \\<in> ChiPlus (HA ST)\n                   else SOME y. True);\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=\"(TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\" in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        \\<not> (if (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n                   \\<in> HADelta (HA ST) \\<and>\n                   (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n                   \\<in> HADelta (HA ST)\n                then (source\n                       (SSource, (STrigger, SGuard, SAction, SUpdate),\n                        STarget),\n                      source\n                       (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                        TTarget))\n                     \\<in> ChiPlus (HA ST)\n                else SOME y. True)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: ET_HADelta)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac A=\"HA ST\" and S=STarget and T=T and U=TSource in ChiRel_SA_OneAncestor)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> (STarget, T) \\<in> ChiRel (HA ST)\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States\n                                  (?SA34 SSource STrigger SGuard SAction\n                                    SUpdate STarget TSource TTrigger TGuard\n                                    TAction TUpdate TTarget x)\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> TSource\n                         \\<in> States\n                                (?SA34 SSource STrigger SGuard SAction\n                                  SUpdate STarget TSource TTrigger TGuard\n                                  TAction TUpdate TTarget x)\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?SA34 SSource STrigger SGuard SAction SUpdate\n                          STarget TSource TTrigger TGuard TAction TUpdate\n                          TTarget x\n                         \\<in> SAs (HA ST)\n 5. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule ET_Source_Conf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        Source TS \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold Source_def image_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"SSource \\<in>Conf ST\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule subsetCE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<notin> Conf ST;\n        ?c48 SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<notin> TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<notin> Conf ST;\n        ?c48 SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<in> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "back"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST); SSource \\<notin> Conf ST;\n        ?c48 SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<notin> {y. \\<exists>x\\<in>TS. y = source x}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST); SSource \\<notin> Conf ST;\n        ?c48 SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST); SSource \\<notin> Conf ST;\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "back"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST); SSource \\<notin> Conf ST;\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"TSource \\<in>Conf ST\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule subsetCE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<notin> Conf ST;\n        ?c61 SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<notin> TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<notin> Conf ST;\n        ?c61 SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<in> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "back"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST); SSource \\<in> Conf ST;\n        TSource \\<notin> Conf ST;\n        ?c61 SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<notin> {y. \\<exists>x\\<in>TS. y = source x}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST); SSource \\<in> Conf ST;\n        TSource \\<notin> Conf ST;\n        ?c61 SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST); SSource \\<in> Conf ST;\n        TSource \\<notin> Conf ST;\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"STarget=SSource\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        STarget = SSource\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        STarget \\<noteq> SSource\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (SSource, TSource) \\<notin> ChiPlus (HA ST);\n        (STarget, TSource) \\<in> ChiRel (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        STarget \\<noteq> SSource\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(STarget, T) \\<in> ChiRel (HA ST); A \\<in> SAs (HA ST);\n        T \\<in> States A; TTarget \\<in> States A;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        TSource \\<in> States A; x \\<in> SAs (HA ST); STarget \\<in> States x;\n        SSource \\<in> States x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro:Conf_ChiRel)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OneState_HPT_Target_ChiPlus [rule_format]:\n   \"\\<lbrakk> TS \\<in> HPT ST; (U,T) \\<in> ChiPlus (HA ST);\n      S \\<in> Target TS; A \\<in> SAs (HA ST); \n      S \\<in> States A \\<rbrakk> \\<Longrightarrow> T \\<in> States A \\<longrightarrow> U \\<notin> Target TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> ChiPlus (HA ST);\n     S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States A \\<longrightarrow>\n                      U \\<notin> Target TS", "using [[hypsubst_thin = true]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> ChiPlus (HA ST);\n     S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States A \\<longrightarrow>\n                      U \\<notin> Target TS", "apply (unfold ChiPlus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n     S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States A \\<longrightarrow>\n                      U \\<notin> Target TS", "apply (rule_tac a=\"U\" and b=\"T\" and r=\"(ChiRel (HA ST))\" in converse_trancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n     S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A\\<rbrakk>\n    \\<Longrightarrow> (U, T) \\<in> (ChiRel (HA ST))\\<^sup>+\n 2. \\<And>y.\n       \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A;\n        (y, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States A \\<longrightarrow>\n                         y \\<notin> Target TS\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A;\n        (y, z) \\<in> ChiRel (HA ST); (z, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        T \\<in> States A \\<longrightarrow> z \\<notin> Target TS\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States A \\<longrightarrow>\n                         y \\<notin> Target TS", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A;\n        (y, T) \\<in> ChiRel (HA ST); T \\<in> States A;\n        y \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A;\n        (y, z) \\<in> ChiRel (HA ST); (z, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        T \\<in> States A; z \\<notin> Target TS; y \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:OneState_HPT_Target_ChiRel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A;\n        (y, z) \\<in> ChiRel (HA ST); (z, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        T \\<in> States A; z \\<notin> Target TS; y \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac V W)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A;\n        (V, W) \\<in> ChiRel (HA ST); (W, T) \\<in> (ChiRel (HA ST))\\<^sup>+;\n        T \\<in> States A; W \\<notin> Target TS; V \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fold ChiPlus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; (U, T) \\<in> ChiPlus (HA ST);\n        S \\<in> Target TS; A \\<in> SAs (HA ST); S \\<in> States A;\n        (V, W) \\<in> ChiRel (HA ST); (W, T) \\<in> ChiPlus (HA ST);\n        T \\<in> States A; W \\<notin> Target TS; V \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold HPT_def MaxNonConflict_def Target_def HigherPriority_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> {T. T \\<subseteq> ET ST \\<and>\n                             (\\<forall>A\\<in>SAs (HA ST).\n                                 card (T \\<inter> Delta A) \\<le> 1) \\<and>\n                             (\\<forall>t\\<in>ET ST.\n                                 (t \\<in> T) =\n                                 (\\<not> (\\<exists>t'\\<in>ET ST.\n       if (t', t) \\<in> HADelta (HA ST) \\<times> HADelta (HA ST)\n       then case (t', t) of\n            (t, t') \\<Rightarrow>\n              (source t', source t) \\<in> ChiPlus (HA ST)\n       else SOME y. True)))};\n        (U, T) \\<in> ChiPlus (HA ST); S \\<in> target ` TS;\n        A \\<in> SAs (HA ST); S \\<in> States A; (V, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS; V \\<in> target ` TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W a aa ab ac b ba ad ae af ag bb bc.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        ba \\<in> States A; (bc, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS; (a, (aa, ab, ac, b), ba) \\<in> TS;\n        (ad, (ae, af, ag, bb), bc) \\<in> TS; TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac SSource STrigger SGuard SAction SUpdate STarget \n                  TSource TTrigger TGuard TAction TUpdate TTarget)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac t=\"(SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\" and ST=ST and TS=TS and A=A in ET_target_source)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> TS \\<subseteq> ET ST\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> (SSource, (STrigger, SGuard, SAction, SUpdate),\n                          STarget)\n                         \\<in> TS\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> target\n                          (SSource, (STrigger, SGuard, SAction, SUpdate),\n                           STarget)\n                         \\<in> States A\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> SAs (HA ST)\n 5. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> target\n                          (SSource, (STrigger, SGuard, SAction, SUpdate),\n                           STarget)\n                         \\<in> States A\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> SAs (HA ST)\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> SAs (HA ST)\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> False", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule ChiRel_HAStates)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; TTarget \\<in> HAStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A;\n        TTarget \\<in> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> False", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST);\n        TTarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac t=\"(TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\" and A=x and TS=TS and ST=ST in ET_target_source)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST);\n        TTarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> TS \\<subseteq> ET ST\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST);\n        TTarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                          TTarget)\n                         \\<in> TS\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST);\n        TTarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> target\n                          (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                           TTarget)\n                         \\<in> States x\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST);\n        TTarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAs (HA ST)\n 5. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST);\n        TTarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> target\n                          (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                           TTarget)\n                         \\<in> States x\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST);\n        TTarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAs (HA ST)\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST);\n        TTarget \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> SAs (HA ST)\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        \\<forall>t\\<in>ET ST.\n           (t \\<in> TS) =\n           (\\<forall>t'\\<in>ET ST.\n               \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                          t \\<in> HADelta (HA ST)\n                       then (source t, source t') \\<in> ChiPlus (HA ST)\n                       else SOME y. True));\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=\"(TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        ((TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n         \\<in> TS) =\n        (\\<forall>t'\\<in>ET ST.\n            \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                       (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                        TTarget)\n                       \\<in> HADelta (HA ST)\n                    then (source\n                           (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                            TTarget),\n                          source t')\n                         \\<in> ChiPlus (HA ST)\n                    else SOME y. True))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        \\<forall>t'\\<in>ET ST.\n           \\<not> (if t' \\<in> HADelta (HA ST) \\<and>\n                      (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                       TTarget)\n                      \\<in> HADelta (HA ST)\n                   then (source\n                          (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                           TTarget),\n                         source t')\n                        \\<in> ChiPlus (HA ST)\n                   else SOME y. True);\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=\"(SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\" in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        \\<not> (if (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n                   \\<in> HADelta (HA ST) \\<and>\n                   (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n                   \\<in> HADelta (HA ST)\n                then (source\n                       (TSource, (TTrigger, TGuard, TAction, TUpdate),\n                        TTarget),\n                      source\n                       (SSource, (STrigger, SGuard, SAction, SUpdate),\n                        STarget))\n                     \\<in> ChiPlus (HA ST)\n                else SOME y. True)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: ET_HADelta)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac A=\"HA ST\" and S=TTarget and T=T and U=SSource in ChiPlus_SA_OneAncestor)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> (TTarget, T) \\<in> ChiPlus (HA ST)\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> SSource\n                         \\<in> States\n                                (?SA32 W SSource STrigger SGuard SAction\n                                  SUpdate STarget TSource TTrigger TGuard\n                                  TAction TUpdate TTarget x)\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?SA32 W SSource STrigger SGuard SAction SUpdate\n                          STarget TSource TTrigger TGuard TAction TUpdate\n                          TTarget x\n                         \\<in> SAs (HA ST)\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States\n                                  (?SA32 W SSource STrigger SGuard SAction\n                                    SUpdate STarget TSource TTrigger TGuard\n                                    TAction TUpdate TTarget x)\n 5. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro: ChiRel_ChiPlus_trans2)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> SSource\n                         \\<in> States\n                                (?SA32 W SSource STrigger SGuard SAction\n                                  SUpdate STarget TSource TTrigger TGuard\n                                  TAction TUpdate TTarget x)\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?SA32 W SSource STrigger SGuard SAction SUpdate\n                          STarget TSource TTrigger TGuard TAction TUpdate\n                          TTarget x\n                         \\<in> SAs (HA ST)\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States\n                                  (?SA32 W SSource STrigger SGuard SAction\n                                    SUpdate STarget TSource TTrigger TGuard\n                                    TAction TUpdate TTarget x)\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule ET_Source_Conf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        Source TS \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> target ` TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold Source_def image_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"SSource \\<in>Conf ST\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule subsetCE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<notin> Conf ST;\n        ?c53 W SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<notin> TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<notin> Conf ST;\n        ?c53 W SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<in> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "back"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST); SSource \\<notin> Conf ST;\n        ?c53 W SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<notin> {y. \\<exists>x\\<in>TS. y = source x}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST); SSource \\<notin> Conf ST;\n        ?c53 W SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST); SSource \\<notin> Conf ST;\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"TSource \\<in>Conf ST\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule subsetCE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<notin> Conf ST;\n        ?c71 W SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<notin> TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<notin> Conf ST;\n        ?c71 W SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<in> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "back"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST); SSource \\<in> Conf ST;\n        TSource \\<notin> Conf ST;\n        ?c71 W SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<notin> {y. \\<exists>x\\<in>TS. y = source x}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST); SSource \\<in> Conf ST;\n        TSource \\<notin> Conf ST;\n        ?c71 W SSource STrigger SGuard SAction SUpdate STarget TSource\n         TTrigger TGuard TAction TUpdate TTarget x\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST); SSource \\<in> Conf ST;\n        TSource \\<notin> Conf ST;\n        source (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "back"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST); SSource \\<in> Conf ST;\n        TSource \\<notin> Conf ST;\n        source (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"TTarget=SSource\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget = SSource\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget \\<noteq> SSource\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget \\<noteq> SSource\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac T=TTarget and S=SSource in Conf_ChiPlus)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget \\<noteq> SSource;\n        SSource \\<in> Conf ST \\<longrightarrow>\n        TTarget \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        \\<forall>x\\<in>TS. W \\<noteq> target x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget \\<noteq> SSource; TTarget \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac T=TSource and S=TTarget in OneState_Conf)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        \\<forall>x\\<in>TS. W \\<noteq> target x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget \\<noteq> SSource; TTarget \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> TSource \\<in> Conf ST\n 2. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        \\<forall>x\\<in>TS. W \\<noteq> target x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget \\<noteq> SSource; TTarget \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> TTarget\n                         \\<in> States\n                                (?SA91 W SSource STrigger SGuard SAction\n                                  SUpdate STarget TSource TTrigger TGuard\n                                  TAction TUpdate TTarget x)\n 3. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        \\<forall>x\\<in>TS. W \\<noteq> target x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget \\<noteq> SSource; TTarget \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> TSource\n                         \\<in> States\n                                (?SA91 W SSource STrigger SGuard SAction\n                                  SUpdate STarget TSource TTrigger TGuard\n                                  TAction TUpdate TTarget x)\n 4. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        \\<forall>x\\<in>TS. W \\<noteq> target x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget \\<noteq> SSource; TTarget \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?SA91 W SSource STrigger SGuard SAction SUpdate\n                          STarget TSource TTrigger TGuard TAction TUpdate\n                          TTarget x\n                         \\<in> SAs (HA ST)\n 5. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        \\<forall>x\\<in>TS. W \\<noteq> target x;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (TSource, SSource) \\<notin> ChiPlus (HA ST);\n        (TTarget, SSource) \\<in> ChiPlus (HA ST);\n        {y. \\<exists>x\\<in>TS. y = source x} \\<subseteq> Conf ST;\n        SSource \\<in> Conf ST; TSource \\<in> Conf ST;\n        TTarget \\<noteq> SSource; TTarget \\<in> Conf ST;\n        TSource = TTarget\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>W SSource STrigger SGuard SAction SUpdate STarget TSource TTrigger\n       TGuard TAction TUpdate TTarget x.\n       \\<lbrakk>(U, T) \\<in> ChiPlus (HA ST); A \\<in> SAs (HA ST);\n        STarget \\<in> States A; (TTarget, W) \\<in> ChiRel (HA ST);\n        (W, T) \\<in> ChiPlus (HA ST); T \\<in> States A;\n        W \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        (SSource, (STrigger, SGuard, SAction, SUpdate), STarget) \\<in> TS;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget) \\<in> TS;\n        TS \\<subseteq> ET ST;\n        \\<forall>A\\<in>SAs (HA ST). card (TS \\<inter> Delta A) \\<le> Suc 0;\n        SSource \\<in> States A; x \\<in> SAs (HA ST); TTarget \\<in> States x;\n        TSource \\<in> States x;\n        (TSource, (TTrigger, TGuard, TAction, TUpdate), TTarget)\n        \\<notin> ET ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>RootExSem\\<close>\\<close>"], ["", "lemma RootExSem_StepConf: \n   \"\\<lbrakk> TS \\<in> HPT ST \\<rbrakk> \\<Longrightarrow> \n      RootExSem (SAs (HA ST)) (CompFun (HA ST)) (StepConf (HA ST) (Conf ST) TS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    RootExSem (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)", "apply (unfold RootExSem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    \\<exists>!S.\n       S \\<in> States (Root (SAs (HA ST)) (CompFun (HA ST))) \\<and>\n       S \\<in> StepConf (HA ST) (Conf ST) TS", "apply (fold HARoot_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    \\<exists>!S.\n       S \\<in> States (HARoot (HA ST)) \\<and>\n       S \\<in> StepConf (HA ST) (Conf ST) TS", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    \\<exists>S.\n       S \\<in> States (HARoot (HA ST)) \\<and>\n       S \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply (case_tac \"RootState ST \\<notin> Source TS\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; RootState ST \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S.\n                         S \\<in> States (HARoot (HA ST)) \\<and>\n                         S \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST;\n     \\<not> RootState ST \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S.\n                         S \\<in> States (HARoot (HA ST)) \\<and>\n                         S \\<in> StepConf (HA ST) (Conf ST) TS\n 3. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply (rule_tac x=\"RootState ST\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; RootState ST \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> RootState ST \\<in> States (HARoot (HA ST)) \\<and>\n                      RootState ST \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST;\n     \\<not> RootState ST \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S.\n                         S \\<in> States (HARoot (HA ST)) \\<and>\n                         S \\<in> StepConf (HA ST) (Conf ST) TS\n 3. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     \\<not> RootState ST \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S.\n                         S \\<in> States (HARoot (HA ST)) \\<and>\n                         S \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; RootState ST \\<in> Source TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S.\n                         S \\<in> States (HARoot (HA ST)) \\<and>\n                         S \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply (unfold Source_def image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     RootState ST \\<in> {y. \\<exists>x\\<in>TS. y = source x}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S.\n                         S \\<in> States (HARoot (HA ST)) \\<and>\n                         S \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     \\<exists>x\\<in>TS. RootState ST = source x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S.\n                         S \\<in> States (HARoot (HA ST)) \\<and>\n                         S \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply (erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; x \\<in> TS;\n        RootState ST = source x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            S \\<in> States (HARoot (HA ST)) \\<and>\n                            S \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply (rename_tac T)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS;\n        RootState ST = source T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            S \\<in> States (HARoot (HA ST)) \\<and>\n                            S \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply (rule_tac x=\"target T\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS;\n        RootState ST = source T\\<rbrakk>\n       \\<Longrightarrow> target T \\<in> States (HARoot (HA ST)) \\<and>\n                         target T \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS;\n        RootState ST = source T\\<rbrakk>\n       \\<Longrightarrow> target T \\<in> States (HARoot (HA ST))\n 2. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply (rule HPT_source_target)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS;\n        RootState ST = source T\\<rbrakk>\n       \\<Longrightarrow> ?TS8 T \\<in> HPT (?ST8 T)\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS;\n        RootState ST = source T\\<rbrakk>\n       \\<Longrightarrow> T \\<in> ?TS8 T\n 3. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS;\n        RootState ST = source T\\<rbrakk>\n       \\<Longrightarrow> source T \\<in> States (HARoot (HA ST))\n 4. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> TS;\n        RootState ST = source T\\<rbrakk>\n       \\<Longrightarrow> HARoot (HA ST) \\<in> SAs (HA (?ST8 T))\n 5. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S y.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        y \\<in> States (HARoot (HA ST));\n        y \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = y", "apply (rename_tac S T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (case_tac \"S \\<in> Conf ST\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (case_tac \"T \\<in> Conf ST\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<in> Conf ST;\n        T \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<in> Conf ST;\n        T \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (frule OneRootState_Conf)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<in> Conf ST;\n        T \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<in> Conf ST;\n        T \\<in> Conf ST; S = RootState ST\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<in> Conf ST;\n        T \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T\n 4. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<in> Conf ST;\n        T \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (frule OneRootState_Conf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<in> Conf ST;\n        T \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<in> Conf ST;\n        T \\<notin> Conf ST; S = RootState ST\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> RootState ST = T\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (frule OneRootState_Conf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T \\<in> Conf ST\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        T = RootState ST\\<rbrakk>\n       \\<Longrightarrow> RootState ST = T\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (case_tac \"RootState ST \\<in> Source TS\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (case_tac \"T \\<in> Source TS\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<in> Source TS; T \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<in> Source TS; T \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (frule HPT_Source_Conf)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<in> Source TS; T \\<in> Source TS;\n        Source TS \\<subseteq> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<in> Source TS; T \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<in> Source TS; T \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<notin> Conf ST;\n        RootState ST \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST\n        \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n              Target TS \\<union>\n              ChiRel (HA ST) `` Target TS \\<inter>\n              HAInitStates (HA ST) \\<union>\n              (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n              (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                Target TS \\<union>\n                ChiRel (HA ST) `` Target TS \\<inter>\n                HAInitStates (HA ST) \\<union>\n                (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST;\n        RootState ST\n        \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n              Target TS \\<union>\n              ChiRel (HA ST) `` Target TS \\<inter>\n              HAInitStates (HA ST) \\<union>\n              (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n              (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                Target TS \\<union>\n                ChiRel (HA ST) `` Target TS \\<inter>\n                HAInitStates (HA ST) \\<union>\n                (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                Target TS \\<union>\n                ChiRel (HA ST) `` Target TS \\<inter>\n                HAInitStates (HA ST) \\<union>\n                (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n        T \\<in> States (HARoot (HA ST));\n        T \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                Target TS \\<union>\n                ChiRel (HA ST) `` Target TS \\<inter>\n                HAInitStates (HA ST) \\<union>\n                (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n        S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply auto"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; T \\<in> Target TS;\n        (x, RootState ST)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS;\n        (x, RootState ST)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        RootState ST \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, RootState ST)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 8. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 9. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 10. \\<And>S T x xa.\n        \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n         T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n         T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n         (x, S)\n         \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n         x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n         xa \\<in> Target TS\\<rbrakk>\n        \\<Longrightarrow> S = T\nA total of 12 subgoals...", "apply (frule OneState_HPT_Target)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?S172 T \\<in> Target TS\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?T172 T \\<in> Target TS\n 3. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?S172 T \\<in> States (?SA172 T)\n 4. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?T172 T \\<in> States (?SA172 T)\n 5. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?SA172 T \\<in> SAs (HA ST)\n 6. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS; ?S172 T = ?T172 T\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; T \\<in> Target TS;\n        (x, RootState ST)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS;\n        (x, RootState ST)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>T x xa.\n        \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n         T \\<notin> Conf ST; RootState ST \\<notin> Source TS;\n         (x, T)\n         \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n         x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n         xa \\<in> Target TS;\n         RootState ST \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 17 subgoals...", "apply (frule_tac SA=\"HARoot (HA ST)\" and TS=TS and S=T and T=\"RootState ST\" in OneState_HPT_Target)"], ["proof (prove)\ngoal (22 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> T \\<in> Target TS\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> Target TS\n 3. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States (HARoot (HA ST))\n 4. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> States (HARoot (HA ST))\n 5. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> HARoot (HA ST) \\<in> SAs (HA ST)\n 6. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS; T = RootState ST\\<rbrakk>\n       \\<Longrightarrow> ?S172 T \\<in> Target TS\n 7. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?T172 T \\<in> Target TS\n 8. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?S172 T \\<in> States (?SA172 T)\n 9. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?T172 T \\<in> States (?SA172 T)\n 10. \\<And>T.\n        \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n         T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n         T \\<notin> Source TS; RootState ST \\<in> Target TS;\n         T \\<in> Target TS\\<rbrakk>\n        \\<Longrightarrow> ?SA172 T \\<in> SAs (HA ST)\nA total of 22 subgoals...", "apply fast+"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> RootState ST \\<in> States (HARoot (HA ST))\n 2. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> HARoot (HA ST) \\<in> SAs (HA ST)\n 3. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS; T = RootState ST\\<rbrakk>\n       \\<Longrightarrow> ?S172 T \\<in> Target TS\n 4. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?T172 T \\<in> Target TS\n 5. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?S172 T \\<in> States (?SA172 T)\n 6. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?T172 T \\<in> States (?SA172 T)\n 7. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?SA172 T \\<in> SAs (HA ST)\n 8. \\<And>T.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        T \\<in> Target TS; ?S172 T = ?T172 T\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>T x xa.\n        \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n         T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n         T \\<notin> Source TS; T \\<in> Target TS;\n         (x, RootState ST)\n         \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n         x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n         xa \\<in> Target TS\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 19 subgoals...", "apply simp+"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; RootState ST \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS; T \\<in> Target TS;\n        (x, RootState ST)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<in> Source TS;\n        T \\<notin> Source TS;\n        (x, RootState ST)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        RootState ST \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; T \\<in> States (HARoot (HA ST));\n        T \\<notin> Conf ST; RootState ST \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, RootState ST)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 7. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 8. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 9. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 10. \\<And>S T x xa.\n        \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n         T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n         (x, S)\n         \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n         x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n         xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n        \\<Longrightarrow> S = T\nA total of 11 subgoals...", "apply (frule trancl_Int_mem, fold ChiPlus_def, force)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 4. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 5. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 6. \\<And>S T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T", "prefer 2"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 4. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 5. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 6. \\<And>S T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (frule OneState_HPT_Target)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?S222 S T \\<in> Target TS\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?T222 S T \\<in> Target TS\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?S222 S T \\<in> States (?SA222 S T)\n 4. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?T222 S T \\<in> States (?SA222 S T)\n 5. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?SA222 S T \\<in> SAs (HA ST)\n 6. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS; ?S222 S T = ?T222 S T\\<rbrakk>\n       \\<Longrightarrow> S = T\n 7. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 8. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 9. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 10. \\<And>S T x xa.\n        \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n         T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n         (x, S)\n         \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n         x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n         xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n        \\<Longrightarrow> S = T\nA total of 11 subgoals...", "apply fast+"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> HARoot (HA ST) \\<in> SAs (HA ST)\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS; S = S\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 4. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 5. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 6. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 7. \\<And>S T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T", "back"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> HARoot (HA ST) \\<in> SAs (HA ST)\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Target TS; S = T\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 4. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 5. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 6. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 7. \\<And>S T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply simp+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 2. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 4. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 5. \\<And>S T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (case_tac \"RootState ST \\<in> Source TS\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        RootState ST \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        RootState ST \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 4. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 5. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 6. \\<And>S T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (case_tac \"T = RootState ST\")"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        RootState ST \\<in> Source TS; T = RootState ST\\<rbrakk>\n       \\<Longrightarrow> S = T\n 2. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        RootState ST \\<in> Source TS; T \\<noteq> RootState ST\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS; T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        RootState ST \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 4. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 5. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 6. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 7. \\<And>S T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        S \\<in> Target TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 2. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 3. \\<And>S T x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS; T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T\n 4. \\<And>S T x xa xb xc.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> States (HARoot (HA ST));\n        T \\<in> States (HARoot (HA ST)); S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (xb, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xb \\<in> HAInitStates (HA ST); (xc, xb) \\<in> ChiRel (HA ST);\n        xc \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S = T", "apply (frule trancl_Int_mem, fold ChiPlus_def, force)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>StepConf\\<close>\\<close>"], ["", "lemma Target_StepConf:\n   \"S \\<in> Target TS \\<Longrightarrow> S \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> Target TS \\<Longrightarrow>\n    S \\<in> StepConf (HA ST) (Conf ST) TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> Target TS \\<Longrightarrow>\n    S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n            Target TS \\<union>\n            ChiRel (HA ST) `` Target TS \\<inter>\n            HAInitStates (HA ST) \\<union>\n            (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n            (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Target_ChiRel_HAInit_StepConf:\n   \"\\<lbrakk> S \\<in> Target TS; (S,T) \\<in> ChiRel A; \n      T \\<in> HAInitStates A \\<rbrakk> \\<Longrightarrow> T \\<in> StepConf A C TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Target TS; (S, T) \\<in> ChiRel A;\n     T \\<in> HAInitStates A\\<rbrakk>\n    \\<Longrightarrow> T \\<in> StepConf A C TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Target TS; (S, T) \\<in> ChiRel A;\n     T \\<in> HAInitStates A\\<rbrakk>\n    \\<Longrightarrow> T \\<in> C - ChiStar A `` Source TS \\<union>\n                              Target TS \\<union>\n                              ChiRel A `` Target TS \\<inter>\n                              HAInitStates A \\<union>\n                              (Restr (ChiRel A) (HAInitStates A))\\<^sup>+ ``\n                              (ChiRel A `` Target TS \\<inter>\n                               HAInitStates A)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma StepConf_HAStates: \n \"TS \\<in> HPT ST \\<Longrightarrow> StepConf (HA ST) (Conf ST) TS \\<subseteq> HAStates (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    StepConf (HA ST) (Conf ST) TS \\<subseteq> HAStates (HA ST)", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    Conf ST - ChiStar (HA ST) `` Source TS \\<union> Target TS \\<union>\n    ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST) \\<union>\n    (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n    (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST))\n    \\<subseteq> HAStates (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>TS \\<in> HPT ST;\n        (xa, x)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xa \\<in> HAInitStates (HA ST); (xb, xa) \\<in> ChiRel (HA ST);\n        xb \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> x \\<in> HAStates (HA ST)", "apply (frule tranclD2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>TS \\<in> HPT ST;\n        (xa, x)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xa \\<in> HAInitStates (HA ST); (xb, xa) \\<in> ChiRel (HA ST);\n        xb \\<in> Target TS;\n        \\<exists>z.\n           (xa, z)\n           \\<in> (Restr (ChiRel (HA ST))\n                   (HAInitStates (HA ST)))\\<^sup>* \\<and>\n           (z, x)\n           \\<in> Restr (ChiRel (HA ST)) (HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> HAStates (HA ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma RootState_Conf_StepConf2 [simp]:\n  \"\\<lbrakk> source T = RootState ST; T \\<in> TS \\<rbrakk> \\<Longrightarrow> target T \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>source T = RootState ST; T \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> target T \\<in> StepConf (HA ST) (Conf ST) TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>source T = RootState ST; T \\<in> TS\\<rbrakk>\n    \\<Longrightarrow> target T\n                      \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                            Target TS \\<union>\n                            ChiRel (HA ST) `` Target TS \\<inter>\n                            HAInitStates (HA ST) \\<union>\n                            (Restr (ChiRel (HA ST))\n                              (HAInitStates (HA ST)))\\<^sup>+ ``\n                            (ChiRel (HA ST) `` Target TS \\<inter>\n                             HAInitStates (HA ST))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HPT_StepConf_HAStates [simp]: \n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS \\<rbrakk> \\<Longrightarrow> S \\<in> HAStates (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (HA ST)", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter>\n              HAInitStates (HA ST))\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAStates (HA ST)", "apply (frule tranclD2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        \\<exists>z.\n           (x, z)\n           \\<in> (Restr (ChiRel (HA ST))\n                   (HAInitStates (HA ST)))\\<^sup>* \\<and>\n           (z, S)\n           \\<in> Restr (ChiRel (HA ST)) (HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAStates (HA ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma StepConf_Target_HAInitStates: \n  \"\\<lbrakk> S \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Target TS; S \\<notin> Conf ST\\<rbrakk> \\<Longrightarrow> S \\<in> HAInitStates (HA ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> StepConf (HA ST) (Conf ST) TS; S \\<notin> Target TS;\n     S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAInitStates (HA ST)", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                     Target TS \\<union>\n                     ChiRel (HA ST) `` Target TS \\<inter>\n                     HAInitStates (HA ST) \\<union>\n                     (Restr (ChiRel (HA ST))\n                       (HAInitStates (HA ST)))\\<^sup>+ ``\n                     (ChiRel (HA ST) `` Target TS \\<inter>\n                      HAInitStates (HA ST));\n     S \\<notin> Target TS; S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAInitStates (HA ST)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>S \\<notin> Target TS; S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAInitStates (HA ST)", "apply (frule tranclD2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>S \\<notin> Target TS; S \\<notin> Conf ST;\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        \\<exists>z.\n           (x, z)\n           \\<in> (Restr (ChiRel (HA ST))\n                   (HAInitStates (HA ST)))\\<^sup>* \\<and>\n           (z, S)\n           \\<in> Restr (ChiRel (HA ST)) (HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAInitStates (HA ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma InitSucState_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n      S \\<notin> Conf ST; S \\<in> StepConf (HA ST) (Conf ST) TS \\<rbrakk> \\<Longrightarrow>\n      InitState A \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n     S \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (frule StepConf_HAStates [THEN subsetD, THEN CompFun_HAInitStates_HAStates])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n     S \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> ?S \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n     S \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> ?SA \\<in> the (CompFun (HA ST) ?S)\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n     S \\<in> StepConf (HA ST) (Conf ST) TS;\n     InitState ?SA \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n     S \\<in> StepConf (HA ST) (Conf ST) TS;\n     InitState A \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (subst (asm) StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     InitState A \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST); (x, S) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST); (x, S) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A\n                         \\<in> Conf ST -\n                               ChiStar (HA ST) `` Source TS \\<union>\n                               Target TS \\<union>\n                               ChiRel (HA ST) `` Target TS \\<inter>\n                               HAInitStates (HA ST) \\<union>\n                               (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+ ``\n                               (ChiRel (HA ST) `` Target TS \\<inter>\n                                HAInitStates (HA ST))\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A\n                         \\<in> Conf ST -\n                               ChiStar (HA ST) `` Source TS \\<union>\n                               Target TS \\<union>\n                               ChiRel (HA ST) `` Target TS \\<inter>\n                               HAInitStates (HA ST) \\<union>\n                               (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+ ``\n                               (ChiRel (HA ST) `` Target TS \\<inter>\n                                HAInitStates (HA ST))", "apply (fast intro: HAInitStates_InitState_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A\n                         \\<in> Conf ST -\n                               ChiStar (HA ST) `` Source TS \\<union>\n                               Target TS \\<union>\n                               ChiRel (HA ST) `` Target TS \\<inter>\n                               HAInitStates (HA ST) \\<union>\n                               (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+ ``\n                               (ChiRel (HA ST) `` Target TS \\<inter>\n                                HAInitStates (HA ST))", "apply (frule trancl_Int_mem, fold ChiPlus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<notin> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (x, S) \\<in> Restr (ChiPlus (HA ST)) (HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> InitState A\n                         \\<in> Conf ST -\n                               ChiStar (HA ST) `` Source TS \\<union>\n                               Target TS \\<union>\n                               ChiRel (HA ST) `` Target TS \\<inter>\n                               HAInitStates (HA ST) \\<union>\n                               (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+ ``\n                               (ChiRel (HA ST) `` Target TS \\<inter>\n                                HAInitStates (HA ST))", "apply (fast intro:ChiPlus_HAStates_Right [THEN HAInitStates_InitState_trancl2])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma InitSucState_Target_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> Target TS; A \\<in> the (CompFun (HA ST) S)\\<rbrakk> \\<Longrightarrow>\n      InitState A \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (frule HPT_Target_HAStates2 [THEN CompFun_HAInitStates_HAStates])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S)\\<rbrakk>\n    \\<Longrightarrow> ?S \\<in> Target TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S)\\<rbrakk>\n    \\<Longrightarrow> ?SA \\<in> the (CompFun (HA ST) ?S)\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S);\n     InitState ?SA \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S);\n     InitState A \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (frule HPT_Target_HAStates2 [THEN CompFun_ChiRel])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S);\n     InitState A \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?S1.8 \\<in> Target TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S);\n     InitState A \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?SA8 \\<in> the (CompFun (HA ST) ?S1.8)\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S);\n     InitState A \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?S2.8 \\<in> States ?SA8\n 4. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S);\n     InitState A \\<in> HAInitStates (HA ST);\n     (?S1.8, ?S2.8) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (fast intro:InitState_States)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S);\n     InitState A \\<in> HAInitStates (HA ST);\n     (S, InitState A) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> Target TS;\n     A \\<in> the (CompFun (HA ST) S);\n     InitState A \\<in> HAInitStates (HA ST);\n     (S, InitState A) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A\n                      \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                            Target TS \\<union>\n                            ChiRel (HA ST) `` Target TS \\<inter>\n                            HAInitStates (HA ST) \\<union>\n                            (Restr (ChiRel (HA ST))\n                              (HAInitStates (HA ST)))\\<^sup>+ ``\n                            (ChiRel (HA ST) `` Target TS \\<inter>\n                             HAInitStates (HA ST))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma InitSucState_Conf_StepConf:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; \n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n     S \\<in> Conf ST; S \\<in> ChiStar (HA ST) `` (Source TS) \\<rbrakk> \\<Longrightarrow> \n     InitState A \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (frule Conf_HAStates2 [THEN CompFun_HAInitStates_HAStates])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> ?SA \\<in> the (CompFun (HA ST) S)\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     S \\<in> ChiStar (HA ST) `` Source TS;\n     InitState ?SA \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     S \\<in> ChiStar (HA ST) `` Source TS;\n     InitState A \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (subst (asm) StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     S \\<in> ChiStar (HA ST) `` Source TS;\n     InitState A \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S) \\<in> ChiStar (HA ST); x \\<in> Source TS; S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        S \\<in> HAInitStates (HA ST); (xa, S) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS\n 3. \\<And>x xa xb.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        (xa, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xa \\<in> HAInitStates (HA ST); (xb, xa) \\<in> ChiRel (HA ST);\n        xb \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        S \\<in> HAInitStates (HA ST); (xa, S) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>x xa xb.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        (xa, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xa \\<in> HAInitStates (HA ST); (xb, xa) \\<in> ChiRel (HA ST);\n        xb \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> StepConf (HA ST) (Conf ST) TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        S \\<in> HAInitStates (HA ST); (xa, S) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A\n                         \\<in> Conf ST -\n                               ChiStar (HA ST) `` Source TS \\<union>\n                               Target TS \\<union>\n                               ChiRel (HA ST) `` Target TS \\<inter>\n                               HAInitStates (HA ST) \\<union>\n                               (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+ ``\n                               (ChiRel (HA ST) `` Target TS \\<inter>\n                                HAInitStates (HA ST))\n 2. \\<And>x xa xb.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        (xa, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xa \\<in> HAInitStates (HA ST); (xb, xa) \\<in> ChiRel (HA ST);\n        xb \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A\n                         \\<in> Conf ST -\n                               ChiStar (HA ST) `` Source TS \\<union>\n                               Target TS \\<union>\n                               ChiRel (HA ST) `` Target TS \\<inter>\n                               HAInitStates (HA ST) \\<union>\n                               (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+ ``\n                               (ChiRel (HA ST) `` Target TS \\<inter>\n                                HAInitStates (HA ST))", "apply (fast intro:HAInitStates_InitState_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (x, S) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        (xa, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        xa \\<in> HAInitStates (HA ST); (xb, xa) \\<in> ChiRel (HA ST);\n        xb \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A\n                         \\<in> Conf ST -\n                               ChiStar (HA ST) `` Source TS \\<union>\n                               Target TS \\<union>\n                               ChiRel (HA ST) `` Target TS \\<inter>\n                               HAInitStates (HA ST) \\<union>\n                               (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+ ``\n                               (ChiRel (HA ST) `` Target TS \\<inter>\n                                HAInitStates (HA ST))", "apply (rename_tac T U V)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T U V.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> InitState A\n                         \\<in> Conf ST -\n                               ChiStar (HA ST) `` Source TS \\<union>\n                               Target TS \\<union>\n                               ChiRel (HA ST) `` Target TS \\<inter>\n                               HAInitStates (HA ST) \\<union>\n                               (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+ ``\n                               (ChiRel (HA ST) `` Target TS \\<inter>\n                                HAInitStates (HA ST))", "apply (frule trancl_Int_mem, fold ChiPlus_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U V.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS;\n        InitState A\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        InitState A \\<notin> Target TS; (U, S) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); S \\<in> HAInitStates (HA ST);\n        InitState A \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> ChiRel (HA ST) `` Target TS\n 2. \\<And>T U V x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS;\n        InitState A\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        InitState A \\<notin> Target TS; (U, S) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); S \\<in> HAInitStates (HA ST);\n        (x, InitState A) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> ChiRel (HA ST) `` Target TS", "apply (subst (asm) Image_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U V.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; InitState A \\<notin> Target TS;\n        (U, S) \\<in> ChiPlus (HA ST); U \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST); InitState A \\<notin> Conf ST;\n        InitState A \\<notin> ChiRel (HA ST) `` Target TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>ChiRel (HA ST) `` Target TS \\<inter>\n  HAInitStates (HA ST).\n                            (x, InitState A)\n                            \\<in> (Restr (ChiRel (HA ST))\n                                    (HAInitStates (HA ST)))\\<^sup>+\n 2. \\<And>T U V x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS;\n        InitState A\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        InitState A \\<notin> Target TS; (U, S) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); S \\<in> HAInitStates (HA ST);\n        (x, InitState A) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> ChiRel (HA ST) `` Target TS", "apply (rule_tac x=U in bexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T U V.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; InitState A \\<notin> Target TS;\n        (U, S) \\<in> ChiPlus (HA ST); U \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST); InitState A \\<notin> Conf ST;\n        InitState A \\<notin> ChiRel (HA ST) `` Target TS\\<rbrakk>\n       \\<Longrightarrow> (U, InitState A)\n                         \\<in> (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+\n 2. \\<And>T U V.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; InitState A \\<notin> Target TS;\n        (U, S) \\<in> ChiPlus (HA ST); U \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST); InitState A \\<notin> Conf ST;\n        InitState A \\<notin> ChiRel (HA ST) `` Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST)\n 3. \\<And>T U V x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS;\n        InitState A\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        InitState A \\<notin> Target TS; (U, S) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); S \\<in> HAInitStates (HA ST);\n        (x, InitState A) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> ChiRel (HA ST) `` Target TS", "apply (simp only: ChiPlus_HAStates_Right [THEN HAInitStates_InitState_trancl2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U V.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; InitState A \\<notin> Target TS;\n        (U, S) \\<in> ChiPlus (HA ST); U \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST); InitState A \\<notin> Conf ST;\n        InitState A \\<notin> ChiRel (HA ST) `` Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST)\n 2. \\<And>T U V x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS;\n        InitState A\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        InitState A \\<notin> Target TS; (U, S) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); S \\<in> HAInitStates (HA ST);\n        (x, InitState A) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> ChiRel (HA ST) `` Target TS", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T U V x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS;\n        InitState A\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                 (ChiRel (HA ST) `` Target TS \\<inter>\n                  HAInitStates (HA ST));\n        InitState A \\<notin> Target TS; (U, S) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); S \\<in> HAInitStates (HA ST);\n        (x, InitState A) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> InitState A \\<in> ChiRel (HA ST) `` Target TS", "apply (subst (asm) Image_def, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T U V x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; InitState A \\<notin> Target TS;\n        (U, S) \\<in> ChiPlus (HA ST); U \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST);\n        (x, InitState A) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        \\<not> False;\n        InitState A \\<notin> ChiRel (HA ST) `` Target TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>ChiRel (HA ST) `` Target TS \\<inter>\n  HAInitStates (HA ST).\n                            (x, InitState A)\n                            \\<in> (Restr (ChiRel (HA ST))\n                                    (HAInitStates (HA ST)))\\<^sup>+", "apply (rule_tac x=U in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U V x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; InitState A \\<notin> Target TS;\n        (U, S) \\<in> ChiPlus (HA ST); U \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST);\n        (x, InitState A) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        \\<not> False;\n        InitState A \\<notin> ChiRel (HA ST) `` Target TS\\<rbrakk>\n       \\<Longrightarrow> (U, InitState A)\n                         \\<in> (Restr (ChiRel (HA ST))\n                                 (HAInitStates (HA ST)))\\<^sup>+\n 2. \\<And>T U V x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; InitState A \\<notin> Target TS;\n        (U, S) \\<in> ChiPlus (HA ST); U \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST);\n        (x, InitState A) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        \\<not> False;\n        InitState A \\<notin> ChiRel (HA ST) `` Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST)", "apply (simp only: ChiPlus_HAStates_Right [THEN HAInitStates_InitState_trancl2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T U V x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<notin> Target TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        InitState A \\<in> HAInitStates (HA ST);\n        (T, S) \\<in> ChiStar (HA ST); T \\<in> Source TS;\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; InitState A \\<notin> Target TS;\n        (U, S) \\<in> ChiPlus (HA ST); U \\<in> HAInitStates (HA ST);\n        S \\<in> HAInitStates (HA ST);\n        (x, InitState A) \\<in> ChiStar (HA ST); x \\<in> Source TS;\n        \\<not> False;\n        InitState A \\<notin> ChiRel (HA ST) `` Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SucState_Conf_StepConf:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n     S \\<in> Conf ST; States A \\<inter> ChiStar (HA ST) `` (Source TS) = {} \\<rbrakk> \\<Longrightarrow> \n     \\<exists> x. x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply (cut_tac ST=ST in UniqueSucStates_Status)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (Conf ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply (unfold UniqueSucStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply (cut_tac ST=ST in Conf_HAStates2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?S2 \\<in> Conf ST\n 2. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     ?S2 \\<in> HAStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     S \\<in> HAStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply (fold HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     \\<forall>S\\<in>HAStates (HA ST).\n        \\<forall>A\\<in>the (CompFun (HA ST) S).\n           if S \\<in> Conf ST\n           then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n           else \\<forall>S\\<in>States A. S \\<notin> Conf ST;\n     S \\<in> HAStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply (erule_tac x=S in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     S \\<in> HAStates (HA ST);\n     \\<forall>A\\<in>the (CompFun (HA ST) S).\n        if S \\<in> Conf ST\n        then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n        else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))\n 2. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     S \\<in> HAStates (HA ST); S \\<notin> HAStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply (erule_tac x=A in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     S \\<in> HAStates (HA ST);\n     if S \\<in> Conf ST\n     then \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\n     else \\<forall>S\\<in>States A. S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))\n 2. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     S \\<in> HAStates (HA ST); A \\<notin> the (CompFun (HA ST) S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))\n 3. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     S \\<in> HAStates (HA ST); S \\<notin> HAStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> ChiStar (HA ST) `` Source TS \\<longrightarrow>\n     S \\<in> ChiRel (HA ST) `` Target TS \\<and>\n     S \\<in> HAInitStates (HA ST) \\<or>\n     S \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     \\<exists>!S'. S' \\<in> States A \\<and> S' \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         (x \\<in> Conf ST \\<and>\n                          x \\<notin> ChiStar (HA ST) `` Source TS \\<or>\n                          x \\<in> Target TS \\<or>\n                          x \\<in> ChiRel (HA ST) `` Target TS \\<and>\n                          x \\<in> HAInitStates (HA ST) \\<or>\n                          x \\<in> (Restr (ChiRel (HA ST))\n                                    (HAInitStates (HA ST)))\\<^sup>+ ``\n                                  (ChiRel (HA ST) `` Target TS \\<inter>\n                                   HAInitStates (HA ST)))\n 2. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     S \\<in> HAStates (HA ST); A \\<notin> the (CompFun (HA ST) S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))\n 3. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {};\n     S \\<in> HAStates (HA ST); S \\<notin> HAStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SucState_Conf_Source_StepConf:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; \n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n     S \\<in> Conf ST; States A \\<inter> ChiStar (HA ST) `` (Source TS) \\<noteq> {}; \n     S \\<notin> ChiStar (HA ST) `` (Source TS)\\<rbrakk> \\<Longrightarrow> \n     \\<exists> x. x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n     States A \\<inter> ChiStar (HA ST) `` Source TS \\<noteq> {};\n     S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<nexists>x.\n           x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS;\n        x \\<in> States A; (xa, x) \\<in> ChiStar (HA ST);\n        xa \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}", "apply (rename_tac T U)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<nexists>x.\n           x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST);\n        U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> T \\<in> {}", "apply (frule Conf_HAStates2 [THEN CompFun_ChiRel])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<nexists>x.\n           x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST);\n        U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> ?SA6 T U \\<in> the (CompFun (HA ST) S)\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<nexists>x.\n           x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST);\n        U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> ?S2.6 T U \\<in> States (?SA6 T U)\n 3. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<nexists>x.\n           x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, ?S2.6 T U) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T \\<in> {}", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<nexists>x.\n           x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T \\<in> {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"U=T\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U = T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; T \\<in> Source TS; (S, T) \\<in> ChiRel (HA ST);\n        U = T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rotate_tac -5)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> States A \\<longrightarrow>\n                   x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; T \\<in> Source TS; (S, T) \\<in> ChiRel (HA ST);\n        U = T; TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:Source_def Target_def image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> States A \\<longrightarrow>\n                   x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; T \\<in> {y. \\<exists>x\\<in>TS. y = source x};\n        (S, T) \\<in> ChiRel (HA ST); U = T; TS \\<in> HPT ST;\n        S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> {y. \\<exists>x\\<in>TS. y = target x};\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) ``\n                   {y. \\<exists>x\\<in>TS. y = source x}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U a aa ab ac b ba.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> States A \\<longrightarrow>\n                   x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        source (a, (aa, ab, ac, b), ba) \\<in> States A;\n        (S, source (a, (aa, ab, ac, b), ba)) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (a, (aa, ab, ac, b), ba) \\<in> TS; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>TS. S = target x\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac Source Trigger Guard Action Update Target)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U Source Trigger Guard Action Update Target.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> States A \\<longrightarrow>\n                   x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        source (Source, (Trigger, Guard, Action, Update), Target)\n        \\<in> States A;\n        (S, source (Source, (Trigger, Guard, Action, Update), Target))\n        \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>TS. S = target x\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=Target in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U Source Trigger Guard Action Update Target.\n       \\<lbrakk>source (Source, (Trigger, Guard, Action, Update), Target)\n                \\<in> States A;\n        (S, source (Source, (Trigger, Guard, Action, Update), Target))\n        \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        \\<not> False;\n        Target \\<in> States A \\<longrightarrow>\n        Target \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>TS. S = target x\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>TS. S = target x\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule HPT_source_target2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A\\<rbrakk>\n       \\<Longrightarrow> (?s22 Source Trigger Guard Action Update Target,\n                          ?l22 Source Trigger Guard Action Update Target,\n                          ?t22 Source Trigger Guard Action Update Target)\n                         \\<in> TS\n 2. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A\\<rbrakk>\n       \\<Longrightarrow> ?s22 Source Trigger Guard Action Update Target\n                         \\<in> States\n                                (?A22 Source Trigger Guard Action Update\n                                  Target)\n 3. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A\\<rbrakk>\n       \\<Longrightarrow> ?A22 Source Trigger Guard Action Update Target\n                         \\<in> SAs (HA ST)\n 4. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A;\n        ?t22 Source Trigger Guard Action Update Target\n        \\<in> States\n               (?A22 Source Trigger Guard Action Update Target)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>TS. S = target x\n 5. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A\\<rbrakk>\n       \\<Longrightarrow> A \\<in> SAs (HA ST)\n 2. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A; Target \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>TS. S = target x\n 3. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule HAStates_CompFun_SAs_mem)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A\\<rbrakk>\n       \\<Longrightarrow> ?S31 Source Trigger Guard Action Update Target\n                         \\<in> HAStates (HA ST)\n 2. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A\\<rbrakk>\n       \\<Longrightarrow> A \\<in> the (CompFun (HA ST)\n (?S31 Source Trigger Guard Action Update Target))\n 3. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A; Target \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>TS. S = target x\n 4. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule Conf_HAStates2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A\\<rbrakk>\n       \\<Longrightarrow> ?S31 Source Trigger Guard Action Update Target\n                         \\<in> Conf ST\n 2. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A\\<rbrakk>\n       \\<Longrightarrow> A \\<in> the (CompFun (HA ST)\n (?S31 Source Trigger Guard Action Update Target))\n 3. \\<And>Source Trigger Guard Action Update Target.\n       \\<lbrakk>Source \\<in> States A; (S, Source) \\<in> ChiRel (HA ST);\n        TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> the (CompFun (HA ST) S); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` {y. \\<exists>x\\<in>TS. y = source x};\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> TS;\n        Target \\<notin> States A; Target \\<in> States A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>TS. S = target x\n 4. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule ChiStar_ChiPlus_noteq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> (U, T) \\<in> ChiStar (?A43 T U)\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T;\n        (U, T) \\<in> ChiPlus (?A43 T U)\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T;\n        (U, T) \\<in> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"U=S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T;\n        (U, T) \\<in> ChiPlus (HA ST); U = S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<notin> Target TS; A \\<in> the (CompFun (HA ST) S);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        \\<forall>x.\n           x \\<in> States A \\<longrightarrow>\n           x \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> States A; (U, T) \\<in> ChiStar (HA ST); U \\<in> Source TS;\n        (S, T) \\<in> ChiRel (HA ST); U \\<noteq> T;\n        (U, T) \\<in> ChiPlus (HA ST); U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro:ChiStar_Self ChiRel_ChiPlus_OneAncestor ChiPlus_ChiStar)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SucState_StepConf:\n  \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; \n     A \\<in> the (CompFun (HA ST) S) \\<rbrakk> \\<Longrightarrow> \n     \\<exists> x. x \\<in> States A \\<and> x \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply (case_tac \"S \\<in> Target TS\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply (fast intro: InitSucState_Target_StepConf InitState_States)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply (case_tac \"S \\<in> Conf ST\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS;\n     S \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS;\n     S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS;\n     S \\<notin> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS;\n     S \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply (fast intro: InitSucState_StepConf InitState_States)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS;\n     S \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply (case_tac \"S \\<in> ChiStar (HA ST) `` (Source TS)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS; S \\<in> Conf ST;\n     S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS; S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply (fast intro: InitSucState_Conf_StepConf InitState_States)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS; S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply (case_tac \"States A \\<inter> ChiStar (HA ST) `` (Source TS) = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS; S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS;\n     States A \\<inter> ChiStar (HA ST) `` Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> the (CompFun (HA ST) S); S \\<notin> Target TS; S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS;\n     States A \\<inter> ChiStar (HA ST) `` Source TS \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> States A \\<and>\n                         x \\<in> StepConf (HA ST) (Conf ST) TS", "apply (fast intro: SucState_Conf_StepConf SucState_Conf_Source_StepConf)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>StepStatus\\<close>\\<close>"], ["", "lemma StepStatus_expand:\n   \"Abs_status (HA ST, StepConf (HA ST) (Conf ST) TS, \n                StepActEvent TS, U !!! (Value ST)) \n    = (StepStatus ST TS U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_status\n     (HA ST, StepConf (HA ST) (Conf ST) TS, StepActEvent TS,\n      U !!! Value ST) =\n    StepStatus ST TS U", "apply (unfold StepStatus_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_status\n     (HA ST, StepConf (HA ST) (Conf ST) TS, StepActEvent TS,\n      U !!! Value ST) =\n    (case Rep_status ST of\n     (A, C, E, D) \\<Rightarrow>\n       Abs_status (A, StepConf A C TS, StepActEvent TS, U !!! D))", "apply (subst Rep_status_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_status\n     (HA ST, StepConf (HA ST) (Conf ST) TS, StepActEvent TS,\n      U !!! Value ST) =\n    (case (HA ST, Conf ST, Events ST, Value ST) of\n     (A, C, E, D) \\<Rightarrow>\n       Abs_status (A, StepConf A C TS, StepActEvent TS, U !!! D))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma UniqueSucState_Conf_Source_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; A \\<in> SAs (HA ST);\n      A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n      T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U; U \\<in> Conf ST \\<rbrakk> \\<Longrightarrow> \n      U \\<in> ChiStar (HA ST) `` Source TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (frule_tac ?S2.0=T in StepConf_HAStates [THEN subsetD, THEN CompFun_ChiRel])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?S1.0 \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?SA \\<in> the (CompFun (HA ST) ?S1.0)\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States ?SA\n 4. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (?S1.0, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (frule_tac ?S2.0=U in StepConf_HAStates [THEN subsetD, THEN CompFun_ChiRel])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?S1.10 \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> ?SA10 \\<in> the (CompFun (HA ST) ?S1.10)\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> U \\<in> States ?SA10\n 4. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (?S1.10, U) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (frule_tac S=S and T=U in Conf_ChiRel, fast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (case_tac \"S \\<in> ChiStar (HA ST) `` Source TS\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (fast intro: ChiRel_ChiStar_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (case_tac \"U \\<in> Source TS\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS; U \\<in> Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (unfold StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST;\n     S \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A;\n     T \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n     A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n     T \\<in> Conf ST \\<and> T \\<notin> ChiStar (HA ST) `` Source TS \\<or>\n     T \\<in> Target TS \\<or>\n     T \\<in> ChiRel (HA ST) `` Target TS \\<and>\n     T \\<in> HAInitStates (HA ST) \\<or>\n     T \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply safe"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n     A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n     T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n     T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 2. \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n     A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n     T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n     T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (fast intro: HPT_SAStates_Target_Source)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (rename_tac V)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>V.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        T \\<in> HAInitStates (HA ST); (V, T) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (case_tac \"V=S\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>V.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        T \\<in> HAInitStates (HA ST); (V, T) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; V = S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 2. \\<And>V.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        T \\<in> HAInitStates (HA ST); (V, T) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; V \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (frule_tac S=S in HPT_Conf_Target_Source, fast+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>V.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        T \\<in> HAInitStates (HA ST); (V, T) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; V = S; S \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 2. \\<And>V.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        T \\<in> HAInitStates (HA ST); (V, T) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; V \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (fast intro: ChiStar_Image ChiRel_OneAncestor)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (rename_tac V W)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (frule trancl_Int_mem, fold ChiPlus_def, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, T) \\<in> ChiPlus (HA ST);\n        V \\<in> HAInitStates (HA ST); T \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (cut_tac ST=ST and S=S in HPT_Conf_Target_Source_ChiPlus)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, T) \\<in> ChiPlus (HA ST);\n        V \\<in> HAInitStates (HA ST); T \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?TS128 V W \\<in> HPT ST\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, T) \\<in> ChiPlus (HA ST);\n        V \\<in> HAInitStates (HA ST); T \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST\n 3. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, T) \\<in> ChiPlus (HA ST);\n        V \\<in> HAInitStates (HA ST); T \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiPlus (HA ST) `` Target (?TS128 V W)\n 4. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, T) \\<in> ChiPlus (HA ST);\n        V \\<in> HAInitStates (HA ST); T \\<in> HAInitStates (HA ST);\n        S \\<in> ChiStar (HA ST) `` Source (?TS128 V W)\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply fast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, T) \\<in> ChiPlus (HA ST);\n        V \\<in> HAInitStates (HA ST); T \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiPlus (HA ST) `` Target TS\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, T) \\<in> ChiPlus (HA ST);\n        V \\<in> HAInitStates (HA ST); T \\<in> HAInitStates (HA ST);\n        S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS", "apply (simp only:Image_def, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS.\n                   (x, S) \\<in> ChiStar (HA ST))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)", "apply (case_tac \"(V, T) \\<notin> ChiRel (HA ST)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (V, T) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)", "apply (frule_tac S=V and T=T in ChiPlus_ChiRel_Ex)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> (V, T) \\<notin> ChiRel (HA ST)\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST);\n        \\<exists>U.\n           (V, U) \\<in> ChiPlus (HA ST) \\<and>\n           (U, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)\n 3. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (V, T) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)", "apply (fast, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>V W Ua.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, Ua) \\<in> ChiPlus (HA ST);\n        (Ua, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac X)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"X=S\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)\n 2. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)\n 3. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule_tac x=W in bexI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> (W, S) \\<in> ChiPlus (HA ST)\n 2. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> W \\<in> Target TS\n 3. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)\n 4. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> (W, S) \\<in> ChiPlus (HA ST)\n 3. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> W \\<in> Target TS\n 4. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)", "apply (case_tac \"V=S\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST); V = S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST); V \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> (W, S) \\<in> ChiPlus (HA ST)\n 4. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> W \\<in> Target TS\n 5. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST); V \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST); V = S\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> (W, S) \\<in> ChiPlus (HA ST)\n 4. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> W \\<in> Target TS\n 5. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        V \\<in> HAInitStates (HA ST); T \\<in> HAInitStates (HA ST);\n        \\<forall>x\\<in>Source TS. (x, S) \\<notin> ChiStar (HA ST);\n        \\<forall>x\\<in>Target TS. (x, S) \\<notin> ChiPlus (HA ST);\n        (V, T) \\<in> ChiRel (HA ST); V \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        \\<not> (\\<exists>x\\<in>Target TS. (x, S) \\<in> ChiPlus (HA ST));\n        (V, T) \\<in> ChiRel (HA ST); V = S\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> (W, S) \\<in> ChiPlus (HA ST)\n 4. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> W \\<in> Target TS\n 5. \\<And>V W X.\n       \\<lbrakk>TS \\<in> HPT ST; A \\<in> SAs (HA ST);\n        A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n        T \\<noteq> U; U \\<in> Conf ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST; U \\<notin> Source TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        True; (W, V) \\<in> ChiRel (HA ST); W \\<in> Target TS;\n        (V, T) \\<in> ChiPlus (HA ST); V \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<not> (\\<exists>x\\<in>Source TS. (x, S) \\<in> ChiStar (HA ST));\n        (V, T) \\<notin> ChiRel (HA ST); (V, X) \\<in> ChiPlus (HA ST);\n        (X, T) \\<in> ChiRel (HA ST); X \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiPlus (HA ST)", "apply (fast intro: ChiPlus_ChiRel ChiRel_ChiPlus_trans2 ChiRel_OneAncestor)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma UniqueSucState_Target_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; A \\<in> SAs (HA ST);\n      A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n      T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U \\<rbrakk> \\<Longrightarrow> \n      U \\<notin> Target TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS;\n     T \\<noteq> U\\<rbrakk>\n    \\<Longrightarrow> U \\<notin> Target TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac ST=ST in Target_StepConf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply (subst (asm) (2) StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A;\n     T \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A;\n     T \\<in> Conf ST \\<and> T \\<notin> ChiStar (HA ST) `` Source TS \\<or>\n     T \\<in> Target TS \\<or>\n     T \\<in> ChiRel (HA ST) `` Target TS \\<and>\n     T \\<in> HAInitStates (HA ST) \\<or>\n     T \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply safe"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> HAInitStates (HA ST);\n        (x, T) \\<in> ChiRel (HA ST); x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac TS=TS and ST=ST and S=S and T=U in UniqueSucState_Conf_Source_StepConf)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> TS \\<in> HPT ST\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> StepConf (HA ST) (Conf ST) TS\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> ?A13 \\<in> SAs (HA ST)\n 4. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> ?A13 \\<in> the (CompFun (HA ST) S)\n 5. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> States ?A13\n 6. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> ?U13 \\<in> States ?A13\n 7. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> StepConf (HA ST) (Conf ST) TS\n 8. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> U \\<noteq> ?U13\n 9. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> ?U13 \\<in> Conf ST\n 10. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n      A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n      T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n      U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n      T \\<notin> ChiStar (HA ST) `` Source TS;\n      ?U13 \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 13 subgoals...", "apply fast+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> HAInitStates (HA ST);\n        (x, T) \\<in> ChiRel (HA ST); x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: OneState_HPT_Target)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> HAInitStates (HA ST);\n        (x, T) \\<in> ChiRel (HA ST); x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:OneState_HPT_Target_ChiRel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac V W)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac U=W and S=V and T=T in ChiRel_ChiPlus_trans2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> (V, T) \\<in> ChiPlus (HA ST)\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (W, T) \\<in> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule trancl_Int_mem, fold ChiPlus_def, force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U; U \\<in> Target TS;\n        U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (V, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (W, T) \\<in> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:OneState_HPT_Target_ChiPlus)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma UniqueSucState_Target_ChiRel_StepConf: \n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; A \\<in> SAs (HA ST);\n      A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n      T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U; (V,U) \\<in> ChiRel (HA ST); \n      U \\<in> HAInitStates (HA ST) \\<rbrakk>\n    \\<Longrightarrow> V \\<notin> Target TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST)\\<rbrakk>\n    \\<Longrightarrow> V \\<notin> Target TS", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n     V \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac A=\"HA ST\" and C=\"Conf ST\" in Target_ChiRel_HAInit_StepConf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n     V \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> (V, ?T1) \\<in> ChiRel (HA ST)\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n     V \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?T1 \\<in> HAInitStates (HA ST)\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n     V \\<in> Target TS; ?T1 \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n     V \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply (subst (asm) (2) StepConf_def, safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; (V, U) \\<in> ChiRel (HA ST);\n     U \\<in> HAInitStates (HA ST); V \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; (V, U) \\<in> ChiRel (HA ST);\n     U \\<in> HAInitStates (HA ST); V \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n        V \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n        V \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro:UniqueSucState_Conf_Source_StepConf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<noteq> U; (V, U) \\<in> ChiRel (HA ST);\n     U \\<in> HAInitStates (HA ST); V \\<in> Target TS;\n     U \\<in> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n        V \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n        V \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:OneState_HPT_Target_ChiRel)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n        V \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n        V \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro:OneHAInitState_SAStates)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n        V \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule trancl_Int_mem, fold ChiPlus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U) \\<in> ChiRel (HA ST); U \\<in> HAInitStates (HA ST);\n        V \\<in> Target TS; U \\<in> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS;\n        (x, T) \\<in> Restr (ChiPlus (HA ST)) (HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro:OneHAInitState_SAStates)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma UniqueSucState_Target_ChiPlus_StepConf [rule_format]:\n  \"\\<lbrakk> TS \\<in> HPT ST; (S,T) \\<in> ChiRel (HA ST); (S,U) \\<in> ChiRel (HA ST); \n     V \\<in> Target TS; (V,W) \\<in> ChiRel (HA ST); T \\<notin> ChiStar (HA ST) `` Source TS;\n     (W,U) \\<in> (ChiRel (HA ST) \\<inter> HAInitStates (HA ST) \\<times> HAInitStates (HA ST))\\<^sup>+;\n     T \\<in> Conf ST \\<rbrakk> \\<Longrightarrow> (S,U) \\<in> ChiRel (HA ST) \\<longrightarrow> T=U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n     (V, W) \\<in> ChiRel (HA ST); T \\<notin> ChiStar (HA ST) `` Source TS;\n     (W, U) \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n     T \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> (S, U) \\<in> ChiRel (HA ST) \\<longrightarrow> T = U", "apply (frule_tac S=S and T=T in Conf_ChiRel)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n     (V, W) \\<in> ChiRel (HA ST); T \\<notin> ChiStar (HA ST) `` Source TS;\n     (W, U) \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n     T \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> T \\<in> Conf ST\n 2. \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n     (V, W) \\<in> ChiRel (HA ST); T \\<notin> ChiStar (HA ST) `` Source TS;\n     (W, U) \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n     T \\<in> Conf ST; S \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> (S, U) \\<in> ChiRel (HA ST) \\<longrightarrow> T = U", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n     (V, W) \\<in> ChiRel (HA ST); T \\<notin> ChiStar (HA ST) `` Source TS;\n     (W, U) \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n     T \\<in> Conf ST; S \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> (S, U) \\<in> ChiRel (HA ST) \\<longrightarrow> T = U", "apply (rule_tac a=\"W\" and b=\"U\" and r=\"ChiRel (HA ST) \\<inter> HAInitStates (HA ST) \\<times> HAInitStates (HA ST)\" in trancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n     (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n     (V, W) \\<in> ChiRel (HA ST); T \\<notin> ChiStar (HA ST) `` Source TS;\n     (W, U) \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n     T \\<in> Conf ST; S \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> (W, U)\n                      \\<in> (Restr (ChiRel (HA ST))\n                              (HAInitStates (HA ST)))\\<^sup>+\n 2. \\<And>y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, y) \\<in> Restr (ChiRel (HA ST)) (HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> (S, y) \\<in> ChiRel (HA ST) \\<longrightarrow> T = y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, y)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (y, z) \\<in> Restr (ChiRel (HA ST)) (HAInitStates (HA ST));\n        (S, y) \\<in> ChiRel (HA ST) \\<longrightarrow> T = y\\<rbrakk>\n       \\<Longrightarrow> (S, z) \\<in> ChiRel (HA ST) \\<longrightarrow> T = z", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; (W, y) \\<in> ChiRel (HA ST);\n        W \\<in> HAInitStates (HA ST); y \\<in> HAInitStates (HA ST);\n        (S, y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, y)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (y, z) \\<in> ChiRel (HA ST); y \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST);\n        (S, y) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (rename_tac X)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; (W, X) \\<in> ChiRel (HA ST);\n        W \\<in> HAInitStates (HA ST); X \\<in> HAInitStates (HA ST);\n        (S, X) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, y)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (y, z) \\<in> ChiRel (HA ST); y \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST);\n        (S, y) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (case_tac \"W=S\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; (W, X) \\<in> ChiRel (HA ST);\n        W \\<in> HAInitStates (HA ST); X \\<in> HAInitStates (HA ST);\n        (S, X) \\<in> ChiRel (HA ST); W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; (W, X) \\<in> ChiRel (HA ST);\n        W \\<in> HAInitStates (HA ST); X \\<in> HAInitStates (HA ST);\n        (S, X) \\<in> ChiRel (HA ST); W \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, y)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (y, z) \\<in> ChiRel (HA ST); y \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST);\n        (S, y) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; (W, X) \\<in> ChiRel (HA ST);\n        W \\<in> HAInitStates (HA ST); X \\<in> HAInitStates (HA ST);\n        (S, X) \\<in> ChiRel (HA ST); W \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, y)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (y, z) \\<in> ChiRel (HA ST); y \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST);\n        (S, y) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; (W, X) \\<in> ChiRel (HA ST);\n        W \\<in> HAInitStates (HA ST); X \\<in> HAInitStates (HA ST);\n        (S, X) \\<in> ChiRel (HA ST); W \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, y)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (y, z) \\<in> ChiRel (HA ST); y \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST);\n        (S, y) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (simp add: ChiRel_OneAncestor)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, y)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (y, z) \\<in> ChiRel (HA ST); y \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST);\n        (S, y) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, y)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (y, z) \\<in> ChiRel (HA ST); y \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST);\n        (S, y) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z\n 2. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (rename_tac X Y)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, X)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (X, Y) \\<in> ChiRel (HA ST); X \\<in> HAInitStates (HA ST);\n        Y \\<in> HAInitStates (HA ST); (S, Y) \\<in> ChiRel (HA ST);\n        (S, X) \\<notin> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (case_tac \"X=S\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, X)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (X, Y) \\<in> ChiRel (HA ST); X \\<in> HAInitStates (HA ST);\n        Y \\<in> HAInitStates (HA ST); (S, Y) \\<in> ChiRel (HA ST);\n        (S, X) \\<notin> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, X)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (X, Y) \\<in> ChiRel (HA ST); X \\<in> HAInitStates (HA ST);\n        Y \\<in> HAInitStates (HA ST); (S, Y) \\<in> ChiRel (HA ST);\n        (S, X) \\<notin> ChiRel (HA ST); X \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, X)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (X, Y) \\<in> ChiRel (HA ST); X \\<in> HAInitStates (HA ST);\n        Y \\<in> HAInitStates (HA ST); (S, Y) \\<in> ChiRel (HA ST);\n        (S, X) \\<notin> ChiRel (HA ST); X \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, X)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (X, Y) \\<in> ChiRel (HA ST); X \\<in> HAInitStates (HA ST);\n        Y \\<in> HAInitStates (HA ST); (S, Y) \\<in> ChiRel (HA ST);\n        (S, X) \\<notin> ChiRel (HA ST); X \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (simp add: ChiRel_OneAncestor)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST);\n        W = S\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule_tac a=V in ChiRel_HAStates)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        V \\<in> HAStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        V \\<in> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); X = S\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (simp,safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X x.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        x \\<in> SAs (HA ST); V \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (rename_tac Y)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (case_tac \"States Y \\<inter> Source TS = {}\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y;\n        States Y \\<inter> Source TS = {}\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y;\n        States Y \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> T = X\n 3. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (simp add:OneState_HPT_Target_Source)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y;\n        States Y \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> T = X\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (subst (asm) Int_def, safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y x.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        x \\<in> States Y; x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (rename_tac Z)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> {}\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule_tac S=V and T=S in Conf_ChiRel)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> S \\<in> Conf ST\n 2. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> {}\n 3. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> {}\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule HPT_Conf_Target_Source)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?S34 X Y Z \\<in> Conf ST\n 2. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?S34 X Y Z \\<in> Target TS\n 3. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        ?S34 X Y Z \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> {}\n 4. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 5. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?S34 X Y Z \\<in> Target TS\n 2. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> ?S34 X Y Z \\<in> Conf ST\n 3. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        ?S34 X Y Z \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> {}\n 4. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 5. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Conf ST\n 2. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> {}\n 3. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> {}\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule_tac S=Z and T=V in  OneState_HPT_SA)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> Source TS\n 2. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Source TS\n 3. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> States (?SA42 X Y Z)\n 4. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> V \\<in> States (?SA42 X Y Z)\n 5. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> ?SA42 X Y Z \\<in> SAs (HA ST)\n 6. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        V \\<in> Source TS; Z = V\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> {}\n 7. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 8. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply fast+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        Z \\<in> States Y; Z \\<in> Source TS; V \\<in> Conf ST;\n        V \\<in> Source TS; Z = V\\<rbrakk>\n       \\<Longrightarrow> Z \\<in> {}\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, S) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (S, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST; S \\<in> HAInitStates (HA ST);\n        X \\<in> HAInitStates (HA ST); (S, X) \\<in> ChiRel (HA ST); W = S;\n        Y \\<in> SAs (HA ST); V \\<in> States Y; T \\<noteq> X;\n        V \\<in> Conf ST; V \\<in> Source TS; Z = V\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (fast intro: ChiPlus_ChiRel ChiRel_ChiPlus_trans ChiPlus_ChiStar)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (simp add: Image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule trancl_Int_mem, fold ChiPlus_def, simp, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, U) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule_tac T=W and S=S in Conf_ChiPlus)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST);\n        S \\<in> Conf ST \\<longrightarrow> W \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule_tac S=V and T=W in Conf_ChiRel)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> W \\<in> Conf ST\n 2. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST;\n        V \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST;\n        V \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule_tac a=V in ChiRel_HAStates)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        V \\<in> HAStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        V \\<in> \\<Union> (States ` SAs (HA ST))\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (simp, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y x.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        x \\<in> SAs (HA ST); V \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (rename_tac Z)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (case_tac \"States Z \\<inter> Source TS = {}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z;\n        States Z \\<inter> Source TS = {}\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z;\n        States Z \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (simp add:OneState_HPT_Target_Source)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y Z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z;\n        States Z \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> T = Y\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (subst (asm) Int_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y Z x.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        x \\<in> States Z; x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule_tac S=V in HPT_Conf_Target_Source)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Y Z x.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        x \\<in> States Z; x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Conf ST\n 2. \\<And>Y Z x.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        x \\<in> States Z; x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Target TS\n 3. \\<And>Y Z x.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        x \\<in> States Z; x \\<in> Source TS; V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}\n 4. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply fast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y Z x.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        x \\<in> States Z; x \\<in> Source TS; V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (rename_tac P)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> P \\<in> {}\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule_tac S=P and T=V in  OneState_HPT_SA)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> P \\<in> Source TS\n 2. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> V \\<in> Source TS\n 3. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> P \\<in> States (?SA89 Y Z P)\n 4. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> V \\<in> States (?SA89 Y Z P)\n 5. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> ?SA89 Y Z P \\<in> SAs (HA ST)\n 6. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS;\n        P = V\\<rbrakk>\n       \\<Longrightarrow> P \\<in> {}\n 7. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply fast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS;\n        P = V\\<rbrakk>\n       \\<Longrightarrow> P \\<in> {}\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (frule_tac U=V and S=W and T=S in ChiRel_ChiPlus_trans2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS;\n        P = V\\<rbrakk>\n       \\<Longrightarrow> (W, S) \\<in> ChiPlus (HA ST)\n 2. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS; P = V;\n        (V, S) \\<in> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> P \\<in> {}\n 3. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply fast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y Z P.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        \\<forall>x\\<in>Source TS. (x, T) \\<notin> ChiStar (HA ST);\n        (W, U)\n        \\<in> {x \\<in> ChiRel (HA ST).\n               x \\<in> HAInitStates (HA ST) \\<times>\n                       HAInitStates (HA ST)}\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<in> HAInitStates (HA ST); Y \\<in> HAInitStates (HA ST);\n        (S, Y) \\<in> ChiRel (HA ST); (W, S) \\<in> ChiPlus (HA ST);\n        W \\<in> HAInitStates (HA ST); W \\<in> Conf ST; V \\<in> Conf ST;\n        Z \\<in> SAs (HA ST); V \\<in> States Z; T \\<noteq> Y;\n        P \\<in> States Z; P \\<in> Source TS; V \\<in> Source TS; P = V;\n        (V, S) \\<in> ChiPlus (HA ST)\\<rbrakk>\n       \\<Longrightarrow> P \\<in> {}\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (fast intro: ChiPlus_ChiRel ChiRel_ChiPlus_trans ChiPlus_ChiStar)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (case_tac \"T=S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST);\n        T = S\\<rbrakk>\n       \\<Longrightarrow> T = z\n 2. \\<And>y z.\n       \\<lbrakk>TS \\<in> HPT ST; (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); V \\<in> Target TS;\n        (V, W) \\<in> ChiRel (HA ST);\n        T \\<notin> ChiStar (HA ST) `` Source TS;\n        (W, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        T \\<in> Conf ST; S \\<in> Conf ST;\n        (W, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (T, z) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        z \\<in> HAInitStates (HA ST); (S, z) \\<in> ChiRel (HA ST);\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T = z", "apply (simp add: ChiRel_OneAncestor)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma UniqueSucStates_SAStates_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS; A \\<in> SAs (HA ST);\n      A \\<in> the (CompFun (HA ST) S); T \\<in> States A; U \\<in> States A;\n      T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U \\<rbrakk> \\<Longrightarrow> \n      U \\<notin> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS;\n     T \\<noteq> U\\<rbrakk>\n    \\<Longrightarrow> U \\<notin> StepConf (HA ST) (Conf ST) TS", "apply (subst StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS;\n     T \\<noteq> U\\<rbrakk>\n    \\<Longrightarrow> U \\<notin> Conf ST -\n                                 ChiStar (HA ST) `` Source TS \\<union>\n                                 Target TS \\<union>\n                                 ChiRel (HA ST) `` Target TS \\<inter>\n                                 HAInitStates (HA ST) \\<union>\n                                 (Restr (ChiRel (HA ST))\n                                   (HAInitStates (HA ST)))\\<^sup>+ ``\n                                 (ChiRel (HA ST) `` Target TS \\<inter>\n                                  HAInitStates (HA ST))", "apply (simp, safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ChiStar (HA ST) `` Source TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule UniqueSucState_Conf_Source_StepConf)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> TS \\<in> HPT ST\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?S12 \\<in> StepConf (HA ST) (Conf ST) TS\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?A12 \\<in> SAs (HA ST)\n 4. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?A12 \\<in> the (CompFun (HA ST) ?S12)\n 5. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?T12 \\<in> States ?A12\n 6. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> U \\<in> States ?A12\n 7. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?T12 \\<in> StepConf (HA ST) (Conf ST) TS\n 8. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> ?T12 \\<noteq> U\n 9. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> U \\<in> Conf ST\n 10. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n      A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n      T \\<in> States A; U \\<in> States A;\n      T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n      U \\<in> Target TS\\<rbrakk>\n     \\<Longrightarrow> False\nA total of 12 subgoals...", "apply fast+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac U=U in UniqueSucState_Target_StepConf)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?S40 \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?A40 \\<in> SAs (HA ST)\n 3. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?A40 \\<in> the (CompFun (HA ST) ?S40)\n 4. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?T40 \\<in> States ?A40\n 5. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> States ?A40\n 6. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?T40 \\<in> StepConf (HA ST) (Conf ST) TS\n 7. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> ?T40 \\<noteq> U\n 8. \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n     A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S); T \\<in> States A;\n     U \\<in> States A; T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n     U \\<in> Target TS; U \\<notin> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>x xa.\n        \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n         A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n         T \\<in> States A; U \\<in> States A;\n         T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n         (x, U)\n         \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n         x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n         xa \\<in> Target TS\\<rbrakk>\n        \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac U=U in UniqueSucState_Target_ChiRel_StepConf)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?S59 x \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?A59 x \\<in> SAs (HA ST)\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?A59 x \\<in> the (CompFun (HA ST) (?S59 x))\n 4. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?T59 x \\<in> States (?A59 x)\n 5. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> U \\<in> States (?A59 x)\n 6. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?T59 x \\<in> StepConf (HA ST) (Conf ST) TS\n 7. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?T59 x \\<noteq> U\n 8. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> (?V59 x, U) \\<in> ChiRel (HA ST)\n 9. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAInitStates (HA ST)\n 10. \\<And>x.\n        \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n         A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n         T \\<in> States A; U \\<in> States A;\n         T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n         (x, U) \\<in> ChiRel (HA ST); x \\<in> Target TS;\n         U \\<in> HAInitStates (HA ST); ?V59 x \\<notin> Target TS\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 11 subgoals...", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (x, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac V W)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule trancl_Int_mem, fold ChiPlus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS;\n        (V, U) \\<in> Restr (ChiPlus (HA ST)) (HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac ?S2.0=T in StepConf_HAStates [THEN subsetD, THEN CompFun_ChiRel])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?S1.85 V W \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?SA85 V W \\<in> the (CompFun (HA ST) (?S1.85 V W))\n 3. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States (?SA85 V W)\n 4. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST);\n        (?S1.85 V W, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac ?S2.0=U in StepConf_HAStates [THEN subsetD, THEN CompFun_ChiRel])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?S1.95 V W \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> ?SA95 V W \\<in> the (CompFun (HA ST) (?S1.95 V W))\n 3. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> U \\<in> States (?SA95 V W)\n 4. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (?S1.95 V W, U) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> StepConf (HA ST) (Conf ST) TS; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) (2) StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A;\n        T \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                Target TS \\<union>\n                ChiRel (HA ST) `` Target TS \\<inter>\n                HAInitStates (HA ST) \\<union>\n                (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n        T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp, safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> Conf ST;\n        T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V W x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        (x, T) \\<in> ChiRel (HA ST); x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>V W x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST);\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro: UniqueSucState_Target_ChiPlus_StepConf)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>V W x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        (x, T) \\<in> ChiRel (HA ST); x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>V W x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST);\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac U=W and T=U and S=T in OneState_HPT_Target_ChiPlus)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> (W, U) \\<in> ChiPlus (HA ST)\n 2. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> T \\<in> Target TS\n 3. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> ?A123 V W \\<in> SAs (HA ST)\n 4. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States (?A123 V W)\n 5. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> U \\<in> States (?A123 V W)\n 6. \\<And>V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> Target TS;\n        W \\<notin> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>V W x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST); T \\<in> HAInitStates (HA ST);\n        (x, T) \\<in> ChiRel (HA ST); x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>V W x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST);\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro: ChiPlus_ChiRel ChiRel_ChiPlus_trans2 OneHAInitState_SAStates)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST);\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule trancl_Int_mem, fold ChiPlus_def, simp, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>V W x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> StepConf (HA ST) (Conf ST) TS;\n        A \\<in> SAs (HA ST); A \\<in> the (CompFun (HA ST) S);\n        T \\<in> States A; U \\<in> States A; T \\<noteq> U;\n        (V, U)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        V \\<in> HAInitStates (HA ST); (W, V) \\<in> ChiRel (HA ST);\n        W \\<in> Target TS; (V, U) \\<in> ChiPlus (HA ST);\n        U \\<in> HAInitStates (HA ST); (S, T) \\<in> ChiRel (HA ST);\n        (S, U) \\<in> ChiRel (HA ST);\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS; (x, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast intro:OneHAInitState_SAStates)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma UniqueSucStates_Ancestor_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST; S \\<in> HAStates (HA ST); SA \\<in> the (CompFun (HA ST) S); \n      T \\<in> States SA; T \\<in> StepConf (HA ST) (Conf ST) TS \\<rbrakk>\n    \\<Longrightarrow> S \\<in> StepConf (HA ST) (Conf ST) TS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     T \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> S \\<in> StepConf (HA ST) (Conf ST) TS", "apply (rule notnotD, rule notI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     T \\<in> StepConf (HA ST) (Conf ST) TS;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply (subst (asm) StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     T \\<in> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n             Target TS \\<union>\n             ChiRel (HA ST) `` Target TS \\<inter>\n             HAInitStates (HA ST) \\<union>\n             (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n             (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     S \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp, safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule  CompFun_ChiRel, fast+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS;\n     (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Conf_ChiRel, fast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS; (S, T) \\<in> ChiRel (HA ST);\n     S \\<in> Conf ST\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule ChiRel_ChiStar_Source_notmem, fast+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Conf ST;\n     T \\<notin> ChiStar (HA ST) `` Source TS; (S, T) \\<in> ChiRel (HA ST);\n     S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) StepConf_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                Target TS \\<union>\n                ChiRel (HA ST) `` Target TS \\<inter>\n                HAInitStates (HA ST) \\<union>\n                (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+ ``\n                (ChiRel (HA ST) `` Target TS \\<inter> HAInitStates (HA ST));\n     T \\<in> Conf ST; T \\<notin> ChiStar (HA ST) `` Source TS;\n     (S, T) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n     S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply force"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"States SA \\<inter> Source TS = {}\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n     States SA \\<inter> Source TS = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n     States SA \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:OneState_HPT_Target_Source)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n     States SA \\<inter> Source TS \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) Int_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n     SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n     S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n     {x \\<in> States SA. x \\<in> Source TS} \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp, safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        x \\<in> States SA; x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac U)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac ?S2.0=U in CompFun_ChiRel, fast+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS;\n        (S, U) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Conf_ChiRel)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS;\n        (S, U) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Conf ST\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule HPT_Source_Conf, fast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"S \\<in> ChiStar (HA ST) `` Source TS\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) StepConf_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                   Target TS \\<union>\n                   ChiRel (HA ST) `` Target TS \\<inter>\n                   HAInitStates (HA ST) \\<union>\n                   (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        T \\<in> Target TS; U \\<in> States SA; U \\<in> Source TS;\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        S \\<notin> Target TS \\<and>\n        (S \\<in> ChiRel (HA ST) `` Target TS \\<longrightarrow>\n         S \\<notin> HAInitStates (HA ST)) \\<and>\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        T \\<in> Target TS; U \\<in> States SA; U \\<in> Source TS;\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule ChiRel_ChiStar_notmem)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        S \\<notin> Target TS \\<and>\n        (S \\<in> ChiRel (HA ST) `` Target TS \\<longrightarrow>\n         S \\<notin> HAInitStates (HA ST)) \\<and>\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        T \\<in> Target TS; U \\<in> States SA; U \\<in> Source TS;\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> (?S72 U, ?T72 U) \\<in> ChiRel (HA ST)\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        S \\<notin> Target TS \\<and>\n        (S \\<in> ChiRel (HA ST) `` Target TS \\<longrightarrow>\n         S \\<notin> HAInitStates (HA ST)) \\<and>\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        T \\<in> Target TS; U \\<in> States SA; U \\<in> Source TS;\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<in> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> ?S72 U \\<in> ChiStar (HA ST) `` Source TS\n 3. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        S \\<notin> Target TS \\<and>\n        (S \\<in> ChiRel (HA ST) `` Target TS \\<longrightarrow>\n         S \\<notin> HAInitStates (HA ST)) \\<and>\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        T \\<in> Target TS; U \\<in> States SA; U \\<in> Source TS;\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<in> ChiStar (HA ST) `` Source TS;\n        ?T72 U \\<notin> Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"U=S\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        U = S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) StepConf_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                   Target TS \\<union>\n                   ChiRel (HA ST) `` Target TS \\<inter>\n                   HAInitStates (HA ST) \\<union>\n                   (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        T \\<in> Target TS; U \\<in> States SA; U \\<in> Source TS;\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U = S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply force"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; T \\<in> Target TS;\n        U \\<in> States SA; U \\<in> Source TS; (S, U) \\<in> ChiRel (HA ST);\n        S \\<in> Conf ST; S \\<notin> ChiStar (HA ST) `` Source TS;\n        U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) StepConf_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                   Target TS \\<union>\n                   ChiRel (HA ST) `` Target TS \\<inter>\n                   HAInitStates (HA ST) \\<union>\n                   (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        T \\<in> Target TS; U \\<in> States SA; U \\<in> Source TS;\n        (S, U) \\<in> ChiRel (HA ST); S \\<in> Conf ST;\n        S \\<notin> ChiStar (HA ST) `` Source TS; U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (x, T) \\<in> ChiRel (HA ST);\n        x \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac U)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (U, T) \\<in> ChiRel (HA ST);\n        U \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"U=S\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (U, T) \\<in> ChiRel (HA ST);\n        U \\<in> Target TS; U = S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (U, T) \\<in> ChiRel (HA ST);\n        U \\<in> Target TS; U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) StepConf_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                   Target TS \\<union>\n                   ChiRel (HA ST) `` Target TS \\<inter>\n                   HAInitStates (HA ST) \\<union>\n                   (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        T \\<in> HAInitStates (HA ST); (U, T) \\<in> ChiRel (HA ST);\n        U \\<in> Target TS; U = S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (U, T) \\<in> ChiRel (HA ST);\n        U \\<in> Target TS; U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (U, T) \\<in> ChiRel (HA ST);\n        U \\<in> Target TS; U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule  CompFun_ChiRel, fast+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        T \\<in> HAInitStates (HA ST); (U, T) \\<in> ChiRel (HA ST);\n        U \\<in> Target TS; U \\<noteq> S;\n        (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: ChiRel_OneAncestor)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (x, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        x \\<in> HAInitStates (HA ST); (xa, x) \\<in> ChiRel (HA ST);\n        xa \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac U V)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule trancl_Int_mem, fold ChiPlus_def, simp, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule tranclD2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<exists>z.\n           (U, z)\n           \\<in> (Restr (ChiRel (HA ST))\n                   (HAInitStates (HA ST)))\\<^sup>* \\<and>\n           (z, T)\n           \\<in> Restr (ChiRel (HA ST)) (HAInitStates (HA ST))\\<rbrakk>\n       \\<Longrightarrow> False", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V z.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        (U, z)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (z, T) \\<in> ChiRel (HA ST); z \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac W)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        (U, W)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (W, T) \\<in> ChiRel (HA ST); W \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac \"W=S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        (U, W)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (W, T) \\<in> ChiRel (HA ST); W \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W = S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        (U, W)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (W, T) \\<in> ChiRel (HA ST); W \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA; S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W = S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        (U, W)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (W, T) \\<in> ChiRel (HA ST); W \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        (U, W)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (W, T) \\<in> ChiRel (HA ST); W \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA; S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W = S\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule CompFun_ChiRel, fast+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; S \\<in> HAStates (HA ST);\n        SA \\<in> the (CompFun (HA ST) S); T \\<in> States SA;\n        S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        (U, W)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (W, T) \\<in> ChiRel (HA ST); W \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W \\<noteq> S;\n        (S, T) \\<in> ChiRel (HA ST)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA; S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W = S\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only: ChiRel_OneAncestor)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA; S \\<notin> StepConf (HA ST) (Conf ST) TS;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W = S\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subst (asm) StepConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        S \\<notin> Conf ST - ChiStar (HA ST) `` Source TS \\<union>\n                   Target TS \\<union>\n                   ChiRel (HA ST) `` Target TS \\<inter>\n                   HAInitStates (HA ST) \\<union>\n                   (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); W = S\\<rbrakk>\n       \\<Longrightarrow> False", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); \\<not> False;\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        S \\<notin> Target TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiRel (HA ST) `` Target TS\n 2. \\<And>U V W x.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); \\<not> False;\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        S \\<notin> Target TS; (x, S) \\<in> ChiStar (HA ST);\n        x \\<in> Source TS; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiRel (HA ST) `` Target TS", "apply (simp add: Image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<forall>x\\<in>{y. \\<exists>x\\<in>Target TS.\n                              (x, y) \\<in> ChiRel (HA ST)} \\<inter>\n                       HAInitStates (HA ST).\n           (x, S)\n           \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<notin> Target TS; S \\<notin> Conf ST\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 2. \\<And>U V W x.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); \\<not> False;\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        S \\<notin> Target TS; (x, S) \\<in> ChiStar (HA ST);\n        x \\<in> Source TS; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiRel (HA ST) `` Target TS", "apply (erule_tac x=U in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        S \\<notin> Conf ST;\n        (U, S)\n        \\<notin> (Restr (ChiRel (HA ST))\n                   (HAInitStates (HA ST)))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 2. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        S \\<notin> Conf ST;\n        U \\<notin> {y. \\<exists>x\\<in>Target TS.\n                          (x, y) \\<in> ChiRel (HA ST)} \\<inter>\n                   HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 3. \\<And>U V W x.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); \\<not> False;\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        S \\<notin> Target TS; (x, S) \\<in> ChiStar (HA ST);\n        x \\<in> Source TS; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiRel (HA ST) `` Target TS", "apply (case_tac \"U=S\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        S \\<notin> Conf ST;\n        (U, S)\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U = S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 2. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        S \\<notin> Conf ST;\n        (U, S)\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 3. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        S \\<notin> Conf ST;\n        U \\<notin> {y. \\<exists>x\\<in>Target TS.\n                          (x, y) \\<in> ChiRel (HA ST)} \\<inter>\n                   HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 4. \\<And>U V W x.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); \\<not> False;\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        S \\<notin> Target TS; (x, S) \\<in> ChiStar (HA ST);\n        x \\<in> Source TS; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiRel (HA ST) `` Target TS", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        S \\<notin> Conf ST;\n        (U, S)\n        \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 2. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        S \\<notin> Conf ST;\n        U \\<notin> {y. \\<exists>x\\<in>Target TS.\n                          (x, y) \\<in> ChiRel (HA ST)} \\<inter>\n                   HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 3. \\<And>U V W x.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); \\<not> False;\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        S \\<notin> Target TS; (x, S) \\<in> ChiStar (HA ST);\n        x \\<in> Source TS; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiRel (HA ST) `` Target TS", "apply (simp add: rtrancl_eq_or_trancl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U V.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        S \\<notin> Conf ST;\n        U \\<notin> {y. \\<exists>x\\<in>Target TS.\n                          (x, y) \\<in> ChiRel (HA ST)} \\<inter>\n                   HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 2. \\<And>U V W x.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); \\<not> False;\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        S \\<notin> Target TS; (x, S) \\<in> ChiStar (HA ST);\n        x \\<in> Source TS; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiRel (HA ST) `` Target TS", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V W x.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); \\<not> False;\n        S \\<notin> (Restr (ChiRel (HA ST))\n                     (HAInitStates (HA ST)))\\<^sup>+ ``\n                   (ChiRel (HA ST) `` Target TS \\<inter>\n                    HAInitStates (HA ST));\n        S \\<notin> Target TS; (x, S) \\<in> ChiStar (HA ST);\n        x \\<in> Source TS; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> S \\<in> ChiRel (HA ST) `` Target TS", "apply (simp add: Image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V x.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<forall>x\\<in>{y. \\<exists>x\\<in>Target TS.\n                              (x, y) \\<in> ChiRel (HA ST)} \\<inter>\n                       HAInitStates (HA ST).\n           (x, S)\n           \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<notin> Target TS; (x, S) \\<in> ChiStar (HA ST);\n        x \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)", "apply (rename_tac W)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST);\n        \\<forall>x\\<in>{y. \\<exists>x\\<in>Target TS.\n                              (x, y) \\<in> ChiRel (HA ST)} \\<inter>\n                       HAInitStates (HA ST).\n           (x, S)\n           \\<notin> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        S \\<notin> Target TS; (W, S) \\<in> ChiStar (HA ST);\n        W \\<in> Source TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)", "apply (erule_tac x=U in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        (W, S) \\<in> ChiStar (HA ST); W \\<in> Source TS;\n        (U, S)\n        \\<notin> (Restr (ChiRel (HA ST))\n                   (HAInitStates (HA ST)))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 2. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        (W, S) \\<in> ChiStar (HA ST); W \\<in> Source TS;\n        U \\<notin> {y. \\<exists>x\\<in>Target TS.\n                          (x, y) \\<in> ChiRel (HA ST)} \\<inter>\n                   HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)", "apply (simp add: rtrancl_eq_or_trancl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (S, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        (V, S) \\<in> ChiRel (HA ST); V \\<in> Target TS; U = S;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        (W, S) \\<in> ChiStar (HA ST); W \\<in> Source TS;\n        (S, S)\n        \\<notin> (Restr (ChiRel (HA ST))\n                   (HAInitStates (HA ST)))\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)\n 2. \\<And>U V W.\n       \\<lbrakk>TS \\<in> HPT ST; SA \\<in> the (CompFun (HA ST) S);\n        T \\<in> States SA;\n        (U, T)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>+;\n        U \\<in> HAInitStates (HA ST); (V, U) \\<in> ChiRel (HA ST);\n        V \\<in> Target TS; (U, T) \\<in> ChiPlus (HA ST);\n        (U, S)\n        \\<in> (Restr (ChiRel (HA ST)) (HAInitStates (HA ST)))\\<^sup>*;\n        (S, T) \\<in> ChiRel (HA ST); S \\<in> HAInitStates (HA ST);\n        T \\<in> HAInitStates (HA ST); S \\<notin> Target TS;\n        (W, S) \\<in> ChiStar (HA ST); W \\<in> Source TS;\n        U \\<notin> {y. \\<exists>x\\<in>Target TS.\n                          (x, y) \\<in> ChiRel (HA ST)} \\<inter>\n                   HAInitStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>Target TS.\n                            (x, S) \\<in> ChiRel (HA ST)", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma UniqueSucStates_StepConf:\n   \"\\<lbrakk> TS \\<in> HPT ST \\<rbrakk> \\<Longrightarrow> \n      UniqueSucStates (SAs (HA ST)) (CompFun (HA ST)) (StepConf (HA ST) (Conf ST) TS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    UniqueSucStates (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)", "apply (unfold UniqueSucStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    \\<forall>S\\<in>\\<Union> (States ` SAs (HA ST)).\n       \\<forall>A\\<in>the (CompFun (HA ST) S).\n          if S \\<in> StepConf (HA ST) (Conf ST) TS\n          then \\<exists>!S'.\n                  S' \\<in> States A \\<and>\n                  S' \\<in> StepConf (HA ST) (Conf ST) TS\n          else \\<forall>S\\<in>States A.\n                  S \\<notin> StepConf (HA ST) (Conf ST) TS", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y S A.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S'.\n                            S' \\<in> States A \\<and>\n                            S' \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S' = ya\n 3. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only: SucState_StepConf)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S' = ya\n 2. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule notnotD, rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule UniqueSucStates_SAStates_StepConf)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?S48 y S A S' ya\n                         \\<in> StepConf (HA ST) (Conf ST) TS\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?A48 y S A S' ya \\<in> SAs (HA ST)\n 3. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?A48 y S A S' ya\n                         \\<in> the (CompFun (HA ST) (?S48 y S A S' ya))\n 4. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<in> States (?A48 y S A S' ya)\n 5. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?U48 y S A S' ya \\<in> States (?A48 y S A S' ya)\n 6. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya\n                         \\<in> StepConf (HA ST) (Conf ST) TS\n 7. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<noteq> ?U48 y S A S' ya\n 8. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya;\n        ?U48 y S A S' ya \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?A48 y S A S' ya \\<in> SAs (HA ST)\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?A48 y S A S' ya \\<in> the (CompFun (HA ST) S)\n 3. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<in> States (?A48 y S A S' ya)\n 4. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?U48 y S A S' ya \\<in> States (?A48 y S A S' ya)\n 5. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya\n                         \\<in> StepConf (HA ST) (Conf ST) TS\n 6. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<noteq> ?U48 y S A S' ya\n 7. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya;\n        ?U48 y S A S' ya \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "prefer 2"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?A48 y S A S' ya \\<in> the (CompFun (HA ST) S)\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?A48 y S A S' ya \\<in> SAs (HA ST)\n 3. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<in> States (?A48 y S A S' ya)\n 4. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?U48 y S A S' ya \\<in> States (?A48 y S A S' ya)\n 5. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya\n                         \\<in> StepConf (HA ST) (Conf ST) TS\n 6. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<noteq> ?U48 y S A S' ya\n 7. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya;\n        ?U48 y S A S' ya \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> A \\<in> SAs (HA ST)\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<in> States A\n 3. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?U48 y S A S' ya \\<in> States A\n 4. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya\n                         \\<in> StepConf (HA ST) (Conf ST) TS\n 5. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<noteq> ?U48 y S A S' ya\n 6. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya;\n        ?U48 y S A S' ya \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule HAStates_CompFun_SAs_mem)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?S61 y S A S' ya \\<in> HAStates (HA ST)\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> A \\<in> the (CompFun (HA ST) (?S61 y S A S' ya))\n 3. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<in> States A\n 4. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?U48 y S A S' ya \\<in> States A\n 5. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya\n                         \\<in> StepConf (HA ST) (Conf ST) TS\n 6. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<noteq> ?U48 y S A S' ya\n 7. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya;\n        ?U48 y S A S' ya \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "prefer 2"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> A \\<in> the (CompFun (HA ST) (?S61 y S A S' ya))\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?S61 y S A S' ya \\<in> HAStates (HA ST)\n 3. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<in> States A\n 4. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?U48 y S A S' ya \\<in> States A\n 5. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya\n                         \\<in> StepConf (HA ST) (Conf ST) TS\n 6. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<noteq> ?U48 y S A S' ya\n 7. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya;\n        ?U48 y S A S' ya \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAStates (HA ST)\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<in> States A\n 3. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?U48 y S A S' ya \\<in> States A\n 4. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya\n                         \\<in> StepConf (HA ST) (Conf ST) TS\n 5. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<noteq> ?U48 y S A S' ya\n 6. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya;\n        ?U48 y S A S' ya \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only: HAStates_def, fast)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<in> States A\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?U48 y S A S' ya \\<in> States A\n 3. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya\n                         \\<in> StepConf (HA ST) (Conf ST) TS\n 4. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> ?T48 y S A S' ya \\<noteq> ?U48 y S A S' ya\n 5. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya;\n        ?U48 y S A S' ya \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya\\<rbrakk>\n       \\<Longrightarrow> S' \\<noteq> S'\n 2. \\<And>y S A S' ya.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<in> States A;\n        S' \\<in> StepConf (HA ST) (Conf ST) TS; ya \\<in> States A;\n        ya \\<in> StepConf (HA ST) (Conf ST) TS; S' \\<noteq> ya;\n        S' \\<notin> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule UniqueSucStates_Ancestor_StepConf)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?S80 y S A Sa \\<in> HAStates (HA ST)\n 2. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?SA80 y S A Sa\n                         \\<in> the (CompFun (HA ST) (?S80 y S A Sa))\n 3. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?T80 y S A Sa \\<in> States (?SA80 y S A Sa)\n 4. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?T80 y S A Sa \\<in> StepConf (HA ST) (Conf ST) TS\n 5. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS;\n        ?S80 y S A Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?SA80 y S A Sa\n                         \\<in> the (CompFun (HA ST) (?S80 y S A Sa))\n 2. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?S80 y S A Sa \\<in> HAStates (HA ST)\n 3. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?T80 y S A Sa \\<in> States (?SA80 y S A Sa)\n 4. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?T80 y S A Sa \\<in> StepConf (HA ST) (Conf ST) TS\n 5. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS;\n        ?S80 y S A Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAStates (HA ST)\n 2. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?T80 y S A Sa \\<in> States A\n 3. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?T80 y S A Sa \\<in> StepConf (HA ST) (Conf ST) TS\n 4. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:HAStates_def, fast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?T80 y S A Sa \\<in> States A\n 2. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> ?T80 y S A Sa \\<in> StepConf (HA ST) (Conf ST) TS\n 3. \\<And>y S A Sa.\n       \\<lbrakk>TS \\<in> HPT ST; y \\<in> SAs (HA ST); S \\<in> States y;\n        A \\<in> the (CompFun (HA ST) S);\n        S \\<notin> StepConf (HA ST) (Conf ST) TS; Sa \\<in> States A;\n        Sa \\<in> StepConf (HA ST) (Conf ST) TS;\n        S \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> False", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Status_Step:\n  \"\\<lbrakk> TS \\<in> HPT ST; U \\<in> ResolveRacing TS \\<rbrakk> \\<Longrightarrow>  \n    (HA ST, StepConf (HA ST) (Conf ST) TS, StepActEvent TS, U !!! (Value ST)) \\<in> status\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> (HA ST, StepConf (HA ST) (Conf ST) TS,\n                       StepActEvent TS, U !!! Value ST)\n                      \\<in> status", "apply (unfold status_def Status_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> (HA ST, StepConf (HA ST) (Conf ST) TS,\n                       StepActEvent TS, U !!! Value ST)\n                      \\<in> {(HA, C, E, D) |HA C E D.\n                             E \\<subseteq> HAEvents HA \\<and>\n                             IsConfSet (SAs HA) (CompFun HA) C \\<and>\n                             Data.DataSpace (HAInitValue HA) =\n                             Data.DataSpace D}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS;\n        x \\<in> StepActEvent TS\\<rbrakk>\n       \\<Longrightarrow> x \\<in> HAEvents (HA ST)\n 2. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> IsConfSet (SAs (HA ST)) (CompFun (HA ST))\n                       (StepConf (HA ST) (Conf ST) TS)", "apply (frule StepActEvent_HAEvents)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS;\n        x \\<in> StepActEvent TS;\n        StepActEvent TS \\<subseteq> HAEvents (HA ST)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> HAEvents (HA ST)\n 2. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> IsConfSet (SAs (HA ST)) (CompFun (HA ST))\n                       (StepConf (HA ST) (Conf ST) TS)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> IsConfSet (SAs (HA ST)) (CompFun (HA ST))\n                       (StepConf (HA ST) (Conf ST) TS)", "apply (unfold IsConfSet_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> StepConf (HA ST) (Conf ST) TS\n                      \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n                      RootExSem (SAs (HA ST)) (CompFun (HA ST))\n                       (StepConf (HA ST) (Conf ST) TS) \\<and>\n                      UniqueSucStates (SAs (HA ST)) (CompFun (HA ST))\n                       (StepConf (HA ST) (Conf ST) TS)", "apply (rule conjI, frule StepConf_HAStates, unfold HAStates_def,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> RootExSem (SAs (HA ST)) (CompFun (HA ST))\n                       (StepConf (HA ST) (Conf ST) TS) \\<and>\n                      UniqueSucStates (SAs (HA ST)) (CompFun (HA ST))\n                       (StepConf (HA ST) (Conf ST) TS)", "apply (rule conjI, rule RootExSem_StepConf, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> UniqueSucStates (SAs (HA ST)) (CompFun (HA ST))\n                       (StepConf (HA ST) (Conf ST) TS)", "apply (rule UniqueSucStates_StepConf, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Meta Theorem: Preservation for Statecharts\\<close>"], ["", "(* We prove, that the well-formedness of a Statecharts is preserved by the semantics\n   (theorem \"IsConfSet_StepConf\") *)"], ["", "lemma IsConfSet_StepConf:\n       \"TS \\<in> HPT ST \\<Longrightarrow> IsConfSet (SAs (HA ST)) (CompFun (HA ST))\n                                  (StepConf (HA ST) (Conf ST) TS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    IsConfSet (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)", "apply (unfold IsConfSet_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    StepConf (HA ST) (Conf ST) TS\n    \\<subseteq> \\<Union> (States ` SAs (HA ST)) \\<and>\n    RootExSem (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS) \\<and>\n    UniqueSucStates (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST;\n        x \\<in> StepConf (HA ST) (Conf ST) TS\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>SAs (HA ST). x \\<in> States xa\n 2. TS \\<in> HPT ST \\<Longrightarrow>\n    RootExSem (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)\n 3. TS \\<in> HPT ST \\<Longrightarrow>\n    UniqueSucStates (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)", "apply (frule StepConf_HAStates)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>TS \\<in> HPT ST; x \\<in> StepConf (HA ST) (Conf ST) TS;\n        StepConf (HA ST) (Conf ST) TS \\<subseteq> HAStates (HA ST)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>SAs (HA ST). x \\<in> States xa\n 2. TS \\<in> HPT ST \\<Longrightarrow>\n    RootExSem (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)\n 3. TS \\<in> HPT ST \\<Longrightarrow>\n    UniqueSucStates (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)", "apply (unfold HAStates_def, fast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    RootExSem (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)\n 2. TS \\<in> HPT ST \\<Longrightarrow>\n    UniqueSucStates (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)", "apply (rule RootExSem_StepConf, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TS \\<in> HPT ST \\<Longrightarrow>\n    UniqueSucStates (SAs (HA ST)) (CompFun (HA ST))\n     (StepConf (HA ST) (Conf ST) TS)", "apply (rule UniqueSucStates_StepConf, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HA_StepStatus_HPT_ResolveRacing [simp]:\n  \"\\<lbrakk> TS \\<in> HPT ST; U \\<in> ResolveRacing TS \\<rbrakk> \\<Longrightarrow> \n    HA (StepStatus ST TS U) = HA ST\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> HA (StepStatus ST TS U) = HA ST", "apply (subst StepStatus_expand [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> HA (Abs_status\n                           (HA ST, StepConf (HA ST) (Conf ST) TS,\n                            StepActEvent TS, U !!! Value ST)) =\n                      HA ST", "apply (subst HA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> (fst \\<circ> Rep_status)\n                       (Abs_status\n                         (HA ST, StepConf (HA ST) (Conf ST) TS,\n                          StepActEvent TS, U !!! Value ST)) =\n                      HA ST", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> fst (Rep_status\n                            (Abs_status\n                              (HA ST, StepConf (HA ST) (Conf ST) TS,\n                               StepActEvent TS, U !!! Value ST))) =\n                      HA ST", "apply (subst Abs_status_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> (HA ST, StepConf (HA ST) (Conf ST) TS,\n                       StepActEvent TS, U !!! Value ST)\n                      \\<in> status\n 2. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> fst (HA ST, StepConf (HA ST) (Conf ST) TS,\n                           StepActEvent TS, U !!! Value ST) =\n                      HA ST", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> (HA ST, StepConf (HA ST) (Conf ST) TS,\n                       StepActEvent TS, U !!! Value ST)\n                      \\<in> status", "apply (rule Status_Step)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> TS \\<in> HPT ST\n 2. \\<lbrakk>TS \\<in> HPT ST; U \\<in> ResolveRacing TS\\<rbrakk>\n    \\<Longrightarrow> U \\<in> ResolveRacing TS", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}