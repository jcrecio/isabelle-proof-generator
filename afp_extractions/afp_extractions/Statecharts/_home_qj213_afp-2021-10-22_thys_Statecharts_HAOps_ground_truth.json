{"file_name": "/home/qj213/afp-2021-10-22/thys/Statecharts/HAOps.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Statecharts", "problem_names": ["lemma EmptyMap_dom [simp]:\n  \"dom (EmptyMap S) = S\"", "lemma EmptyMap_ran [simp]:\n   \"S \\<noteq> {} \\<Longrightarrow> ran (EmptyMap S) = {{}}\"", "lemma EmptyMap_the [simp]:\n   \"x \\<in> S \\<Longrightarrow> the ((EmptyMap S) x) = {}\"", "lemma EmptyMap_ran_override:\n  \"\\<lbrakk> S \\<noteq> {}; (S \\<inter> (dom G)) = {} \\<rbrakk> \\<Longrightarrow>  \n  ran (G ++ EmptyMap S) = insert {} (ran G)\"", "lemma EmptyMap_Union_ran_override:\n \"\\<lbrakk> S \\<noteq> {};  \n    S \\<inter> dom G = {} \\<rbrakk> \\<Longrightarrow>  \n  (Union (ran (G ++ (EmptyMap S)))) = (Union (ran G))\"", "lemma EmptyMap_Union_ran_override2:\n \"\\<lbrakk> S \\<noteq> {}; S \\<inter> dom G1 = {}; \n    dom G1 \\<inter> dom G2 = {} \\<rbrakk> \\<Longrightarrow> \n   \\<Union> (ran (G1 ++ EmptyMap S ++ G2)) = (\\<Union> (ran G1 \\<union> ran G2))\"", "lemma EmptyMap_Root [simp]:\n \"Root {SA} (EmptyMap (States SA)) = SA\"", "lemma EmptyMap_RootEx [simp]:\n  \"RootEx {SA} (EmptyMap (States SA))\"", "lemma EmptyMap_OneAncestor [simp]:\n \"OneAncestor {SA} (EmptyMap (States SA))\"", "lemma EmptyMap_NoCycles [simp]:\n  \"NoCycles {SA} (EmptyMap (States SA))\"", "lemma EmptyMap_IsCompFun [simp]:\n \"IsCompFun {SA} (EmptyMap (States SA))\"", "lemma EmptyMap_hierauto [simp]:\n \"(D,{SA}, SAEvents SA, EmptyMap (States SA)) \\<in> hierauto\"", "lemma FAddSA_dom [simp]:\n \"(S \\<notin> (dom (A::('a => ('a,'c,'d)seqauto set option)))) \\<Longrightarrow>\n   ((A [f+] (S,(SA::('a,'c,'d)seqauto))) = A)\"", "lemma FAddSA_States [simp]:\n \"(S \\<in> (States (SA::('a,'c,'d)seqauto))) \\<Longrightarrow>\n   (((A::('a => ('a,'c,'d)seqauto set option)) [f+] (S,SA)) = A)\"", "lemma FAddSA_dom_insert [simp]:\n \"\\<lbrakk> S \\<in> (dom A); S \\<notin>  States SA \\<rbrakk> \\<Longrightarrow> \n   (((A [f+] (S,SA)) S) = Some (insert SA (the (A S))))\"", "lemma FAddSA_States_neq [simp]:\n \"\\<lbrakk> S' \\<notin> States (SA::('a,'c,'d)seqauto); S \\<noteq>  S' \\<rbrakk> \\<Longrightarrow> \n  ((((A::('a => ('a,'c,'d)seqauto set option)) [f+] (S,SA)) S') = (A S'))\"", "lemma FAddSA_dom_emptyset [simp]:\n \"\\<lbrakk> S \\<in> (dom A); S \\<notin> States SA; S' \\<in> States (SA::('a,'c,'d)seqauto) \\<rbrakk> \\<Longrightarrow>  \n    ((((A::('a => ('a,'c,'d)seqauto set option))) [f+] (S,SA)) S') = (Some {})\"", "lemma FAddSA_dom_dom_States [simp]:\n  \"\\<lbrakk> S \\<in> (dom F); S \\<notin> States SA \\<rbrakk> \\<Longrightarrow> \n    (dom ((F::('a \\<rightharpoonup> (('a,'b,'d)seqauto) set)) [f+] (S, SA))) = \n    ((dom F) \\<union> (States (SA::('a,'b,'d)seqauto)))\"", "lemma FAddSA_dom_dom [simp]:\n  \"S \\<notin> (dom F) \\<Longrightarrow>   \n   (dom ((F::('a \\<rightharpoonup> (('a,'b,'d)seqauto) set)) [f+] \n       (S,(SA::('a,'b,'d)seqauto)))) = (dom F)\"", "lemma FAddSA_States_dom [simp]:\n  \"S \\<in> (States SA) \\<Longrightarrow>  \n   (dom ((F::('a \\<rightharpoonup> (('a,'b,'d)seqauto) set)) [f+] \n        (S,(SA::('a,'b,'d)seqauto)))) = (dom F)\"", "lemma FAddSA_dom_insert_dom_disjunct [simp]:\n   \"\\<lbrakk> S \\<in> dom G; States SA \\<inter> dom G = {} \\<rbrakk> \\<Longrightarrow> ((G [f+] (S,SA)) S) = Some (insert SA (the (G S)))\"", "lemma FAddSA_Union_ran:\n \"\\<lbrakk> S \\<in> dom G; (States SA) \\<inter> (dom G) = {} \\<rbrakk> \\<Longrightarrow> \n   (\\<Union> (ran (G [f+] (S,SA)))) = (insert SA (\\<Union> (ran G)))\"", "lemma FAddSA_Union_ran2:\n \"\\<lbrakk> S \\<in> dom G1; (States SA) \\<inter> (dom G1) = {}; (dom G1 \\<inter> dom G2) = {} \\<rbrakk> \\<Longrightarrow>\n   (\\<Union> (ran ((G1 [f+] (S,SA)) ++ G2))) = (insert SA (\\<Union> ((ran G1) \\<union> (ran G2))))\"", "lemma FAddSA_ran:\n  \"\\<lbrakk> \\<forall> T \\<in> dom G . T \\<noteq> S \\<longrightarrow> (the (G T) \\<inter> the (G S)) = {};  \n     S \\<in> dom G; (States SA) \\<inter>  (dom G) = {} \\<rbrakk> \\<Longrightarrow>  \n    ran (G [f+] (S,SA)) = insert {} (insert (insert SA (the (G S))) (ran G - {the (G S)}))\"", "lemma FAddSA_RootEx_def: \n  \"\\<lbrakk> S \\<in> dom G; (States SA) \\<inter> (dom G) = {} \\<rbrakk> \\<Longrightarrow> \n    RootEx F (G [f+] (S,SA)) = (\\<exists>! A . A \\<in> F \\<and> A \\<notin> insert SA (\\<Union> (ran G)))\"", "lemma FAddSA_RootEx:\n  \"\\<lbrakk> \\<Union> (ran G) = F - {Root F G}; \n     dom G = \\<Union>(States ` F); \n     (dom G \\<inter> States SA) = {}; S \\<in> dom G; \n     RootEx F G \\<rbrakk> \\<Longrightarrow> RootEx (insert SA F) (G [f+] (S,SA))\"", "lemma FAddSA_Root_def:\n  \"\\<lbrakk> S \\<in> dom G; (States SA) \\<inter> (dom G) = {} \\<rbrakk>  \\<Longrightarrow> \n   (Root F (G [f+] (S,SA)) = (@ A . A \\<in> F \\<and> A \\<notin> insert SA (\\<Union> (ran G))))\"", "lemma FAddSA_RootEx_Root: \n  \"\\<lbrakk> Union (ran G) = F - {Root F G};  \n     \\<Union>(States ` F) = dom G; \n     (dom G \\<inter> States SA) = {}; S \\<in> dom G;\n     RootEx F G \\<rbrakk> \\<Longrightarrow> (Root (insert SA F) (G [f+] (S,SA))) = (Root F G)\"", "lemma FAddSA_OneAncestor:\n  \"\\<lbrakk> \\<Union> (ran G) = F - {Root F G}; \n     (dom G \\<inter> States SA) = {}; S \\<in> dom G; \n     \\<Union>(States ` F) = dom G; RootEx F G;\n     OneAncestor F G \\<rbrakk> \\<Longrightarrow> OneAncestor (insert SA F) (G [f+] (S,SA))\"", "lemma FAddSA_NoCycles:\n  \"\\<lbrakk> (States SA \\<inter> dom G) = {}; S \\<in> dom G;\n     dom G = \\<Union>(States ` F); NoCycles F G \\<rbrakk> \\<Longrightarrow> \n     NoCycles  (insert SA F) (G [f+] (S,SA))\"", "lemma FAddSA_IsCompFun:\n \"\\<lbrakk> (States SA \\<inter> (\\<Union>(States ` F))) = {};\n     S \\<in> (\\<Union>(States ` F)); \n     IsCompFun F G \\<rbrakk> \\<Longrightarrow>  IsCompFun (insert SA F) (G [f+] (S,SA))\"", "lemma FAddSA_HierAuto:\n  \"\\<lbrakk> (States SA \\<inter> (\\<Union>(States ` F))) = {};\n      S \\<in> (\\<Union>(States ` F)); \n      HierAuto D F E G \\<rbrakk> \\<Longrightarrow> HierAuto D (insert SA F) (E \\<union> SAEvents SA) (G [f+] (S,SA))\"", "lemma FAddSA_HierAuto_insert [simp]:\n  \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {};\n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow> \n    HierAuto (HAInitValue HA)                  \n             (insert SA (SAs HA))              \n             (HAEvents HA \\<union> SAEvents SA)      \n             (CompFun HA [f+] (S,SA))\"", "lemma PseudoHA_SAs [simp]:\n  \"SAs (PseudoHA SA D) = {SA}\"", "lemma PseudoHA_Events [simp]:\n  \"HAEvents (PseudoHA SA D) = SAEvents SA\"", "lemma PseudoHA_CompFun [simp]:\n  \"CompFun (PseudoHA SA D) = EmptyMap (States SA)\"", "lemma PseudoHA_HAStates [simp]:\n  \"HAStates (PseudoHA SA D) = (States SA)\"", "lemma PseudoHA_HAInitValue [simp]:\n  \"(HAInitValue (PseudoHA SA D)) = D\"", "lemma PseudoHA_CompFun_the [simp]: \n \"S \\<in> States A \\<Longrightarrow> (the (CompFun (PseudoHA A D) S)) = {}\"", "lemma PseudoHA_CompFun_ran [simp]:\n \"(ran (CompFun (PseudoHA SA D))) = {{}}\"", "lemma PseudoHA_HARoot [simp]:\n \"(HARoot (PseudoHA SA D)) = SA\"", "lemma PseudoHA_HAInitState [simp]:\n  \"HAInitState (PseudoHA A D) = InitState A\"", "lemma PseudoHA_HAInitStates [simp]:\n  \"HAInitStates (PseudoHA A D) = {InitState A}\"", "lemma PseudoHA_Chi [simp]:\n  \"S \\<in> States A \\<Longrightarrow> Chi (PseudoHA A D) S = {}\"", "lemma PseudoHA_ChiRel [simp]:\n  \"ChiRel (PseudoHA A D) = {}\"", "lemma PseudoHA_InitConf [simp]:\n \"InitConf (PseudoHA A D) = {InitState A}\"", "lemma AddSA_SAs:\n  \"\\<lbrakk> (States SA \\<inter>  HAStates HA) = {}; \n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow> (SAs (HA [++] (S,SA))) = insert SA (SAs HA)\"", "lemma AddSA_Events:\n  \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {}; \n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow>\n     HAEvents (HA [++] (S,SA)) = (HAEvents HA) \\<union> (SAEvents SA)\"", "lemma AddSA_CompFun:\n   \"\\<lbrakk> (States SA \\<inter>  HAStates HA) = {}; \n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow>  \n     CompFun (HA [++] (S,SA)) = (CompFun HA [f+] (S,SA))\"", "lemma AddSA_HAStates:\n   \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {}; \n       S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow>\n      HAStates (HA [++] (S,SA)) = (HAStates HA) \\<union> (States SA)\"", "lemma AddSA_HAInitValue:\n   \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {};\n       S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow>\n      (HAInitValue (HA [++] (S,SA))) = (HAInitValue HA)\"", "lemma AddSA_HARoot:\n   \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {};\n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow> \n      (HARoot (HA [++] (S,SA))) = (HARoot HA)\"", "lemma AddSA_CompFun_the: \n \"\\<lbrakk> (States SA \\<inter> HAStates A) = {}; \n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n  (the ((CompFun (A [++] (S,SA))) S)) = insert SA (the ((CompFun A) S))\"", "lemma AddSA_CompFun_the2:\n \"\\<lbrakk> S' \\<in> States (SA::('a,'c,'d)seqauto); \n    (States SA \\<inter> HAStates A) = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>\n    the ((CompFun (A [++] (S,SA))) S') = {}\"", "lemma AddSA_CompFun_the3:\n \"\\<lbrakk> S' \\<notin> States (SA::('a,'c,'d)seqauto); \n    S \\<noteq> S'; \n    (States SA \\<inter> HAStates A) = {}; \n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n   (the ((CompFun (A [++] (S,SA))) S')) = (the ((CompFun A) S'))\"", "lemma AddSA_CompFun_ran:\n \"\\<lbrakk> (States SA \\<inter> HAStates A) = {};\n     S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n   ran (CompFun (A [++] (S,SA))) = \n       insert {} (insert (insert SA (the ((CompFun A) S))) (ran (CompFun A) - {the ((CompFun A) S)}))\"", "lemma AddSA_CompFun_ran2:\n \"\\<lbrakk> (States SA1 \\<inter> HAStates A) = {};\n    (States SA2 \\<inter> (HAStates A \\<union> States SA1)) = {};\n     S \\<in> HAStates A;\n     T \\<in> States SA1 \\<rbrakk> \\<Longrightarrow>\n   ran (CompFun ((A [++] (S,SA1)) [++] (T,SA2))) = \n       insert {} (insert {SA2} (ran (CompFun (A  [++] (S,SA1)))))\"", "lemma AddSA_CompFun_ran_not_mem:\n \"\\<lbrakk> States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n    States SA1 \\<inter> HAStates A = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n   {SA2} \\<notin> ran (CompFun A [f+] (S, SA1))\"", "lemma AddSA_CompFun_ran3:\n \"\\<lbrakk> (States SA1 \\<inter> HAStates A) = {};\n    (States SA2 \\<inter> (HAStates A \\<union> States SA1)) = {};\n    (States SA3 \\<inter> (HAStates A \\<union> States SA1 \\<union> States SA2)) = {};\n     S \\<in> HAStates A; \n     T \\<in> States SA1 \\<rbrakk> \\<Longrightarrow> \n    ran (CompFun ((A [++] (S,SA1)) [++] (T,SA2) [++] (T,SA3))) = \n       insert {} (insert {SA3,SA2} (ran (CompFun (A  [++] (S,SA1)))))\"", "lemma AddSA_CompFun_PseudoHA_ran:\n  \"\\<lbrakk> S \\<in> States RootSA;\n     States RootSA \\<inter> States SA = {} \\<rbrakk> \\<Longrightarrow> \n     (ran (CompFun ((PseudoHA RootSA D) [++] (S,SA)))) = (insert {} {{SA}})\"", "lemma AddSA_CompFun_PseudoHA_ran2:\n  \"\\<lbrakk> States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {}; \n     S \\<in> States RootSA \\<rbrakk> \\<Longrightarrow>  \n     (ran (CompFun ((PseudoHA RootSA D) [++] (S,SA1) [++] (S,SA2)))) = (insert {} {{SA2,SA1}})\"", "lemma AddSA_HAInitStates [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>\n   HAInitStates (A [++] (S,SA)) = insert (InitState SA) (HAInitStates A)\"", "lemma AddSA_HAInitState [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>\n  HAInitState (A [++] (S,SA)) = (HAInitState A)\"", "lemma AddSA_Chi [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n   S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>  \n  Chi (A [++] (S,SA)) S = (States SA) \\<union> (Chi A S)\"", "lemma AddSA_Chi2 [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A;  \n    T \\<in> States SA \\<rbrakk> \\<Longrightarrow>\n    Chi (A [++] (S,SA)) T = {}\"", "lemma AddSA_Chi3 [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A; \n    T \\<notin> States SA; T \\<noteq> S \\<rbrakk> \\<Longrightarrow>\n    Chi (A [++] (S,SA)) T = Chi A T\"", "lemma AddSA_ChiRel [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n   ChiRel (A [++] (S,SA)) = { (T,T') . T = S \\<and> T' \\<in> States SA } \\<union> (ChiRel A)\"", "lemma help_InitConf:\n  \"\\<lbrakk>States SA \\<inter> HAStates A = {} \\<rbrakk> \\<Longrightarrow> {p. fst p \\<noteq> InitState SA \\<and> snd p \\<noteq> InitState SA \\<and> \n       p \\<in>  insert (InitState SA) (HAInitStates A) \\<times> insert (InitState SA) (HAInitStates A) \\<and>  \n       (p \\<in>  {S} \\<times> States SA \\<or>  p \\<in>  ChiRel A)} = \n   (HAInitStates A \\<times> HAInitStates A \\<inter>  ChiRel A)\"", "lemma AddSA_InitConf [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> InitConf A \\<rbrakk> \\<Longrightarrow> \n    InitConf (A [++] (S,SA)) = insert (InitState SA) (InitConf A)\"", "lemma AddSA_InitConf2 [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<notin> InitConf A;\n  S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>\n  InitConf (A [++] (S,SA)) = InitConf A\"", "lemma PseudoHA_HAStates_IFF:\n \"(States SA) = X  \\<Longrightarrow> (HAStates (PseudoHA SA D)) = X\"", "lemma AddSA_SAs_IFF:\n \"\\<lbrakk> States SA \\<inter> HAStates HA = {};\n    S \\<in> HAStates HA;\n    (SAs HA) = X \\<rbrakk> \\<Longrightarrow> (SAs (HA [++] (S, SA))) = (insert SA X)\"", "lemma AddSA_Events_IFF:\n \"\\<lbrakk> States SA \\<inter> HAStates HA = {}; \n    S \\<in> HAStates HA; \n    (HAEvents HA) = HAE;\n    (SAEvents SA) = SAE;  \n    (HAE \\<union> SAE) = X \\<rbrakk> \\<Longrightarrow> (HAEvents (HA [++] (S, SA))) = X\"", "lemma AddSA_CompFun_IFF:\n \"\\<lbrakk> States SA \\<inter>  HAStates HA = {};\n    S \\<in> HAStates HA;\n    (CompFun HA) = HAG;\n    (HAG [f+] (S, SA)) = X \\<rbrakk> \\<Longrightarrow> (CompFun (HA [++] (S, SA))) = X\"", "lemma AddSA_HAStates_IFF: \n \"\\<lbrakk> States SA \\<inter> HAStates HA = {};\n    S \\<in> HAStates HA;\n    (HAStates HA) = HAS;\n    (States SA) = SAS;\n    (HAS \\<union> SAS) = X \\<rbrakk> \\<Longrightarrow> (HAStates (HA [++] (S, SA))) = X\"", "lemma AddSA_HAInitValue_IFF:\n \"\\<lbrakk> States SA \\<inter> HAStates HA = {};\n    S \\<in> HAStates HA;\n    (HAInitValue HA) = X \\<rbrakk> \\<Longrightarrow> (HAInitValue (HA [++] (S, SA))) = X\"", "lemma AddSA_HARoot_IFF:\n \"\\<lbrakk> States SA \\<inter> HAStates HA = {};\n    S \\<in> HAStates HA;\n    (HARoot HA) = X \\<rbrakk> \\<Longrightarrow> (HARoot (HA [++] (S, SA))) = X\"", "lemma AddSA_InitConf_IFF:\n \"\\<lbrakk> InitConf A = Y;\n    States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A; \n    (if S \\<in> Y then insert (InitState SA) Y else Y) = X \\<rbrakk> \\<Longrightarrow> \n    InitConf (A [++] (S,SA)) = X\"", "lemma AddSA_CompFun_ran_IFF:\n  \"\\<lbrakk> (States SA \\<inter> HAStates A) = {}; \n     S \\<in> HAStates A;\n     (insert {} (insert (insert SA (the ((CompFun A) S))) (ran (CompFun A) - {the ((CompFun A) S)}))) = X \\<rbrakk> \\<Longrightarrow>\n     ran (CompFun (A [++] (S,SA))) = X\"", "lemma AddSA_CompFun_ran2_IFF:\n \"\\<lbrakk> (States SA1 \\<inter> HAStates A) = {}; \n    (States SA2 \\<inter> (HAStates A \\<union> States SA1)) = {};\n    S \\<in> HAStates A;\n    T \\<in> States SA1;\n    insert {} (insert {SA2} (ran (CompFun (A  [++] (S,SA1))))) = X \\<rbrakk> \\<Longrightarrow>\n    ran (CompFun ((A [++] (S,SA1)) [++] (T,SA2))) = X\"", "lemma AddSA_CompFun_ran3_IFF:\n \"\\<lbrakk> (States SA1 \\<inter> HAStates A) = {};\n    (States SA2 \\<inter> (HAStates A \\<union> States SA1)) = {};\n    (States SA3 \\<inter> (HAStates A \\<union> States SA1 \\<union> States SA2)) = {};\n     S \\<in> HAStates A;\n     T \\<in> States SA1;\n     insert {} (insert {SA3,SA2} (ran (CompFun (A  [++] (S,SA1))))) = X \\<rbrakk> \\<Longrightarrow>\n     ran (CompFun ((A [++] (S,SA1)) [++] (T,SA2) [++] (T,SA3))) = X\"", "lemma AddSA_CompFun_PseudoHA_ran_IFF:\n  \"\\<lbrakk> S \\<in> States RootSA; \n     States RootSA \\<inter> States SA = {};\n   (insert {} {{SA}}) = X \\<rbrakk> \\<Longrightarrow> \n   (ran (CompFun ((PseudoHA RootSA D) [++] (S,SA)))) = X\"", "lemma AddSA_CompFun_PseudoHA_ran2_IFF:\n  \"\\<lbrakk> States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA;\n     (insert {} {{SA2,SA1}}) = X \\<rbrakk> \\<Longrightarrow> \n     (ran (CompFun ((PseudoHA RootSA D) [++] (S,SA1) [++] (S,SA2)))) = X\""], "translations": [["", "lemma EmptyMap_dom [simp]:\n  \"dom (EmptyMap S) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (EmptyMap S) = S", "by (unfold dom_def EmptyMap_def,auto)"], ["", "lemma EmptyMap_ran [simp]:\n   \"S \\<noteq> {} \\<Longrightarrow> ran (EmptyMap S) = {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> ran (EmptyMap S) = {{}}", "by (unfold ran_def EmptyMap_def, auto)"], ["", "lemma EmptyMap_the [simp]:\n   \"x \\<in> S \\<Longrightarrow> the ((EmptyMap S) x) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow> the (EmptyMap S x) = {}", "by (unfold ran_def EmptyMap_def, auto)"], ["", "lemma EmptyMap_ran_override:\n  \"\\<lbrakk> S \\<noteq> {}; (S \\<inter> (dom G)) = {} \\<rbrakk> \\<Longrightarrow>  \n  ran (G ++ EmptyMap S) = insert {} (ran G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {}; S \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> ran (G ++ EmptyMap S) = insert {} (ran G)", "apply (subst ran_override)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<noteq> {}; S \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> dom G \\<inter> dom (EmptyMap S) = {}\n 2. \\<lbrakk>S \\<noteq> {}; S \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> ran G \\<union> ran (EmptyMap S) = insert {} (ran G)", "apply (simp add: Int_commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {}; S \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> ran G \\<union> ran (EmptyMap S) = insert {} (ran G)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma EmptyMap_Union_ran_override:\n \"\\<lbrakk> S \\<noteq> {};  \n    S \\<inter> dom G = {} \\<rbrakk> \\<Longrightarrow>  \n  (Union (ran (G ++ (EmptyMap S)))) = (Union (ran G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {}; S \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran (G ++ EmptyMap S)) = \\<Union> (ran G)", "apply (subst EmptyMap_ran_override)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<noteq> {}; S \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<noteq> {}\n 2. \\<lbrakk>S \\<noteq> {}; S \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<inter> dom G = {}\n 3. \\<lbrakk>S \\<noteq> {}; S \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (insert {} (ran G)) = \\<Union> (ran G)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma EmptyMap_Union_ran_override2:\n \"\\<lbrakk> S \\<noteq> {}; S \\<inter> dom G1 = {}; \n    dom G1 \\<inter> dom G2 = {} \\<rbrakk> \\<Longrightarrow> \n   \\<Union> (ran (G1 ++ EmptyMap S ++ G2)) = (\\<Union> (ran G1 \\<union> ran G2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {}; S \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran (G1 ++ EmptyMap S ++ G2)) =\n                      \\<Union> (ran G1 \\<union> ran G2)", "apply (unfold Union_eq UNION_eq EmptyMap_def Int_def ran_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {}; {x \\<in> S. x \\<in> dom G1} = {};\n     {x \\<in> dom G1. x \\<in> dom G2} = {}\\<rbrakk>\n    \\<Longrightarrow> {x. Bex {b. \\<exists>a.\n                                     (G1 ++\n(\\<lambda>a. if a \\<in> S then Some {} else None) ++\nG2)\na =\n                                     Some b}\n                           ((\\<in>) x)} =\n                      {x. Bex ({b. \\<exists>a. G1 a = Some b} \\<union>\n                               {b. \\<exists>a. G2 a = Some b})\n                           ((\\<in>) x)}", "apply (simp add: map_add_Some_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {};\n     \\<forall>x. x \\<in> S \\<longrightarrow> x \\<notin> dom G1;\n     \\<forall>x. x \\<in> dom G1 \\<longrightarrow> x \\<notin> dom G2\\<rbrakk>\n    \\<Longrightarrow> {x. \\<exists>xa.\n                             (\\<exists>a.\n                                 (a \\<in> S \\<longrightarrow>\n                                  G2 a = Some xa \\<or>\n                                  G2 a = None \\<and> {} = xa) \\<and>\n                                 (a \\<notin> S \\<longrightarrow>\n                                  G2 a = Some xa \\<or>\n                                  G2 a = None \\<and> G1 a = Some xa)) \\<and>\n                             x \\<in> xa} =\n                      {x. \\<exists>xa\\<in>{b.\n     \\<exists>a. G1 a = Some b} \\<union>\n    {b. \\<exists>a. G2 a = Some b}.\n                             x \\<in> xa}", "apply (unfold dom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {};\n     \\<forall>x.\n        x \\<in> S \\<longrightarrow> x \\<notin> {a. G1 a \\<noteq> None};\n     \\<forall>x.\n        x \\<in> {a. G1 a \\<noteq> None} \\<longrightarrow>\n        x \\<notin> {a. G2 a \\<noteq> None}\\<rbrakk>\n    \\<Longrightarrow> {x. \\<exists>xa.\n                             (\\<exists>a.\n                                 (a \\<in> S \\<longrightarrow>\n                                  G2 a = Some xa \\<or>\n                                  G2 a = None \\<and> {} = xa) \\<and>\n                                 (a \\<notin> S \\<longrightarrow>\n                                  G2 a = Some xa \\<or>\n                                  G2 a = None \\<and> G1 a = Some xa)) \\<and>\n                             x \\<in> xa} =\n                      {x. \\<exists>xa\\<in>{b.\n     \\<exists>a. G1 a = Some b} \\<union>\n    {b. \\<exists>a. G2 a = Some b}.\n                             x \\<in> xa}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {};\n     \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n     \\<forall>x.\n        (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None\\<rbrakk>\n    \\<Longrightarrow> {x. \\<exists>xa.\n                             (\\<exists>a.\n                                 (a \\<in> S \\<longrightarrow>\n                                  G2 a = Some xa \\<or>\n                                  G2 a = None \\<and> {} = xa) \\<and>\n                                 (a \\<notin> S \\<longrightarrow>\n                                  G2 a = Some xa \\<or>\n                                  G2 a = None \\<and> G1 a = Some xa)) \\<and>\n                             x \\<in> xa} =\n                      {x. \\<exists>xa\\<in>{b.\n     \\<exists>a. G1 a = Some b} \\<union>\n    {b. \\<exists>a. G2 a = Some b}.\n                             x \\<in> xa}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<noteq> {};\n     \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n     \\<forall>x.\n        (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None\\<rbrakk>\n    \\<Longrightarrow> {x. \\<exists>xa.\n                             (\\<exists>a.\n                                 (a \\<in> S \\<longrightarrow>\n                                  G2 a = Some xa \\<or>\n                                  G2 a = None \\<and> {} = xa) \\<and>\n                                 (a \\<notin> S \\<longrightarrow>\n                                  G2 a = Some xa \\<or>\n                                  G2 a = None \\<and> G1 a = Some xa)) \\<and>\n                             x \\<in> xa}\n                      \\<subseteq> {x. \\<exists>xa\n         \\<in>{b. \\<exists>a. G1 a = Some b} \\<union>\n              {b. \\<exists>a. G2 a = Some b}.\n   x \\<in> xa}\n 2. \\<lbrakk>S \\<noteq> {};\n     \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n     \\<forall>x.\n        (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None\\<rbrakk>\n    \\<Longrightarrow> {x. \\<exists>xa\\<in>{b.\n     \\<exists>a. G1 a = Some b} \\<union>\n    {b. \\<exists>a. G2 a = Some b}.\n                             x \\<in> xa}\n                      \\<subseteq> {x. \\<exists>xa.\n   (\\<exists>a.\n       (a \\<in> S \\<longrightarrow>\n        G2 a = Some xa \\<or> G2 a = None \\<and> {} = xa) \\<and>\n       (a \\<notin> S \\<longrightarrow>\n        G2 a = Some xa \\<or> G2 a = None \\<and> G1 a = Some xa)) \\<and>\n   x \\<in> xa}", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        x \\<in> {x. \\<exists>xa.\n                       (\\<exists>a.\n                           (a \\<in> S \\<longrightarrow>\n                            G2 a = Some xa \\<or>\n                            G2 a = None \\<and> {} = xa) \\<and>\n                           (a \\<notin> S \\<longrightarrow>\n                            G2 a = Some xa \\<or>\n                            G2 a = None \\<and> G1 a = Some xa)) \\<and>\n                       x \\<in> xa}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {x. \\<exists>xa\n        \\<in>{b. \\<exists>a. G1 a = Some b} \\<union>\n             {b. \\<exists>a. G2 a = Some b}.\n  x \\<in> xa}\n 2. \\<lbrakk>S \\<noteq> {};\n     \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n     \\<forall>x.\n        (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None\\<rbrakk>\n    \\<Longrightarrow> {x. \\<exists>xa\\<in>{b.\n     \\<exists>a. G1 a = Some b} \\<union>\n    {b. \\<exists>a. G2 a = Some b}.\n                             x \\<in> xa}\n                      \\<subseteq> {x. \\<exists>xa.\n   (\\<exists>a.\n       (a \\<in> S \\<longrightarrow>\n        G2 a = Some xa \\<or> G2 a = None \\<and> {} = xa) \\<and>\n       (a \\<notin> S \\<longrightarrow>\n        G2 a = Some xa \\<or> G2 a = None \\<and> G1 a = Some xa)) \\<and>\n   x \\<in> xa}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        \\<exists>xa.\n           (\\<exists>a.\n               (a \\<in> S \\<longrightarrow>\n                G2 a = Some xa \\<or> G2 a = None \\<and> {} = xa) \\<and>\n               (a \\<notin> S \\<longrightarrow>\n                G2 a = Some xa \\<or>\n                G2 a = None \\<and> G1 a = Some xa)) \\<and>\n           x \\<in> xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>{b.\n    \\<exists>a. G1 a = Some b} \\<union>\n   {b. \\<exists>a. G2 a = Some b}.\n                            x \\<in> xa\n 2. \\<lbrakk>S \\<noteq> {};\n     \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n     \\<forall>x.\n        (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None\\<rbrakk>\n    \\<Longrightarrow> {x. \\<exists>xa\\<in>{b.\n     \\<exists>a. G1 a = Some b} \\<union>\n    {b. \\<exists>a. G2 a = Some b}.\n                             x \\<in> xa}\n                      \\<subseteq> {x. \\<exists>xa.\n   (\\<exists>a.\n       (a \\<in> S \\<longrightarrow>\n        G2 a = Some xa \\<or> G2 a = None \\<and> {} = xa) \\<and>\n       (a \\<notin> S \\<longrightarrow>\n        G2 a = Some xa \\<or> G2 a = None \\<and> G1 a = Some xa)) \\<and>\n   x \\<in> xa}", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {};\n     \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n     \\<forall>x.\n        (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None\\<rbrakk>\n    \\<Longrightarrow> {x. \\<exists>xa\\<in>{b.\n     \\<exists>a. G1 a = Some b} \\<union>\n    {b. \\<exists>a. G2 a = Some b}.\n                             x \\<in> xa}\n                      \\<subseteq> {x. \\<exists>xa.\n   (\\<exists>a.\n       (a \\<in> S \\<longrightarrow>\n        G2 a = Some xa \\<or> G2 a = None \\<and> {} = xa) \\<and>\n       (a \\<notin> S \\<longrightarrow>\n        G2 a = Some xa \\<or> G2 a = None \\<and> G1 a = Some xa)) \\<and>\n   x \\<in> xa}", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        x \\<in> {x. \\<exists>xa\\<in>{b. \\<exists>a. G1 a = Some b} \\<union>\n                                    {b. \\<exists>a. G2 a = Some b}.\n                       x \\<in> xa}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {x. \\<exists>xa.\n  (\\<exists>a.\n      (a \\<in> S \\<longrightarrow>\n       G2 a = Some xa \\<or> G2 a = None \\<and> {} = xa) \\<and>\n      (a \\<notin> S \\<longrightarrow>\n       G2 a = Some xa \\<or> G2 a = None \\<and> G1 a = Some xa)) \\<and>\n  x \\<in> xa}", "apply (rename_tac t)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> {x. \\<exists>xa\\<in>{b. \\<exists>a. G1 a = Some b} \\<union>\n                                    {b. \\<exists>a. G2 a = Some b}.\n                       x \\<in> xa}\\<rbrakk>\n       \\<Longrightarrow> t \\<in> {x. \\<exists>xa.\n  (\\<exists>a.\n      (a \\<in> S \\<longrightarrow>\n       G2 a = Some xa \\<or> G2 a = None \\<and> {} = xa) \\<and>\n      (a \\<notin> S \\<longrightarrow>\n       G2 a = Some xa \\<or> G2 a = None \\<and> G1 a = Some xa)) \\<and>\n  x \\<in> xa}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        \\<exists>x\\<in>{b. \\<exists>a. G1 a = Some b} \\<union>\n                       {b. \\<exists>a. G2 a = Some b}.\n           t \\<in> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        x \\<in> {b. \\<exists>a. G1 a = Some b} \\<union>\n                {b. \\<exists>a. G2 a = Some b};\n        t \\<in> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply (rename_tac U)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t U.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        U \\<in> {b. \\<exists>a. G1 a = Some b} \\<union>\n                {b. \\<exists>a. G2 a = Some b};\n        t \\<in> U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t U.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        (\\<exists>a. G1 a = Some U) \\<or> (\\<exists>a. G2 a = Some U);\n        t \\<in> U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t U.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; \\<exists>a. G1 a = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x\n 2. \\<And>t U.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; \\<exists>a. G2 a = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply (erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t U a.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; G1 a = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x\n 2. \\<And>t U.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; \\<exists>a. G2 a = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply (rename_tac v)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t U v.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; G1 v = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x\n 2. \\<And>t U.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; \\<exists>a. G2 a = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply (rule_tac x=U in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t U v.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; G1 v = Some U\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>a.\n                             (a \\<in> S \\<longrightarrow>\n                              G2 a = Some U \\<or>\n                              G2 a = None \\<and> {} = U) \\<and>\n                             (a \\<notin> S \\<longrightarrow>\n                              G2 a = Some U \\<or>\n                              G2 a = None \\<and> G1 a = Some U)) \\<and>\n                         t \\<in> U\n 2. \\<And>t U.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; \\<exists>a. G2 a = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t U v.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; G1 v = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            (a \\<in> S \\<longrightarrow>\n                             G2 a = Some U \\<or>\n                             G2 a = None \\<and> {} = U) \\<and>\n                            (a \\<notin> S \\<longrightarrow>\n                             G2 a = Some U \\<or>\n                             G2 a = None \\<and> G1 a = Some U)\n 2. \\<And>t U.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; \\<exists>a. G2 a = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply (rule_tac x=v in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t U v.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; G1 v = Some U\\<rbrakk>\n       \\<Longrightarrow> (v \\<in> S \\<longrightarrow>\n                          G2 v = Some U \\<or>\n                          G2 v = None \\<and> {} = U) \\<and>\n                         (v \\<notin> S \\<longrightarrow>\n                          G2 v = Some U \\<or>\n                          G2 v = None \\<and> G1 v = Some U)\n 2. \\<And>t U.\n       \\<lbrakk>S \\<noteq> {};\n        \\<forall>x. x \\<in> S \\<longrightarrow> G1 x = None;\n        \\<forall>x.\n           (\\<exists>y. G1 x = Some y) \\<longrightarrow> G2 x = None;\n        t \\<in> U; \\<exists>a. G2 a = Some U\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>a.\n                                (a \\<in> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> {} = x) \\<and>\n                                (a \\<notin> S \\<longrightarrow>\n                                 G2 a = Some x \\<or>\n                                 G2 a = None \\<and> G1 a = Some x)) \\<and>\n                            t \\<in> x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma EmptyMap_Root [simp]:\n \"Root {SA} (EmptyMap (States SA)) = SA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Root {SA} (EmptyMap (States SA)) = SA", "by (unfold Root_def, auto)"], ["", "lemma EmptyMap_RootEx [simp]:\n  \"RootEx {SA} (EmptyMap (States SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RootEx {SA} (EmptyMap (States SA))", "by (unfold RootEx_def, auto)"], ["", "lemma EmptyMap_OneAncestor [simp]:\n \"OneAncestor {SA} (EmptyMap (States SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OneAncestor {SA} (EmptyMap (States SA))", "by (unfold OneAncestor_def, auto)"], ["", "lemma EmptyMap_NoCycles [simp]:\n  \"NoCycles {SA} (EmptyMap (States SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NoCycles {SA} (EmptyMap (States SA))", "by (unfold NoCycles_def EmptyMap_def , auto)"], ["", "lemma EmptyMap_IsCompFun [simp]:\n \"IsCompFun {SA} (EmptyMap (States SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IsCompFun {SA} (EmptyMap (States SA))", "by (unfold IsCompFun_def, auto)"], ["", "lemma EmptyMap_hierauto [simp]:\n \"(D,{SA}, SAEvents SA, EmptyMap (States SA)) \\<in> hierauto\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D, {SA}, SAEvents SA, EmptyMap (States SA)) \\<in> hierauto", "by (unfold hierauto_def HierAuto_def, auto)"], ["", "subsection \"Extending a Composition Function by a SA\""], ["", "definition\n  FAddSA :: \"[('s \\<rightharpoonup> (('s,'e,'d)seqauto) set), 's * ('s,'e,'d)seqauto]\n             => ('s \\<rightharpoonup> (('s,'e,'d)seqauto) set)\"\n           (\"(_ [f+]/ _)\" [10,11]10) where\n  \"FAddSA G SSA = (let  (S,SA) = SSA\n                   in\n                     (if ((S \\<in> dom G) \\<and> (S \\<notin> States SA)) then\n                        (G ++ (Map.empty(S \\<mapsto> (insert SA (the (G S)))))\n                         ++ EmptyMap (States SA))\n                      else G))\""], ["", "lemma FAddSA_dom [simp]:\n \"(S \\<notin> (dom (A::('a => ('a,'c,'d)seqauto set option)))) \\<Longrightarrow>\n   ((A [f+] (S,(SA::('a,'c,'d)seqauto))) = A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<notin> dom A \\<Longrightarrow> (A [f+] (S, SA)) = A", "by (unfold FAddSA_def Let_def, auto)"], ["", "lemma FAddSA_States [simp]:\n \"(S \\<in> (States (SA::('a,'c,'d)seqauto))) \\<Longrightarrow>\n   (((A::('a => ('a,'c,'d)seqauto set option)) [f+] (S,SA)) = A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> States SA \\<Longrightarrow> (A [f+] (S, SA)) = A", "by (unfold FAddSA_def Let_def, auto)"], ["", "lemma FAddSA_dom_insert [simp]:\n \"\\<lbrakk> S \\<in> (dom A); S \\<notin>  States SA \\<rbrakk> \\<Longrightarrow> \n   (((A [f+] (S,SA)) S) = Some (insert SA (the (A S))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom A; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> (A [f+] (S, SA)) S = Some (insert SA (the (A S)))", "by (unfold FAddSA_def Let_def restrict_def, auto)"], ["", "lemma FAddSA_States_neq [simp]:\n \"\\<lbrakk> S' \\<notin> States (SA::('a,'c,'d)seqauto); S \\<noteq>  S' \\<rbrakk> \\<Longrightarrow> \n  ((((A::('a => ('a,'c,'d)seqauto set option)) [f+] (S,SA)) S') = (A S'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'\\<rbrakk>\n    \\<Longrightarrow> (A [f+] (S, SA)) S' = A S'", "apply (case_tac \"S \\<in> dom A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<in> dom A\\<rbrakk>\n    \\<Longrightarrow> (A [f+] (S, SA)) S' = A S'\n 2. \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<notin> dom A\\<rbrakk>\n    \\<Longrightarrow> (A [f+] (S, SA)) S' = A S'", "apply (case_tac \"S \\<in> States SA\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<in> dom A;\n     S \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> (A [f+] (S, SA)) S' = A S'\n 2. \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<in> dom A;\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> (A [f+] (S, SA)) S' = A S'\n 3. \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<notin> dom A\\<rbrakk>\n    \\<Longrightarrow> (A [f+] (S, SA)) S' = A S'", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<notin> States SA;\n        A S = Some y\\<rbrakk>\n       \\<Longrightarrow> (A [f+] (S, SA)) S' = A S'", "apply (case_tac \"S' \\<in> dom A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<notin> States SA;\n        A S = Some y; S' \\<in> dom A\\<rbrakk>\n       \\<Longrightarrow> (A [f+] (S, SA)) S' = A S'\n 2. \\<And>y.\n       \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<notin> States SA;\n        A S = Some y; S' \\<notin> dom A\\<rbrakk>\n       \\<Longrightarrow> (A [f+] (S, SA)) S' = A S'", "apply (unfold FAddSA_def Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<notin> States SA;\n        A S = Some y; S' \\<in> dom A\\<rbrakk>\n       \\<Longrightarrow> (case (S, SA) of\n                          (S, SA) \\<Rightarrow>\n                            if S \\<in> dom A \\<and> S \\<notin> States SA\n                            then A ++ [S \\<mapsto> insert SA (the (A S))] ++\n                                 EmptyMap (States SA)\n                            else A)\n                          S' =\n                         A S'\n 2. \\<And>y.\n       \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<notin> States SA;\n        A S = Some y; S' \\<notin> dom A\\<rbrakk>\n       \\<Longrightarrow> (case (S, SA) of\n                          (S, SA) \\<Rightarrow>\n                            if S \\<in> dom A \\<and> S \\<notin> States SA\n                            then A ++ [S \\<mapsto> insert SA (the (A S))] ++\n                                 EmptyMap (States SA)\n                            else A)\n                          S' =\n                         A S'", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S'; S \\<notin> States SA;\n        A S' = None; A S = Some y\\<rbrakk>\n       \\<Longrightarrow> EmptyMap (States SA) S' = None", "apply (simp add: dom_None)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_dom_emptyset [simp]:\n \"\\<lbrakk> S \\<in> (dom A); S \\<notin> States SA; S' \\<in> States (SA::('a,'c,'d)seqauto) \\<rbrakk> \\<Longrightarrow>  \n    ((((A::('a => ('a,'c,'d)seqauto set option))) [f+] (S,SA)) S') = (Some {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom A; S \\<notin> States SA;\n     S' \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> (A [f+] (S, SA)) S' = Some {}", "apply (unfold FAddSA_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom A; S \\<notin> States SA;\n     S' \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> (case (S, SA) of\n                       (S, SA) \\<Rightarrow>\n                         if S \\<in> dom A \\<and> S \\<notin> States SA\n                         then A ++ [S \\<mapsto> insert SA (the (A S))] ++\n                              EmptyMap (States SA)\n                         else A)\n                       S' =\n                      Some {}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S \\<notin> States SA; S' \\<in> States SA;\n        A S = Some y\\<rbrakk>\n       \\<Longrightarrow> (A(S \\<mapsto> insert SA y) ++\n                          EmptyMap (States SA))\n                          S' =\n                         Some {}", "apply (unfold EmptyMap_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S \\<notin> States SA; S' \\<in> States SA;\n        A S = Some y\\<rbrakk>\n       \\<Longrightarrow> (A(S \\<mapsto> insert SA y) ++\n                          (\\<lambda>a.\n                              if a \\<in> States SA then Some {} else None))\n                          S' =\n                         Some {}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_dom_dom_States [simp]:\n  \"\\<lbrakk> S \\<in> (dom F); S \\<notin> States SA \\<rbrakk> \\<Longrightarrow> \n    (dom ((F::('a \\<rightharpoonup> (('a,'b,'d)seqauto) set)) [f+] (S, SA))) = \n    ((dom F) \\<union> (States (SA::('a,'b,'d)seqauto)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom F; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> dom (F [f+] (S, SA)) = dom F \\<union> States SA", "by (unfold FAddSA_def Let_def, auto)"], ["", "lemma FAddSA_dom_dom [simp]:\n  \"S \\<notin> (dom F) \\<Longrightarrow>   \n   (dom ((F::('a \\<rightharpoonup> (('a,'b,'d)seqauto) set)) [f+] \n       (S,(SA::('a,'b,'d)seqauto)))) = (dom F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<notin> dom F \\<Longrightarrow> dom (F [f+] (S, SA)) = dom F", "by (unfold FAddSA_def Let_def, auto)"], ["", "lemma FAddSA_States_dom [simp]:\n  \"S \\<in> (States SA) \\<Longrightarrow>  \n   (dom ((F::('a \\<rightharpoonup> (('a,'b,'d)seqauto) set)) [f+] \n        (S,(SA::('a,'b,'d)seqauto)))) = (dom F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> States SA \\<Longrightarrow> dom (F [f+] (S, SA)) = dom F", "by (unfold FAddSA_def Let_def, auto)"], ["", "lemma FAddSA_dom_insert_dom_disjunct [simp]:\n   \"\\<lbrakk> S \\<in> dom G; States SA \\<inter> dom G = {} \\<rbrakk> \\<Longrightarrow> ((G [f+] (S,SA)) S) = Some (insert SA (the (G S)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> (G [f+] (S, SA)) S = Some (insert SA (the (G S)))", "apply (rule  FAddSA_dom_insert)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom G\n 2. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_Union_ran:\n \"\\<lbrakk> S \\<in> dom G; (States SA) \\<inter> (dom G) = {} \\<rbrakk> \\<Longrightarrow> \n   (\\<Union> (ran (G [f+] (S,SA)))) = (insert SA (\\<Union> (ran G)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran (G [f+] (S, SA))) =\n                      insert SA (\\<Union> (ran G))", "apply (unfold FAddSA_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (case (S, SA) of\n                             (S, SA) \\<Rightarrow>\n                               if S \\<in> dom G \\<and> S \\<notin> States SA\n                               then G ++\n                                    [S \\<mapsto> insert SA (the (G S))] ++\n                                    EmptyMap (States SA)\n                               else G)) =\n                      insert SA (\\<Union> (ran G))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> (S \\<notin> States SA \\<longrightarrow>\n                       \\<Union>\n                        (ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                              EmptyMap (States SA))) =\n                       insert SA (\\<Union> (ran G))) \\<and>\n                      (S \\<in> States SA \\<longrightarrow>\n                       \\<Union> (ran G) = insert SA (\\<Union> (ran G)))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA \\<longrightarrow>\n                      \\<Union>\n                       (ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                             EmptyMap (States SA))) =\n                      insert SA (\\<Union> (ran G))\n 2. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G) = insert SA (\\<Union> (ran G))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G) = insert SA (\\<Union> (ran G))\n 2. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA \\<longrightarrow>\n                      \\<Union>\n                       (ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                             EmptyMap (States SA))) =\n                      insert SA (\\<Union> (ran G))", "apply (rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran G) = insert SA (\\<Union> (ran G))\n 2. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA \\<longrightarrow>\n                      \\<Union>\n                       (ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                             EmptyMap (States SA))) =\n                      insert SA (\\<Union> (ran G))", "apply (unfold Int_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> dom G; {x \\<in> States SA. x \\<in> dom G} = {};\n     S \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran G) = insert SA (\\<Union> (ran G))\n 2. \\<lbrakk>S \\<in> dom G; {x \\<in> States SA. x \\<in> dom G} = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA \\<longrightarrow>\n                      \\<Union>\n                       (ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                             EmptyMap (States SA))) =\n                      insert SA (\\<Union> (ran G))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; {x \\<in> States SA. x \\<in> dom G} = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA \\<longrightarrow>\n                      \\<Union>\n                       (ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                             EmptyMap (States SA))) =\n                      insert SA (\\<Union> (ran G))", "apply (fold Int_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA \\<longrightarrow>\n                      \\<Union>\n                       (ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                             EmptyMap (States SA))) =\n                      insert SA (\\<Union> (ran G))", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                             EmptyMap (States SA))) =\n                      insert SA (\\<Union> (ran G))", "apply (subst EmptyMap_Union_ran_override)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> States SA \\<noteq> {}\n 2. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter>\n                      dom (G(S \\<mapsto> insert SA (the (G S)))) =\n                      {}\n 3. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (G(S \\<mapsto> insert SA (the (G S))))) =\n                      insert SA (\\<Union> (ran G))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_Union_ran2:\n \"\\<lbrakk> S \\<in> dom G1; (States SA) \\<inter> (dom G1) = {}; (dom G1 \\<inter> dom G2) = {} \\<rbrakk> \\<Longrightarrow>\n   (\\<Union> (ran ((G1 [f+] (S,SA)) ++ G2))) = (insert SA (\\<Union> ((ran G1) \\<union> (ran G2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran ((G1 [f+] (S, SA)) ++ G2)) =\n                      insert SA (\\<Union> (ran G1 \\<union> ran G2))", "apply (unfold FAddSA_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran ((case (S, SA) of\n                              (S, SA) \\<Rightarrow>\n                                if S \\<in> dom G1 \\<and>\n                                   S \\<notin> States SA\n                                then G1 ++\n                                     [S \\<mapsto> insert SA (the (G1 S))] ++\n                                     EmptyMap (States SA)\n                                else G1) ++\n                             G2)) =\n                      insert SA (\\<Union> (ran G1 \\<union> ran G2))", "apply (simp (no_asm_simp))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> (S \\<notin> States SA \\<longrightarrow>\n                       \\<Union>\n                        (ran (G1(S \\<mapsto> insert SA (the (G1 S))) ++\n                              EmptyMap (States SA) ++\n                              G2)) =\n                       insert SA\n                        (\\<Union> (ran G1) \\<union>\n                         \\<Union> (ran G2))) \\<and>\n                      (S \\<in> States SA \\<longrightarrow>\n                       \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                       insert SA\n                        (\\<Union> (ran G1) \\<union> \\<Union> (ran G2)))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA \\<longrightarrow>\n                      \\<Union>\n                       (ran (G1(S \\<mapsto> insert SA (the (G1 S))) ++\n                             EmptyMap (States SA) ++\n                             G2)) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))\n 2. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))", "apply (rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (G1(S \\<mapsto> insert SA (the (G1 S))) ++\n                             EmptyMap (States SA) ++\n                             G2)) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))\n 2. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))", "apply (subst EmptyMap_Union_ran_override2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> States SA \\<noteq> {}\n 2. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter>\n                      dom (G1(S \\<mapsto> insert SA (the (G1 S)))) =\n                      {}\n 3. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> dom (G1(S \\<mapsto> insert SA (the (G1 S)))) \\<inter>\n                      dom G2 =\n                      {}\n 4. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (G1(S \\<mapsto>\n                             insert SA (the (G1 S)))) \\<union>\n                        ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))\n 5. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter>\n                      dom (G1(S \\<mapsto> insert SA (the (G1 S)))) =\n                      {}\n 2. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> dom (G1(S \\<mapsto> insert SA (the (G1 S)))) \\<inter>\n                      dom G2 =\n                      {}\n 3. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (G1(S \\<mapsto>\n                             insert SA (the (G1 S)))) \\<union>\n                        ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))\n 4. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> dom (G1(S \\<mapsto> insert SA (the (G1 S)))) \\<inter>\n                      dom G2 =\n                      {}\n 2. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (G1(S \\<mapsto>\n                             insert SA (the (G1 S)))) \\<union>\n                        ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))\n 3. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> dom G2\n 2. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (G1(S \\<mapsto>\n                             insert SA (the (G1 S)))) \\<union>\n                        ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))\n 3. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (G1(S \\<mapsto>\n                             insert SA (the (G1 S)))) \\<union>\n                        ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))\n 2. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))", "apply (subst Union_Un_distrib)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> \\<Union>\n                       (ran (G1(S \\<mapsto>\n                             insert SA (the (G1 S))))) \\<union>\n                      \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))\n 2. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))", "apply (subst Union_ran_override2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom G1\n 2. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}; S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> insert SA (\\<Union> (ran G1)) \\<union>\n                      \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))\n 3. \\<lbrakk>S \\<in> dom G1; States SA \\<inter> dom G1 = {};\n     dom G1 \\<inter> dom G2 = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      \\<Union> (ran G1) \\<union> \\<Union> (ran G2) =\n                      insert SA\n                       (\\<Union> (ran G1) \\<union> \\<Union> (ran G2))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_ran:\n  \"\\<lbrakk> \\<forall> T \\<in> dom G . T \\<noteq> S \\<longrightarrow> (the (G T) \\<inter> the (G S)) = {};  \n     S \\<in> dom G; (States SA) \\<inter>  (dom G) = {} \\<rbrakk> \\<Longrightarrow>  \n    ran (G [f+] (S,SA)) = insert {} (insert (insert SA (the (G S))) (ran G - {the (G S)}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> ran (G [f+] (S, SA)) =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))", "apply (unfold FAddSA_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> ran (case (S, SA) of\n                           (S, SA) \\<Rightarrow>\n                             if S \\<in> dom G \\<and> S \\<notin> States SA\n                             then G ++\n                                  [S \\<mapsto> insert SA (the (G S))] ++\n                                  EmptyMap (States SA)\n                             else G) =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> (S \\<notin> States SA \\<longrightarrow>\n                       ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                            EmptyMap (States SA)) =\n                       insert {}\n                        (insert (insert SA (the (G S)))\n                          (ran G - {the (G S)}))) \\<and>\n                      (S \\<in> States SA \\<longrightarrow>\n                       ran G =\n                       insert {}\n                        (insert (insert SA (the (G S)))\n                          (ran G - {the (G S)})))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA \\<longrightarrow>\n                      ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                           EmptyMap (States SA)) =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))\n 2. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      ran G =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))", "apply (rule impI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                           EmptyMap (States SA)) =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))\n 2. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      ran G =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States SA \\<longrightarrow>\n                      ran G =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))\n 2. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                           EmptyMap (States SA)) =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> ran (G(S \\<mapsto> insert SA (the (G S))) ++\n                           EmptyMap (States SA)) =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))", "apply (simp add: EmptyMap_ran_override)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (ran (G(S \\<mapsto> insert SA (the (G S))))) =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         (ran G - {the (G S)}))", "apply (unfold ran_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>T\\<in>dom G.\n                T \\<noteq> S \\<longrightarrow>\n                the (G T) \\<inter> the (G S) = {};\n     S \\<in> dom G; States SA \\<inter> dom G = {};\n     S \\<notin> States SA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       {b. \\<exists>a.\n                              (G(S \\<mapsto> insert SA (the (G S)))) a =\n                              Some b} =\n                      insert {}\n                       (insert (insert SA (the (G S)))\n                         ({b. \\<exists>a. G a = Some b} - {the (G S)}))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y x a xa xb.\n       \\<lbrakk>\\<forall>T\\<in>dom G.\n                   T \\<noteq> S \\<longrightarrow> the (G T) \\<inter> y = {};\n        States SA \\<inter> dom G = {}; S \\<notin> States SA; G S = Some y;\n        \\<forall>a.\n           a = S \\<and> insert SA y \\<noteq> x \\<or>\n           a \\<noteq> S \\<and> G a \\<noteq> Some x;\n        G a = Some x; xa \\<in> x; xb \\<in> x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> y\n 2. \\<And>y x a xa xb.\n       \\<lbrakk>\\<forall>T\\<in>dom G.\n                   T \\<noteq> S \\<longrightarrow> the (G T) \\<inter> y = {};\n        States SA \\<inter> dom G = {}; S \\<notin> States SA; G S = Some y;\n        \\<forall>a.\n           a = S \\<and> insert SA y \\<noteq> x \\<or>\n           a \\<noteq> S \\<and> G a \\<noteq> Some x;\n        G a = Some x; xa \\<in> x; xb \\<in> y\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> x", "apply (rename_tac Y X a xa xb)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y X a xa xb.\n       \\<lbrakk>\\<forall>T\\<in>dom G.\n                   T \\<noteq> S \\<longrightarrow> the (G T) \\<inter> Y = {};\n        States SA \\<inter> dom G = {}; S \\<notin> States SA; G S = Some Y;\n        \\<forall>a.\n           a = S \\<and> insert SA Y \\<noteq> X \\<or>\n           a \\<noteq> S \\<and> G a \\<noteq> Some X;\n        G a = Some X; xa \\<in> X; xb \\<in> X\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> Y\n 2. \\<And>y x a xa xb.\n       \\<lbrakk>\\<forall>T\\<in>dom G.\n                   T \\<noteq> S \\<longrightarrow> the (G T) \\<inter> y = {};\n        States SA \\<inter> dom G = {}; S \\<notin> States SA; G S = Some y;\n        \\<forall>a.\n           a = S \\<and> insert SA y \\<noteq> x \\<or>\n           a \\<noteq> S \\<and> G a \\<noteq> Some x;\n        G a = Some x; xa \\<in> x; xb \\<in> y\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> x", "apply (erule_tac x=a in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y X a xa xb.\n       \\<lbrakk>\\<forall>T\\<in>dom G.\n                   T \\<noteq> S \\<longrightarrow> the (G T) \\<inter> Y = {};\n        States SA \\<inter> dom G = {}; S \\<notin> States SA; G S = Some Y;\n        G a = Some X; xa \\<in> X; xb \\<in> X;\n        a = S \\<and> insert SA Y \\<noteq> X \\<or>\n        a \\<noteq> S \\<and> G a \\<noteq> Some X\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> Y\n 2. \\<And>y x a xa xb.\n       \\<lbrakk>\\<forall>T\\<in>dom G.\n                   T \\<noteq> S \\<longrightarrow> the (G T) \\<inter> y = {};\n        States SA \\<inter> dom G = {}; S \\<notin> States SA; G S = Some y;\n        \\<forall>a.\n           a = S \\<and> insert SA y \\<noteq> x \\<or>\n           a \\<noteq> S \\<and> G a \\<noteq> Some x;\n        G a = Some x; xa \\<in> x; xb \\<in> y\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x a xa xb.\n       \\<lbrakk>\\<forall>T\\<in>dom G.\n                   T \\<noteq> S \\<longrightarrow> the (G T) \\<inter> y = {};\n        States SA \\<inter> dom G = {}; S \\<notin> States SA; G S = Some y;\n        \\<forall>a.\n           a = S \\<and> insert SA y \\<noteq> x \\<or>\n           a \\<noteq> S \\<and> G a \\<noteq> Some x;\n        G a = Some x; xa \\<in> x; xb \\<in> y\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> x", "apply (erule_tac x=a in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x a xa xb.\n       \\<lbrakk>\\<forall>T\\<in>dom G.\n                   T \\<noteq> S \\<longrightarrow> the (G T) \\<inter> y = {};\n        States SA \\<inter> dom G = {}; S \\<notin> States SA; G S = Some y;\n        G a = Some x; xa \\<in> x; xb \\<in> y;\n        a = S \\<and> insert SA y \\<noteq> x \\<or>\n        a \\<noteq> S \\<and> G a \\<noteq> Some x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_RootEx_def: \n  \"\\<lbrakk> S \\<in> dom G; (States SA) \\<inter> (dom G) = {} \\<rbrakk> \\<Longrightarrow> \n    RootEx F (G [f+] (S,SA)) = (\\<exists>! A . A \\<in> F \\<and> A \\<notin> insert SA (\\<Union> (ran G)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> RootEx F (G [f+] (S, SA)) =\n                      (\\<exists>!A.\n                          A \\<in> F \\<and>\n                          A \\<notin> insert SA (\\<Union> (ran G)))", "apply (unfold RootEx_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>!A.\n                          A \\<in> F \\<and>\n                          A \\<notin> \\<Union> (ran (G [f+] (S, SA)))) =\n                      (\\<exists>!A.\n                          A \\<in> F \\<and>\n                          A \\<notin> insert SA (\\<Union> (ran G)))", "apply (simp only: FAddSA_Union_ran Int_commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_RootEx:\n  \"\\<lbrakk> \\<Union> (ran G) = F - {Root F G}; \n     dom G = \\<Union>(States ` F); \n     (dom G \\<inter> States SA) = {}; S \\<in> dom G; \n     RootEx F G \\<rbrakk> \\<Longrightarrow> RootEx (insert SA F) (G [f+] (S,SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n     dom G = \\<Union> (States ` F); dom G \\<inter> States SA = {};\n     S \\<in> dom G; RootEx F G\\<rbrakk>\n    \\<Longrightarrow> RootEx (insert SA F) (G [f+] (S, SA))", "apply (simp add: FAddSA_RootEx_def Int_commute cong: rev_conj_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n     dom G = \\<Union> (States ` F);\n     States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; RootEx F G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!A.\n                         A \\<in> F \\<and>\n                         A \\<noteq> SA \\<and>\n                         (A \\<in> F \\<longrightarrow> A = Root F G)", "apply (auto cong: conj_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_Root_def:\n  \"\\<lbrakk> S \\<in> dom G; (States SA) \\<inter> (dom G) = {} \\<rbrakk>  \\<Longrightarrow> \n   (Root F (G [f+] (S,SA)) = (@ A . A \\<in> F \\<and> A \\<notin> insert SA (\\<Union> (ran G))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> Root F (G [f+] (S, SA)) =\n                      (SOME A.\n                          A \\<in> F \\<and>\n                          A \\<notin> insert SA (\\<Union> (ran G)))", "apply (unfold Root_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> dom G; States SA \\<inter> dom G = {}\\<rbrakk>\n    \\<Longrightarrow> (SOME A.\n                          A \\<in> F \\<and>\n                          A \\<notin> \\<Union> (ran (G [f+] (S, SA)))) =\n                      (SOME A.\n                          A \\<in> F \\<and>\n                          A \\<notin> insert SA (\\<Union> (ran G)))", "apply (simp only: FAddSA_Union_ran Int_commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_RootEx_Root: \n  \"\\<lbrakk> Union (ran G) = F - {Root F G};  \n     \\<Union>(States ` F) = dom G; \n     (dom G \\<inter> States SA) = {}; S \\<in> dom G;\n     RootEx F G \\<rbrakk> \\<Longrightarrow> (Root (insert SA F) (G [f+] (S,SA))) = (Root F G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n     \\<Union> (States ` F) = dom G; dom G \\<inter> States SA = {};\n     S \\<in> dom G; RootEx F G\\<rbrakk>\n    \\<Longrightarrow> Root (insert SA F) (G [f+] (S, SA)) = Root F G", "apply (simp add: FAddSA_Root_def Int_commute cong: rev_conj_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n     \\<Union> (States ` F) = dom G; dom G \\<inter> States SA = {};\n     S \\<in> dom G; RootEx F G\\<rbrakk>\n    \\<Longrightarrow> (SOME A.\n                          A \\<in> F \\<and>\n                          A \\<noteq> SA \\<and>\n                          (A \\<in> F \\<longrightarrow> A = Root F G)) =\n                      Root F G", "apply (simp cong:conj_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_OneAncestor:\n  \"\\<lbrakk> \\<Union> (ran G) = F - {Root F G}; \n     (dom G \\<inter> States SA) = {}; S \\<in> dom G; \n     \\<Union>(States ` F) = dom G; RootEx F G;\n     OneAncestor F G \\<rbrakk> \\<Longrightarrow> OneAncestor (insert SA F) (G [f+] (S,SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n     dom G \\<inter> States SA = {}; S \\<in> dom G;\n     \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G\\<rbrakk>\n    \\<Longrightarrow> OneAncestor (insert SA F) (G [f+] (S, SA))", "apply (subst OneAncestor_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n     dom G \\<inter> States SA = {}; S \\<in> dom G;\n     \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>insert SA F -\n                                     {Root (insert SA F) (G [f+] (S, SA))}.\n                         \\<exists>!s.\n                            s \\<in> \\<Union>\n                                     (States ` (insert SA F - {A})) \\<and>\n                            A \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n     dom G \\<inter> States SA = {}; S \\<in> dom G;\n     \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>insert SA F -\n                                     {Root (insert SA F) (G [f+] (S, SA))}.\n                         \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {A}.\n                                s \\<in> States x) \\<and>\n                            A \\<in> the ((G [f+] (S, SA)) s)", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        A \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {A}.\n                                s \\<in> States x) \\<and>\n                            A \\<in> the ((G [f+] (S, SA)) s)", "apply (rename_tac SAA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA\n        \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (case_tac \"SA = SAA\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (rule_tac a=S in ex1I)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>insert SA F - {SAA}.\n                             S \\<in> States x) \\<and>\n                         SAA \\<in> the ((G [f+] (S, SA)) S)\n 2. \\<And>SAA x.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = S\n 3. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>insert SA F - {SAA}.\n                            S \\<in> States x\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) S)\n 3. \\<And>SAA x.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = S\n 4. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA));\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>F - {SAA}. S \\<in> States x\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) S)\n 3. \\<And>SAA x.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = S\n 4. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) S)\n 2. \\<And>SAA x.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = S\n 3. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (subst FAddSA_dom_insert)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> S \\<in> dom G\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SA\n 3. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (Some (insert SA (the (G S))))\n 4. \\<And>SAA x.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = S\n 5. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SA\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (Some (insert SA (the (G S))))\n 3. \\<And>SAA x.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = S\n 4. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (simp add:Int_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (Some (insert SA (the (G S))))\n 2. \\<And>SAA x.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = S\n 3. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA x.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = S\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (rename_tac T)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA;\n        (\\<exists>x\\<in>insert SA F - {SAA}. T \\<in> States x) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) T)\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (erule conjE bexE exE disjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T x.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA; SAA \\<in> the ((G [f+] (S, SA)) T);\n        x \\<in> insert SA F - {SAA}; T \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (rename_tac SAAA)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA = SAA; SAA \\<in> the ((G [f+] (S, SA)) T);\n        SAAA \\<in> insert SA F - {SAA}; T \\<in> States SAAA\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T);\n        SAAA \\<in> F \\<and> SAAA \\<noteq> SAA; T \\<in> States SAAA\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> T = S\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (subst not_not [THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<not> T \\<noteq> S\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (rule notI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (case_tac \"T \\<in> States SAA\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; T \\<noteq> S;\n        T \\<in> States SAA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; T \\<noteq> S;\n        T \\<notin> States SAA\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; T \\<noteq> S;\n        T \\<notin> States SAA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (drule_tac A=G and S=S and SA=SAA in FAddSA_States_neq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> S \\<noteq> T\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; T \\<noteq> S;\n        (G [f+] (S, SAA)) T = G T\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the ((G [f+] (S, SAA)) T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; T \\<noteq> S;\n        (G [f+] (S, SAA)) T = G T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (case_tac \"SAA \\<notin> Union (ran G)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        SAA \\<notin> \\<Union> (ran G)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        \\<not> SAA \\<notin> \\<Union> (ran G)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (frule ran_dom_the)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        SAA \\<notin> \\<Union> (ran G)\\<rbrakk>\n       \\<Longrightarrow> ?x290 SAA T SAAA \\<in> dom G\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        SAA \\<notin> \\<Union> (ran G);\n        SAA \\<notin> the (G (?x290 SAA T SAAA))\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        \\<not> SAA \\<notin> \\<Union> (ran G)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        SAA \\<notin> \\<Union> (ran G);\n        SAA \\<notin> the (G (?x290 SAA T SAAA))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        SAA \\<notin> \\<Union> (ran G)\\<rbrakk>\n       \\<Longrightarrow> ?x290 SAA T SAAA \\<in> dom G\n 3. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        \\<not> SAA \\<notin> \\<Union> (ran G)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        SAA \\<notin> \\<Union> (ran G)\\<rbrakk>\n       \\<Longrightarrow> T \\<in> dom G\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        \\<not> SAA \\<notin> \\<Union> (ran G)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        \\<not> SAA \\<notin> \\<Union> (ran G)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        SAA \\<in> F \\<and> SAA \\<noteq> Root F G\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SAA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<noteq> Root (insert SAA F) (G [f+] (S, SAA)); SA = SAA;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; T \\<noteq> S; (G [f+] (S, SAA)) T = G T;\n        SAA \\<in> F; SAA \\<noteq> Root F G\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (simp add: States_Int_not_mem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; OneAncestor F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (unfold OneAncestor_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>\\<Union> (ran G) = F - {Root F G};\n        dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (drule_tac G=G and S=S and SA=SA in FAddSA_RootEx_Root)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (States ` F) = dom G\n 2. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> dom G \\<inter> States SA = {}\n 3. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> S \\<in> dom G\n 4. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> RootEx F G\n 5. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> dom G \\<inter> States SA = {}\n 2. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> S \\<in> dom G\n 3. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> RootEx F G\n 4. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> S \\<in> dom G\n 2. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> RootEx F G\n 3. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA\\<rbrakk>\n       \\<Longrightarrow> RootEx F G\n 2. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        \\<forall>A\\<in>F - {Root F G}.\n           \\<exists>!s.\n              s \\<in> \\<Union> (States ` (F - {A})) \\<and>\n              A \\<in> the (G s);\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (erule_tac x=SAA in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA; Root (insert SA F) (G [f+] (S, SA)) = Root F G;\n        \\<exists>!s.\n           s \\<in> \\<Union> (States ` (F - {SAA})) \\<and>\n           SAA \\<in> the (G s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)\n 2. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA; Root (insert SA F) (G [f+] (S, SA)) = Root F G;\n        SAA \\<notin> F - {Root F G}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA; Root (insert SA F) (G [f+] (S, SA)) = Root F G;\n        SAA \\<notin> F - {Root F G}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)\n 2. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA; Root (insert SA F) (G [f+] (S, SA)) = Root F G;\n        \\<exists>!s.\n           s \\<in> \\<Union> (States ` (F - {SAA})) \\<and>\n           SAA \\<in> the (G s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        SAA \\<in> insert SA F - {Root (insert SA F) (G [f+] (S, SA))};\n        SA \\<noteq> SAA; Root (insert SA F) (G [f+] (S, SA)) = Root F G;\n        \\<exists>!s.\n           s \\<in> \\<Union> (States ` (F - {SAA})) \\<and>\n           SAA \\<in> the (G s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G;\n        SAA \\<in> F \\<and> SAA \\<noteq> Root F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G;\n        \\<exists>!s.\n           (\\<exists>x\\<in>F - {SAA}. s \\<in> States x) \\<and>\n           SAA \\<in> the (G s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (erule conjE bexE ex1E exE disjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA s x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = s;\n        SAA \\<in> the (G s); x \\<in> F - {SAA}; s \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (rename_tac T SAAA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA};\n        T \\<in> States SAAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!s.\n                            (\\<exists>x\\<in>insert SA F - {SAA}.\n                                s \\<in> States x) \\<and>\n                            SAA \\<in> the ((G [f+] (S, SA)) s)", "apply (rule_tac a=T in ex1I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA};\n        T \\<in> States SAAA\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>insert SA F - {SAA}.\n                             T \\<in> States x) \\<and>\n                         SAA \\<in> the ((G [f+] (S, SA)) T)\n 2. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA};\n        T \\<in> States SAAA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>insert SA F - {SAA}.\n                            T \\<in> States x\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA};\n        T \\<in> States SAAA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) T)\n 3. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA};\n        T \\<in> States SAAA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) T)\n 2. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply (case_tac \"T = S\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T = S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) T)\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) T)\n 3. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = S;\n        SAA \\<in> the (G S); SAAA \\<in> F \\<and> SAAA \\<noteq> SAA;\n        S \\<in> States SAAA; T = S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) S)\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) T)\n 3. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply (case_tac \"S \\<notin> States SA\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = S;\n        SAA \\<in> the (G S); SAAA \\<in> F \\<and> SAAA \\<noteq> SAA;\n        S \\<in> States SAAA; T = S; S \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) S)\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = S;\n        SAA \\<in> the (G S); SAAA \\<in> F \\<and> SAAA \\<noteq> SAA;\n        S \\<in> States SAAA; T = S; \\<not> S \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) S)\n 3. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) T)\n 4. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = S;\n        SAA \\<in> the (G S); SAAA \\<in> F \\<and> SAAA \\<noteq> SAA;\n        S \\<in> States SAAA; T = S; \\<not> S \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) S)\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) T)\n 3. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the ((G [f+] (S, SA)) T)\n 2. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply (subst FAddSA_States_neq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T \\<notin> States SA\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> S \\<noteq> T\n 3. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G T)\n 4. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> S \\<noteq> T\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G T)\n 3. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply (rule not_sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T \\<noteq> S\n 2. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G T)\n 3. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G T)\n 2. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>xa\\<in>insert SA F - {SAA}. x \\<in> States xa) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) x)\\<rbrakk>\n       \\<Longrightarrow> x = T", "apply (rename_tac U)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F - {SAA}; T \\<in> States SAAA;\n        (\\<exists>x\\<in>insert SA F - {SAA}. U \\<in> States x) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) U)\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); SAAA \\<in> F \\<and> SAAA \\<noteq> SAA;\n        T \\<in> States SAAA;\n        (\\<exists>x\\<in>insert SA F - {SAA}. U \\<in> States x) \\<and>\n        SAA \\<in> the ((G [f+] (S, SA)) U)\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply (erule conjE bexE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U x.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        x \\<in> insert SA F - {SAA}; U \\<in> States x\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply (rename_tac SAAAA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        SAAAA \\<in> insert SA F - {SAA}; U \\<in> States SAAAA\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        (SAAAA = SA \\<or> SAAAA \\<in> F) \\<and> SAAAA \\<noteq> SAA;\n        U \\<in> States SAAAA\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply (erule conjE disjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA\\<rbrakk>\n       \\<Longrightarrow> U = T\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply (frule FAddSA_dom_emptyset)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States (?SA639 SAA T SAAA U SAAAA)\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA\\<rbrakk>\n       \\<Longrightarrow> ?S'639 SAA T SAAA U SAAAA\n                         \\<in> States (?SA639 SAA T SAAA U SAAAA)\n 3. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA;\n        (G [f+] (S, ?SA639 SAA T SAAA U SAAAA))\n         (?S'639 SAA T SAAA U SAAAA) =\n        Some {}\\<rbrakk>\n       \\<Longrightarrow> U = T\n 4. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> U = T", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA\\<rbrakk>\n       \\<Longrightarrow> ?S'639 SAA T SAAA U SAAAA\n                         \\<in> States (?SA639 SAA T SAAA U SAAAA)\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States (?SA639 SAA T SAAA U SAAAA)\n 3. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA;\n        (G [f+] (S, ?SA639 SAA T SAAA U SAAAA))\n         (?S'639 SAA T SAAA U SAAAA) =\n        Some {}\\<rbrakk>\n       \\<Longrightarrow> U = T\n 4. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SAAA\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA;\n        (G [f+] (S, SAAA)) T = Some {}\\<rbrakk>\n       \\<Longrightarrow> U = T\n 3. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> U = T", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SAAAA\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA;\n        (G [f+] (S, SAAAA)) U = Some {}\\<rbrakk>\n       \\<Longrightarrow> U = T\n 3. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> U = T", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SA\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA;\n        (G [f+] (S, SA)) U = Some {}\\<rbrakk>\n       \\<Longrightarrow> U = T\n 3. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SA; SAAAA = SA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SA\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA;\n        (G [f+] (S, SA)) U = Some {}\\<rbrakk>\n       \\<Longrightarrow> U = T\n 3. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA = SA;\n        (G [f+] (S, SA)) U = Some {}\\<rbrakk>\n       \\<Longrightarrow> U = T\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G;\n        \\<forall>y.\n           (\\<exists>x\\<in>F - {SAA}. y \\<in> States x) \\<and>\n           SAA \\<in> the (G y) \\<longrightarrow>\n           y = T;\n        SAA \\<in> the (G T); T \\<in> States SAAA; SAAA \\<in> F;\n        SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply (erule_tac x=U in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        (\\<exists>x\\<in>F - {SAA}. U \\<in> States x) \\<and>\n        SAA \\<in> the (G U) \\<longrightarrow>\n        U = T\\<rbrakk>\n       \\<Longrightarrow> U = T", "apply (erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>F - {SAA}. U \\<in> States x) \\<and>\n                         SAA \\<in> the (G U)\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        U = T\\<rbrakk>\n       \\<Longrightarrow> U = T", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        U = T\\<rbrakk>\n       \\<Longrightarrow> U = T\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>F - {SAA}. U \\<in> States x) \\<and>\n                         SAA \\<in> the (G U)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>F - {SAA}. U \\<in> States x) \\<and>\n                         SAA \\<in> the (G U)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>F - {SAA}. U \\<in> States x\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply (case_tac \"S \\<noteq> U\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply (subgoal_tac \"U \\<notin> States SA\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S \\<noteq> U; U \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> U \\<notin> States SA\n 3. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply (drule_tac A=G in FAddSA_States_neq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> ?S737 SAA T SAAA U SAAAA \\<noteq> U\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S \\<noteq> U;\n        (G [f+] (?S737 SAA T SAAA U SAAAA, SA)) U = G U\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)\n 3. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> U \\<notin> States SA\n 4. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S \\<noteq> U; (G [f+] (S, SA)) U = G U\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> U \\<notin> States SA\n 3. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> U \\<notin> States SA\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {}; S \\<in> dom G;\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply (drule_tac A=G and SA=SA in FAddSA_dom_insert)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {};\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SA\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {};\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U;\n        (G [f+] (S, SA)) S = Some (insert SA (the (G S)))\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {};\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (U, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (U, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        S = U\\<rbrakk>\n       \\<Longrightarrow> U \\<notin> States SA\n 2. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {};\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U;\n        (G [f+] (S, SA)) S = Some (insert SA (the (G S)))\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA T SAAA U SAAAA.\n       \\<lbrakk>dom G \\<inter> States SA = {};\n        \\<Union> (States ` F) = dom G; RootEx F G; SA \\<noteq> SAA;\n        Root (insert SA F) (G [f+] (S, SA)) = Root F G; SAA \\<in> F;\n        SAA \\<noteq> Root F G; SAA \\<in> the (G T); T \\<in> States SAAA;\n        SAAA \\<in> F; SAAA \\<noteq> SAA; SAA \\<in> the ((G [f+] (S, SA)) U);\n        U \\<in> States SAAAA; SAAAA \\<noteq> SAA; SAAAA \\<in> F;\n        \\<not> S \\<noteq> U;\n        (G [f+] (S, SA)) S = Some (insert SA (the (G S)))\\<rbrakk>\n       \\<Longrightarrow> SAA \\<in> the (G U)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_NoCycles:\n  \"\\<lbrakk> (States SA \\<inter> dom G) = {}; S \\<in> dom G;\n     dom G = \\<Union>(States ` F); NoCycles F G \\<rbrakk> \\<Longrightarrow> \n     NoCycles  (insert SA F) (G [f+] (S,SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n     dom G = \\<Union> (States ` F); NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> NoCycles (insert SA F) (G [f+] (S, SA))", "apply (unfold NoCycles_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n     dom G = \\<Union> (States ` F);\n     \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n        S \\<noteq> {} \\<longrightarrow>\n        (\\<exists>s\\<in>S.\n            S \\<inter> \\<Union> (States ` the (G s)) = {})\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Sa\\<in>Pow (\\<Union> (States ` insert SA F)).\n                         Sa \\<noteq> {} \\<longrightarrow>\n                         (\\<exists>s\\<in>Sa.\n                             Sa \\<inter>\n                             \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                             {})", "apply (rule ballI impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Sa.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        Sa \\<in> Pow (\\<Union> (States ` insert SA F));\n        Sa \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>Sa.\n                            Sa \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply (rename_tac SAA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F));\n        SAA \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply (case_tac \"\\<exists> s \\<in> SAA. s \\<in> States SA\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<exists>s\\<in>SAA. s \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}\n 2. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; \\<exists>s\\<in>SAA. s \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}\n 2. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply (erule bexE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA x s.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; x \\<in> F; S \\<in> States x; s \\<in> SAA;\n        s \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}\n 2. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply (rename_tac SAAA T)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}\n 2. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply (rule_tac x=T in bexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         \\<Union> (States ` the ((G [f+] (S, SA)) T)) =\n                         {}\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA\n 3. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         \\<Union> (States ` the ((G [f+] (S, SA)) T)) =\n                         {}\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA\n 3. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply (subst FAddSA_dom_emptyset)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> S \\<in> dom G\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SA\n 3. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States SA\n 4. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter> \\<Union> (States ` the (Some {})) = {}\n 5. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA\n 6. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>F. S \\<in> States x\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SA\n 3. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States SA\n 4. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter> \\<Union> (States ` the (Some {})) = {}\n 5. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA\n 6. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply fast"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SA\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States SA\n 3. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter> \\<Union> (States ` the (Some {})) = {}\n 4. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA\n 5. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> States SA\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter> \\<Union> (States ` the (Some {})) = {}\n 3. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA\n 4. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter> \\<Union> (States ` the (Some {})) = {}\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA\n 3. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA\n 2. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> dom G = {}; S \\<in> dom G;\n        dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<in> Pow (\\<Union> (States ` insert SA F)); SAA \\<noteq> {};\n        \\<not> (\\<exists>s\\<in>SAA. s \\<in> States SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n        \\<forall>S\\<in>Pow (\\<Union> (States ` F)).\n           S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>s\\<in>S.\n               S \\<inter> \\<Union> (States ` the (G s)) = {});\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply (erule_tac x=SAA in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        SAA \\<noteq> {} \\<longrightarrow>\n        (\\<exists>s\\<in>SAA.\n            SAA \\<inter> \\<Union> (States ` the (G s)) = {})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}\n 2. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        SAA \\<notin> Pow (\\<Union> (States ` F))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        SAA \\<notin> Pow (\\<Union> (States ` F))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}\n 2. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        SAA \\<noteq> {} \\<longrightarrow>\n        (\\<exists>s\\<in>SAA.\n            SAA \\<inter> \\<Union> (States ` the (G s)) = {})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        \\<not> SAA \\<subseteq> \\<Union> (States ` F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}\n 2. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        SAA \\<noteq> {} \\<longrightarrow>\n        (\\<exists>s\\<in>SAA.\n            SAA \\<inter> \\<Union> (States ` the (G s)) = {})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n        \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n        SAA \\<subseteq> States SA \\<union> \\<Union> (States ` F);\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        SAA \\<noteq> {} \\<longrightarrow>\n        (\\<exists>s\\<in>SAA.\n            SAA \\<inter> \\<Union> (States ` the (G s)) = {})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            \\<Union> (States ` the ((G [f+] (S, SA)) s)) =\n                            {}", "apply (unfold UNION_eq Pow_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        \\<exists>x\\<in>F. S \\<in> States x;\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        SAA \\<noteq> {} \\<longrightarrow>\n        (\\<exists>s\\<in>SAA.\n            SAA \\<inter> {y. \\<exists>x\\<in>the (G s). y \\<in> States x} =\n            {})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) s).\n                                   y \\<in> States x} =\n                            {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        \\<exists>x\\<in>F. S \\<in> States x;\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        \\<exists>s\\<in>SAA.\n           SAA \\<inter> {y. \\<exists>x\\<in>the (G s). y \\<in> States x} =\n           {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) s).\n                                   y \\<in> States x} =\n                            {}", "apply (case_tac \"SAA = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        \\<exists>x\\<in>F. S \\<in> States x;\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        \\<exists>s\\<in>SAA.\n           SAA \\<inter> {y. \\<exists>x\\<in>the (G s). y \\<in> States x} =\n           {};\n        SAA = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) s).\n                                   y \\<in> States x} =\n                            {}\n 2. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        \\<exists>x\\<in>F. S \\<in> States x;\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        \\<exists>s\\<in>SAA.\n           SAA \\<inter> {y. \\<exists>x\\<in>the (G s). y \\<in> States x} =\n           {};\n        SAA \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) s).\n                                   y \\<in> States x} =\n                            {}", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        \\<exists>x\\<in>F. S \\<in> States x;\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA \\<noteq> {}; \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        \\<exists>s\\<in>SAA.\n           SAA \\<inter> {y. \\<exists>x\\<in>the (G s). y \\<in> States x} =\n           {};\n        SAA \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) s).\n                                   y \\<in> States x} =\n                            {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        \\<exists>x\\<in>F. S \\<in> States x;\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA;\n        \\<exists>s\\<in>SAA.\n           SAA \\<inter> {y. \\<exists>x\\<in>the (G s). y \\<in> States x} =\n           {};\n        SAA \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) s).\n                                   y \\<in> States x} =\n                            {}", "apply (erule bexE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA x s.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        x \\<in> F; S \\<in> States x; s \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G s). y \\<in> States x} =\n        {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) s).\n                                   y \\<in> States x} =\n                            {}", "apply (rename_tac SAAA T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} =\n        {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>SAA.\n                            SAA \\<inter>\n                            {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) s).\n                                   y \\<in> States x} =\n                            {}", "apply (rule_tac x=T in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} =\n        {}\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) T).\n                                y \\<in> States x} =\n                         {}\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} =\n        {}\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} =\n        {}\\<rbrakk>\n       \\<Longrightarrow> T \\<in> SAA\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} =\n        {}\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) T).\n                                y \\<in> States x} =\n                         {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} =\n        {}\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) T).\n                                y \\<in> States x} =\n                         {}", "apply (case_tac \"T=S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} = {};\n        T = S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) T).\n                                y \\<in> States x} =\n                         {}\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} = {};\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) T).\n                                y \\<in> States x} =\n                         {}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; S \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G S). y \\<in> States x} = {};\n        T = S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) S).\n                                y \\<in> States x} =\n                         {}\n 2. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} = {};\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) T).\n                                y \\<in> States x} =\n                         {}", "apply (subst FAddSA_dom_insert)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>SAA SAAA T y.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; S \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G S). y \\<in> States x} = {};\n        T = S\\<rbrakk>\n       \\<Longrightarrow> S \\<in> dom G\n 2. \\<And>SAA SAAA T y.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; S \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G S). y \\<in> States x} = {};\n        T = S\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States SA\n 3. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; S \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G S). y \\<in> States x} = {};\n        T = S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         {y. \\<exists>x\n\\<in>the (Some (insert SA (the (G S)))).\n                                y \\<in> States x} =\n                         {}\n 4. \\<And>SAA SAAA T.\n       \\<lbrakk>States SA \\<inter> {y. \\<exists>x\\<in>F. y \\<in> States x} =\n                {};\n        dom G = {y. \\<exists>x\\<in>F. y \\<in> States x};\n        SAA\n        \\<subseteq> States SA \\<union>\n                    {y. \\<exists>x\\<in>F. y \\<in> States x};\n        \\<forall>s\\<in>SAA. s \\<notin> States SA; SAA \\<noteq> {};\n        SAAA \\<in> F; S \\<in> States SAAA; T \\<in> SAA;\n        SAA \\<inter> {y. \\<exists>x\\<in>the (G T). y \\<in> States x} = {};\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> SAA \\<inter>\n                         {y. \\<exists>x\\<in>the ((G [f+] (S, SA)) T).\n                                y \\<in> States x} =\n                         {}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_IsCompFun:\n \"\\<lbrakk> (States SA \\<inter> (\\<Union>(States ` F))) = {};\n     S \\<in> (\\<Union>(States ` F)); \n     IsCompFun F G \\<rbrakk> \\<Longrightarrow>  IsCompFun (insert SA F) (G [f+] (S,SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     S \\<in> \\<Union> (States ` F); IsCompFun F G\\<rbrakk>\n    \\<Longrightarrow> IsCompFun (insert SA F) (G [f+] (S, SA))", "apply (unfold IsCompFun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     S \\<in> \\<Union> (States ` F);\n     dom G = \\<Union> (States ` F) \\<and>\n     \\<Union> (ran G) = F - {Root F G} \\<and>\n     RootEx F G \\<and> OneAncestor F G \\<and> NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> dom (G [f+] (S, SA)) =\n                      \\<Union> (States ` insert SA F) \\<and>\n                      \\<Union> (ran (G [f+] (S, SA))) =\n                      insert SA F -\n                      {Root (insert SA F) (G [f+] (S, SA))} \\<and>\n                      RootEx (insert SA F) (G [f+] (S, SA)) \\<and>\n                      OneAncestor (insert SA F) (G [f+] (S, SA)) \\<and>\n                      NoCycles (insert SA F) (G [f+] (S, SA))", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     S \\<in> \\<Union> (States ` F); dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> dom (G [f+] (S, SA)) =\n                      \\<Union> (States ` insert SA F) \\<and>\n                      \\<Union> (ran (G [f+] (S, SA))) =\n                      insert SA F -\n                      {Root (insert SA F) (G [f+] (S, SA))} \\<and>\n                      RootEx (insert SA F) (G [f+] (S, SA)) \\<and>\n                      OneAncestor (insert SA F) (G [f+] (S, SA)) \\<and>\n                      NoCycles (insert SA F) (G [f+] (S, SA))", "apply (simp add: Int_commute FAddSA_RootEx_Root FAddSA_RootEx FAddSA_OneAncestor FAddSA_NoCycles)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> dom (G [f+] (S, SA)) =\n                      States SA \\<union> \\<Union> (States ` F) \\<and>\n                      \\<Union> (ran (G [f+] (S, SA))) =\n                      insert SA F - {Root F G}", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> dom (G [f+] (S, SA)) =\n                      States SA \\<union> \\<Union> (States ` F)\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran (G [f+] (S, SA))) =\n                      insert SA F - {Root F G}", "apply (subst FAddSA_dom_dom_States)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom G\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA\n 3. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> dom G \\<union> States SA =\n                      States SA \\<union> \\<Union> (States ` F)\n 4. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran (G [f+] (S, SA))) =\n                      insert SA F - {Root F G}", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> dom G \\<union> States SA =\n                      States SA \\<union> \\<Union> (States ` F)\n 3. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran (G [f+] (S, SA))) =\n                      insert SA F - {Root F G}", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> dom G \\<union> States SA =\n                      States SA \\<union> \\<Union> (States ` F)\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran (G [f+] (S, SA))) =\n                      insert SA F - {Root F G}", "apply (simp add: Un_commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran (G [f+] (S, SA))) =\n                      insert SA F - {Root F G}", "apply (simp add: FAddSA_Union_ran)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G\\<rbrakk>\n    \\<Longrightarrow> insert SA (F - {Root F G}) = insert SA F - {Root F G}", "apply (case_tac \"SA = Root F G\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA = Root F G\\<rbrakk>\n    \\<Longrightarrow> insert SA (F - {Root F G}) = insert SA F - {Root F G}\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA \\<noteq> Root F G\\<rbrakk>\n    \\<Longrightarrow> insert SA (F - {Root F G}) = insert SA F - {Root F G}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA \\<noteq> Root F G\\<rbrakk>\n    \\<Longrightarrow> insert SA (F - {Root F G}) = insert SA F - {Root F G}\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA = Root F G\\<rbrakk>\n    \\<Longrightarrow> insert SA (F - {Root F G}) = insert SA F - {Root F G}", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA = Root F G\\<rbrakk>\n    \\<Longrightarrow> insert SA (F - {Root F G}) = insert SA F - {Root F G}", "apply (subgoal_tac \"States (Root F G) \\<subseteq>  \\<Union>(States ` F)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA = Root F G;\n     States (Root F G) \\<subseteq> \\<Union> (States ` F)\\<rbrakk>\n    \\<Longrightarrow> insert SA (F - {Root F G}) = insert SA F - {Root F G}\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA = Root F G\\<rbrakk>\n    \\<Longrightarrow> States (Root F G) \\<subseteq> \\<Union> (States ` F)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA = Root F G\\<rbrakk>\n    \\<Longrightarrow> States (Root F G) \\<subseteq> \\<Union> (States ` F)", "apply (frule subset_lemma)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA = Root F G\\<rbrakk>\n    \\<Longrightarrow> States SA \\<subseteq> \\<Union> (States ` F)\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     \\<exists>x\\<in>F. S \\<in> States x; dom G = \\<Union> (States ` F);\n     \\<Union> (ran G) = F - {Root F G}; RootEx F G; OneAncestor F G;\n     NoCycles F G; SA = Root F G; States SA = {}\\<rbrakk>\n    \\<Longrightarrow> States (Root F G) \\<subseteq> \\<Union> (States ` F)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_HierAuto:\n  \"\\<lbrakk> (States SA \\<inter> (\\<Union>(States ` F))) = {};\n      S \\<in> (\\<Union>(States ` F)); \n      HierAuto D F E G \\<rbrakk> \\<Longrightarrow> HierAuto D (insert SA F) (E \\<union> SAEvents SA) (G [f+] (S,SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     S \\<in> \\<Union> (States ` F); HierAuto D F E G\\<rbrakk>\n    \\<Longrightarrow> HierAuto D (insert SA F) (E \\<union> SAEvents SA)\n                       (G [f+] (S, SA))", "apply (unfold HierAuto_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {};\n     S \\<in> \\<Union> (States ` F);\n     \\<Union> (SAEvents ` F) \\<subseteq> E \\<and>\n     MutuallyDistinct F \\<and> finite F \\<and> IsCompFun F G\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (SAEvents ` insert SA F)\n                      \\<subseteq> E \\<union> SAEvents SA \\<and>\n                      MutuallyDistinct (insert SA F) \\<and>\n                      finite (insert SA F) \\<and>\n                      IsCompFun (insert SA F) (G [f+] (S, SA))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {}; x \\<in> F;\n        S \\<in> States x; \\<Union> (SAEvents ` F) \\<subseteq> E;\n        MutuallyDistinct F; finite F; IsCompFun F G\\<rbrakk>\n       \\<Longrightarrow> MutuallyDistinct (insert SA F)\n 2. \\<And>x.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {}; x \\<in> F;\n        S \\<in> States x; \\<Union> (SAEvents ` F) \\<subseteq> E;\n        MutuallyDistinct F; finite F; IsCompFun F G\\<rbrakk>\n       \\<Longrightarrow> IsCompFun (insert SA F) (G [f+] (S, SA))", "apply (simp add: MutuallyDistinct_Insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {}; x \\<in> F;\n        S \\<in> States x; \\<Union> (SAEvents ` F) \\<subseteq> E;\n        MutuallyDistinct F; finite F; IsCompFun F G\\<rbrakk>\n       \\<Longrightarrow> IsCompFun (insert SA F) (G [f+] (S, SA))", "apply (rule FAddSA_IsCompFun)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {}; x \\<in> F;\n        S \\<in> States x; \\<Union> (SAEvents ` F) \\<subseteq> E;\n        MutuallyDistinct F; finite F; IsCompFun F G\\<rbrakk>\n       \\<Longrightarrow> States SA \\<inter> \\<Union> (States ` F) = {}\n 2. \\<And>x.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {}; x \\<in> F;\n        S \\<in> States x; \\<Union> (SAEvents ` F) \\<subseteq> E;\n        MutuallyDistinct F; finite F; IsCompFun F G\\<rbrakk>\n       \\<Longrightarrow> S \\<in> \\<Union> (States ` F)\n 3. \\<And>x.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` F) = {}; x \\<in> F;\n        S \\<in> States x; \\<Union> (SAEvents ` F) \\<subseteq> E;\n        MutuallyDistinct F; finite F; IsCompFun F G\\<rbrakk>\n       \\<Longrightarrow> IsCompFun F G", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FAddSA_HierAuto_insert [simp]:\n  \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {};\n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow> \n    HierAuto (HAInitValue HA)                  \n             (insert SA (SAs HA))              \n             (HAEvents HA \\<union> SAEvents SA)      \n             (CompFun HA [f+] (S,SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> HierAuto (HAInitValue HA) (insert SA (SAs HA))\n                       (HAEvents HA \\<union> SAEvents SA)\n                       (CompFun HA [f+] (S, SA))", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> HierAuto (HAInitValue HA) (insert SA (SAs HA))\n                       (HAEvents HA \\<union> SAEvents SA)\n                       (CompFun HA [f+] (S, SA))", "apply (rule FAddSA_HierAuto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> \\<Union> (States ` SAs HA) = {}\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> \\<Union> (States ` SAs HA)\n 3. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> HierAuto (HAInitValue HA) (SAs HA) (HAEvents HA)\n                       (CompFun HA)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Constructing a PseudoHA\""], ["", "definition\n  PseudoHA :: \"[('s,'e,'d)seqauto,'d data] => ('s,'e,'d)hierauto\" where\n  \"PseudoHA SA D = Abs_hierauto(D,{SA}, SAEvents SA ,EmptyMap (States SA))\""], ["", "lemma PseudoHA_SAs [simp]:\n  \"SAs (PseudoHA SA D) = {SA}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAs (PseudoHA SA D) = {SA}", "by (unfold PseudoHA_def SAs_def, simp add: Abs_hierauto_inverse)"], ["", "lemma PseudoHA_Events [simp]:\n  \"HAEvents (PseudoHA SA D) = SAEvents SA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAEvents (PseudoHA SA D) = SAEvents SA", "by (unfold PseudoHA_def HAEvents_def, simp add: Abs_hierauto_inverse)"], ["", "lemma PseudoHA_CompFun [simp]:\n  \"CompFun (PseudoHA SA D) = EmptyMap (States SA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CompFun (PseudoHA SA D) = EmptyMap (States SA)", "by (unfold PseudoHA_def CompFun_def, simp add: Abs_hierauto_inverse)"], ["", "lemma PseudoHA_HAStates [simp]:\n  \"HAStates (PseudoHA SA D) = (States SA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAStates (PseudoHA SA D) = States SA", "by (unfold HAStates_def, auto)"], ["", "lemma PseudoHA_HAInitValue [simp]:\n  \"(HAInitValue (PseudoHA SA D)) = D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAInitValue (PseudoHA SA D) = D", "by (unfold PseudoHA_def Let_def HAInitValue_def, simp add: Abs_hierauto_inverse)"], ["", "lemma PseudoHA_CompFun_the [simp]: \n \"S \\<in> States A \\<Longrightarrow> (the (CompFun (PseudoHA A D) S)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> States A \\<Longrightarrow> the (CompFun (PseudoHA A D) S) = {}", "by simp"], ["", "lemma PseudoHA_CompFun_ran [simp]:\n \"(ran (CompFun (PseudoHA SA D))) = {{}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran (CompFun (PseudoHA SA D)) = {{}}", "by auto"], ["", "lemma PseudoHA_HARoot [simp]:\n \"(HARoot (PseudoHA SA D)) = SA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HARoot (PseudoHA SA D) = SA", "by (unfold HARoot_def, auto)"], ["", "lemma PseudoHA_HAInitState [simp]:\n  \"HAInitState (PseudoHA A D) = InitState A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAInitState (PseudoHA A D) = InitState A", "apply (unfold HAInitState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState (HARoot (PseudoHA A D)) = InitState A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PseudoHA_HAInitStates [simp]:\n  \"HAInitStates (PseudoHA A D) = {InitState A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAInitStates (PseudoHA A D) = {InitState A}", "apply (unfold HAInitStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>A\\<in>SAs (PseudoHA A D). {InitState A}) = {InitState A}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PseudoHA_Chi [simp]:\n  \"S \\<in> States A \\<Longrightarrow> Chi (PseudoHA A D) S = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> States A \\<Longrightarrow> Chi (PseudoHA A D) S = {}", "apply (unfold Chi_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> States A \\<Longrightarrow>\n    (if S \\<in> HAStates (PseudoHA A D)\n     then {S'.\n           \\<exists>SA\\<in>SAs (PseudoHA A D).\n              SA \\<in> the (CompFun (PseudoHA A D) S) \\<and>\n              S' \\<in> States SA}\n     else SOME y. True) =\n    {}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PseudoHA_ChiRel [simp]:\n  \"ChiRel (PseudoHA A D) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ChiRel (PseudoHA A D) = {}", "apply (unfold ChiRel_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(S, S').\n     S \\<in> HAStates (PseudoHA A D) \\<and>\n     S' \\<in> HAStates (PseudoHA A D) \\<and>\n     S' \\<in> Chi (PseudoHA A D) S} =\n    {}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PseudoHA_InitConf [simp]:\n \"InitConf (PseudoHA A D) = {InitState A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitConf (PseudoHA A D) = {InitState A}", "apply (unfold InitConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (HAInitStates (PseudoHA A D) \\<times>\n     HAInitStates (PseudoHA A D) \\<inter>\n     ChiRel (PseudoHA A D))\\<^sup>* ``\n    {HAInitState (PseudoHA A D)} =\n    {InitState A}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Extending a HA by a SA (\\<open>AddSA\\<close>)\\<close>"], ["", "definition\n  AddSA :: \"[('s,'e,'d)hierauto, 's * ('s,'e,'d)seqauto]\n             => ('s,'e,'d)hierauto\"\n           (\"(_ [++]/ _)\" [10,11]10) where\n  \"AddSA HA SSA = (let (S,SA) = SSA;\n                        DNew = HAInitValue HA;\n                        FNew = insert SA (SAs HA);\n                        ENew  = HAEvents HA \\<union> SAEvents SA;\n                        GNew  = CompFun HA [f+] (S,SA)\n                   in\n                       Abs_hierauto(DNew,FNew,ENew,GNew))\""], ["", "definition\n  AddHA :: \"[('s,'e,'d)hierauto, 's * ('s,'e,'d)hierauto]\n             => ('s,'e,'d)hierauto\"\n           (\"(_ [**]/ _)\" [10,11]10) where\n  \"AddHA HA1 SHA =\n            (let (S,HA2)     = SHA;\n                 (D1,F1,E1,G1) = Rep_hierauto (HA1 [++] (S,HARoot HA2));\n                 (D2,F2,E2,G2) = Rep_hierauto HA2;\n                 FNew       = F1 \\<union> F2;\n                 ENew       = E1 \\<union> E2;\n                 GNew       = G1 ++ G2\n             in\n                 Abs_hierauto(D1,FNew,ENew,GNew))\""], ["", "lemma AddSA_SAs:\n  \"\\<lbrakk> (States SA \\<inter>  HAStates HA) = {}; \n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow> (SAs (HA [++] (S,SA))) = insert SA (SAs HA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> SAs (HA [++] (S, SA)) = insert SA (SAs HA)", "apply (unfold Let_def AddSA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> SAs (case (S, SA) of\n                           (S, SA) \\<Rightarrow>\n                             Abs_hierauto\n                              (HAInitValue HA, insert SA (SAs HA),\n                               HAEvents HA \\<union> SAEvents SA,\n                               CompFun HA [f+] (S, SA))) =\n                      insert SA (SAs HA)", "apply (subst SAs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> (fst \\<circ> snd \\<circ> Rep_hierauto)\n                       (case (S, SA) of\n                        (S, SA) \\<Rightarrow>\n                          Abs_hierauto\n                           (HAInitValue HA, insert SA (SAs HA),\n                            HAEvents HA \\<union> SAEvents SA,\n                            CompFun HA [f+] (S, SA))) =\n                      insert SA (SAs HA)", "apply (simp add: hierauto_def Abs_hierauto_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_Events:\n  \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {}; \n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow>\n     HAEvents (HA [++] (S,SA)) = (HAEvents HA) \\<union> (SAEvents SA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> HAEvents (HA [++] (S, SA)) =\n                      HAEvents HA \\<union> SAEvents SA", "apply (unfold Let_def AddSA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> HAEvents\n                       (case (S, SA) of\n                        (S, SA) \\<Rightarrow>\n                          Abs_hierauto\n                           (HAInitValue HA, insert SA (SAs HA),\n                            HAEvents HA \\<union> SAEvents SA,\n                            CompFun HA [f+] (S, SA))) =\n                      HAEvents HA \\<union> SAEvents SA", "apply (subst HAEvents_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> (fst \\<circ> snd \\<circ> snd \\<circ> Rep_hierauto)\n                       (case (S, SA) of\n                        (S, SA) \\<Rightarrow>\n                          Abs_hierauto\n                           (HAInitValue HA, insert SA (SAs HA),\n                            HAEvents HA \\<union> SAEvents SA,\n                            CompFun HA [f+] (S, SA))) =\n                      HAEvents HA \\<union> SAEvents SA", "apply (simp add: hierauto_def Abs_hierauto_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun:\n   \"\\<lbrakk> (States SA \\<inter>  HAStates HA) = {}; \n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow>  \n     CompFun (HA [++] (S,SA)) = (CompFun HA [f+] (S,SA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> CompFun (HA [++] (S, SA)) = (CompFun HA [f+] (S, SA))", "apply (unfold Let_def AddSA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> CompFun\n                       (case (S, SA) of\n                        (S, SA) \\<Rightarrow>\n                          Abs_hierauto\n                           (HAInitValue HA, insert SA (SAs HA),\n                            HAEvents HA \\<union> SAEvents SA,\n                            CompFun HA [f+] (S, SA))) =\n                      (CompFun HA [f+] (S, SA))", "apply (subst CompFun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> (snd \\<circ> snd \\<circ> snd \\<circ> Rep_hierauto)\n                       (case (S, SA) of\n                        (S, SA) \\<Rightarrow>\n                          Abs_hierauto\n                           (HAInitValue HA, insert SA (SAs HA),\n                            HAEvents HA \\<union> SAEvents SA,\n                            CompFun HA [f+] (S, SA))) =\n                      (CompFun HA [f+] (S, SA))", "apply (simp add: hierauto_def Abs_hierauto_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_HAStates:\n   \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {}; \n       S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow>\n      HAStates (HA [++] (S,SA)) = (HAStates HA) \\<union> (States SA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> HAStates (HA [++] (S, SA)) =\n                      HAStates HA \\<union> States SA", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (States ` SAs (HA [++] (S, SA))) =\n                      \\<Union> (States ` SAs HA) \\<union> States SA", "apply (subst AddSA_SAs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> HAStates HA = {}\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates HA\n 3. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (States ` insert SA (SAs HA)) =\n                      \\<Union> (States ` SAs HA) \\<union> States SA", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> \\<Union> (States ` SAs HA) = {}\n 2. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> S \\<in> \\<Union> (States ` SAs HA)\n 3. \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n     S \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (States ` insert SA (SAs HA)) =\n                      \\<Union> (States ` SAs HA) \\<union> States SA", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_HAInitValue:\n   \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {};\n       S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow>\n      (HAInitValue (HA [++] (S,SA))) = (HAInitValue HA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> HAInitValue (HA [++] (S, SA)) = HAInitValue HA", "apply (unfold Let_def AddSA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> HAInitValue\n                       (case (S, SA) of\n                        (S, SA) \\<Rightarrow>\n                          Abs_hierauto\n                           (HAInitValue HA, insert SA (SAs HA),\n                            HAEvents HA \\<union> SAEvents SA,\n                            CompFun HA [f+] (S, SA))) =\n                      HAInitValue HA", "apply (subst HAInitValue_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> (fst \\<circ> Rep_hierauto)\n                       (case (S, SA) of\n                        (S, SA) \\<Rightarrow>\n                          Abs_hierauto\n                           (HAInitValue HA, insert SA (SAs HA),\n                            HAEvents HA \\<union> SAEvents SA,\n                            CompFun HA [f+] (S, SA))) =\n                      HAInitValue HA", "apply (simp add: hierauto_def Abs_hierauto_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_HARoot:\n   \"\\<lbrakk> (States SA \\<inter> HAStates HA) = {};\n      S \\<in> HAStates HA \\<rbrakk> \\<Longrightarrow> \n      (HARoot (HA [++] (S,SA))) = (HARoot HA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> HARoot (HA [++] (S, SA)) = HARoot HA", "apply (unfold HARoot_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> Root (SAs (HA [++] (S, SA)))\n                       (CompFun (HA [++] (S, SA))) =\n                      Root (SAs HA) (CompFun HA)", "apply (simp add: AddSA_CompFun AddSA_SAs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> Root (insert SA (SAs HA)) (CompFun HA [f+] (S, SA)) =\n                      Root (SAs HA) (CompFun HA)", "apply (subst FAddSA_RootEx_Root)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (ran (CompFun HA)) =\n                      SAs HA - {Root (SAs HA) (CompFun HA)}\n 2. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (States ` SAs HA) = dom (CompFun HA)\n 3. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> dom (CompFun HA) \\<inter> States SA = {}\n 4. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom (CompFun HA)\n 5. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> RootEx (SAs HA) (CompFun HA)\n 6. \\<lbrakk>States SA \\<inter> HAStates HA = {};\n     S \\<in> HAStates HA\\<rbrakk>\n    \\<Longrightarrow> Root (SAs HA) (CompFun HA) =\n                      Root (SAs HA) (CompFun HA)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n        xa \\<in> SAs HA; x \\<in> States xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> HAStates HA\n 2. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n        x \\<in> HAStates HA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>SAs HA. x \\<in> States xa", "apply (simp only: HAStates_SA_mem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n        x \\<in> HAStates HA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>SAs HA. x \\<in> States xa", "apply (unfold HAStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> \\<Union> (States ` SAs HA) = {};\n        S \\<in> \\<Union> (States ` SAs HA);\n        x \\<in> \\<Union> (States ` SAs HA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>SAs HA. x \\<in> States xa", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_the: \n \"\\<lbrakk> (States SA \\<inter> HAStates A) = {}; \n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n  (the ((CompFun (A [++] (S,SA))) S)) = insert SA (the ((CompFun A) S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> the (CompFun (A [++] (S, SA)) S) =\n                      insert SA (the (CompFun A S))", "by (simp add: AddSA_CompFun)"], ["", "lemma AddSA_CompFun_the2:\n \"\\<lbrakk> S' \\<in> States (SA::('a,'c,'d)seqauto); \n    (States SA \\<inter> HAStates A) = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>\n    the ((CompFun (A [++] (S,SA))) S') = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S' \\<in> States SA; States SA \\<inter> HAStates A = {};\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> the (CompFun (A [++] (S, SA)) S') = {}", "apply (simp add: AddSA_CompFun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S' \\<in> States SA; States SA \\<inter> HAStates A = {};\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> the ((CompFun A [f+] (S, SA)) S') = {}", "apply (subst FAddSA_dom_emptyset)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>S' \\<in> States SA; States SA \\<inter> HAStates A = {};\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom (CompFun A)\n 2. \\<lbrakk>S' \\<in> States SA; States SA \\<inter> HAStates A = {};\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA\n 3. \\<lbrakk>S' \\<in> States SA; States SA \\<inter> HAStates A = {};\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> S' \\<in> States SA\n 4. \\<lbrakk>S' \\<in> States SA; States SA \\<inter> HAStates A = {};\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> the (Some {}) = {}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_the3:\n \"\\<lbrakk> S' \\<notin> States (SA::('a,'c,'d)seqauto); \n    S \\<noteq> S'; \n    (States SA \\<inter> HAStates A) = {}; \n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n   (the ((CompFun (A [++] (S,SA))) S')) = (the ((CompFun A) S'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S' \\<notin> States SA; S \\<noteq> S';\n     States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> the (CompFun (A [++] (S, SA)) S') = the (CompFun A S')", "by (simp add: AddSA_CompFun)"], ["", "lemma AddSA_CompFun_ran:\n \"\\<lbrakk> (States SA \\<inter> HAStates A) = {};\n     S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n   ran (CompFun (A [++] (S,SA))) = \n       insert {} (insert (insert SA (the ((CompFun A) S))) (ran (CompFun A) - {the ((CompFun A) S)}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun (A [++] (S, SA))) =\n                      insert {}\n                       (insert (insert SA (the (CompFun A S)))\n                         (ran (CompFun A) - {the (CompFun A S)}))", "apply (simp add: AddSA_CompFun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun A [f+] (S, SA)) =\n                      insert {}\n                       (insert (insert SA (the (CompFun A S)))\n                         (ran (CompFun A) - {the (CompFun A S)}))", "apply (subst FAddSA_ran)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>T\\<in>dom (CompFun A).\n                         T \\<noteq> S \\<longrightarrow>\n                         the (CompFun A T) \\<inter> the (CompFun A S) = {}\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom (CompFun A)\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> dom (CompFun A) = {}\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert (insert SA (the (CompFun A S)))\n                         (ran (CompFun A) - {the (CompFun A S)})) =\n                      insert {}\n                       (insert (insert SA (the (CompFun A S)))\n                         (ran (CompFun A) - {the (CompFun A S)}))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        T \\<in> HAStates A; T \\<noteq> S; x \\<in> the (CompFun A T);\n        x \\<in> the (CompFun A S)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fast dest: CompFun_Int_disjoint)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_ran2:\n \"\\<lbrakk> (States SA1 \\<inter> HAStates A) = {};\n    (States SA2 \\<inter> (HAStates A \\<union> States SA1)) = {};\n     S \\<in> HAStates A;\n     T \\<in> States SA1 \\<rbrakk> \\<Longrightarrow>\n   ran (CompFun ((A [++] (S,SA1)) [++] (T,SA2))) = \n       insert {} (insert {SA2} (ran (CompFun (A  [++] (S,SA1)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun (A [++] (S, SA1) [++] (T, SA2))) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun (A [++] (S, SA1)))))", "apply (simp add: AddSA_HAStates AddSA_CompFun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun A [f+] (S, SA1) [f+] (T, SA2)) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst FAddSA_ran)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Ta\\<in>dom (CompFun A [f+] (S, SA1)).\n                         Ta \\<noteq> T \\<longrightarrow>\n                         the ((CompFun A [f+] (S, SA1)) Ta) \\<inter>\n                         the ((CompFun A [f+] (S, SA1)) T) =\n                         {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (rule ballI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1))\\<rbrakk>\n       \\<Longrightarrow> Ta \\<noteq> T \\<longrightarrow>\n                         the ((CompFun A [f+] (S, SA1)) Ta) \\<inter>\n                         the ((CompFun A [f+] (S, SA1)) T) =\n                         {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (rule impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> the ((CompFun A [f+] (S, SA1)) Ta) \\<inter>\n                         the ((CompFun A [f+] (S, SA1)) T) =\n                         {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst AddSA_CompFun [THEN sym])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> States SA1 \\<inter> HAStates A = {}\n 2. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAStates A\n 3. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> the (CompFun (A [++] (S, SA1)) Ta) \\<inter>\n                         the ((CompFun A [f+] (S, SA1)) T) =\n                         {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 6. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAStates A\n 2. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> the (CompFun (A [++] (S, SA1)) Ta) \\<inter>\n                         the ((CompFun A [f+] (S, SA1)) T) =\n                         {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> the (CompFun (A [++] (S, SA1)) Ta) \\<inter>\n                         the ((CompFun A [f+] (S, SA1)) T) =\n                         {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst AddSA_CompFun [THEN sym])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> States SA1 \\<inter> HAStates A = {}\n 2. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAStates A\n 3. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> the (CompFun (A [++] (S, SA1)) Ta) \\<inter>\n                         the (CompFun (A [++] (S, SA1)) T) =\n                         {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 6. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> S \\<in> HAStates A\n 2. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> the (CompFun (A [++] (S, SA1)) Ta) \\<inter>\n                         the (CompFun (A [++] (S, SA1)) T) =\n                         {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> the (CompFun (A [++] (S, SA1)) Ta) \\<inter>\n                         the (CompFun (A [++] (S, SA1)) T) =\n                         {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (rule CompFun_Int_disjoint)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> T \\<noteq> Ta\n 2. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> T \\<in> HAStates (A [++] (S, SA1))\n 3. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> HAStates (A [++] (S, SA1))\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 6. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> T \\<in> HAStates (A [++] (S, SA1))\n 2. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> HAStates (A [++] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (simp add: AddSA_HAStates)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> HAStates (A [++] (S, SA1))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (simp add: AddSA_HAStates)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> HAStates A \\<or> Ta \\<in> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (case_tac \"S \\<in> States SA1\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T;\n        S \\<in> States SA1\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> HAStates A \\<or> Ta \\<in> States SA1\n 2. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T;\n        S \\<notin> States SA1\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> HAStates A \\<or> Ta \\<in> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n        States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n        S \\<in> HAStates A; T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T;\n        S \\<notin> States SA1\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> HAStates A \\<or> Ta \\<in> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (simp only: dom_CompFun [THEN sym])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> dom (CompFun A) = {};\n        States SA2 \\<inter> (dom (CompFun A) \\<union> States SA1) = {};\n        S \\<in> dom (CompFun A); T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T;\n        S \\<notin> States SA1\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> dom (CompFun A) \\<or> Ta \\<in> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (frule FAddSA_dom_dom_States)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> dom (CompFun A) = {};\n        States SA2 \\<inter> (dom (CompFun A) \\<union> States SA1) = {};\n        S \\<in> dom (CompFun A); T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T;\n        S \\<notin> States SA1\\<rbrakk>\n       \\<Longrightarrow> S \\<notin> States (?SA16 Ta)\n 2. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> dom (CompFun A) = {};\n        States SA2 \\<inter> (dom (CompFun A) \\<union> States SA1) = {};\n        S \\<in> dom (CompFun A); T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T;\n        S \\<notin> States SA1;\n        dom (CompFun A [f+] (S, ?SA16 Ta)) =\n        dom (CompFun A) \\<union> States (?SA16 Ta)\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> dom (CompFun A) \\<or> Ta \\<in> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Ta.\n       \\<lbrakk>States SA1 \\<inter> dom (CompFun A) = {};\n        States SA2 \\<inter> (dom (CompFun A) \\<union> States SA1) = {};\n        S \\<in> dom (CompFun A); T \\<in> States SA1;\n        Ta \\<in> dom (CompFun A [f+] (S, SA1)); Ta \\<noteq> T;\n        S \\<notin> States SA1;\n        dom (CompFun A [f+] (S, SA1)) =\n        dom (CompFun A) \\<union> States SA1\\<rbrakk>\n       \\<Longrightarrow> Ta \\<in> dom (CompFun A) \\<or> Ta \\<in> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (case_tac \"S \\<in> States SA1\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> HAStates A\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst FAddSA_dom_dom_States)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom (CompFun A)\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A) \\<union> States SA1\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A) \\<union> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A) \\<union> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (case_tac \"S \\<in>  States SA1\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> HAStates A = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> dom (CompFun A [f+] (S, SA1)) = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst FAddSA_dom_dom_States)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom (CompFun A)\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      (dom (CompFun A) \\<union> States SA1) =\n                      {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      (dom (CompFun A) \\<union> States SA1) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      (dom (CompFun A) \\<union> States SA1) =\n                      {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (case_tac \"S \\<in>  States SA1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert (insert SA2 (the (CompFun A T)))\n                         (ran (CompFun A) - {the (CompFun A T)})) =\n                      insert {} (insert {SA2} (ran (CompFun A)))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2 (the ((CompFun A [f+] (S, SA1)) T)))\n                         (ran (CompFun A [f+] (S, SA1)) -\n                          {the ((CompFun A [f+] (S, SA1)) T)})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1; S \\<notin> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA2}\n                         (ran (CompFun A [f+] (S, SA1)) - {{}})) =\n                      insert {}\n                       (insert {SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_ran_not_mem:\n \"\\<lbrakk> States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n    States SA1 \\<inter> HAStates A = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n   {SA2} \\<notin> ran (CompFun A [f+] (S, SA1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA1 \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> {SA2} \\<notin> ran (CompFun A [f+] (S, SA1))", "apply (cut_tac HA=\"A [++] (S,SA1)\" and Sas=\"{SA2}\" in ran_CompFun_is_not_SA)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA1 \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> \\<not> {SA2} \\<subseteq> SAs (A [++] (S, SA1))\n 2. \\<lbrakk>States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA1 \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     {SA2} \\<notin> ran (CompFun (A [++] (S, SA1)))\\<rbrakk>\n    \\<Longrightarrow> {SA2} \\<notin> ran (CompFun A [f+] (S, SA1))", "apply (metis AddSA_HAStates SA_States_disjunct2 SAs_States_HAStates insert_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA1 \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     {SA2} \\<notin> ran (CompFun (A [++] (S, SA1)))\\<rbrakk>\n    \\<Longrightarrow> {SA2} \\<notin> ran (CompFun A [f+] (S, SA1))", "apply (simp add: AddSA_HAStates AddSA_CompFun)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_ran3:\n \"\\<lbrakk> (States SA1 \\<inter> HAStates A) = {};\n    (States SA2 \\<inter> (HAStates A \\<union> States SA1)) = {};\n    (States SA3 \\<inter> (HAStates A \\<union> States SA1 \\<union> States SA2)) = {};\n     S \\<in> HAStates A; \n     T \\<in> States SA1 \\<rbrakk> \\<Longrightarrow> \n    ran (CompFun ((A [++] (S,SA1)) [++] (T,SA2) [++] (T,SA3))) = \n       insert {} (insert {SA3,SA2} (ran (CompFun (A  [++] (S,SA1)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun\n                            (A [++] (S, SA1) [++] (T, SA2) [++] (T, SA3))) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun (A [++] (S, SA1)))))", "apply (simp add: AddSA_HAStates AddSA_CompFun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun A [f+] (S, SA1) [f+] (T, SA2) [f+]\n                           (T, SA3)) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst FAddSA_ran)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Ta\\<in>dom\n (CompFun A [f+] (S, SA1) [f+] (T, SA2)).\n                         Ta \\<noteq> T \\<longrightarrow>\n                         the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                               Ta) \\<inter>\n                         the ((CompFun A [f+] (S, SA1) [f+] (T, SA2)) T) =\n                         {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1) [f+] (T, SA2))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA3 \\<inter>\n                      dom (CompFun A [f+] (S, SA1) [f+] (T, SA2)) =\n                      {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun A [f+] (S, SA1) [f+] (T, SA2)) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (metis AddSA_CompFun AddSA_HAStates CompFun_Int_disjoint UnCI dom_CompFun)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1) [f+] (T, SA2))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA3 \\<inter>\n                      dom (CompFun A [f+] (S, SA1) [f+] (T, SA2)) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun A [f+] (S, SA1) [f+] (T, SA2)) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (metis AddSA_CompFun AddSA_HAStates UnCI dom_CompFun)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA3 \\<inter>\n                      dom (CompFun A [f+] (S, SA1) [f+] (T, SA2)) =\n                      {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun A [f+] (S, SA1) [f+] (T, SA2)) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (metis AddSA_CompFun AddSA_HAStates UnCI dom_CompFun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun A [f+] (S, SA1) [f+] (T, SA2)) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst AddSA_CompFun [THEN sym])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA1 \\<inter> HAStates A = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun (A [++] (S, SA1)) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun A [f+] (S, SA1) [f+] (T, SA2)) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA1 \\<inter> HAStates A = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun (A [++] (S, SA1)) [f+] (T, SA2)) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun (A [++] (S, SA1)) [f+] (T, SA2)) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun (A [++] (S, SA1)) [f+] (T, SA2)) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst AddSA_CompFun [THEN sym])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA1 \\<inter> HAStates A = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun (A [++] (S, SA1)) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun (A [++] (S, SA1)) [f+] (T, SA2)) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> HAStates (A [++] (S, SA1)) = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> HAStates (A [++] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun (A [++] (S, SA1) [++] (T, SA2))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (simp add: AddSA_HAStates)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> HAStates (A [++] (S, SA1))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun (A [++] (S, SA1) [++] (T, SA2))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (simp add: AddSA_HAStates)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (ran (CompFun (A [++] (S, SA1) [++] (T, SA2))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst AddSA_CompFun_ran2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA1 \\<inter> HAStates A = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> (HAStates A \\<union> States SA1) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (insert {}\n                           (insert {SA2}\n                             (ran (CompFun (A [++] (S, SA1))))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> (HAStates A \\<union> States SA1) =\n                      {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (insert {}\n                           (insert {SA2}\n                             (ran (CompFun (A [++] (S, SA1))))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (insert {}\n                           (insert {SA2}\n                             (ran (CompFun (A [++] (S, SA1))))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (insert {}\n                           (insert {SA2}\n                             (ran (CompFun (A [++] (S, SA1))))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (insert {}\n                           (insert {SA2}\n                             (ran (CompFun (A [++] (S, SA1))))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (simp add: AddSA_CompFun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                  T)))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst  FAddSA_dom_insert)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some\n                                  (insert SA2\n                                    (the ((CompFun A [f+] (S, SA1)) T))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst FAddSA_dom_dom_States)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom (CompFun A)\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A) \\<union> States SA1\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some\n                                  (insert SA2\n                                    (the ((CompFun A [f+] (S, SA1)) T))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A) \\<union> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some\n                                  (insert SA2\n                                    (the ((CompFun A [f+] (S, SA1)) T))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A) \\<union> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some\n                                  (insert SA2\n                                    (the ((CompFun A [f+] (S, SA1)) T))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some\n                                  (insert SA2\n                                    (the ((CompFun A [f+] (S, SA1)) T))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some\n                                  (insert SA2\n                                    (the ((CompFun A [f+] (S, SA1)) T))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst FAddSA_dom_emptyset)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom (CompFun A)\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some (insert SA2 (the (Some {}))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some (insert SA2 (the (Some {}))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some (insert SA2 (the (Some {}))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA3\n                           (the (Some (insert SA2 (the (Some {}))))))\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the ((CompFun A [f+] (S, SA1) [f+] (T, SA2))\n                                 T)})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst  FAddSA_dom_insert)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A [f+] (S, SA1))\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some\n                                 (insert SA2\n                                   (the ((CompFun A [f+] (S, SA1))\n    T))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst FAddSA_dom_dom_States)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom (CompFun A)\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A) \\<union> States SA1\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some\n                                 (insert SA2\n                                   (the ((CompFun A [f+] (S, SA1))\n    T))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A) \\<union> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some\n                                 (insert SA2\n                                   (the ((CompFun A [f+] (S, SA1))\n    T))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> dom (CompFun A) \\<union> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some\n                                 (insert SA2\n                                   (the ((CompFun A [f+] (S, SA1))\n    T))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<notin> States SA2\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some\n                                 (insert SA2\n                                   (the ((CompFun A [f+] (S, SA1))\n    T))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some\n                                 (insert SA2\n                                   (the ((CompFun A [f+] (S, SA1))\n    T))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply (subst FAddSA_dom_emptyset)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<in> dom (CompFun A)\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some (insert SA2 (the (Some {}))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> S \\<notin> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some (insert SA2 (the (Some {}))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some (insert SA2 (the (Some {}))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {the (Some (insert SA2 (the (Some {}))))})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (insert {}\n                           (insert {SA2} (ran (CompFun A [f+] (S, SA1)))) -\n                          {{SA2}})) =\n                      insert {}\n                       (insert {SA3, SA2} (ran (CompFun A [f+] (S, SA1))))", "by (simp add: AddSA_CompFun_ran_not_mem insert_Diff_if insert_commute)"], ["", "lemma AddSA_CompFun_PseudoHA_ran:\n  \"\\<lbrakk> S \\<in> States RootSA;\n     States RootSA \\<inter> States SA = {} \\<rbrakk> \\<Longrightarrow> \n     (ran (CompFun ((PseudoHA RootSA D) [++] (S,SA)))) = (insert {} {{SA}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> States RootSA;\n     States RootSA \\<inter> States SA = {}\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun (PseudoHA RootSA D [++] (S, SA))) =\n                      {{}, {SA}}", "apply (subst AddSA_CompFun_ran)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> States RootSA;\n     States RootSA \\<inter> States SA = {}\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> HAStates (PseudoHA RootSA D) = {}\n 2. \\<lbrakk>S \\<in> States RootSA;\n     States RootSA \\<inter> States SA = {}\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D)\n 3. \\<lbrakk>S \\<in> States RootSA;\n     States RootSA \\<inter> States SA = {}\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA (the (CompFun (PseudoHA RootSA D) S)))\n                         (ran (CompFun (PseudoHA RootSA D)) -\n                          {the (CompFun (PseudoHA RootSA D) S)})) =\n                      {{}, {SA}}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_PseudoHA_ran2:\n  \"\\<lbrakk> States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {}; \n     S \\<in> States RootSA \\<rbrakk> \\<Longrightarrow>  \n     (ran (CompFun ((PseudoHA RootSA D) [++] (S,SA1) [++] (S,SA2)))) = (insert {} {{SA2,SA1}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun\n                            (PseudoHA RootSA D [++] (S, SA1) [++]\n                             (S, SA2))) =\n                      {{}, {SA2, SA1}}", "apply (subst AddSA_CompFun_ran)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                  S)))\n                         (ran (CompFun (PseudoHA RootSA D [++] (S, SA1))) -\n                          {the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                 S)})) =\n                      {{}, {SA2, SA1}}", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                  S)))\n                         (ran (CompFun (PseudoHA RootSA D [++] (S, SA1))) -\n                          {the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                 S)})) =\n                      {{}, {SA2, SA1}}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply (subst AddSA_CompFun_the)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA1 \\<inter> HAStates (PseudoHA RootSA D) = {}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D)\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (insert SA1\n                             (the (CompFun (PseudoHA RootSA D) S))))\n                         (ran (CompFun (PseudoHA RootSA D [++] (S, SA1))) -\n                          {the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                 S)})) =\n                      {{}, {SA2, SA1}}\n 4. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 5. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D)\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (insert SA1\n                             (the (CompFun (PseudoHA RootSA D) S))))\n                         (ran (CompFun (PseudoHA RootSA D [++] (S, SA1))) -\n                          {the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                 S)})) =\n                      {{}, {SA2, SA1}}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 4. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (insert SA1\n                             (the (CompFun (PseudoHA RootSA D) S))))\n                         (ran (CompFun (PseudoHA RootSA D [++] (S, SA1))) -\n                          {the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                 S)})) =\n                      {{}, {SA2, SA1}}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply (subst AddSA_CompFun_PseudoHA_ran)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States RootSA\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States RootSA \\<inter> States SA1 = {}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (insert SA1\n                             (the (CompFun (PseudoHA RootSA D) S))))\n                         ({{}, {SA1}} -\n                          {the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                 S)})) =\n                      {{}, {SA2, SA1}}\n 4. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 5. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States RootSA \\<inter> States SA1 = {}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (insert SA1\n                             (the (CompFun (PseudoHA RootSA D) S))))\n                         ({{}, {SA1}} -\n                          {the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                 S)})) =\n                      {{}, {SA2, SA1}}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 4. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (insert SA1\n                             (the (CompFun (PseudoHA RootSA D) S))))\n                         ({{}, {SA1}} -\n                          {the (CompFun (PseudoHA RootSA D [++] (S, SA1))\n                                 S)})) =\n                      {{}, {SA2, SA1}}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply (subst AddSA_CompFun_the)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA1 \\<inter> HAStates (PseudoHA RootSA D) = {}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D)\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (insert SA1\n                             (the (CompFun (PseudoHA RootSA D) S))))\n                         ({{}, {SA1}} -\n                          {insert SA1\n                            (the (CompFun (PseudoHA RootSA D) S))})) =\n                      {{}, {SA2, SA1}}\n 4. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 5. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D)\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (insert SA1\n                             (the (CompFun (PseudoHA RootSA D) S))))\n                         ({{}, {SA1}} -\n                          {insert SA1\n                            (the (CompFun (PseudoHA RootSA D) S))})) =\n                      {{}, {SA2, SA1}}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 4. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert\n                         (insert SA2\n                           (insert SA1\n                             (the (CompFun (PseudoHA RootSA D) S))))\n                         ({{}, {SA1}} -\n                          {insert SA1\n                            (the (CompFun (PseudoHA RootSA D) S))})) =\n                      {{}, {SA2, SA1}}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA2, SA1} ({{}, {SA1}} - {{SA1}})) =\n                      {{}, {SA2, SA1}}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      HAStates (PseudoHA RootSA D [++] (S, SA1)) =\n                      {}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply (simp add: AddSA_HAStates)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates (PseudoHA RootSA D [++] (S, SA1))", "apply (simp add: AddSA_HAStates)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_HAInitStates [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>\n   HAInitStates (A [++] (S,SA)) = insert (InitState SA) (HAInitStates A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> HAInitStates (A [++] (S, SA)) =\n                      insert (InitState SA) (HAInitStates A)", "apply (unfold HAInitStates_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (\\<Union>A\\<in>SAs (A [++] (S, SA)). {InitState A}) =\n                      insert (InitState SA)\n                       (\\<Union>A\\<in>SAs A. {InitState A})", "apply (simp add: AddSA_SAs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_HAInitState [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>\n  HAInitState (A [++] (S,SA)) = (HAInitState A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> HAInitState (A [++] (S, SA)) = HAInitState A", "apply (unfold HAInitState_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> InitState (HARoot (A [++] (S, SA))) =\n                      InitState (HARoot A)", "apply (simp add: AddSA_HARoot)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_Chi [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n   S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>  \n  Chi (A [++] (S,SA)) S = (States SA) \\<union> (Chi A S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> Chi (A [++] (S, SA)) S = States SA \\<union> Chi A S", "apply (unfold Chi_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (if S \\<in> HAStates (A [++] (S, SA))\n                       then {S'.\n                             \\<exists>SAa\\<in>SAs (A [++] (S, SA)).\n                                SAa\n                                \\<in> the\n (CompFun (A [++] (S, SA)) S) \\<and>\n                                S' \\<in> States SAa}\n                       else SOME y. True) =\n                      States SA \\<union>\n                      (if S \\<in> HAStates A\n                       then {S'.\n                             \\<exists>SA\\<in>SAs A.\n                                SA \\<in> the (CompFun A S) \\<and>\n                                S' \\<in> States SA}\n                       else SOME y. True)", "apply (simp add: AddSA_SAs AddSA_HAStates AddSA_CompFun_the)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> {S'.\n                       S' \\<in> States SA \\<or>\n                       (\\<exists>SAa\\<in>SAs A.\n                           (SAa = SA \\<or>\n                            SAa \\<in> the (CompFun A S)) \\<and>\n                           S' \\<in> States SAa)} =\n                      States SA \\<union>\n                      {S'.\n                       \\<exists>SA\\<in>SAs A.\n                          SA \\<in> the (CompFun A S) \\<and>\n                          S' \\<in> States SA}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_Chi2 [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A;  \n    T \\<in> States SA \\<rbrakk> \\<Longrightarrow>\n    Chi (A [++] (S,SA)) T = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     T \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> Chi (A [++] (S, SA)) T = {}", "apply (unfold Chi_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     T \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> (if T \\<in> HAStates (A [++] (S, SA))\n                       then {S'.\n                             \\<exists>SAa\\<in>SAs (A [++] (S, SA)).\n                                SAa\n                                \\<in> the\n (CompFun (A [++] (S, SA)) T) \\<and>\n                                S' \\<in> States SAa}\n                       else SOME y. True) =\n                      {}", "apply (simp add: AddSA_SAs AddSA_HAStates AddSA_CompFun_the2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_Chi3 [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A; \n    T \\<notin> States SA; T \\<noteq> S \\<rbrakk> \\<Longrightarrow>\n    Chi (A [++] (S,SA)) T = Chi A T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     T \\<notin> States SA; T \\<noteq> S\\<rbrakk>\n    \\<Longrightarrow> Chi (A [++] (S, SA)) T = Chi A T", "apply (unfold Chi_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     T \\<notin> States SA; T \\<noteq> S\\<rbrakk>\n    \\<Longrightarrow> (if T \\<in> HAStates (A [++] (S, SA))\n                       then {S'.\n                             \\<exists>SAa\\<in>SAs (A [++] (S, SA)).\n                                SAa\n                                \\<in> the\n (CompFun (A [++] (S, SA)) T) \\<and>\n                                S' \\<in> States SAa}\n                       else SOME y. True) =\n                      (if T \\<in> HAStates A\n                       then {S'.\n                             \\<exists>SA\\<in>SAs A.\n                                SA \\<in> the (CompFun A T) \\<and>\n                                S' \\<in> States SA}\n                       else SOME y. True)", "apply (simp add: AddSA_SAs AddSA_HAStates AddSA_CompFun_the3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     T \\<notin> States SA; T \\<noteq> S\\<rbrakk>\n    \\<Longrightarrow> T \\<in> HAStates A \\<longrightarrow>\n                      {S'.\n                       SA \\<in> the (CompFun A T) \\<and>\n                       S' \\<in> States SA \\<or>\n                       (\\<exists>SA\\<in>SAs A.\n                           SA \\<in> the (CompFun A T) \\<and>\n                           S' \\<in> States SA)} =\n                      {S'.\n                       \\<exists>SA\\<in>SAs A.\n                          SA \\<in> the (CompFun A T) \\<and>\n                          S' \\<in> States SA}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_ChiRel [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow> \n   ChiRel (A [++] (S,SA)) = { (T,T') . T = S \\<and> T' \\<in> States SA } \\<union> (ChiRel A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> ChiRel (A [++] (S, SA)) =\n                      {(T, T'). T = S \\<and> T' \\<in> States SA} \\<union>\n                      ChiRel A", "apply (unfold ChiRel_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> {(Sa, S').\n                       Sa \\<in> HAStates (A [++] (S, SA)) \\<and>\n                       S' \\<in> HAStates (A [++] (S, SA)) \\<and>\n                       S' \\<in> Chi (A [++] (S, SA)) Sa} =\n                      {(T, T'). T = S \\<and> T' \\<in> States SA} \\<union>\n                      {(S, S').\n                       S \\<in> HAStates A \\<and>\n                       S' \\<in> HAStates A \\<and> S' \\<in> Chi A S}", "apply (simp add: AddSA_HAStates)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> {(Sa, S').\n                       (Sa \\<in> HAStates A \\<or> Sa \\<in> States SA) \\<and>\n                       (S' \\<in> HAStates A \\<or> S' \\<in> States SA) \\<and>\n                       S' \\<in> Chi (A [++] (S, SA)) Sa} =\n                      {S} \\<times> States SA \\<union>\n                      {(S, S').\n                       S \\<in> HAStates A \\<and>\n                       S' \\<in> HAStates A \\<and> S' \\<in> Chi A S}", "apply safe"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> HAStates A\nA total of 13 subgoals...", "apply (rename_tac T U)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; T \\<notin> {}; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> HAStates A\nA total of 13 subgoals...", "apply (case_tac \"T \\<in> States SA\")"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; T \\<notin> {}; T \\<noteq> S;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; T \\<notin> {}; T \\<noteq> S;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> a \\<in> HAStates A\nA total of 14 subgoals...", "apply simp"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; T \\<notin> {}; T \\<noteq> S;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> HAStates A\nA total of 13 subgoals...", "apply simp"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi A a\nA total of 12 subgoals...", "apply (rename_tac T U)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; U \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi A a\nA total of 12 subgoals...", "apply (case_tac \"T \\<noteq> S\")"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; U \\<notin> States SA; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; U \\<notin> States SA;\n        \\<not> T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> HAStates A\nA total of 13 subgoals...", "apply (case_tac \"T \\<in>  States SA\")"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; U \\<notin> States SA; T \\<noteq> S;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; U \\<notin> States SA; T \\<noteq> S;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 3. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; U \\<notin> States SA;\n        \\<not> T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> a \\<in> HAStates A\nA total of 14 subgoals...", "apply simp"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; U \\<notin> States SA; T \\<noteq> S;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; U \\<notin> States SA;\n        \\<not> T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> HAStates A\nA total of 13 subgoals...", "apply simp"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> HAStates A; U \\<notin> States SA;\n        \\<not> T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi A a\nA total of 12 subgoals...", "apply simp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply (rename_tac T U)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply (case_tac \"T \\<in>  States SA\")"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi A a\nA total of 12 subgoals...", "apply simp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply simp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply (cut_tac A=A and T=T in Chi_HAStates)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> HAStates A\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA;\n        Chi A T \\<subseteq> HAStates A\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi A a\nA total of 12 subgoals...", "apply fast"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA;\n        Chi A T \\<subseteq> HAStates A\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply (case_tac \"T \\<in> States SA\")"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA; Chi A T \\<subseteq> HAStates A;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA; Chi A T \\<subseteq> HAStates A;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi A a\nA total of 12 subgoals...", "apply simp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA; Chi A T \\<subseteq> HAStates A;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply simp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply (cut_tac A=A and T=T in Chi_HAStates)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> HAStates A\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA;\n        Chi A T \\<subseteq> HAStates A\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi A a\nA total of 12 subgoals...", "apply fast"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi A T; T \\<in> HAStates A; U \\<in> States SA;\n        T \\<noteq> S; T \\<notin> States SA;\n        Chi A T \\<subseteq> HAStates A\\<rbrakk>\n       \\<Longrightarrow> U \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply fast"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> HAStates A;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         a \\<in> HAStates A; b \\<in> HAStates A; b \\<in> Chi A a\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) a", "apply (rename_tac T U)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         a \\<in> HAStates A; b \\<in> HAStates A; b \\<in> Chi A a\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) a", "apply (case_tac \"T \\<noteq> S\")"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S;\n        T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S;\n        \\<not> T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply (case_tac \"T \\<in> States SA\")"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S; T \\<noteq> S;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S; T \\<noteq> S;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 3. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S;\n        \\<not> T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n         b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi A a\nA total of 12 subgoals...", "apply simp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S; T \\<noteq> S;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S;\n        \\<not> T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         b \\<in> States SA\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\nA total of 11 subgoals...", "apply simp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> HAStates A;\n        U \\<in> States SA; T \\<notin> {}; T \\<noteq> S;\n        \\<not> T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> U \\<in> Chi A T\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         a \\<in> HAStates A; b \\<in> HAStates A; b \\<in> Chi A a\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) a", "apply simp"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        a \\<in> HAStates A; b \\<in> HAStates A; b \\<in> Chi A a\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) a", "apply (rename_tac T U)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> States SA;\n        U \\<in> HAStates A; T \\<notin> {}; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> T \\<in> HAStates A\n 2. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        a \\<in> HAStates A; b \\<in> HAStates A; b \\<in> Chi A a\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) a", "apply (case_tac \"T \\<in>  States SA\")"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> States SA;\n        U \\<in> HAStates A; T \\<notin> {}; T \\<noteq> S;\n        T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> HAStates A\n 2. \\<And>T U.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        U \\<in> Chi (A [++] (S, SA)) T; T \\<in> States SA;\n        U \\<in> HAStates A; T \\<notin> {}; T \\<noteq> S;\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> T \\<in> HAStates A\n 3. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 4. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 5. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> HAStates A; b \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 6. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> a \\<in> HAStates A\n 7. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> HAStates A\n 8. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> Chi (A [++] (S, SA)) a; a \\<in> States SA;\n        b \\<in> States SA; a \\<notin> {}; a \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi A a\n 9. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        b \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) S\n 10. \\<And>a b.\n        \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n         a \\<in> HAStates A; b \\<in> HAStates A; b \\<in> Chi A a\\<rbrakk>\n        \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) a", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        a \\<in> HAStates A; b \\<in> HAStates A; b \\<in> Chi A a\\<rbrakk>\n       \\<Longrightarrow> b \\<in> Chi (A [++] (S, SA)) a", "apply (metis AddSA_Chi AddSA_Chi3 Int_iff Un_iff empty_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma help_InitConf:\n  \"\\<lbrakk>States SA \\<inter> HAStates A = {} \\<rbrakk> \\<Longrightarrow> {p. fst p \\<noteq> InitState SA \\<and> snd p \\<noteq> InitState SA \\<and> \n       p \\<in>  insert (InitState SA) (HAInitStates A) \\<times> insert (InitState SA) (HAInitStates A) \\<and>  \n       (p \\<in>  {S} \\<times> States SA \\<or>  p \\<in>  ChiRel A)} = \n   (HAInitStates A \\<times> HAInitStates A \\<inter>  ChiRel A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States SA \\<inter> HAStates A = {} \\<Longrightarrow>\n    {p. fst p \\<noteq> InitState SA \\<and>\n        snd p \\<noteq> InitState SA \\<and>\n        p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                insert (InitState SA) (HAInitStates A) \\<and>\n        (p \\<in> {S} \\<times> States SA \\<or> p \\<in> ChiRel A)} =\n    HAInitStates A \\<times> HAInitStates A \\<inter> ChiRel A", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (InitState SA, b) \\<in> ChiRel A; InitState SA \\<in> HAInitStates A;\n        b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (a, InitState SA) \\<in> ChiRel A; a \\<in> HAInitStates A;\n        InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (InitState SA, b) \\<in> ChiRel A; InitState SA \\<in> HAInitStates A;\n        b \\<in> HAInitStates A; InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (a, InitState SA) \\<in> ChiRel A; a \\<in> HAInitStates A;\n        InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac A=A in HAInitStates_HAStates, fast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (a, InitState SA) \\<in> ChiRel A; a \\<in> HAInitStates A;\n        InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (a, InitState SA) \\<in> ChiRel A; a \\<in> HAInitStates A;\n        InitState SA \\<in> HAInitStates A;\n        InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac A=A in HAInitStates_HAStates, fast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_InitConf [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<in> InitConf A \\<rbrakk> \\<Longrightarrow> \n    InitConf (A [++] (S,SA)) = insert (InitState SA) (InitConf A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> InitConf A\\<rbrakk>\n    \\<Longrightarrow> InitConf (A [++] (S, SA)) =\n                      insert (InitState SA) (InitConf A)", "apply (frule InitConf_HAStates2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> InitConf A;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> InitConf (A [++] (S, SA)) =\n                      insert (InitState SA) (InitConf A)", "apply (unfold InitConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     S \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n              ChiRel A)\\<^sup>* ``\n             {HAInitState A};\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitStates (A [++] (S, SA)) \\<times>\n                       HAInitStates (A [++] (S, SA)) \\<inter>\n                       ChiRel (A [++] (S, SA)))\\<^sup>* ``\n                      {HAInitState (A [++] (S, SA))} =\n                      insert (InitState SA)\n                       ((HAInitStates A \\<times> HAInitStates A \\<inter>\n                         ChiRel A)\\<^sup>* ``\n                        {HAInitState A})", "apply (simp del: insert_Times_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (insert (InitState SA) (HAInitStates A) \\<times>\n                       insert (InitState SA) (HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union>\n                        ChiRel A))\\<^sup>* ``\n                      {HAInitState A} =\n                      insert (InitState SA)\n                       ((HAInitStates A \\<times> HAInitStates A \\<inter>\n                         ChiRel A)\\<^sup>* ``\n                        {HAInitState A})", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        x \\<noteq> InitState SA\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*\n 3. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (insert (InitState SA, InitState SA)\n                                 (HAInitStates A \\<times>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<union>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<times>\n                                  HAInitStates A) \\<inter>\n                                ({S} \\<times> States SA \\<union>\n                                 ChiRel A))\\<^sup>*", "apply (rename_tac T)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*\n 3. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (insert (InitState SA, InitState SA)\n                                 (HAInitStates A \\<times>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<union>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<times>\n                                  HAInitStates A) \\<inter>\n                                ({S} \\<times> States SA \\<union>\n                                 ChiRel A))\\<^sup>*", "apply (case_tac \"T=S\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T = S\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*\n 4. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (insert (InitState SA, InitState SA)\n                                 (HAInitStates A \\<times>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<union>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<times>\n                                  HAInitStates A) \\<inter>\n                                ({S} \\<times> States SA \\<union>\n                                 ChiRel A))\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*\n 3. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (insert (InitState SA, InitState SA)\n                                 (HAInitStates A \\<times>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<union>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<times>\n                                  HAInitStates A) \\<inter>\n                                ({S} \\<times> States SA \\<union>\n                                 ChiRel A))\\<^sup>*", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (insert (InitState SA, InitState SA)\n                                 (HAInitStates A \\<times>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<union>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<times>\n                                  HAInitStates A) \\<inter>\n                                ({S} \\<times> States SA \\<union>\n                                 ChiRel A))\\<^sup>*\n 2. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (rule_tac R=\"(HAInitStates A) \\<times> (HAInitStates A) \\<inter> ChiRel A\" in trancl_subseteq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> HAInitStates A \\<times> HAInitStates A \\<inter>\n                         ChiRel A\n                         \\<subseteq> insert (InitState SA, InitState SA)\n(HAInitStates A \\<times> insert (InitState SA) (HAInitStates A) \\<union>\n insert (InitState SA) (HAInitStates A) \\<times> HAInitStates A) \\<inter>\n                                     ({S} \\<times> States SA \\<union>\nChiRel A)\n 2. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (rotate_tac 3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (frule trancl_collect)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> ?S47 T\n                         \\<notin> Domain\n                                   (insert (InitState SA, InitState SA)\n                                     (HAInitStates A \\<times>\ninsert (InitState SA) (HAInitStates A) \\<union>\ninsert (InitState SA) (HAInitStates A) \\<times> HAInitStates A) \\<inter>\n                                    ({S} \\<times> States SA \\<union>\n                                     ChiRel A))\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> T \\<noteq> ?S47 T\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> ?S47 T \\<and>\n                  snd p \\<noteq> ?S47 T \\<and>\n                  p \\<in> insert (InitState SA, InitState SA)\n                           (HAInitStates A \\<times>\n                            insert (InitState SA) (HAInitStates A) \\<union>\n                            insert (InitState SA) (HAInitStates A) \\<times>\n                            HAInitStates A) \\<inter>\n                          ({S} \\<times> States SA \\<union>\n                           ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> T \\<noteq> ?S47 T\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> ?S47 T\n                         \\<notin> Domain\n                                   (insert (InitState SA, InitState SA)\n                                     (HAInitStates A \\<times>\ninsert (InitState SA) (HAInitStates A) \\<union>\ninsert (InitState SA) (HAInitStates A) \\<times> HAInitStates A) \\<inter>\n                                    ({S} \\<times> States SA \\<union>\n                                     ChiRel A))\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> ?S47 T \\<and>\n                  snd p \\<noteq> ?S47 T \\<and>\n                  p \\<in> insert (InitState SA, InitState SA)\n                           (HAInitStates A \\<times>\n                            insert (InitState SA) (HAInitStates A) \\<union>\n                            insert (InitState SA) (HAInitStates A) \\<times>\n                            HAInitStates A) \\<inter>\n                          ({S} \\<times> States SA \\<union>\n                           ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> InitState SA\n                         \\<notin> Domain\n                                   (insert (InitState SA, InitState SA)\n                                     (HAInitStates A \\<times>\ninsert (InitState SA) (HAInitStates A) \\<union>\ninsert (InitState SA) (HAInitStates A) \\<times> HAInitStates A) \\<inter>\n                                    ({S} \\<times> States SA \\<union>\n                                     ChiRel A))\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  p \\<in> insert (InitState SA, InitState SA)\n                           (HAInitStates A \\<times>\n                            insert (InitState SA) (HAInitStates A) \\<union>\n                            insert (InitState SA) (HAInitStates A) \\<times>\n                            HAInitStates A) \\<inter>\n                          ({S} \\<times> States SA \\<union>\n                           ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        InitState SA \\<in> HAInitStates A; b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 5. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        InitState SA \\<in> HAInitStates A; b \\<in> HAInitStates A;\n        InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 5. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (frule ChiRel_HAStates)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        InitState SA \\<in> HAInitStates A; b \\<in> HAInitStates A;\n        InitState SA \\<in> States SA; InitState SA \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 5. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (frule ChiRel_HAStates)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAStates A;\n        InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (frule ChiRel_HAStates)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A;\n        InitState SA \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A;\n        InitState SA \\<in> HAStates A; InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (subst help_InitConf [THEN sym])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> States (?SA206 T) \\<inter> HAStates A = {}\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> {p. fst p \\<noteq>\n                                   InitState (?SA206 T) \\<and>\n                                   snd p \\<noteq>\n                                   InitState (?SA206 T) \\<and>\n                                   p \\<in> insert (InitState (?SA206 T))\n      (HAInitStates A) \\<times>\n     insert (InitState (?SA206 T)) (HAInitStates A) \\<and>\n                                   (p \\<in> {?S206 T} \\<times>\n      States (?SA206 T) \\<or>\n                                    p \\<in> ChiRel A)}\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; T \\<noteq> S;\n        States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                                   snd p \\<noteq> InitState SA \\<and>\n                                   p \\<in> insert (InitState SA)\n      (HAInitStates A) \\<times>\n     insert (InitState SA) (HAInitStates A) \\<and>\n                                   (p \\<in> {?S206 T} \\<times>\n      States SA \\<or>\n                                    p \\<in> ChiRel A)}\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (rule_tac b=S in rtrancl_into_rtrancl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, S)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (S, InitState SA)\n                      \\<in> insert (InitState SA, InitState SA)\n                             (HAInitStates A \\<times>\n                              insert (InitState SA)\n                               (HAInitStates A) \\<union>\n                              insert (InitState SA)\n                               (HAInitStates A) \\<times>\n                              HAInitStates A) \\<inter>\n                            ({S} \\<times> States SA \\<union> ChiRel A)", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, S)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A; S \\<noteq> InitState SA;\n     S \\<notin> HAInitStates A\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A; S \\<noteq> InitState SA;\n     S \\<notin> HAInitStates A\\<rbrakk>\n    \\<Longrightarrow> InitState SA \\<in> HAInitStates A", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A; S \\<noteq> InitState SA;\n     S \\<notin> HAInitStates A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, S)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A; S \\<noteq> InitState SA;\n     S \\<notin> HAInitStates A\\<rbrakk>\n    \\<Longrightarrow> InitState SA \\<in> HAInitStates A", "apply (erule rtranclE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     S \\<noteq> InitState SA; S \\<notin> HAInitStates A;\n     HAInitState A = S\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>y.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        S \\<noteq> InitState SA; S \\<notin> HAInitStates A;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, S)\n        \\<in> HAInitStates A \\<times> HAInitStates A \\<inter>\n              ChiRel A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, S)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A; S \\<noteq> InitState SA;\n     S \\<notin> HAInitStates A\\<rbrakk>\n    \\<Longrightarrow> InitState SA \\<in> HAInitStates A", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, S)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A; S \\<noteq> InitState SA;\n     S \\<notin> HAInitStates A\\<rbrakk>\n    \\<Longrightarrow> InitState SA \\<in> HAInitStates A", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A; S \\<noteq> InitState SA;\n     S \\<notin> HAInitStates A\\<rbrakk>\n    \\<Longrightarrow> InitState SA \\<in> HAInitStates A\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, S)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (erule rtranclE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     S \\<noteq> InitState SA; S \\<notin> HAInitStates A;\n     HAInitState A = S\\<rbrakk>\n    \\<Longrightarrow> InitState SA \\<in> HAInitStates A\n 2. \\<And>y.\n       \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n        S \\<noteq> InitState SA; S \\<notin> HAInitStates A;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, S)\n        \\<in> HAInitStates A \\<times> HAInitStates A \\<inter>\n              ChiRel A\\<rbrakk>\n       \\<Longrightarrow> InitState SA \\<in> HAInitStates A\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, S)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, S)\n                      \\<in> (insert (InitState SA, InitState SA)\n                              (HAInitStates A \\<times>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<union>\n                               insert (InitState SA)\n                                (HAInitStates A) \\<times>\n                               HAInitStates A) \\<inter>\n                             ({S} \\<times> States SA \\<union>\n                              ChiRel A))\\<^sup>*", "apply (rule_tac R=\"(HAInitStates A) \\<times> (HAInitStates A) \\<inter> ChiRel A\" in trancl_subseteq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> HAInitStates A \\<times> HAInitStates A \\<inter>\n                      ChiRel A\n                      \\<subseteq> insert (InitState SA, InitState SA)\n                                   (HAInitStates A \\<times>\n                                    insert (InitState SA)\n                                     (HAInitStates A) \\<union>\n                                    insert (InitState SA)\n                                     (HAInitStates A) \\<times>\n                                    HAInitStates A) \\<inter>\n                                  ({S} \\<times> States SA \\<union> ChiRel A)\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n            ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, S)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_InitConf2 [simp]:\n \"\\<lbrakk> States SA \\<inter> HAStates A = {};\n    S \\<notin> InitConf A;\n  S \\<in> HAStates A \\<rbrakk> \\<Longrightarrow>\n  InitConf (A [++] (S,SA)) = InitConf A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<notin> InitConf A;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> InitConf (A [++] (S, SA)) = InitConf A", "apply (unfold InitConf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     S \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                 ChiRel A)\\<^sup>* ``\n                {HAInitState A};\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (HAInitStates (A [++] (S, SA)) \\<times>\n                       HAInitStates (A [++] (S, SA)) \\<inter>\n                       ChiRel (A [++] (S, SA)))\\<^sup>* ``\n                      {HAInitState (A [++] (S, SA))} =\n                      (HAInitStates A \\<times> HAInitStates A \\<inter>\n                       ChiRel A)\\<^sup>* ``\n                      {HAInitState A}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A\\<rbrakk>\n    \\<Longrightarrow> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union>\n                        ChiRel A))\\<^sup>* ``\n                      {HAInitState A} =\n                      (HAInitStates A \\<times> HAInitStates A \\<inter>\n                       ChiRel A)\\<^sup>* ``\n                      {HAInitState A}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (insert (InitState SA, InitState SA)\n                                 (HAInitStates A \\<times>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<union>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<times>\n                                  HAInitStates A) \\<inter>\n                                ({S} \\<times> States SA \\<union>\n                                 ChiRel A))\\<^sup>*", "apply (rename_tac T)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (insert (InitState SA, InitState SA)\n                                 (HAInitStates A \\<times>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<union>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<times>\n                                  HAInitStates A) \\<inter>\n                                ({S} \\<times> States SA \\<union>\n                                 ChiRel A))\\<^sup>*", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (insert (InitState SA, InitState SA)\n                                 (HAInitStates A \\<times>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<union>\n                                  insert (InitState SA)\n                                   (HAInitStates A) \\<times>\n                                  HAInitStates A) \\<inter>\n                                ({S} \\<times> States SA \\<union>\n                                 ChiRel A))\\<^sup>*\n 2. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply (rule_tac R=\"(HAInitStates A) \\<times> (HAInitStates A) \\<inter> ChiRel A\" in trancl_subseteq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> HAInitStates A \\<times> HAInitStates A \\<inter>\n                         ChiRel A\n                         \\<subseteq> insert (InitState SA, InitState SA)\n(HAInitStates A \\<times> insert (InitState SA) (HAInitStates A) \\<union>\n insert (InitState SA) (HAInitStates A) \\<times> HAInitStates A) \\<inter>\n                                     ({S} \\<times> States SA \\<union>\nChiRel A)\n 2. \\<And>x.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, x)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, x)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply (case_tac \"T=InitState SA\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T = InitState SA\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*\n 2. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (rotate_tac 3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (frule trancl_collect)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> ?S43 T\n                         \\<notin> Domain\n                                   (insert (InitState SA, InitState SA)\n                                     (HAInitStates A \\<times>\ninsert (InitState SA) (HAInitStates A) \\<union>\ninsert (InitState SA) (HAInitStates A) \\<times> HAInitStates A) \\<inter>\n                                    ({S} \\<times> States SA \\<union>\n                                     ChiRel A))\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> T \\<noteq> ?S43 T\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> ?S43 T \\<and>\n                  snd p \\<noteq> ?S43 T \\<and>\n                  p \\<in> insert (InitState SA, InitState SA)\n                           (HAInitStates A \\<times>\n                            insert (InitState SA) (HAInitStates A) \\<union>\n                            insert (InitState SA) (HAInitStates A) \\<times>\n                            HAInitStates A) \\<inter>\n                          ({S} \\<times> States SA \\<union>\n                           ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> T \\<noteq> ?S43 T\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> ?S43 T\n                         \\<notin> Domain\n                                   (insert (InitState SA, InitState SA)\n                                     (HAInitStates A \\<times>\ninsert (InitState SA) (HAInitStates A) \\<union>\ninsert (InitState SA) (HAInitStates A) \\<times> HAInitStates A) \\<inter>\n                                    ({S} \\<times> States SA \\<union>\n                                     ChiRel A))\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> ?S43 T \\<and>\n                  snd p \\<noteq> ?S43 T \\<and>\n                  p \\<in> insert (InitState SA, InitState SA)\n                           (HAInitStates A \\<times>\n                            insert (InitState SA) (HAInitStates A) \\<union>\n                            insert (InitState SA) (HAInitStates A) \\<times>\n                            HAInitStates A) \\<inter>\n                          ({S} \\<times> States SA \\<union>\n                           ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> InitState SA\n                         \\<notin> Domain\n                                   (insert (InitState SA, InitState SA)\n                                     (HAInitStates A \\<times>\ninsert (InitState SA) (HAInitStates A) \\<union>\ninsert (InitState SA) (HAInitStates A) \\<times> HAInitStates A) \\<inter>\n                                    ({S} \\<times> States SA \\<union>\n                                     ChiRel A))\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  p \\<in> insert (InitState SA, InitState SA)\n                           (HAInitStates A \\<times>\n                            insert (InitState SA) (HAInitStates A) \\<union>\n                            insert (InitState SA) (HAInitStates A) \\<times>\n                            HAInitStates A) \\<inter>\n                          ({S} \\<times> States SA \\<union>\n                           ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        InitState SA \\<in> HAInitStates A; b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 5. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        InitState SA \\<in> HAInitStates A; b \\<in> HAInitStates A;\n        InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 5. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (frule ChiRel_HAStates)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        InitState SA \\<in> HAInitStates A; b \\<in> HAInitStates A;\n        InitState SA \\<in> States SA; InitState SA \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 5. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (frule ChiRel_HAStates)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> States SA;\n        InitState SA \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A;\n        InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (cut_tac A=A in HAInitStates_HAStates)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T b.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A; (InitState SA, b) \\<in> ChiRel A;\n        b \\<in> HAInitStates A; InitState SA \\<in> HAInitStates A;\n        InitState SA \\<in> States SA;\n        HAInitStates A \\<subseteq> HAStates A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (subst help_InitConf [THEN sym])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> States (?SA240 T) \\<inter> HAStates A = {}\n 2. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> {p. fst p \\<noteq>\n                                   InitState (?SA240 T) \\<and>\n                                   snd p \\<noteq>\n                                   InitState (?SA240 T) \\<and>\n                                   p \\<in> insert (InitState (?SA240 T))\n      (HAInitStates A) \\<times>\n     insert (InitState (?SA240 T)) (HAInitStates A) \\<and>\n                                   (p \\<in> {?S240 T} \\<times>\n      States (?SA240 T) \\<or>\n                                    p \\<in> ChiRel A)}\\<^sup>*\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>T.\n       \\<lbrakk>(HAInitState A, T)\n                \\<in> (insert (InitState SA, InitState SA)\n                        (HAInitStates A \\<times>\n                         insert (InitState SA) (HAInitStates A) \\<union>\n                         insert (InitState SA) (HAInitStates A) \\<times>\n                         HAInitStates A) \\<inter>\n                       ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        T \\<noteq> InitState SA; States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, T)\n        \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                  snd p \\<noteq> InitState SA \\<and>\n                  (p = (InitState SA, InitState SA) \\<or>\n                   p \\<in> HAInitStates A \\<times>\n                           insert (InitState SA) (HAInitStates A) \\<or>\n                   p \\<in> insert (InitState SA) (HAInitStates A) \\<times>\n                           HAInitStates A) \\<and>\n                  (p \\<in> {S} \\<times> States SA \\<or>\n                   p \\<in> ChiRel A)}\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, T)\n                         \\<in> {p. fst p \\<noteq> InitState SA \\<and>\n                                   snd p \\<noteq> InitState SA \\<and>\n                                   p \\<in> insert (InitState SA)\n      (HAInitStates A) \\<times>\n     insert (InitState SA) (HAInitStates A) \\<and>\n                                   (p \\<in> {?S240 T} \\<times>\n      States SA \\<or>\n                                    p \\<in> ChiRel A)}\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, InitState SA)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*", "apply (rule_tac b=\"InitState SA\" in rtrancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (?a265, InitState SA) \\<in> ?r265\\<^sup>*\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {};\n     (HAInitState A, S)\n     \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n     S \\<in> HAStates A;\n     (HAInitState A, InitState SA)\n     \\<in> (insert (InitState SA, InitState SA)\n             (HAInitStates A \\<times>\n              insert (InitState SA) (HAInitStates A) \\<union>\n              insert (InitState SA) (HAInitStates A) \\<times>\n              HAInitStates A) \\<inter>\n            ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> (HAInitState A, ?a265)\n                      \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                             ChiRel A)\\<^sup>*\n 3. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (?a265, y) \\<in> ?r265\\<^sup>*; (y, z) \\<in> ?r265;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, InitState SA) \\<in> ChiRel A; y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, InitState SA)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<And>z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, InitState SA)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (InitState SA, z) \\<in> ChiRel A; z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply (frule ChiRel_HAStates2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, InitState SA) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        InitState SA \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, InitState SA)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<And>z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, InitState SA)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (InitState SA, z) \\<in> ChiRel A; z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, InitState SA) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        InitState SA \\<in> HAStates A; InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, InitState SA)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<And>z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, InitState SA)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (InitState SA, z) \\<in> ChiRel A; z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 4. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, InitState SA)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (InitState SA, z) \\<in> ChiRel A; z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, InitState SA)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (InitState SA, z) \\<in> ChiRel A; z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply (frule ChiRel_HAStates)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, InitState SA)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (InitState SA, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        InitState SA \\<in> HAStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply (cut_tac A=SA in InitState_States)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, InitState SA)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (InitState SA, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        InitState SA \\<in> HAStates A; InitState SA \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 3. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply (rule rtrancl_into_rtrancl)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, ?b400 y z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; y \\<in> HAInitStates A;\n        z \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (?b400 y z, z)\n                         \\<in> HAInitStates A \\<times>\n                               HAInitStates A \\<inter>\n                               ChiRel A\n 3. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*", "apply (rule rtrancl_into_rtrancl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (HAInitState A, ?b404 y z)\n                         \\<in> (HAInitStates A \\<times>\n                                HAInitStates A \\<inter>\n                                ChiRel A)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>States SA \\<inter> HAStates A = {};\n        (HAInitState A, S)\n        \\<notin> (HAInitStates A \\<times> HAInitStates A \\<inter>\n                  ChiRel A)\\<^sup>*;\n        S \\<in> HAStates A;\n        (HAInitState A, InitState SA)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (insert (InitState SA, InitState SA)\n                (HAInitStates A \\<times>\n                 insert (InitState SA) (HAInitStates A) \\<union>\n                 insert (InitState SA) (HAInitStates A) \\<times>\n                 HAInitStates A) \\<inter>\n               ({S} \\<times> States SA \\<union> ChiRel A))\\<^sup>*;\n        (HAInitState A, y)\n        \\<in> (HAInitStates A \\<times> HAInitStates A \\<inter>\n               ChiRel A)\\<^sup>*;\n        (y, z) \\<in> ChiRel A; z \\<in> HAInitStates A;\n        y \\<in> HAInitStates A\\<rbrakk>\n       \\<Longrightarrow> (?b404 y z, z)\n                         \\<in> HAInitStates A \\<times>\n                               HAInitStates A \\<inter>\n                               ChiRel A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Theorems for Calculating Wellformedness of HA\""], ["", "lemma PseudoHA_HAStates_IFF:\n \"(States SA) = X  \\<Longrightarrow> (HAStates (PseudoHA SA D)) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States SA = X \\<Longrightarrow> HAStates (PseudoHA SA D) = X", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_SAs_IFF:\n \"\\<lbrakk> States SA \\<inter> HAStates HA = {};\n    S \\<in> HAStates HA;\n    (SAs HA) = X \\<rbrakk> \\<Longrightarrow> (SAs (HA [++] (S, SA))) = (insert SA X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     SAs HA = X\\<rbrakk>\n    \\<Longrightarrow> SAs (HA [++] (S, SA)) = insert SA X", "apply (subst AddSA_SAs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     SAs HA = X\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> HAStates HA = {}\n 2. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     SAs HA = X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates HA\n 3. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     SAs HA = X\\<rbrakk>\n    \\<Longrightarrow> insert SA (SAs HA) = insert SA X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_Events_IFF:\n \"\\<lbrakk> States SA \\<inter> HAStates HA = {}; \n    S \\<in> HAStates HA; \n    (HAEvents HA) = HAE;\n    (SAEvents SA) = SAE;  \n    (HAE \\<union> SAE) = X \\<rbrakk> \\<Longrightarrow> (HAEvents (HA [++] (S, SA))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAEvents HA = HAE; SAEvents SA = SAE; HAE \\<union> SAE = X\\<rbrakk>\n    \\<Longrightarrow> HAEvents (HA [++] (S, SA)) = X", "apply (subst AddSA_Events)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAEvents HA = HAE; SAEvents SA = SAE; HAE \\<union> SAE = X\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> HAStates HA = {}\n 2. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAEvents HA = HAE; SAEvents SA = SAE; HAE \\<union> SAE = X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates HA\n 3. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAEvents HA = HAE; SAEvents SA = SAE; HAE \\<union> SAE = X\\<rbrakk>\n    \\<Longrightarrow> HAEvents HA \\<union> SAEvents SA = X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_IFF:\n \"\\<lbrakk> States SA \\<inter>  HAStates HA = {};\n    S \\<in> HAStates HA;\n    (CompFun HA) = HAG;\n    (HAG [f+] (S, SA)) = X \\<rbrakk> \\<Longrightarrow> (CompFun (HA [++] (S, SA))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     CompFun HA = HAG; (HAG [f+] (S, SA)) = X\\<rbrakk>\n    \\<Longrightarrow> CompFun (HA [++] (S, SA)) = X", "apply (subst AddSA_CompFun)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     CompFun HA = HAG; (HAG [f+] (S, SA)) = X\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> HAStates HA = {}\n 2. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     CompFun HA = HAG; (HAG [f+] (S, SA)) = X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates HA\n 3. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     CompFun HA = HAG; (HAG [f+] (S, SA)) = X\\<rbrakk>\n    \\<Longrightarrow> (CompFun HA [f+] (S, SA)) = X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_HAStates_IFF: \n \"\\<lbrakk> States SA \\<inter> HAStates HA = {};\n    S \\<in> HAStates HA;\n    (HAStates HA) = HAS;\n    (States SA) = SAS;\n    (HAS \\<union> SAS) = X \\<rbrakk> \\<Longrightarrow> (HAStates (HA [++] (S, SA))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAStates HA = HAS; States SA = SAS; HAS \\<union> SAS = X\\<rbrakk>\n    \\<Longrightarrow> HAStates (HA [++] (S, SA)) = X", "apply (subst AddSA_HAStates)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAStates HA = HAS; States SA = SAS; HAS \\<union> SAS = X\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> HAStates HA = {}\n 2. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAStates HA = HAS; States SA = SAS; HAS \\<union> SAS = X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates HA\n 3. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAStates HA = HAS; States SA = SAS; HAS \\<union> SAS = X\\<rbrakk>\n    \\<Longrightarrow> HAStates HA \\<union> States SA = X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_HAInitValue_IFF:\n \"\\<lbrakk> States SA \\<inter> HAStates HA = {};\n    S \\<in> HAStates HA;\n    (HAInitValue HA) = X \\<rbrakk> \\<Longrightarrow> (HAInitValue (HA [++] (S, SA))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAInitValue HA = X\\<rbrakk>\n    \\<Longrightarrow> HAInitValue (HA [++] (S, SA)) = X", "apply (subst AddSA_HAInitValue)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAInitValue HA = X\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> HAStates HA = {}\n 2. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAInitValue HA = X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates HA\n 3. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HAInitValue HA = X\\<rbrakk>\n    \\<Longrightarrow> HAInitValue HA = X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_HARoot_IFF:\n \"\\<lbrakk> States SA \\<inter> HAStates HA = {};\n    S \\<in> HAStates HA;\n    (HARoot HA) = X \\<rbrakk> \\<Longrightarrow> (HARoot (HA [++] (S, SA))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HARoot HA = X\\<rbrakk>\n    \\<Longrightarrow> HARoot (HA [++] (S, SA)) = X", "apply (subst AddSA_HARoot)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HARoot HA = X\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> HAStates HA = {}\n 2. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HARoot HA = X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates HA\n 3. \\<lbrakk>States SA \\<inter> HAStates HA = {}; S \\<in> HAStates HA;\n     HARoot HA = X\\<rbrakk>\n    \\<Longrightarrow> HARoot HA = X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_InitConf_IFF:\n \"\\<lbrakk> InitConf A = Y;\n    States SA \\<inter> HAStates A = {};\n    S \\<in> HAStates A; \n    (if S \\<in> Y then insert (InitState SA) Y else Y) = X \\<rbrakk> \\<Longrightarrow> \n    InitConf (A [++] (S,SA)) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>InitConf A = Y; States SA \\<inter> HAStates A = {};\n     S \\<in> HAStates A;\n     (if S \\<in> Y then insert (InitState SA) Y else Y) = X\\<rbrakk>\n    \\<Longrightarrow> InitConf (A [++] (S, SA)) = X", "apply (case_tac \"S \\<in> Y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>InitConf A = Y; States SA \\<inter> HAStates A = {};\n     S \\<in> HAStates A;\n     (if S \\<in> Y then insert (InitState SA) Y else Y) = X;\n     S \\<in> Y\\<rbrakk>\n    \\<Longrightarrow> InitConf (A [++] (S, SA)) = X\n 2. \\<lbrakk>InitConf A = Y; States SA \\<inter> HAStates A = {};\n     S \\<in> HAStates A;\n     (if S \\<in> Y then insert (InitState SA) Y else Y) = X;\n     S \\<notin> Y\\<rbrakk>\n    \\<Longrightarrow> InitConf (A [++] (S, SA)) = X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_ran_IFF:\n  \"\\<lbrakk> (States SA \\<inter> HAStates A) = {}; \n     S \\<in> HAStates A;\n     (insert {} (insert (insert SA (the ((CompFun A) S))) (ran (CompFun A) - {the ((CompFun A) S)}))) = X \\<rbrakk> \\<Longrightarrow>\n     ran (CompFun (A [++] (S,SA))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     insert {}\n      (insert (insert SA (the (CompFun A S)))\n        (ran (CompFun A) - {the (CompFun A S)})) =\n     X\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun (A [++] (S, SA))) = X", "apply (subst  AddSA_CompFun_ran)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     insert {}\n      (insert (insert SA (the (CompFun A S)))\n        (ran (CompFun A) - {the (CompFun A S)})) =\n     X\\<rbrakk>\n    \\<Longrightarrow> States SA \\<inter> HAStates A = {}\n 2. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     insert {}\n      (insert (insert SA (the (CompFun A S)))\n        (ran (CompFun A) - {the (CompFun A S)})) =\n     X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 3. \\<lbrakk>States SA \\<inter> HAStates A = {}; S \\<in> HAStates A;\n     insert {}\n      (insert (insert SA (the (CompFun A S)))\n        (ran (CompFun A) - {the (CompFun A S)})) =\n     X\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert (insert SA (the (CompFun A S)))\n                         (ran (CompFun A) - {the (CompFun A S)})) =\n                      X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_ran2_IFF:\n \"\\<lbrakk> (States SA1 \\<inter> HAStates A) = {}; \n    (States SA2 \\<inter> (HAStates A \\<union> States SA1)) = {};\n    S \\<in> HAStates A;\n    T \\<in> States SA1;\n    insert {} (insert {SA2} (ran (CompFun (A  [++] (S,SA1))))) = X \\<rbrakk> \\<Longrightarrow>\n    ran (CompFun ((A [++] (S,SA1)) [++] (T,SA2))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA2} (ran (CompFun (A [++] (S, SA1))))) = X\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun (A [++] (S, SA1) [++] (T, SA2))) = X", "apply (subst AddSA_CompFun_ran2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA2} (ran (CompFun (A [++] (S, SA1))))) = X\\<rbrakk>\n    \\<Longrightarrow> States SA1 \\<inter> HAStates A = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA2} (ran (CompFun (A [++] (S, SA1))))) = X\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> (HAStates A \\<union> States SA1) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA2} (ran (CompFun (A [++] (S, SA1))))) = X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA2} (ran (CompFun (A [++] (S, SA1))))) = X\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA2} (ran (CompFun (A [++] (S, SA1))))) = X\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA2} (ran (CompFun (A [++] (S, SA1))))) =\n                      X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_ran3_IFF:\n \"\\<lbrakk> (States SA1 \\<inter> HAStates A) = {};\n    (States SA2 \\<inter> (HAStates A \\<union> States SA1)) = {};\n    (States SA3 \\<inter> (HAStates A \\<union> States SA1 \\<union> States SA2)) = {};\n     S \\<in> HAStates A;\n     T \\<in> States SA1;\n     insert {} (insert {SA3,SA2} (ran (CompFun (A  [++] (S,SA1))))) = X \\<rbrakk> \\<Longrightarrow>\n     ran (CompFun ((A [++] (S,SA1)) [++] (T,SA2) [++] (T,SA3))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA3, SA2} (ran (CompFun (A [++] (S, SA1))))) =\n     X\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun\n                            (A [++] (S, SA1) [++] (T, SA2) [++] (T, SA3))) =\n                      X", "apply (subst AddSA_CompFun_ran3)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA3, SA2} (ran (CompFun (A [++] (S, SA1))))) =\n     X\\<rbrakk>\n    \\<Longrightarrow> States SA1 \\<inter> HAStates A = {}\n 2. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA3, SA2} (ran (CompFun (A [++] (S, SA1))))) =\n     X\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter> (HAStates A \\<union> States SA1) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA3, SA2} (ran (CompFun (A [++] (S, SA1))))) =\n     X\\<rbrakk>\n    \\<Longrightarrow> States SA3 \\<inter>\n                      (HAStates A \\<union> States SA1 \\<union> States SA2) =\n                      {}\n 4. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA3, SA2} (ran (CompFun (A [++] (S, SA1))))) =\n     X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> HAStates A\n 5. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA3, SA2} (ran (CompFun (A [++] (S, SA1))))) =\n     X\\<rbrakk>\n    \\<Longrightarrow> T \\<in> States SA1\n 6. \\<lbrakk>States SA1 \\<inter> HAStates A = {};\n     States SA2 \\<inter> (HAStates A \\<union> States SA1) = {};\n     States SA3 \\<inter>\n     (HAStates A \\<union> States SA1 \\<union> States SA2) =\n     {};\n     S \\<in> HAStates A; T \\<in> States SA1;\n     insert {} (insert {SA3, SA2} (ran (CompFun (A [++] (S, SA1))))) =\n     X\\<rbrakk>\n    \\<Longrightarrow> insert {}\n                       (insert {SA3, SA2}\n                         (ran (CompFun (A [++] (S, SA1))))) =\n                      X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_PseudoHA_ran_IFF:\n  \"\\<lbrakk> S \\<in> States RootSA; \n     States RootSA \\<inter> States SA = {};\n   (insert {} {{SA}}) = X \\<rbrakk> \\<Longrightarrow> \n   (ran (CompFun ((PseudoHA RootSA D) [++] (S,SA)))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<in> States RootSA; States RootSA \\<inter> States SA = {};\n     {{}, {SA}} = X\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun (PseudoHA RootSA D [++] (S, SA))) = X", "apply (subst AddSA_CompFun_PseudoHA_ran)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<in> States RootSA; States RootSA \\<inter> States SA = {};\n     {{}, {SA}} = X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States RootSA\n 2. \\<lbrakk>S \\<in> States RootSA; States RootSA \\<inter> States SA = {};\n     {{}, {SA}} = X\\<rbrakk>\n    \\<Longrightarrow> States RootSA \\<inter> States SA = {}\n 3. \\<lbrakk>S \\<in> States RootSA; States RootSA \\<inter> States SA = {};\n     {{}, {SA}} = X\\<rbrakk>\n    \\<Longrightarrow> {{}, {SA}} = X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AddSA_CompFun_PseudoHA_ran2_IFF:\n  \"\\<lbrakk> States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA;\n     (insert {} {{SA2,SA1}}) = X \\<rbrakk> \\<Longrightarrow> \n     (ran (CompFun ((PseudoHA RootSA D) [++] (S,SA1) [++] (S,SA2)))) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA; {{}, {SA2, SA1}} = X\\<rbrakk>\n    \\<Longrightarrow> ran (CompFun\n                            (PseudoHA RootSA D [++] (S, SA1) [++]\n                             (S, SA2))) =\n                      X", "apply (subst AddSA_CompFun_PseudoHA_ran2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA; {{}, {SA2, SA1}} = X\\<rbrakk>\n    \\<Longrightarrow> States SA1 \\<inter> States RootSA = {}\n 2. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA; {{}, {SA2, SA1}} = X\\<rbrakk>\n    \\<Longrightarrow> States SA2 \\<inter>\n                      (States RootSA \\<union> States SA1) =\n                      {}\n 3. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA; {{}, {SA2, SA1}} = X\\<rbrakk>\n    \\<Longrightarrow> S \\<in> States RootSA\n 4. \\<lbrakk>States SA1 \\<inter> States RootSA = {};\n     States SA2 \\<inter> (States RootSA \\<union> States SA1) = {};\n     S \\<in> States RootSA; {{}, {SA2, SA1}} = X\\<rbrakk>\n    \\<Longrightarrow> {{}, {SA2, SA1}} = X", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "ML \\<open>\n\nval AddSA_SAs_IFF = @{thm AddSA_SAs_IFF};\nval AddSA_Events_IFF = @{thm AddSA_Events_IFF};\nval AddSA_CompFun_IFF = @{thm AddSA_CompFun_IFF};\nval AddSA_HAStates_IFF = @{thm AddSA_HAStates_IFF};\nval PseudoHA_HAStates_IFF = @{thm PseudoHA_HAStates_IFF};\nval AddSA_HAInitValue_IFF = @{thm AddSA_HAInitValue_IFF};\nval AddSA_CompFun_ran_IFF = @{thm AddSA_CompFun_ran_IFF};\nval AddSA_HARoot_IFF = @{thm AddSA_HARoot_IFF};\nval insert_inter = @{thm insert_inter};\nval insert_notmem = @{thm insert_notmem};\nval PseudoHA_CompFun = @{thm PseudoHA_CompFun};\nval PseudoHA_Events = @{thm PseudoHA_Events};\nval PseudoHA_SAs = @{thm PseudoHA_SAs};\nval PseudoHA_HARoot = @{thm PseudoHA_HARoot};\nval PseudoHA_HAInitValue = @{thm PseudoHA_HAInitValue};\nval PseudoHA_CompFun_ran = @{thm PseudoHA_CompFun_ran};\nval Un_empty_right = @{thm Un_empty_right};\nval insert_union = @{thm insert_union};\n\n\nfun wellformed_tac ctxt L i =\n  FIRST[resolve_tac ctxt [AddSA_SAs_IFF] i,\n        resolve_tac ctxt [AddSA_Events_IFF] i,\n        resolve_tac ctxt [AddSA_CompFun_IFF] i,\n        resolve_tac ctxt [AddSA_HAStates_IFF] i,\n        resolve_tac ctxt [PseudoHA_HAStates_IFF] i,\n        resolve_tac ctxt [AddSA_HAInitValue_IFF] i,\n        resolve_tac ctxt [AddSA_HARoot_IFF] i,\n        resolve_tac ctxt [AddSA_CompFun_ran_IFF] i,\n        resolve_tac ctxt [insert_inter] i,\n        resolve_tac ctxt [insert_notmem] i,\n        CHANGED (simp_tac (put_simpset HOL_basic_ss ctxt addsimps\n           [PseudoHA_HARoot, PseudoHA_CompFun, PseudoHA_CompFun_ran,PseudoHA_Events,PseudoHA_SAs,insert_union,\n            PseudoHA_HAInitValue,Un_empty_right]@ L) i),\n        fast_tac ctxt i,\n        CHANGED (simp_tac ctxt i)];\n\\<close>"], ["", "method_setup wellformed  = \\<open>Attrib.thms >> (fn thms => fn ctxt => (METHOD (fn facts => \n                                       (HEADGOAL (wellformed_tac ctxt (facts @ thms))))))\\<close>"], ["", "end"]]}