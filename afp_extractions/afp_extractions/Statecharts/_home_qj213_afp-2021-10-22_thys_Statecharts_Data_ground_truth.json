{"file_name": "/home/qj213/afp-2021-10-22/thys/Statecharts/Data.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Statecharts", "problem_names": ["lemma Data_EmptySet: \n    \"([@ t. True], Abs_dataspace [UNIV])\\<in> { (L,D) | L D. Data L D }\"", "lemma Rep_data_tuple:\n  \"Rep_data D = (DataValue D, DataSpace D)\"", "lemma Rep_data_select: \n  \"(DataValue D, DataSpace D) \\<in> data\"", "lemma Data_select:\n  \"Data (DataValue D) (DataSpace D)\"", "lemma length_DataValue_PartNum [simp]: \n  \"length (DataValue D) = PartNum (Data.DataSpace D)\"", "lemma DataValue_PartDom [simp]:\n  \"i < PartNum (Data.DataSpace D) \\<Longrightarrow>\n   DataValue D ! i \\<in> PartDom (Data.DataSpace D) i\"", "lemma DataPart_PartDom [simp]:\n  \"i < PartNum (Data.DataSpace d) \\<longrightarrow> (d !P! i) \\<in> ((Data.DataSpace d) !D! i)\"", "lemma PData_EmptySet:\n    \"([Some (@ t. True)], Abs_dataspace [UNIV]) \\<in> { (L,D) | L D. PData L D }\"", "lemma Rep_pdata_tuple:\n  \"Rep_pdata D = (PDataValue D, PDataSpace D)\"", "lemma Rep_pdata_select:\n  \"(PDataValue D, PDataSpace D) \\<in> pdata\"", "lemma PData_select: \n  \"PData (PDataValue D) (PDataSpace D)\"", "lemma PData_DefaultPData [simp]:\n   \"PData (replicate (PartNum D) None) D\"", "lemma pdata_DefaultPData [simp]:\n   \"(replicate (PartNum D) None, D) \\<in> pdata \"", "lemma PDataSpace_DefaultPData [simp]:\n   \"PDataSpace (DefaultPData D) = D\"", "lemma length_PartNum_PData [simp]:\n  \"length (PDataValue P) = PartNum (PDataSpace P)\"", "lemma PData_Data2PData [simp]:\n  \"PData (map Some (DataValue D)) (Data.DataSpace D)\"", "lemma pdata_Data2PData [simp]:\n  \"(map Some (DataValue D), Data.DataSpace D) \\<in> pdata\"", "lemma DataSpace_Data2PData [simp]:\n  \"(PDataSpace (Data2PData D)) = (Data.DataSpace D)\"", "lemma PDataValue_Data2PData_DataValue [simp]:\n     \"(map the (PDataValue (Data2PData D))) = DataValue D\"", "lemma DataSpace_PData2Data:  \n   \"Data (map the (PDataValue D)) (PDataSpace D) \\<Longrightarrow>\n   (Data.DataSpace (PData2Data D) = (PDataSpace D))\"", "lemma PartNum_PDataValue_PartDom [simp]:\n   \"\\<lbrakk> i < PartNum (PDataSpace Q);\n      PDataValue Q ! i = Some y \\<rbrakk> \\<Longrightarrow>\n      y \\<in> PartDom (PDataSpace Q) i\"", "lemma Data_DataOverride:\n \"((PDataSpace P) = (Data.DataSpace Q)) \\<Longrightarrow>\n  Data (map OptionOverride (zip (PDataValue P) (Data.DataValue Q))) (Data.DataSpace Q)\"", "lemma data_DataOverride:\n \"((PDataSpace P) = (Data.DataSpace Q)) \\<Longrightarrow>\n   (map OptionOverride (zip (PDataValue P) (Data.DataValue Q)), Data.DataSpace Q) \\<in> data\"", "lemma DataSpace_DataOverride [simp]:\n \"((Data.DataSpace D) = (PDataSpace E)) \\<Longrightarrow>\n   Data.DataSpace (E [D+] D) = (Data.DataSpace D)\"", "lemma DataValue_DataOverride [simp]:\n \"((PDataSpace P) = (Data.DataSpace Q)) \\<Longrightarrow>\n  (DataValue (P [D+] Q)) = (map OptionOverride (zip (PDataValue P) (Data.DataValue Q)))\"", "lemma DataValue_OptionOverride_nth:\n \"\\<lbrakk> ((PDataSpace P) = (DataSpace Q));\n    i < PartNum (DataSpace Q) \\<rbrakk> \\<Longrightarrow>\n    (DataValue (P [D+] Q) ! i) = \n    OptionOverride (PDataValue P ! i, DataValue Q ! i)\"", "lemma None_OptionOverride [simp]:\n   \"(fst P) = None \\<Longrightarrow> OptionOverride P = (snd P)\"", "lemma Some_OptionOverride [simp]:\n   \"(fst P) \\<noteq> None \\<Longrightarrow> OptionOverride P = the (fst P)\""], "translations": [["", "lemma Data_EmptySet: \n    \"([@ t. True], Abs_dataspace [UNIV])\\<in> { (L,D) | L D. Data L D }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([SOME t. True], Abs_dataspace [UNIV]) \\<in> {(L, D) |L D. Data L D}", "apply (unfold Data_def PartDom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([SOME t. True], Abs_dataspace [UNIV])\n    \\<in> {(L, D) |L D.\n           length L = PartNum D \\<and>\n           (\\<forall>i\\<in>{n. n < PartNum D}.\n               L ! i \\<in> Rep_dataspace D ! i)}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME t. True) \\<in> Rep_dataspace (Abs_dataspace [UNIV]) ! 0", "apply (subst Abs_dataspace_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. [UNIV] \\<in> dataspace\n 2. (SOME t. True) \\<in> [UNIV] ! 0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  \"data =\n    { (L,D) |\n             (L::('d list))\n             (D::('d dataspace)).\n              Data L D }\""], ["", "typedef 'd data = \"data :: ('d list * 'd dataspace) set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> data", "unfolding data_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {(L, D) |L D. Data L D}", "apply (rule exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ?x \\<in> {(L, D) |L D. Data L D}", "apply (rule Data_EmptySet)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n DataValue :: \"('d data) => ('d list)\" where\n \"DataValue = fst o Rep_data\""], ["", "definition\n DataSpace :: \"('d data) => ('d dataspace)\" where\n \"DataSpace = snd o Rep_data\""], ["", "definition\n DataPart :: \"['d data, nat] => 'd\" (\"(_ !P!/ _)\" [10,11]10) where\n \"DataPart d n = (DataValue d) ! n\""], ["", "lemma Rep_data_tuple:\n  \"Rep_data D = (DataValue D, DataSpace D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_data D = (DataValue D, Data.DataSpace D)", "by (unfold DataValue_def DataSpace_def, simp)"], ["", "lemma Rep_data_select: \n  \"(DataValue D, DataSpace D) \\<in> data\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (DataValue D, Data.DataSpace D) \\<in> data", "apply (subst Rep_data_tuple [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_data D \\<in> data", "apply (rule Rep_data)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Data_select:\n  \"Data (DataValue D) (DataSpace D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Data (DataValue D) (Data.DataSpace D)", "apply (cut_tac D=D in Rep_data_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (DataValue D, Data.DataSpace D) \\<in> data \\<Longrightarrow>\n    Data (DataValue D) (Data.DataSpace D)", "apply (unfold data_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (DataValue D, Data.DataSpace D)\n    \\<in> {(L, D) |L D. Data L D} \\<Longrightarrow>\n    Data (DataValue D) (Data.DataSpace D)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma length_DataValue_PartNum [simp]: \n  \"length (DataValue D) = PartNum (Data.DataSpace D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (DataValue D) = PartNum (Data.DataSpace D)", "apply (cut_tac D=D in Data_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Data (DataValue D) (Data.DataSpace D) \\<Longrightarrow>\n    length (DataValue D) = PartNum (Data.DataSpace D)", "apply (unfold Data_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (DataValue D) = PartNum (Data.DataSpace D) \\<and>\n    (\\<forall>i\\<in>{n. n < PartNum (Data.DataSpace D)}.\n        DataValue D ! i \\<in> Data.DataSpace D !D! i) \\<Longrightarrow>\n    length (DataValue D) = PartNum (Data.DataSpace D)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DataValue_PartDom [simp]:\n  \"i < PartNum (Data.DataSpace D) \\<Longrightarrow>\n   DataValue D ! i \\<in> PartDom (Data.DataSpace D) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < PartNum (Data.DataSpace D) \\<Longrightarrow>\n    DataValue D ! i \\<in> Data.DataSpace D !D! i", "apply (cut_tac D=D in Data_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum (Data.DataSpace D);\n     Data (DataValue D) (Data.DataSpace D)\\<rbrakk>\n    \\<Longrightarrow> DataValue D ! i \\<in> Data.DataSpace D !D! i", "apply (unfold Data_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum (Data.DataSpace D);\n     length (DataValue D) = PartNum (Data.DataSpace D) \\<and>\n     (\\<forall>i\\<in>{n. n < PartNum (Data.DataSpace D)}.\n         DataValue D ! i \\<in> Data.DataSpace D !D! i)\\<rbrakk>\n    \\<Longrightarrow> DataValue D ! i \\<in> Data.DataSpace D !D! i", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DataPart_PartDom [simp]:\n  \"i < PartNum (Data.DataSpace d) \\<longrightarrow> (d !P! i) \\<in> ((Data.DataSpace d) !D! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < PartNum (Data.DataSpace d) \\<longrightarrow>\n    (d !P! i) \\<in> Data.DataSpace d !D! i", "apply (unfold DataPart_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < PartNum (Data.DataSpace d) \\<longrightarrow>\n    DataValue d ! i \\<in> Data.DataSpace d !D! i", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Partial data space assignments\\<close>"], ["", "definition\n  PData :: \"['d option list, 'd dataspace] => bool\" where\n  \"PData L D == ((length L) = (PartNum D)) \\<and> \n                (\\<forall> i \\<in> {n. n < (PartNum D)}.\n                    (L!i) \\<noteq> None \\<longrightarrow> the (L!i) \\<in> (PartDom D i))\""], ["", "lemma PData_EmptySet:\n    \"([Some (@ t. True)], Abs_dataspace [UNIV]) \\<in> { (L,D) | L D. PData L D }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([Some (SOME t. True)], Abs_dataspace [UNIV])\n    \\<in> {(L, D) |L D. PData L D}", "apply (unfold PData_def PartDom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([Some (SOME t. True)], Abs_dataspace [UNIV])\n    \\<in> {(L, D) |L D.\n           length L = PartNum D \\<and>\n           (\\<forall>i\\<in>{n. n < PartNum D}.\n               L ! i \\<noteq> None \\<longrightarrow>\n               the (L ! i) \\<in> Rep_dataspace D ! i)}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME t. True) \\<in> Rep_dataspace (Abs_dataspace [UNIV]) ! 0", "apply (subst Abs_dataspace_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. [UNIV] \\<in> dataspace\n 2. (SOME t. True) \\<in> [UNIV] ! 0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  \"pdata =\n    { (L,D) |\n             (L::('d option list))\n             (D::('d dataspace)).\n              PData L D }\""], ["", "typedef 'd pdata = \"pdata :: ('d option list * 'd dataspace) set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> pdata", "unfolding pdata_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {(L, D) |L D. PData L D}", "apply (rule exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ?x \\<in> {(L, D) |L D. PData L D}", "apply (rule PData_EmptySet)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  PDataValue :: \"('d pdata) => ('d option list)\" where\n \"PDataValue = fst o Rep_pdata\""], ["", "definition\n  PDataSpace :: \"('d pdata) => ('d dataspace)\" where\n \"PDataSpace = snd o Rep_pdata\""], ["", "definition\n  Data2PData :: \"('d data) => ('d pdata)\" where\n \"Data2PData D = (let\n                      (L,DP) = Rep_data D;\n                      OL     = map Some L\n                  in\n                      Abs_pdata (OL,DP))\""], ["", "definition\n  PData2Data :: \"('d pdata) => ('d data)\" where\n \"PData2Data D = (let\n                      (OL,DP) = Rep_pdata D;\n                       L      = map the OL\n                  in\n                      Abs_data (L,DP))\""], ["", "definition\n  DefaultPData :: \"('d dataspace) => ('d pdata)\" where\n \"DefaultPData D = Abs_pdata (replicate (PartNum D) None, D)\""], ["", "definition\n  OptionOverride :: \"('d option * 'd) => 'd\" where\n \"OptionOverride P = (if (fst P) = None then (snd P) else (the (fst P)))\""], ["", "definition\n  DataOverride :: \"['d pdata, 'd data] => 'd data\" (\"(_ [D+]/ _)\" [10,11]10) where\n \"DataOverride D1 D2 =\n                (let\n                    (L1,DP1) = Rep_pdata D1;\n                    (L2,DP2) = Rep_data D2;\n                    L        = map OptionOverride (zip L1 L2)\n                 in\n                    Abs_data (L,DP2))\""], ["", "lemma Rep_pdata_tuple:\n  \"Rep_pdata D = (PDataValue D, PDataSpace D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_pdata D = (PDataValue D, PDataSpace D)", "apply (unfold PDataValue_def PDataSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_pdata D = ((fst \\<circ> Rep_pdata) D, (snd \\<circ> Rep_pdata) D)", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Rep_pdata_select:\n  \"(PDataValue D, PDataSpace D) \\<in> pdata\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (PDataValue D, PDataSpace D) \\<in> pdata", "apply (subst Rep_pdata_tuple [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_pdata D \\<in> pdata", "apply (rule Rep_pdata)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PData_select: \n  \"PData (PDataValue D) (PDataSpace D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PData (PDataValue D) (PDataSpace D)", "apply (cut_tac D=D in Rep_pdata_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (PDataValue D, PDataSpace D) \\<in> pdata \\<Longrightarrow>\n    PData (PDataValue D) (PDataSpace D)", "apply (unfold pdata_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (PDataValue D, PDataSpace D)\n    \\<in> {(L, D) |L D. PData L D} \\<Longrightarrow>\n    PData (PDataValue D) (PDataSpace D)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>DefaultPData\\<close>\\<close>"], ["", "lemma PData_DefaultPData [simp]:\n   \"PData (replicate (PartNum D) None) D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PData (replicate (PartNum D) None) D", "apply (unfold PData_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (replicate (PartNum D) None) = PartNum D \\<and>\n    (\\<forall>i\\<in>{n. n < PartNum D}.\n        replicate (PartNum D) None ! i \\<noteq> None \\<longrightarrow>\n        the (replicate (PartNum D) None ! i) \\<in> D !D! i)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pdata_DefaultPData [simp]:\n   \"(replicate (PartNum D) None, D) \\<in> pdata \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (replicate (PartNum D) None, D) \\<in> pdata", "apply (unfold pdata_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (replicate (PartNum D) None, D) \\<in> {(L, D) |L D. PData L D}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PDataSpace_DefaultPData [simp]:\n   \"PDataSpace (DefaultPData D) = D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace (DefaultPData D) = D", "apply (unfold DataSpace_def PDataSpace_def DefaultPData_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> Rep_pdata) (Abs_pdata (replicate (PartNum D) None, D)) = D", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Rep_pdata (Abs_pdata (replicate (PartNum D) None, D))) = D", "apply (subst Abs_pdata_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (replicate (PartNum D) None, D) \\<in> pdata\n 2. snd (replicate (PartNum D) None, D) = D", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma length_PartNum_PData [simp]:\n  \"length (PDataValue P) = PartNum (PDataSpace P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (PDataValue P) = PartNum (PDataSpace P)", "apply (cut_tac D=P in Rep_pdata_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (PDataValue P, PDataSpace P) \\<in> pdata \\<Longrightarrow>\n    length (PDataValue P) = PartNum (PDataSpace P)", "apply (unfold pdata_def PData_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (PDataValue P, PDataSpace P)\n    \\<in> {(L, D) |L D.\n           length L = PartNum D \\<and>\n           (\\<forall>i\\<in>{n. n < PartNum D}.\n               L ! i \\<noteq> None \\<longrightarrow>\n               the (L ! i) \\<in> D !D! i)} \\<Longrightarrow>\n    length (PDataValue P) = PartNum (PDataSpace P)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>Data2PData\\<close>\\<close>"], ["", "lemma PData_Data2PData [simp]:\n  \"PData (map Some (DataValue D)) (Data.DataSpace D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PData (map Some (DataValue D)) (Data.DataSpace D)", "apply (unfold PData_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map Some (DataValue D)) = PartNum (Data.DataSpace D) \\<and>\n    (\\<forall>i\\<in>{n. n < PartNum (Data.DataSpace D)}.\n        map Some (DataValue D) ! i \\<noteq> None \\<longrightarrow>\n        the (map Some (DataValue D) ! i) \\<in> Data.DataSpace D !D! i)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pdata_Data2PData [simp]:\n  \"(map Some (DataValue D), Data.DataSpace D) \\<in> pdata\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map Some (DataValue D), Data.DataSpace D) \\<in> pdata", "apply (unfold pdata_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map Some (DataValue D), Data.DataSpace D)\n    \\<in> {(L, D) |L D. PData L D}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DataSpace_Data2PData [simp]:\n  \"(PDataSpace (Data2PData D)) = (Data.DataSpace D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace (Data2PData D) = Data.DataSpace D", "apply (unfold DataSpace_def PDataSpace_def Data2PData_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> Rep_pdata)\n     (case Rep_data D of (L, DP) \\<Rightarrow> Abs_pdata (map Some L, DP)) =\n    (snd \\<circ> Rep_data) D", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Rep_pdata\n          (case Rep_data D of\n           (L, DP) \\<Rightarrow> Abs_pdata (map Some L, DP))) =\n    snd (Rep_data D)", "apply (cut_tac D=D in Rep_data_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_data D = (DataValue D, Data.DataSpace D) \\<Longrightarrow>\n    snd (Rep_pdata\n          (case Rep_data D of\n           (L, DP) \\<Rightarrow> Abs_pdata (map Some L, DP))) =\n    snd (Rep_data D)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_data D = (DataValue D, Data.DataSpace D) \\<Longrightarrow>\n    snd (Rep_pdata (Abs_pdata (map Some (DataValue D), Data.DataSpace D))) =\n    Data.DataSpace D", "apply (subst Abs_pdata_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Rep_data D = (DataValue D, Data.DataSpace D) \\<Longrightarrow>\n    (map Some (DataValue D), Data.DataSpace D) \\<in> pdata\n 2. Rep_data D = (DataValue D, Data.DataSpace D) \\<Longrightarrow>\n    snd (map Some (DataValue D), Data.DataSpace D) = Data.DataSpace D", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PDataValue_Data2PData_DataValue [simp]:\n     \"(map the (PDataValue (Data2PData D))) = DataValue D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map the (PDataValue (Data2PData D)) = DataValue D", "apply (unfold DataValue_def PDataValue_def Data2PData_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map the\n     ((fst \\<circ> Rep_pdata)\n       (case Rep_data D of\n        (L, DP) \\<Rightarrow> Abs_pdata (map Some L, DP))) =\n    (fst \\<circ> Rep_data) D", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. map the\n     (fst (Rep_pdata\n            (case Rep_data D of\n             (L, DP) \\<Rightarrow> Abs_pdata (map Some L, DP)))) =\n    fst (Rep_data D)", "apply (cut_tac D=D in Rep_data_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_data D = (DataValue D, Data.DataSpace D) \\<Longrightarrow>\n    map the\n     (fst (Rep_pdata\n            (case Rep_data D of\n             (L, DP) \\<Rightarrow> Abs_pdata (map Some L, DP)))) =\n    fst (Rep_data D)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_data D = (DataValue D, Data.DataSpace D) \\<Longrightarrow>\n    map the\n     (fst (Rep_pdata\n            (Abs_pdata (map Some (DataValue D), Data.DataSpace D)))) =\n    DataValue D", "apply (subst Abs_pdata_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Rep_data D = (DataValue D, Data.DataSpace D) \\<Longrightarrow>\n    (map Some (DataValue D), Data.DataSpace D) \\<in> pdata\n 2. Rep_data D = (DataValue D, Data.DataSpace D) \\<Longrightarrow>\n    map the (fst (map Some (DataValue D), Data.DataSpace D)) = DataValue D", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_data D = (DataValue D, Data.DataSpace D) \\<Longrightarrow>\n    map the (fst (map Some (DataValue D), Data.DataSpace D)) = DataValue D", "apply (simp del: map_map)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DataSpace_PData2Data:  \n   \"Data (map the (PDataValue D)) (PDataSpace D) \\<Longrightarrow>\n   (Data.DataSpace (PData2Data D) = (PDataSpace D))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Data (map the (PDataValue D)) (PDataSpace D) \\<Longrightarrow>\n    Data.DataSpace (PData2Data D) = PDataSpace D", "apply (unfold DataSpace_def PDataSpace_def PData2Data_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Data (map the (PDataValue D))\n     ((snd \\<circ> Rep_pdata) D) \\<Longrightarrow>\n    (snd \\<circ> Rep_data)\n     (case Rep_pdata D of\n      (OL, DP) \\<Rightarrow> Abs_data (map the OL, DP)) =\n    (snd \\<circ> Rep_pdata) D", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. Data (map the (PDataValue D)) (snd (Rep_pdata D)) \\<Longrightarrow>\n    snd (Rep_data\n          (case Rep_pdata D of\n           (OL, DP) \\<Rightarrow> Abs_data (map the OL, DP))) =\n    snd (Rep_pdata D)", "apply (cut_tac D=D in Rep_pdata_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Data (map the (PDataValue D)) (snd (Rep_pdata D));\n     Rep_pdata D = (PDataValue D, PDataSpace D)\\<rbrakk>\n    \\<Longrightarrow> snd (Rep_data\n                            (case Rep_pdata D of\n                             (OL, DP) \\<Rightarrow>\n                               Abs_data (map the OL, DP))) =\n                      snd (Rep_pdata D)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Data (map the (PDataValue D)) (PDataSpace D);\n     Rep_pdata D = (PDataValue D, PDataSpace D)\\<rbrakk>\n    \\<Longrightarrow> snd (Rep_data\n                            (Abs_data\n                              (map the (PDataValue D), PDataSpace D))) =\n                      PDataSpace D", "apply (subst Abs_data_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Data (map the (PDataValue D)) (PDataSpace D);\n     Rep_pdata D = (PDataValue D, PDataSpace D)\\<rbrakk>\n    \\<Longrightarrow> (map the (PDataValue D), PDataSpace D) \\<in> data\n 2. \\<lbrakk>Data (map the (PDataValue D)) (PDataSpace D);\n     Rep_pdata D = (PDataValue D, PDataSpace D)\\<rbrakk>\n    \\<Longrightarrow> snd (map the (PDataValue D), PDataSpace D) =\n                      PDataSpace D", "apply (unfold data_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Data (map the (PDataValue D)) (PDataSpace D);\n     Rep_pdata D = (PDataValue D, PDataSpace D)\\<rbrakk>\n    \\<Longrightarrow> (map the (PDataValue D), PDataSpace D)\n                      \\<in> {(L, D) |L D. Data L D}\n 2. \\<lbrakk>Data (map the (PDataValue D)) (PDataSpace D);\n     Rep_pdata D = (PDataValue D, PDataSpace D)\\<rbrakk>\n    \\<Longrightarrow> snd (map the (PDataValue D), PDataSpace D) =\n                      PDataSpace D", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PartNum_PDataValue_PartDom [simp]:\n   \"\\<lbrakk> i < PartNum (PDataSpace Q);\n      PDataValue Q ! i = Some y \\<rbrakk> \\<Longrightarrow>\n      y \\<in> PartDom (PDataSpace Q) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum (PDataSpace Q); PDataValue Q ! i = Some y\\<rbrakk>\n    \\<Longrightarrow> y \\<in> PDataSpace Q !D! i", "apply (cut_tac D=Q in Rep_pdata_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum (PDataSpace Q); PDataValue Q ! i = Some y;\n     (PDataValue Q, PDataSpace Q) \\<in> pdata\\<rbrakk>\n    \\<Longrightarrow> y \\<in> PDataSpace Q !D! i", "apply (unfold pdata_def PData_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum (PDataSpace Q); PDataValue Q ! i = Some y;\n     (PDataValue Q, PDataSpace Q)\n     \\<in> {(L, D) |L D.\n            length L = PartNum D \\<and>\n            (\\<forall>i\\<in>{n. n < PartNum D}.\n                L ! i \\<noteq> None \\<longrightarrow>\n                the (L ! i) \\<in> D !D! i)}\\<rbrakk>\n    \\<Longrightarrow> y \\<in> PDataSpace Q !D! i", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>DataOverride\\<close>\\<close>"], ["", "lemma Data_DataOverride:\n \"((PDataSpace P) = (Data.DataSpace Q)) \\<Longrightarrow>\n  Data (map OptionOverride (zip (PDataValue P) (Data.DataValue Q))) (Data.DataSpace Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace P = Data.DataSpace Q \\<Longrightarrow>\n    Data (map OptionOverride (zip (PDataValue P) (DataValue Q)))\n     (Data.DataSpace Q)", "apply (unfold Data_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace P = Data.DataSpace Q \\<Longrightarrow>\n    length (map OptionOverride (zip (PDataValue P) (DataValue Q))) =\n    PartNum (Data.DataSpace Q) \\<and>\n    (\\<forall>i\\<in>{n. n < PartNum (Data.DataSpace Q)}.\n        map OptionOverride (zip (PDataValue P) (DataValue Q)) ! i\n        \\<in> Data.DataSpace Q !D! i)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n        i < PartNum (Data.DataSpace Q)\\<rbrakk>\n       \\<Longrightarrow> OptionOverride (PDataValue P ! i, DataValue Q ! i)\n                         \\<in> Data.DataSpace Q !D! i", "apply (unfold OptionOverride_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n        i < PartNum (Data.DataSpace Q)\\<rbrakk>\n       \\<Longrightarrow> (if fst (PDataValue P ! i, DataValue Q ! i) = None\n                          then snd (PDataValue P ! i, DataValue Q ! i)\n                          else the (fst (PDataValue P ! i,\n   DataValue Q ! i)))\n                         \\<in> Data.DataSpace Q !D! i", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n        i < PartNum (Data.DataSpace Q); PDataValue P ! i = Some y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> Data.DataSpace Q !D! i", "apply (rename_tac i D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i D.\n       \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n        i < PartNum (Data.DataSpace Q); PDataValue P ! i = Some D\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Data.DataSpace Q !D! i", "apply (case_tac \"PDataValue P ! i = None\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i D.\n       \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n        i < PartNum (Data.DataSpace Q); PDataValue P ! i = Some D;\n        PDataValue P ! i = None\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Data.DataSpace Q !D! i\n 2. \\<And>i D.\n       \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n        i < PartNum (Data.DataSpace Q); PDataValue P ! i = Some D;\n        PDataValue P ! i \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Data.DataSpace Q !D! i", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i D.\n       \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n        i < PartNum (Data.DataSpace Q); PDataValue P ! i = Some D\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Data.DataSpace Q !D! i", "apply (drule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i D.\n       \\<lbrakk>i < PartNum (Data.DataSpace Q); PDataValue P ! i = Some D;\n        Data.DataSpace Q = PDataSpace P\\<rbrakk>\n       \\<Longrightarrow> D \\<in> Data.DataSpace Q !D! i", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma data_DataOverride:\n \"((PDataSpace P) = (Data.DataSpace Q)) \\<Longrightarrow>\n   (map OptionOverride (zip (PDataValue P) (Data.DataValue Q)), Data.DataSpace Q) \\<in> data\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace P = Data.DataSpace Q \\<Longrightarrow>\n    (map OptionOverride (zip (PDataValue P) (DataValue Q)),\n     Data.DataSpace Q)\n    \\<in> data", "apply (unfold data_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace P = Data.DataSpace Q \\<Longrightarrow>\n    (map OptionOverride (zip (PDataValue P) (DataValue Q)),\n     Data.DataSpace Q)\n    \\<in> {(L, D) |L D. Data L D}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace P = Data.DataSpace Q \\<Longrightarrow>\n    Data (map OptionOverride (zip (PDataValue P) (DataValue Q)))\n     (Data.DataSpace Q)", "apply (rule Data_DataOverride)"], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace P = Data.DataSpace Q \\<Longrightarrow>\n    PDataSpace P = Data.DataSpace Q", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DataSpace_DataOverride [simp]:\n \"((Data.DataSpace D) = (PDataSpace E)) \\<Longrightarrow>\n   Data.DataSpace (E [D+] D) = (Data.DataSpace D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Data.DataSpace D = PDataSpace E \\<Longrightarrow>\n    Data.DataSpace (E [D+] D) = Data.DataSpace D", "apply (unfold DataSpace_def DataOverride_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> Rep_data) D = PDataSpace E \\<Longrightarrow>\n    (snd \\<circ> Rep_data)\n     (case Rep_pdata E of\n      (L1, DP1) \\<Rightarrow>\n        case Rep_data D of\n        (L2, DP2) \\<Rightarrow>\n          Abs_data (map OptionOverride (zip L1 L2), DP2)) =\n    (snd \\<circ> Rep_data) D", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Rep_data D) = PDataSpace E \\<Longrightarrow>\n    snd (Rep_data\n          (case Rep_pdata E of\n           (L1, DP1) \\<Rightarrow>\n             case Rep_data D of\n             (L2, DP2) \\<Rightarrow>\n               Abs_data (map OptionOverride (zip L1 L2), DP2))) =\n    PDataSpace E", "apply (cut_tac D=D in Rep_data_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>snd (Rep_data D) = PDataSpace E;\n     Rep_data D = (DataValue D, Data.DataSpace D)\\<rbrakk>\n    \\<Longrightarrow> snd (Rep_data\n                            (case Rep_pdata E of\n                             (L1, DP1) \\<Rightarrow>\n                               case Rep_data D of\n                               (L2, DP2) \\<Rightarrow>\n                                 Abs_data\n                                  (map OptionOverride (zip L1 L2), DP2))) =\n                      PDataSpace E", "apply (cut_tac D=E in Rep_pdata_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>snd (Rep_data D) = PDataSpace E;\n     Rep_data D = (DataValue D, Data.DataSpace D);\n     Rep_pdata E = (PDataValue E, PDataSpace E)\\<rbrakk>\n    \\<Longrightarrow> snd (Rep_data\n                            (case Rep_pdata E of\n                             (L1, DP1) \\<Rightarrow>\n                               case Rep_data D of\n                               (L2, DP2) \\<Rightarrow>\n                                 Abs_data\n                                  (map OptionOverride (zip L1 L2), DP2))) =\n                      PDataSpace E", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Data.DataSpace D = PDataSpace E;\n     Rep_data D = (DataValue D, PDataSpace E);\n     Rep_pdata E = (PDataValue E, PDataSpace E)\\<rbrakk>\n    \\<Longrightarrow> snd (Rep_data\n                            (Abs_data\n                              (map OptionOverride\n                                (zip (PDataValue E) (DataValue D)),\n                               PDataSpace E))) =\n                      PDataSpace E", "apply (subst Abs_data_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Data.DataSpace D = PDataSpace E;\n     Rep_data D = (DataValue D, PDataSpace E);\n     Rep_pdata E = (PDataValue E, PDataSpace E)\\<rbrakk>\n    \\<Longrightarrow> (map OptionOverride\n                        (zip (PDataValue E) (DataValue D)),\n                       PDataSpace E)\n                      \\<in> data\n 2. \\<lbrakk>Data.DataSpace D = PDataSpace E;\n     Rep_data D = (DataValue D, PDataSpace E);\n     Rep_pdata E = (PDataValue E, PDataSpace E)\\<rbrakk>\n    \\<Longrightarrow> snd (map OptionOverride\n                            (zip (PDataValue E) (DataValue D)),\n                           PDataSpace E) =\n                      PDataSpace E", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Data.DataSpace D = PDataSpace E;\n     Rep_data D = (DataValue D, PDataSpace E);\n     Rep_pdata E = (PDataValue E, PDataSpace E)\\<rbrakk>\n    \\<Longrightarrow> (map OptionOverride\n                        (zip (PDataValue E) (DataValue D)),\n                       PDataSpace E)\n                      \\<in> data", "apply (drule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rep_data D = (DataValue D, PDataSpace E);\n     Rep_pdata E = (PDataValue E, PDataSpace E);\n     PDataSpace E = Data.DataSpace D\\<rbrakk>\n    \\<Longrightarrow> (map OptionOverride\n                        (zip (PDataValue E) (DataValue D)),\n                       PDataSpace E)\n                      \\<in> data", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rep_data D = (DataValue D, Data.DataSpace D);\n     Rep_pdata E = (PDataValue E, Data.DataSpace D);\n     PDataSpace E = Data.DataSpace D\\<rbrakk>\n    \\<Longrightarrow> (map OptionOverride\n                        (zip (PDataValue E) (DataValue D)),\n                       Data.DataSpace D)\n                      \\<in> data", "apply (rule data_DataOverride)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rep_data D = (DataValue D, Data.DataSpace D);\n     Rep_pdata E = (PDataValue E, Data.DataSpace D);\n     PDataSpace E = Data.DataSpace D\\<rbrakk>\n    \\<Longrightarrow> PDataSpace E = Data.DataSpace D", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DataValue_DataOverride [simp]:\n \"((PDataSpace P) = (Data.DataSpace Q)) \\<Longrightarrow>\n  (DataValue (P [D+] Q)) = (map OptionOverride (zip (PDataValue P) (Data.DataValue Q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace P = Data.DataSpace Q \\<Longrightarrow>\n    DataValue (P [D+] Q) =\n    map OptionOverride (zip (PDataValue P) (DataValue Q))", "apply (unfold DataValue_def DataOverride_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace P = Data.DataSpace Q \\<Longrightarrow>\n    (fst \\<circ> Rep_data)\n     (case Rep_pdata P of\n      (L1, DP1) \\<Rightarrow>\n        case Rep_data Q of\n        (L2, DP2) \\<Rightarrow>\n          Abs_data (map OptionOverride (zip L1 L2), DP2)) =\n    map OptionOverride (zip (PDataValue P) ((fst \\<circ> Rep_data) Q))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. PDataSpace P = Data.DataSpace Q \\<Longrightarrow>\n    fst (Rep_data\n          (case Rep_pdata P of\n           (L1, DP1) \\<Rightarrow>\n             case Rep_data Q of\n             (L2, DP2) \\<Rightarrow>\n               Abs_data (map OptionOverride (zip L1 L2), DP2))) =\n    map OptionOverride (zip (PDataValue P) (fst (Rep_data Q)))", "apply (cut_tac D=P in Rep_pdata_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n     Rep_pdata P = (PDataValue P, PDataSpace P)\\<rbrakk>\n    \\<Longrightarrow> fst (Rep_data\n                            (case Rep_pdata P of\n                             (L1, DP1) \\<Rightarrow>\n                               case Rep_data Q of\n                               (L2, DP2) \\<Rightarrow>\n                                 Abs_data\n                                  (map OptionOverride (zip L1 L2), DP2))) =\n                      map OptionOverride\n                       (zip (PDataValue P) (fst (Rep_data Q)))", "apply (cut_tac D=Q in Rep_data_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n     Rep_pdata P = (PDataValue P, PDataSpace P);\n     Rep_data Q = (DataValue Q, Data.DataSpace Q)\\<rbrakk>\n    \\<Longrightarrow> fst (Rep_data\n                            (case Rep_pdata P of\n                             (L1, DP1) \\<Rightarrow>\n                               case Rep_data Q of\n                               (L2, DP2) \\<Rightarrow>\n                                 Abs_data\n                                  (map OptionOverride (zip L1 L2), DP2))) =\n                      map OptionOverride\n                       (zip (PDataValue P) (fst (Rep_data Q)))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n     Rep_pdata P = (PDataValue P, Data.DataSpace Q);\n     Rep_data Q = (DataValue Q, Data.DataSpace Q)\\<rbrakk>\n    \\<Longrightarrow> fst (Rep_data\n                            (Abs_data\n                              (map OptionOverride\n                                (zip (PDataValue P) (DataValue Q)),\n                               Data.DataSpace Q))) =\n                      map OptionOverride (zip (PDataValue P) (DataValue Q))", "apply (subst Abs_data_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n     Rep_pdata P = (PDataValue P, Data.DataSpace Q);\n     Rep_data Q = (DataValue Q, Data.DataSpace Q)\\<rbrakk>\n    \\<Longrightarrow> (map OptionOverride\n                        (zip (PDataValue P) (DataValue Q)),\n                       Data.DataSpace Q)\n                      \\<in> data\n 2. \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n     Rep_pdata P = (PDataValue P, Data.DataSpace Q);\n     Rep_data Q = (DataValue Q, Data.DataSpace Q)\\<rbrakk>\n    \\<Longrightarrow> fst (map OptionOverride\n                            (zip (PDataValue P) (DataValue Q)),\n                           Data.DataSpace Q) =\n                      map OptionOverride (zip (PDataValue P) (DataValue Q))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n     Rep_pdata P = (PDataValue P, Data.DataSpace Q);\n     Rep_data Q = (DataValue Q, Data.DataSpace Q)\\<rbrakk>\n    \\<Longrightarrow> (map OptionOverride\n                        (zip (PDataValue P) (DataValue Q)),\n                       Data.DataSpace Q)\n                      \\<in> data", "apply (rule data_DataOverride)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n     Rep_pdata P = (PDataValue P, Data.DataSpace Q);\n     Rep_data Q = (DataValue Q, Data.DataSpace Q)\\<rbrakk>\n    \\<Longrightarrow> PDataSpace P = Data.DataSpace Q", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>\\<open>OptionOverride\\<close>\\<close>"], ["", "lemma DataValue_OptionOverride_nth:\n \"\\<lbrakk> ((PDataSpace P) = (DataSpace Q));\n    i < PartNum (DataSpace Q) \\<rbrakk> \\<Longrightarrow>\n    (DataValue (P [D+] Q) ! i) = \n    OptionOverride (PDataValue P ! i, DataValue Q ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>PDataSpace P = Data.DataSpace Q;\n     i < PartNum (Data.DataSpace Q)\\<rbrakk>\n    \\<Longrightarrow> DataValue (P [D+] Q) ! i =\n                      OptionOverride (PDataValue P ! i, DataValue Q ! i)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma None_OptionOverride [simp]:\n   \"(fst P) = None \\<Longrightarrow> OptionOverride P = (snd P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst P = None \\<Longrightarrow> OptionOverride P = snd P", "apply (unfold OptionOverride_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst P = None \\<Longrightarrow>\n    (if fst P = None then snd P else the (fst P)) = snd P", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Some_OptionOverride [simp]:\n   \"(fst P) \\<noteq> None \\<Longrightarrow> OptionOverride P = the (fst P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst P \\<noteq> None \\<Longrightarrow> OptionOverride P = the (fst P)", "apply (unfold OptionOverride_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst P \\<noteq> None \\<Longrightarrow>\n    (if fst P = None then snd P else the (fst P)) = the (fst P)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}