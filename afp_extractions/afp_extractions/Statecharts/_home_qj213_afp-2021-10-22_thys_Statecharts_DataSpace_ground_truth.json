{"file_name": "/home/qj213/afp-2021-10-22/thys/Statecharts/DataSpace.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Statecharts", "problem_names": ["lemma DataSpace_EmptySet:\n \"[UNIV] \\<in> { L | L. DataSpace L }\"", "lemma DataSpace_UNIV [simp]:\n \"DataSpace [UNIV]\"", "lemma DataSpace_select: \n \"DataSpace (Rep_dataspace L)\"", "lemma UNIV_dataspace [simp]: \n  \"[UNIV] \\<in> dataspace\"", "lemma Inl_Inr_DataSpace [simp]:\n  \"DataSpace [Part UNIV Inl, Part UNIV Inr]\"", "lemma Inl_Inr_dataspace [simp]:\n  \"[Part UNIV Inl, Part UNIV Inr] \\<in> dataspace\"", "lemma InlInr_InlInl_Inr_DataSpace [simp]:\n  \"DataSpace [Part UNIV (Inl o Inr), Part UNIV (Inl o Inl), Part UNIV Inr]\"", "lemma InlInr_InlInl_Inr_dataspace [simp]:\n  \"[Part UNIV (Inl o Inr), Part UNIV (Inl o Inl), Part UNIV Inr] : dataspace\"", "lemma PartDom_PartNum_distinct: \n      \"\\<lbrakk> i < PartNum d; j < PartNum d;        \n         i \\<noteq> j; p \\<in>  (d !D! i) \\<rbrakk> \\<Longrightarrow>\n         p \\<notin> (d !D! j)\"", "lemma PartDom_PartNum_distinct2: \n      \"\\<lbrakk> i < PartNum d; j < PartNum d;       \n         i \\<noteq> j; p \\<in>  (d !D! j) \\<rbrakk> \\<Longrightarrow>\n        p \\<notin> (d !D! i)\"", "lemma PartNum_length [simp]: \n  \"(DataSpace L) \\<Longrightarrow> (PartNum (Abs_dataspace L) = (length L))\""], "translations": [["", "lemma DataSpace_EmptySet:\n \"[UNIV] \\<in> { L | L. DataSpace L }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [UNIV] \\<in> {L |L. DataSpace L}", "by (unfold DataSpace_def, auto)"], ["", "definition \"dataspace = { L | (L::('d set) list). DataSpace L}\""], ["", "typedef 'd dataspace = \"dataspace :: 'd set list set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> dataspace", "unfolding dataspace_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {L |L. DataSpace L}", "apply (rule exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ?x \\<in> {L |L. DataSpace L}", "apply (rule DataSpace_EmptySet)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n PartNum :: \"('d)dataspace => nat\" where\n \"PartNum = length o Rep_dataspace\""], ["", "definition\n PartDom :: \"['d dataspace, nat] => ('d set)\" (infixl \"!D!\" 101) where\n \"PartDom d n = (Rep_dataspace d) ! n\""], ["", "subsection \\<open>Lemmas\\<close>"], ["", "subsubsection \\<open>\\<open>DataSpace\\<close>\\<close>"], ["", "lemma DataSpace_UNIV [simp]:\n \"DataSpace [UNIV]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataSpace [UNIV]", "by (unfold DataSpace_def, auto)"], ["", "lemma DataSpace_select: \n \"DataSpace (Rep_dataspace L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataSpace (Rep_dataspace L)", "apply (cut_tac x=L in  Rep_dataspace)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_dataspace L \\<in> dataspace \\<Longrightarrow>\n    DataSpace (Rep_dataspace L)", "apply (unfold dataspace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_dataspace L \\<in> {L |L. DataSpace L} \\<Longrightarrow>\n    DataSpace (Rep_dataspace L)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma UNIV_dataspace [simp]: \n  \"[UNIV] \\<in> dataspace\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [UNIV] \\<in> dataspace", "by (unfold dataspace_def, auto)"], ["", "lemma Inl_Inr_DataSpace [simp]:\n  \"DataSpace [Part UNIV Inl, Part UNIV Inr]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataSpace [Part UNIV Inl, Part UNIV Inr]", "apply (unfold DataSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct [Part UNIV Inl, Part UNIV Inr] \\<and>\n    (\\<forall>D1\\<in>set [Part UNIV Inl, Part UNIV Inr].\n        \\<forall>D2\\<in>set [Part UNIV Inl, Part UNIV Inr].\n           D1 \\<noteq> D2 \\<longrightarrow> D1 \\<inter> D2 = {}) \\<and>\n    \\<Union> (set [Part UNIV Inl, Part UNIV Inr]) = UNIV", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> Part UNIV Inr \\<Longrightarrow> x \\<in> Part UNIV Inl", "apply (rename_tac d)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d.\n       d \\<notin> Part UNIV Inr \\<Longrightarrow> d \\<in> Part UNIV Inl", "apply (rule_tac b=\"(inv Inl) d\" in Part_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>d. d \\<notin> Part UNIV Inr \\<Longrightarrow> d \\<in> UNIV\n 2. \\<And>d. d \\<notin> Part UNIV Inr \\<Longrightarrow> d = Inl (inv Inl d)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d. d \\<notin> Part UNIV Inr \\<Longrightarrow> d = Inl (inv Inl d)", "apply (rule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d. d \\<notin> Part UNIV Inr \\<Longrightarrow> Inl (inv Inl d) = d", "apply (case_tac d)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>d a.\n       \\<lbrakk>d \\<notin> Part UNIV Inr; d = Inl a\\<rbrakk>\n       \\<Longrightarrow> Inl (inv Inl d) = d\n 2. \\<And>d b.\n       \\<lbrakk>d \\<notin> Part UNIV Inr; d = Inr b\\<rbrakk>\n       \\<Longrightarrow> Inl (inv Inl d) = d", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Inl_Inr_dataspace [simp]:\n  \"[Part UNIV Inl, Part UNIV Inr] \\<in> dataspace\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [Part UNIV Inl, Part UNIV Inr] \\<in> dataspace", "by (unfold dataspace_def, auto)"], ["", "lemma InlInr_InlInl_Inr_DataSpace [simp]:\n  \"DataSpace [Part UNIV (Inl o Inr), Part UNIV (Inl o Inl), Part UNIV Inr]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataSpace\n     [Part UNIV (Inl \\<circ> Inr), Part UNIV (Inl \\<circ> Inl),\n      Part UNIV Inr]", "apply (unfold DataSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     [Part UNIV (Inl \\<circ> Inr), Part UNIV (Inl \\<circ> Inl),\n      Part UNIV Inr] \\<and>\n    (\\<forall>D1\\<in>set [Part UNIV (Inl \\<circ> Inr),\n                          Part UNIV (Inl \\<circ> Inl), Part UNIV Inr].\n        \\<forall>D2\\<in>set [Part UNIV (Inl \\<circ> Inr),\n                             Part UNIV (Inl \\<circ> Inl), Part UNIV Inr].\n           D1 \\<noteq> D2 \\<longrightarrow> D1 \\<inter> D2 = {}) \\<and>\n    \\<Union>\n     (set [Part UNIV (Inl \\<circ> Inr), Part UNIV (Inl \\<circ> Inl),\n           Part UNIV Inr]) =\n    UNIV", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. Part UNIV (Inl \\<circ> Inr) =\n    Part UNIV (Inl \\<circ> Inl) \\<Longrightarrow>\n    False\n 2. Part UNIV (Inl \\<circ> Inr) = Part UNIV Inr \\<Longrightarrow> False\n 3. Part UNIV (Inl \\<circ> Inl) = Part UNIV Inr \\<Longrightarrow> False\n 4. \\<And>x.\n       \\<lbrakk>x \\<notin> Part UNIV (Inl \\<circ> Inr);\n        x \\<notin> Part UNIV Inr\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Part UNIV (Inl \\<circ> Inl)", "apply (unfold Part_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. UNIV \\<inter> {x. \\<exists>z. x = (Inl \\<circ> Inr) z} =\n    UNIV \\<inter> {x. \\<exists>z. x = (Inl \\<circ> Inl) z} \\<Longrightarrow>\n    False\n 2. UNIV \\<inter> {x. \\<exists>z. x = (Inl \\<circ> Inr) z} =\n    UNIV \\<inter> {x. \\<exists>z. x = Inr z} \\<Longrightarrow>\n    False\n 3. UNIV \\<inter> {x. \\<exists>z. x = (Inl \\<circ> Inl) z} =\n    UNIV \\<inter> {x. \\<exists>z. x = Inr z} \\<Longrightarrow>\n    False\n 4. \\<And>x.\n       \\<lbrakk>x \\<notin> UNIV \\<inter>\n                           {x. \\<exists>z. x = (Inl \\<circ> Inr) z};\n        x \\<notin> UNIV \\<inter> {x. \\<exists>z. x = Inr z}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> UNIV \\<inter>\n                                 {x. \\<exists>z. x = (Inl \\<circ> Inl) z}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>z. x \\<noteq> Inl (Inr z);\n        \\<forall>z. x \\<noteq> Inr z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. x = Inl (Inl z)", "apply (rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>z. x \\<noteq> Inl (Inr z);\n        \\<forall>z. x \\<noteq> Inr z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. x = Inl (Inl z)", "apply (case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a.\n       \\<lbrakk>\\<forall>z. x \\<noteq> Inl (Inr z);\n        \\<forall>z. x \\<noteq> Inr z; x = Inl a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. x = Inl (Inl z)\n 2. \\<And>x b.\n       \\<lbrakk>\\<forall>z. x \\<noteq> Inl (Inr z);\n        \\<forall>z. x \\<noteq> Inr z; x = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. x = Inl (Inl z)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<forall>z. a \\<noteq> Inr z \\<Longrightarrow> \\<exists>z. a = Inl z", "apply (rename_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<forall>z. a \\<noteq> Inr z \\<Longrightarrow> \\<exists>z. a = Inl z", "apply (case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa.\n       \\<lbrakk>\\<forall>z. a \\<noteq> Inr z; a = Inl aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. a = Inl z\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>z. a \\<noteq> Inr z; a = Inr b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. a = Inl z", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma InlInr_InlInl_Inr_dataspace [simp]:\n  \"[Part UNIV (Inl o Inr), Part UNIV (Inl o Inl), Part UNIV Inr] : dataspace\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [Part UNIV (Inl \\<circ> Inr), Part UNIV (Inl \\<circ> Inl),\n     Part UNIV Inr]\n    \\<in> dataspace", "by (unfold dataspace_def, auto)"], ["", "subsubsection \\<open>\\<open>PartNum\\<close>\\<close>"], ["", "lemma PartDom_PartNum_distinct: \n      \"\\<lbrakk> i < PartNum d; j < PartNum d;        \n         i \\<noteq> j; p \\<in>  (d !D! i) \\<rbrakk> \\<Longrightarrow>\n         p \\<notin> (d !D! j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j;\n     p \\<in> d !D! i\\<rbrakk>\n    \\<Longrightarrow> p \\<notin> d !D! j", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac L=d in DataSpace_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; DataSpace (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (unfold DataSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j;\n     distinct (Rep_dataspace d) \\<and>\n     (\\<forall>D1\\<in>set (Rep_dataspace d).\n         \\<forall>D2\\<in>set (Rep_dataspace d).\n            D1 \\<noteq> D2 \\<longrightarrow> D1 \\<inter> D2 = {}) \\<and>\n     \\<Union> (set (Rep_dataspace d)) = UNIV\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<forall>D1\\<in>set (Rep_dataspace d).\n        \\<forall>D2\\<in>set (Rep_dataspace d).\n           D1 \\<noteq> D2 \\<longrightarrow> D1 \\<inter> D2 = {};\n     \\<Union> (set (Rep_dataspace d)) = UNIV\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule_tac x=\"Rep_dataspace d ! i\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     \\<forall>D2\\<in>set (Rep_dataspace d).\n        Rep_dataspace d ! i \\<noteq> D2 \\<longrightarrow>\n        Rep_dataspace d ! i \\<inter> D2 = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule_tac x=\"Rep_dataspace d ! j\" in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<noteq> Rep_dataspace d ! j \\<longrightarrow>\n     Rep_dataspace d ! i \\<inter> Rep_dataspace d ! j = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! j \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i = Rep_dataspace d ! j\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<inter> Rep_dataspace d ! j = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! j \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:distinct_conv_nth PartNum_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<inter> Rep_dataspace d ! j = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! j \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! i;\n     p \\<in> d !D! j; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (unfold PartDom_def PartNum_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i < (length \\<circ> Rep_dataspace) d;\n     j < (length \\<circ> Rep_dataspace) d; i \\<noteq> j;\n     p \\<in> Rep_dataspace d ! i; p \\<in> Rep_dataspace d ! j;\n     distinct (Rep_dataspace d); \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<inter> Rep_dataspace d ! j = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < (length \\<circ> Rep_dataspace) d;\n     j < (length \\<circ> Rep_dataspace) d; i \\<noteq> j;\n     p \\<in> Rep_dataspace d ! i; p \\<in> Rep_dataspace d ! j;\n     distinct (Rep_dataspace d); \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! j \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>i < (length \\<circ> Rep_dataspace) d;\n     j < (length \\<circ> Rep_dataspace) d; i \\<noteq> j;\n     p \\<in> Rep_dataspace d ! i; p \\<in> Rep_dataspace d ! j;\n     distinct (Rep_dataspace d); \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PartDom_PartNum_distinct2: \n      \"\\<lbrakk> i < PartNum d; j < PartNum d;       \n         i \\<noteq> j; p \\<in>  (d !D! j) \\<rbrakk> \\<Longrightarrow>\n        p \\<notin> (d !D! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j;\n     p \\<in> d !D! j\\<rbrakk>\n    \\<Longrightarrow> p \\<notin> d !D! i", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac L=d in DataSpace_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; DataSpace (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (unfold DataSpace_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i;\n     distinct (Rep_dataspace d) \\<and>\n     (\\<forall>D1\\<in>set (Rep_dataspace d).\n         \\<forall>D2\\<in>set (Rep_dataspace d).\n            D1 \\<noteq> D2 \\<longrightarrow> D1 \\<inter> D2 = {}) \\<and>\n     \\<Union> (set (Rep_dataspace d)) = UNIV\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<forall>D1\\<in>set (Rep_dataspace d).\n        \\<forall>D2\\<in>set (Rep_dataspace d).\n           D1 \\<noteq> D2 \\<longrightarrow> D1 \\<inter> D2 = {};\n     \\<Union> (set (Rep_dataspace d)) = UNIV\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule_tac x=\"Rep_dataspace d ! i\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     \\<forall>D2\\<in>set (Rep_dataspace d).\n        Rep_dataspace d ! i \\<noteq> D2 \\<longrightarrow>\n        Rep_dataspace d ! i \\<inter> D2 = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule_tac x=\"Rep_dataspace d ! j\" in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<noteq> Rep_dataspace d ! j \\<longrightarrow>\n     Rep_dataspace d ! i \\<inter> Rep_dataspace d ! j = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! j \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i = Rep_dataspace d ! j\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<inter> Rep_dataspace d ! j = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! j \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:distinct_conv_nth PartNum_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<inter> Rep_dataspace d ! j = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! j \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>i < PartNum d; j < PartNum d; i \\<noteq> j; p \\<in> d !D! j;\n     p \\<in> d !D! i; distinct (Rep_dataspace d);\n     \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (unfold PartDom_def PartNum_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i < (length \\<circ> Rep_dataspace) d;\n     j < (length \\<circ> Rep_dataspace) d; i \\<noteq> j;\n     p \\<in> Rep_dataspace d ! j; p \\<in> Rep_dataspace d ! i;\n     distinct (Rep_dataspace d); \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<inter> Rep_dataspace d ! j = {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>i < (length \\<circ> Rep_dataspace) d;\n     j < (length \\<circ> Rep_dataspace) d; i \\<noteq> j;\n     p \\<in> Rep_dataspace d ! j; p \\<in> Rep_dataspace d ! i;\n     distinct (Rep_dataspace d); \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! j \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>i < (length \\<circ> Rep_dataspace) d;\n     j < (length \\<circ> Rep_dataspace) d; i \\<noteq> j;\n     p \\<in> Rep_dataspace d ! j; p \\<in> Rep_dataspace d ! i;\n     distinct (Rep_dataspace d); \\<Union> (set (Rep_dataspace d)) = UNIV;\n     Rep_dataspace d ! i \\<notin> set (Rep_dataspace d)\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PartNum_length [simp]: \n  \"(DataSpace L) \\<Longrightarrow> (PartNum (Abs_dataspace L) = (length L))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataSpace L \\<Longrightarrow> PartNum (Abs_dataspace L) = length L", "apply (unfold PartNum_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. DataSpace L \\<Longrightarrow>\n    (length \\<circ> Rep_dataspace) (Abs_dataspace L) = length L", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. DataSpace L \\<Longrightarrow>\n    length (Rep_dataspace (Abs_dataspace L)) = length L", "apply (subst Abs_dataspace_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. DataSpace L \\<Longrightarrow> L \\<in> dataspace\n 2. DataSpace L \\<Longrightarrow> length L = length L", "apply (unfold dataspace_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. DataSpace L \\<Longrightarrow> L \\<in> {L |L. DataSpace L}\n 2. DataSpace L \\<Longrightarrow> length L = length L", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}