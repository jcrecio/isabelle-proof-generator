{"file_name": "/home/qj213/afp-2021-10-22/thys/Statecharts/HAKripke.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Statecharts", "problem_names": ["lemma Kripke_HA [simp]:\n  \"Kripke {ST. HA ST = a} {InitStatus a} (StepRelSem a) (LabelFunSem a)\"", "lemma LabelFun_LabelFunSem [simp]: \n  \"(LabelFun (HA2Kripke a)) = (LabelFunSem a)\"", "lemma InitStatuses_InitStatus [simp]:\n   \"(InitStatuses (HA2Kripke a)) = {(InitStatus a)}\"", "lemma Statuses_StatusesOfHA [simp]:\n   \"(Statuses (HA2Kripke a)) = {ST. HA ST = a}\"", "lemma StepRel_StepRelSem [simp]:\n  \"(StepRel (HA2Kripke a)) = (StepRelSem a)\"", "lemma TRUE_LabelFunSem [simp]:\n   \"atomar.TRUE \\<in> the (LabelFunSem (HA ST) ST)\"", "lemma FALSE_LabelFunSem [simp]:\n   \"atomar.FALSE \\<notin> the (LabelFunSem (HA ST) ST)\"", "lemma Conf_LabelFunSem [simp]:\n   \"((IN S) \\<in> the (LabelFunSem (HA ST) ST)) = (S \\<in> (Conf ST))\"", "lemma Events_LabelFunSem [simp]:\n  \"((EN S) \\<in> the (LabelFunSem (HA ST) ST)) = (S \\<in> (Events ST))\"", "lemma Value_LabelFunSem [simp]:\n  \"((VAL P) \\<in> the (LabelFunSem (HA ST) ST)) = (P (Value ST))\"", "lemma AtomTRUE_EvalCTLHA [simp]:\n  \"a |=H= (Atom (atomar.TRUE))\"", "lemma AtomFalse_EvalCTLHA [simp]:\n  \"\\<not> a |=H= (Atom (atomar.FALSE))\"", "lemma Events_InitStatus_EvalCTLHA [simp]:\n  \"(a |=H= (Atom (EN S))) = (S \\<in> (Events (InitStatus a)))\"", "lemma Conf_InitStatus_EvalCTLHA [simp]:\n  \"(a |=H= (Atom (IN S))) = (S \\<in> (Conf (InitStatus a)))\"", "lemma HAInitValue_EvalCTLHA [simp]:\n  \"(a |=H= (Atom (VAL P))) = (P (HAInitValue a))\""], "translations": [["", "lemma Kripke_HA [simp]:\n  \"Kripke {ST. HA ST = a} {InitStatus a} (StepRelSem a) (LabelFunSem a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Kripke {ST. HA ST = a} {InitStatus a} (StepRelSem a) (LabelFunSem a)", "apply (unfold Kripke_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {InitStatus a} \\<subseteq> {ST. HA ST = a} \\<and>\n    StepRelSem a \\<subseteq> {ST. HA ST = a} \\<times> {ST. HA ST = a} \\<and>\n    Domain (StepRelSem a) = {ST. HA ST = a} \\<and>\n    dom (LabelFunSem a) = {ST. HA ST = a}", "apply auto"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa b. (aa, b) \\<in> StepRelSem a \\<Longrightarrow> HA aa = a\n 2. \\<And>aa b. (aa, b) \\<in> StepRelSem a \\<Longrightarrow> HA b = a\n 3. \\<And>x b. (x, b) \\<in> StepRelSem a \\<Longrightarrow> HA x = a\n 4. \\<And>x. a = HA x \\<Longrightarrow> x \\<in> Domain (StepRelSem (HA x))\n 5. \\<And>x y. LabelFunSem a x = Some y \\<Longrightarrow> HA x = a\n 6. \\<And>x.\n       a = HA x \\<Longrightarrow> \\<exists>y. LabelFunSem (HA x) x = Some y", "apply (unfold StepRelSem_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa b.\n       (aa, b)\n       \\<in> {(ST, ST').\n              HA ST = a \\<and>\n              (HPT ST \\<noteq> {} \\<longrightarrow>\n               (\\<exists>TS\\<in>HPT ST.\n                   \\<exists>U\\<in>ResolveRacing TS.\n                      ST' = StepStatus ST TS U)) \\<and>\n              (HPT ST = {} \\<longrightarrow>\n               ST' = StepStatus ST {} DefaultUpdate)} \\<Longrightarrow>\n       HA aa = a\n 2. \\<And>aa b.\n       (aa, b)\n       \\<in> {(ST, ST').\n              HA ST = a \\<and>\n              (HPT ST \\<noteq> {} \\<longrightarrow>\n               (\\<exists>TS\\<in>HPT ST.\n                   \\<exists>U\\<in>ResolveRacing TS.\n                      ST' = StepStatus ST TS U)) \\<and>\n              (HPT ST = {} \\<longrightarrow>\n               ST' = StepStatus ST {} DefaultUpdate)} \\<Longrightarrow>\n       HA b = a\n 3. \\<And>x b.\n       (x, b)\n       \\<in> {(ST, ST').\n              HA ST = a \\<and>\n              (HPT ST \\<noteq> {} \\<longrightarrow>\n               (\\<exists>TS\\<in>HPT ST.\n                   \\<exists>U\\<in>ResolveRacing TS.\n                      ST' = StepStatus ST TS U)) \\<and>\n              (HPT ST = {} \\<longrightarrow>\n               ST' = StepStatus ST {} DefaultUpdate)} \\<Longrightarrow>\n       HA x = a\n 4. \\<And>x.\n       a = HA x \\<Longrightarrow>\n       x \\<in> Domain\n                {(ST, ST').\n                 HA ST = HA x \\<and>\n                 (HPT ST \\<noteq> {} \\<longrightarrow>\n                  (\\<exists>TS\\<in>HPT ST.\n                      \\<exists>U\\<in>ResolveRacing TS.\n                         ST' = StepStatus ST TS U)) \\<and>\n                 (HPT ST = {} \\<longrightarrow>\n                  ST' = StepStatus ST {} DefaultUpdate)}\n 5. \\<And>x y. LabelFunSem a x = Some y \\<Longrightarrow> HA x = a\n 6. \\<And>x.\n       a = HA x \\<Longrightarrow> \\<exists>y. LabelFunSem (HA x) x = Some y", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       a = HA x \\<Longrightarrow>\n       \\<exists>ST'.\n          (HPT x \\<noteq> {} \\<longrightarrow>\n           (\\<exists>TS\\<in>HPT x.\n               \\<exists>U\\<in>ResolveRacing TS.\n                  ST' = StepStatus x TS U)) \\<and>\n          (HPT x = {} \\<longrightarrow> ST' = StepStatus x {} DefaultUpdate)\n 2. \\<And>x y. LabelFunSem a x = Some y \\<Longrightarrow> HA x = a\n 3. \\<And>x.\n       a = HA x \\<Longrightarrow> \\<exists>y. LabelFunSem (HA x) x = Some y", "apply (unfold LabelFunSem_def Let_def If_def dom_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       a = HA x \\<Longrightarrow>\n       \\<exists>ST'.\n          (HPT x \\<noteq> {} \\<longrightarrow>\n           (\\<exists>TS\\<in>HPT x.\n               \\<exists>U\\<in>ResolveRacing TS.\n                  ST' = StepStatus x TS U)) \\<and>\n          (HPT x = {} \\<longrightarrow> ST' = StepStatus x {} DefaultUpdate)\n 2. \\<And>x y.\n       (THE z.\n           ((HA x = a) = True \\<longrightarrow>\n            z =\n            Some\n             (IN ` Conf x \\<union> EN ` Events x \\<union>\n              {VAL P |P. P (Value x)} \\<union>\n              {TRUE})) \\<and>\n           ((HA x = a) = False \\<longrightarrow> z = None)) =\n       Some y \\<Longrightarrow>\n       HA x = a\n 3. \\<And>x.\n       a = HA x \\<Longrightarrow>\n       \\<exists>y.\n          (THE z.\n              ((HA x = HA x) = True \\<longrightarrow>\n               z =\n               Some\n                (IN ` Conf x \\<union> EN ` Events x \\<union>\n                 {VAL P |P. P (Value x)} \\<union>\n                 {TRUE})) \\<and>\n              ((HA x = HA x) = False \\<longrightarrow> z = None)) =\n          Some y", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       a = HA x \\<Longrightarrow>\n       \\<exists>ST'.\n          (HPT x \\<noteq> {} \\<longrightarrow>\n           (\\<exists>TS\\<in>HPT x.\n               \\<exists>U\\<in>ResolveRacing TS.\n                  ST' = StepStatus x TS U)) \\<and>\n          (HPT x = {} \\<longrightarrow> ST' = StepStatus x {} DefaultUpdate)\n 2. \\<And>x y.\n       (THE z.\n           (HA x = a \\<longrightarrow>\n            z =\n            Some\n             (insert TRUE\n               (IN ` Conf x \\<union> EN ` Events x \\<union>\n                {VAL P |P. P (Value x)}))) \\<and>\n           (HA x \\<noteq> a \\<longrightarrow> z = None)) =\n       Some y \\<Longrightarrow>\n       HA x = a", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       (THE z.\n           (HA x = a \\<longrightarrow>\n            z =\n            Some\n             (insert TRUE\n               (IN ` Conf x \\<union> EN ` Events x \\<union>\n                {VAL P |P. P (Value x)}))) \\<and>\n           (HA x \\<noteq> a \\<longrightarrow> z = None)) =\n       Some y \\<Longrightarrow>\n       HA x = a\n 2. \\<And>x.\n       a = HA x \\<Longrightarrow>\n       \\<exists>ST'.\n          (HPT x \\<noteq> {} \\<longrightarrow>\n           (\\<exists>TS\\<in>HPT x.\n               \\<exists>U\\<in>ResolveRacing TS.\n                  ST' = StepStatus x TS U)) \\<and>\n          (HPT x = {} \\<longrightarrow> ST' = StepStatus x {} DefaultUpdate)", "apply (rename_tac ST S)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ST S.\n       (THE z.\n           (HA ST = a \\<longrightarrow>\n            z =\n            Some\n             (insert TRUE\n               (IN ` Conf ST \\<union> EN ` Events ST \\<union>\n                {VAL P |P. P (Value ST)}))) \\<and>\n           (HA ST \\<noteq> a \\<longrightarrow> z = None)) =\n       Some S \\<Longrightarrow>\n       HA ST = a\n 2. \\<And>x.\n       a = HA x \\<Longrightarrow>\n       \\<exists>ST'.\n          (HPT x \\<noteq> {} \\<longrightarrow>\n           (\\<exists>TS\\<in>HPT x.\n               \\<exists>U\\<in>ResolveRacing TS.\n                  ST' = StepStatus x TS U)) \\<and>\n          (HPT x = {} \\<longrightarrow> ST' = StepStatus x {} DefaultUpdate)", "apply (case_tac \"HA ST = a\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ST S.\n       \\<lbrakk>(THE z.\n                    (HA ST = a \\<longrightarrow>\n                     z =\n                     Some\n                      (insert TRUE\n                        (IN ` Conf ST \\<union> EN ` Events ST \\<union>\n                         {VAL P |P. P (Value ST)}))) \\<and>\n                    (HA ST \\<noteq> a \\<longrightarrow> z = None)) =\n                Some S;\n        HA ST = a\\<rbrakk>\n       \\<Longrightarrow> HA ST = a\n 2. \\<And>ST S.\n       \\<lbrakk>(THE z.\n                    (HA ST = a \\<longrightarrow>\n                     z =\n                     Some\n                      (insert TRUE\n                        (IN ` Conf ST \\<union> EN ` Events ST \\<union>\n                         {VAL P |P. P (Value ST)}))) \\<and>\n                    (HA ST \\<noteq> a \\<longrightarrow> z = None)) =\n                Some S;\n        HA ST \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> HA ST = a\n 3. \\<And>x.\n       a = HA x \\<Longrightarrow>\n       \\<exists>ST'.\n          (HPT x \\<noteq> {} \\<longrightarrow>\n           (\\<exists>TS\\<in>HPT x.\n               \\<exists>U\\<in>ResolveRacing TS.\n                  ST' = StepStatus x TS U)) \\<and>\n          (HPT x = {} \\<longrightarrow> ST' = StepStatus x {} DefaultUpdate)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       a = HA x \\<Longrightarrow>\n       \\<exists>ST'.\n          (HPT x \\<noteq> {} \\<longrightarrow>\n           (\\<exists>TS\\<in>HPT x.\n               \\<exists>U\\<in>ResolveRacing TS.\n                  ST' = StepStatus x TS U)) \\<and>\n          (HPT x = {} \\<longrightarrow> ST' = StepStatus x {} DefaultUpdate)", "apply (rename_tac ST)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ST.\n       a = HA ST \\<Longrightarrow>\n       \\<exists>ST'.\n          (HPT ST \\<noteq> {} \\<longrightarrow>\n           (\\<exists>TS\\<in>HPT ST.\n               \\<exists>U\\<in>ResolveRacing TS.\n                  ST' = StepStatus ST TS U)) \\<and>\n          (HPT ST = {} \\<longrightarrow>\n           ST' = StepStatus ST {} DefaultUpdate)", "apply (case_tac \"HPT ST = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ST.\n       \\<lbrakk>a = HA ST; HPT ST = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ST'.\n                            (HPT ST \\<noteq> {} \\<longrightarrow>\n                             (\\<exists>TS\\<in>HPT ST.\n                                 \\<exists>U\\<in>ResolveRacing TS.\n                                    ST' = StepStatus ST TS U)) \\<and>\n                            (HPT ST = {} \\<longrightarrow>\n                             ST' = StepStatus ST {} DefaultUpdate)\n 2. \\<And>ST.\n       \\<lbrakk>a = HA ST; HPT ST \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ST'.\n                            (HPT ST \\<noteq> {} \\<longrightarrow>\n                             (\\<exists>TS\\<in>HPT ST.\n                                 \\<exists>U\\<in>ResolveRacing TS.\n                                    ST' = StepStatus ST TS U)) \\<and>\n                            (HPT ST = {} \\<longrightarrow>\n                             ST' = StepStatus ST {} DefaultUpdate)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ST x.\n       \\<lbrakk>a = HA ST;\n        \\<forall>ST'.\n           \\<forall>TS\\<in>HPT ST.\n              \\<forall>U\\<in>ResolveRacing TS.\n                 ST' \\<noteq> StepStatus ST TS U;\n        x \\<in> HPT ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac TSS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ST TSS.\n       \\<lbrakk>a = HA ST;\n        \\<forall>ST'.\n           \\<forall>TS\\<in>HPT ST.\n              \\<forall>U\\<in>ResolveRacing TS.\n                 ST' \\<noteq> StepStatus ST TS U;\n        TSS \\<in> HPT ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=\"StepStatus ST TSS (@ u. u : ResolveRacing TSS)\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ST TSS.\n       \\<lbrakk>a = HA ST; TSS \\<in> HPT ST;\n        \\<forall>TS\\<in>HPT ST.\n           \\<forall>U\\<in>ResolveRacing TS.\n              StepStatus ST TSS (SOME u. u \\<in> ResolveRacing TSS) \\<noteq>\n              StepStatus ST TS U\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=TSS in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ST TSS.\n       \\<lbrakk>a = HA ST; TSS \\<in> HPT ST;\n        \\<forall>U\\<in>ResolveRacing TSS.\n           StepStatus ST TSS (SOME u. u \\<in> ResolveRacing TSS) \\<noteq>\n           StepStatus ST TSS U\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>ST TSS.\n       \\<lbrakk>a = HA ST; TSS \\<in> HPT ST; TSS \\<notin> HPT ST\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma LabelFun_LabelFunSem [simp]: \n  \"(LabelFun (HA2Kripke a)) = (LabelFunSem a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LabelFun (HA2Kripke a) = LabelFunSem a", "apply (unfold HA2Kripke_def LabelFun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd \\<circ> snd \\<circ> snd \\<circ> Rep_kripke)\n     (Abs_kripke\n       ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)) =\n    LabelFunSem a", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (snd (Rep_kripke\n                    (Abs_kripke\n                      ({ST. HA ST = a}, {InitStatus a}, StepRelSem a,\n                       LabelFunSem a))))) =\n    LabelFunSem a", "apply (subst Abs_kripke_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)\n    \\<in> kripke\n 2. snd (snd (snd ({ST. HA ST = a}, {InitStatus a}, StepRelSem a,\n                   LabelFunSem a))) =\n    LabelFunSem a", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)\n    \\<in> kripke", "apply (unfold kripke_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)\n    \\<in> {(S, S0, T, L) |S S0 T L. Kripke S S0 T L}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma InitStatuses_InitStatus [simp]:\n   \"(InitStatuses (HA2Kripke a)) = {(InitStatus a)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitStatuses (HA2Kripke a) = {InitStatus a}", "apply (unfold HA2Kripke_def InitStatuses_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> Rep_kripke)\n     (Abs_kripke\n       ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)) =\n    {InitStatus a}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Rep_kripke\n               (Abs_kripke\n                 ({ST. HA ST = a}, {InitStatus a}, StepRelSem a,\n                  LabelFunSem a)))) =\n    {InitStatus a}", "apply (subst Abs_kripke_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)\n    \\<in> kripke\n 2. fst (snd ({ST. HA ST = a}, {InitStatus a}, StepRelSem a,\n              LabelFunSem a)) =\n    {InitStatus a}", "apply (unfold kripke_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)\n    \\<in> {(S, S0, T, L) |S S0 T L. Kripke S S0 T L}\n 2. fst (snd ({ST. HA ST = a}, {InitStatus a}, StepRelSem a,\n              LabelFunSem a)) =\n    {InitStatus a}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Statuses_StatusesOfHA [simp]:\n   \"(Statuses (HA2Kripke a)) = {ST. HA ST = a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Statuses (HA2Kripke a) = {ST. HA ST = a}", "apply (unfold HA2Kripke_def Statuses_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_kripke)\n     (Abs_kripke\n       ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)) =\n    {ST. HA ST = a}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Rep_kripke\n          (Abs_kripke\n            ({ST. HA ST = a}, {InitStatus a}, StepRelSem a,\n             LabelFunSem a))) =\n    {ST. HA ST = a}", "apply (subst Abs_kripke_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)\n    \\<in> kripke\n 2. fst ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a) =\n    {ST. HA ST = a}", "apply (unfold kripke_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)\n    \\<in> {(S, S0, T, L) |S S0 T L. Kripke S S0 T L}\n 2. fst ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a) =\n    {ST. HA ST = a}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma StepRel_StepRelSem [simp]:\n  \"(StepRel (HA2Kripke a)) = (StepRelSem a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StepRel (HA2Kripke a) = StepRelSem a", "apply (unfold HA2Kripke_def StepRel_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> snd \\<circ> snd \\<circ> Rep_kripke)\n     (Abs_kripke\n       ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)) =\n    StepRelSem a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (snd (Rep_kripke\n                    (Abs_kripke\n                      ({ST. HA ST = a}, {InitStatus a}, StepRelSem a,\n                       LabelFunSem a))))) =\n    StepRelSem a", "apply (subst Abs_kripke_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)\n    \\<in> kripke\n 2. fst (snd (snd ({ST. HA ST = a}, {InitStatus a}, StepRelSem a,\n                   LabelFunSem a))) =\n    StepRelSem a", "apply (unfold kripke_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({ST. HA ST = a}, {InitStatus a}, StepRelSem a, LabelFunSem a)\n    \\<in> {(S, S0, T, L) |S S0 T L. Kripke S S0 T L}\n 2. fst (snd (snd ({ST. HA ST = a}, {InitStatus a}, StepRelSem a,\n                   LabelFunSem a))) =\n    StepRelSem a", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TRUE_LabelFunSem [simp]:\n   \"atomar.TRUE \\<in> the (LabelFunSem (HA ST) ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TRUE \\<in> the (LabelFunSem (HA ST) ST)", "apply (unfold LabelFunSem_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TRUE\n    \\<in> the (if HA ST = HA ST\n               then Some\n                     (IN ` Conf ST \\<union> EN ` Events ST \\<union>\n                      {VAL P |P. P (Value ST)} \\<union>\n                      {TRUE})\n               else None)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FALSE_LabelFunSem [simp]:\n   \"atomar.FALSE \\<notin> the (LabelFunSem (HA ST) ST)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FALSE \\<notin> the (LabelFunSem (HA ST) ST)", "apply (unfold LabelFunSem_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FALSE\n    \\<notin> the (if HA ST = HA ST\n                  then Some\n                        (IN ` Conf ST \\<union> EN ` Events ST \\<union>\n                         {VAL P |P. P (Value ST)} \\<union>\n                         {TRUE})\n                  else None)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Conf_LabelFunSem [simp]:\n   \"((IN S) \\<in> the (LabelFunSem (HA ST) ST)) = (S \\<in> (Conf ST))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (IN S \\<in> the (LabelFunSem (HA ST) ST)) = (S \\<in> Conf ST)", "apply (unfold LabelFunSem_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (IN S\n     \\<in> the (if HA ST = HA ST\n                then Some\n                      (IN ` Conf ST \\<union> EN ` Events ST \\<union>\n                       {VAL P |P. P (Value ST)} \\<union>\n                       {TRUE})\n                else None)) =\n    (S \\<in> Conf ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Events_LabelFunSem [simp]:\n  \"((EN S) \\<in> the (LabelFunSem (HA ST) ST)) = (S \\<in> (Events ST))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (EN S \\<in> the (LabelFunSem (HA ST) ST)) = (S \\<in> Events ST)", "apply (unfold LabelFunSem_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (EN S\n     \\<in> the (if HA ST = HA ST\n                then Some\n                      (IN ` Conf ST \\<union> EN ` Events ST \\<union>\n                       {VAL P |P. P (Value ST)} \\<union>\n                       {TRUE})\n                else None)) =\n    (S \\<in> Events ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Value_LabelFunSem [simp]:\n  \"((VAL P) \\<in> the (LabelFunSem (HA ST) ST)) = (P (Value ST))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (VAL P \\<in> the (LabelFunSem (HA ST) ST)) = P (Value ST)", "apply (unfold LabelFunSem_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (VAL P\n     \\<in> the (if HA ST = HA ST\n                then Some\n                      (IN ` Conf ST \\<union> EN ` Events ST \\<union>\n                       {VAL P |P. P (Value ST)} \\<union>\n                       {TRUE})\n                else None)) =\n    P (Value ST)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AtomTRUE_EvalCTLHA [simp]:\n  \"a |=H= (Atom (atomar.TRUE))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a |=H= Atom TRUE", "apply (unfold eval_ctl_HA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HA2Kripke a,InitStatus a |=c= Atom TRUE", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. TRUE \\<in> the (LabelFunSem a (InitStatus a))", "apply (subst HA_InitStatus [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. TRUE \\<in> the (LabelFunSem (HA (InitStatus a)) (InitStatus a))", "apply (rule TRUE_LabelFunSem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AtomFalse_EvalCTLHA [simp]:\n  \"\\<not> a |=H= (Atom (atomar.FALSE))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> a |=H= Atom FALSE", "apply (unfold eval_ctl_HA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> HA2Kripke a,InitStatus a |=c= Atom FALSE", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. FALSE \\<in> the (LabelFunSem a (InitStatus a)) \\<Longrightarrow> False", "apply (subst (asm) HA_InitStatus [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. FALSE\n    \\<in> the (LabelFunSem (HA (InitStatus a))\n                (InitStatus a)) \\<Longrightarrow>\n    False", "apply (simp only: FALSE_LabelFunSem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Events_InitStatus_EvalCTLHA [simp]:\n  \"(a |=H= (Atom (EN S))) = (S \\<in> (Events (InitStatus a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a |=H= Atom (EN S) = (S \\<in> Events (InitStatus a))", "apply (unfold eval_ctl_HA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HA2Kripke a,InitStatus a |=c= Atom (EN S) =\n    (S \\<in> Events (InitStatus a))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (EN S \\<in> the (LabelFunSem a (InitStatus a))) =\n    (S \\<in> Events (InitStatus a))", "apply (subst HA_InitStatus [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (EN S \\<in> the (LabelFunSem (HA (InitStatus a)) (InitStatus a))) =\n    (S \\<in> Events (InitStatus a))", "apply (rule Events_LabelFunSem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Conf_InitStatus_EvalCTLHA [simp]:\n  \"(a |=H= (Atom (IN S))) = (S \\<in> (Conf (InitStatus a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a |=H= Atom (IN S) = (S \\<in> Conf (InitStatus a))", "apply (unfold eval_ctl_HA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HA2Kripke a,InitStatus a |=c= Atom (IN S) =\n    (S \\<in> Conf (InitStatus a))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (IN S \\<in> the (LabelFunSem a (InitStatus a))) = (S \\<in> InitConf a)", "apply (subst HA_InitStatus [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (IN S \\<in> the (LabelFunSem (HA (InitStatus a)) (InitStatus a))) =\n    (S \\<in> InitConf a)", "apply (subst Conf_LabelFunSem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (S \\<in> Conf (InitStatus a)) = (S \\<in> InitConf a)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HAInitValue_EvalCTLHA [simp]:\n  \"(a |=H= (Atom (VAL P))) = (P (HAInitValue a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a |=H= Atom (VAL P) = P (HAInitValue a)", "apply (unfold eval_ctl_HA_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HA2Kripke a,InitStatus a |=c= Atom (VAL P) = P (HAInitValue a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (VAL P \\<in> the (LabelFunSem a (InitStatus a))) = P (HAInitValue a)", "apply (subst HA_InitStatus [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (VAL P \\<in> the (LabelFunSem (HA (InitStatus a)) (InitStatus a))) =\n    P (HAInitValue a)", "apply (subst Value_LabelFunSem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (Value (InitStatus a)) = P (HAInitValue a)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}