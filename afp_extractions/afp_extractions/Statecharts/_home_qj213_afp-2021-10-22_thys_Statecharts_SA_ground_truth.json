{"file_name": "/home/qj213/afp-2021-10-22/thys/Statecharts/SA.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Statecharts", "problem_names": ["lemma SeqAuto_EmptySet:\n \"({@x .True}, (@x .True), {}, {}) \\<in> {(S,I,L,D) | S I L D. SeqAuto S I L D}\"", "lemma Rep_seqauto_tuple:\n  \"Rep_seqauto SA = (States SA, InitState SA, Labels SA, Delta SA)\"", "lemma Rep_seqauto_select:\n  \"(States SA,InitState SA,Labels SA,Delta SA) \\<in>  seqauto\"", "lemma SeqAuto_select:\n  \"SeqAuto (States SA) (InitState SA) (Labels SA) (Delta SA)\"", "lemma neq_States [simp]:\n  \"States SA \\<noteq> {}\"", "lemma SA_States_disjunct :\n \"(States A) \\<inter> (States A') = {} \\<Longrightarrow> A' \\<noteq> A\"", "lemma SA_States_disjunct2 : \n \"\\<lbrakk> (States A) \\<inter> C = {}; States B \\<subseteq> C \\<rbrakk> \\<Longrightarrow> B \\<noteq> A\"", "lemma SA_States_disjunct3 : \n \"\\<lbrakk> C \\<inter> States A = {}; States B \\<subseteq> C \\<rbrakk> \\<Longrightarrow>  States A \\<inter> States B = {}\"", "lemma EX_State_SA [simp]:\n  \"\\<exists> S. S \\<in> States SA\"", "lemma finite_States [simp]:\n  \"finite (States A)\"", "lemma finite_Delta [simp]: \n  \"finite (Delta A)\"", "lemma InitState_States [simp]:\n  \"InitState A \\<in> States A\"", "lemma SeqAuto_EmptySet_States [simp]:\n \"(States (Abs_seqauto ({@x. True}, (@x. True), {}, {}))) = {(@x. True)}\"", "lemma SeqAuto_EmptySet_SAEvents [simp]:\n \"(SAEvents (Abs_seqauto ({@x. True}, (@x. True), {}, {}))) = {}\"", "lemma Label_Delta_subset [simp]:\n  \"(Label (Delta SA)) \\<subseteq> Labels SA\"", "lemma Target_SAs_Delta_States:\n  \"Target (\\<Union>(Delta ` (SAs HA))) \\<subseteq> \\<Union>(States ` (SAs HA))\"", "lemma States_Int_not_mem:\n \"(\\<Union>(States ` F) Int States SA) = {} \\<Longrightarrow> SA \\<notin> F\"", "lemma Delta_target_States [simp]:\n  \"\\<lbrakk> T \\<in> Delta A\\<rbrakk> \\<Longrightarrow> target T \\<in> States A\"", "lemma Delta_source_States [simp]:\n  \"\\<lbrakk> T \\<in> Delta A \\<rbrakk> \\<Longrightarrow> source T \\<in> States A\""], "translations": [["", "lemma SeqAuto_EmptySet:\n \"({@x .True}, (@x .True), {}, {}) \\<in> {(S,I,L,D) | S I L D. SeqAuto S I L D}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({SOME x. True}, SOME x. True, {}, {})\n    \\<in> {(S, I, L, D) |S I L D. SeqAuto S I L D}", "by (unfold SeqAuto_def, auto)"], ["", "definition\n  \"seqauto =\n    { (S,I,L,D) |\n              (S::'s set)\n              (I::'s)\n              (L::(('s,'e,'d)label) set)\n              (D::(('s,'e,'d)trans) set).\n             SeqAuto S I L D}\""], ["", "typedef ('s,'e,'d) seqauto =\n    \"seqauto :: ('s set * 's * (('s,'e,'d)label) set * (('s,'e,'d)trans) set) set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> seqauto", "unfolding seqauto_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {(S, I, L, D) |S I L D. SeqAuto S I L D}", "apply (rule exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ?x \\<in> {(S, I, L, D) |S I L D. SeqAuto S I L D}", "apply (rule SeqAuto_EmptySet)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n States :: \"(('s,'e,'d)seqauto) => 's set\" where\n \"States = fst o Rep_seqauto\""], ["", "definition\n InitState :: \"(('s,'e,'d)seqauto) => 's\" where\n \"InitState = fst o snd o Rep_seqauto\""], ["", "definition\n Labels :: \"(('s,'e,'d)seqauto) => (('s,'e,'d)label) set\" where\n \"Labels = fst o snd o snd o Rep_seqauto\""], ["", "definition\n Delta :: \"(('s,'e,'d)seqauto) => (('s,'e,'d)trans) set\" where\n \"Delta = snd o snd o snd o Rep_seqauto\""], ["", "definition\n SAEvents :: \"(('s,'e,'d)seqauto) => 'e set\" where\n \"SAEvents SA = (\\<Union> l \\<in> Label (Delta SA). (fst (action l)) \\<union> (ExprEvents (expr l)))\""], ["", "lemma Rep_seqauto_tuple:\n  \"Rep_seqauto SA = (States SA, InitState SA, Labels SA, Delta SA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_seqauto SA = (States SA, InitState SA, Labels SA, Delta SA)", "by (unfold States_def InitState_def Labels_def Delta_def, auto)"], ["", "lemma Rep_seqauto_select:\n  \"(States SA,InitState SA,Labels SA,Delta SA) \\<in>  seqauto\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (States SA, InitState SA, Labels SA, Delta SA) \\<in> seqauto", "by (rule Rep_seqauto_tuple [THEN subst], rule Rep_seqauto)"], ["", "lemma SeqAuto_select:\n  \"SeqAuto (States SA) (InitState SA) (Labels SA) (Delta SA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SeqAuto (States SA) (InitState SA) (Labels SA) (Delta SA)", "by (cut_tac SA=SA in Rep_seqauto_select, unfold seqauto_def, auto)"], ["", "lemma neq_States [simp]:\n  \"States SA \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States SA \\<noteq> {}", "apply (cut_tac Rep_seqauto_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n    \\<in> seqauto \\<Longrightarrow>\n    States SA \\<noteq> {}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n             \\<in> seqauto;\n     States SA = {}\\<rbrakk>\n    \\<Longrightarrow> False", "apply (unfold seqauto_def SeqAuto_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n             \\<in> {(S, I, L, D) |S I L D.\n                    I \\<in> S \\<and>\n                    S \\<noteq> {} \\<and>\n                    finite S \\<and>\n                    finite D \\<and>\n                    (\\<forall>(s, l, t)\\<in>D.\n                        s \\<in> S \\<and> t \\<in> S \\<and> l \\<in> L)};\n     States SA = {}\\<rbrakk>\n    \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SA_States_disjunct :\n \"(States A) \\<inter> (States A') = {} \\<Longrightarrow> A' \\<noteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States A \\<inter> States A' = {} \\<Longrightarrow> A' \\<noteq> A", "by auto"], ["", "lemma SA_States_disjunct2 : \n \"\\<lbrakk> (States A) \\<inter> C = {}; States B \\<subseteq> C \\<rbrakk> \\<Longrightarrow> B \\<noteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States A \\<inter> C = {}; States B \\<subseteq> C\\<rbrakk>\n    \\<Longrightarrow> B \\<noteq> A", "apply (rule SA_States_disjunct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>States A \\<inter> C = {}; States B \\<subseteq> C\\<rbrakk>\n    \\<Longrightarrow> States A \\<inter> States B = {}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SA_States_disjunct3 : \n \"\\<lbrakk> C \\<inter> States A = {}; States B \\<subseteq> C \\<rbrakk> \\<Longrightarrow>  States A \\<inter> States B = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<inter> States A = {}; States B \\<subseteq> C\\<rbrakk>\n    \\<Longrightarrow> States A \\<inter> States B = {}", "apply (cut_tac SA=B in neq_States)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<inter> States A = {}; States B \\<subseteq> C;\n     States B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> States A \\<inter> States B = {}", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma EX_State_SA [simp]:\n  \"\\<exists> S. S \\<in> States SA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S. S \\<in> States SA", "apply (cut_tac Rep_seqauto_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n    \\<in> seqauto \\<Longrightarrow>\n    \\<exists>S. S \\<in> States SA", "apply (unfold seqauto_def SeqAuto_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and>\n               t \\<in> S \\<and> l \\<in> L)} \\<Longrightarrow>\n    \\<exists>S. S \\<in> States SA", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_States [simp]:\n  \"finite (States A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (States A)", "apply (cut_tac Rep_seqauto_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n    \\<in> seqauto \\<Longrightarrow>\n    finite (States A)", "apply (unfold seqauto_def SeqAuto_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and>\n               t \\<in> S \\<and> l \\<in> L)} \\<Longrightarrow>\n    finite (States A)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_Delta [simp]: \n  \"finite (Delta A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Delta A)", "apply (cut_tac Rep_seqauto_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n    \\<in> seqauto \\<Longrightarrow>\n    finite (Delta A)", "apply (unfold seqauto_def SeqAuto_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and>\n               t \\<in> S \\<and> l \\<in> L)} \\<Longrightarrow>\n    finite (Delta A)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma InitState_States [simp]:\n  \"InitState A \\<in> States A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. InitState A \\<in> States A", "apply (cut_tac Rep_seqauto_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n    \\<in> seqauto \\<Longrightarrow>\n    InitState A \\<in> States A", "apply (unfold seqauto_def SeqAuto_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (States ?SA1, InitState ?SA1, Labels ?SA1, Delta ?SA1)\n    \\<in> {(S, I, L, D) |S I L D.\n           I \\<in> S \\<and>\n           S \\<noteq> {} \\<and>\n           finite S \\<and>\n           finite D \\<and>\n           (\\<forall>(s, l, t)\\<in>D.\n               s \\<in> S \\<and>\n               t \\<in> S \\<and> l \\<in> L)} \\<Longrightarrow>\n    InitState A \\<in> States A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SeqAuto_EmptySet_States [simp]:\n \"(States (Abs_seqauto ({@x. True}, (@x. True), {}, {}))) = {(@x. True)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. States (Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})) =\n    {SOME x. True}", "apply (unfold States_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<circ> Rep_seqauto)\n     (Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})) =\n    {SOME x. True}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Rep_seqauto (Abs_seqauto ({SOME x. True}, SOME x. True, {}, {}))) =\n    {SOME x. True}", "apply (subst Abs_seqauto_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({SOME x. True}, SOME x. True, {}, {}) \\<in> seqauto\n 2. fst ({SOME x. True}, SOME x. True, {}, {}) = {SOME x. True}", "apply (unfold seqauto_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({SOME x. True}, SOME x. True, {}, {})\n    \\<in> {(S, I, L, D) |S I L D. SeqAuto S I L D}\n 2. fst ({SOME x. True}, SOME x. True, {}, {}) = {SOME x. True}", "apply (rule SeqAuto_EmptySet)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ({SOME x. True}, SOME x. True, {}, {}) = {SOME x. True}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SeqAuto_EmptySet_SAEvents [simp]:\n \"(SAEvents (Abs_seqauto ({@x. True}, (@x. True), {}, {}))) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SAEvents (Abs_seqauto ({SOME x. True}, SOME x. True, {}, {})) = {}", "apply (unfold SAEvents_def Delta_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>l\\<in>Label\n                    ((snd \\<circ> snd \\<circ> snd \\<circ> Rep_seqauto)\n                      (Abs_seqauto ({SOME x. True}, SOME x. True, {}, {}))).\n        fst (action l) \\<union> ExprEvents (expr l)) =\n    {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Label\n                    (snd (snd (snd (Rep_seqauto\n                                     (Abs_seqauto\n ({SOME x. True}, SOME x. True, {}, {})))))).\n       fst (action x) = {} \\<and> ExprEvents (expr x) = {}", "apply (subst Abs_seqauto_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({SOME x. True}, SOME x. True, {}, {}) \\<in> seqauto\n 2. \\<forall>x\\<in>Label\n                    (snd (snd (snd ({SOME x. True}, SOME x. True, {},\n                                    {})))).\n       fst (action x) = {} \\<and> ExprEvents (expr x) = {}", "apply (unfold seqauto_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ({SOME x. True}, SOME x. True, {}, {})\n    \\<in> {(S, I, L, D) |S I L D. SeqAuto S I L D}\n 2. \\<forall>x\\<in>Label\n                    (snd (snd (snd ({SOME x. True}, SOME x. True, {},\n                                    {})))).\n       fst (action x) = {} \\<and> ExprEvents (expr x) = {}", "apply (rule SeqAuto_EmptySet)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Label\n                    (snd (snd (snd ({SOME x. True}, SOME x. True, {},\n                                    {})))).\n       fst (action x) = {} \\<and> ExprEvents (expr x) = {}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Label_Delta_subset [simp]:\n  \"(Label (Delta SA)) \\<subseteq> Labels SA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Label (Delta SA) \\<subseteq> Labels SA", "apply (unfold Label_def label_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t. fst (snd t)) ` Delta SA \\<subseteq> Labels SA", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab b ac ad ba.\n       (ac, (ad, aa, ab, b), ba) \\<in> Delta SA \\<Longrightarrow>\n       (ad, aa, ab, b) \\<in> Labels SA", "apply (cut_tac SA=SA in SeqAuto_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab b ac ad ba.\n       \\<lbrakk>(ac, (ad, aa, ab, b), ba) \\<in> Delta SA;\n        SeqAuto (States SA) (InitState SA) (Labels SA) (Delta SA)\\<rbrakk>\n       \\<Longrightarrow> (ad, aa, ab, b) \\<in> Labels SA", "apply (unfold SeqAuto_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab b ac ad ba.\n       \\<lbrakk>(ac, (ad, aa, ab, b), ba) \\<in> Delta SA;\n        InitState SA \\<in> States SA \\<and>\n        States SA \\<noteq> {} \\<and>\n        finite (States SA) \\<and>\n        finite (Delta SA) \\<and>\n        (\\<forall>(s, l, t)\\<in>Delta SA.\n            s \\<in> States SA \\<and>\n            t \\<in> States SA \\<and> l \\<in> Labels SA)\\<rbrakk>\n       \\<Longrightarrow> (ad, aa, ab, b) \\<in> Labels SA", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Target_SAs_Delta_States:\n  \"Target (\\<Union>(Delta ` (SAs HA))) \\<subseteq> \\<Union>(States ` (SAs HA))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Target (\\<Union> (Delta ` SAs HA))\n    \\<subseteq> \\<Union> (States ` SAs HA)", "apply (unfold image_def Target_def target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>\\<Union> {y. \\<exists>x\\<in>SAs HA. y = Delta x}.\n           y = snd (snd x)}\n    \\<subseteq> \\<Union> {y. \\<exists>x\\<in>SAs HA. y = States x}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa a aa ab ac b ba.\n       \\<lbrakk>xa \\<in> SAs HA;\n        (a, (aa, ab, ac, b), ba) \\<in> Delta xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>xa\\<in>SAs HA. x = States xa) \\<and>\n                            ba \\<in> x", "apply (rename_tac SA Source Trigger Guard Action Update Target)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA Source Trigger Guard Action Update Target.\n       \\<lbrakk>SA \\<in> SAs HA;\n        (Source, (Trigger, Guard, Action, Update), Target)\n        \\<in> Delta SA\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>xa\\<in>SAs HA. x = States xa) \\<and>\n                            Target \\<in> x", "apply (cut_tac SA=SA in SeqAuto_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA Source Trigger Guard Action Update Target.\n       \\<lbrakk>SA \\<in> SAs HA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        SeqAuto (States SA) (InitState SA) (Labels SA) (Delta SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>xa\\<in>SAs HA. x = States xa) \\<and>\n                            Target \\<in> x", "apply (unfold SeqAuto_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>SA Source Trigger Guard Action Update Target.\n       \\<lbrakk>SA \\<in> SAs HA;\n        (Source, (Trigger, Guard, Action, Update), Target) \\<in> Delta SA;\n        InitState SA \\<in> States SA \\<and>\n        States SA \\<noteq> {} \\<and>\n        finite (States SA) \\<and>\n        finite (Delta SA) \\<and>\n        (\\<forall>(s, l, t)\\<in>Delta SA.\n            s \\<in> States SA \\<and>\n            t \\<in> States SA \\<and> l \\<in> Labels SA)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>xa\\<in>SAs HA. x = States xa) \\<and>\n                            Target \\<in> x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma States_Int_not_mem:\n \"(\\<Union>(States ` F) Int States SA) = {} \\<Longrightarrow> SA \\<notin> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (States ` F) \\<inter> States SA = {} \\<Longrightarrow>\n    SA \\<notin> F", "apply (unfold Int_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> \\<Union> (States ` F). x \\<in> States SA} =\n    {} \\<Longrightarrow>\n    SA \\<notin> F", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                (\\<forall>xa\\<in>F. x \\<notin> States xa) \\<or>\n                x \\<notin> States SA;\n     SA \\<in> F\\<rbrakk>\n    \\<Longrightarrow> False", "apply (subgoal_tac \"\\<exists> S. S \\<in> States SA\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                (\\<forall>xa\\<in>F. x \\<notin> States xa) \\<or>\n                x \\<notin> States SA;\n     SA \\<in> F; \\<exists>S. S \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>x.\n                (\\<forall>xa\\<in>F. x \\<notin> States xa) \\<or>\n                x \\<notin> States SA;\n     SA \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S. S \\<in> States SA", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x.\n                (\\<forall>xa\\<in>F. x \\<notin> States xa) \\<or>\n                x \\<notin> States SA;\n     SA \\<in> F\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S. S \\<in> States SA\n 2. \\<lbrakk>\\<forall>x.\n                (\\<forall>xa\\<in>F. x \\<notin> States xa) \\<or>\n                x \\<notin> States SA;\n     SA \\<in> F; \\<exists>S. S \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule EX_State_SA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                (\\<forall>xa\\<in>F. x \\<notin> States xa) \\<or>\n                x \\<notin> States SA;\n     SA \\<in> F; \\<exists>S. S \\<in> States SA\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>xa\\<in>F. x \\<notin> States xa) \\<or>\n                   x \\<notin> States SA;\n        SA \\<in> F; S \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>xa\\<in>F. x \\<notin> States xa) \\<or>\n                   x \\<notin> States SA;\n        SA \\<in> F; T \\<in> States SA\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=T in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>SA \\<in> F; T \\<in> States SA;\n        (\\<forall>x\\<in>F. T \\<notin> States x) \\<or>\n        T \\<notin> States SA\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Delta_target_States [simp]:\n  \"\\<lbrakk> T \\<in> Delta A\\<rbrakk> \\<Longrightarrow> target T \\<in> States A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<in> Delta A \\<Longrightarrow> target T \\<in> States A", "apply (cut_tac SA=A in SeqAuto_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<in> Delta A;\n     SeqAuto (States A) (InitState A) (Labels A) (Delta A)\\<rbrakk>\n    \\<Longrightarrow> target T \\<in> States A", "apply (unfold SeqAuto_def source_def target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<in> Delta A;\n     InitState A \\<in> States A \\<and>\n     States A \\<noteq> {} \\<and>\n     finite (States A) \\<and>\n     finite (Delta A) \\<and>\n     (\\<forall>(s, l, t)\\<in>Delta A.\n         s \\<in> States A \\<and>\n         t \\<in> States A \\<and> l \\<in> Labels A)\\<rbrakk>\n    \\<Longrightarrow> snd (snd T) \\<in> States A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Delta_source_States [simp]:\n  \"\\<lbrakk> T \\<in> Delta A \\<rbrakk> \\<Longrightarrow> source T \\<in> States A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<in> Delta A \\<Longrightarrow> source T \\<in> States A", "apply (cut_tac SA=A in SeqAuto_select)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<in> Delta A;\n     SeqAuto (States A) (InitState A) (Labels A) (Delta A)\\<rbrakk>\n    \\<Longrightarrow> source T \\<in> States A", "apply (unfold SeqAuto_def source_def target_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<in> Delta A;\n     InitState A \\<in> States A \\<and>\n     States A \\<noteq> {} \\<and>\n     finite (States A) \\<and>\n     finite (Delta A) \\<and>\n     (\\<forall>(s, l, t)\\<in>Delta A.\n         s \\<in> States A \\<and>\n         t \\<in> States A \\<and> l \\<in> Labels A)\\<rbrakk>\n    \\<Longrightarrow> fst T \\<in> States A", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}