{"file_name": "/home/qj213/afp-2021-10-22/thys/Presburger-Automata/Exec.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Presburger-Automata", "problem_names": ["lemma [code_unfold]: \"(\\<longrightarrow>) = (\\<lambda>P. (\\<or>) (\\<not> P))\"", "lemma \"\\<forall>x. (\\<exists>xa. int xa - int x = 5) \\<or> (\\<forall>xa xb. \\<not> 6 \\<le> int xb \\<longrightarrow> int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)\"", "lemma \"\\<forall>x xa xb. \\<not> 2 \\<le> int xb \\<longrightarrow> int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n  (\\<forall>xb xc. \\<not> 2 \\<le> int xc \\<longrightarrow> int xc + (2 * int xb - int x) = 0 \\<longrightarrow> (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)\""], "translations": [["", "lemma [code_unfold]: \"(\\<longrightarrow>) = (\\<lambda>P. (\\<or>) (\\<not> P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<longrightarrow>) = (\\<lambda>P. (\\<or>) (\\<not> P))", "by (simp add: fun_eq_iff)"], ["", "lemma \"\\<forall>x. (\\<exists>xa. int xa - int x = 5) \\<or> (\\<forall>xa xb. \\<not> 6 \\<le> int xb \\<longrightarrow> int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>xa. int xa - int x = 5) \\<or>\n       (\\<forall>xa xb.\n           \\<not> 6 \\<le> int xb \\<longrightarrow>\n           int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>xa. int xa - int x = 5) \\<or>\n       (\\<forall>xa xb.\n           \\<not> 6 \\<le> int xb \\<longrightarrow>\n           int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)", "have \"?thesis = eval_pf (Forall (Exist (Or (Eq [1, -1] 5)\n    (Forall (Forall (Imp (Neg (Le [-1, 0] (- 6))) (Imp (Eq [1, 6, 0, -1] 0) (Eq [0, 1] 1)))))))) []\"\n    (is \"_ = eval_pf ?P []\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        (\\<exists>xa. int xa - int x = 5) \\<or>\n        (\\<forall>xa xb.\n            \\<not> 6 \\<le> int xb \\<longrightarrow>\n            int xb + (6 * int xa - int x) = 0 \\<longrightarrow>\n            int xa = 1)) =\n    eval_pf\n     (Forall\n       (Exist\n         (Or (Eq [1, - 1] 5)\n           (Forall\n             (Forall\n               (Imp (Neg (Le [- 1, 0] (- 6)))\n                 (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1))))))))\n     []", "by simp"], ["proof (state)\nthis:\n  (\\<forall>x.\n      (\\<exists>xa. int xa - int x = 5) \\<or>\n      (\\<forall>xa xb.\n          \\<not> 6 \\<le> int xb \\<longrightarrow>\n          int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)) =\n  eval_pf\n   (Forall\n     (Exist\n       (Or (Eq [1, - 1] 5)\n         (Forall\n           (Forall\n             (Imp (Neg (Le [- 1, 0] (- 6)))\n               (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>xa. int xa - int x = 5) \\<or>\n       (\\<forall>xa xb.\n           \\<not> 6 \\<le> int xb \\<longrightarrow>\n           int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)", "also"], ["proof (state)\nthis:\n  (\\<forall>x.\n      (\\<exists>xa. int xa - int x = 5) \\<or>\n      (\\<forall>xa xb.\n          \\<not> 6 \\<le> int xb \\<longrightarrow>\n          int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)) =\n  eval_pf\n   (Forall\n     (Exist\n       (Or (Eq [1, - 1] 5)\n         (Forall\n           (Forall\n             (Imp (Neg (Le [- 1, 0] (- 6)))\n               (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>xa. int xa - int x = 5) \\<or>\n       (\\<forall>xa xb.\n           \\<not> 6 \\<le> int xb \\<longrightarrow>\n           int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)", "have \"\\<dots> = dfa_accepts (dfa_of_pf 0 ?P) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_pf\n     (Forall\n       (Exist\n         (Or (Eq [1, - 1] 5)\n           (Forall\n             (Forall\n               (Imp (Neg (Le [- 1, 0] (- 6)))\n                 (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1))))))))\n     [] =\n    dfa_accepts\n     (dfa_of_pf 0\n       (Forall\n         (Exist\n           (Or (Eq [1, - 1] 5)\n             (Forall\n               (Forall\n                 (Imp (Neg (Le [- 1, 0] (- 6)))\n                   (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1)))))))))\n     []", "by (simp add: dfa_of_pf_correctness del: dfa_of_pf.simps)"], ["proof (state)\nthis:\n  eval_pf\n   (Forall\n     (Exist\n       (Or (Eq [1, - 1] 5)\n         (Forall\n           (Forall\n             (Imp (Neg (Le [- 1, 0] (- 6)))\n               (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1))))))))\n   [] =\n  dfa_accepts\n   (dfa_of_pf 0\n     (Forall\n       (Exist\n         (Or (Eq [1, - 1] 5)\n           (Forall\n             (Forall\n               (Imp (Neg (Le [- 1, 0] (- 6)))\n                 (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1)))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>xa. int xa - int x = 5) \\<or>\n       (\\<forall>xa xb.\n           \\<not> 6 \\<le> int xb \\<longrightarrow>\n           int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)", "also"], ["proof (state)\nthis:\n  eval_pf\n   (Forall\n     (Exist\n       (Or (Eq [1, - 1] 5)\n         (Forall\n           (Forall\n             (Imp (Neg (Le [- 1, 0] (- 6)))\n               (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1))))))))\n   [] =\n  dfa_accepts\n   (dfa_of_pf 0\n     (Forall\n       (Exist\n         (Or (Eq [1, - 1] 5)\n           (Forall\n             (Forall\n               (Imp (Neg (Le [- 1, 0] (- 6)))\n                 (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1)))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>xa. int xa - int x = 5) \\<or>\n       (\\<forall>xa xb.\n           \\<not> 6 \\<le> int xb \\<longrightarrow>\n           int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)", "have \"\\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfa_accepts\n     (dfa_of_pf 0\n       (Forall\n         (Exist\n           (Or (Eq [1, - 1] 5)\n             (Forall\n               (Forall\n                 (Imp (Neg (Le [- 1, 0] (- 6)))\n                   (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1)))))))))\n     []", "by eval"], ["proof (state)\nthis:\n  dfa_accepts\n   (dfa_of_pf 0\n     (Forall\n       (Exist\n         (Or (Eq [1, - 1] 5)\n           (Forall\n             (Forall\n               (Imp (Neg (Le [- 1, 0] (- 6)))\n                 (Imp (Eq [1, 6, 0, - 1] 0) (Eq [0, 1] 1)))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>xa. int xa - int x = 5) \\<or>\n       (\\<forall>xa xb.\n           \\<not> 6 \\<le> int xb \\<longrightarrow>\n           int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)", "finally"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     (\\<exists>xa. int xa - int x = 5) \\<or>\n     (\\<forall>xa xb.\n         \\<not> 6 \\<le> int xb \\<longrightarrow>\n         int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     (\\<exists>xa. int xa - int x = 5) \\<or>\n     (\\<forall>xa xb.\n         \\<not> 6 \\<le> int xb \\<longrightarrow>\n         int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<exists>xa. int xa - int x = 5) \\<or>\n       (\\<forall>xa xb.\n           \\<not> 6 \\<le> int xb \\<longrightarrow>\n           int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)", "."], ["proof (state)\nthis:\n  \\<forall>x.\n     (\\<exists>xa. int xa - int x = 5) \\<or>\n     (\\<forall>xa xb.\n         \\<not> 6 \\<le> int xb \\<longrightarrow>\n         int xb + (6 * int xa - int x) = 0 \\<longrightarrow> int xa = 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"\\<forall>x xa xb. \\<not> 2 \\<le> int xb \\<longrightarrow> int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n  (\\<forall>xb xc. \\<not> 2 \\<le> int xc \\<longrightarrow> int xc + (2 * int xb - int x) = 0 \\<longrightarrow> (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa xb.\n       \\<not> 2 \\<le> int xb \\<longrightarrow>\n       int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n       (\\<forall>xb xc.\n           \\<not> 2 \\<le> int xc \\<longrightarrow>\n           int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n           (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x xa xb.\n       \\<not> 2 \\<le> int xb \\<longrightarrow>\n       int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n       (\\<forall>xb xc.\n           \\<not> 2 \\<le> int xc \\<longrightarrow>\n           int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n           (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)", "have \"?thesis = eval_pf (Forall (Forall (Forall (Imp (Neg (Le [-1] (- 2)))\n    (Imp (Eq [1, 2, -1] 1) (Forall (Forall (Imp (Neg (Le [-1] (- 2)))\n      (Imp (Eq [1, 2, 0, 0, -1] 0) (Imp (Exist (Eq [2, 0, 0, 0, 0, -1] 0)) (Eq [0, 1, 0, -1] 0))))))))))) []\"\n    (is \"_ = eval_pf ?P []\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x xa xb.\n        \\<not> 2 \\<le> int xb \\<longrightarrow>\n        int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n        (\\<forall>xb xc.\n            \\<not> 2 \\<le> int xc \\<longrightarrow>\n            int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n            (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)) =\n    eval_pf\n     (Forall\n       (Forall\n         (Forall\n           (Imp (Neg (Le [- 1] (- 2)))\n             (Imp (Eq [1, 2, - 1] 1)\n               (Forall\n                 (Forall\n                   (Imp (Neg (Le [- 1] (- 2)))\n                     (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                       (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                         (Eq [0, 1, 0, - 1] 0)))))))))))\n     []", "by simp"], ["proof (state)\nthis:\n  (\\<forall>x xa xb.\n      \\<not> 2 \\<le> int xb \\<longrightarrow>\n      int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n      (\\<forall>xb xc.\n          \\<not> 2 \\<le> int xc \\<longrightarrow>\n          int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n          (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)) =\n  eval_pf\n   (Forall\n     (Forall\n       (Forall\n         (Imp (Neg (Le [- 1] (- 2)))\n           (Imp (Eq [1, 2, - 1] 1)\n             (Forall\n               (Forall\n                 (Imp (Neg (Le [- 1] (- 2)))\n                   (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                     (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                       (Eq [0, 1, 0, - 1] 0)))))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x xa xb.\n       \\<not> 2 \\<le> int xb \\<longrightarrow>\n       int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n       (\\<forall>xb xc.\n           \\<not> 2 \\<le> int xc \\<longrightarrow>\n           int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n           (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)", "also"], ["proof (state)\nthis:\n  (\\<forall>x xa xb.\n      \\<not> 2 \\<le> int xb \\<longrightarrow>\n      int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n      (\\<forall>xb xc.\n          \\<not> 2 \\<le> int xc \\<longrightarrow>\n          int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n          (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)) =\n  eval_pf\n   (Forall\n     (Forall\n       (Forall\n         (Imp (Neg (Le [- 1] (- 2)))\n           (Imp (Eq [1, 2, - 1] 1)\n             (Forall\n               (Forall\n                 (Imp (Neg (Le [- 1] (- 2)))\n                   (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                     (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                       (Eq [0, 1, 0, - 1] 0)))))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x xa xb.\n       \\<not> 2 \\<le> int xb \\<longrightarrow>\n       int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n       (\\<forall>xb xc.\n           \\<not> 2 \\<le> int xc \\<longrightarrow>\n           int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n           (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)", "have \"\\<dots> = dfa_accepts (dfa_of_pf 0 ?P) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_pf\n     (Forall\n       (Forall\n         (Forall\n           (Imp (Neg (Le [- 1] (- 2)))\n             (Imp (Eq [1, 2, - 1] 1)\n               (Forall\n                 (Forall\n                   (Imp (Neg (Le [- 1] (- 2)))\n                     (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                       (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                         (Eq [0, 1, 0, - 1] 0)))))))))))\n     [] =\n    dfa_accepts\n     (dfa_of_pf 0\n       (Forall\n         (Forall\n           (Forall\n             (Imp (Neg (Le [- 1] (- 2)))\n               (Imp (Eq [1, 2, - 1] 1)\n                 (Forall\n                   (Forall\n                     (Imp (Neg (Le [- 1] (- 2)))\n                       (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                         (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                           (Eq [0, 1, 0, - 1] 0))))))))))))\n     []", "by (simp add: dfa_of_pf_correctness del: dfa_of_pf.simps)"], ["proof (state)\nthis:\n  eval_pf\n   (Forall\n     (Forall\n       (Forall\n         (Imp (Neg (Le [- 1] (- 2)))\n           (Imp (Eq [1, 2, - 1] 1)\n             (Forall\n               (Forall\n                 (Imp (Neg (Le [- 1] (- 2)))\n                   (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                     (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                       (Eq [0, 1, 0, - 1] 0)))))))))))\n   [] =\n  dfa_accepts\n   (dfa_of_pf 0\n     (Forall\n       (Forall\n         (Forall\n           (Imp (Neg (Le [- 1] (- 2)))\n             (Imp (Eq [1, 2, - 1] 1)\n               (Forall\n                 (Forall\n                   (Imp (Neg (Le [- 1] (- 2)))\n                     (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                       (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                         (Eq [0, 1, 0, - 1] 0))))))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x xa xb.\n       \\<not> 2 \\<le> int xb \\<longrightarrow>\n       int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n       (\\<forall>xb xc.\n           \\<not> 2 \\<le> int xc \\<longrightarrow>\n           int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n           (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)", "also"], ["proof (state)\nthis:\n  eval_pf\n   (Forall\n     (Forall\n       (Forall\n         (Imp (Neg (Le [- 1] (- 2)))\n           (Imp (Eq [1, 2, - 1] 1)\n             (Forall\n               (Forall\n                 (Imp (Neg (Le [- 1] (- 2)))\n                   (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                     (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                       (Eq [0, 1, 0, - 1] 0)))))))))))\n   [] =\n  dfa_accepts\n   (dfa_of_pf 0\n     (Forall\n       (Forall\n         (Forall\n           (Imp (Neg (Le [- 1] (- 2)))\n             (Imp (Eq [1, 2, - 1] 1)\n               (Forall\n                 (Forall\n                   (Imp (Neg (Le [- 1] (- 2)))\n                     (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                       (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                         (Eq [0, 1, 0, - 1] 0))))))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x xa xb.\n       \\<not> 2 \\<le> int xb \\<longrightarrow>\n       int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n       (\\<forall>xb xc.\n           \\<not> 2 \\<le> int xc \\<longrightarrow>\n           int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n           (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)", "have \"\\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfa_accepts\n     (dfa_of_pf 0\n       (Forall\n         (Forall\n           (Forall\n             (Imp (Neg (Le [- 1] (- 2)))\n               (Imp (Eq [1, 2, - 1] 1)\n                 (Forall\n                   (Forall\n                     (Imp (Neg (Le [- 1] (- 2)))\n                       (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                         (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                           (Eq [0, 1, 0, - 1] 0))))))))))))\n     []", "by eval"], ["proof (state)\nthis:\n  dfa_accepts\n   (dfa_of_pf 0\n     (Forall\n       (Forall\n         (Forall\n           (Imp (Neg (Le [- 1] (- 2)))\n             (Imp (Eq [1, 2, - 1] 1)\n               (Forall\n                 (Forall\n                   (Imp (Neg (Le [- 1] (- 2)))\n                     (Imp (Eq [1, 2, 0, 0, - 1] 0)\n                       (Imp (Exist (Eq [2, 0, 0, 0, 0, - 1] 0))\n                         (Eq [0, 1, 0, - 1] 0))))))))))))\n   []\n\ngoal (1 subgoal):\n 1. \\<forall>x xa xb.\n       \\<not> 2 \\<le> int xb \\<longrightarrow>\n       int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n       (\\<forall>xb xc.\n           \\<not> 2 \\<le> int xc \\<longrightarrow>\n           int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n           (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)", "finally"], ["proof (chain)\npicking this:\n  \\<forall>x xa xb.\n     \\<not> 2 \\<le> int xb \\<longrightarrow>\n     int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n     (\\<forall>xb xc.\n         \\<not> 2 \\<le> int xc \\<longrightarrow>\n         int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n         (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x xa xb.\n     \\<not> 2 \\<le> int xb \\<longrightarrow>\n     int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n     (\\<forall>xb xc.\n         \\<not> 2 \\<le> int xc \\<longrightarrow>\n         int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n         (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)\n\ngoal (1 subgoal):\n 1. \\<forall>x xa xb.\n       \\<not> 2 \\<le> int xb \\<longrightarrow>\n       int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n       (\\<forall>xb xc.\n           \\<not> 2 \\<le> int xc \\<longrightarrow>\n           int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n           (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)", "."], ["proof (state)\nthis:\n  \\<forall>x xa xb.\n     \\<not> 2 \\<le> int xb \\<longrightarrow>\n     int xb + (2 * int xa - int x) = 1 \\<longrightarrow>\n     (\\<forall>xb xc.\n         \\<not> 2 \\<le> int xc \\<longrightarrow>\n         int xc + (2 * int xb - int x) = 0 \\<longrightarrow>\n         (\\<exists>xa. 2 * int xa = int x) \\<longrightarrow> xb = xa)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"mk_dfa = dfa_of_pf 0\""], ["", "definition \"stamp = Forall (Imp (Le [-1] (- 8)) (Exist (Exist (Eq [5, 3, -1] 0))))\""], ["", "definition \"stamp_false = Forall (Imp (Le [-1] (- 7)) (Exist (Exist (Eq [5, 3, -1] 0))))\""], ["", "definition \"example = Forall (Exist (Or (Eq [1, -1] 5)\n  (Forall (Forall (Imp (Neg (Le [-1, 0] (- 6))) (Imp (Eq [1, 6, 0, -1] 0) (Eq [0, 1] 1)))))))\""], ["", "definition \"example2 = Forall (Forall (Forall (Imp (Neg (Le [-1] (- 2)))\n  (Imp (Eq [1, 2, -1] 1) (Forall (Forall (Imp (Neg (Le [-1] (- 2)))\n    (Imp (Eq [1, 2, 0, 0, -1] 0) (Imp (Exist (Eq [2, 0, 0, 0, 0, -1] 0)) (Eq [0, 1, 0, -1] 0))))))))))\""], ["", "definition \"example2_false = Forall (Forall (Forall (Imp (Neg (Le [-1] (- 2)))\n  (Imp (Eq [1, 2, -1] 1) (Forall (Forall (Imp (Neg (Le [-1] (- 2)))\n    (Imp (Eq [1, 2, 0, 0, -1] 0) (Imp (Exist (Eq [3, 0, 0, 0, 0, -1] 0)) (Eq [0, 1, 0, -1] 0))))))))))\""], ["", "definition \"harrison1 = Exist (Forall (Imp (Le [-1, 1] 0) (Exist (Exist\n  (And (Le [0, -1] 0) (And (Le [-1] 0) (Eq [8, 3, -1] 0)))))))\""], ["", "definition \"harrison2 = Exist (Forall (Imp (Le [-1, 1] 0) (Exist (Exist\n  (And (Le [0, -1] 0) (And (Le [-1] 0) (Eq [8, 7, -1] 0)))))))\""], ["", "value \"mk_dfa stamp\""], ["", "value \"min_dfa (mk_dfa stamp)\""], ["", "value \"mk_dfa stamp_false\""], ["", "value \"mk_dfa example\""], ["", "value \"mk_dfa example2\""], ["", "value \"mk_dfa example2_false\""], ["", "value \"mk_dfa harrison1\""], ["", "value \"mk_dfa harrison2\""], ["", "end"]]}