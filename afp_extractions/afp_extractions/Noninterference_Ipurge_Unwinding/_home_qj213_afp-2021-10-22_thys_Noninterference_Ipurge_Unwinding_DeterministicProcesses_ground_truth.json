{"file_name": "/home/qj213/afp-2021-10-22/thys/Noninterference_Ipurge_Unwinding/DeterministicProcesses.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Noninterference_Ipurge_Unwinding", "problem_names": ["lemma dfc_implies_dwfc:\n \"d_future_consistent P D R \\<Longrightarrow> d_weakly_future_consistent P I D R\"", "lemma dfc_equals_dwfc_rel_ipurge:\n \"d_future_consistent P D (rel_ipurge P I D) =\n  d_weakly_future_consistent P I D (rel_ipurge P I D)\"", "lemma d_fc_equals_dfc:\n  assumes A: \"deterministic P\"\n  shows \"future_consistent P D R = d_future_consistent P D R\"", "lemma d_wfc_equals_dwfc:\n  assumes A: \"deterministic P\"\n  shows \"weakly_future_consistent P I D R = d_weakly_future_consistent P I D R\"", "lemma d_implies_ruc:\n  assumes A: \"deterministic P\"\n  shows \"ref_union_closed P\"", "theorem d_ipurge_unwinding:\n  assumes A: \"deterministic P\"\n  shows \"secure P I D = d_weakly_future_consistent P I D (rel_ipurge P I D)\"", "lemma ts_process_rep:\n  assumes A: \"trace_set T\"\n  shows \"Rep_process (ts_process T) =\n    ({(xs, X). xs \\<in> T \\<and> (\\<forall>x \\<in> X. xs @ [x] \\<notin> T)}, {})\"", "lemma ts_process_failures:\n \"trace_set T \\<Longrightarrow>\n  failures (ts_process T) = {(xs, X). xs \\<in> T \\<and> (\\<forall>x \\<in> X. xs @ [x] \\<notin> T)}\"", "lemma ts_process_futures:\n \"trace_set T \\<Longrightarrow>\n  futures (ts_process T) xs =\n  {(ys, Y). xs @ ys \\<in> T \\<and> (\\<forall>y \\<in> Y. xs @ ys @ [y] \\<notin> T)}\"", "lemma ts_process_traces:\n \"trace_set T \\<Longrightarrow> traces (ts_process T) = T\"", "lemma ts_process_refusals:\n \"trace_set T \\<Longrightarrow> xs \\<in> T \\<Longrightarrow>\n  refusals (ts_process T) xs = {X. \\<forall>x \\<in> X. xs @ [x] \\<notin> T}\"", "lemma ts_process_next_events:\n \"trace_set T \\<Longrightarrow> (x \\<in> next_events (ts_process T) xs) = (xs @ [x] \\<in> T)\"", "lemma ts_process_d:\n \"trace_set T \\<Longrightarrow> deterministic (ts_process T)\"", "lemma d_divergences:\n  assumes A: \"deterministic P\"\n  shows \"divergences P = {}\"", "lemma trace_set_traces:\n \"trace_set (traces P)\"", "lemma d_implies_ts_process_traces:\n \"deterministic P \\<Longrightarrow> ts_process (traces P) = P\"", "lemma ts_process_traces_implies_d:\n \"ts_process (traces P) = P \\<Longrightarrow> deterministic P\"", "lemma d_equals_ts_process_traces:\n \"deterministic P = (ts_process (traces P) = P)\"", "theorem ts_ipurge_unwinding:\n \"trace_set T \\<Longrightarrow>\n  secure (ts_process T) I D =\n  d_weakly_future_consistent (ts_process T) I D (rel_ipurge (ts_process T) I D)\""], "translations": [["", "lemma dfc_implies_dwfc:\n \"d_future_consistent P D R \\<Longrightarrow> d_weakly_future_consistent P I D R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_future_consistent P D R \\<Longrightarrow>\n    d_weakly_future_consistent P I D R", "by (simp only: d_future_consistent_def d_weakly_future_consistent_def, blast)"], ["", "lemma dfc_equals_dwfc_rel_ipurge:\n \"d_future_consistent P D (rel_ipurge P I D) =\n  d_weakly_future_consistent P I D (rel_ipurge P I D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d_future_consistent P D (rel_ipurge P I D) =\n    d_weakly_future_consistent P I D (rel_ipurge P I D)", "proof (rule iffI, erule dfc_implies_dwfc,\n simp only: d_future_consistent_def d_weakly_future_consistent_def,\n rule ballI, (rule allI)+, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u xs ys.\n       \\<lbrakk>\\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n                   \\<forall>xs ys.\n                      (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n                      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n                      next_dom_events P D u xs = next_dom_events P D u ys;\n        u \\<in> range D; (xs, ys) \\<in> rel_ipurge P I D u\\<rbrakk>\n       \\<Longrightarrow> (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n                         next_dom_events P D u xs = next_dom_events P D u ys", "fix u xs ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u xs ys.\n       \\<lbrakk>\\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n                   \\<forall>xs ys.\n                      (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n                      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n                      next_dom_events P D u xs = next_dom_events P D u ys;\n        u \\<in> range D; (xs, ys) \\<in> rel_ipurge P I D u\\<rbrakk>\n       \\<Longrightarrow> (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n                         next_dom_events P D u xs = next_dom_events P D u ys", "assume\n    A: \"\\<forall>u \\<in> range D \\<inter> (-I) `` range D. \\<forall>xs ys. (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n      next_dom_events P D u xs = next_dom_events P D u ys\" and\n    B: \"u \\<in> range D\" and\n    C: \"(xs, ys) \\<in> rel_ipurge P I D u\""], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n        (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n        next_dom_events P D u xs = next_dom_events P D u ys\n  u \\<in> range D\n  (xs, ys) \\<in> rel_ipurge P I D u\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys.\n       \\<lbrakk>\\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n                   \\<forall>xs ys.\n                      (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n                      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n                      next_dom_events P D u xs = next_dom_events P D u ys;\n        u \\<in> range D; (xs, ys) \\<in> rel_ipurge P I D u\\<rbrakk>\n       \\<Longrightarrow> (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n                         next_dom_events P D u xs = next_dom_events P D u ys", "show \"(xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "proof (cases \"u \\<in> range D \\<inter> (-I) `` range D\")"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<in> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys\n 2. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "case True"], ["proof (state)\nthis:\n  u \\<in> range D \\<inter> (- I) `` range D\n\ngoal (2 subgoals):\n 1. u \\<in> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys\n 2. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "with A"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n        (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n        next_dom_events P D u xs = next_dom_events P D u ys\n  u \\<in> range D \\<inter> (- I) `` range D", "have \"\\<forall>xs ys. (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n      next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n        (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n        next_dom_events P D u xs = next_dom_events P D u ys\n  u \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys.\n       (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n       (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n       next_dom_events P D u xs = next_dom_events P D u ys", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n     (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n     next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (2 subgoals):\n 1. u \\<in> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys\n 2. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "hence \"(xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n      next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n     (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n     next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "by blast"], ["proof (state)\nthis:\n  (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (2 subgoals):\n 1. u \\<in> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys\n 2. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "using C"], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> rel_ipurge P I D u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n  (xs, ys) \\<in> rel_ipurge P I D u\n\ngoal (1 subgoal):\n 1. (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", ".."], ["proof (state)\nthis:\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "case False"], ["proof (state)\nthis:\n  u \\<notin> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "hence D: \"u \\<notin> (-I) `` range D\""], ["proof (prove)\nusing this:\n  u \\<notin> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. u \\<notin> (- I) `` range D", "using B"], ["proof (prove)\nusing this:\n  u \\<notin> range D \\<inter> (- I) `` range D\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. u \\<notin> (- I) `` range D", "by simp"], ["proof (state)\nthis:\n  u \\<notin> (- I) `` range D\n\ngoal (1 subgoal):\n 1. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "have \"ipurge_tr_rev I D u xs = ipurge_tr_rev I D u ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipurge_tr_rev I D u xs = ipurge_tr_rev I D u ys", "using C"], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> rel_ipurge P I D u\n\ngoal (1 subgoal):\n 1. ipurge_tr_rev I D u xs = ipurge_tr_rev I D u ys", "by (simp add: rel_ipurge_def)"], ["proof (state)\nthis:\n  ipurge_tr_rev I D u xs = ipurge_tr_rev I D u ys\n\ngoal (1 subgoal):\n 1. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "moreover"], ["proof (state)\nthis:\n  ipurge_tr_rev I D u xs = ipurge_tr_rev I D u ys\n\ngoal (1 subgoal):\n 1. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "have \"\\<forall>zs. ipurge_tr_rev I D u zs = zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>zs. ipurge_tr_rev I D u zs = zs", "proof (rule allI, rule ipurge_tr_rev_all, rule ballI, erule imageE, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>zs v x.\n       \\<lbrakk>v = D x; x \\<in> set zs; (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> False", "fix v x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>zs v x.\n       \\<lbrakk>v = D x; x \\<in> set zs; (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"(v, u) \\<notin> I\""], ["proof (state)\nthis:\n  (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<And>zs v x.\n       \\<lbrakk>v = D x; x \\<in> set zs; (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"(v, u) \\<in> -I\""], ["proof (prove)\nusing this:\n  (v, u) \\<notin> I\n\ngoal (1 subgoal):\n 1. (v, u) \\<in> - I", "by simp"], ["proof (state)\nthis:\n  (v, u) \\<in> - I\n\ngoal (1 subgoal):\n 1. \\<And>zs v x.\n       \\<lbrakk>v = D x; x \\<in> set zs; (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (v, u) \\<in> - I\n\ngoal (1 subgoal):\n 1. \\<And>zs v x.\n       \\<lbrakk>v = D x; x \\<in> set zs; (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"v = D x\""], ["proof (state)\nthis:\n  v = D x\n\ngoal (1 subgoal):\n 1. \\<And>zs v x.\n       \\<lbrakk>v = D x; x \\<in> set zs; (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"v \\<in> range D\""], ["proof (prove)\nusing this:\n  v = D x\n\ngoal (1 subgoal):\n 1. v \\<in> range D", "by simp"], ["proof (state)\nthis:\n  v \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<And>zs v x.\n       \\<lbrakk>v = D x; x \\<in> set zs; (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  (v, u) \\<in> - I\n  v \\<in> range D", "have \"u \\<in> (-I) `` range D\""], ["proof (prove)\nusing this:\n  (v, u) \\<in> - I\n  v \\<in> range D\n\ngoal (1 subgoal):\n 1. u \\<in> (- I) `` range D", ".."], ["proof (state)\nthis:\n  u \\<in> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<And>zs v x.\n       \\<lbrakk>v = D x; x \\<in> set zs; (v, u) \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  u \\<in> (- I) `` range D\n\ngoal (1 subgoal):\n 1. False", "using D"], ["proof (prove)\nusing this:\n  u \\<in> (- I) `` range D\n  u \\<notin> (- I) `` range D\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>zs. ipurge_tr_rev I D u zs = zs\n\ngoal (1 subgoal):\n 1. u \\<notin> range D \\<inter> (- I) `` range D \\<Longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "ultimately"], ["proof (chain)\npicking this:\n  ipurge_tr_rev I D u xs = ipurge_tr_rev I D u ys\n  \\<forall>zs. ipurge_tr_rev I D u zs = zs", "show ?thesis"], ["proof (prove)\nusing this:\n  ipurge_tr_rev I D u xs = ipurge_tr_rev I D u ys\n  \\<forall>zs. ipurge_tr_rev I D u zs = zs\n\ngoal (1 subgoal):\n 1. (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "by simp"], ["proof (state)\nthis:\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d_fc_equals_dfc:\n  assumes A: \"deterministic P\"\n  shows \"future_consistent P D R = d_future_consistent P D R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_consistent P D R = d_future_consistent P D R", "proof (rule iffI, simp_all only: d_future_consistent_def,\n rule ballI, (rule allI)+, rule impI, rule conjI, rule fc_traces, assumption+,\n simp_all add: future_consistent_def del: ball_simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n          next_dom_events P D u xs =\n          next_dom_events P D u ys \\<Longrightarrow>\n    \\<forall>u\\<in>range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "assume B: \"\\<forall>u \\<in> range D. \\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n        next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n          next_dom_events P D u xs =\n          next_dom_events P D u ys \\<Longrightarrow>\n    \\<forall>u\\<in>range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "show \"\\<forall>u \\<in> range D. \\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n    ref_dom_events P D u xs = ref_dom_events P D u ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "proof (rule ballI, (rule allI)+, rule impI,\n   simp add: ref_dom_events_def set_eq_iff, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D; (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "fix u xs ys x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D; (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "assume \"u \\<in> range D\""], ["proof (state)\nthis:\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D; (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "with B"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n        next_dom_events P D u xs = next_dom_events P D u ys\n  u \\<in> range D", "have \"\\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n      next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n        next_dom_events P D u xs = next_dom_events P D u ys\n  u \\<in> range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys.\n       (xs, ys) \\<in> R u \\<longrightarrow>\n       (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n       next_dom_events P D u xs = next_dom_events P D u ys", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R u \\<longrightarrow>\n     (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n     next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D; (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "hence \"(xs, ys) \\<in> R u \\<longrightarrow>\n      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n      next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R u \\<longrightarrow>\n     (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n     next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. (xs, ys) \\<in> R u \\<longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "by blast"], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D; (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "moreover"], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D; (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "assume \"(xs, ys) \\<in> R u\""], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D; (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "ultimately"], ["proof (chain)\npicking this:\n  (xs, ys) \\<in> R u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n  (xs, ys) \\<in> R u", "have C: \"(xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n      next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> R u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n  (xs, ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", ".."], ["proof (state)\nthis:\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D; (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "show \"(u = D x \\<and> {x} \\<in> refusals P xs) = (u = D x \\<and> {x} \\<in> refusals P ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u = D x \\<and> {x} \\<in> refusals P xs) =\n    (u = D x \\<and> {x} \\<in> refusals P ys)", "proof (cases \"u = D x\", simp_all, cases \"xs \\<in> traces P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "assume D: \"u = D x\" and E: \"xs \\<in> traces P\""], ["proof (state)\nthis:\n  u = D x\n  xs \\<in> traces P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "have\n        A': \"\\<forall>xs \\<in> traces P. \\<forall>X. X \\<in> refusals P xs = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P.\n       \\<forall>X.\n          (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "using A"], ["proof (prove)\nusing this:\n  deterministic P\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P.\n       \\<forall>X.\n          (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "by (simp add: deterministic_def)"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"\\<forall>X. X \\<in> refusals P xs = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "using E"], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"{x} \\<in> refusals P xs = ({x} \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "moreover"], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "have \"ys \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<in> traces P", "using C and E"], ["proof (prove)\nusing this:\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. ys \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  ys \\<in> traces P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "with A'"], ["proof (chain)\npicking this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  ys \\<in> traces P", "have \"\\<forall>X. X \\<in> refusals P ys = (X \\<inter> next_events P ys = {})\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P ys) = (X \\<inter> next_events P ys = {})", ".."], ["proof (state)\nthis:\n  \\<forall>X. (X \\<in> refusals P ys) = (X \\<inter> next_events P ys = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"{x} \\<in> refusals P ys = ({x} \\<inter> next_events P ys = {})\""], ["proof (prove)\nusing this:\n  \\<forall>X. (X \\<in> refusals P ys) = (X \\<inter> next_events P ys = {})\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})", ".."], ["proof (state)\nthis:\n  ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "moreover"], ["proof (state)\nthis:\n  ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "have \"{x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys", "proof (simp add: set_eq_iff, rule allI, rule iffI, erule_tac [!] conjE, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> next_events P xs \\<Longrightarrow> x \\<in> next_events P ys\n 2. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "assume \"x \\<in> next_events P xs\""], ["proof (state)\nthis:\n  x \\<in> next_events P xs\n\ngoal (2 subgoals):\n 1. x \\<in> next_events P xs \\<Longrightarrow> x \\<in> next_events P ys\n 2. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "hence \"x \\<in> next_dom_events P D u xs\""], ["proof (prove)\nusing this:\n  x \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u xs", "using D"], ["proof (prove)\nusing this:\n  x \\<in> next_events P xs\n  u = D x\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u xs", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  x \\<in> next_dom_events P D u xs\n\ngoal (2 subgoals):\n 1. x \\<in> next_events P xs \\<Longrightarrow> x \\<in> next_events P ys\n 2. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "hence \"x \\<in> next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u xs\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u ys", "using C"], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u xs\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u ys", "by simp"], ["proof (state)\nthis:\n  x \\<in> next_dom_events P D u ys\n\ngoal (2 subgoals):\n 1. x \\<in> next_events P xs \\<Longrightarrow> x \\<in> next_events P ys\n 2. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "thus \"x \\<in> next_events P ys\""], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  x \\<in> next_events P ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "assume \"x \\<in> next_events P ys\""], ["proof (state)\nthis:\n  x \\<in> next_events P ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "hence \"x \\<in> next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  x \\<in> next_events P ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u ys", "using D"], ["proof (prove)\nusing this:\n  x \\<in> next_events P ys\n  u = D x\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u ys", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  x \\<in> next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "hence \"x \\<in> next_dom_events P D u xs\""], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u xs", "using C"], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u ys\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u xs", "by simp"], ["proof (state)\nthis:\n  x \\<in> next_dom_events P D u xs\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "thus \"x \\<in> next_events P xs\""], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u xs\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P xs", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  x \\<in> next_events P xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "ultimately"], ["proof (chain)\npicking this:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n  ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})\n  {x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys", "show \"({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\""], ["proof (prove)\nusing this:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n  ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})\n  {x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "by simp"], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "assume D: \"xs \\<notin> traces P\""], ["proof (state)\nthis:\n  xs \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"\\<forall>X. (xs, X) \\<notin> failures P\""], ["proof (prove)\nusing this:\n  xs \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (xs, X) \\<notin> failures P", "by (simp add: traces_def Domain_iff)"], ["proof (state)\nthis:\n  \\<forall>X. (xs, X) \\<notin> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"refusals P xs = {}\""], ["proof (prove)\nusing this:\n  \\<forall>X. (xs, X) \\<notin> failures P\n\ngoal (1 subgoal):\n 1. refusals P xs = {}", "by (rule_tac equals0I, simp add: refusals_def)"], ["proof (state)\nthis:\n  refusals P xs = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "moreover"], ["proof (state)\nthis:\n  refusals P xs = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "have \"ys \\<notin> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<notin> traces P", "using C and D"], ["proof (prove)\nusing this:\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n  xs \\<notin> traces P\n\ngoal (1 subgoal):\n 1. ys \\<notin> traces P", "by simp"], ["proof (state)\nthis:\n  ys \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"\\<forall>X. (ys, X) \\<notin> failures P\""], ["proof (prove)\nusing this:\n  ys \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (ys, X) \\<notin> failures P", "by (simp add: traces_def Domain_iff)"], ["proof (state)\nthis:\n  \\<forall>X. (ys, X) \\<notin> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"refusals P ys = {}\""], ["proof (prove)\nusing this:\n  \\<forall>X. (ys, X) \\<notin> failures P\n\ngoal (1 subgoal):\n 1. refusals P ys = {}", "by (rule_tac equals0I, simp add: refusals_def)"], ["proof (state)\nthis:\n  refusals P ys = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "ultimately"], ["proof (chain)\npicking this:\n  refusals P xs = {}\n  refusals P ys = {}", "show \"({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\""], ["proof (prove)\nusing this:\n  refusals P xs = {}\n  refusals P ys = {}\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "by simp"], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u = D x \\<and> {x} \\<in> refusals P xs) =\n  (u = D x \\<and> {x} \\<in> refusals P ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d_wfc_equals_dwfc:\n  assumes A: \"deterministic P\"\n  shows \"weakly_future_consistent P I D R = d_weakly_future_consistent P I D R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_future_consistent P I D R = d_weakly_future_consistent P I D R", "proof (rule iffI, simp_all only: d_weakly_future_consistent_def,\n rule ballI, (rule allI)+, rule impI, rule conjI, rule wfc_traces, assumption+,\n simp_all add: weakly_future_consistent_def del: ball_simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n          next_dom_events P D u xs =\n          next_dom_events P D u ys \\<Longrightarrow>\n    \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "assume B: \"\\<forall>u \\<in> range D \\<inter> (- I) `` range D. \\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n        next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n          next_dom_events P D u xs =\n          next_dom_events P D u ys \\<Longrightarrow>\n    \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "show \"\\<forall>u \\<in> range D \\<inter> (- I) `` range D. \\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n    ref_dom_events P D u xs = ref_dom_events P D u ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n       \\<forall>xs ys.\n          (xs, ys) \\<in> R u \\<longrightarrow>\n          ref_dom_events P D u xs = ref_dom_events P D u ys", "proof (rule ballI, (rule allI)+, rule impI,\n   simp (no_asm_simp) add: ref_dom_events_def set_eq_iff, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D \\<inter> (- I) `` range D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "fix u xs ys x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D \\<inter> (- I) `` range D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "assume \"u \\<in> range D \\<inter> (- I) `` range D\""], ["proof (state)\nthis:\n  u \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D \\<inter> (- I) `` range D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "with B"], ["proof (chain)\npicking this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n        next_dom_events P D u xs = next_dom_events P D u ys\n  u \\<in> range D \\<inter> (- I) `` range D", "have \"\\<forall>xs ys. (xs, ys) \\<in> R u \\<longrightarrow>\n      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n      next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n        next_dom_events P D u xs = next_dom_events P D u ys\n  u \\<in> range D \\<inter> (- I) `` range D\n\ngoal (1 subgoal):\n 1. \\<forall>xs ys.\n       (xs, ys) \\<in> R u \\<longrightarrow>\n       (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n       next_dom_events P D u xs = next_dom_events P D u ys", ".."], ["proof (state)\nthis:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R u \\<longrightarrow>\n     (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n     next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D \\<inter> (- I) `` range D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "hence \"(xs, ys) \\<in> R u \\<longrightarrow>\n      (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n      next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  \\<forall>xs ys.\n     (xs, ys) \\<in> R u \\<longrightarrow>\n     (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n     next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. (xs, ys) \\<in> R u \\<longrightarrow>\n    (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", "by blast"], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D \\<inter> (- I) `` range D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "moreover"], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D \\<inter> (- I) `` range D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "assume \"(xs, ys) \\<in> R u\""], ["proof (state)\nthis:\n  (xs, ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D \\<inter> (- I) `` range D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "ultimately"], ["proof (chain)\npicking this:\n  (xs, ys) \\<in> R u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n  (xs, ys) \\<in> R u", "have C: \"(xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n      next_dom_events P D u xs = next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> R u \\<longrightarrow>\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n  (xs, ys) \\<in> R u\n\ngoal (1 subgoal):\n 1. (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n    next_dom_events P D u xs = next_dom_events P D u ys", ".."], ["proof (state)\nthis:\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. \\<And>u xs ys x.\n       \\<lbrakk>u \\<in> range D \\<inter> (- I) `` range D;\n        (xs, ys) \\<in> R u\\<rbrakk>\n       \\<Longrightarrow> (u = D x \\<and> {x} \\<in> refusals P xs) =\n                         (u = D x \\<and> {x} \\<in> refusals P ys)", "show \"(u = D x \\<and> {x} \\<in> refusals P xs) = (u = D x \\<and> {x} \\<in> refusals P ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u = D x \\<and> {x} \\<in> refusals P xs) =\n    (u = D x \\<and> {x} \\<in> refusals P ys)", "proof (cases \"u = D x\", simp_all, cases \"xs \\<in> traces P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "assume D: \"u = D x\" and E: \"xs \\<in> traces P\""], ["proof (state)\nthis:\n  u = D x\n  xs \\<in> traces P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "have A': \"\\<forall>xs \\<in> traces P. \\<forall>X.\n        X \\<in> refusals P xs = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P.\n       \\<forall>X.\n          (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "using A"], ["proof (prove)\nusing this:\n  deterministic P\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P.\n       \\<forall>X.\n          (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "by (simp add: deterministic_def)"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"\\<forall>X. X \\<in> refusals P xs = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "using E"], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"{x} \\<in> refusals P xs = ({x} \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "moreover"], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "have \"ys \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<in> traces P", "using C and E"], ["proof (prove)\nusing this:\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. ys \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  ys \\<in> traces P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "with A'"], ["proof (chain)\npicking this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  ys \\<in> traces P", "have \"\\<forall>X. X \\<in> refusals P ys = (X \\<inter> next_events P ys = {})\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  ys \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P ys) = (X \\<inter> next_events P ys = {})", ".."], ["proof (state)\nthis:\n  \\<forall>X. (X \\<in> refusals P ys) = (X \\<inter> next_events P ys = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"{x} \\<in> refusals P ys = ({x} \\<inter> next_events P ys = {})\""], ["proof (prove)\nusing this:\n  \\<forall>X. (X \\<in> refusals P ys) = (X \\<inter> next_events P ys = {})\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})", ".."], ["proof (state)\nthis:\n  ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "moreover"], ["proof (state)\nthis:\n  ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "have \"{x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys", "proof (simp add: set_eq_iff, rule allI, rule iffI, erule_tac [!] conjE, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> next_events P xs \\<Longrightarrow> x \\<in> next_events P ys\n 2. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "assume \"x \\<in> next_events P xs\""], ["proof (state)\nthis:\n  x \\<in> next_events P xs\n\ngoal (2 subgoals):\n 1. x \\<in> next_events P xs \\<Longrightarrow> x \\<in> next_events P ys\n 2. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "hence \"x \\<in> next_dom_events P D u xs\""], ["proof (prove)\nusing this:\n  x \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u xs", "using D"], ["proof (prove)\nusing this:\n  x \\<in> next_events P xs\n  u = D x\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u xs", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  x \\<in> next_dom_events P D u xs\n\ngoal (2 subgoals):\n 1. x \\<in> next_events P xs \\<Longrightarrow> x \\<in> next_events P ys\n 2. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "hence \"x \\<in> next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u xs\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u ys", "using C"], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u xs\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u ys", "by simp"], ["proof (state)\nthis:\n  x \\<in> next_dom_events P D u ys\n\ngoal (2 subgoals):\n 1. x \\<in> next_events P xs \\<Longrightarrow> x \\<in> next_events P ys\n 2. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "thus \"x \\<in> next_events P ys\""], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  x \\<in> next_events P ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "assume \"x \\<in> next_events P ys\""], ["proof (state)\nthis:\n  x \\<in> next_events P ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "hence \"x \\<in> next_dom_events P D u ys\""], ["proof (prove)\nusing this:\n  x \\<in> next_events P ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u ys", "using D"], ["proof (prove)\nusing this:\n  x \\<in> next_events P ys\n  u = D x\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u ys", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  x \\<in> next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "hence \"x \\<in> next_dom_events P D u xs\""], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u xs", "using C"], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u ys\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n\ngoal (1 subgoal):\n 1. x \\<in> next_dom_events P D u xs", "by simp"], ["proof (state)\nthis:\n  x \\<in> next_dom_events P D u xs\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P ys \\<Longrightarrow> x \\<in> next_events P xs", "thus \"x \\<in> next_events P xs\""], ["proof (prove)\nusing this:\n  x \\<in> next_dom_events P D u xs\n\ngoal (1 subgoal):\n 1. x \\<in> next_events P xs", "by (simp add: next_dom_events_def)"], ["proof (state)\nthis:\n  x \\<in> next_events P xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = D x; xs \\<in> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n 2. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "ultimately"], ["proof (chain)\npicking this:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n  ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})\n  {x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys", "show \"({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\""], ["proof (prove)\nusing this:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n  ({x} \\<in> refusals P ys) = ({x} \\<inter> next_events P ys = {})\n  {x} \\<inter> next_events P xs = {x} \\<inter> next_events P ys\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "by simp"], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "assume D: \"xs \\<notin> traces P\""], ["proof (state)\nthis:\n  xs \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"\\<forall>X. (xs, X) \\<notin> failures P\""], ["proof (prove)\nusing this:\n  xs \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (xs, X) \\<notin> failures P", "by (simp add: traces_def Domain_iff)"], ["proof (state)\nthis:\n  \\<forall>X. (xs, X) \\<notin> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"refusals P xs = {}\""], ["proof (prove)\nusing this:\n  \\<forall>X. (xs, X) \\<notin> failures P\n\ngoal (1 subgoal):\n 1. refusals P xs = {}", "by (rule_tac equals0I, simp add: refusals_def)"], ["proof (state)\nthis:\n  refusals P xs = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "moreover"], ["proof (state)\nthis:\n  refusals P xs = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "have \"ys \\<notin> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<notin> traces P", "using C and D"], ["proof (prove)\nusing this:\n  (xs \\<in> traces P) = (ys \\<in> traces P) \\<and>\n  next_dom_events P D u xs = next_dom_events P D u ys\n  xs \\<notin> traces P\n\ngoal (1 subgoal):\n 1. ys \\<notin> traces P", "by simp"], ["proof (state)\nthis:\n  ys \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"\\<forall>X. (ys, X) \\<notin> failures P\""], ["proof (prove)\nusing this:\n  ys \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (ys, X) \\<notin> failures P", "by (simp add: traces_def Domain_iff)"], ["proof (state)\nthis:\n  \\<forall>X. (ys, X) \\<notin> failures P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "hence \"refusals P ys = {}\""], ["proof (prove)\nusing this:\n  \\<forall>X. (ys, X) \\<notin> failures P\n\ngoal (1 subgoal):\n 1. refusals P ys = {}", "by (rule_tac equals0I, simp add: refusals_def)"], ["proof (state)\nthis:\n  refusals P ys = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = D x; xs \\<notin> traces P\\<rbrakk>\n    \\<Longrightarrow> ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "ultimately"], ["proof (chain)\npicking this:\n  refusals P xs = {}\n  refusals P ys = {}", "show \"({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\""], ["proof (prove)\nusing this:\n  refusals P xs = {}\n  refusals P ys = {}\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)", "by simp"], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) = ({x} \\<in> refusals P ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (u = D x \\<and> {x} \\<in> refusals P xs) =\n  (u = D x \\<and> {x} \\<in> refusals P ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>u\\<in>range D \\<inter> (- I) `` range D.\n     \\<forall>xs ys.\n        (xs, ys) \\<in> R u \\<longrightarrow>\n        ref_dom_events P D u xs = ref_dom_events P D u ys\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n\\null\n\nHere below is the proof of a variant of the Ipurge Unwinding Theorem applying to deterministic\nprocesses. Unsurprisingly, its enunciation contains predicate @{term d_weakly_future_consistent} in\nplace of @{term weakly_future_consistent}. Furthermore, the assumption that the process be refusals\nunion closed is replaced by the assumption that it be deterministic, since the former property is\nshown to be entailed by the latter.\n\n\\null\n\\<close>"], ["", "lemma d_implies_ruc:\n  assumes A: \"deterministic P\"\n  shows \"ref_union_closed P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ref_union_closed P", "proof (subst ref_union_closed_def, (rule allI)+, (rule impI)+, erule exE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "fix xs A X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "have \"\\<forall>xs \\<in> traces P. \\<forall>X. X \\<in> refusals P xs = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P.\n       \\<forall>X.\n          (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "using A"], ["proof (prove)\nusing this:\n  deterministic P\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P.\n       \\<forall>X.\n          (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "by (simp add: deterministic_def)"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "moreover"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "assume B: \"\\<forall>X \\<in> A. (xs, X) \\<in> failures P\" and \"X \\<in> A\""], ["proof (state)\nthis:\n  \\<forall>X\\<in>A. (xs, X) \\<in> failures P\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "hence \"(xs, X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>A. (xs, X) \\<in> failures P\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "hence \"xs \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  xs \\<in> traces P", "have C: \"\\<forall>X. X \\<in> refusals P xs = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "have D: \"\\<forall>X \\<in> A. X \\<inter> next_events P xs = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>A. X \\<inter> next_events P xs = {}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X. X \\<in> A \\<Longrightarrow> X \\<inter> next_events P xs = {}", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>X. X \\<in> A \\<Longrightarrow> X \\<inter> next_events P xs = {}", "assume \"X \\<in> A\""], ["proof (state)\nthis:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>X. X \\<in> A \\<Longrightarrow> X \\<inter> next_events P xs = {}", "with B"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>A. (xs, X) \\<in> failures P\n  X \\<in> A", "have \"(xs, X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>A. (xs, X) \\<in> failures P\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> failures P", ".."], ["proof (state)\nthis:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>X. X \\<in> A \\<Longrightarrow> X \\<inter> next_events P xs = {}", "hence \"X \\<in> refusals P xs\""], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. X \\<in> refusals P xs", "by (simp add: refusals_def)"], ["proof (state)\nthis:\n  X \\<in> refusals P xs\n\ngoal (1 subgoal):\n 1. \\<And>X. X \\<in> A \\<Longrightarrow> X \\<inter> next_events P xs = {}", "thus \"X \\<inter> next_events P xs = {}\""], ["proof (prove)\nusing this:\n  X \\<in> refusals P xs\n\ngoal (1 subgoal):\n 1. X \\<inter> next_events P xs = {}", "using C"], ["proof (prove)\nusing this:\n  X \\<in> refusals P xs\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. X \\<inter> next_events P xs = {}", "by simp"], ["proof (state)\nthis:\n  X \\<inter> next_events P xs = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>X\\<in>A. X \\<inter> next_events P xs = {}\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "have \"(\\<Union>X \\<in> A. X) \\<in> refusals P xs = ((\\<Union>X \\<in> A. X) \\<inter> next_events P xs = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Union>X\\<in>A. X) \\<in> refusals P xs) =\n    ((\\<Union>X\\<in>A. X) \\<inter> next_events P xs = {})", "using C"], ["proof (prove)\nusing this:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. ((\\<Union>X\\<in>A. X) \\<in> refusals P xs) =\n    ((\\<Union>X\\<in>A. X) \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  ((\\<Union>X\\<in>A. X) \\<in> refusals P xs) =\n  ((\\<Union>X\\<in>A. X) \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "hence E: \"(xs, \\<Union>X \\<in> A. X) \\<in> failures P =\n    ((\\<Union>X \\<in> A. X) \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  ((\\<Union>X\\<in>A. X) \\<in> refusals P xs) =\n  ((\\<Union>X\\<in>A. X) \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. ((xs, \\<Union>X\\<in>A. X) \\<in> failures P) =\n    ((\\<Union>X\\<in>A. X) \\<inter> next_events P xs = {})", "by (simp add: refusals_def)"], ["proof (state)\nthis:\n  ((xs, \\<Union>X\\<in>A. X) \\<in> failures P) =\n  ((\\<Union>X\\<in>A. X) \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>xs A X.\n       \\<lbrakk>\\<forall>X\\<in>A. (xs, X) \\<in> failures P;\n        X \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "show \"(xs, \\<Union>X \\<in> A. X) \\<in> failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, \\<Union>X\\<in>A. X) \\<in> failures P", "proof (rule ssubst [OF E], rule equals0I, erule IntE, erule UN_E)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y X.\n       \\<lbrakk>y \\<in> next_events P xs; X \\<in> A; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False", "fix x X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y X.\n       \\<lbrakk>y \\<in> next_events P xs; X \\<in> A; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"X \\<in> A\""], ["proof (state)\nthis:\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>y X.\n       \\<lbrakk>y \\<in> next_events P xs; X \\<in> A; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False", "with D"], ["proof (chain)\npicking this:\n  \\<forall>X\\<in>A. X \\<inter> next_events P xs = {}\n  X \\<in> A", "have \"X \\<inter> next_events P xs = {}\""], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>A. X \\<inter> next_events P xs = {}\n  X \\<in> A\n\ngoal (1 subgoal):\n 1. X \\<inter> next_events P xs = {}", ".."], ["proof (state)\nthis:\n  X \\<inter> next_events P xs = {}\n\ngoal (1 subgoal):\n 1. \\<And>y X.\n       \\<lbrakk>y \\<in> next_events P xs; X \\<in> A; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  X \\<inter> next_events P xs = {}\n\ngoal (1 subgoal):\n 1. \\<And>y X.\n       \\<lbrakk>y \\<in> next_events P xs; X \\<in> A; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"x \\<in> X\" and \"x \\<in> next_events P xs\""], ["proof (state)\nthis:\n  x \\<in> X\n  x \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>y X.\n       \\<lbrakk>y \\<in> next_events P xs; X \\<in> A; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"x \\<in> X \\<inter> next_events P xs\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  x \\<in> next_events P xs\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<inter> next_events P xs", ".."], ["proof (state)\nthis:\n  x \\<in> X \\<inter> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>y X.\n       \\<lbrakk>y \\<in> next_events P xs; X \\<in> A; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"\\<exists>x. x \\<in> X \\<inter> next_events P xs\""], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> X \\<inter> next_events P xs", ".."], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> X \\<inter> next_events P xs\n\ngoal (1 subgoal):\n 1. \\<And>y X.\n       \\<lbrakk>y \\<in> next_events P xs; X \\<in> A; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"X \\<inter> next_events P xs \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> X \\<inter> next_events P xs\n\ngoal (1 subgoal):\n 1. X \\<inter> next_events P xs \\<noteq> {}", "by (subst ex_in_conv [symmetric])"], ["proof (state)\nthis:\n  X \\<inter> next_events P xs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>y X.\n       \\<lbrakk>y \\<in> next_events P xs; X \\<in> A; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  X \\<inter> next_events P xs = {}\n  X \\<inter> next_events P xs \\<noteq> {}", "show False"], ["proof (prove)\nusing this:\n  X \\<inter> next_events P xs = {}\n  X \\<inter> next_events P xs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs, \\<Union>X\\<in>A. X) \\<in> failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem d_ipurge_unwinding:\n  assumes A: \"deterministic P\"\n  shows \"secure P I D = d_weakly_future_consistent P I D (rel_ipurge P I D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. secure P I D = d_weakly_future_consistent P I D (rel_ipurge P I D)", "proof (insert d_wfc_equals_dwfc [of P I D \"rel_ipurge P I D\", OF A], erule subst)"], ["proof (state)\ngoal (1 subgoal):\n 1. secure P I D = weakly_future_consistent P I D (rel_ipurge P I D)", "qed (insert d_implies_ruc [OF A], rule ipurge_unwinding)"], ["", "subsection \"Trace set processes\""], ["", "text \\<open>\nIn \\cite{R3}, section 2.8, Hoare formulates a simplified definition of a deterministic process,\nidentified with a \\emph{trace set}, i.e. a set of event lists containing the empty list and any\nprefix of each of its elements. Of course, this is consistent with the definition of determinism\napplying to processes identified with failures-divergences pairs, which implies that their refusals\nare completely specified by their traces (cf. \\cite{R3}, \\cite{R1}).\n\nHere below are the definitions of a function \\<open>ts_process\\<close>, converting the input set of lists\ninto a process, and a predicate \\<open>trace_set\\<close>, returning @{term True} just in case the input set\nof lists has the aforesaid properties. An analysis is then conducted about the output of the\nfunctions defined in \\cite{R1}, section 1.1, when acting on a \\emph{trace set process}, i.e. a\nprocess that may be expressed as \\<open>ts_process T\\<close> where \\<open>trace_set T\\<close> matches\n@{term True}.\n\n\\null\n\\<close>"], ["", "definition ts_process :: \"'a list set \\<Rightarrow> 'a process\" where\n\"ts_process T \\<equiv> Abs_process ({(xs, X). xs \\<in> T \\<and> (\\<forall>x \\<in> X. xs @ [x] \\<notin> T)}, {})\""], ["", "definition trace_set :: \"'a list set \\<Rightarrow> bool\" where\n\"trace_set T \\<equiv> [] \\<in> T \\<and> (\\<forall>xs x. xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T)\""], ["", "lemma ts_process_rep:\n  assumes A: \"trace_set T\"\n  shows \"Rep_process (ts_process T) =\n    ({(xs, X). xs \\<in> T \\<and> (\\<forall>x \\<in> X. xs @ [x] \\<notin> T)}, {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_process (ts_process T) =\n    ({(xs, X). xs \\<in> T \\<and> (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)},\n     {})", "proof (subst ts_process_def, rule Abs_process_inverse, simp add: process_set_def,\n (subst conj_assoc [symmetric])+, (rule conjI)+, simp_all add:\n process_prop_1_def\n process_prop_2_def\n process_prop_3_def\n process_prop_4_def\n process_prop_5_def\n process_prop_6_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. [] \\<in> T\n 2. \\<forall>xs.\n       (\\<exists>x.\n           xs @ [x] \\<in> T \\<and>\n           (\\<exists>X.\n               \\<forall>xa\\<in>X.\n                  xs @ [x, xa] \\<notin> T)) \\<longrightarrow>\n       xs \\<in> T\n 3. \\<forall>xs X.\n       xs \\<in> T \\<and>\n       (\\<exists>Y.\n           (\\<forall>x\\<in>Y. xs @ [x] \\<notin> T) \\<and>\n           X \\<subseteq> Y) \\<longrightarrow>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)", "show \"[] \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> T", "using A"], ["proof (prove)\nusing this:\n  trace_set T\n\ngoal (1 subgoal):\n 1. [] \\<in> T", "by (simp add: trace_set_def)"], ["proof (state)\nthis:\n  [] \\<in> T\n\ngoal (2 subgoals):\n 1. \\<forall>xs.\n       (\\<exists>x.\n           xs @ [x] \\<in> T \\<and>\n           (\\<exists>X.\n               \\<forall>xa\\<in>X.\n                  xs @ [x, xa] \\<notin> T)) \\<longrightarrow>\n       xs \\<in> T\n 2. \\<forall>xs X.\n       xs \\<in> T \\<and>\n       (\\<exists>Y.\n           (\\<forall>x\\<in>Y. xs @ [x] \\<notin> T) \\<and>\n           X \\<subseteq> Y) \\<longrightarrow>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>xs.\n       (\\<exists>x.\n           xs @ [x] \\<in> T \\<and>\n           (\\<exists>X.\n               \\<forall>xa\\<in>X.\n                  xs @ [x, xa] \\<notin> T)) \\<longrightarrow>\n       xs \\<in> T\n 2. \\<forall>xs X.\n       xs \\<in> T \\<and>\n       (\\<exists>Y.\n           (\\<forall>x\\<in>Y. xs @ [x] \\<notin> T) \\<and>\n           X \\<subseteq> Y) \\<longrightarrow>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)", "show \"\\<forall>xs. (\\<exists>x. xs @ [x] \\<in> T \\<and> (\\<exists>X. \\<forall>x' \\<in> X. xs @ [x, x'] \\<notin> T)) \\<longrightarrow> xs \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       (\\<exists>x.\n           xs @ [x] \\<in> T \\<and>\n           (\\<exists>X.\n               \\<forall>x'\\<in>X.\n                  xs @ [x, x'] \\<notin> T)) \\<longrightarrow>\n       xs \\<in> T", "proof (rule allI, rule impI, erule exE, erule conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>xs @ [x] \\<in> T;\n        \\<exists>X. \\<forall>x'\\<in>X. xs @ [x, x'] \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> xs \\<in> T", "fix xs x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>xs @ [x] \\<in> T;\n        \\<exists>X. \\<forall>x'\\<in>X. xs @ [x, x'] \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> xs \\<in> T", "have \"\\<forall>xs x. xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs x. xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T", "using A"], ["proof (prove)\nusing this:\n  trace_set T\n\ngoal (1 subgoal):\n 1. \\<forall>xs x. xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T", "by (simp add: trace_set_def)"], ["proof (state)\nthis:\n  \\<forall>xs x. xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>xs @ [x] \\<in> T;\n        \\<exists>X. \\<forall>x'\\<in>X. xs @ [x, x'] \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> xs \\<in> T", "hence \"xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T\""], ["proof (prove)\nusing this:\n  \\<forall>xs x. xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T", "by blast"], ["proof (state)\nthis:\n  xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>xs @ [x] \\<in> T;\n        \\<exists>X. \\<forall>x'\\<in>X. xs @ [x, x'] \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> xs \\<in> T", "moreover"], ["proof (state)\nthis:\n  xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>xs @ [x] \\<in> T;\n        \\<exists>X. \\<forall>x'\\<in>X. xs @ [x, x'] \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> xs \\<in> T", "assume \"xs @ [x] \\<in> T\""], ["proof (state)\nthis:\n  xs @ [x] \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>xs x.\n       \\<lbrakk>xs @ [x] \\<in> T;\n        \\<exists>X. \\<forall>x'\\<in>X. xs @ [x, x'] \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> xs \\<in> T", "ultimately"], ["proof (chain)\npicking this:\n  xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T\n  xs @ [x] \\<in> T", "show \"xs \\<in> T\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> T \\<longrightarrow> xs \\<in> T\n  xs @ [x] \\<in> T\n\ngoal (1 subgoal):\n 1. xs \\<in> T", ".."], ["proof (state)\nthis:\n  xs \\<in> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>xs.\n     (\\<exists>x.\n         xs @ [x] \\<in> T \\<and>\n         (\\<exists>X.\n             \\<forall>x'\\<in>X. xs @ [x, x'] \\<notin> T)) \\<longrightarrow>\n     xs \\<in> T\n\ngoal (1 subgoal):\n 1. \\<forall>xs X.\n       xs \\<in> T \\<and>\n       (\\<exists>Y.\n           (\\<forall>x\\<in>Y. xs @ [x] \\<notin> T) \\<and>\n           X \\<subseteq> Y) \\<longrightarrow>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>xs X.\n       xs \\<in> T \\<and>\n       (\\<exists>Y.\n           (\\<forall>x\\<in>Y. xs @ [x] \\<notin> T) \\<and>\n           X \\<subseteq> Y) \\<longrightarrow>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)", "show \"\\<forall>xs X. xs \\<in> T \\<and> (\\<exists>Y. (\\<forall>x \\<in> Y. xs @ [x] \\<notin> T) \\<and> X \\<subseteq> Y) \\<longrightarrow>\n    (\\<forall>x \\<in> X. xs @ [x] \\<notin> T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs X.\n       xs \\<in> T \\<and>\n       (\\<exists>Y.\n           (\\<forall>x\\<in>Y. xs @ [x] \\<notin> T) \\<and>\n           X \\<subseteq> Y) \\<longrightarrow>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)", "proof ((rule allI)+, rule impI, (erule conjE, (erule exE)?)+, rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X Y x.\n       \\<lbrakk>xs \\<in> T; \\<forall>x\\<in>Y. xs @ [x] \\<notin> T;\n        X \\<subseteq> Y; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> xs @ [x] \\<notin> T", "fix xs x X Y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X Y x.\n       \\<lbrakk>xs \\<in> T; \\<forall>x\\<in>Y. xs @ [x] \\<notin> T;\n        X \\<subseteq> Y; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> xs @ [x] \\<notin> T", "assume \"\\<forall>x \\<in> Y. xs @ [x] \\<notin> T\""], ["proof (state)\nthis:\n  \\<forall>x\\<in>Y. xs @ [x] \\<notin> T\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y x.\n       \\<lbrakk>xs \\<in> T; \\<forall>x\\<in>Y. xs @ [x] \\<notin> T;\n        X \\<subseteq> Y; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> xs @ [x] \\<notin> T", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>Y. xs @ [x] \\<notin> T\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y x.\n       \\<lbrakk>xs \\<in> T; \\<forall>x\\<in>Y. xs @ [x] \\<notin> T;\n        X \\<subseteq> Y; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> xs @ [x] \\<notin> T", "assume \"X \\<subseteq> Y\" and \"x \\<in> X\""], ["proof (state)\nthis:\n  X \\<subseteq> Y\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y x.\n       \\<lbrakk>xs \\<in> T; \\<forall>x\\<in>Y. xs @ [x] \\<notin> T;\n        X \\<subseteq> Y; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> xs @ [x] \\<notin> T", "hence \"x \\<in> Y\""], ["proof (prove)\nusing this:\n  X \\<subseteq> Y\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> Y", ".."], ["proof (state)\nthis:\n  x \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<And>xs X Y x.\n       \\<lbrakk>xs \\<in> T; \\<forall>x\\<in>Y. xs @ [x] \\<notin> T;\n        X \\<subseteq> Y; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> xs @ [x] \\<notin> T", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>Y. xs @ [x] \\<notin> T\n  x \\<in> Y", "show \"xs @ [x] \\<notin> T\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>Y. xs @ [x] \\<notin> T\n  x \\<in> Y\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<notin> T", ".."], ["proof (state)\nthis:\n  xs @ [x] \\<notin> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>xs X.\n     xs \\<in> T \\<and>\n     (\\<exists>Y.\n         (\\<forall>x\\<in>Y. xs @ [x] \\<notin> T) \\<and>\n         X \\<subseteq> Y) \\<longrightarrow>\n     (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ts_process_failures:\n \"trace_set T \\<Longrightarrow>\n  failures (ts_process T) = {(xs, X). xs \\<in> T \\<and> (\\<forall>x \\<in> X. xs @ [x] \\<notin> T)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace_set T \\<Longrightarrow>\n    failures (ts_process T) =\n    {(xs, X). xs \\<in> T \\<and> (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)}", "by (drule ts_process_rep, simp add: failures_def)"], ["", "lemma ts_process_futures:\n \"trace_set T \\<Longrightarrow>\n  futures (ts_process T) xs =\n  {(ys, Y). xs @ ys \\<in> T \\<and> (\\<forall>y \\<in> Y. xs @ ys @ [y] \\<notin> T)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace_set T \\<Longrightarrow>\n    futures (ts_process T) xs =\n    {(ys, Y).\n     xs @ ys \\<in> T \\<and> (\\<forall>y\\<in>Y. xs @ ys @ [y] \\<notin> T)}", "by (simp add: futures_def ts_process_failures)"], ["", "lemma ts_process_traces:\n \"trace_set T \\<Longrightarrow> traces (ts_process T) = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace_set T \\<Longrightarrow> traces (ts_process T) = T", "proof (drule ts_process_failures, simp add: traces_def, rule set_eqI, rule iffI, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>failures (ts_process T) =\n                {(xs, X).\n                 xs \\<in> T \\<and> (\\<forall>x\\<in>X. xs @ [x] \\<notin> T)};\n        x \\<in> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>X. \\<forall>xa\\<in>X. x @ [xa] \\<notin> T", "qed (rule_tac x = \"{}\" in exI, simp)"], ["", "lemma ts_process_refusals:\n \"trace_set T \\<Longrightarrow> xs \\<in> T \\<Longrightarrow>\n  refusals (ts_process T) xs = {X. \\<forall>x \\<in> X. xs @ [x] \\<notin> T}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trace_set T; xs \\<in> T\\<rbrakk>\n    \\<Longrightarrow> refusals (ts_process T) xs =\n                      {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T}", "by (drule ts_process_failures, simp add: refusals_def)"], ["", "lemma ts_process_next_events:\n \"trace_set T \\<Longrightarrow> (x \\<in> next_events (ts_process T) xs) = (xs @ [x] \\<in> T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace_set T \\<Longrightarrow>\n    (x \\<in> next_events (ts_process T) xs) = (xs @ [x] \\<in> T)", "by (drule ts_process_traces, simp add: next_events_def)"], ["", "text \\<open>\n\\null\n\nIn what follows, the proof is given of two results which provide a connection between the notions of\ndeterministic and trace set processes: any trace set process is deterministic, and any process is\ndeterministic just in case it is equal to the trace set process corresponding to the set of its\ntraces.\n\n\\null\n\\<close>"], ["", "lemma ts_process_d:\n \"trace_set T \\<Longrightarrow> deterministic (ts_process T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace_set T \\<Longrightarrow> deterministic (ts_process T)", "proof (frule ts_process_traces, simp add: deterministic_def, rule ballI,\n drule ts_process_refusals, assumption, simp add: next_events_def,\n rule allI, rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        \\<forall>x\\<in>X. xs @ [x] \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> X \\<inter> {x. xs @ [x] \\<in> T} = {}\n 2. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        X \\<inter> {x. xs @ [x] \\<in> T} = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>X. xs @ [x] \\<notin> T", "fix xs X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        \\<forall>x\\<in>X. xs @ [x] \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> X \\<inter> {x. xs @ [x] \\<in> T} = {}\n 2. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        X \\<inter> {x. xs @ [x] \\<in> T} = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>X. xs @ [x] \\<notin> T", "assume \"\\<forall>x \\<in> X. xs @ [x] \\<notin> T\""], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. xs @ [x] \\<notin> T\n\ngoal (2 subgoals):\n 1. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        \\<forall>x\\<in>X. xs @ [x] \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> X \\<inter> {x. xs @ [x] \\<in> T} = {}\n 2. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        X \\<inter> {x. xs @ [x] \\<in> T} = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>X. xs @ [x] \\<notin> T", "thus \"X \\<inter> {x. xs @ [x] \\<in> T} = {}\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. xs @ [x] \\<notin> T\n\ngoal (1 subgoal):\n 1. X \\<inter> {x. xs @ [x] \\<in> T} = {}", "by (rule_tac equals0I, erule_tac IntE, simp)"], ["proof (state)\nthis:\n  X \\<inter> {x. xs @ [x] \\<in> T} = {}\n\ngoal (1 subgoal):\n 1. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        X \\<inter> {x. xs @ [x] \\<in> T} = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>X. xs @ [x] \\<notin> T", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        X \\<inter> {x. xs @ [x] \\<in> T} = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>X. xs @ [x] \\<notin> T", "fix xs X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        X \\<inter> {x. xs @ [x] \\<in> T} = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>X. xs @ [x] \\<notin> T", "assume A: \"X \\<inter> {x. xs @ [x] \\<in> T} = {}\""], ["proof (state)\nthis:\n  X \\<inter> {x. xs @ [x] \\<in> T} = {}\n\ngoal (1 subgoal):\n 1. \\<And>xs X.\n       \\<lbrakk>traces (ts_process T) = T; xs \\<in> T;\n        refusals (ts_process T) xs =\n        {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> T};\n        X \\<inter> {x. xs @ [x] \\<in> T} = {}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>X. xs @ [x] \\<notin> T", "show \"\\<forall>x \\<in> X. xs @ [x] \\<notin> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. xs @ [x] \\<notin> T", "proof (rule ballI, rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> T\\<rbrakk> \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> T\\<rbrakk> \\<Longrightarrow> False", "assume \"x \\<in> X\" and \"xs @ [x] \\<in> T\""], ["proof (state)\nthis:\n  x \\<in> X\n  xs @ [x] \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> T\\<rbrakk> \\<Longrightarrow> False", "hence \"x \\<in> X \\<inter> {x. xs @ [x] \\<in> T}\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  xs @ [x] \\<in> T\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<inter> {x. xs @ [x] \\<in> T}", "by simp"], ["proof (state)\nthis:\n  x \\<in> X \\<inter> {x. xs @ [x] \\<in> T}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> T\\<rbrakk> \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  x \\<in> X \\<inter> {x. xs @ [x] \\<in> T}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> T\\<rbrakk> \\<Longrightarrow> False", "have \"x \\<notin> X \\<inter> {x. xs @ [x] \\<in> T}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> X \\<inter> {x. xs @ [x] \\<in> T}", "using A"], ["proof (prove)\nusing this:\n  X \\<inter> {x. xs @ [x] \\<in> T} = {}\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<inter> {x. xs @ [x] \\<in> T}", "by (rule equals0D)"], ["proof (state)\nthis:\n  x \\<notin> X \\<inter> {x. xs @ [x] \\<in> T}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> T\\<rbrakk> \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> X \\<inter> {x. xs @ [x] \\<in> T}\n  x \\<notin> X \\<inter> {x. xs @ [x] \\<in> T}", "show False"], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> {x. xs @ [x] \\<in> T}\n  x \\<notin> X \\<inter> {x. xs @ [x] \\<in> T}\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. xs @ [x] \\<notin> T\n\ngoal:\nNo subgoals!", "qed"], ["", "definition divergences :: \"'a process \\<Rightarrow> 'a list set\" where\n\"divergences P \\<equiv> snd (Rep_process P)\""], ["", "lemma d_divergences:\n  assumes A: \"deterministic P\"\n  shows \"divergences P = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divergences P = {}", "proof (subst divergences_def, rule equals0I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "have B: \"Rep_process P \\<in> process_set\" (is \"?P' \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_process P \\<in> process_set", "by (rule Rep_process)"], ["proof (state)\nthis:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "hence \"\\<forall>xs. \\<exists>x. xs \\<in> snd ?P' \\<longrightarrow> xs @ [x] \\<in> snd ?P'\""], ["proof (prove)\nusing this:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       \\<exists>x.\n          xs \\<in> snd (Rep_process P) \\<longrightarrow>\n          xs @ [x] \\<in> snd (Rep_process P)", "by (simp add: process_set_def process_prop_5_def)"], ["proof (state)\nthis:\n  \\<forall>xs.\n     \\<exists>x.\n        xs \\<in> snd (Rep_process P) \\<longrightarrow>\n        xs @ [x] \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "hence \"\\<exists>x. xs \\<in> snd ?P' \\<longrightarrow> xs @ [x] \\<in> snd ?P'\""], ["proof (prove)\nusing this:\n  \\<forall>xs.\n     \\<exists>x.\n        xs \\<in> snd (Rep_process P) \\<longrightarrow>\n        xs @ [x] \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       xs \\<in> snd (Rep_process P) \\<longrightarrow>\n       xs @ [x] \\<in> snd (Rep_process P)", ".."], ["proof (state)\nthis:\n  \\<exists>x.\n     xs \\<in> snd (Rep_process P) \\<longrightarrow>\n     xs @ [x] \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     xs \\<in> snd (Rep_process P) \\<longrightarrow>\n     xs @ [x] \\<in> snd (Rep_process P)", "obtain x where \"xs \\<in> snd ?P' \\<longrightarrow> xs @ [x] \\<in> snd ?P'\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     xs \\<in> snd (Rep_process P) \\<longrightarrow>\n     xs @ [x] \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        xs \\<in> snd (Rep_process P) \\<longrightarrow>\n        xs @ [x] \\<in> snd (Rep_process P) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  xs \\<in> snd (Rep_process P) \\<longrightarrow>\n  xs @ [x] \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  xs \\<in> snd (Rep_process P) \\<longrightarrow>\n  xs @ [x] \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "assume C: \"xs \\<in> snd ?P'\""], ["proof (state)\nthis:\n  xs \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<in> snd (Rep_process P) \\<longrightarrow>\n  xs @ [x] \\<in> snd (Rep_process P)\n  xs \\<in> snd (Rep_process P)", "have D: \"xs @ [x] \\<in> snd ?P'\""], ["proof (prove)\nusing this:\n  xs \\<in> snd (Rep_process P) \\<longrightarrow>\n  xs @ [x] \\<in> snd (Rep_process P)\n  xs \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> snd (Rep_process P)", ".."], ["proof (state)\nthis:\n  xs @ [x] \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "have E: \"\\<forall>xs X. xs \\<in> snd ?P' \\<longrightarrow> (xs, X) \\<in> fst ?P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs X.\n       xs \\<in> snd (Rep_process P) \\<longrightarrow>\n       (xs, X) \\<in> fst (Rep_process P)", "using B"], ["proof (prove)\nusing this:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. \\<forall>xs X.\n       xs \\<in> snd (Rep_process P) \\<longrightarrow>\n       (xs, X) \\<in> fst (Rep_process P)", "by (simp add: process_set_def process_prop_6_def)"], ["proof (state)\nthis:\n  \\<forall>xs X.\n     xs \\<in> snd (Rep_process P) \\<longrightarrow>\n     (xs, X) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "hence \"xs \\<in> snd ?P' \\<longrightarrow> (xs, {x}) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  \\<forall>xs X.\n     xs \\<in> snd (Rep_process P) \\<longrightarrow>\n     (xs, X) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. xs \\<in> snd (Rep_process P) \\<longrightarrow>\n    (xs, {x}) \\<in> fst (Rep_process P)", "by blast"], ["proof (state)\nthis:\n  xs \\<in> snd (Rep_process P) \\<longrightarrow>\n  (xs, {x}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "hence \"{x} \\<in> refusals P xs\""], ["proof (prove)\nusing this:\n  xs \\<in> snd (Rep_process P) \\<longrightarrow>\n  (xs, {x}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. {x} \\<in> refusals P xs", "using C"], ["proof (prove)\nusing this:\n  xs \\<in> snd (Rep_process P) \\<longrightarrow>\n  (xs, {x}) \\<in> fst (Rep_process P)\n  xs \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. {x} \\<in> refusals P xs", "by (drule_tac mp, simp_all add: failures_def refusals_def)"], ["proof (state)\nthis:\n  {x} \\<in> refusals P xs\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  {x} \\<in> refusals P xs\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "have \"xs @ [x] \\<in> snd ?P' \\<longrightarrow> (xs @ [x], {}) \\<in> fst ?P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> snd (Rep_process P) \\<longrightarrow>\n    (xs @ [x], {}) \\<in> fst (Rep_process P)", "using E"], ["proof (prove)\nusing this:\n  \\<forall>xs X.\n     xs \\<in> snd (Rep_process P) \\<longrightarrow>\n     (xs, X) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> snd (Rep_process P) \\<longrightarrow>\n    (xs @ [x], {}) \\<in> fst (Rep_process P)", "by blast"], ["proof (state)\nthis:\n  xs @ [x] \\<in> snd (Rep_process P) \\<longrightarrow>\n  (xs @ [x], {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "hence \"(xs @ [x], {}) \\<in> failures P\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> snd (Rep_process P) \\<longrightarrow>\n  (xs @ [x], {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> failures P", "using D"], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> snd (Rep_process P) \\<longrightarrow>\n  (xs @ [x], {}) \\<in> fst (Rep_process P)\n  xs @ [x] \\<in> snd (Rep_process P)\n\ngoal (1 subgoal):\n 1. (xs @ [x], {}) \\<in> failures P", "by (drule_tac mp, simp_all add: failures_def)"], ["proof (state)\nthis:\n  (xs @ [x], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "hence F: \"xs @ [x] \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs @ [x], {}) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs @ [x] \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "hence \"{x} \\<inter> next_events P xs \\<noteq> {}\""], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. {x} \\<inter> next_events P xs \\<noteq> {}", "by (simp add: next_events_def)"], ["proof (state)\nthis:\n  {x} \\<inter> next_events P xs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  {x} \\<in> refusals P xs\n  {x} \\<inter> next_events P xs \\<noteq> {}", "have G: \"({x} \\<in> refusals P xs) \\<noteq> ({x} \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  {x} \\<in> refusals P xs\n  {x} \\<inter> next_events P xs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P xs) \\<noteq> ({x} \\<inter> next_events P xs = {})", "by simp"], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) \\<noteq> ({x} \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "have \"\\<forall>xs \\<in> traces P. \\<forall>X. X \\<in> refusals P xs = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P.\n       \\<forall>X.\n          (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "using A"], ["proof (prove)\nusing this:\n  deterministic P\n\ngoal (1 subgoal):\n 1. \\<forall>xs\\<in>traces P.\n       \\<forall>X.\n          (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "by (simp add: deterministic_def)"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "have \"xs \\<in> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> traces P", "using F"], ["proof (prove)\nusing this:\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. xs \\<in> traces P", "by (rule process_rule_2_traces)"], ["proof (state)\nthis:\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  xs \\<in> traces P", "have \"\\<forall>X. X \\<in> refusals P xs = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "hence \"{x} \\<in> refusals P xs = ({x} \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> snd (Rep_process P) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. False", "using G"], ["proof (prove)\nusing this:\n  ({x} \\<in> refusals P xs) = ({x} \\<inter> next_events P xs = {})\n  ({x} \\<in> refusals P xs) \\<noteq> ({x} \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trace_set_traces:\n \"trace_set (traces P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace_set (traces P)", "proof (simp only: trace_set_def traces_def failures_def Domain_iff,\n rule conjI, (rule_tac [2] allI)+, rule_tac [2] impI, erule_tac [2] exE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>y. ([], y) \\<in> fst (Rep_process P)\n 2. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "have \"Rep_process P \\<in> process_set\" (is \"?P' \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_process P \\<in> process_set", "by (rule Rep_process)"], ["proof (state)\nthis:\n  Rep_process P \\<in> process_set\n\ngoal (2 subgoals):\n 1. \\<exists>y. ([], y) \\<in> fst (Rep_process P)\n 2. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "hence \"([], {}) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. ([], {}) \\<in> fst (Rep_process P)", "by (simp add: process_set_def process_prop_1_def)"], ["proof (state)\nthis:\n  ([], {}) \\<in> fst (Rep_process P)\n\ngoal (2 subgoals):\n 1. \\<exists>y. ([], y) \\<in> fst (Rep_process P)\n 2. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "thus \"\\<exists>X. ([], X) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  ([], {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<exists>X. ([], X) \\<in> fst (Rep_process P)", ".."], ["proof (state)\nthis:\n  \\<exists>X. ([], X) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "fix xs x X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "have \"Rep_process P \\<in> process_set\" (is \"?P' \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_process P \\<in> process_set", "by (rule Rep_process)"], ["proof (state)\nthis:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "hence \"\\<forall>xs x X. (xs @ [x], X) \\<in> fst ?P' \\<longrightarrow> (xs, {}) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  Rep_process P \\<in> process_set\n\ngoal (1 subgoal):\n 1. \\<forall>xs x X.\n       (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n       (xs, {}) \\<in> fst (Rep_process P)", "by (simp add: process_set_def process_prop_2_def)"], ["proof (state)\nthis:\n  \\<forall>xs x X.\n     (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n     (xs, {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "hence \"(xs @ [x], X) \\<in> fst ?P' \\<longrightarrow> (xs, {}) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  \\<forall>xs x X.\n     (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n     (xs, {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n    (xs, {}) \\<in> fst (Rep_process P)", "by blast"], ["proof (state)\nthis:\n  (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n  (xs, {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "moreover"], ["proof (state)\nthis:\n  (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n  (xs, {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "assume \"(xs @ [x], X) \\<in> fst ?P'\""], ["proof (state)\nthis:\n  (xs @ [x], X) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "ultimately"], ["proof (chain)\npicking this:\n  (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n  (xs, {}) \\<in> fst (Rep_process P)\n  (xs @ [x], X) \\<in> fst (Rep_process P)", "have \"(xs, {}) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  (xs @ [x], X) \\<in> fst (Rep_process P) \\<longrightarrow>\n  (xs, {}) \\<in> fst (Rep_process P)\n  (xs @ [x], X) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. (xs, {}) \\<in> fst (Rep_process P)", ".."], ["proof (state)\nthis:\n  (xs, {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<And>xs x y.\n       (xs @ [x], y) \\<in> fst (Rep_process P) \\<Longrightarrow>\n       \\<exists>y. (xs, y) \\<in> fst (Rep_process P)", "thus \"\\<exists>X. (xs, X) \\<in> fst ?P'\""], ["proof (prove)\nusing this:\n  (xs, {}) \\<in> fst (Rep_process P)\n\ngoal (1 subgoal):\n 1. \\<exists>X. (xs, X) \\<in> fst (Rep_process P)", ".."], ["proof (state)\nthis:\n  \\<exists>X. (xs, X) \\<in> fst (Rep_process P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d_implies_ts_process_traces:\n \"deterministic P \\<Longrightarrow> ts_process (traces P) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deterministic P \\<Longrightarrow> ts_process (traces P) = P", "proof (simp add: Rep_process_inject [symmetric] prod_eq_iff failures_def [symmetric],\n insert trace_set_traces [of P], frule ts_process_rep, frule d_divergences,\n simp add: divergences_def deterministic_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>xs\\<in>traces P.\n                \\<forall>X.\n                   (X \\<in> refusals P xs) =\n                   (X \\<inter> next_events P xs = {});\n     trace_set (traces P);\n     Rep_process (ts_process (traces P)) =\n     ({(xs, X).\n       xs \\<in> traces P \\<and>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> traces P)},\n      {});\n     snd (Rep_process P) = {}\\<rbrakk>\n    \\<Longrightarrow> failures (ts_process (traces P)) = failures P", "assume A: \"\\<forall>xs \\<in> traces P. \\<forall>X.\n    (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\""], ["proof (state)\nthis:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>xs\\<in>traces P.\n                \\<forall>X.\n                   (X \\<in> refusals P xs) =\n                   (X \\<inter> next_events P xs = {});\n     trace_set (traces P);\n     Rep_process (ts_process (traces P)) =\n     ({(xs, X).\n       xs \\<in> traces P \\<and>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> traces P)},\n      {});\n     snd (Rep_process P) = {}\\<rbrakk>\n    \\<Longrightarrow> failures (ts_process (traces P)) = failures P", "assume B: \"trace_set (traces P)\""], ["proof (state)\nthis:\n  trace_set (traces P)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>xs\\<in>traces P.\n                \\<forall>X.\n                   (X \\<in> refusals P xs) =\n                   (X \\<inter> next_events P xs = {});\n     trace_set (traces P);\n     Rep_process (ts_process (traces P)) =\n     ({(xs, X).\n       xs \\<in> traces P \\<and>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> traces P)},\n      {});\n     snd (Rep_process P) = {}\\<rbrakk>\n    \\<Longrightarrow> failures (ts_process (traces P)) = failures P", "hence C: \"traces (ts_process (traces P)) = traces P\""], ["proof (prove)\nusing this:\n  trace_set (traces P)\n\ngoal (1 subgoal):\n 1. traces (ts_process (traces P)) = traces P", "by (rule ts_process_traces)"], ["proof (state)\nthis:\n  traces (ts_process (traces P)) = traces P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>xs\\<in>traces P.\n                \\<forall>X.\n                   (X \\<in> refusals P xs) =\n                   (X \\<inter> next_events P xs = {});\n     trace_set (traces P);\n     Rep_process (ts_process (traces P)) =\n     ({(xs, X).\n       xs \\<in> traces P \\<and>\n       (\\<forall>x\\<in>X. xs @ [x] \\<notin> traces P)},\n      {});\n     snd (Rep_process P) = {}\\<rbrakk>\n    \\<Longrightarrow> failures (ts_process (traces P)) = failures P", "show \"failures (ts_process (traces P)) = failures P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. failures (ts_process (traces P)) = failures P", "proof (rule equalityI, rule_tac [!] subsetI, simp_all only: split_paired_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "fix xs X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "assume D: \"(xs, X) \\<in> failures (ts_process (traces P))\""], ["proof (state)\nthis:\n  (xs, X) \\<in> failures (ts_process (traces P))\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "hence \"xs \\<in> traces (ts_process (traces P))\""], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures (ts_process (traces P))\n\ngoal (1 subgoal):\n 1. xs \\<in> traces (ts_process (traces P))", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs \\<in> traces (ts_process (traces P))\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "hence E: \"xs \\<in> traces P\""], ["proof (prove)\nusing this:\n  xs \\<in> traces (ts_process (traces P))\n\ngoal (1 subgoal):\n 1. xs \\<in> traces P", "using C"], ["proof (prove)\nusing this:\n  xs \\<in> traces (ts_process (traces P))\n  traces (ts_process (traces P)) = traces P\n\ngoal (1 subgoal):\n 1. xs \\<in> traces P", "by simp"], ["proof (state)\nthis:\n  xs \\<in> traces P\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "with B"], ["proof (chain)\npicking this:\n  trace_set (traces P)\n  xs \\<in> traces P", "have\n     \"refusals (ts_process (traces P)) xs = {X. \\<forall>x \\<in> X. xs @ [x] \\<notin> traces P}\""], ["proof (prove)\nusing this:\n  trace_set (traces P)\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. refusals (ts_process (traces P)) xs =\n    {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}", "by (rule ts_process_refusals)"], ["proof (state)\nthis:\n  refusals (ts_process (traces P)) xs =\n  {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "moreover"], ["proof (state)\nthis:\n  refusals (ts_process (traces P)) xs =\n  {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "have \"X \\<in> refusals (ts_process (traces P)) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> refusals (ts_process (traces P)) xs", "using D"], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures (ts_process (traces P))\n\ngoal (1 subgoal):\n 1. X \\<in> refusals (ts_process (traces P)) xs", "by (simp add: refusals_def)"], ["proof (state)\nthis:\n  X \\<in> refusals (ts_process (traces P)) xs\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "ultimately"], ["proof (chain)\npicking this:\n  refusals (ts_process (traces P)) xs =\n  {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}\n  X \\<in> refusals (ts_process (traces P)) xs", "have \"\\<forall>x \\<in> X. xs @ [x] \\<notin> traces P\""], ["proof (prove)\nusing this:\n  refusals (ts_process (traces P)) xs =\n  {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}\n  X \\<in> refusals (ts_process (traces P)) xs\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "hence \"X \\<inter> next_events P xs = {}\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P\n\ngoal (1 subgoal):\n 1. X \\<inter> next_events P xs = {}", "by (rule_tac equals0I, erule_tac IntE, simp add: next_events_def)"], ["proof (state)\nthis:\n  X \\<inter> next_events P xs = {}\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "moreover"], ["proof (state)\nthis:\n  X \\<inter> next_events P xs = {}\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "have \"\\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "using A and E"], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "hence \"(X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "ultimately"], ["proof (chain)\npicking this:\n  X \\<inter> next_events P xs = {}\n  (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", "have \"X \\<in> refusals P xs\""], ["proof (prove)\nusing this:\n  X \\<inter> next_events P xs = {}\n  (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. X \\<in> refusals P xs", "by simp"], ["proof (state)\nthis:\n  X \\<in> refusals P xs\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> failures (ts_process (traces P)) \\<Longrightarrow>\n       (a, b) \\<in> failures P\n 2. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "thus \"(xs, X) \\<in> failures P\""], ["proof (prove)\nusing this:\n  X \\<in> refusals P xs\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> failures P", "by (simp add: refusals_def)"], ["proof (state)\nthis:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "fix xs X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "assume D: \"(xs, X) \\<in> failures P\""], ["proof (state)\nthis:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "hence E: \"xs \\<in> traces P\""], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. xs \\<in> traces P", "by (rule failures_traces)"], ["proof (state)\nthis:\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "with A"], ["proof (chain)\npicking this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  xs \\<in> traces P", "have \"\\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>xs\\<in>traces P.\n     \\<forall>X.\n        (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "hence \"(X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\""], ["proof (prove)\nusing this:\n  \\<forall>X. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})", ".."], ["proof (state)\nthis:\n  (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "moreover"], ["proof (state)\nthis:\n  (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "have \"X \\<in> refusals P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> refusals P xs", "using D"], ["proof (prove)\nusing this:\n  (xs, X) \\<in> failures P\n\ngoal (1 subgoal):\n 1. X \\<in> refusals P xs", "by (simp add: refusals_def)"], ["proof (state)\nthis:\n  X \\<in> refusals P xs\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "ultimately"], ["proof (chain)\npicking this:\n  (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  X \\<in> refusals P xs", "have F: \"X \\<inter> {x. xs @ [x] \\<in> traces P} = {}\""], ["proof (prove)\nusing this:\n  (X \\<in> refusals P xs) = (X \\<inter> next_events P xs = {})\n  X \\<in> refusals P xs\n\ngoal (1 subgoal):\n 1. X \\<inter> {x. xs @ [x] \\<in> traces P} = {}", "by (simp add: next_events_def)"], ["proof (state)\nthis:\n  X \\<inter> {x. xs @ [x] \\<in> traces P} = {}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "have \"\\<forall>x \\<in> X. xs @ [x] \\<notin> traces P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P", "proof (rule ballI, rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> traces P\\<rbrakk>\n       \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> traces P\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"x \\<in> X\" and \"xs @ [x] \\<in> traces P\""], ["proof (state)\nthis:\n  x \\<in> X\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> traces P\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"x \\<in> X \\<inter> {x. xs @ [x] \\<in> traces P}\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  xs @ [x] \\<in> traces P\n\ngoal (1 subgoal):\n 1. x \\<in> X \\<inter> {x. xs @ [x] \\<in> traces P}", "by simp"], ["proof (state)\nthis:\n  x \\<in> X \\<inter> {x. xs @ [x] \\<in> traces P}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> traces P\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  x \\<in> X \\<inter> {x. xs @ [x] \\<in> traces P}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> traces P\\<rbrakk>\n       \\<Longrightarrow> False", "have \"x \\<notin> X \\<inter> {x. xs @ [x] \\<in> traces P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> X \\<inter> {x. xs @ [x] \\<in> traces P}", "using F"], ["proof (prove)\nusing this:\n  X \\<inter> {x. xs @ [x] \\<in> traces P} = {}\n\ngoal (1 subgoal):\n 1. x \\<notin> X \\<inter> {x. xs @ [x] \\<in> traces P}", "by (rule equals0D)"], ["proof (state)\nthis:\n  x \\<notin> X \\<inter> {x. xs @ [x] \\<in> traces P}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> X; xs @ [x] \\<in> traces P\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> X \\<inter> {x. xs @ [x] \\<in> traces P}\n  x \\<notin> X \\<inter> {x. xs @ [x] \\<in> traces P}", "show False"], ["proof (prove)\nusing this:\n  x \\<in> X \\<inter> {x. xs @ [x] \\<in> traces P}\n  x \\<notin> X \\<inter> {x. xs @ [x] \\<in> traces P}\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "have\n     \"refusals (ts_process (traces P)) xs = {X. \\<forall>x \\<in> X. xs @ [x] \\<notin> traces P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refusals (ts_process (traces P)) xs =\n    {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}", "using B and E"], ["proof (prove)\nusing this:\n  trace_set (traces P)\n  xs \\<in> traces P\n\ngoal (1 subgoal):\n 1. refusals (ts_process (traces P)) xs =\n    {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}", "by (rule ts_process_refusals)"], ["proof (state)\nthis:\n  refusals (ts_process (traces P)) xs =\n  {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P\n  refusals (ts_process (traces P)) xs =\n  {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}", "have \"X \\<in> refusals (ts_process (traces P)) xs\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P\n  refusals (ts_process (traces P)) xs =\n  {X. \\<forall>x\\<in>X. xs @ [x] \\<notin> traces P}\n\ngoal (1 subgoal):\n 1. X \\<in> refusals (ts_process (traces P)) xs", "by simp"], ["proof (state)\nthis:\n  X \\<in> refusals (ts_process (traces P)) xs\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> failures P \\<Longrightarrow>\n       (a, b) \\<in> failures (ts_process (traces P))", "thus \"(xs, X) \\<in> failures (ts_process (traces P))\""], ["proof (prove)\nusing this:\n  X \\<in> refusals (ts_process (traces P)) xs\n\ngoal (1 subgoal):\n 1. (xs, X) \\<in> failures (ts_process (traces P))", "by (simp add: refusals_def)"], ["proof (state)\nthis:\n  (xs, X) \\<in> failures (ts_process (traces P))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  failures (ts_process (traces P)) = failures P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ts_process_traces_implies_d:\n \"ts_process (traces P) = P \\<Longrightarrow> deterministic P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts_process (traces P) = P \\<Longrightarrow> deterministic P", "by (insert trace_set_traces [of P], drule ts_process_d, simp)"], ["", "lemma d_equals_ts_process_traces:\n \"deterministic P = (ts_process (traces P) = P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deterministic P = (ts_process (traces P) = P)", "by (rule iffI, erule d_implies_ts_process_traces, rule ts_process_traces_implies_d)"], ["", "text \\<open>\n\\null\n\nFinally, a variant of the Ipurge Unwinding Theorem applying to trace set processes is derived from\nthe variant for deterministic processes. Particularly, the assumption that the process be\ndeterministic is replaced by the assumption that it be a trace set process,\nsince the former property is entailed by the latter (cf. above).\n\n\\null\n\\<close>"], ["", "theorem ts_ipurge_unwinding:\n \"trace_set T \\<Longrightarrow>\n  secure (ts_process T) I D =\n  d_weakly_future_consistent (ts_process T) I D (rel_ipurge (ts_process T) I D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace_set T \\<Longrightarrow>\n    secure (ts_process T) I D =\n    d_weakly_future_consistent (ts_process T) I D\n     (rel_ipurge (ts_process T) I D)", "by (rule d_ipurge_unwinding, rule ts_process_d)"], ["", "end"]]}