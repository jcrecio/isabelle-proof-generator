{"file_name": "/home/qj213/afp-2021-10-22/thys/Neumann_Morgenstern_Utility/PMF_Composition.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Neumann_Morgenstern_Utility", "problem_names": ["lemma pmf_mix: \"a \\<in> {0..1} \\<Longrightarrow> pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\"", "lemma pmf_mix_deeper: \"a \\<in> {0..1} \\<Longrightarrow> pmf (mix_pmf a p q) x = a * pmf p x + pmf q x - a * pmf q x\"", "lemma bernoulli_pmf_0 [simp]: \"bernoulli_pmf 0 = return_pmf False\"", "lemma bernoulli_pmf_1 [simp]: \"bernoulli_pmf 1 = return_pmf True\"", "lemma pmf_mix_0 [simp]: \"mix_pmf 0 p q = q\"", "lemma pmf_mix_1 [simp]: \"mix_pmf 1 p q = p\"", "lemma set_pmf_mix: \"a \\<in> {0<..<1} \\<Longrightarrow> set_pmf (mix_pmf a p q) = set_pmf p \\<union> set_pmf q\"", "lemma set_pmf_mix_eq: \"a \\<in> {0..1} \\<Longrightarrow> mix_pmf a p p = p\"", "lemma pmf_equiv_intro[intro]:\n  assumes \"\\<And>e. e \\<in> set_pmf p \\<Longrightarrow> pmf p e = pmf q e\"\n  assumes \"\\<And>e. e \\<in> set_pmf q \\<Longrightarrow> pmf q e = pmf p e\"\n  shows \"p = q\"", "lemma pmf_equiv_intro1[intro]:\n  assumes \"\\<And>e. e \\<in> set_pmf p \\<Longrightarrow> pmf p e = pmf q e\"\n  shows \"p = q\"", "lemma pmf_inverse_switch_eqals:  \n  assumes \"a \\<in> {0..1}\"\n  shows \"mix_pmf a p q = mix_pmf (1-a) q p\"", "lemma mix_pmf_comp_left_div:\n  assumes \"\\<alpha> \\<in> {0..(1::real)}\"\n    and \"\\<beta> \\<in> {0..(1::real)}\"\n  assumes \"\\<alpha> > \\<beta>\"\n  shows \"pmf (mix_pmf (\\<beta>/\\<alpha>) (mix_pmf \\<alpha> p q) q) e = \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e\"", "lemma mix_pmf_comp_with_dif_equiv:\n  assumes \"\\<alpha> \\<in> {0..(1::real)}\"\n    and \"\\<beta> \\<in> {0..(1::real)}\"\n  assumes \"\\<alpha> > \\<beta>\"\n  shows \"mix_pmf (\\<beta>/\\<alpha>) (mix_pmf \\<alpha> p q) q = mix_pmf \\<beta> p q\" (is \"?l = ?r\")", "lemma product_mix_pmf_prob_distrib:\n  assumes \"a \\<in> {0..1}\"\n    and \"b \\<in> {0..1}\"\n  shows \"mix_pmf a (mix_pmf b p q) q = mix_pmf (a*b) p q\"", "lemma mix_pmf_subset_of_original:\n  assumes \"a \\<in> {0..1}\"\n  shows \"(set_pmf (mix_pmf a p q)) \\<subseteq> set_pmf p \\<union> set_pmf q\"", "lemma mix_pmf_preserves_finite_support:\n  assumes \"a \\<in> {0..1}\"\n  assumes \"finite (set_pmf p)\"\n    and \"finite (set_pmf q)\"\n  shows \"finite (set_pmf (mix_pmf a p q))\"", "lemma ex_certain_iff_singleton_support:\n  shows \"(\\<exists>x. pmf p x = 1) \\<longleftrightarrow> card (set_pmf p) = 1\"", "lemma mix_pmf_partition:\n  fixes p :: \"'a pmf\"\n  assumes \"y \\<in> set_pmf p\" \"set_pmf p - {y} \\<noteq> {}\"\n  obtains a q where \"a \\<in> {0<..<1}\" \"set_pmf q = set_pmf p - {y}\" \n    \"p = mix_pmf a q (return_pmf y)\"", "lemma pmf_mix_induct [consumes 2, case_names degenerate mix]:\n  assumes \"finite A\" \"set_pmf p \\<subseteq> A\"\n  assumes degenerate: \"\\<And>x. x \\<in> A \\<Longrightarrow> P (return_pmf x)\"\n  assumes mix:        \"\\<And>p a y. set_pmf p \\<subseteq> A \\<Longrightarrow> a \\<in> {0<..<1} \\<Longrightarrow> y \\<in> A \\<Longrightarrow> \n                         P p \\<Longrightarrow> P (mix_pmf a p (return_pmf y))\"\n  shows \"P p\"", "lemma pmf_mix_induct' [consumes 2, case_names degenerate mix]:\n  assumes \"finite A\" \"set_pmf p \\<subseteq> A\"\n  assumes degenerate: \"\\<And>x. x \\<in> A \\<Longrightarrow> P (return_pmf x)\"\n  assumes mix:        \"\\<And>p q a. set_pmf p \\<subseteq> A \\<Longrightarrow> set_pmf q \\<subseteq> A \\<Longrightarrow> a \\<in> {0<..<1} \\<Longrightarrow> \n                         P p \\<Longrightarrow> P q \\<Longrightarrow> P (mix_pmf a p q)\"\n  shows \"P p\"", "lemma finite_sum_distribute_mix_pmf:\n  assumes \"finite (set_pmf (mix_pmf a p q))\"\n  assumes \"finite (set_pmf p)\"\n  assumes \"finite (set_pmf q)\"\n  shows \"(\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i) = (\\<Sum>i\\<in>set_pmf p.  a * pmf p i) + (\\<Sum>i\\<in>set_pmf q. (1-a) * pmf q i)\"", "lemma distribute_alpha_over_sum:\n  shows \"(\\<Sum>i\\<in>set_pmf T. a * pmf p i * f i) = a * (\\<Sum>i\\<in>set_pmf T. pmf p i * f i)\"", "lemma sum_over_subset_pmf_support:\n  assumes \"finite T\"\n  assumes \"set_pmf p \\<subseteq> T\"\n  shows \"(\\<Sum>i\\<in>T. a * pmf p i * f i) = (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\"", "lemma expected_value_mix_pmf_distrib:\n  assumes \"finite (set_pmf p)\"\n    and \"finite (set_pmf q)\"\n  assumes \"a \\<in> {0<..<1}\"\n  shows \"measure_pmf.expectation (mix_pmf a p q) f = a * measure_pmf.expectation p f + (1-a) * measure_pmf.expectation q f\"", "lemma expected_value_mix_pmf:\n  assumes \"finite (set_pmf p)\"\n    and \"finite (set_pmf q)\"\n  assumes \"a \\<in> {0..1}\"\n  shows \"measure_pmf.expectation (mix_pmf a p q) f = a * measure_pmf.expectation p f + (1-a) * measure_pmf.expectation q f\""], "translations": [["", "lemma pmf_mix: \"a \\<in> {0..1} \\<Longrightarrow> pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {0..1} \\<Longrightarrow>\n    pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x", "by (simp add: mix_pmf_def pmf_bind)"], ["", "lemma pmf_mix_deeper: \"a \\<in> {0..1} \\<Longrightarrow> pmf (mix_pmf a p q) x = a * pmf p x + pmf q x - a * pmf q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {0..1} \\<Longrightarrow>\n    pmf (mix_pmf a p q) x = a * pmf p x + pmf q x - a * pmf q x", "by (simp add: left_diff_distrib' pmf_mix)"], ["", "lemma bernoulli_pmf_0 [simp]: \"bernoulli_pmf 0 = return_pmf False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli_pmf 0 = return_pmf False", "by (intro pmf_eqI) (auto simp: bernoulli_pmf.rep_eq)"], ["", "lemma bernoulli_pmf_1 [simp]: \"bernoulli_pmf 1 = return_pmf True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bernoulli_pmf 1 = return_pmf True", "by (intro pmf_eqI) (auto simp: bernoulli_pmf.rep_eq)"], ["", "lemma pmf_mix_0 [simp]: \"mix_pmf 0 p q = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mix_pmf 0 p q = q", "by (simp add: mix_pmf_def bind_return_pmf)"], ["", "lemma pmf_mix_1 [simp]: \"mix_pmf 1 p q = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mix_pmf 1 p q = p", "by (simp add: mix_pmf_def bind_return_pmf)"], ["", "lemma set_pmf_mix: \"a \\<in> {0<..<1} \\<Longrightarrow> set_pmf (mix_pmf a p q) = set_pmf p \\<union> set_pmf q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {0<..<1} \\<Longrightarrow>\n    set_pmf (mix_pmf a p q) = set_pmf p \\<union> set_pmf q", "by (auto simp add: mix_pmf_def split: if_splits)"], ["", "lemma set_pmf_mix_eq: \"a \\<in> {0..1} \\<Longrightarrow> mix_pmf a p p = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {0..1} \\<Longrightarrow> mix_pmf a p p = p", "by (simp add: mix_pmf_def)"], ["", "lemma pmf_equiv_intro[intro]:\n  assumes \"\\<And>e. e \\<in> set_pmf p \\<Longrightarrow> pmf p e = pmf q e\"\n  assumes \"\\<And>e. e \\<in> set_pmf q \\<Longrightarrow> pmf q e = pmf p e\"\n  shows \"p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "by (metis assms(2) less_irrefl pmf_neq_exists_less pmf_not_neg set_pmf_iff)"], ["", "lemma pmf_equiv_intro1[intro]:\n  assumes \"\\<And>e. e \\<in> set_pmf p \\<Longrightarrow> pmf p e = pmf q e\"\n  shows \"p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q", "by (standard, auto simp: assms, metis assms set_pmf_iff assms \n      linorder_not_le order_refl pmf_neq_exists_less pmf_not_neg set_pmf_iff)"], ["", "lemma pmf_inverse_switch_eqals:  \n  assumes \"a \\<in> {0..1}\"\n  shows \"mix_pmf a p q = mix_pmf (1-a) q p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mix_pmf a p q = mix_pmf (1 - a) q p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mix_pmf a p q = mix_pmf (1 - a) q p", "have fst: \"\\<forall>x \\<in> set_pmf p. pmf (mix_pmf a p q) x = pmf (mix_pmf (1-a) q p) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_pmf p.\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf p \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf p \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "assume \"x \\<in> set_pmf p\""], ["proof (state)\nthis:\n  x \\<in> set_pmf p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf p \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "have \"pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x", "using pmf_mix[of a p q x] assms"], ["proof (prove)\nusing this:\n  a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\n  a \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x", "by blast"], ["proof (state)\nthis:\n  pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf p \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "also"], ["proof (state)\nthis:\n  pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf p \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "have \"... = a * pmf p x +  pmf q x - a * pmf q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * pmf p x + (1 - a) * pmf q x = a * pmf p x + pmf q x - a * pmf q x", "by (simp add: left_diff_distrib)"], ["proof (state)\nthis:\n  a * pmf p x + (1 - a) * pmf q x = a * pmf p x + pmf q x - a * pmf q x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf p \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "from pmf_mix[of \"1-a\" q p x] assms"], ["proof (chain)\npicking this:\n  1 - a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x\n  a \\<in> {0..1}", "have \"pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x\""], ["proof (prove)\nusing this:\n  1 - a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x\n  a \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (1 - a) q p) x =\n    (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x", "by auto"], ["proof (state)\nthis:\n  pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf p \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "then"], ["proof (chain)\npicking this:\n  pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x", "show \"pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x\""], ["proof (prove)\nusing this:\n  pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "using calculation"], ["proof (prove)\nusing this:\n  pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x\n  pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "by auto"], ["proof (state)\nthis:\n  pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_pmf p.\n     pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x\n\ngoal (1 subgoal):\n 1. mix_pmf a p q = mix_pmf (1 - a) q p", "have \"\\<forall>x \\<in> set_pmf q. pmf (mix_pmf a p q) x =  pmf (mix_pmf (1-a) q p) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_pmf q.\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf q \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf q \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "assume \"x \\<in> set_pmf q\""], ["proof (state)\nthis:\n  x \\<in> set_pmf q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf q \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "have \"pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x", "using pmf_mix[of a p q x] assms"], ["proof (prove)\nusing this:\n  a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\n  a \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x", "by blast"], ["proof (state)\nthis:\n  pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf q \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "also"], ["proof (state)\nthis:\n  pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf q \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "have \"... = a * pmf p x +  pmf q x - a * pmf q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * pmf p x + (1 - a) * pmf q x = a * pmf p x + pmf q x - a * pmf q x", "by (simp add: left_diff_distrib)"], ["proof (state)\nthis:\n  a * pmf p x + (1 - a) * pmf q x = a * pmf p x + pmf q x - a * pmf q x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_pmf q \\<Longrightarrow>\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "from pmf_mix[of \"1-a\" q p x] assms"], ["proof (chain)\npicking this:\n  1 - a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x\n  a \\<in> {0..1}", "show \"pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x\""], ["proof (prove)\nusing this:\n  1 - a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x\n  a \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "using calculation"], ["proof (prove)\nusing this:\n  1 - a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf (1 - a) q p) x = (1 - a) * pmf q x + (1 - (1 - a)) * pmf p x\n  a \\<in> {0..1}\n  pmf (mix_pmf a p q) x = a * pmf p x + (1 - a) * pmf q x\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "by auto"], ["proof (state)\nthis:\n  pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_pmf q.\n     pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x\n\ngoal (1 subgoal):\n 1. mix_pmf a p q = mix_pmf (1 - a) q p", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set_pmf q.\n     pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "have \"\\<forall>x \\<in> set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) x =  pmf (mix_pmf (1-a) q p) x\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set_pmf q.\n     pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_pmf (mix_pmf a p q).\n       pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x", "by (metis (no_types) fst add_0_left assms mult_eq_0_iff pmf_mix set_pmf_iff)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_pmf (mix_pmf a p q).\n     pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x\n\ngoal (1 subgoal):\n 1. mix_pmf a p q = mix_pmf (1 - a) q p", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set_pmf (mix_pmf a p q).\n     pmf (mix_pmf a p q) x = pmf (mix_pmf (1 - a) q p) x\n\ngoal (1 subgoal):\n 1. mix_pmf a p q = mix_pmf (1 - a) q p", "by (simp add: pmf_equiv_intro1)"], ["proof (state)\nthis:\n  mix_pmf a p q = mix_pmf (1 - a) q p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mix_pmf_comp_left_div:\n  assumes \"\\<alpha> \\<in> {0..(1::real)}\"\n    and \"\\<beta> \\<in> {0..(1::real)}\"\n  assumes \"\\<alpha> > \\<beta>\"\n  shows \"pmf (mix_pmf (\\<beta>/\\<alpha>) (mix_pmf \\<alpha> p q) q) e = \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "let ?l = \"(mix_pmf (\\<beta>/\\<alpha>) (mix_pmf \\<alpha> p q) q)\""], ["proof (state)\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "have fst: \"pmf ?l e = (\\<beta>/\\<alpha>) * pmf (mix_pmf \\<alpha> p q) e + (1-\\<beta>/\\<alpha>) * pmf q e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "by (meson assms(1) assms(2) assms(3) atLeastAtMost_iff less_divide_eq_1 \n        less_eq_real_def not_less pmf_mix zero_le_divide_iff)"], ["proof (state)\nthis:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "then"], ["proof (chain)\npicking this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e", "have \"pmf (mix_pmf \\<alpha> p q) e = \\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e\""], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf \\<alpha> p q) e =\n    \\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e", "using pmf_mix[of \"\\<alpha>\" p q] assms(2) assms(3) assms(1)"], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  \\<alpha> \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf \\<alpha> p q) ?x =\n  \\<alpha> * pmf p ?x + (1 - \\<alpha>) * pmf q ?x\n  \\<beta> \\<in> {0..1}\n  \\<beta> < \\<alpha>\n  \\<alpha> \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf \\<alpha> p q) e =\n    \\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e", "by blast"], ["proof (state)\nthis:\n  pmf (mix_pmf \\<alpha> p q) e =\n  \\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "have \"pmf ?l e = (\\<beta>/\\<alpha>) * (\\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e) + (1-\\<beta>/\\<alpha>) * pmf q e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> / \\<alpha> * (\\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e) +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "using fst assms(1) pmf_mix"], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  \\<alpha> \\<in> {0..1}\n  ?a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf ?a ?p ?q) ?x = ?a * pmf ?p ?x + (1 - ?a) * pmf ?q ?x\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> / \\<alpha> * (\\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e) +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "by fastforce"], ["proof (state)\nthis:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * (\\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e) +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "then"], ["proof (chain)\npicking this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * (\\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e) +\n  (1 - \\<beta> / \\<alpha>) * pmf q e", "have \"pmf ?l e = ((\\<beta>/\\<alpha>) *\\<alpha> * pmf p e + (\\<beta>/\\<alpha>) *(1 - \\<alpha>) * pmf q e) + (1-\\<beta>/\\<alpha>) * pmf q e\""], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * (\\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e) +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> / \\<alpha> * \\<alpha> * pmf p e +\n    \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "using fst assms(1)"], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * (\\<alpha> * pmf p e + (1 - \\<alpha>) * pmf q e) +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  \\<alpha> \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> / \\<alpha> * \\<alpha> * pmf p e +\n    \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "by (metis  mult.assoc  ring_class.ring_distribs(1))"], ["proof (state)\nthis:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * \\<alpha> * pmf p e +\n  \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "then"], ["proof (chain)\npicking this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * \\<alpha> * pmf p e +\n  \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e", "have *: \"pmf ?l e = (\\<beta> * pmf p e + (\\<beta>/\\<alpha>) *(1 - \\<alpha>) * pmf q e) + (1-\\<beta>/\\<alpha>) * pmf q e\""], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * \\<alpha> * pmf p e +\n  \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "using fst assms(1) assms(2) assms(3)"], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * \\<alpha> * pmf p e +\n  \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  \\<alpha> \\<in> {0..1}\n  \\<beta> \\<in> {0..1}\n  \\<beta> < \\<alpha>\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "by auto"], ["proof (state)\nthis:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "then"], ["proof (chain)\npicking this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e", "have \"pmf ?l e = (\\<beta> * pmf p e + ((\\<beta>/\\<alpha>) - (\\<beta>/\\<alpha>)*\\<alpha>) * pmf q e) + (1-\\<beta>/\\<alpha>) * pmf q e\""], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e +\n    (\\<beta> / \\<alpha> - \\<beta> / \\<alpha> * \\<alpha>) * pmf q e +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "using fst assms(1) assms(2) assms(3)"], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + \\<beta> / \\<alpha> * (1 - \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  \\<alpha> \\<in> {0..1}\n  \\<beta> \\<in> {0..1}\n  \\<beta> < \\<alpha>\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e +\n    (\\<beta> / \\<alpha> - \\<beta> / \\<alpha> * \\<alpha>) * pmf q e +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "by (simp add: * diff_divide_distrib right_diff_distrib')"], ["proof (state)\nthis:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e +\n  (\\<beta> / \\<alpha> - \\<beta> / \\<alpha> * \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "then"], ["proof (chain)\npicking this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e +\n  (\\<beta> / \\<alpha> - \\<beta> / \\<alpha> * \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e", "have \"pmf ?l e = (\\<beta> * pmf p e + ((\\<beta>/\\<alpha>) - \\<beta>) * pmf q e) + (1-\\<beta>/\\<alpha>) * pmf q e\""], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e +\n  (\\<beta> / \\<alpha> - \\<beta> / \\<alpha> * \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + (\\<beta> / \\<alpha> - \\<beta>) * pmf q e +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "using fst assms(1) assms(2) assms(3)"], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e +\n  (\\<beta> / \\<alpha> - \\<beta> / \\<alpha> * \\<alpha>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> / \\<alpha> * pmf (mix_pmf \\<alpha> p q) e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n  \\<alpha> \\<in> {0..1}\n  \\<beta> \\<in> {0..1}\n  \\<beta> < \\<alpha>\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + (\\<beta> / \\<alpha> - \\<beta>) * pmf q e +\n    (1 - \\<beta> / \\<alpha>) * pmf q e", "by auto"], ["proof (state)\nthis:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + (\\<beta> / \\<alpha> - \\<beta>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "then"], ["proof (chain)\npicking this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + (\\<beta> / \\<alpha> - \\<beta>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e", "have \"pmf ?l e = (\\<beta> * pmf p e + (\\<beta>/\\<alpha>) * pmf q e - \\<beta> * pmf q e) + 1* pmf q e-\\<beta>/\\<alpha>* pmf q e\""], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + (\\<beta> / \\<alpha> - \\<beta>) * pmf q e +\n  (1 - \\<beta> / \\<alpha>) * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + \\<beta> / \\<alpha> * pmf q e - \\<beta> * pmf q e +\n    1 * pmf q e -\n    \\<beta> / \\<alpha> * pmf q e", "by (simp add: left_diff_distrib)"], ["proof (state)\nthis:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + \\<beta> / \\<alpha> * pmf q e - \\<beta> * pmf q e +\n  1 * pmf q e -\n  \\<beta> / \\<alpha> * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "thus ?thesis"], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + \\<beta> / \\<alpha> * pmf q e - \\<beta> * pmf q e +\n  1 * pmf q e -\n  \\<beta> / \\<alpha> * pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e", "by linarith"], ["proof (state)\nthis:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mix_pmf_comp_with_dif_equiv:\n  assumes \"\\<alpha> \\<in> {0..(1::real)}\"\n    and \"\\<beta> \\<in> {0..(1::real)}\"\n  assumes \"\\<alpha> > \\<beta>\"\n  shows \"mix_pmf (\\<beta>/\\<alpha>) (mix_pmf \\<alpha> p q) q = mix_pmf \\<beta> p q\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q =\n    mix_pmf \\<beta> p q", "proof (rule pmf_equiv_intro1[symmetric])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf (mix_pmf \\<beta> p q) \\<Longrightarrow>\n       pmf (mix_pmf \\<beta> p q) e =\n       pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf (mix_pmf \\<beta> p q) \\<Longrightarrow>\n       pmf (mix_pmf \\<beta> p q) e =\n       pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e", "assume a: \"e \\<in> set_pmf ?r\""], ["proof (state)\nthis:\n  e \\<in> set_pmf (mix_pmf \\<beta> p q)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf (mix_pmf \\<beta> p q) \\<Longrightarrow>\n       pmf (mix_pmf \\<beta> p q) e =\n       pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e", "have \"e \\<in> set_pmf ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> set_pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q)", "using a pmf_mix_deeper"], ["proof (prove)\nusing this:\n  e \\<in> set_pmf (mix_pmf \\<beta> p q)\n  ?a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf ?a ?p ?q) ?x = ?a * pmf ?p ?x + pmf ?q ?x - ?a * pmf ?q ?x\n\ngoal (1 subgoal):\n 1. e \\<in> set_pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q)", "by (metis assms(1) assms(2) assms(3) mix_pmf_comp_left_div pmf_eq_0_set_pmf)"], ["proof (state)\nthis:\n  e \\<in> set_pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf (mix_pmf \\<beta> p q) \\<Longrightarrow>\n       pmf (mix_pmf \\<beta> p q) e =\n       pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e", "then"], ["proof (chain)\npicking this:\n  e \\<in> set_pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q)", "have \"pmf ?l e = \\<beta> * pmf p e - \\<beta> * pmf q e + pmf q e\""], ["proof (prove)\nusing this:\n  e \\<in> set_pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q)\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e - \\<beta> * pmf q e + pmf q e", "using pmf_mix_deeper[of \"\\<beta>/\\<alpha>\" p q e] mix_pmf_comp_left_div[of \\<alpha> \\<beta> p q e] assms"], ["proof (prove)\nusing this:\n  e \\<in> set_pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q)\n  \\<beta> / \\<alpha> \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf (\\<beta> / \\<alpha>) p q) e =\n  \\<beta> / \\<alpha> * pmf p e + pmf q e - \\<beta> / \\<alpha> * pmf q e\n  \\<lbrakk>\\<alpha> \\<in> {0..1}; \\<beta> \\<in> {0..1};\n   \\<beta> < \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q)\n                          q)\n                     e =\n                    \\<beta> * pmf p e + pmf q e - \\<beta> * pmf q e\n  \\<alpha> \\<in> {0..1}\n  \\<beta> \\<in> {0..1}\n  \\<beta> < \\<alpha>\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n    \\<beta> * pmf p e - \\<beta> * pmf q e + pmf q e", "by auto"], ["proof (state)\nthis:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e - \\<beta> * pmf q e + pmf q e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf (mix_pmf \\<beta> p q) \\<Longrightarrow>\n       pmf (mix_pmf \\<beta> p q) e =\n       pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e", "then"], ["proof (chain)\npicking this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e - \\<beta> * pmf q e + pmf q e", "show \"pmf (mix_pmf \\<beta> p q) e = pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e\""], ["proof (prove)\nusing this:\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e =\n  \\<beta> * pmf p e - \\<beta> * pmf q e + pmf q e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf \\<beta> p q) e =\n    pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e", "by (metis (full_types) assms(1) assms(2) assms(3) mix_pmf_comp_left_div pmf_mix_deeper)"], ["proof (state)\nthis:\n  pmf (mix_pmf \\<beta> p q) e =\n  pmf (mix_pmf (\\<beta> / \\<alpha>) (mix_pmf \\<alpha> p q) q) e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma product_mix_pmf_prob_distrib:\n  assumes \"a \\<in> {0..1}\"\n    and \"b \\<in> {0..1}\"\n  shows \"mix_pmf a (mix_pmf b p q) q = mix_pmf (a*b) p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "define \\<gamma> where g: \"\\<gamma> = (a * b)\""], ["proof (state)\nthis:\n  \\<gamma> = a * b\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "define l where l: \"l = (mix_pmf b p q)\""], ["proof (state)\nthis:\n  l = mix_pmf b p q\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "define r where r: \"r =  mix_pmf (a*b) p q\""], ["proof (state)\nthis:\n  r = mix_pmf (a * b) p q\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "have y: \"\\<gamma> \\<in> {0..1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> {0..1}", "using assms(2) mult_le_one assms g"], ["proof (prove)\nusing this:\n  b \\<in> {0..1}\n  \\<lbrakk>?a \\<le> (1::?'a); (0::?'a) \\<le> ?b; ?b \\<le> (1::?'a)\\<rbrakk>\n  \\<Longrightarrow> ?a * ?b \\<le> (1::?'a)\n  a \\<in> {0..1}\n  b \\<in> {0..1}\n  \\<gamma> = a * b\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<in> {0..1}", "by auto"], ["proof (state)\nthis:\n  \\<gamma> \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "have alt_: \"\\<forall>e \\<in> set_pmf l. pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>set_pmf l.\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf l \\<Longrightarrow>\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf l \\<Longrightarrow>\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "have \"pmf r e = \\<gamma> * pmf p e + (1-\\<gamma>) * pmf q e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf r e = \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e", "using \\<open>\\<gamma> \\<in> {0..1}\\<close> g pmf_mix r"], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> {0..1}\n  \\<gamma> = a * b\n  ?a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf ?a ?p ?q) ?x = ?a * pmf ?p ?x + (1 - ?a) * pmf ?q ?x\n  r = mix_pmf (a * b) p q\n\ngoal (1 subgoal):\n 1. pmf r e = \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e", "by fastforce"], ["proof (state)\nthis:\n  pmf r e = \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf l \\<Longrightarrow>\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "moreover"], ["proof (state)\nthis:\n  pmf r e = \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf l \\<Longrightarrow>\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "have \"... = \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e =\n    \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e =\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf l \\<Longrightarrow>\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "moreover"], ["proof (state)\nthis:\n  \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e =\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf l \\<Longrightarrow>\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "have \"... = pmf (mix_pmf \\<gamma> p q) e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e =\n    pmf (mix_pmf \\<gamma> p q) e", "using calculation g r"], ["proof (prove)\nusing this:\n  pmf r e = \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e\n  \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e =\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e\n  \\<gamma> = a * b\n  r = mix_pmf (a * b) p q\n\ngoal (1 subgoal):\n 1. \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e =\n    pmf (mix_pmf \\<gamma> p q) e", "by auto"], ["proof (state)\nthis:\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e =\n  pmf (mix_pmf \\<gamma> p q) e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf l \\<Longrightarrow>\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "moreover"], ["proof (state)\nthis:\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e =\n  pmf (mix_pmf \\<gamma> p q) e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf l \\<Longrightarrow>\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "have \"... = \\<gamma>  * pmf p e + pmf q e - \\<gamma> * pmf q e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (mix_pmf \\<gamma> p q) e =\n    \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "using calculation"], ["proof (prove)\nusing this:\n  pmf r e = \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e\n  \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e =\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e =\n  pmf (mix_pmf \\<gamma> p q) e\n\ngoal (1 subgoal):\n 1. pmf (mix_pmf \\<gamma> p q) e =\n    \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "by auto"], ["proof (state)\nthis:\n  pmf (mix_pmf \\<gamma> p q) e =\n  \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> set_pmf l \\<Longrightarrow>\n       pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "ultimately"], ["proof (chain)\npicking this:\n  pmf r e = \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e\n  \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e =\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e =\n  pmf (mix_pmf \\<gamma> p q) e\n  pmf (mix_pmf \\<gamma> p q) e =\n  \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "show \"pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e\""], ["proof (prove)\nusing this:\n  pmf r e = \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e\n  \\<gamma> * pmf p e + (1 - \\<gamma>) * pmf q e =\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e\n  \\<gamma> * pmf p e + 1 * pmf q e - \\<gamma> * pmf q e =\n  pmf (mix_pmf \\<gamma> p q) e\n  pmf (mix_pmf \\<gamma> p q) e =\n  \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e\n\ngoal (1 subgoal):\n 1. pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e", "by auto"], ["proof (state)\nthis:\n  pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>e\\<in>set_pmf l.\n     pmf r e = \\<gamma> * pmf p e + pmf q e - \\<gamma> * pmf q e\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "have \"\\<forall>e \\<in> set_pmf r. pmf l e = b * pmf p e + pmf q e - b * pmf q e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>set_pmf r. pmf l e = b * pmf p e + pmf q e - b * pmf q e", "using allI pmf_mix_deeper assms(2) l"], ["proof (prove)\nusing this:\n  (\\<And>x. ?P x) \\<Longrightarrow> \\<forall>x. ?P x\n  ?a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf ?a ?p ?q) ?x = ?a * pmf ?p ?x + pmf ?q ?x - ?a * pmf ?q ?x\n  b \\<in> {0..1}\n  l = mix_pmf b p q\n\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>set_pmf r. pmf l e = b * pmf p e + pmf q e - b * pmf q e", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>e\\<in>set_pmf r. pmf l e = b * pmf p e + pmf q e - b * pmf q e\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "have \"mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q \\<noteq>\n    mix_pmf (a * b) p q \\<Longrightarrow>\n    False", "assume neg:\"\\<not>mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q\""], ["proof (state)\nthis:\n  mix_pmf a (mix_pmf b p q) q \\<noteq> mix_pmf (a * b) p q\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q \\<noteq>\n    mix_pmf (a * b) p q \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  mix_pmf a (mix_pmf b p q) q \\<noteq> mix_pmf (a * b) p q", "have b: \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  mix_pmf a (mix_pmf b p q) q \\<noteq> mix_pmf (a * b) p q\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0", "by (metis (no_types) assms(1) mult_cancel_right2 pmf_mix_0 set_pmf_mix_eq)"], ["proof (state)\nthis:\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q \\<noteq>\n    mix_pmf (a * b) p q \\<Longrightarrow>\n    False", "have f3: \"b - (a * b) > 0 \\<longrightarrow> mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < b - a * b \\<longrightarrow>\n    mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "by (metis assms(2) diff_le_0_iff_le g mix_pmf_comp_with_dif_equiv mult_eq_0_iff \n          nonzero_mult_div_cancel_right not_le order_refl y)"], ["proof (state)\nthis:\n  0 < b - a * b \\<longrightarrow>\n  mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q \\<noteq>\n    mix_pmf (a * b) p q \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  0 < b - a * b \\<longrightarrow>\n  mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q\n\ngoal (1 subgoal):\n 1. False", "using b neg assms(1) assms(2)"], ["proof (prove)\nusing this:\n  0 < b - a * b \\<longrightarrow>\n  mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q\n  b \\<noteq> 0\n  mix_pmf a (mix_pmf b p q) q \\<noteq> mix_pmf (a * b) p q\n  a \\<in> {0..1}\n  b \\<in> {0..1}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "then"], ["proof (chain)\npicking this:\n  mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "show ?thesis"], ["proof (prove)\nusing this:\n  mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q\n\ngoal (1 subgoal):\n 1. mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q", "by auto"], ["proof (state)\nthis:\n  mix_pmf a (mix_pmf b p q) q = mix_pmf (a * b) p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mix_pmf_subset_of_original:\n  assumes \"a \\<in> {0..1}\"\n  shows \"(set_pmf (mix_pmf a p q)) \\<subseteq> set_pmf p \\<union> set_pmf q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "have \"a \\<in> {0<..<1} \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {0<..<1} \\<Longrightarrow>\n    set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "by (simp add: set_pmf_mix)"], ["proof (state)\nthis:\n  a \\<in> {0<..<1} \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n\ngoal (1 subgoal):\n 1. set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "moreover"], ["proof (state)\nthis:\n  a \\<in> {0<..<1} \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n\ngoal (1 subgoal):\n 1. set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "have \"a = 1 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = 1 \\<Longrightarrow>\n    set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "by simp"], ["proof (state)\nthis:\n  a = 1 \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n\ngoal (1 subgoal):\n 1. set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "moreover"], ["proof (state)\nthis:\n  a = 1 \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n\ngoal (1 subgoal):\n 1. set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "have \"a = 0 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = 0 \\<Longrightarrow>\n    set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "by simp"], ["proof (state)\nthis:\n  a = 0 \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n\ngoal (1 subgoal):\n 1. set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> {0<..<1} \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n  a = 1 \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n  a = 0 \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> {0<..<1} \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n  a = 1 \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n  a = 0 \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n\ngoal (1 subgoal):\n 1. set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "using assms less_eq_real_def"], ["proof (prove)\nusing this:\n  a \\<in> {0<..<1} \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n  a = 1 \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n  a = 0 \\<Longrightarrow>\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n  a \\<in> {0..1}\n  (?x \\<le> ?y) = (?x < ?y \\<or> ?x = ?y)\n\ngoal (1 subgoal):\n 1. set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q", "by auto"], ["proof (state)\nthis:\n  set_pmf (mix_pmf a p q) \\<subseteq> set_pmf p \\<union> set_pmf q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mix_pmf_preserves_finite_support:\n  assumes \"a \\<in> {0..1}\"\n  assumes \"finite (set_pmf p)\"\n    and \"finite (set_pmf q)\"\n  shows \"finite (set_pmf (mix_pmf a p q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set_pmf (mix_pmf a p q))", "by (meson assms(1) assms(2) assms(3) finite_Un finite_subset mix_pmf_subset_of_original)"], ["", "lemma ex_certain_iff_singleton_support:\n  shows \"(\\<exists>x. pmf p x = 1) \\<longleftrightarrow> card (set_pmf p) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. pmf p x = 1) = (card (set_pmf p) = 1)", "proof (rule iffI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. pmf p x = 1 \\<Longrightarrow> card (set_pmf p) = 1\n 2. card (set_pmf p) = 1 \\<Longrightarrow> \\<exists>x. pmf p x = 1", "case 1"], ["proof (state)\nthis:\n  \\<exists>x. pmf p x = 1\n\ngoal (2 subgoals):\n 1. \\<exists>x. pmf p x = 1 \\<Longrightarrow> card (set_pmf p) = 1\n 2. card (set_pmf p) = 1 \\<Longrightarrow> \\<exists>x. pmf p x = 1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set_pmf p) = 1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1 \\<Longrightarrow> False", "assume neg: \"\\<not> card (set_pmf p) = 1\""], ["proof (state)\nthis:\n  card (set_pmf p) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  card (set_pmf p) \\<noteq> 1", "have \"card (set_pmf p) \\<noteq> 1\""], ["proof (prove)\nusing this:\n  card (set_pmf p) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1", "by blast"], ["proof (state)\nthis:\n  card (set_pmf p) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1 \\<Longrightarrow> False", "have \"finite (set_pmf p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set_pmf p)", "by (metis \"1\" empty_iff finite.emptyI finite_insert insert_iff \n          not_le pmf_le_1 pmf_neq_exists_less pmf_nonneg set_pmf_iff set_return_pmf)"], ["proof (state)\nthis:\n  finite (set_pmf p)\n\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  finite (set_pmf p)", "have sumeq_1: \"(\\<Sum>i \\<in> set_pmf p. pmf p i) = 1\""], ["proof (prove)\nusing this:\n  finite (set_pmf p)\n\ngoal (1 subgoal):\n 1. sum (pmf p) (set_pmf p) = 1", "using sum_pmf_eq_1[of \"set_pmf p\" p]"], ["proof (prove)\nusing this:\n  finite (set_pmf p)\n  \\<lbrakk>finite (set_pmf p); set_pmf p \\<subseteq> set_pmf p\\<rbrakk>\n  \\<Longrightarrow> sum (pmf p) (set_pmf p) = 1\n\ngoal (1 subgoal):\n 1. sum (pmf p) (set_pmf p) = 1", "by auto"], ["proof (state)\nthis:\n  sum (pmf p) (set_pmf p) = 1\n\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1 \\<Longrightarrow> False", "have set_pmf_nemtpy: \"set_pmf p \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf p \\<noteq> {}", "by (simp add: set_pmf_not_empty)"], ["proof (state)\nthis:\n  set_pmf p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  set_pmf p \\<noteq> {}", "have g1: \"card (set_pmf p) > 1\""], ["proof (prove)\nusing this:\n  set_pmf p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. 1 < card (set_pmf p)", "by (metis card_0_eq less_one nat_neq_iff neg sum.infinite sumeq_1 zero_neq_one)"], ["proof (state)\nthis:\n  1 < card (set_pmf p)\n\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1 \\<Longrightarrow> False", "have \"card (set_pmf p) > 1 \\<longrightarrow> (\\<Sum>i \\<in> set_pmf p. pmf p i) > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < card (set_pmf p) \\<longrightarrow> 1 < sum (pmf p) (set_pmf p)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < card (set_pmf p) \\<Longrightarrow> 1 < sum (pmf p) (set_pmf p)", "assume \"card (set_pmf p) > 1\""], ["proof (state)\nthis:\n  1 < card (set_pmf p)\n\ngoal (1 subgoal):\n 1. 1 < card (set_pmf p) \\<Longrightarrow> 1 < sum (pmf p) (set_pmf p)", "have \"\\<exists>x y. pmf p x = 1 \\<and> y \\<noteq> x \\<and> y \\<in> set_pmf p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x y. pmf p x = 1 \\<and> y \\<noteq> x \\<and> y \\<in> set_pmf p", "using  set_pmf_nemtpy is_singletonI' is_singleton_altdef"], ["proof (prove)\nusing this:\n  set_pmf p \\<noteq> {}\n  \\<lbrakk>?A \\<noteq> {};\n   \\<And>x y.\n      \\<lbrakk>x \\<in> ?A; y \\<in> ?A\\<rbrakk>\n      \\<Longrightarrow> x = y\\<rbrakk>\n  \\<Longrightarrow> is_singleton ?A\n  is_singleton ?A = (card ?A = 1)\n\ngoal (1 subgoal):\n 1. \\<exists>x y. pmf p x = 1 \\<and> y \\<noteq> x \\<and> y \\<in> set_pmf p", "by (metis \"1\" neg)"], ["proof (state)\nthis:\n  \\<exists>x y. pmf p x = 1 \\<and> y \\<noteq> x \\<and> y \\<in> set_pmf p\n\ngoal (1 subgoal):\n 1. 1 < card (set_pmf p) \\<Longrightarrow> 1 < sum (pmf p) (set_pmf p)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x y. pmf p x = 1 \\<and> y \\<noteq> x \\<and> y \\<in> set_pmf p", "show \"(\\<Sum>i \\<in> set_pmf p. pmf p i) > 1\""], ["proof (prove)\nusing this:\n  \\<exists>x y. pmf p x = 1 \\<and> y \\<noteq> x \\<and> y \\<in> set_pmf p\n\ngoal (1 subgoal):\n 1. 1 < sum (pmf p) (set_pmf p)", "by (metis AE_measure_pmf_iff UNIV_I empty_iff insert_iff\n            measure_pmf.prob_eq_1 pmf.rep_eq sets_measure_pmf)"], ["proof (state)\nthis:\n  1 < sum (pmf p) (set_pmf p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < card (set_pmf p) \\<longrightarrow> 1 < sum (pmf p) (set_pmf p)\n\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  1 < card (set_pmf p) \\<longrightarrow> 1 < sum (pmf p) (set_pmf p)", "have \"card (set_pmf p) < 1\""], ["proof (prove)\nusing this:\n  1 < card (set_pmf p) \\<longrightarrow> 1 < sum (pmf p) (set_pmf p)\n\ngoal (1 subgoal):\n 1. card (set_pmf p) < 1", "using sumeq_1 neg"], ["proof (prove)\nusing this:\n  1 < card (set_pmf p) \\<longrightarrow> 1 < sum (pmf p) (set_pmf p)\n  sum (pmf p) (set_pmf p) = 1\n  card (set_pmf p) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. card (set_pmf p) < 1", "by linarith"], ["proof (state)\nthis:\n  card (set_pmf p) < 1\n\ngoal (1 subgoal):\n 1. card (set_pmf p) \\<noteq> 1 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  card (set_pmf p) < 1", "show False"], ["proof (prove)\nusing this:\n  card (set_pmf p) < 1\n\ngoal (1 subgoal):\n 1. False", "using g1"], ["proof (prove)\nusing this:\n  card (set_pmf p) < 1\n  1 < card (set_pmf p)\n\ngoal (1 subgoal):\n 1. False", "by linarith"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (set_pmf p) = 1\n\ngoal (1 subgoal):\n 1. card (set_pmf p) = 1 \\<Longrightarrow> \\<exists>x. pmf p x = 1", "qed (metis card_1_singletonE less_numeral_extra(1) pmf.rep_eq subset_eq\n    sum_pmf_eq_1[of \"set_pmf p\" p]  card_gt_0_iff[of \"set_pmf p\"] \n    measure_measure_pmf_finite[of \"set_pmf p\"])"], ["", "text \\<open> We thank Manuel Eberl for suggesting the following two lemmas. \\<close>"], ["", "lemma mix_pmf_partition:\n  fixes p :: \"'a pmf\"\n  assumes \"y \\<in> set_pmf p\" \"set_pmf p - {y} \\<noteq> {}\"\n  obtains a q where \"a \\<in> {0<..<1}\" \"set_pmf q = set_pmf p - {y}\" \n    \"p = mix_pmf a q (return_pmf y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  y \\<in> set_pmf p\n  set_pmf p - {y} \\<noteq> {}", "obtain x where x: \"x \\<in> set_pmf p - {y}\""], ["proof (prove)\nusing this:\n  y \\<in> set_pmf p\n  set_pmf p - {y} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> set_pmf p - {y} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> set_pmf p - {y}\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define a where \"a = 1 - pmf p y\""], ["proof (state)\nthis:\n  a = 1 - pmf p y\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have a_n1:\"a \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 1", "by (simp add: a_def assms(1) pmf_eq_0_set_pmf)"], ["proof (state)\nthis:\n  a \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"pmf p y \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf p y \\<noteq> 1", "using ex_certain_iff_singleton_support"], ["proof (prove)\nusing this:\n  (\\<exists>x. pmf ?p x = 1) = (card (set_pmf ?p) = 1)\n\ngoal (1 subgoal):\n 1. pmf p y \\<noteq> 1", "by (metis (full_types) \n        Diff_cancel assms(1) assms(2) card_1_singletonE singletonD)"], ["proof (state)\nthis:\n  pmf p y \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence y: \"pmf p y < 1\""], ["proof (prove)\nusing this:\n  pmf p y \\<noteq> 1\n\ngoal (1 subgoal):\n 1. pmf p y < 1", "using pmf_le_1[of p y]"], ["proof (prove)\nusing this:\n  pmf p y \\<noteq> 1\n  pmf p y \\<le> 1\n\ngoal (1 subgoal):\n 1. pmf p y < 1", "unfolding a_def"], ["proof (prove)\nusing this:\n  pmf p y \\<noteq> 1\n  pmf p y \\<le> 1\n\ngoal (1 subgoal):\n 1. pmf p y < 1", "by linarith"], ["proof (state)\nthis:\n  pmf p y < 1\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence a: \"a > 0\""], ["proof (prove)\nusing this:\n  pmf p y < 1\n\ngoal (1 subgoal):\n 1. 0 < a", "by (simp add: a_def)"], ["proof (state)\nthis:\n  0 < a\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define q where \"q = embed_pmf (\\<lambda>z. if z = y then 0 else pmf p z / a)\""], ["proof (state)\nthis:\n  q = embed_pmf (\\<lambda>z. if z = y then 0 else pmf p z / a)\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have q: \"pmf q z = (if z = y then 0 else pmf p z / a)\" for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf q z = (if z = y then 0 else pmf p z / a)", "unfolding q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmf (embed_pmf (\\<lambda>z. if z = y then 0 else pmf p z / a)) z =\n    (if z = y then 0 else pmf p z / a)", "proof (rule pmf_embed_pmf)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"1 = (\\<integral>\\<^sup>+ x. ennreal (pmf p x) \\<partial>count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = \\<integral>\\<^sup>+ x. ennreal (pmf p x) \\<partial>count_space UNIV", "by (rule nn_integral_pmf_eq_1 [symmetric])"], ["proof (state)\nthis:\n  1 = \\<integral>\\<^sup>+ x. ennreal (pmf p x) \\<partial>count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  1 = \\<integral>\\<^sup>+ x. ennreal (pmf p x) \\<partial>count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"\\<dots> = (\\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator {y} x + \n                      ennreal (pmf p x) * indicator (-{y}) x \\<partial>count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (pmf p x) \\<partial>count_space UNIV =\n    \\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator {y} x +\n                           ennreal (pmf p x) * indicator (- {y}) x\n                       \\<partial>count_space UNIV", "by (intro nn_integral_cong) (auto simp: indicator_def)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (pmf p x) \\<partial>count_space UNIV =\n  \\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator {y} x +\n                         ennreal (pmf p x) * indicator (- {y}) x\n                     \\<partial>count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (pmf p x) \\<partial>count_space UNIV =\n  \\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator {y} x +\n                         ennreal (pmf p x) * indicator (- {y}) x\n                     \\<partial>count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"\\<dots> = (\\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator {y} x \\<partial>count_space UNIV) + \n                    (\\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator (-{y}) x \\<partial>count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator {y} x +\n                           ennreal (pmf p x) * indicator (- {y}) x\n                       \\<partial>count_space UNIV =\n    (\\<integral>\\<^sup>+x\\<in>{y}. ennreal (pmf p x)\n     \\<partial>count_space UNIV) +\n    (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n     \\<partial>count_space UNIV)", "by (subst nn_integral_add) auto"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator {y} x +\n                         ennreal (pmf p x) * indicator (- {y}) x\n                     \\<partial>count_space UNIV =\n  (\\<integral>\\<^sup>+x\\<in>{y}. ennreal (pmf p x)\n   \\<partial>count_space UNIV) +\n  (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n   \\<partial>count_space UNIV)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator {y} x +\n                         ennreal (pmf p x) * indicator (- {y}) x\n                     \\<partial>count_space UNIV =\n  (\\<integral>\\<^sup>+x\\<in>{y}. ennreal (pmf p x)\n   \\<partial>count_space UNIV) +\n  (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n   \\<partial>count_space UNIV)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"(\\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator {y} x \\<partial>count_space UNIV) = pmf p y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+x\\<in>{y}. ennreal (pmf p x)\n    \\<partial>count_space UNIV =\n    ennreal (pmf p y)", "by (subst nn_integral_indicator_finite) auto"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+x\\<in>{y}. ennreal (pmf p x)\n  \\<partial>count_space UNIV =\n  ennreal (pmf p y)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+x\\<in>{y}. ennreal (pmf p x)\n  \\<partial>count_space UNIV =\n  ennreal (pmf p y)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"ennreal (pmf p y) + (\\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator (-{y}) x \\<partial>count_space UNIV)\n                 - ennreal (pmf p y) = (\\<integral>\\<^sup>+ x. ennreal (pmf p x) * indicator (-{y}) x \\<partial>count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (pmf p y) +\n    (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n     \\<partial>count_space UNIV) -\n    ennreal (pmf p y) =\n    \\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n    \\<partial>count_space UNIV", "by simp"], ["proof (state)\nthis:\n  ennreal (pmf p y) +\n  (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n   \\<partial>count_space UNIV) -\n  ennreal (pmf p y) =\n  \\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n  \\<partial>count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  ennreal (pmf p y) +\n  (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n   \\<partial>count_space UNIV) -\n  ennreal (pmf p y) =\n  \\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n  \\<partial>count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"1 - ennreal (pmf p y) = ennreal (1 - pmf p y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 - ennreal (pmf p y) = ennreal (1 - pmf p y)", "by (subst ennreal_1 [symmetric], subst ennreal_minus) auto"], ["proof (state)\nthis:\n  1 - ennreal (pmf p y) = ennreal (1 - pmf p y)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "finally"], ["proof (chain)\npicking this:\n  ennreal (1 - pmf p y) =\n  \\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n  \\<partial>count_space UNIV", "have eq: \"(\\<integral>\\<^sup>+x\\<in>-{y}. ennreal (pmf p x)\\<partial>count_space UNIV) = 1 - pmf p y\""], ["proof (prove)\nusing this:\n  ennreal (1 - pmf p y) =\n  \\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n  \\<partial>count_space UNIV\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n    \\<partial>count_space UNIV =\n    ennreal (1 - pmf p y)", ".."], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n  \\<partial>count_space UNIV =\n  ennreal (1 - pmf p y)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"(\\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a) \\<partial>count_space UNIV) =\n            (\\<integral>\\<^sup>+ x. inverse a * (ennreal (pmf p x) * indicator (-{y}) x) \\<partial>count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    \\<integral>\\<^sup>+ x. ennreal (inverse a) *\n                           (ennreal (pmf p x) * indicator (- {y}) x)\n                       \\<partial>count_space UNIV", "using a"], ["proof (prove)\nusing this:\n  0 < a\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    \\<integral>\\<^sup>+ x. ennreal (inverse a) *\n                           (ennreal (pmf p x) * indicator (- {y}) x)\n                       \\<partial>count_space UNIV", "by (intro nn_integral_cong) (auto simp: divide_simps ennreal_mult' [symmetric])"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                     \\<partial>count_space UNIV =\n  \\<integral>\\<^sup>+ x. ennreal (inverse a) *\n                         (ennreal (pmf p x) * indicator (- {y}) x)\n                     \\<partial>count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                     \\<partial>count_space UNIV =\n  \\<integral>\\<^sup>+ x. ennreal (inverse a) *\n                         (ennreal (pmf p x) * indicator (- {y}) x)\n                     \\<partial>count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"\\<dots> = inverse a * (\\<integral>\\<^sup>+ x\\<in>-{y}. ennreal (pmf p x) \\<partial>count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (inverse a) *\n                           (ennreal (pmf p x) * indicator (- {y}) x)\n                       \\<partial>count_space UNIV =\n    ennreal (inverse a) *\n    (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n     \\<partial>count_space UNIV)", "using a"], ["proof (prove)\nusing this:\n  0 < a\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (inverse a) *\n                           (ennreal (pmf p x) * indicator (- {y}) x)\n                       \\<partial>count_space UNIV =\n    ennreal (inverse a) *\n    (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n     \\<partial>count_space UNIV)", "by (subst nn_integral_cmult [symmetric]) (auto simp: ennreal_mult')"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (inverse a) *\n                         (ennreal (pmf p x) * indicator (- {y}) x)\n                     \\<partial>count_space UNIV =\n  ennreal (inverse a) *\n  (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n   \\<partial>count_space UNIV)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (inverse a) *\n                         (ennreal (pmf p x) * indicator (- {y}) x)\n                     \\<partial>count_space UNIV =\n  ennreal (inverse a) *\n  (\\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n   \\<partial>count_space UNIV)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "note eq"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n  \\<partial>count_space UNIV =\n  ennreal (1 - pmf p y)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+x\\<in>- {y}. ennreal (pmf p x)\n  \\<partial>count_space UNIV =\n  ennreal (1 - pmf p y)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"ennreal (inverse a) * ennreal (1 - pmf p y) = ennreal ((1 - pmf p y) / a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (inverse a) * ennreal (1 - pmf p y) =\n    ennreal ((1 - pmf p y) / a)", "using a"], ["proof (prove)\nusing this:\n  0 < a\n\ngoal (1 subgoal):\n 1. ennreal (inverse a) * ennreal (1 - pmf p y) =\n    ennreal ((1 - pmf p y) / a)", "by (subst ennreal_mult' [symmetric]) (auto simp: field_simps)"], ["proof (state)\nthis:\n  ennreal (inverse a) * ennreal (1 - pmf p y) = ennreal ((1 - pmf p y) / a)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "also"], ["proof (state)\nthis:\n  ennreal (inverse a) * ennreal (1 - pmf p y) = ennreal ((1 - pmf p y) / a)\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "have \"(1 - pmf p y) / a = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 - pmf p y) / a = 1", "using y"], ["proof (prove)\nusing this:\n  pmf p y < 1\n\ngoal (1 subgoal):\n 1. (1 - pmf p y) / a = 1", "by (simp add: a_def)"], ["proof (state)\nthis:\n  (1 - pmf p y) / a = 1\n\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)\n 2. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "finally"], ["proof (chain)\npicking this:\n  \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                     \\<partial>count_space UNIV =\n  ennreal 1", "show \"(\\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a) \\<partial>count_space UNIV) = 1\""], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                     \\<partial>count_space UNIV =\n  ennreal 1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                       \\<partial>count_space UNIV =\n    1", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal (if x = y then 0 else pmf p x / a)\n                     \\<partial>count_space UNIV =\n  1\n\ngoal (1 subgoal):\n 1. \\<And>x. 0 \\<le> (if x = y then 0 else pmf p x / a)", "qed (insert a, auto)"], ["proof (state)\nthis:\n  pmf q ?z = (if ?z = y then 0 else pmf p ?z / a)\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"mix_pmf (1 - pmf p y) q (return_pmf y) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mix_pmf (1 - pmf p y) q (return_pmf y) = p", "using y"], ["proof (prove)\nusing this:\n  pmf p y < 1\n\ngoal (1 subgoal):\n 1. mix_pmf (1 - pmf p y) q (return_pmf y) = p", "by (intro pmf_eqI) (auto simp: q pmf_mix pmf_le_1 a_def)"], ["proof (state)\nthis:\n  mix_pmf (1 - pmf p y) q (return_pmf y) = p\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  mix_pmf (1 - pmf p y) q (return_pmf y) = p\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"set_pmf q = set_pmf p - {y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf q = set_pmf p - {y}", "using y"], ["proof (prove)\nusing this:\n  pmf p y < 1\n\ngoal (1 subgoal):\n 1. set_pmf q = set_pmf p - {y}", "by (auto simp: q set_pmf_eq a_def)"], ["proof (state)\nthis:\n  set_pmf q = set_pmf p - {y}\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n         p = mix_pmf a q (return_pmf y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  mix_pmf (1 - pmf p y) q (return_pmf y) = p\n  set_pmf q = set_pmf p - {y}", "show ?thesis"], ["proof (prove)\nusing this:\n  mix_pmf (1 - pmf p y) q (return_pmf y) = p\n  set_pmf q = set_pmf p - {y}\n\ngoal (1 subgoal):\n 1. thesis", "using that[of \"1 - pmf p y\" q] y assms"], ["proof (prove)\nusing this:\n  mix_pmf (1 - pmf p y) q (return_pmf y) = p\n  set_pmf q = set_pmf p - {y}\n  \\<lbrakk>1 - pmf p y \\<in> {0<..<1}; set_pmf q = set_pmf p - {y};\n   p = mix_pmf (1 - pmf p y) q (return_pmf y)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  pmf p y < 1\n  y \\<in> set_pmf p\n  set_pmf p - {y} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp: set_pmf_eq)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pmf_mix_induct [consumes 2, case_names degenerate mix]:\n  assumes \"finite A\" \"set_pmf p \\<subseteq> A\"\n  assumes degenerate: \"\\<And>x. x \\<in> A \\<Longrightarrow> P (return_pmf x)\"\n  assumes mix:        \"\\<And>p a y. set_pmf p \\<subseteq> A \\<Longrightarrow> a \\<in> {0<..<1} \\<Longrightarrow> y \\<in> A \\<Longrightarrow> \n                         P p \\<Longrightarrow> P (mix_pmf a p (return_pmf y))\"\n  shows \"P p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P p", "have \"finite (set_pmf p)\" \"set_pmf p \\<noteq> {}\" \"set_pmf p \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set_pmf p) &&& set_pmf p \\<noteq> {} &&& set_pmf p \\<subseteq> A", "using assms(1,2)"], ["proof (prove)\nusing this:\n  finite A\n  set_pmf p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. finite (set_pmf p) &&& set_pmf p \\<noteq> {} &&& set_pmf p \\<subseteq> A", "by (auto simp: set_pmf_not_empty dest: finite_subset)"], ["proof (state)\nthis:\n  finite (set_pmf p)\n  set_pmf p \\<noteq> {}\n  set_pmf p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. P p", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite (set_pmf p)\n  set_pmf p \\<noteq> {}\n  set_pmf p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. P p", "proof (induction \"set_pmf p\" arbitrary: p rule: finite_ne_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x p.\n       \\<lbrakk>{x} = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p\n 2. \\<And>x F p.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>p.\n           \\<lbrakk>F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n           \\<Longrightarrow> P p;\n        insert x F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p", "case (singleton x p)"], ["proof (state)\nthis:\n  {x} = set_pmf p\n  set_pmf p \\<subseteq> A\n\ngoal (2 subgoals):\n 1. \\<And>x p.\n       \\<lbrakk>{x} = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p\n 2. \\<And>x F p.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>p.\n           \\<lbrakk>F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n           \\<Longrightarrow> P p;\n        insert x F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p", "hence \"p = return_pmf x\""], ["proof (prove)\nusing this:\n  {x} = set_pmf p\n  set_pmf p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. p = return_pmf x", "using set_pmf_subset_singleton[of p x]"], ["proof (prove)\nusing this:\n  {x} = set_pmf p\n  set_pmf p \\<subseteq> A\n  (set_pmf p \\<subseteq> {x}) = (p = return_pmf x)\n\ngoal (1 subgoal):\n 1. p = return_pmf x", "by auto"], ["proof (state)\nthis:\n  p = return_pmf x\n\ngoal (2 subgoals):\n 1. \\<And>x p.\n       \\<lbrakk>{x} = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p\n 2. \\<And>x F p.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>p.\n           \\<lbrakk>F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n           \\<Longrightarrow> P p;\n        insert x F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p", "thus ?case"], ["proof (prove)\nusing this:\n  p = return_pmf x\n\ngoal (1 subgoal):\n 1. P p", "using singleton"], ["proof (prove)\nusing this:\n  p = return_pmf x\n  {x} = set_pmf p\n  set_pmf p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. P p", "by (auto intro: degenerate)"], ["proof (state)\nthis:\n  P p\n\ngoal (1 subgoal):\n 1. \\<And>x F p.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>p.\n           \\<lbrakk>F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n           \\<Longrightarrow> P p;\n        insert x F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F p.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>p.\n           \\<lbrakk>F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n           \\<Longrightarrow> P p;\n        insert x F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p", "case (insert x B p)"], ["proof (state)\nthis:\n  finite B\n  B \\<noteq> {}\n  x \\<notin> B\n  \\<lbrakk>B = set_pmf ?p; set_pmf ?p \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> P ?p\n  insert x B = set_pmf p\n  set_pmf p \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>x F p.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>p.\n           \\<lbrakk>F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n           \\<Longrightarrow> P p;\n        insert x F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p", "from insert.hyps"], ["proof (chain)\npicking this:\n  finite B\n  B \\<noteq> {}\n  x \\<notin> B\n  \\<lbrakk>B = set_pmf ?p; set_pmf ?p \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> P ?p\n  insert x B = set_pmf p", "have \"x \\<in> set_pmf p\" \"set_pmf p - {x} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  finite B\n  B \\<noteq> {}\n  x \\<notin> B\n  \\<lbrakk>B = set_pmf ?p; set_pmf ?p \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> P ?p\n  insert x B = set_pmf p\n\ngoal (1 subgoal):\n 1. x \\<in> set_pmf p &&& set_pmf p - {x} \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  x \\<in> set_pmf p\n  set_pmf p - {x} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x F p.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>p.\n           \\<lbrakk>F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n           \\<Longrightarrow> P p;\n        insert x F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p", "from mix_pmf_partition[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>a q.\n      \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {x};\n       p = mix_pmf a q (return_pmf x)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain a q\n      where decomp: \"a \\<in> {0<..<1}\" \"set_pmf q = set_pmf p - {x}\" \n        \"p = mix_pmf a q (return_pmf x)\""], ["proof (prove)\nusing this:\n  (\\<And>a q.\n      \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {x};\n       p = mix_pmf a q (return_pmf x)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a q.\n        \\<lbrakk>a \\<in> {0<..<1}; set_pmf q = set_pmf p - {x};\n         p = mix_pmf a q (return_pmf x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> {0<..<1}\n  set_pmf q = set_pmf p - {x}\n  p = mix_pmf a q (return_pmf x)\n\ngoal (1 subgoal):\n 1. \\<And>x F p.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>p.\n           \\<lbrakk>F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n           \\<Longrightarrow> P p;\n        insert x F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p", "have \"P (mix_pmf a q (return_pmf x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (mix_pmf a q (return_pmf x))", "using insert.prems decomp(1) insert.hyps"], ["proof (prove)\nusing this:\n  set_pmf p \\<subseteq> A\n  a \\<in> {0<..<1}\n  finite B\n  B \\<noteq> {}\n  x \\<notin> B\n  \\<lbrakk>B = set_pmf ?p; set_pmf ?p \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> P ?p\n  insert x B = set_pmf p\n\ngoal (1 subgoal):\n 1. P (mix_pmf a q (return_pmf x))", "by (intro mix insert) (auto simp: decomp(2))"], ["proof (state)\nthis:\n  P (mix_pmf a q (return_pmf x))\n\ngoal (1 subgoal):\n 1. \\<And>x F p.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>p.\n           \\<lbrakk>F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n           \\<Longrightarrow> P p;\n        insert x F = set_pmf p; set_pmf p \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P p", "with decomp(3)"], ["proof (chain)\npicking this:\n  p = mix_pmf a q (return_pmf x)\n  P (mix_pmf a q (return_pmf x))", "show ?case"], ["proof (prove)\nusing this:\n  p = mix_pmf a q (return_pmf x)\n  P (mix_pmf a q (return_pmf x))\n\ngoal (1 subgoal):\n 1. P p", "by simp"], ["proof (state)\nthis:\n  P p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pmf_mix_induct' [consumes 2, case_names degenerate mix]:\n  assumes \"finite A\" \"set_pmf p \\<subseteq> A\"\n  assumes degenerate: \"\\<And>x. x \\<in> A \\<Longrightarrow> P (return_pmf x)\"\n  assumes mix:        \"\\<And>p q a. set_pmf p \\<subseteq> A \\<Longrightarrow> set_pmf q \\<subseteq> A \\<Longrightarrow> a \\<in> {0<..<1} \\<Longrightarrow> \n                         P p \\<Longrightarrow> P q \\<Longrightarrow> P (mix_pmf a p q)\"\n  shows \"P p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P p", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  set_pmf p \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> P (return_pmf ?x)\n  \\<lbrakk>set_pmf ?p \\<subseteq> A; set_pmf ?q \\<subseteq> A;\n   ?a \\<in> {0<..<1}; P ?p; P ?q\\<rbrakk>\n  \\<Longrightarrow> P (mix_pmf ?a ?p ?q)\n\ngoal (1 subgoal):\n 1. P p", "by (induct p rule: pmf_mix_induct)(auto)+"], ["", "lemma finite_sum_distribute_mix_pmf:\n  assumes \"finite (set_pmf (mix_pmf a p q))\"\n  assumes \"finite (set_pmf p)\"\n  assumes \"finite (set_pmf q)\"\n  shows \"(\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i) = (\\<Sum>i\\<in>set_pmf p.  a * pmf p i) + (\\<Sum>i\\<in>set_pmf q. (1-a) * pmf q i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i) +\n    (\\<Sum>i\\<in>set_pmf q. (1 - a) * pmf q i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i) +\n    (\\<Sum>i\\<in>set_pmf q. (1 - a) * pmf q i)", "have fst: \"(\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) = 1", "using sum_pmf_eq_1 assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; set_pmf ?p \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> sum (pmf ?p) ?A = 1\n  finite (set_pmf (mix_pmf a p q))\n  finite (set_pmf p)\n  finite (set_pmf q)\n\ngoal (1 subgoal):\n 1. sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) = 1", "by auto"], ["proof (state)\nthis:\n  sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) = 1\n\ngoal (1 subgoal):\n 1. sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i) +\n    (\\<Sum>i\\<in>set_pmf q. (1 - a) * pmf q i)", "have \"(\\<Sum>i\\<in>set_pmf p.  a * pmf p i) = a * (\\<Sum>i\\<in>set_pmf p. pmf p i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf p. a * pmf p i) = a * sum (pmf p) (set_pmf p)", "by (simp add: sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf p. a * pmf p i) = a * sum (pmf p) (set_pmf p)\n\ngoal (1 subgoal):\n 1. sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i) +\n    (\\<Sum>i\\<in>set_pmf q. (1 - a) * pmf q i)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf p. a * pmf p i) = a * sum (pmf p) (set_pmf p)\n\ngoal (1 subgoal):\n 1. sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i) +\n    (\\<Sum>i\\<in>set_pmf q. (1 - a) * pmf q i)", "have \"... = a * 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * sum (pmf p) (set_pmf p) = a * 1", "using assms sum_pmf_eq_1"], ["proof (prove)\nusing this:\n  finite (set_pmf (mix_pmf a p q))\n  finite (set_pmf p)\n  finite (set_pmf q)\n  \\<lbrakk>finite ?A; set_pmf ?p \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> sum (pmf ?p) ?A = 1\n\ngoal (1 subgoal):\n 1. a * sum (pmf p) (set_pmf p) = a * 1", "by (simp add: sum_pmf_eq_1)"], ["proof (state)\nthis:\n  a * sum (pmf p) (set_pmf p) = a * 1\n\ngoal (1 subgoal):\n 1. sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i) +\n    (\\<Sum>i\\<in>set_pmf q. (1 - a) * pmf q i)", "then"], ["proof (chain)\npicking this:\n  a * sum (pmf p) (set_pmf p) = a * 1", "show ?thesis"], ["proof (prove)\nusing this:\n  a * sum (pmf p) (set_pmf p) = a * 1\n\ngoal (1 subgoal):\n 1. sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i) +\n    (\\<Sum>i\\<in>set_pmf q. (1 - a) * pmf q i)", "by (metis fst add.assoc add_diff_cancel_left' add_uminus_conv_diff assms(3) \n        mult.right_neutral order_refl sum_distrib_left sum_pmf_eq_1)"], ["proof (state)\nthis:\n  sum (pmf (mix_pmf a p q)) (set_pmf (mix_pmf a p q)) =\n  (\\<Sum>i\\<in>set_pmf p. a * pmf p i) +\n  (\\<Sum>i\\<in>set_pmf q. (1 - a) * pmf q i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma distribute_alpha_over_sum:\n  shows \"(\\<Sum>i\\<in>set_pmf T. a * pmf p i * f i) = a * (\\<Sum>i\\<in>set_pmf T. pmf p i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf T. a * pmf p i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf T. pmf p i * f i)", "by (metis (mono_tags, lifting) semiring_normalization_rules(18) sum.cong sum_distrib_left)"], ["", "lemma sum_over_subset_pmf_support:\n  assumes \"finite T\"\n  assumes \"set_pmf p \\<subseteq> T\"\n  shows \"(\\<Sum>i\\<in>T. a * pmf p i * f i) = (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "consider (eq) \"set_pmf p = T\" | (sub) \"set_pmf p \\<subset> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_pmf p = T \\<Longrightarrow> thesis;\n     set_pmf p \\<subset> T \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  finite T\n  set_pmf p \\<subseteq> T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set_pmf p = T \\<Longrightarrow> thesis;\n     set_pmf p \\<subset> T \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>set_pmf p = T \\<Longrightarrow> ?thesis;\n   set_pmf p \\<subset> T \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>set_pmf p = T \\<Longrightarrow> ?thesis;\n   set_pmf p \\<subset> T \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_pmf p = T \\<Longrightarrow> ?thesis;\n   set_pmf p \\<subset> T \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "case sub"], ["proof (state)\nthis:\n  set_pmf p \\<subset> T\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "define A where \"A = T - (set_pmf p)\""], ["proof (state)\nthis:\n  A = T - set_pmf p\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "have \"finite (set_pmf p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set_pmf p)", "using assms(1) assms(2) finite_subset"], ["proof (prove)\nusing this:\n  finite T\n  set_pmf p \\<subseteq> T\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (set_pmf p)", "by auto"], ["proof (state)\nthis:\n  finite (set_pmf p)\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "moreover"], ["proof (state)\nthis:\n  finite (set_pmf p)\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "have \"finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A", "using A_def assms(1)"], ["proof (prove)\nusing this:\n  A = T - set_pmf p\n  finite T\n\ngoal (1 subgoal):\n 1. finite A", "by blast"], ["proof (state)\nthis:\n  finite A\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "moreover"], ["proof (state)\nthis:\n  finite A\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "have \"A \\<inter> set_pmf p = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> set_pmf p = {}", "using A_def assms(1)"], ["proof (prove)\nusing this:\n  A = T - set_pmf p\n  finite T\n\ngoal (1 subgoal):\n 1. A \\<inter> set_pmf p = {}", "by blast"], ["proof (state)\nthis:\n  A \\<inter> set_pmf p = {}\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "ultimately"], ["proof (chain)\npicking this:\n  finite (set_pmf p)\n  finite A\n  A \\<inter> set_pmf p = {}", "have *: \"(\\<Sum>i\\<in>T. a * pmf p i * f i) = (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i) + (\\<Sum>i\\<in>A. a * pmf p i * f i)\""], ["proof (prove)\nusing this:\n  finite (set_pmf p)\n  finite A\n  A \\<inter> set_pmf p = {}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i) +\n    (\\<Sum>i\\<in>A. a * pmf p i * f i)", "using sum.union_disjoint"], ["proof (prove)\nusing this:\n  finite (set_pmf p)\n  finite A\n  A \\<inter> set_pmf p = {}\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> sum ?g (?A \\<union> ?B) = sum ?g ?A + sum ?g ?B\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i) +\n    (\\<Sum>i\\<in>A. a * pmf p i * f i)", "by (metis (no_types) A_def Un_Diff_cancel2 \n          Un_absorb2 assms(2) inf.commute inf_sup_aci(5) sum.union_disjoint)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n  (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i) +\n  (\\<Sum>i\\<in>A. a * pmf p i * f i)\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "have \"\\<forall>e \\<in> A. pmf p e = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>A. pmf p e = 0", "by (simp add: A_def pmf_eq_0_set_pmf)"], ["proof (state)\nthis:\n  \\<forall>e\\<in>A. pmf p e = 0\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "hence \"(\\<Sum>i\\<in>A. a * pmf p i * f i) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>A. pmf p e = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>A. a * pmf p i * f i) = 0", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>A. a * pmf p i * f i) = 0\n\ngoal (2 subgoals):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n 2. set_pmf p \\<subset> T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "then"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<in>A. a * pmf p i * f i) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>A. a * pmf p i * f i) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "by (simp add: \"*\")"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n  (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n\ngoal (1 subgoal):\n 1. set_pmf p = T \\<Longrightarrow>\n    (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)", "qed (auto)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>T. a * pmf p i * f i) =\n  (\\<Sum>i\\<in>set_pmf p. a * pmf p i * f i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma expected_value_mix_pmf_distrib:\n  assumes \"finite (set_pmf p)\"\n    and \"finite (set_pmf q)\"\n  assumes \"a \\<in> {0<..<1}\"\n  shows \"measure_pmf.expectation (mix_pmf a p q) f = a * measure_pmf.expectation p f + (1-a) * measure_pmf.expectation q f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have fn: \"finite (set_pmf (mix_pmf a p q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set_pmf (mix_pmf a p q))", "using mix_pmf_preserves_finite_support assms less_eq_real_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> {0..1}; finite (set_pmf ?p);\n   finite (set_pmf ?q)\\<rbrakk>\n  \\<Longrightarrow> finite (set_pmf (mix_pmf ?a ?p ?q))\n  finite (set_pmf p)\n  finite (set_pmf q)\n  a \\<in> {0<..<1}\n  (?x \\<le> ?y) = (?x < ?y \\<or> ?x = ?y)\n\ngoal (1 subgoal):\n 1. finite (set_pmf (mix_pmf a p q))", "by auto"], ["proof (state)\nthis:\n  finite (set_pmf (mix_pmf a p q))\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have subsets: \"set_pmf p \\<subseteq> set_pmf (mix_pmf a p q)\" \"set_pmf q \\<subseteq> set_pmf (mix_pmf a p q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_pmf p \\<subseteq> set_pmf (mix_pmf a p q) &&&\n    set_pmf q \\<subseteq> set_pmf (mix_pmf a p q)", "using assms assms set_pmf_mix"], ["proof (prove)\nusing this:\n  finite (set_pmf p)\n  finite (set_pmf q)\n  a \\<in> {0<..<1}\n  finite (set_pmf p)\n  finite (set_pmf q)\n  a \\<in> {0<..<1}\n  ?a \\<in> {0<..<1} \\<Longrightarrow>\n  set_pmf (mix_pmf ?a ?p ?q) = set_pmf ?p \\<union> set_pmf ?q\n\ngoal (1 subgoal):\n 1. set_pmf p \\<subseteq> set_pmf (mix_pmf a p q) &&&\n    set_pmf q \\<subseteq> set_pmf (mix_pmf a p q)", "by(fastforce)+"], ["proof (state)\nthis:\n  set_pmf p \\<subseteq> set_pmf (mix_pmf a p q)\n  set_pmf q \\<subseteq> set_pmf (mix_pmf a p q)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have *: \"(\\<Sum>i \\<in> set_pmf (mix_pmf a p q). a * pmf p i * f i) = a * (\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf p i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i)", "by (metis (mono_tags, lifting) mult.assoc sum.cong sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) =\n  a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have **: \"(\\<Sum>i \\<in> set_pmf (mix_pmf a p q). (1-a) * pmf q i * f i) = (1-a) * (\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf q i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i) =\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i)", "using distribute_alpha_over_sum[of \"(1 - a)\" q f \"(mix_pmf a p q)\"]"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i) =\n  (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i) =\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i) =\n  (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have ***: \"measure_pmf.expectation (mix_pmf a p q) f = (\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i * f i)", "by (metis fn pmf_integral_code_unfold pmf_integral_pmf_set_integral\n        pmf_set_integral_code_alt_finite)"], ["proof (state)\nthis:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "also"], ["proof (state)\nthis:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have g: \"... = (\\<Sum>i \\<in> set_pmf (mix_pmf a p q). (a * pmf p i + (1-a) * pmf q i) * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i * f i) =\n    (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n       (a * pmf p i + (1 - a) * pmf q i) * f i)", "using pmf_mix[of a p q] assms(3)"], ["proof (prove)\nusing this:\n  a \\<in> {0..1} \\<Longrightarrow>\n  pmf (mix_pmf a p q) ?x = a * pmf p ?x + (1 - a) * pmf q ?x\n  a \\<in> {0<..<1}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i * f i) =\n    (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n       (a * pmf p i + (1 - a) * pmf q i) * f i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i * f i) =\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n     (a * pmf p i + (1 - a) * pmf q i) * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf (mix_pmf a p q) i * f i) =\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n     (a * pmf p i + (1 - a) * pmf q i) * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have ****: \"... =  (\\<Sum>i \\<in> set_pmf (mix_pmf a p q). a * pmf p i * f i + (1-a) * pmf q i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n       (a * pmf p i + (1 - a) * pmf q i) * f i) =\n    (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n       a * pmf p i * f i + (1 - a) * pmf q i * f i)", "by (simp add: mult.commute ring_class.ring_distribs(1))"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n     (a * pmf p i + (1 - a) * pmf q i) * f i) =\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n     a * pmf p i * f i + (1 - a) * pmf q i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n     (a * pmf p i + (1 - a) * pmf q i) * f i) =\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n     a * pmf p i * f i + (1 - a) * pmf q i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have f: \"... = (\\<Sum>i \\<in> set_pmf (mix_pmf a p q). a * pmf p i * f i) + (\\<Sum>i \\<in> set_pmf (mix_pmf a p q). (1-a) * pmf q i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n       a * pmf p i * f i + (1 - a) * pmf q i * f i) =\n    (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) +\n    (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i)", "by (simp add: sum.distrib)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n     a * pmf p i * f i + (1 - a) * pmf q i * f i) =\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) +\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n     a * pmf p i * f i + (1 - a) * pmf q i * f i) =\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) +\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have \"... = a * (\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf p i * f i) + (1-a) * (\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf q i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) +\n    (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i)", "using * **"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) =\n  a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i)\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i) =\n  (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) +\n    (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) +\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i) =\n  a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n  (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). a * pmf p i * f i) +\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). (1 - a) * pmf q i * f i) =\n  a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n  (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have h: \"... =  a * (\\<Sum>i \\<in> set_pmf p. pmf p i * f i) + (1-a) * (\\<Sum>i \\<in> set_pmf q. pmf q i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "have \"(\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf p i * f i) = (\\<Sum>i \\<in> set_pmf p. pmf p i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. pmf p i * f i)", "using subsets sum_over_subset_pmf_support[of \"(mix_pmf a p q)\" p 1 f] fn"], ["proof (prove)\nusing this:\n  set_pmf p \\<subseteq> set_pmf (mix_pmf a p q)\n  set_pmf q \\<subseteq> set_pmf (mix_pmf a p q)\n  \\<lbrakk>finite (set_pmf (mix_pmf a p q));\n   set_pmf p \\<subseteq> set_pmf (mix_pmf a p q)\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n                       1 * pmf p i * f i) =\n                    (\\<Sum>i\\<in>set_pmf p. 1 * pmf p i * f i)\n  finite (set_pmf (mix_pmf a p q))\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) =\n    (\\<Sum>i\\<in>set_pmf p. pmf p i * f i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) =\n  (\\<Sum>i\\<in>set_pmf p. pmf p i * f i)\n\ngoal (1 subgoal):\n 1. a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) =\n  (\\<Sum>i\\<in>set_pmf p. pmf p i * f i)\n\ngoal (1 subgoal):\n 1. a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "have \"(\\<Sum>i \\<in> set_pmf (mix_pmf a p q). pmf q i * f i) = (\\<Sum>i \\<in> set_pmf q. pmf q i * f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n    (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "using subsets sum_over_subset_pmf_support[of \"(mix_pmf a p q)\" q 1 f] fn"], ["proof (prove)\nusing this:\n  set_pmf p \\<subseteq> set_pmf (mix_pmf a p q)\n  set_pmf q \\<subseteq> set_pmf (mix_pmf a p q)\n  \\<lbrakk>finite (set_pmf (mix_pmf a p q));\n   set_pmf q \\<subseteq> set_pmf (mix_pmf a p q)\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>i\\<in>set_pmf (mix_pmf a p q).\n                       1 * pmf q i * f i) =\n                    (\\<Sum>i\\<in>set_pmf q. 1 * pmf q i * f i)\n  finite (set_pmf (mix_pmf a p q))\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n    (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n  (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)\n\ngoal (1 subgoal):\n 1. a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) =\n  (\\<Sum>i\\<in>set_pmf p. pmf p i * f i)\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n  (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) =\n  (\\<Sum>i\\<in>set_pmf p. pmf p i * f i)\n  (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n  (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)\n\ngoal (1 subgoal):\n 1. a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "by (simp)"], ["proof (state)\nthis:\n  a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n  (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n  a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n  (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf p i * f i) +\n  (1 - a) * (\\<Sum>i\\<in>set_pmf (mix_pmf a p q). pmf q i * f i) =\n  a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n  (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "finally"], ["proof (chain)\npicking this:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n  (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)", "show ?thesis"], ["proof (prove)\nusing this:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n  (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i)\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i) \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have \"(\\<Sum>i\\<in>set_pmf q. pmf q i * f i) = measure_pmf.expectation q f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf q. pmf q i * f i) = measure_pmf.expectation q f", "by (metis (full_types) assms(2) pmf_integral_code_unfold pmf_integral_pmf_set_integral pmf_set_integral_code_alt_finite)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf q. pmf q i * f i) = measure_pmf.expectation q f\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i) \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf q. pmf q i * f i) = measure_pmf.expectation q f\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i) \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have \"(\\<Sum>i\\<in>set_pmf p. pmf p i * f i) = measure_pmf.expectation p f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) = measure_pmf.expectation p f", "by (metis (full_types) assms(1) pmf_integral_code_unfold pmf_integral_pmf_set_integral pmf_set_integral_code_alt_finite)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) = measure_pmf.expectation p f\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) +\n    (1 - a) * (\\<Sum>i\\<in>set_pmf q. pmf q i * f i) \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<in>set_pmf q. pmf q i * f i) = measure_pmf.expectation q f\n  (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) = measure_pmf.expectation p f", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>set_pmf q. pmf q i * f i) = measure_pmf.expectation q f\n  (\\<Sum>i\\<in>set_pmf p. pmf p i * f i) = measure_pmf.expectation p f\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "by (simp add: \"*\" \"**\" \"***\" \"****\" f g h)"], ["proof (state)\nthis:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma expected_value_mix_pmf:\n  assumes \"finite (set_pmf p)\"\n    and \"finite (set_pmf q)\"\n  assumes \"a \\<in> {0..1}\"\n  shows \"measure_pmf.expectation (mix_pmf a p q) f = a * measure_pmf.expectation p f + (1-a) * measure_pmf.expectation q f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "consider (0) \"a = 0\" | (b) \"a \\<in> {0<..<1}\" | (1) \"a = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = 0 \\<Longrightarrow> thesis;\n     a \\<in> {0<..<1} \\<Longrightarrow> thesis;\n     a = 1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms(3) less_eq_real_def"], ["proof (prove)\nusing this:\n  a \\<in> {0..1}\n  (?x \\<le> ?y) = (?x < ?y \\<or> ?x = ?y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = 0 \\<Longrightarrow> thesis;\n     a \\<in> {0<..<1} \\<Longrightarrow> thesis;\n     a = 1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>a = 0 \\<Longrightarrow> ?thesis;\n   a \\<in> {0<..<1} \\<Longrightarrow> ?thesis;\n   a = 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>a = 0 \\<Longrightarrow> ?thesis;\n   a \\<in> {0<..<1} \\<Longrightarrow> ?thesis;\n   a = 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>a = 0 \\<Longrightarrow> ?thesis;\n   a \\<in> {0<..<1} \\<Longrightarrow> ?thesis;\n   a = 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "proof (cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 2. a \\<in> {0<..<1} \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 3. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "case 0"], ["proof (state)\nthis:\n  a = 0\n\ngoal (3 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 2. a \\<in> {0<..<1} \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 3. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have \"(mix_pmf a p q) = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mix_pmf a p q = q", "using 0 pmf_mix_0"], ["proof (prove)\nusing this:\n  a = 0\n  mix_pmf 0 ?p ?q = ?q\n\ngoal (1 subgoal):\n 1. mix_pmf a p q = q", "by blast"], ["proof (state)\nthis:\n  mix_pmf a p q = q\n\ngoal (3 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 2. a \\<in> {0<..<1} \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 3. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have \"measure_pmf.expectation q f = (1-a) * measure_pmf.expectation q f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation q f = (1 - a) * measure_pmf.expectation q f", "by (simp add: 0)"], ["proof (state)\nthis:\n  measure_pmf.expectation q f = (1 - a) * measure_pmf.expectation q f\n\ngoal (3 subgoals):\n 1. a = 0 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 2. a \\<in> {0<..<1} \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 3. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "using 0"], ["proof (prove)\nusing this:\n  a = 0\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "by auto"], ["proof (state)\nthis:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n\ngoal (2 subgoals):\n 1. a \\<in> {0<..<1} \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 2. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> {0<..<1} \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 2. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "case b"], ["proof (state)\nthis:\n  a \\<in> {0<..<1}\n\ngoal (2 subgoals):\n 1. a \\<in> {0<..<1} \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n 2. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "using assms(1) assms(2) b expected_value_mix_pmf_distrib"], ["proof (prove)\nusing this:\n  finite (set_pmf p)\n  finite (set_pmf q)\n  a \\<in> {0<..<1}\n  \\<lbrakk>finite (set_pmf ?p); finite (set_pmf ?q);\n   ?a \\<in> {0<..<1}\\<rbrakk>\n  \\<Longrightarrow> measure_pmf.expectation (mix_pmf ?a ?p ?q) ?f =\n                    ?a * measure_pmf.expectation ?p ?f +\n                    (1 - ?a) * measure_pmf.expectation ?q ?f\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "by blast"], ["proof (state)\nthis:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n\ngoal (1 subgoal):\n 1. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "case 1"], ["proof (state)\nthis:\n  a = 1\n\ngoal (1 subgoal):\n 1. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "have \"(mix_pmf a p q) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mix_pmf a p q = p", "using 1 pmf_mix_0"], ["proof (prove)\nusing this:\n  a = 1\n  mix_pmf 0 ?p ?q = ?q\n\ngoal (1 subgoal):\n 1. mix_pmf a p q = p", "by simp"], ["proof (state)\nthis:\n  mix_pmf a p q = p\n\ngoal (1 subgoal):\n 1. a = 1 \\<Longrightarrow>\n    measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "then"], ["proof (chain)\npicking this:\n  mix_pmf a p q = p", "show ?thesis"], ["proof (prove)\nusing this:\n  mix_pmf a p q = p\n\ngoal (1 subgoal):\n 1. measure_pmf.expectation (mix_pmf a p q) f =\n    a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f", "by (simp add: \"1\")"], ["proof (state)\nthis:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  measure_pmf.expectation (mix_pmf a p q) f =\n  a * measure_pmf.expectation p f + (1 - a) * measure_pmf.expectation q f\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}