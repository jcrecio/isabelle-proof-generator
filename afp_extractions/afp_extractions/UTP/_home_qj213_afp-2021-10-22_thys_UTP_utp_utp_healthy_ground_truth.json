{"file_name": "/home/qj213/afp-2021-10-22/thys/UTP/utp/utp_healthy.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UTP", "problem_names": ["lemma Healthy_def': \"P is H \\<longleftrightarrow> (H P = P)\"", "lemma Healthy_if: \"P is H \\<Longrightarrow> (H P = P)\"", "lemma Healthy_intro: \"H(P) = P \\<Longrightarrow> P is H\"", "lemma Healthy_carrier_image:\n  \"A \\<subseteq> \\<lbrakk>\\<H>\\<rbrakk>\\<^sub>H \\<Longrightarrow> \\<H> ` A = A\"", "lemma Healthy_carrier_Collect: \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> A = {H(P) | P. P \\<in> A}\"", "lemma Healthy_func:\n  \"\\<lbrakk> F \\<in> \\<lbrakk>\\<H>\\<^sub>1\\<rbrakk>\\<^sub>H \\<rightarrow> \\<lbrakk>\\<H>\\<^sub>2\\<rbrakk>\\<^sub>H; P is \\<H>\\<^sub>1 \\<rbrakk> \\<Longrightarrow> \\<H>\\<^sub>2(F(P)) = F(P)\"", "lemma Healthy_comp:\n  \"\\<lbrakk> P is \\<H>\\<^sub>1; P is \\<H>\\<^sub>2 \\<rbrakk> \\<Longrightarrow> P is \\<H>\\<^sub>1 \\<circ> \\<H>\\<^sub>2\"", "lemma Healthy_apply_closed:\n  assumes \"F \\<in> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<rightarrow> \\<lbrakk>H\\<rbrakk>\\<^sub>H\" \"P is H\"\n  shows \"F(P) is H\"", "lemma Healthy_set_image_member:\n  \"\\<lbrakk> P \\<in> F ` A; \\<And> x. F x is H \\<rbrakk> \\<Longrightarrow> P is H\"", "lemma Healthy_case_prod [closure]: \n  \"\\<lbrakk> \\<And> x y. P x y is H \\<rbrakk> \\<Longrightarrow> case_prod P v is H\"", "lemma Healthy_SUPREMUM:\n  \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> Sup (H ` A) = \\<Sqinter> A\"", "lemma Healthy_INFIMUM:\n  \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> Inf (H ` A) = \\<Squnion> A\"", "lemma Healthy_nu [closure]:\n  assumes \"mono F\" \"F \\<in> \\<lbrakk>id\\<rbrakk>\\<^sub>H \\<rightarrow> \\<lbrakk>H\\<rbrakk>\\<^sub>H\"\n  shows \"\\<nu> F is H\"", "lemma Healthy_mu [closure]:\n  assumes \"mono F\" \"F \\<in> \\<lbrakk>id\\<rbrakk>\\<^sub>H \\<rightarrow> \\<lbrakk>H\\<rbrakk>\\<^sub>H\"\n  shows \"\\<mu> F is H\"", "lemma Healthy_subset_member: \"\\<lbrakk> A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H; P \\<in> A \\<rbrakk> \\<Longrightarrow> H(P) = P\"", "lemma is_Healthy_subset_member: \"\\<lbrakk> A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H; P \\<in> A \\<rbrakk> \\<Longrightarrow> P is H\"", "lemma Healthy_Idempotent [closure]:\n  \"Idempotent H \\<Longrightarrow> H(P) is H\"", "lemma Healthy_range: \"Idempotent H \\<Longrightarrow> range H = \\<lbrakk>H\\<rbrakk>\\<^sub>H\"", "lemma Idempotent_id [simp]: \"Idempotent id\"", "lemma Idempotent_comp [intro]:\n  \"\\<lbrakk> Idempotent f; Idempotent g; f \\<circ> g = g \\<circ> f \\<rbrakk> \\<Longrightarrow> Idempotent (f \\<circ> g)\"", "lemma Idempotent_image: \"Idempotent f \\<Longrightarrow> f ` f ` A = f ` A\"", "lemma Monotonic_id [simp]: \"Monotonic id\"", "lemma Monotonic_id' [closure]: \n  \"mono (\\<lambda> X. X)\"", "lemma Monotonic_const [closure]: \n  \"Monotonic (\\<lambda> x. c)\"", "lemma Monotonic_comp [intro]:\n  \"\\<lbrakk> Monotonic f; Monotonic g \\<rbrakk> \\<Longrightarrow> Monotonic (f \\<circ> g)\"", "lemma Monotonic_inf [closure]:\n  assumes \"Monotonic P\" \"Monotonic Q\"\n  shows \"Monotonic (\\<lambda> X. P(X) \\<sqinter> Q(X))\"", "lemma Monotonic_cond [closure]:\n  assumes \"Monotonic P\" \"Monotonic Q\"\n  shows \"Monotonic (\\<lambda> X. P(X) \\<triangleleft> b \\<triangleright> Q(X))\"", "lemma Conjuctive_Idempotent:\n  \"Conjunctive(H) \\<Longrightarrow> Idempotent(H)\"", "lemma Conjunctive_Monotonic:\n  \"Conjunctive(H) \\<Longrightarrow> Monotonic(H)\"", "lemma Conjunctive_conj:\n  assumes \"Conjunctive(HC)\"\n  shows \"HC(P \\<and> Q) = (HC(P) \\<and> Q)\"", "lemma Conjunctive_distr_conj:\n  assumes \"Conjunctive(HC)\"\n  shows \"HC(P \\<and> Q) = (HC(P) \\<and> HC(Q))\"", "lemma Conjunctive_distr_disj:\n  assumes \"Conjunctive(HC)\"\n  shows \"HC(P \\<or> Q) = (HC(P) \\<or> HC(Q))\"", "lemma Conjunctive_distr_cond:\n  assumes \"Conjunctive(HC)\"\n  shows \"HC(P \\<triangleleft> b \\<triangleright> Q) = (HC(P) \\<triangleleft> b \\<triangleright> HC(Q))\"", "lemma FunctionalConjunctive_Monotonic:\n  \"FunctionalConjunctive(H) \\<Longrightarrow> Monotonic(H)\"", "lemma WeakConjunctive_Refinement:\n  assumes \"WeakConjunctive(HC)\"\n  shows \"P \\<sqsubseteq> HC(P)\"", "lemma WeakCojunctive_Healthy_Refinement:\n  assumes \"WeakConjunctive(HC)\" and \"P is HC\"\n  shows \"HC(P) \\<sqsubseteq> P\"", "lemma WeakConjunctive_implies_WeakConjunctive:\n  \"Conjunctive(H) \\<Longrightarrow> WeakConjunctive(H)\"", "lemma Disjunctuous_Monotonic: \"Disjunctuous H \\<Longrightarrow> Monotonic H\"", "lemma ContinuousD [dest]: \"\\<lbrakk> Continuous H; A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> H (\\<Sqinter> A) = (\\<Sqinter> P\\<in>A. H(P))\"", "lemma Continuous_Disjunctous: \"Continuous H \\<Longrightarrow> Disjunctuous H\"", "lemma Continuous_Monotonic [closure]: \"Continuous H \\<Longrightarrow> Monotonic H\"", "lemma Continuous_comp [intro]:\n  \"\\<lbrakk> Continuous f; Continuous g \\<rbrakk> \\<Longrightarrow> Continuous (f \\<circ> g)\"", "lemma Continuous_const [closure]: \"Continuous (\\<lambda> X. P)\"", "lemma Continuous_cond [closure]:\n  assumes \"Continuous F\" \"Continuous G\"\n  shows \"Continuous (\\<lambda> X. F(X) \\<triangleleft> b \\<triangleright> G(X))\"", "lemma Sup_Continuous_closed [closure]:\n  \"\\<lbrakk> Continuous H; \\<And> i. i \\<in> A \\<Longrightarrow> P(i) is H; A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (\\<Sqinter> i\\<in>A. P(i)) is H\"", "lemma UINF_mem_Continuous_closed [closure]:\n  \"\\<lbrakk> Continuous H; \\<And> i. i \\<in> A \\<Longrightarrow> P(i) is H; A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (\\<Sqinter> i\\<in>A \\<bullet> P(i)) is H\"", "lemma UINF_mem_Continuous_closed_pair [closure]:\n  assumes \"Continuous H\" \"\\<And> i j. (i, j) \\<in> A \\<Longrightarrow> P i j is H\" \"A \\<noteq> {}\"\n  shows \"(\\<Sqinter> (i,j)\\<in>A \\<bullet> P i j) is H\"", "lemma UINF_mem_Continuous_closed_triple [closure]:\n  assumes \"Continuous H\" \"\\<And> i j k. (i, j, k) \\<in> A \\<Longrightarrow> P i j k is H\" \"A \\<noteq> {}\"\n  shows \"(\\<Sqinter> (i,j,k)\\<in>A \\<bullet> P i j k) is H\"", "lemma UINF_mem_Continuous_closed_quad [closure]:\n  assumes \"Continuous H\" \"\\<And> i j k l. (i, j, k, l) \\<in> A \\<Longrightarrow> P i j k l is H\" \"A \\<noteq> {}\"\n  shows \"(\\<Sqinter> (i,j,k,l)\\<in>A \\<bullet> P i j k l) is H\"", "lemma UINF_mem_Continuous_closed_quint [closure]:\n  assumes \"Continuous H\" \"\\<And> i j k l m. (i, j, k, l, m) \\<in> A \\<Longrightarrow> P i j k l m is H\" \"A \\<noteq> {}\"\n  shows \"(\\<Sqinter> (i,j,k,l,m)\\<in>A \\<bullet> P i j k l m) is H\"", "lemma UINF_ind_closed [closure]:\n  assumes \"Continuous H\" \"\\<And> i. P i = true\" \"\\<And> i. Q i is H\"\n  shows \"UINF P Q is H\"", "lemma sup_continuous_Continuous [closure]: \"Continuous F \\<Longrightarrow> sup_continuous F\"", "lemma USUP_healthy: \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> (\\<Squnion> P\\<in>A \\<bullet> F(P)) = (\\<Squnion> P\\<in>A \\<bullet> F(H(P)))\"", "lemma UINF_healthy: \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> (\\<Sqinter> P\\<in>A \\<bullet> F(P)) = (\\<Sqinter> P\\<in>A \\<bullet> F(H(P)))\""], "translations": [["", "lemma Healthy_def': \"P is H \\<longleftrightarrow> (H P = P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P is H) = (H P = P)", "unfolding Healthy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (H P = P) = (H P = P)", "by auto"], ["", "lemma Healthy_if: \"P is H \\<Longrightarrow> (H P = P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P is H \\<Longrightarrow> H P = P", "unfolding Healthy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. H P = P \\<Longrightarrow> H P = P", "by auto"], ["", "lemma Healthy_intro: \"H(P) = P \\<Longrightarrow> P is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H P = P \\<Longrightarrow> P is H", "by (simp add: Healthy_def)"], ["", "declare Healthy_def' [upred_defs]"], ["", "abbreviation Healthy_carrier :: \"'\\<alpha> health \\<Rightarrow> '\\<alpha> upred set\" (\"\\<lbrakk>_\\<rbrakk>\\<^sub>H\")\nwhere \"\\<lbrakk>H\\<rbrakk>\\<^sub>H \\<equiv> {P. P is H}\""], ["", "lemma Healthy_carrier_image:\n  \"A \\<subseteq> \\<lbrakk>\\<H>\\<rbrakk>\\<^sub>H \\<Longrightarrow> \\<H> ` A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> \\<lbrakk>\\<H>\\<rbrakk>\\<^sub>H \\<Longrightarrow>\n    \\<H> ` A = A", "by (auto simp add: image_def, (metis Healthy_if mem_Collect_eq subsetCE)+)"], ["", "lemma Healthy_carrier_Collect: \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> A = {H(P) | P. P \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow>\n    A = {uu_. \\<exists>P. uu_ = H P \\<and> P \\<in> A}", "by (simp add: Healthy_carrier_image Setcompr_eq_image)"], ["", "lemma Healthy_func:\n  \"\\<lbrakk> F \\<in> \\<lbrakk>\\<H>\\<^sub>1\\<rbrakk>\\<^sub>H \\<rightarrow> \\<lbrakk>\\<H>\\<^sub>2\\<rbrakk>\\<^sub>H; P is \\<H>\\<^sub>1 \\<rbrakk> \\<Longrightarrow> \\<H>\\<^sub>2(F(P)) = F(P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<in> \\<lbrakk>\\<H>\\<^sub>1\\<rbrakk>\\<^sub>H \\<rightarrow>\n                     \\<lbrakk>\\<H>\\<^sub>2\\<rbrakk>\\<^sub>H;\n     P is \\<H>\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<H>\\<^sub>2 (F P) = F P", "using Healthy_if"], ["proof (prove)\nusing this:\n  ?P is ?H \\<Longrightarrow> ?H ?P = ?P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F \\<in> \\<lbrakk>\\<H>\\<^sub>1\\<rbrakk>\\<^sub>H \\<rightarrow>\n                     \\<lbrakk>\\<H>\\<^sub>2\\<rbrakk>\\<^sub>H;\n     P is \\<H>\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<H>\\<^sub>2 (F P) = F P", "by blast"], ["", "lemma Healthy_comp:\n  \"\\<lbrakk> P is \\<H>\\<^sub>1; P is \\<H>\\<^sub>2 \\<rbrakk> \\<Longrightarrow> P is \\<H>\\<^sub>1 \\<circ> \\<H>\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P is \\<H>\\<^sub>1; P is \\<H>\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> P is \\<H>\\<^sub>1 \\<circ> \\<H>\\<^sub>2", "by (simp add: Healthy_def)"], ["", "lemma Healthy_apply_closed:\n  assumes \"F \\<in> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<rightarrow> \\<lbrakk>H\\<rbrakk>\\<^sub>H\" \"P is H\"\n  shows \"F(P) is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F P is H", "using assms(1) assms(2)"], ["proof (prove)\nusing this:\n  F \\<in> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<rightarrow>\n          \\<lbrakk>H\\<rbrakk>\\<^sub>H\n  P is H\n\ngoal (1 subgoal):\n 1. F P is H", "by auto"], ["", "lemma Healthy_set_image_member:\n  \"\\<lbrakk> P \\<in> F ` A; \\<And> x. F x is H \\<rbrakk> \\<Longrightarrow> P is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<in> F ` A; \\<And>x. F x is H\\<rbrakk>\n    \\<Longrightarrow> P is H", "by blast"], ["", "lemma Healthy_case_prod [closure]: \n  \"\\<lbrakk> \\<And> x y. P x y is H \\<rbrakk> \\<Longrightarrow> case_prod P v is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. P x y is H) \\<Longrightarrow>\n    (case v of (x, xa) \\<Rightarrow> P x xa) is H", "by (simp add: prod.case_eq_if)"], ["", "lemma Healthy_SUPREMUM:\n  \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> Sup (H ` A) = \\<Sqinter> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow>\n    \\<Or>(H ` A) = \\<Or>A", "by (drule Healthy_carrier_image, presburger)"], ["", "lemma Healthy_INFIMUM:\n  \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> Inf (H ` A) = \\<Squnion> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow>\n    \\<And>(H ` A) = \\<And>A", "by (drule Healthy_carrier_image, presburger)"], ["", "lemma Healthy_nu [closure]:\n  assumes \"mono F\" \"F \\<in> \\<lbrakk>id\\<rbrakk>\\<^sub>H \\<rightarrow> \\<lbrakk>H\\<rbrakk>\\<^sub>H\"\n  shows \"\\<nu> F is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> F is H", "by (metis (mono_tags) Healthy_def Healthy_func assms eq_id_iff lfp_unfold)"], ["", "lemma Healthy_mu [closure]:\n  assumes \"mono F\" \"F \\<in> \\<lbrakk>id\\<rbrakk>\\<^sub>H \\<rightarrow> \\<lbrakk>H\\<rbrakk>\\<^sub>H\"\n  shows \"\\<mu> F is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu> F is H", "by (metis (mono_tags) Healthy_def Healthy_func assms eq_id_iff gfp_unfold)"], ["", "lemma Healthy_subset_member: \"\\<lbrakk> A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H; P \\<in> A \\<rbrakk> \\<Longrightarrow> H(P) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H; P \\<in> A\\<rbrakk>\n    \\<Longrightarrow> H P = P", "by (meson Ball_Collect Healthy_if)"], ["", "lemma is_Healthy_subset_member: \"\\<lbrakk> A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H; P \\<in> A \\<rbrakk> \\<Longrightarrow> P is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H; P \\<in> A\\<rbrakk>\n    \\<Longrightarrow> P is H", "by blast"], ["", "subsection \\<open> Properties of Healthiness Conditions \\<close>"], ["", "definition Idempotent :: \"'\\<alpha> health \\<Rightarrow> bool\" where\n  \"Idempotent(H) \\<longleftrightarrow> (\\<forall> P. H(H(P)) = H(P))\""], ["", "abbreviation Monotonic :: \"'\\<alpha> health \\<Rightarrow> bool\" where\n  \"Monotonic(H) \\<equiv> mono H\""], ["", "definition IMH :: \"'\\<alpha> health \\<Rightarrow> bool\" where\n  \"IMH(H) \\<longleftrightarrow> Idempotent(H) \\<and> Monotonic(H)\""], ["", "definition Antitone :: \"'\\<alpha> health \\<Rightarrow> bool\" where\n  \"Antitone(H) \\<longleftrightarrow> (\\<forall> P Q. Q \\<sqsubseteq> P \\<longrightarrow> (H(P) \\<sqsubseteq> H(Q)))\""], ["", "definition Conjunctive :: \"'\\<alpha> health \\<Rightarrow> bool\" where\n  \"Conjunctive(H) \\<longleftrightarrow> (\\<exists> Q. \\<forall> P. H(P) = (P \\<and> Q))\""], ["", "definition FunctionalConjunctive :: \"'\\<alpha> health \\<Rightarrow> bool\" where\n  \"FunctionalConjunctive(H) \\<longleftrightarrow> (\\<exists> F. \\<forall> P. H(P) = (P \\<and> F(P)) \\<and> Monotonic(F))\""], ["", "definition WeakConjunctive :: \"'\\<alpha> health \\<Rightarrow> bool\" where\n  \"WeakConjunctive(H) \\<longleftrightarrow> (\\<forall> P. \\<exists> Q. H(P) = (P \\<and> Q))\""], ["", "definition Disjunctuous :: \"'\\<alpha> health \\<Rightarrow> bool\" where\n  [upred_defs]: \"Disjunctuous H = (\\<forall> P Q. H(P \\<sqinter> Q) = (H(P) \\<sqinter> H(Q)))\""], ["", "definition Continuous :: \"'\\<alpha> health \\<Rightarrow> bool\" where\n  [upred_defs]: \"Continuous H = (\\<forall> A. A \\<noteq> {} \\<longrightarrow> H (\\<Sqinter> A) = \\<Sqinter> (H ` A))\""], ["", "lemma Healthy_Idempotent [closure]:\n  \"Idempotent H \\<Longrightarrow> H(P) is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Idempotent H \\<Longrightarrow> H P is H", "by (simp add: Healthy_def Idempotent_def)"], ["", "lemma Healthy_range: \"Idempotent H \\<Longrightarrow> range H = \\<lbrakk>H\\<rbrakk>\\<^sub>H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Idempotent H \\<Longrightarrow> range H = \\<lbrakk>H\\<rbrakk>\\<^sub>H", "by (auto simp add: image_def Healthy_if Healthy_Idempotent, metis Healthy_if)"], ["", "lemma Idempotent_id [simp]: \"Idempotent id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Idempotent id", "by (simp add: Idempotent_def)"], ["", "lemma Idempotent_comp [intro]:\n  \"\\<lbrakk> Idempotent f; Idempotent g; f \\<circ> g = g \\<circ> f \\<rbrakk> \\<Longrightarrow> Idempotent (f \\<circ> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Idempotent f; Idempotent g; f \\<circ> g = g \\<circ> f\\<rbrakk>\n    \\<Longrightarrow> Idempotent (f \\<circ> g)", "by (auto simp add: Idempotent_def comp_def, metis)"], ["", "lemma Idempotent_image: \"Idempotent f \\<Longrightarrow> f ` f ` A = f ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Idempotent f \\<Longrightarrow> f ` f ` A = f ` A", "by (metis (mono_tags, lifting) Idempotent_def image_cong image_image)"], ["", "lemma Monotonic_id [simp]: \"Monotonic id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Monotonic id", "by (simp add: monoI)"], ["", "lemma Monotonic_id' [closure]: \n  \"mono (\\<lambda> X. X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<lambda>X. X)", "by (simp add: monoI)"], ["", "lemma Monotonic_const [closure]: \n  \"Monotonic (\\<lambda> x. c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Monotonic (\\<lambda>x. c)", "by (simp add: mono_def)"], ["", "lemma Monotonic_comp [intro]:\n  \"\\<lbrakk> Monotonic f; Monotonic g \\<rbrakk> \\<Longrightarrow> Monotonic (f \\<circ> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Monotonic f; Monotonic g\\<rbrakk>\n    \\<Longrightarrow> Monotonic (f \\<circ> g)", "by (simp add: mono_def)"], ["", "lemma Monotonic_inf [closure]:\n  assumes \"Monotonic P\" \"Monotonic Q\"\n  shows \"Monotonic (\\<lambda> X. P(X) \\<sqinter> Q(X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Monotonic (\\<lambda>X. P X \\<sqinter> Q X)", "using assms"], ["proof (prove)\nusing this:\n  Monotonic P\n  Monotonic Q\n\ngoal (1 subgoal):\n 1. Monotonic (\\<lambda>X. P X \\<sqinter> Q X)", "by (simp add: mono_def, rel_auto)"], ["", "lemma Monotonic_cond [closure]:\n  assumes \"Monotonic P\" \"Monotonic Q\"\n  shows \"Monotonic (\\<lambda> X. P(X) \\<triangleleft> b \\<triangleright> Q(X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Monotonic (\\<lambda>X. P X \\<triangleleft> b \\<triangleright> Q X)", "by (simp add: assms cond_monotonic)"], ["", "lemma Conjuctive_Idempotent:\n  \"Conjunctive(H) \\<Longrightarrow> Idempotent(H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conjunctive H \\<Longrightarrow> Idempotent H", "by (auto simp add: Conjunctive_def Idempotent_def)"], ["", "lemma Conjunctive_Monotonic:\n  \"Conjunctive(H) \\<Longrightarrow> Monotonic(H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conjunctive H \\<Longrightarrow> Monotonic H", "unfolding Conjunctive_def mono_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Q. \\<forall>P. H P = (P \\<and> Q) \\<Longrightarrow>\n    \\<forall>x y. y \\<sqsubseteq> x \\<longrightarrow> H y \\<sqsubseteq> H x", "using dual_order.trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. \\<exists>Q. \\<forall>P. H P = (P \\<and> Q) \\<Longrightarrow>\n    \\<forall>x y. y \\<sqsubseteq> x \\<longrightarrow> H y \\<sqsubseteq> H x", "by fastforce"], ["", "lemma Conjunctive_conj:\n  assumes \"Conjunctive(HC)\"\n  shows \"HC(P \\<and> Q) = (HC(P) \\<and> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HC (P \\<and> Q) = (HC P \\<and> Q)", "using assms"], ["proof (prove)\nusing this:\n  Conjunctive HC\n\ngoal (1 subgoal):\n 1. HC (P \\<and> Q) = (HC P \\<and> Q)", "unfolding Conjunctive_def"], ["proof (prove)\nusing this:\n  \\<exists>Q. \\<forall>P. HC P = (P \\<and> Q)\n\ngoal (1 subgoal):\n 1. HC (P \\<and> Q) = (HC P \\<and> Q)", "by (metis utp_pred_laws.inf.assoc utp_pred_laws.inf.commute)"], ["", "lemma Conjunctive_distr_conj:\n  assumes \"Conjunctive(HC)\"\n  shows \"HC(P \\<and> Q) = (HC(P) \\<and> HC(Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HC (P \\<and> Q) = (HC P \\<and> HC Q)", "using assms"], ["proof (prove)\nusing this:\n  Conjunctive HC\n\ngoal (1 subgoal):\n 1. HC (P \\<and> Q) = (HC P \\<and> HC Q)", "unfolding Conjunctive_def"], ["proof (prove)\nusing this:\n  \\<exists>Q. \\<forall>P. HC P = (P \\<and> Q)\n\ngoal (1 subgoal):\n 1. HC (P \\<and> Q) = (HC P \\<and> HC Q)", "by (metis Conjunctive_conj assms utp_pred_laws.inf.assoc utp_pred_laws.inf_right_idem)"], ["", "lemma Conjunctive_distr_disj:\n  assumes \"Conjunctive(HC)\"\n  shows \"HC(P \\<or> Q) = (HC(P) \\<or> HC(Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HC (P \\<or> Q) = (HC P \\<or> HC Q)", "using assms"], ["proof (prove)\nusing this:\n  Conjunctive HC\n\ngoal (1 subgoal):\n 1. HC (P \\<or> Q) = (HC P \\<or> HC Q)", "unfolding Conjunctive_def"], ["proof (prove)\nusing this:\n  \\<exists>Q. \\<forall>P. HC P = (P \\<and> Q)\n\ngoal (1 subgoal):\n 1. HC (P \\<or> Q) = (HC P \\<or> HC Q)", "using utp_pred_laws.inf_sup_distrib2"], ["proof (prove)\nusing this:\n  \\<exists>Q. \\<forall>P. HC P = (P \\<and> Q)\n  ((?y \\<or> ?z) \\<and> ?x) = (?y \\<and> ?x \\<or> ?z \\<and> ?x)\n\ngoal (1 subgoal):\n 1. HC (P \\<or> Q) = (HC P \\<or> HC Q)", "by fastforce"], ["", "lemma Conjunctive_distr_cond:\n  assumes \"Conjunctive(HC)\"\n  shows \"HC(P \\<triangleleft> b \\<triangleright> Q) = (HC(P) \\<triangleleft> b \\<triangleright> HC(Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HC (P \\<triangleleft> b \\<triangleright> Q) =\n    HC P \\<triangleleft> b \\<triangleright> HC Q", "using assms"], ["proof (prove)\nusing this:\n  Conjunctive HC\n\ngoal (1 subgoal):\n 1. HC (P \\<triangleleft> b \\<triangleright> Q) =\n    HC P \\<triangleleft> b \\<triangleright> HC Q", "unfolding Conjunctive_def"], ["proof (prove)\nusing this:\n  \\<exists>Q. \\<forall>P. HC P = (P \\<and> Q)\n\ngoal (1 subgoal):\n 1. HC (P \\<triangleleft> b \\<triangleright> Q) =\n    HC P \\<triangleleft> b \\<triangleright> HC Q", "by (metis cond_conj_distr utp_pred_laws.inf_commute)"], ["", "lemma FunctionalConjunctive_Monotonic:\n  \"FunctionalConjunctive(H) \\<Longrightarrow> Monotonic(H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FunctionalConjunctive H \\<Longrightarrow> Monotonic H", "unfolding FunctionalConjunctive_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F.\n       \\<forall>P. H P = (P \\<and> F P) \\<and> Monotonic F \\<Longrightarrow>\n    Monotonic H", "by (metis mono_def utp_pred_laws.inf_mono)"], ["", "lemma WeakConjunctive_Refinement:\n  assumes \"WeakConjunctive(HC)\"\n  shows \"P \\<sqsubseteq> HC(P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sqsubseteq> HC P", "using assms"], ["proof (prove)\nusing this:\n  WeakConjunctive HC\n\ngoal (1 subgoal):\n 1. P \\<sqsubseteq> HC P", "unfolding WeakConjunctive_def"], ["proof (prove)\nusing this:\n  \\<forall>P. \\<exists>Q. HC P = (P \\<and> Q)\n\ngoal (1 subgoal):\n 1. P \\<sqsubseteq> HC P", "by (metis utp_pred_laws.inf.cobounded1)"], ["", "lemma WeakCojunctive_Healthy_Refinement:\n  assumes \"WeakConjunctive(HC)\" and \"P is HC\"\n  shows \"HC(P) \\<sqsubseteq> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HC P \\<sqsubseteq> P", "using assms"], ["proof (prove)\nusing this:\n  WeakConjunctive HC\n  P is HC\n\ngoal (1 subgoal):\n 1. HC P \\<sqsubseteq> P", "unfolding WeakConjunctive_def Healthy_def"], ["proof (prove)\nusing this:\n  \\<forall>P. \\<exists>Q. HC P = (P \\<and> Q)\n  HC P = P\n\ngoal (1 subgoal):\n 1. HC P \\<sqsubseteq> P", "by simp"], ["", "lemma WeakConjunctive_implies_WeakConjunctive:\n  \"Conjunctive(H) \\<Longrightarrow> WeakConjunctive(H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conjunctive H \\<Longrightarrow> WeakConjunctive H", "unfolding WeakConjunctive_def Conjunctive_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Q. \\<forall>P. H P = (P \\<and> Q) \\<Longrightarrow>\n    \\<forall>P. \\<exists>Q. H P = (P \\<and> Q)", "by pred_auto"], ["", "declare Conjunctive_def [upred_defs]"], ["", "declare mono_def [upred_defs]"], ["", "lemma Disjunctuous_Monotonic: \"Disjunctuous H \\<Longrightarrow> Monotonic H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Disjunctuous H \\<Longrightarrow> Monotonic H", "by (metis Disjunctuous_def mono_def semilattice_sup_class.le_iff_sup)"], ["", "lemma ContinuousD [dest]: \"\\<lbrakk> Continuous H; A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> H (\\<Sqinter> A) = (\\<Sqinter> P\\<in>A. H(P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Continuous H; \\<not> A = {}\\<rbrakk>\n    \\<Longrightarrow> H (\\<Or>A) = \\<Or>(H ` A)", "by (simp add: Continuous_def)"], ["", "lemma Continuous_Disjunctous: \"Continuous H \\<Longrightarrow> Disjunctuous H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Continuous H \\<Longrightarrow> Disjunctuous H", "apply (auto simp add: Continuous_def Disjunctuous_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P Q.\n       \\<forall>A.\n          \\<not> A = {} \\<longrightarrow>\n          H (\\<Or>A) = \\<Or>(H ` A) \\<Longrightarrow>\n       H (P \\<sqinter> Q) = H P \\<sqinter> H Q", "apply (rename_tac P Q)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P Q.\n       \\<forall>A.\n          \\<not> A = {} \\<longrightarrow>\n          H (\\<Or>A) = \\<Or>(H ` A) \\<Longrightarrow>\n       H (P \\<sqinter> Q) = H P \\<sqinter> H Q", "apply (drule_tac x=\"{P,Q}\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P Q.\n       \\<not> {P, Q} = {} \\<longrightarrow>\n       H (\\<Or>{P, Q}) = \\<Or>(H ` {P, Q}) \\<Longrightarrow>\n       H (P \\<sqinter> Q) = H P \\<sqinter> H Q", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Continuous_Monotonic [closure]: \"Continuous H \\<Longrightarrow> Monotonic H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Continuous H \\<Longrightarrow> Monotonic H", "by (simp add: Continuous_Disjunctous Disjunctuous_Monotonic)"], ["", "lemma Continuous_comp [intro]:\n  \"\\<lbrakk> Continuous f; Continuous g \\<rbrakk> \\<Longrightarrow> Continuous (f \\<circ> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Continuous f; Continuous g\\<rbrakk>\n    \\<Longrightarrow> Continuous (f \\<circ> g)", "by (simp add: Continuous_def)"], ["", "lemma Continuous_const [closure]: \"Continuous (\\<lambda> X. P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Continuous (\\<lambda>X. P)", "by pred_auto"], ["", "lemma Continuous_cond [closure]:\n  assumes \"Continuous F\" \"Continuous G\"\n  shows \"Continuous (\\<lambda> X. F(X) \\<triangleleft> b \\<triangleright> G(X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Continuous (\\<lambda>X. F X \\<triangleleft> b \\<triangleright> G X)", "using assms"], ["proof (prove)\nusing this:\n  Continuous F\n  Continuous G\n\ngoal (1 subgoal):\n 1. Continuous (\\<lambda>X. F X \\<triangleleft> b \\<triangleright> G X)", "by (pred_auto)"], ["", "text \\<open> Closure laws derived from continuity \\<close>"], ["", "lemma Sup_Continuous_closed [closure]:\n  \"\\<lbrakk> Continuous H; \\<And> i. i \\<in> A \\<Longrightarrow> P(i) is H; A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (\\<Sqinter> i\\<in>A. P(i)) is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Continuous H; \\<And>i. i \\<in> A \\<Longrightarrow> P i is H;\n     \\<not> A = {}\\<rbrakk>\n    \\<Longrightarrow> \\<Or>(P ` A) is H", "by (drule ContinuousD[of H \"P ` A\"], simp add: UINF_mem_UNIV[THEN sym] UINF_as_Sup[THEN sym])\n     (metis (no_types, lifting) Healthy_def' SUP_cong image_image)"], ["", "lemma UINF_mem_Continuous_closed [closure]:\n  \"\\<lbrakk> Continuous H; \\<And> i. i \\<in> A \\<Longrightarrow> P(i) is H; A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (\\<Sqinter> i\\<in>A \\<bullet> P(i)) is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Continuous H; \\<And>i. i \\<in> A \\<Longrightarrow> P i is H;\n     \\<not> A = {}\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter> i \\<in> A \\<bullet> P i) is H", "by (simp add: Sup_Continuous_closed UINF_as_Sup_collect)"], ["", "lemma UINF_mem_Continuous_closed_pair [closure]:\n  assumes \"Continuous H\" \"\\<And> i j. (i, j) \\<in> A \\<Longrightarrow> P i j is H\" \"A \\<noteq> {}\"\n  shows \"(\\<Sqinter> (i,j)\\<in>A \\<bullet> P i j) is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) is H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) is H", "have \"(\\<Sqinter> (i,j)\\<in>A \\<bullet> P i j) = (\\<Sqinter> x\\<in>A \\<bullet> P (fst x) (snd x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) =\n    (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (snd x))", "by (rel_auto)"], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) =\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (snd x))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) is H", "also"], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) =\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (snd x))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) is H", "have \"... is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (snd x)) is H", "by (metis (mono_tags) UINF_mem_Continuous_closed assms(1) assms(2) assms(3) prod.collapse)"], ["proof (state)\nthis:\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (snd x)) is H\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) is H", "finally"], ["proof (chain)\npicking this:\n  (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) is H", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) is H\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) is H", "."], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j) \\<in> A \\<bullet> P i j) is H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma UINF_mem_Continuous_closed_triple [closure]:\n  assumes \"Continuous H\" \"\\<And> i j k. (i, j, k) \\<in> A \\<Longrightarrow> P i j k is H\" \"A \\<noteq> {}\"\n  shows \"(\\<Sqinter> (i,j,k)\\<in>A \\<bullet> P i j k) is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) is H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) is H", "have \"(\\<Sqinter> (i,j,k)\\<in>A \\<bullet> P i j k) = (\\<Sqinter> x\\<in>A \\<bullet> P (fst x) (fst (snd x)) (snd (snd x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) =\n    (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x)) (snd (snd x)))", "by (rel_auto)"], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) =\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x)) (snd (snd x)))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) is H", "also"], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) =\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x)) (snd (snd x)))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) is H", "have \"... is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                     (snd (snd x))) is\n    H", "by (metis (mono_tags) UINF_mem_Continuous_closed assms(1) assms(2) assms(3) prod.collapse)"], ["proof (state)\nthis:\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x)) (snd (snd x))) is\n  H\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) is H", "finally"], ["proof (chain)\npicking this:\n  (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) is H", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) is H\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) is H", "."], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j, k) \\<in> A \\<bullet> P i j k) is H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma UINF_mem_Continuous_closed_quad [closure]:\n  assumes \"Continuous H\" \"\\<And> i j k l. (i, j, k, l) \\<in> A \\<Longrightarrow> P i j k l is H\" \"A \\<noteq> {}\"\n  shows \"(\\<Sqinter> (i,j,k,l)\\<in>A \\<bullet> P i j k l) is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) is H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) is H", "have \"(\\<Sqinter> (i,j,k,l)\\<in>A \\<bullet> P i j k l) = (\\<Sqinter> x\\<in>A \\<bullet> P (fst x) (fst (snd x)) (fst (snd (snd x))) (snd (snd (snd x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) =\n    (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                     (fst (snd (snd x)))\n                                     (snd (snd (snd x))))", "by (rel_auto)"], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) =\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                   (fst (snd (snd x))) (snd (snd (snd x))))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) is H", "also"], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) =\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                   (fst (snd (snd x))) (snd (snd (snd x))))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) is H", "have \"... is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                     (fst (snd (snd x)))\n                                     (snd (snd (snd x)))) is\n    H", "by (metis (mono_tags) UINF_mem_Continuous_closed assms(1) assms(2) assms(3) prod.collapse)"], ["proof (state)\nthis:\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                   (fst (snd (snd x)))\n                                   (snd (snd (snd x)))) is\n  H\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) is H", "finally"], ["proof (chain)\npicking this:\n  (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) is H", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) is H\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) is H", "."], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j, k, l) \\<in> A \\<bullet> P i j k l) is H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma UINF_mem_Continuous_closed_quint [closure]:\n  assumes \"Continuous H\" \"\\<And> i j k l m. (i, j, k, l, m) \\<in> A \\<Longrightarrow> P i j k l m is H\" \"A \\<noteq> {}\"\n  shows \"(\\<Sqinter> (i,j,k,l,m)\\<in>A \\<bullet> P i j k l m) is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) is H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) is H", "have \"(\\<Sqinter> (i,j,k,l,m)\\<in>A \\<bullet> P i j k l m) \n         = (\\<Sqinter> x\\<in>A \\<bullet> P (fst x) (fst (snd x)) (fst (snd (snd x))) (fst (snd (snd (snd x)))) (snd (snd (snd (snd x)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) =\n    (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                     (fst (snd (snd x)))\n                                     (fst (snd (snd (snd x))))\n                                     (snd (snd (snd (snd x)))))", "by (rel_auto)"], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) =\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                   (fst (snd (snd x)))\n                                   (fst (snd (snd (snd x))))\n                                   (snd (snd (snd (snd x)))))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) is H", "also"], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) =\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                   (fst (snd (snd x)))\n                                   (fst (snd (snd (snd x))))\n                                   (snd (snd (snd (snd x)))))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) is H", "have \"... is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                     (fst (snd (snd x)))\n                                     (fst (snd (snd (snd x))))\n                                     (snd (snd (snd (snd x))))) is\n    H", "by (metis (mono_tags) UINF_mem_Continuous_closed assms(1) assms(2) assms(3) prod.collapse)"], ["proof (state)\nthis:\n  (\\<Sqinter> x \\<in> A \\<bullet> P (fst x) (fst (snd x))\n                                   (fst (snd (snd x)))\n                                   (fst (snd (snd (snd x))))\n                                   (snd (snd (snd (snd x))))) is\n  H\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) is H", "finally"], ["proof (chain)\npicking this:\n  (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) is H", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) is H\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) is H", "."], ["proof (state)\nthis:\n  (\\<Sqinter> (i, j, k, l, m) \\<in> A \\<bullet> P i j k l m) is H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma UINF_ind_closed [closure]:\n  assumes \"Continuous H\" \"\\<And> i. P i = true\" \"\\<And> i. Q i is H\"\n  shows \"UINF P Q is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UINF P Q is H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. UINF P Q is H", "from assms(2)"], ["proof (chain)\npicking this:\n  P ?i = true", "have \"UINF P Q = (\\<Sqinter> i \\<bullet> Q i)\""], ["proof (prove)\nusing this:\n  P ?i = true\n\ngoal (1 subgoal):\n 1. UINF P Q = (\\<Sqinter> i \\<bullet> Q i)", "by (rel_auto)"], ["proof (state)\nthis:\n  UINF P Q = (\\<Sqinter> i \\<bullet> Q i)\n\ngoal (1 subgoal):\n 1. UINF P Q is H", "also"], ["proof (state)\nthis:\n  UINF P Q = (\\<Sqinter> i \\<bullet> Q i)\n\ngoal (1 subgoal):\n 1. UINF P Q is H", "have \"... is H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> i \\<bullet> Q i) is H", "using UINF_mem_Continuous_closed[of H UNIV P]"], ["proof (prove)\nusing this:\n  \\<lbrakk>Continuous H; \\<And>i. i \\<in> UNIV \\<Longrightarrow> P i is H;\n   \\<not> UNIV = {}\\<rbrakk>\n  \\<Longrightarrow> (\\<Sqinter> i \\<in> UNIV \\<bullet> P i) is H\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> i \\<bullet> Q i) is H", "by (simp add: Sup_Continuous_closed UINF_as_Sup_collect' assms)"], ["proof (state)\nthis:\n  (\\<Sqinter> i \\<bullet> Q i) is H\n\ngoal (1 subgoal):\n 1. UINF P Q is H", "finally"], ["proof (chain)\npicking this:\n  UINF P Q is H", "show ?thesis"], ["proof (prove)\nusing this:\n  UINF P Q is H\n\ngoal (1 subgoal):\n 1. UINF P Q is H", "."], ["proof (state)\nthis:\n  UINF P Q is H\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> All continuous functions are also Scott-continuous \\<close>"], ["", "lemma sup_continuous_Continuous [closure]: \"Continuous F \\<Longrightarrow> sup_continuous F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Continuous F \\<Longrightarrow> sup_continuous F", "by (simp add: Continuous_def sup_continuous_def)"], ["", "lemma USUP_healthy: \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> (\\<Squnion> P\\<in>A \\<bullet> F(P)) = (\\<Squnion> P\\<in>A \\<bullet> F(H(P)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow>\n    (\\<Squnion> P \\<in> A \\<bullet> F P) =\n    (\\<Squnion> P \\<in> A \\<bullet> F (H P))", "by (rule USUP_cong, simp add: Healthy_subset_member)"], ["", "lemma UINF_healthy: \"A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow> (\\<Sqinter> P\\<in>A \\<bullet> F(P)) = (\\<Sqinter> P\\<in>A \\<bullet> F(H(P)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> \\<lbrakk>H\\<rbrakk>\\<^sub>H \\<Longrightarrow>\n    (\\<Sqinter> P \\<in> A \\<bullet> F P) =\n    (\\<Sqinter> P \\<in> A \\<bullet> F (H P))", "by (rule UINF_cong, simp add: Healthy_subset_member)"], ["", "end"]]}