{"file_name": "/home/qj213/afp-2021-10-22/thys/UTP/toolkit/FSet_Extra.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UTP", "problem_names": ["lemma fset_intro:\n  \"fset x = fset y \\<Longrightarrow> x = y\"", "lemma fset_elim:\n  \"\\<lbrakk> x = y; fset x = fset y \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma fmember_intro:\n  \"\\<lbrakk> x \\<in> fset(xs) \\<rbrakk> \\<Longrightarrow> x |\\<in>| xs\"", "lemma fmember_elim:\n  \"\\<lbrakk> x |\\<in>| xs; x \\<in> fset(xs) \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma fnmember_intro [intro]:\n  \"\\<lbrakk> x \\<notin> fset(xs) \\<rbrakk> \\<Longrightarrow> x |\\<notin>| xs\"", "lemma fnmember_elim [elim]:\n  \"\\<lbrakk> x |\\<notin>| xs; x \\<notin> fset(xs) \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma fsubset_intro [intro]:\n  \"\\<langle>xs\\<rangle>\\<^sub>f \\<subseteq> \\<langle>ys\\<rangle>\\<^sub>f \\<Longrightarrow> xs |\\<subseteq>| ys\"", "lemma fsubset_elim [elim]:\n  \"\\<lbrakk> xs |\\<subseteq>| ys; \\<langle>xs\\<rangle>\\<^sub>f \\<subseteq> \\<langle>ys\\<rangle>\\<^sub>f \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma fBall_intro [intro]:\n  \"Ball \\<langle>A\\<rangle>\\<^sub>f P \\<Longrightarrow> fBall A P\"", "lemma fBall_elim [elim]:\n  \"\\<lbrakk> fBall A P; Ball \\<langle>A\\<rangle>\\<^sub>f P \\<Longrightarrow> Q \\<rbrakk> \\<Longrightarrow> Q\"", "lemma sorted_list_of_set_inj:\n  \"\\<lbrakk> finite xs; finite ys; sorted_list_of_set xs = sorted_list_of_set ys \\<rbrakk>\n   \\<Longrightarrow> xs = ys\"", "lemma flist_inj: \"inj flist\"", "lemma flist_props [simp]:\n  \"sorted (flist xs)\"\n  \"distinct (flist xs)\"", "lemma flist_empty [simp]:\n  \"flist \\<lbrace>\\<rbrace> = []\"", "lemma flist_inv [simp]: \"finset (flist xs) = xs\"", "lemma flist_set [simp]: \"set (flist xs) = fset xs\"", "lemma fset_inv [simp]: \"\\<lbrakk> sorted xs; distinct xs \\<rbrakk> \\<Longrightarrow> flist (finset xs) = xs\"", "lemma fcard_flist:\n  \"fcard xs = length (flist xs)\"", "lemma flist_nth:\n  \"i < fcard vs \\<Longrightarrow> flist vs ! i |\\<in>| vs\"", "lemma flists_nonempty: \"\\<exists> xs. xs \\<in> flists A\"", "lemma flists_elem_uniq: \"\\<lbrakk> x \\<in> flists A; x \\<in> flists B \\<rbrakk> \\<Longrightarrow> A = B\"", "lemma flist_arb_distinct [simp]: \"distinct (flist_arb A)\"", "lemma flist_arb_inv [simp]: \"finset (flist_arb A) = A\"", "lemma flist_arb_inj:\n  \"inj flist_arb\"", "lemma flist_arb_lists: \"flist_arb ` Fow A \\<subseteq> lists A\"", "lemma countable_Fow:\n  fixes A :: \"'a set\"\n  assumes \"countable A\"\n  shows \"countable (Fow A)\"", "lemma finite_Union_subsets:\n  \"\\<lbrakk> \\<forall> a \\<in> A. a \\<subseteq> b; finite b \\<rbrakk> \\<Longrightarrow> finite (\\<Union>A)\"", "lemma finite_UN_subsets:\n  \"\\<lbrakk> \\<forall> a \\<in> A. B a \\<subseteq> b; finite b \\<rbrakk> \\<Longrightarrow> finite (\\<Union>a\\<in>A. B a)\"", "lemma flub_rep_eq:\n  \"\\<langle>flub A t\\<rangle>\\<^sub>f = (if (\\<forall> a\\<in>A. a |\\<subseteq>| t) then (\\<Union>x\\<in>A. \\<langle>x\\<rangle>\\<^sub>f) else \\<langle>t\\<rangle>\\<^sub>f)\"", "lemma fglb_rep_eq:\n  \"\\<langle>fglb A t\\<rangle>\\<^sub>f = (if (A = {}) then \\<langle>t\\<rangle>\\<^sub>f else (\\<Inter>x\\<in>A. \\<langle>x\\<rangle>\\<^sub>f))\"", "lemma FinPow_rep_eq [simp]:\n  \"fset (FinPow xs) = {ys. ys |\\<subseteq>| xs}\"", "lemma FUnion_rep_eq [simp]:\n  \"\\<langle>\\<Union>\\<^sub>f xs\\<rangle>\\<^sub>f = (\\<Union>x\\<in>\\<langle>xs\\<rangle>\\<^sub>f. \\<langle>x\\<rangle>\\<^sub>f)\"", "lemma FInter_rep_eq [simp]:\n  \"xs \\<noteq> \\<lbrace>\\<rbrace> \\<Longrightarrow> \\<langle>\\<Inter>\\<^sub>f xs\\<rangle>\\<^sub>f = (\\<Inter>x\\<in>\\<langle>xs\\<rangle>\\<^sub>f. \\<langle>x\\<rangle>\\<^sub>f)\"", "lemma FUnion_empty [simp]:\n  \"\\<Union>\\<^sub>f \\<lbrace>\\<rbrace> = \\<lbrace>\\<rbrace>\"", "lemma FinPow_member [simp]:\n  \"xs |\\<in>| FinPow xs\"", "lemma FUnion_FinPow [simp]:\n  \"\\<Union>\\<^sub>f (FinPow x) = x\"", "lemma Fow_mem [iff]: \"x \\<in> Fow A \\<longleftrightarrow> \\<langle>x\\<rangle>\\<^sub>f \\<subseteq> A\"", "lemma Fow_UNIV [simp]: \"Fow UNIV = UNIV\""], "translations": [["", "lemma fset_intro:\n  \"fset x = fset y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>x\\<rangle>\\<^sub>f =\n    \\<langle>y\\<rangle>\\<^sub>f \\<Longrightarrow>\n    x = y", "by (simp add:fset_inject)"], ["", "lemma fset_elim:\n  \"\\<lbrakk> x = y; fset x = fset y \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y;\n     \\<langle>x\\<rangle>\\<^sub>f =\n     \\<langle>y\\<rangle>\\<^sub>f \\<Longrightarrow>\n     P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto)"], ["", "lemma fmember_intro:\n  \"\\<lbrakk> x \\<in> fset(xs) \\<rbrakk> \\<Longrightarrow> x |\\<in>| xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<langle>xs\\<rangle>\\<^sub>f \\<Longrightarrow> x |\\<in>| xs", "by (metis fmember.rep_eq)"], ["", "lemma fmember_elim:\n  \"\\<lbrakk> x |\\<in>| xs; x \\<in> fset(xs) \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x |\\<in>| xs;\n     x \\<in> \\<langle>xs\\<rangle>\\<^sub>f \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (metis fmember.rep_eq)"], ["", "lemma fnmember_intro [intro]:\n  \"\\<lbrakk> x \\<notin> fset(xs) \\<rbrakk> \\<Longrightarrow> x |\\<notin>| xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> \\<langle>xs\\<rangle>\\<^sub>f \\<Longrightarrow>\n    x |\\<notin>| xs", "by (metis fmember.rep_eq)"], ["", "lemma fnmember_elim [elim]:\n  \"\\<lbrakk> x |\\<notin>| xs; x \\<notin> fset(xs) \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x |\\<notin>| xs;\n     x \\<notin> \\<langle>xs\\<rangle>\\<^sub>f \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (metis fmember.rep_eq)"], ["", "lemma fsubset_intro [intro]:\n  \"\\<langle>xs\\<rangle>\\<^sub>f \\<subseteq> \\<langle>ys\\<rangle>\\<^sub>f \\<Longrightarrow> xs |\\<subseteq>| ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>xs\\<rangle>\\<^sub>f\n    \\<subseteq> \\<langle>ys\\<rangle>\\<^sub>f \\<Longrightarrow>\n    xs |\\<subseteq>| ys", "by (metis less_eq_fset.rep_eq)"], ["", "lemma fsubset_elim [elim]:\n  \"\\<lbrakk> xs |\\<subseteq>| ys; \\<langle>xs\\<rangle>\\<^sub>f \\<subseteq> \\<langle>ys\\<rangle>\\<^sub>f \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs |\\<subseteq>| ys;\n     \\<langle>xs\\<rangle>\\<^sub>f\n     \\<subseteq> \\<langle>ys\\<rangle>\\<^sub>f \\<Longrightarrow>\n     P\\<rbrakk>\n    \\<Longrightarrow> P", "by (metis less_eq_fset.rep_eq)"], ["", "lemma fBall_intro [intro]:\n  \"Ball \\<langle>A\\<rangle>\\<^sub>f P \\<Longrightarrow> fBall A P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball \\<langle>A\\<rangle>\\<^sub>f P \\<Longrightarrow> fBall A P", "by (metis (poly_guards_query) fBallI fmember.rep_eq)"], ["", "lemma fBall_elim [elim]:\n  \"\\<lbrakk> fBall A P; Ball \\<langle>A\\<rangle>\\<^sub>f P \\<Longrightarrow> Q \\<rbrakk> \\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fBall A P;\n     Ball \\<langle>A\\<rangle>\\<^sub>f P \\<Longrightarrow> Q\\<rbrakk>\n    \\<Longrightarrow> Q", "by (metis fBallE fmember.rep_eq)"], ["", "lift_definition finset :: \"'a list \\<Rightarrow> 'a fset\" is set"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list. finite (set list)", ".."], ["", "context linorder\nbegin"], ["", "lemma sorted_list_of_set_inj:\n  \"\\<lbrakk> finite xs; finite ys; sorted_list_of_set xs = sorted_list_of_set ys \\<rbrakk>\n   \\<Longrightarrow> xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite xs; finite ys;\n     sorted_list_of_set xs = sorted_list_of_set ys\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "apply (simp add:sorted_list_of_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite xs; finite ys;\n     folding.F insort [] xs = folding.F insort [] ys\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "apply (induct xs rule:finite_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite ys;\n     folding.F insort [] {} = folding.F insort [] ys\\<rbrakk>\n    \\<Longrightarrow> {} = ys\n 2. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        \\<lbrakk>finite ys;\n         folding.F insort [] Fa = folding.F insort [] ys\\<rbrakk>\n        \\<Longrightarrow> Fa = ys;\n        finite ys;\n        folding.F insort [] (insert x Fa) = folding.F insort [] ys\\<rbrakk>\n       \\<Longrightarrow> insert x Fa = ys", "apply (induct ys rule:finite_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. folding.F insort [] {} = folding.F insort [] {} \\<Longrightarrow>\n    {} = {}\n 2. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        folding.F insort [] {} = folding.F insort [] Fa \\<Longrightarrow>\n        {} = Fa;\n        folding.F insort [] {} = folding.F insort [] (insert x Fa)\\<rbrakk>\n       \\<Longrightarrow> {} = insert x Fa\n 3. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        \\<lbrakk>finite ys;\n         folding.F insort [] Fa = folding.F insort [] ys\\<rbrakk>\n        \\<Longrightarrow> Fa = ys;\n        finite ys;\n        folding.F insort [] (insert x Fa) = folding.F insort [] ys\\<rbrakk>\n       \\<Longrightarrow> insert x Fa = ys", "apply (simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        folding.F insort [] (insert x Fa) =\n        folding.F insort [] Fa \\<Longrightarrow>\n        {} = Fa;\n        folding.F insort [] {} = folding.F insort [] (insert x Fa)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        folding.F insort [] Fa = folding.F insort [] ys \\<Longrightarrow>\n        Fa = ys;\n        finite ys;\n        folding.F insort [] (insert x Fa) = folding.F insort [] ys\\<rbrakk>\n       \\<Longrightarrow> insert x Fa = ys", "apply (metis finite.insertI insert_not_empty sorted_list_of_set_def sorted_list_of_set_empty sorted_list_of_set_eq_Nil_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x Fa.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        folding.F insort [] Fa = folding.F insort [] ys \\<Longrightarrow>\n        Fa = ys;\n        finite ys;\n        folding.F insort [] (insert x Fa) = folding.F insort [] ys\\<rbrakk>\n       \\<Longrightarrow> insert x Fa = ys", "apply (metis finite.insertI finite_list set_remdups set_sort sorted_list_of_set_def sorted_list_of_set_sort_remdups)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition flist :: \"'a fset \\<Rightarrow> 'a list\" where\n\"flist xs = sorted_list_of_set (fset xs)\""], ["", "lemma flist_inj: \"inj flist\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj flist", "apply (simp add:flist_def inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       sorted_list_of_set \\<langle>x\\<rangle>\\<^sub>f =\n       sorted_list_of_set \\<langle>y\\<rangle>\\<^sub>f \\<longrightarrow>\n       x = y", "apply (clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sorted_list_of_set \\<langle>x\\<rangle>\\<^sub>f =\n       sorted_list_of_set \\<langle>y\\<rangle>\\<^sub>f \\<Longrightarrow>\n       x = y", "apply (rename_tac x y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sorted_list_of_set \\<langle>x\\<rangle>\\<^sub>f =\n       sorted_list_of_set \\<langle>y\\<rangle>\\<^sub>f \\<Longrightarrow>\n       x = y", "apply (subgoal_tac \"fset x = fset y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>sorted_list_of_set \\<langle>x\\<rangle>\\<^sub>f =\n                sorted_list_of_set \\<langle>y\\<rangle>\\<^sub>f;\n        \\<langle>x\\<rangle>\\<^sub>f = \\<langle>y\\<rangle>\\<^sub>f\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       sorted_list_of_set \\<langle>x\\<rangle>\\<^sub>f =\n       sorted_list_of_set \\<langle>y\\<rangle>\\<^sub>f \\<Longrightarrow>\n       \\<langle>x\\<rangle>\\<^sub>f = \\<langle>y\\<rangle>\\<^sub>f", "apply (simp add:fset_inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sorted_list_of_set \\<langle>x\\<rangle>\\<^sub>f =\n       sorted_list_of_set \\<langle>y\\<rangle>\\<^sub>f \\<Longrightarrow>\n       \\<langle>x\\<rangle>\\<^sub>f = \\<langle>y\\<rangle>\\<^sub>f", "apply (rule sorted_list_of_set_inj, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma flist_props [simp]:\n  \"sorted (flist xs)\"\n  \"distinct (flist xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted (flist xs) &&& distinct (flist xs)", "by (simp_all add:flist_def)"], ["", "lemma flist_empty [simp]:\n  \"flist \\<lbrace>\\<rbrace> = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flist \\<lbrace>\\<rbrace> = []", "by (simp add:flist_def)"], ["", "lemma flist_inv [simp]: \"finset (flist xs) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finset (flist xs) = xs", "by (simp add:finset_def flist_def fset_inverse)"], ["", "lemma flist_set [simp]: \"set (flist xs) = fset xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (flist xs) = \\<langle>xs\\<rangle>\\<^sub>f", "by (simp add:finset_def flist_def fset_inverse)"], ["", "lemma fset_inv [simp]: \"\\<lbrakk> sorted xs; distinct xs \\<rbrakk> \\<Longrightarrow> flist (finset xs) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> flist (finset xs) = xs", "apply (simp add:finset_def flist_def fset_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> sorted_list_of_set (set xs) = xs", "apply (metis local.sorted_list_of_set_sort_remdups local.sorted_sort_id remdups_id_iff_distinct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fcard_flist:\n  \"fcard xs = length (flist xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fcard xs = length (flist xs)", "apply (simp add:fcard_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card \\<langle>xs\\<rangle>\\<^sub>f = length (flist xs)", "apply (fold flist_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set (flist xs)) = length (flist xs)", "apply (unfold distinct_card[OF flist_props(2)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (flist xs) = length (flist xs)", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma flist_nth:\n  \"i < fcard vs \\<Longrightarrow> flist vs ! i |\\<in>| vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < fcard vs \\<Longrightarrow> flist vs ! i |\\<in>| vs", "apply (simp add: fmember_def flist_def fcard_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < card \\<langle>vs\\<rangle>\\<^sub>f \\<Longrightarrow>\n    sorted_list_of_set \\<langle>vs\\<rangle>\\<^sub>f ! i\n    \\<in> \\<langle>vs\\<rangle>\\<^sub>f", "apply (metis fcard.rep_eq fcard_flist finset.rep_eq flist_def flist_inv nth_mem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition fmax :: \"'a fset \\<Rightarrow> 'a\" where\n\"fmax xs = (if (xs = \\<lbrace>\\<rbrace>) then undefined else last (flist xs))\""], ["", "end"], ["", "definition flists :: \"'a fset \\<Rightarrow> 'a list set\" where\n\"flists A = {xs. distinct xs \\<and> finset xs = A}\""], ["", "lemma flists_nonempty: \"\\<exists> xs. xs \\<in> flists A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs. xs \\<in> flists A", "apply (simp add: flists_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs. distinct xs \\<and> finset xs = A", "apply (metis Abs_fset_cases Abs_fset_inverse finite_distinct_list finite_fset finset.rep_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma flists_elem_uniq: \"\\<lbrakk> x \\<in> flists A; x \\<in> flists B \\<rbrakk> \\<Longrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> flists A; x \\<in> flists B\\<rbrakk>\n    \\<Longrightarrow> A = B", "by (simp add: flists_def)"], ["", "definition flist_arb :: \"'a fset \\<Rightarrow> 'a list\" where\n\"flist_arb A = (SOME xs. xs \\<in> flists A)\""], ["", "lemma flist_arb_distinct [simp]: \"distinct (flist_arb A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (flist_arb A)", "by (metis (mono_tags) flist_arb_def flists_def flists_nonempty mem_Collect_eq someI_ex)"], ["", "lemma flist_arb_inv [simp]: \"finset (flist_arb A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finset (flist_arb A) = A", "by (metis (mono_tags) flist_arb_def flists_def flists_nonempty mem_Collect_eq someI_ex)"], ["", "lemma flist_arb_inj:\n  \"inj flist_arb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj flist_arb", "by (metis flist_arb_inv injI)"], ["", "lemma flist_arb_lists: \"flist_arb ` Fow A \\<subseteq> lists A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flist_arb ` Fow A \\<subseteq> lists A", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>xa \\<in> Fow A; xb \\<in> set (flist_arb xa)\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> A", "using Fow_def finset.rep_eq"], ["proof (prove)\nusing this:\n  Fow ?A = {x. \\<langle>x\\<rangle>\\<^sub>f \\<subseteq> ?A}\n  \\<langle>finset ?x\\<rangle>\\<^sub>f = set ?x\n\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>xa \\<in> Fow A; xb \\<in> set (flist_arb xa)\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> A", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma countable_Fow:\n  fixes A :: \"'a set\"\n  assumes \"countable A\"\n  shows \"countable (Fow A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (Fow A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. countable (Fow A)", "from assms"], ["proof (chain)\npicking this:\n  countable A", "obtain to_nat_list :: \"'a list \\<Rightarrow> nat\" where \"inj_on to_nat_list (lists A)\""], ["proof (prove)\nusing this:\n  countable A\n\ngoal (1 subgoal):\n 1. (\\<And>to_nat_list.\n        inj_on to_nat_list (lists A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  inj_on to_nat_list (lists A)\n\ngoal (1 subgoal):\n 1. countable (Fow A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  inj_on to_nat_list (lists A)\n\ngoal (1 subgoal):\n 1. countable (Fow A)", "apply (simp add: countable_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on to_nat_list (lists A) \\<Longrightarrow>\n    \\<exists>f. inj_on f (Fow A)", "apply (rule_tac x=\"to_nat_list \\<circ> flist_arb\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on to_nat_list (lists A) \\<Longrightarrow>\n    inj_on (to_nat_list \\<circ> flist_arb) (Fow A)", "apply (rule comp_inj_on)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inj_on to_nat_list (lists A) \\<Longrightarrow> inj_on flist_arb (Fow A)\n 2. inj_on to_nat_list (lists A) \\<Longrightarrow>\n    inj_on to_nat_list (flist_arb ` Fow A)", "apply (metis flist_arb_inv inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on to_nat_list (lists A) \\<Longrightarrow>\n    inj_on to_nat_list (flist_arb ` Fow A)", "apply (simp add: flist_arb_lists subset_inj_on)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  countable (Fow A)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition flub :: \"'a fset set \\<Rightarrow> 'a fset \\<Rightarrow> 'a fset\" where\n\"flub A t = (if (\\<forall> a\\<in>A. a |\\<subseteq>| t) then Abs_fset (\\<Union>x\\<in>A. \\<langle>x\\<rangle>\\<^sub>f) else t)\""], ["", "lemma finite_Union_subsets:\n  \"\\<lbrakk> \\<forall> a \\<in> A. a \\<subseteq> b; finite b \\<rbrakk> \\<Longrightarrow> finite (\\<Union>A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>A. a \\<subseteq> b; finite b\\<rbrakk>\n    \\<Longrightarrow> finite (\\<Union> A)", "by (metis Sup_le_iff finite_subset)"], ["", "lemma finite_UN_subsets:\n  \"\\<lbrakk> \\<forall> a \\<in> A. B a \\<subseteq> b; finite b \\<rbrakk> \\<Longrightarrow> finite (\\<Union>a\\<in>A. B a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>A. B a \\<subseteq> b; finite b\\<rbrakk>\n    \\<Longrightarrow> finite (\\<Union> (B ` A))", "by (metis UN_subset_iff finite_subset)"], ["", "lemma flub_rep_eq:\n  \"\\<langle>flub A t\\<rangle>\\<^sub>f = (if (\\<forall> a\\<in>A. a |\\<subseteq>| t) then (\\<Union>x\\<in>A. \\<langle>x\\<rangle>\\<^sub>f) else \\<langle>t\\<rangle>\\<^sub>f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>flub A t\\<rangle>\\<^sub>f =\n    (if \\<forall>a\\<in>A. a |\\<subseteq>| t then \\<Union> (fset ` A)\n     else \\<langle>t\\<rangle>\\<^sub>f)", "apply (subgoal_tac \"(if (\\<forall> a\\<in>A. a |\\<subseteq>| t) then (\\<Union>x\\<in>A. \\<langle>x\\<rangle>\\<^sub>f) else \\<langle>t\\<rangle>\\<^sub>f) \\<in> {x. finite x}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. (if \\<forall>a\\<in>A. a |\\<subseteq>| t then \\<Union> (fset ` A)\n     else \\<langle>t\\<rangle>\\<^sub>f)\n    \\<in> {x. finite x} \\<Longrightarrow>\n    \\<langle>flub A t\\<rangle>\\<^sub>f =\n    (if \\<forall>a\\<in>A. a |\\<subseteq>| t then \\<Union> (fset ` A)\n     else \\<langle>t\\<rangle>\\<^sub>f)\n 2. (if \\<forall>a\\<in>A. a |\\<subseteq>| t then \\<Union> (fset ` A)\n     else \\<langle>t\\<rangle>\\<^sub>f)\n    \\<in> {x. finite x}", "apply (auto simp add:flub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A. a |\\<subseteq>| t \\<Longrightarrow>\n    finite (\\<Union> (fset ` A))", "apply (rule finite_UN_subsets[of _ _ \"\\<langle>t\\<rangle>\\<^sub>f\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>a\\<in>A. a |\\<subseteq>| t \\<Longrightarrow>\n    \\<forall>x\\<in>A.\n       \\<langle>x\\<rangle>\\<^sub>f \\<subseteq> \\<langle>t\\<rangle>\\<^sub>f\n 2. \\<forall>a\\<in>A. a |\\<subseteq>| t \\<Longrightarrow>\n    finite \\<langle>t\\<rangle>\\<^sub>f", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition fglb :: \"'a fset set \\<Rightarrow> 'a fset \\<Rightarrow> 'a fset\" where\n\"fglb A t = (if (A = {}) then t else Abs_fset (\\<Inter>x\\<in>A. \\<langle>x\\<rangle>\\<^sub>f))\""], ["", "lemma fglb_rep_eq:\n  \"\\<langle>fglb A t\\<rangle>\\<^sub>f = (if (A = {}) then \\<langle>t\\<rangle>\\<^sub>f else (\\<Inter>x\\<in>A. \\<langle>x\\<rangle>\\<^sub>f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>fglb A t\\<rangle>\\<^sub>f =\n    (if A = {} then \\<langle>t\\<rangle>\\<^sub>f else \\<Inter> (fset ` A))", "apply (subgoal_tac \"(if (A = {}) then \\<langle>t\\<rangle>\\<^sub>f else (\\<Inter>x\\<in>A. \\<langle>x\\<rangle>\\<^sub>f)) \\<in> {x. finite x}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. (if A = {} then \\<langle>t\\<rangle>\\<^sub>f else \\<Inter> (fset ` A))\n    \\<in> {x. finite x} \\<Longrightarrow>\n    \\<langle>fglb A t\\<rangle>\\<^sub>f =\n    (if A = {} then \\<langle>t\\<rangle>\\<^sub>f else \\<Inter> (fset ` A))\n 2. (if A = {} then \\<langle>t\\<rangle>\\<^sub>f else \\<Inter> (fset ` A))\n    \\<in> {x. finite x}", "apply (metis Abs_fset_inverse fglb_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if A = {} then \\<langle>t\\<rangle>\\<^sub>f else \\<Inter> (fset ` A))\n    \\<in> {x. finite x}", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>infinite (\\<Inter> (fset ` A)); x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis finite_INT finite_fset)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FinPow_rep_eq [simp]:\n  \"fset (FinPow xs) = {ys. ys |\\<subseteq>| xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>FinPow xs\\<rangle>\\<^sub>f = {ys. ys |\\<subseteq>| xs}", "apply (subgoal_tac \"finite (Abs_fset ` Pow \\<langle>xs\\<rangle>\\<^sub>f)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (Abs_fset ` Pow \\<langle>xs\\<rangle>\\<^sub>f) \\<Longrightarrow>\n    \\<langle>FinPow xs\\<rangle>\\<^sub>f = {ys. ys |\\<subseteq>| xs}\n 2. finite (Abs_fset ` Pow \\<langle>xs\\<rangle>\\<^sub>f)", "apply (auto simp add: fmember_def FinPow_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xb.\n       \\<lbrakk>xa \\<subseteq> \\<langle>xs\\<rangle>\\<^sub>f;\n        xb \\<in> \\<langle>Abs_fset xa\\<rangle>\\<^sub>f\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> \\<langle>xs\\<rangle>\\<^sub>f\n 2. \\<And>x.\n       x |\\<subseteq>| xs \\<Longrightarrow>\n       x \\<in> Abs_fset ` Pow \\<langle>xs\\<rangle>\\<^sub>f", "apply (rename_tac x' y')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<subseteq> \\<langle>xs\\<rangle>\\<^sub>f;\n        y' \\<in> \\<langle>Abs_fset x'\\<rangle>\\<^sub>f\\<rbrakk>\n       \\<Longrightarrow> y' \\<in> \\<langle>xs\\<rangle>\\<^sub>f\n 2. \\<And>x.\n       x |\\<subseteq>| xs \\<Longrightarrow>\n       x \\<in> Abs_fset ` Pow \\<langle>xs\\<rangle>\\<^sub>f", "apply (subgoal_tac \"finite x'\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<subseteq> \\<langle>xs\\<rangle>\\<^sub>f;\n        y' \\<in> \\<langle>Abs_fset x'\\<rangle>\\<^sub>f; finite x'\\<rbrakk>\n       \\<Longrightarrow> y' \\<in> \\<langle>xs\\<rangle>\\<^sub>f\n 2. \\<And>x' y'.\n       \\<lbrakk>x' \\<subseteq> \\<langle>xs\\<rangle>\\<^sub>f;\n        y' \\<in> \\<langle>Abs_fset x'\\<rangle>\\<^sub>f\\<rbrakk>\n       \\<Longrightarrow> finite x'\n 3. \\<And>x.\n       x |\\<subseteq>| xs \\<Longrightarrow>\n       x \\<in> Abs_fset ` Pow \\<langle>xs\\<rangle>\\<^sub>f", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x' y'.\n       \\<lbrakk>x' \\<subseteq> \\<langle>xs\\<rangle>\\<^sub>f;\n        y' \\<in> \\<langle>Abs_fset x'\\<rangle>\\<^sub>f\\<rbrakk>\n       \\<Longrightarrow> finite x'\n 2. \\<And>x.\n       x |\\<subseteq>| xs \\<Longrightarrow>\n       x \\<in> Abs_fset ` Pow \\<langle>xs\\<rangle>\\<^sub>f", "apply (metis finite_fset finite_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x |\\<subseteq>| xs \\<Longrightarrow>\n       x \\<in> Abs_fset ` Pow \\<langle>xs\\<rangle>\\<^sub>f", "apply (metis (full_types) Pow_iff fset_inverse imageI less_eq_fset.rep_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FUnion_rep_eq [simp]:\n  \"\\<langle>\\<Union>\\<^sub>f xs\\<rangle>\\<^sub>f = (\\<Union>x\\<in>\\<langle>xs\\<rangle>\\<^sub>f. \\<langle>x\\<rangle>\\<^sub>f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>\\<Union>\\<^sub>fxs\\<rangle>\\<^sub>f =\n    \\<Union> (fset ` \\<langle>xs\\<rangle>\\<^sub>f)", "by (simp add:FUnion_def)"], ["", "lemma FInter_rep_eq [simp]:\n  \"xs \\<noteq> \\<lbrace>\\<rbrace> \\<Longrightarrow> \\<langle>\\<Inter>\\<^sub>f xs\\<rangle>\\<^sub>f = (\\<Inter>x\\<in>\\<langle>xs\\<rangle>\\<^sub>f. \\<langle>x\\<rangle>\\<^sub>f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> \\<lbrace>\\<rbrace> \\<Longrightarrow>\n    \\<langle>\\<Inter>\\<^sub>fxs\\<rangle>\\<^sub>f =\n    \\<Inter> (fset ` \\<langle>xs\\<rangle>\\<^sub>f)", "apply (simp add:FInter_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> \\<lbrace>\\<rbrace> \\<Longrightarrow>\n    \\<langle>Abs_fset\n              (\\<Inter>\n                (fset ` \\<langle>xs\\<rangle>\\<^sub>f))\\<rangle>\\<^sub>f =\n    \\<Inter> (fset ` \\<langle>xs\\<rangle>\\<^sub>f)", "apply (subgoal_tac \"finite (\\<Inter>x\\<in>\\<langle>xs\\<rangle>\\<^sub>f. \\<langle>x\\<rangle>\\<^sub>f)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs \\<noteq> \\<lbrace>\\<rbrace>;\n     finite (\\<Inter> (fset ` \\<langle>xs\\<rangle>\\<^sub>f))\\<rbrakk>\n    \\<Longrightarrow> \\<langle>Abs_fset\n                                (\\<Inter>\n                                  (fset `\n                                   \\<langle>xs\\<rangle>\\<^sub>f))\\<rangle>\\<^sub>f =\n                      \\<Inter> (fset ` \\<langle>xs\\<rangle>\\<^sub>f)\n 2. xs \\<noteq> \\<lbrace>\\<rbrace> \\<Longrightarrow>\n    finite (\\<Inter> (fset ` \\<langle>xs\\<rangle>\\<^sub>f))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> \\<lbrace>\\<rbrace> \\<Longrightarrow>\n    finite (\\<Inter> (fset ` \\<langle>xs\\<rangle>\\<^sub>f))", "apply (metis (poly_guards_query) bot_fset.rep_eq fglb_rep_eq finite_fset fset_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FUnion_empty [simp]:\n  \"\\<Union>\\<^sub>f \\<lbrace>\\<rbrace> = \\<lbrace>\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\\<^sub>f\\<lbrace>\\<rbrace> = \\<lbrace>\\<rbrace>", "by (auto simp add:FUnion_def fmember_def)"], ["", "lemma FinPow_member [simp]:\n  \"xs |\\<in>| FinPow xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs |\\<in>| FinPow xs", "by (auto simp add:fmember_def)"], ["", "lemma FUnion_FinPow [simp]:\n  \"\\<Union>\\<^sub>f (FinPow x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\\<^sub>fFinPow x = x", "by (auto simp add:fmember_def less_eq_fset_def)"], ["", "lemma Fow_mem [iff]: \"x \\<in> Fow A \\<longleftrightarrow> \\<langle>x\\<rangle>\\<^sub>f \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> Fow A) = (\\<langle>x\\<rangle>\\<^sub>f \\<subseteq> A)", "by (auto simp add:Fow_def)"], ["", "lemma Fow_UNIV [simp]: \"Fow UNIV = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fow UNIV = UNIV", "by (simp add:Fow_def)"], ["", "lift_definition FMax :: \"('a::linorder) fset \\<Rightarrow> 'a\" is \"Max\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "end"]]}