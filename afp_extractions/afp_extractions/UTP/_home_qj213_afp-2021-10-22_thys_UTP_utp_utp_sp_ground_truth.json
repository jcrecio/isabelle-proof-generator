{"file_name": "/home/qj213/afp-2021-10-22/thys/UTP/utp/utp_sp.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UTP", "problem_names": ["lemma sp_false [sp]: \"p sp false = false\"", "lemma sp_true [sp]: \"q \\<noteq> false \\<Longrightarrow> q sp true = true\"", "lemma sp_assigns_r [sp]: \n  \"vwb_lens x \\<Longrightarrow> (p sp x := e ) = (\\<^bold>\\<exists>v \\<bullet> p\\<lbrakk>\\<guillemotleft>v\\<guillemotright>/x\\<rbrakk> \\<and> &x =\\<^sub>u e\\<lbrakk>\\<guillemotleft>v\\<guillemotright>/x\\<rbrakk>)\"", "lemma sp_it_is_post_condition:\n  \"\\<lbrace>p\\<rbrace>C\\<lbrace>p sp C\\<rbrace>\\<^sub>u\"", "lemma sp_it_is_the_strongest_post:\n  \"`p sp C \\<Rightarrow> Q`\\<Longrightarrow>\\<lbrace>p\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\"", "lemma sp_so:\n  \"`p sp C \\<Rightarrow> Q` = \\<lbrace>p\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\"", "theorem sp_hoare_link:\n  \"\\<lbrace>p\\<rbrace>Q\\<lbrace>r\\<rbrace>\\<^sub>u \\<longleftrightarrow> (r \\<sqsubseteq> p sp Q)\"", "lemma sp_while_r [sp]: \n   assumes \\<open>`pre \\<Rightarrow> I`\\<close> and \\<open>\\<lbrace>I \\<and> b\\<rbrace>C\\<lbrace>I'\\<rbrace>\\<^sub>u\\<close> and \\<open>`I' \\<Rightarrow> I`\\<close>\n   shows \"(pre sp invar I while\\<^sub>\\<bottom> b do C od) = (\\<not>b \\<and> I)\"", "theorem sp_eq_intro: \"\\<lbrakk>\\<And>r. r sp P = r sp Q\\<rbrakk> \\<Longrightarrow> P = Q\"", "lemma wp_sp_sym:\n  \"`prog wp (true sp prog)`\"", "lemma it_is_pre_condition:\"\\<lbrace>C wp Q\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\"", "lemma it_is_the_weakest_pre:\"`P \\<Rightarrow> C wp Q` = \\<lbrace>P\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\"", "lemma s_pre:\"`P \\<Rightarrow> C wp Q`=\\<lbrace>P\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\""], "translations": [["", "lemma sp_false [sp]: \"p sp false = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p sp false = false", "by (rel_simp)"], ["", "lemma sp_true [sp]: \"q \\<noteq> false \\<Longrightarrow> q sp true = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> q = false \\<Longrightarrow> q sp true = true", "by (rel_auto)"], ["", "lemma sp_assigns_r [sp]: \n  \"vwb_lens x \\<Longrightarrow> (p sp x := e ) = (\\<^bold>\\<exists>v \\<bullet> p\\<lbrakk>\\<guillemotleft>v\\<guillemotright>/x\\<rbrakk> \\<and> &x =\\<^sub>u e\\<lbrakk>\\<guillemotleft>v\\<guillemotright>/x\\<rbrakk>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vwb_lens x \\<Longrightarrow>\n    p sp x := e =\n    (\\<^bold>\\<exists> v \\<bullet> p\\<lbrakk>\\<guillemotleft>v\\<guillemotright>/x\\<rbrakk> \\<and>\n                                   &x =\\<^sub>u\n                                   e\\<lbrakk>\\<guillemotleft>v\\<guillemotright>/x\\<rbrakk>)", "by (rel_auto, metis vwb_lens_wb wb_lens.get_put, metis vwb_lens.put_eq)"], ["", "lemma sp_it_is_post_condition:\n  \"\\<lbrace>p\\<rbrace>C\\<lbrace>p sp C\\<rbrace>\\<^sub>u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>p\\<rbrace> C \\<lbrace>p sp C\\<rbrace>\\<^sub>u", "by rel_blast"], ["", "lemma sp_it_is_the_strongest_post:\n  \"`p sp C \\<Rightarrow> Q`\\<Longrightarrow>\\<lbrace>p\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. `p sp C \\<Rightarrow> Q` \\<Longrightarrow>\n    \\<lbrace>p\\<rbrace> C \\<lbrace>Q\\<rbrace>\\<^sub>u", "by rel_blast"], ["", "lemma sp_so:\n  \"`p sp C \\<Rightarrow> Q` = \\<lbrace>p\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. `p sp C \\<Rightarrow> Q` = \\<lbrace>p\\<rbrace> C\n    \\<lbrace>Q\\<rbrace>\\<^sub>u", "by rel_blast"], ["", "theorem sp_hoare_link:\n  \"\\<lbrace>p\\<rbrace>Q\\<lbrace>r\\<rbrace>\\<^sub>u \\<longleftrightarrow> (r \\<sqsubseteq> p sp Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>p\\<rbrace> Q \\<lbrace>r\\<rbrace>\\<^sub>u =\n    (r \\<sqsubseteq> p sp Q)", "by rel_auto"], ["", "lemma sp_while_r [sp]: \n   assumes \\<open>`pre \\<Rightarrow> I`\\<close> and \\<open>\\<lbrace>I \\<and> b\\<rbrace>C\\<lbrace>I'\\<rbrace>\\<^sub>u\\<close> and \\<open>`I' \\<Rightarrow> I`\\<close>\n   shows \"(pre sp invar I while\\<^sub>\\<bottom> b do C od) = (\\<not>b \\<and> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre sp invar I while\\<^sub>\\<bottom> b do C od = (\\<not> b \\<and> I)", "unfolding sp_upred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lceil>pre\\<rceil>\\<^sub>> ;;\n             invar I while\\<^sub>\\<bottom> b do C od\\<rfloor>\\<^sub>> =\n    (\\<not> b \\<and> I)", "oops"], ["", "theorem sp_eq_intro: \"\\<lbrakk>\\<And>r. r sp P = r sp Q\\<rbrakk> \\<Longrightarrow> P = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r. r sp P = r sp Q) \\<Longrightarrow> P = Q", "by (rel_auto robust, fastforce+)"], ["", "lemma wp_sp_sym:\n  \"`prog wp (true sp prog)`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. `prog wp (true sp prog)`", "by rel_auto"], ["", "lemma it_is_pre_condition:\"\\<lbrace>C wp Q\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>C wp Q\\<rbrace> C \\<lbrace>Q\\<rbrace>\\<^sub>u", "by rel_blast"], ["", "lemma it_is_the_weakest_pre:\"`P \\<Rightarrow> C wp Q` = \\<lbrace>P\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. `P \\<Rightarrow> C wp Q` = \\<lbrace>P\\<rbrace> C\n    \\<lbrace>Q\\<rbrace>\\<^sub>u", "by rel_blast"], ["", "lemma s_pre:\"`P \\<Rightarrow> C wp Q`=\\<lbrace>P\\<rbrace>C\\<lbrace>Q\\<rbrace>\\<^sub>u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. `P \\<Rightarrow> C wp Q` = \\<lbrace>P\\<rbrace> C\n    \\<lbrace>Q\\<rbrace>\\<^sub>u", "by rel_blast"], ["", "end"]]}