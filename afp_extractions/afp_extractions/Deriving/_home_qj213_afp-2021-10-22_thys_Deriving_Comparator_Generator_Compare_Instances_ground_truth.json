{"file_name": "/home/qj213/afp-2021-10-22/thys/Deriving/Comparator_Generator/Compare_Instances.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Deriving", "problem_names": ["lemma comparator_unit: \"comparator comparator_unit\"", "lemma comparator_bool: \"comparator comparator_bool\"", "lemma comparator_bool_comparator_of [compare_simps]:\n  \"comparator_bool = comparator_of\"", "lemma comparator_unit_comparator_of [compare_simps]:\n  \"comparator_unit = comparator_of\""], "translations": [["", "lemma comparator_unit: \"comparator comparator_unit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator comparator_unit", "by (unfold_locales, auto)"], ["", "lemma comparator_bool: \"comparator comparator_bool\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator comparator_bool", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y. invert_order (comparator_bool x y) = comparator_bool y x\n 2. \\<And>x y. comparator_bool x y = Eq \\<Longrightarrow> x = y\n 3. \\<And>x y z.\n       \\<lbrakk>comparator_bool x y = Lt; comparator_bool y z = Lt\\<rbrakk>\n       \\<Longrightarrow> comparator_bool x z = Lt", "fix x y z :: bool"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y. invert_order (comparator_bool x y) = comparator_bool y x\n 2. \\<And>x y. comparator_bool x y = Eq \\<Longrightarrow> x = y\n 3. \\<And>x y z.\n       \\<lbrakk>comparator_bool x y = Lt; comparator_bool y z = Lt\\<rbrakk>\n       \\<Longrightarrow> comparator_bool x z = Lt", "show \"invert_order (comparator_bool x y) = comparator_bool y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invert_order (comparator_bool x y) = comparator_bool y x", "by (cases x, (cases y, auto)+)"], ["proof (state)\nthis:\n  invert_order (comparator_bool x y) = comparator_bool y x\n\ngoal (2 subgoals):\n 1. \\<And>x y. comparator_bool x y = Eq \\<Longrightarrow> x = y\n 2. \\<And>x y z.\n       \\<lbrakk>comparator_bool x y = Lt; comparator_bool y z = Lt\\<rbrakk>\n       \\<Longrightarrow> comparator_bool x z = Lt", "show \"comparator_bool x y = Eq \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator_bool x y = Eq \\<Longrightarrow> x = y", "by (cases x, (cases y, auto)+)"], ["proof (state)\nthis:\n  comparator_bool x y = Eq \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>comparator_bool x y = Lt; comparator_bool y z = Lt\\<rbrakk>\n       \\<Longrightarrow> comparator_bool x z = Lt", "show \"comparator_bool x y = Lt \\<Longrightarrow> comparator_bool y z = Lt \\<Longrightarrow> comparator_bool x z = Lt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>comparator_bool x y = Lt; comparator_bool y z = Lt\\<rbrakk>\n    \\<Longrightarrow> comparator_bool x z = Lt", "by (cases x, (cases y, auto), cases y, (cases z, auto)+)"], ["proof (state)\nthis:\n  \\<lbrakk>comparator_bool x y = Lt; comparator_bool y z = Lt\\<rbrakk>\n  \\<Longrightarrow> comparator_bool x z = Lt\n\ngoal:\nNo subgoals!", "qed"], ["", "local_setup \\<open>\n  Comparator_Generator.register_foreign_comparator @{typ unit}\n    @{term comparator_unit}\n    @{thm comparator_unit}\n\\<close>"], ["", "local_setup \\<open>\n  Comparator_Generator.register_foreign_comparator @{typ bool}\n    @{term comparator_bool}\n    @{thm comparator_bool}\n\\<close>"], ["", "derive compare bool unit"], ["", "text \\<open>It is not directly possible to \\<open>derive (linorder) bool unit\\<close>, since \n  @{term \"compare :: bool comparator\"}\n  was not defined as @{term \"comparator_of :: bool comparator\"}, but as\n  @{const comparator_bool}.\n  However, we can manually prove this equivalence\n  and then use this knowledge to prove the instance of @{class compare_order}.\\<close>"], ["", "lemma comparator_bool_comparator_of [compare_simps]:\n  \"comparator_bool = comparator_of\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator_bool = comparator_of", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. comparator_bool x xa = comparator_of x xa", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. comparator_bool x xa = comparator_of x xa", "show \"comparator_bool a b = comparator_of a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator_bool a b = comparator_of a b", "unfolding comparator_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator_bool a b = (if a < b then Lt else if a = b then Eq else Gt)", "by (cases a, (cases b, auto))"], ["proof (state)\nthis:\n  comparator_bool a b = comparator_of a b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comparator_unit_comparator_of [compare_simps]:\n  \"comparator_unit = comparator_of\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator_unit = comparator_of", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. comparator_unit x xa = comparator_of x xa", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. comparator_unit x xa = comparator_of x xa", "show \"comparator_unit a b = comparator_of a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator_unit a b = comparator_of a b", "unfolding comparator_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator_unit a b = (if a < b then Lt else if a = b then Eq else Gt)", "by auto"], ["proof (state)\nthis:\n  comparator_unit a b = comparator_of a b\n\ngoal:\nNo subgoals!", "qed"], ["", "derive (linorder) compare_order bool unit"], ["", "end"]]}