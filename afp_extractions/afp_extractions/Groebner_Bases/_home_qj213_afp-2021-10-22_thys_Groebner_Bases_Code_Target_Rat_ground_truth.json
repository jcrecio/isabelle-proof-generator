{"file_name": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases/Code_Target_Rat.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases", "problem_names": ["lemma [code]: \"Rat.of_int (int_of_integer x) = rat_of_integer x\"", "lemma [code_unfold]: \"quotient_of = (\\<lambda>x. map_prod int_of_integer int_of_integer (quotient_of' x))\""], "translations": [["", "lemma [code]: \"Rat.of_int (int_of_integer x) = rat_of_integer x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rat.of_int (int_of_integer x) = rat_of_integer x", "by transfer simp"], ["", "lemma [code_unfold]: \"quotient_of = (\\<lambda>x. map_prod int_of_integer int_of_integer (quotient_of' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quotient_of =\n    (\\<lambda>x. map_prod int_of_integer int_of_integer (quotient_of' x))", "by transfer simp"], ["", "end"], ["", "code_printing\n  type_constructor rat \\<rightharpoonup>\n    (SML) \"Rat.rat\" |\n  constant \"plus :: rat \\<Rightarrow> _ \\<Rightarrow> _\" \\<rightharpoonup>\n    (SML) \"Rat.add\" |\n  constant \"minus :: rat \\<Rightarrow> _ \\<Rightarrow> _\" \\<rightharpoonup>\n    (SML) \"Rat.add ((_)) (Rat.neg ((_)))\" |\n  constant \"times :: rat \\<Rightarrow> _ \\<Rightarrow> _\" \\<rightharpoonup>\n    (SML) \"Rat.mult\" |\n  constant \"inverse :: rat \\<Rightarrow> _\" \\<rightharpoonup>\n    (SML) \"Rat.inv\" |\n  constant \"divide :: rat \\<Rightarrow> _ \\<Rightarrow> _\" \\<rightharpoonup>\n    (SML) \"Rat.mult ((_)) (Rat.inv ((_)))\" |\n  constant \"rat_of_integer :: integer \\<Rightarrow> rat\" \\<rightharpoonup>\n    (SML) \"Rat.of'_int\" |\n  constant \"abs :: rat \\<Rightarrow> _\" \\<rightharpoonup>\n    (SML) \"Rat.abs\" |\n  constant \"0 :: rat\" \\<rightharpoonup>\n    (SML) \"!(Rat.make (0, 1))\" |\n  constant \"1 :: rat\" \\<rightharpoonup>\n    (SML) \"!(Rat.make (1, 1))\" |\n  constant \"uminus :: rat \\<Rightarrow> rat\" \\<rightharpoonup>\n    (SML) \"Rat.neg\" |\n  constant \"HOL.equal :: rat \\<Rightarrow> _\" \\<rightharpoonup>\n    (SML) \"!((_ : Rat.rat) = _)\" |\n  constant \"quotient_of'\" \\<rightharpoonup>\n    (SML) \"Rat.dest\""], ["", "(* For testing only. *)\n(*\nML \\<open>val logistic_rat = @{code logistic}\\<close>\nML \\<open>timeap (fn n => let val r = logistic_int n in r end) 16\\<close> (* 2.534s cpu time *)\nML \\<open>timeap (fn n => let val r = logistic_ml n in r end) 16\\<close> (* 0.021s cpu time *)\nML \\<open>timeap (fn n => let val r = logistic_rat n in r end) 16\\<close> (* 0.021s cpu time *)\n*)"], ["", "end"], ["", "(* theory *)"]]}