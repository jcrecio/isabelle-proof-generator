{"file_name": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases/F4.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases", "problem_names": ["lemma wfp_on_ord_term_strict:\n  assumes \"dickson_grading d\"\n  shows \"wfp_on (\\<prec>\\<^sub>t) (pp_of_term -` dgrad_set d m)\"", "lemma sym_preproc_aux_term1_wf_on:\n  assumes \"dickson_grading d\"\n  shows \"wfp_on (\\<lambda>x y. (x, y) \\<in> sym_preproc_aux_term1 d) {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\"", "lemma sym_preproc_aux_term_wf:\n  assumes \"dickson_grading d\"\n  shows \"wf (sym_preproc_aux_term d)\"", "lemma fst_sym_preproc_addnew_less:\n  assumes \"\\<And>u. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\"\n    and \"u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\"\n  shows \"u \\<prec>\\<^sub>t v\"", "lemma fst_sym_preproc_addnew_dgrad_set_le:\n  assumes \"dickson_grading d\"\n  shows \"dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v))) (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)))\"", "lemma components_fst_sym_preproc_addnew_subset:\n  \"component_of_term ` set (fst (sym_preproc_addnew gs vs fs v)) \\<subseteq> component_of_term ` (Keys (set gs) \\<union> insert v (set vs))\"", "lemma fst_sym_preproc_addnew_superset: \"set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))\"", "lemma snd_sym_preproc_addnew_superset: \"set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))\"", "lemma in_snd_sym_preproc_addnewE:\n  assumes \"p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\"\n  assumes 1: \"p \\<in> set fs \\<Longrightarrow> thesis\"\n  assumes 2: \"\\<And>g s. g \\<in> set gs \\<Longrightarrow> p = monom_mult 1 s g \\<Longrightarrow> thesis\"\n  shows thesis", "lemma sym_preproc_addnew_pmdl:\n  \"pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v))) = pmdl (set gs \\<union> set fs)\"\n    (is \"pmdl (set gs \\<union> ?l) = ?r\")", "lemma Keys_snd_sym_preproc_addnew:\n  \"Keys (set (snd (sym_preproc_addnew gs vs fs v))) \\<union> insert v (set vs) =\n   Keys (set fs) \\<union> insert v (set (fst (sym_preproc_addnew gs vs (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list) v)))\"", "lemma sym_preproc_addnew_complete:\n  assumes \"g \\<in> set gs\" and \"lt g adds\\<^sub>t v\"\n  shows \"monom_mult 1 (pp_of_term v - lp g) g \\<in> set (snd (sym_preproc_addnew gs vs fs v))\"", "lemma sym_preproc_aux_Nil: \"sym_preproc_aux gs ks ([], fs) = (ks, fs)\"", "lemma sym_preproc_aux_sorted:\n  assumes \"sorted_wrt (\\<succ>\\<^sub>t) (v # vs)\"\n  shows \"sym_preproc_aux gs ks (v # vs, fs) = sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)\"", "lemma sym_preproc_aux_induct [consumes 0, case_names base rec]:\n  assumes base: \"\\<And>ks fs. P ks [] fs (ks, fs)\"\n    and rec: \"\\<And>ks vs fs v vs'. vs \\<noteq> [] \\<Longrightarrow> v = ord_term_lin.Max (set vs) \\<Longrightarrow> vs' = removeAll v vs \\<Longrightarrow>\n                P (ks @ [v]) (fst (sym_preproc_addnew gs vs' fs v)) (snd (sym_preproc_addnew gs vs' fs v))\n                    (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n                P ks vs fs (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))\"\n  shows \"P ks vs fs (sym_preproc_aux gs ks (vs, fs))\"", "lemma fst_sym_preproc_aux_sorted_wrt:\n  assumes \"sorted_wrt (\\<succ>\\<^sub>t) ks\" and \"\\<And>k v. k \\<in> set ks \\<Longrightarrow> v \\<in> set vs \\<Longrightarrow> v \\<prec>\\<^sub>t k\"\n  shows \"sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc_aux gs ks (vs, fs)))\"", "lemma fst_sym_preproc_aux_complete:\n  assumes \"Keys (set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list)) = set ks \\<union> set vs\"\n  shows \"set (fst (sym_preproc_aux gs ks (vs, fs))) = Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))\"", "lemma snd_sym_preproc_aux_superset: \"set fs \\<subseteq> set (snd (sym_preproc_aux gs ks (vs, fs)))\"", "lemma in_snd_sym_preproc_auxE:\n  assumes \"p \\<in> set (snd (sym_preproc_aux gs ks (vs, fs)))\"\n  assumes 1: \"p \\<in> set fs \\<Longrightarrow> thesis\"\n  assumes 2: \"\\<And>g t. g \\<in> set gs \\<Longrightarrow> p = monom_mult 1 t g \\<Longrightarrow> thesis\"\n  shows thesis", "lemma snd_sym_preproc_aux_pmdl:\n  \"pmdl (set gs \\<union> set (snd (sym_preproc_aux gs ks (ts, fs)))) = pmdl (set gs \\<union> set fs)\"", "lemma snd_sym_preproc_aux_dgrad_set_le:\n  assumes \"dickson_grading d\" and \"set vs \\<subseteq> Keys (set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list))\"\n  shows \"dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))) (pp_of_term ` Keys (set gs \\<union> set fs))\"", "lemma components_snd_sym_preproc_aux_subset:\n  assumes \"set vs \\<subseteq> Keys (set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list))\"\n  shows \"component_of_term ` Keys (set (snd (sym_preproc_aux gs ks (vs, fs)))) \\<subseteq>\n          component_of_term ` Keys (set gs \\<union> set fs)\"", "lemma snd_sym_preproc_aux_complete:\n  assumes \"\\<And>u' g'. u' \\<in> Keys (set fs) \\<Longrightarrow> u' \\<notin> set vs \\<Longrightarrow> g' \\<in> set gs \\<Longrightarrow> lt g' adds\\<^sub>t u' \\<Longrightarrow>\n            monom_mult 1 (pp_of_term u' - lp g') g' \\<in> set fs\"\n  assumes \"u \\<in> Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))\" and \"g \\<in> set gs\" and \"lt g adds\\<^sub>t u\"\n  shows \"monom_mult (1::'b::semiring_1_no_zero_divisors) (pp_of_term u - lp g) g \\<in>\n          set (snd (sym_preproc_aux gs ks (vs, fs)))\"", "lemma sym_preproc_Nil [simp]: \"sym_preproc gs [] = ([], [])\"", "lemma fst_sym_preproc:\n  \"fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list)))\"", "lemma snd_sym_preproc_superset: \"set fs \\<subseteq> set (snd (sym_preproc gs fs))\"", "lemma in_snd_sym_preprocE:\n  assumes \"p \\<in> set (snd (sym_preproc gs fs))\"\n  assumes 1: \"p \\<in> set fs \\<Longrightarrow> thesis\"\n  assumes 2: \"\\<And>g t. g \\<in> set gs \\<Longrightarrow> p = monom_mult 1 t g \\<Longrightarrow> thesis\"\n  shows thesis", "lemma snd_sym_preproc_pmdl: \"pmdl (set gs \\<union> set (snd (sym_preproc gs fs))) = pmdl (set gs \\<union> set fs)\"", "lemma snd_sym_preproc_dgrad_set_le:\n  assumes \"dickson_grading d\"\n  shows \"dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc gs fs))))\n                        (pp_of_term ` Keys (set gs \\<union> set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list)))\"", "lemma components_snd_sym_preproc_subset:\n  \"component_of_term ` Keys (set (snd (sym_preproc gs fs))) \\<subseteq>\n          component_of_term ` Keys (set gs \\<union> set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list))\"", "lemma snd_sym_preproc_complete:\n  assumes \"v \\<in> Keys (set (snd (sym_preproc gs fs)))\" and \"g \\<in> set gs\" and \"lt g adds\\<^sub>t v\"\n  shows \"monom_mult (1::'b::semiring_1_no_zero_divisors) (pp_of_term v - lp g) g \\<in> set (snd (sym_preproc gs fs))\"", "lemma lin_redI:\n  assumes \"f \\<in> F\" and \"red_single p q f 0\"\n  shows \"lin_red F p q\"", "lemma lin_redE:\n  assumes \"lin_red F p q\"\n  obtains f::\"'t \\<Rightarrow>\\<^sub>0 'b::field\" where \"f \\<in> F\" and \"red_single p q f 0\"", "lemma lin_red_imp_red:\n  assumes \"lin_red F p q\"\n  shows \"red F p q\"", "lemma lin_red_Un: \"lin_red (F \\<union> G) p q = (lin_red F p q \\<or> lin_red G p q)\"", "lemma lin_red_imp_red_rtrancl:\n  assumes \"(lin_red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"(red F)\\<^sup>*\\<^sup>* p q\"", "lemma phull_closed_lin_red:\n  assumes \"phull B \\<subseteq> phull A\" and \"p \\<in> phull A\" and \"lin_red B p q\"\n  shows \"q \\<in> phull A\"", "lemma Macaulay_red_alt:\n  \"Macaulay_red (Keys_to_list fs) fs = filter (\\<lambda>p. lt p \\<notin> lt_set (set fs)) (Macaulay_list fs)\"", "lemma set_Macaulay_red:\n  \"set (Macaulay_red (Keys_to_list fs) fs) = set (Macaulay_list fs) - {p. lt p \\<in> lt_set (set fs)}\"", "lemma Keys_Macaulay_red: \"Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)\"", "lemma Macaulay_red_reducible:\n  assumes \"f \\<in> phull (set fs)\" and \"F \\<subseteq> set fs\" and \"lt_set F = lt_set (set fs)\"\n  shows \"(lin_red (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>* f 0\"", "lemma in_pdata_pairs_to_listI1:\n  assumes \"(f, g) \\<in> set ps\"\n  shows \"monom_mult (1 / lc (fst f)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst f)))\n              (fst f) \\<in> set (pdata_pairs_to_list ps)\" (is \"?m \\<in> _\")", "lemma in_pdata_pairs_to_listI2:\n  assumes \"(f, g) \\<in> set ps\"\n  shows \"monom_mult (1 / lc (fst g)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst g)))\n              (fst g) \\<in> set (pdata_pairs_to_list ps)\" (is \"?m \\<in> _\")", "lemma in_pdata_pairs_to_listE:\n  assumes \"h \\<in> set (pdata_pairs_to_list ps)\"\n  obtains f g where \"(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\"\n    and \"h = monom_mult (1 / lc (fst f)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst f))) (fst f)\"", "lemma f4_red_aux_not_zero: \"0 \\<notin> set (f4_red_aux bs ps)\"", "lemma f4_red_aux_irredudible:\n  assumes \"h \\<in> set (f4_red_aux bs ps)\" and \"b \\<in> set bs\" and \"fst b \\<noteq> 0\"\n  shows \"\\<not> lt (fst b) adds\\<^sub>t lt h\"", "lemma f4_red_aux_dgrad_p_set_le:\n  assumes \"dickson_grading d\"\n  shows \"dgrad_p_set_le d (set (f4_red_aux bs ps)) (args_to_set ([], bs, ps))\"", "lemma components_f4_red_aux_subset:\n  \"component_of_term ` Keys (set (f4_red_aux bs ps)) \\<subseteq> component_of_term ` Keys (args_to_set ([], bs, ps))\"", "lemma pmdl_f4_red_aux: \"set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))\"", "lemma f4_red_aux_phull_reducible:\n  assumes \"set ps \\<subseteq> set bs \\<times> set bs\"\n    and \"f \\<in> phull (set (pdata_pairs_to_list ps))\"\n  shows \"(red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0\"", "lemma fst_set_fst_f4_red: \"fst ` set (fst (f4_red gs bs ps sps data)) = set (f4_red_aux (gs @ bs) sps)\"", "lemma rcp_spec_f4_red: \"rcp_spec f4_red\"", "lemmas compl_struct_f4_red = compl_struct_rcp[OF rcp_spec_f4_red]", "lemmas compl_pmdl_f4_red = compl_pmdl_rcp[OF rcp_spec_f4_red]", "lemmas compl_conn_f4_red = compl_conn_rcp[OF rcp_spec_f4_red]", "lemma f4_sel_aux_subset: \"set (f4_sel_aux t ps) \\<subseteq> set ps\"", "lemma sel_spec_f4_sel: \"sel_spec f4_sel\"", "lemma struct_spec_f4: \"struct_spec f4_sel add_pairs_canon add_basis_canon f4_red\"", "lemmas f4_aux_simps [code] = gb_schema_aux_simps[OF struct_spec_f4, folded f4_aux_def]", "lemmas f4_simps [code] = gb_schema_direct_def[of f4_sel add_pairs_canon add_basis_canon f4_red, folded f4_def f4_aux_def]", "lemmas f4_isGB = gb_schema_direct_isGB[OF struct_spec_f4 compl_conn_f4_red, folded f4_def]", "lemmas f4_pmdl = gb_schema_direct_pmdl[OF struct_spec_f4 compl_pmdl_f4_red, folded f4_def]", "lemma (in gd_term) struct_spec_f4_punit: \"punit.struct_spec punit.f4_sel add_pairs_punit_canon punit.add_basis_canon punit.f4_red\"", "lemmas f4_aux_punit_simps [code] = punit.gb_schema_aux_simps[OF struct_spec_f4_punit, folded f4_aux_punit_def]", "lemmas f4_punit_simps [code] = punit.gb_schema_direct_def[of \"punit.f4_sel\" add_pairs_punit_canon\n                                \"punit.add_basis_canon\" \"punit.f4_red\", folded f4_punit_def f4_aux_punit_def]", "lemmas f4_punit_isGB = punit.gb_schema_direct_isGB[OF struct_spec_f4_punit punit.compl_conn_f4_red, folded f4_punit_def]", "lemmas f4_punit_pmdl = punit.gb_schema_direct_pmdl[OF struct_spec_f4_punit punit.compl_pmdl_f4_red, folded f4_punit_def]"], "translations": [["", "lemma wfp_on_ord_term_strict:\n  assumes \"dickson_grading d\"\n  shows \"wfp_on (\\<prec>\\<^sub>t) (pp_of_term -` dgrad_set d m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfp_on (\\<prec>\\<^sub>t) (pp_of_term -` dgrad_set d m)", "proof (rule wfp_onI_min)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> pp_of_term -` dgrad_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>pp_of_term -` dgrad_set d m.\n                               y \\<prec>\\<^sub>t z \\<longrightarrow>\n                               y \\<notin> Q", "fix x Q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> pp_of_term -` dgrad_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>pp_of_term -` dgrad_set d m.\n                               y \\<prec>\\<^sub>t z \\<longrightarrow>\n                               y \\<notin> Q", "assume \"x \\<in> Q\" and \"Q \\<subseteq> pp_of_term -` dgrad_set d m\""], ["proof (state)\nthis:\n  x \\<in> Q\n  Q \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> pp_of_term -` dgrad_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>pp_of_term -` dgrad_set d m.\n                               y \\<prec>\\<^sub>t z \\<longrightarrow>\n                               y \\<notin> Q", "from wf_dickson_less_v[OF assms, of m] \\<open>x \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  wfP (dickson_less_v d m)\n  x \\<in> Q", "obtain z\n    where \"z \\<in> Q\" and *: \"\\<And>y. dickson_less_v d m y z \\<Longrightarrow> y \\<notin> Q\""], ["proof (prove)\nusing this:\n  wfP (dickson_less_v d m)\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> Q;\n         \\<And>y.\n            dickson_less_v d m y z \\<Longrightarrow> y \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfE_min[to_pred], blast)"], ["proof (state)\nthis:\n  z \\<in> Q\n  dickson_less_v d m ?y94 z \\<Longrightarrow> ?y94 \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> pp_of_term -` dgrad_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>pp_of_term -` dgrad_set d m.\n                               y \\<prec>\\<^sub>t z \\<longrightarrow>\n                               y \\<notin> Q", "from this(1) \\<open>Q \\<subseteq> pp_of_term -` dgrad_set d m\\<close>"], ["proof (chain)\npicking this:\n  z \\<in> Q\n  Q \\<subseteq> pp_of_term -` dgrad_set d m", "have \"z \\<in> pp_of_term -` dgrad_set d m\""], ["proof (prove)\nusing this:\n  z \\<in> Q\n  Q \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. z \\<in> pp_of_term -` dgrad_set d m", ".."], ["proof (state)\nthis:\n  z \\<in> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> pp_of_term -` dgrad_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>pp_of_term -` dgrad_set d m.\n                               y \\<prec>\\<^sub>t z \\<longrightarrow>\n                               y \\<notin> Q", "show \"\\<exists>z\\<in>Q. \\<forall>y \\<in> pp_of_term -` dgrad_set d m. y \\<prec>\\<^sub>t z \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>pp_of_term -` dgrad_set d m.\n          y \\<prec>\\<^sub>t z \\<longrightarrow> y \\<notin> Q", "proof (intro bexI ballI impI, rule *)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> pp_of_term -` dgrad_set d m;\n        y \\<prec>\\<^sub>t ?z\\<rbrakk>\n       \\<Longrightarrow> dickson_less_v d m y z\n 2. ?z \\<in> Q", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> pp_of_term -` dgrad_set d m;\n        y \\<prec>\\<^sub>t ?z\\<rbrakk>\n       \\<Longrightarrow> dickson_less_v d m y z\n 2. ?z \\<in> Q", "assume \"y \\<in> pp_of_term -` dgrad_set d m\" and \"y \\<prec>\\<^sub>t z\""], ["proof (state)\nthis:\n  y \\<in> pp_of_term -` dgrad_set d m\n  y \\<prec>\\<^sub>t z\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> pp_of_term -` dgrad_set d m;\n        y \\<prec>\\<^sub>t ?z\\<rbrakk>\n       \\<Longrightarrow> dickson_less_v d m y z\n 2. ?z \\<in> Q", "from this(1) \\<open>z \\<in> pp_of_term -` dgrad_set d m\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> pp_of_term -` dgrad_set d m\n  z \\<in> pp_of_term -` dgrad_set d m", "have \"d (pp_of_term y) \\<le> m\" and \"d (pp_of_term z) \\<le> m\""], ["proof (prove)\nusing this:\n  y \\<in> pp_of_term -` dgrad_set d m\n  z \\<in> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. d (pp_of_term y) \\<le> m &&& d (pp_of_term z) \\<le> m", "by (simp_all add: dgrad_set_def)"], ["proof (state)\nthis:\n  d (pp_of_term y) \\<le> m\n  d (pp_of_term z) \\<le> m\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> pp_of_term -` dgrad_set d m;\n        y \\<prec>\\<^sub>t ?z\\<rbrakk>\n       \\<Longrightarrow> dickson_less_v d m y z\n 2. ?z \\<in> Q", "thus \"dickson_less_v d m y z\""], ["proof (prove)\nusing this:\n  d (pp_of_term y) \\<le> m\n  d (pp_of_term z) \\<le> m\n\ngoal (1 subgoal):\n 1. dickson_less_v d m y z", "using \\<open>y \\<prec>\\<^sub>t z\\<close>"], ["proof (prove)\nusing this:\n  d (pp_of_term y) \\<le> m\n  d (pp_of_term z) \\<le> m\n  y \\<prec>\\<^sub>t z\n\ngoal (1 subgoal):\n 1. dickson_less_v d m y z", "by (rule dickson_less_vI)"], ["proof (state)\nthis:\n  dickson_less_v d m y z\n\ngoal (1 subgoal):\n 1. z \\<in> Q", "qed fact"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y\\<in>pp_of_term -` dgrad_set d m.\n        y \\<prec>\\<^sub>t z \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sym_preproc_aux_term1_wf_on:\n  assumes \"dickson_grading d\"\n  shows \"wfp_on (\\<lambda>x y. (x, y) \\<in> sym_preproc_aux_term1 d) {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfp_on (\\<lambda>x y. (x, y) \\<in> sym_preproc_aux_term1 d)\n     {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}", "proof (rule wfp_onI_min)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> {x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>{x.\n      set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}.\n                               (y, z)\n                               \\<in> sym_preproc_aux_term1\nd \\<longrightarrow>\n                               y \\<notin> Q", "let ?B = \"pp_of_term -` dgrad_set d m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> {x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>{x.\n      set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}.\n                               (y, z)\n                               \\<in> sym_preproc_aux_term1\nd \\<longrightarrow>\n                               y \\<notin> Q", "let ?A = \"{x::(('t \\<Rightarrow>\\<^sub>0 'b) list \\<times> 't list \\<times> 't list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list). set (fst (snd (snd x))) \\<subseteq> ?B}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> {x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>{x.\n      set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}.\n                               (y, z)\n                               \\<in> sym_preproc_aux_term1\nd \\<longrightarrow>\n                               y \\<notin> Q", "have A_sub_Pow: \"set ` fst ` snd ` snd ` ?A \\<subseteq> Pow ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set `\n    fst `\n    snd `\n    snd `\n    {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\n    \\<subseteq> Pow (pp_of_term -` dgrad_set d m)", "by auto"], ["proof (state)\nthis:\n  set `\n  fst `\n  snd `\n  snd ` {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\n  \\<subseteq> Pow (pp_of_term -` dgrad_set d m)\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> {x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>{x.\n      set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}.\n                               (y, z)\n                               \\<in> sym_preproc_aux_term1\nd \\<longrightarrow>\n                               y \\<notin> Q", "fix x Q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> {x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>{x.\n      set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}.\n                               (y, z)\n                               \\<in> sym_preproc_aux_term1\nd \\<longrightarrow>\n                               y \\<notin> Q", "assume \"x \\<in> Q\" and \"Q \\<subseteq> ?A\""], ["proof (state)\nthis:\n  x \\<in> Q\n  Q \\<subseteq> {x. set (fst (snd (snd x)))\n                    \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> {x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>{x.\n      set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}.\n                               (y, z)\n                               \\<in> sym_preproc_aux_term1\nd \\<longrightarrow>\n                               y \\<notin> Q", "let ?Q = \"{ord_term_lin.Max (set (fst (snd (snd q)))) | q. q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q;\n        Q \\<subseteq> {x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>{x.\n      set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}.\n                               (y, z)\n                               \\<in> sym_preproc_aux_term1\nd \\<longrightarrow>\n                               y \\<notin> Q", "show \"\\<exists>z\\<in>Q. \\<forall>y\\<in>{x. set (fst (snd (snd x))) \\<subseteq> ?B}. (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "proof (cases \"\\<exists>z\\<in>Q. fst (snd (snd z)) = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>z\\<in>Q. fst (snd (snd z)) = [] \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "case True"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q. fst (snd (snd z)) = []\n\ngoal (2 subgoals):\n 1. \\<exists>z\\<in>Q. fst (snd (snd z)) = [] \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>z\\<in>Q. fst (snd (snd z)) = []", "obtain z where \"z \\<in> Q\" and \"fst (snd (snd z)) = []\""], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>Q. fst (snd (snd z)) = []\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> Q; fst (snd (snd z)) = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  z \\<in> Q\n  fst (snd (snd z)) = []\n\ngoal (2 subgoals):\n 1. \\<exists>z\\<in>Q. fst (snd (snd z)) = [] \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "proof (intro bexI ballI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d\\<rbrakk>\n       \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d\\<rbrakk>\n       \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "assume \"(y, z) \\<in> sym_preproc_aux_term1 d\""], ["proof (state)\nthis:\n  (y, z) \\<in> sym_preproc_aux_term1 d\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d\\<rbrakk>\n       \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "then"], ["proof (chain)\npicking this:\n  (y, z) \\<in> sym_preproc_aux_term1 d", "obtain t where \"t \\<in> set (fst (snd (snd z)))\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> sym_preproc_aux_term1 d\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        t \\<in> set (fst (snd (snd z))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding sym_preproc_aux_term1_def"], ["proof (prove)\nusing this:\n  (y, z)\n  \\<in> {((gs1, ks1, ts1, fs1), gs2, ks2, ts2, fs2).\n         \\<exists>t2\\<in>set ts2.\n            \\<forall>t1\\<in>set ts1. t1 \\<prec>\\<^sub>t t2}\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        t \\<in> set (fst (snd (snd z))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t \\<in> set (fst (snd (snd z)))\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d\\<rbrakk>\n       \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "with \\<open>fst (snd (snd z)) = []\\<close>"], ["proof (chain)\npicking this:\n  fst (snd (snd z)) = []\n  t \\<in> set (fst (snd (snd z)))", "show \"y \\<notin> Q\""], ["proof (prove)\nusing this:\n  fst (snd (snd z)) = []\n  t \\<in> set (fst (snd (snd z)))\n\ngoal (1 subgoal):\n 1. y \\<notin> Q", "by simp"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal (1 subgoal):\n 1. z \\<in> Q", "qed fact"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                        \\<subseteq> pp_of_term -` dgrad_set d m}.\n        (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow> y \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = [])\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "hence *: \"q \\<in> Q \\<Longrightarrow> fst (snd (snd q)) \\<noteq> []\" for q"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = [])\n\ngoal (1 subgoal):\n 1. q \\<in> Q \\<Longrightarrow> fst (snd (snd q)) \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  ?q94 \\<in> Q \\<Longrightarrow> fst (snd (snd ?q94)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "with \\<open>x \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> Q\n  ?q94 \\<in> Q \\<Longrightarrow> fst (snd (snd ?q94)) \\<noteq> []", "have \"fst (snd (snd x)) \\<noteq> []\""], ["proof (prove)\nusing this:\n  x \\<in> Q\n  ?q94 \\<in> Q \\<Longrightarrow> fst (snd (snd ?q94)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. fst (snd (snd x)) \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  fst (snd (snd x)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"wfp_on (\\<prec>\\<^sub>t) ?B\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. wfp_on (\\<prec>\\<^sub>t) (pp_of_term -` dgrad_set d m)", "by (rule wfp_on_ord_term_strict)"], ["proof (state)\nthis:\n  wfp_on (\\<prec>\\<^sub>t) (pp_of_term -` dgrad_set d m)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  wfp_on (\\<prec>\\<^sub>t) (pp_of_term -` dgrad_set d m)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "from \\<open>x \\<in> Q\\<close> \\<open>fst (snd (snd x)) \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> Q\n  fst (snd (snd x)) \\<noteq> []", "have \"ord_term_lin.Max (set (fst (snd (snd x)))) \\<in> ?Q\""], ["proof (prove)\nusing this:\n  x \\<in> Q\n  fst (snd (snd x)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. ord_term_lin.Max (set (fst (snd (snd x))))\n    \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n           q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}", "by blast"], ["proof (state)\nthis:\n  ord_term_lin.Max (set (fst (snd (snd x))))\n  \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n         q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  ord_term_lin.Max (set (fst (snd (snd x))))\n  \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n         q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "have \"?Q \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n     q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n    \\<subseteq> pp_of_term -` dgrad_set d m", "proof (rule, simp, elim exE conjE, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a aa ab b.\n       \\<lbrakk>x = ord_term_lin.Max (set ab); ab \\<noteq> [];\n        (a, aa, ab, b) \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> pp_of_term (ord_term_lin.Max (set ab))\n                         \\<in> dgrad_set d m", "fix a b c d0"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a aa ab b.\n       \\<lbrakk>x = ord_term_lin.Max (set ab); ab \\<noteq> [];\n        (a, aa, ab, b) \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> pp_of_term (ord_term_lin.Max (set ab))\n                         \\<in> dgrad_set d m", "assume \"(a, b, c, d0) \\<in> Q\" and \"c \\<noteq> []\""], ["proof (state)\nthis:\n  (a, b, c, d0) \\<in> Q\n  c \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>x a aa ab b.\n       \\<lbrakk>x = ord_term_lin.Max (set ab); ab \\<noteq> [];\n        (a, aa, ab, b) \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> pp_of_term (ord_term_lin.Max (set ab))\n                         \\<in> dgrad_set d m", "from this(1) \\<open>Q \\<subseteq> ?A\\<close>"], ["proof (chain)\npicking this:\n  (a, b, c, d0) \\<in> Q\n  Q \\<subseteq> {x. set (fst (snd (snd x)))\n                    \\<subseteq> pp_of_term -` dgrad_set d m}", "have \"(a, b, c, d0) \\<in> ?A\""], ["proof (prove)\nusing this:\n  (a, b, c, d0) \\<in> Q\n  Q \\<subseteq> {x. set (fst (snd (snd x)))\n                    \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. (a, b, c, d0)\n    \\<in> {x. set (fst (snd (snd x)))\n              \\<subseteq> pp_of_term -` dgrad_set d m}", ".."], ["proof (state)\nthis:\n  (a, b, c, d0)\n  \\<in> {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x a aa ab b.\n       \\<lbrakk>x = ord_term_lin.Max (set ab); ab \\<noteq> [];\n        (a, aa, ab, b) \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> pp_of_term (ord_term_lin.Max (set ab))\n                         \\<in> dgrad_set d m", "hence \"pp_of_term ` set c \\<subseteq> dgrad_set d m\""], ["proof (prove)\nusing this:\n  (a, b, c, d0)\n  \\<in> {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. pp_of_term ` set c \\<subseteq> dgrad_set d m", "by auto"], ["proof (state)\nthis:\n  pp_of_term ` set c \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x a aa ab b.\n       \\<lbrakk>x = ord_term_lin.Max (set ab); ab \\<noteq> [];\n        (a, aa, ab, b) \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> pp_of_term (ord_term_lin.Max (set ab))\n                         \\<in> dgrad_set d m", "moreover"], ["proof (state)\nthis:\n  pp_of_term ` set c \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x a aa ab b.\n       \\<lbrakk>x = ord_term_lin.Max (set ab); ab \\<noteq> [];\n        (a, aa, ab, b) \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> pp_of_term (ord_term_lin.Max (set ab))\n                         \\<in> dgrad_set d m", "have \"pp_of_term (ord_term_lin.Max (set c)) \\<in> pp_of_term ` set c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pp_of_term (ord_term_lin.Max (set c)) \\<in> pp_of_term ` set c", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. pp_of_term (ord_term_lin.Max (set c)) = pp_of_term ?x\n 2. ?x \\<in> set c", "from \\<open>c \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> []", "show \"ord_term_lin.Max (set c) \\<in> set c\""], ["proof (prove)\nusing this:\n  c \\<noteq> []\n\ngoal (1 subgoal):\n 1. ord_term_lin.Max (set c) \\<in> set c", "by simp"], ["proof (state)\nthis:\n  ord_term_lin.Max (set c) \\<in> set c\n\ngoal (1 subgoal):\n 1. pp_of_term (ord_term_lin.Max (set c)) =\n    pp_of_term (ord_term_lin.Max (set c))", "qed (fact refl)"], ["proof (state)\nthis:\n  pp_of_term (ord_term_lin.Max (set c)) \\<in> pp_of_term ` set c\n\ngoal (1 subgoal):\n 1. \\<And>x a aa ab b.\n       \\<lbrakk>x = ord_term_lin.Max (set ab); ab \\<noteq> [];\n        (a, aa, ab, b) \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> pp_of_term (ord_term_lin.Max (set ab))\n                         \\<in> dgrad_set d m", "ultimately"], ["proof (chain)\npicking this:\n  pp_of_term ` set c \\<subseteq> dgrad_set d m\n  pp_of_term (ord_term_lin.Max (set c)) \\<in> pp_of_term ` set c", "show \"pp_of_term (ord_term_lin.Max (set c)) \\<in> dgrad_set d m\""], ["proof (prove)\nusing this:\n  pp_of_term ` set c \\<subseteq> dgrad_set d m\n  pp_of_term (ord_term_lin.Max (set c)) \\<in> pp_of_term ` set c\n\ngoal (1 subgoal):\n 1. pp_of_term (ord_term_lin.Max (set c)) \\<in> dgrad_set d m", ".."], ["proof (state)\nthis:\n  pp_of_term (ord_term_lin.Max (set c)) \\<in> dgrad_set d m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n   q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n  \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "ultimately"], ["proof (chain)\npicking this:\n  wfp_on (\\<prec>\\<^sub>t) (pp_of_term -` dgrad_set d m)\n  ord_term_lin.Max (set (fst (snd (snd x))))\n  \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n         q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n  {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n   q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n  \\<subseteq> pp_of_term -` dgrad_set d m", "obtain t where \"t \\<in> ?Q\" and min: \"\\<And>s. s \\<prec>\\<^sub>t t \\<Longrightarrow> s \\<notin> ?Q\""], ["proof (prove)\nusing this:\n  wfp_on (\\<prec>\\<^sub>t) (pp_of_term -` dgrad_set d m)\n  ord_term_lin.Max (set (fst (snd (snd x))))\n  \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n         q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n  {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n   q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n  \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n                          q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []};\n         \\<And>s.\n            s \\<prec>\\<^sub>t t \\<Longrightarrow>\n            s \\<notin> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n                        q \\<in> Q \\<and>\n                        fst (snd (snd q)) \\<noteq> []}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfp_onE_min) blast"], ["proof (state)\nthis:\n  t \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n           q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n  ?s94 \\<prec>\\<^sub>t t \\<Longrightarrow>\n  ?s94\n  \\<notin> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n            q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  t \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n           q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}", "obtain z where \"z \\<in> Q\" and \"fst (snd (snd z)) \\<noteq> []\"\n      and t: \"t = ord_term_lin.Max (set (fst (snd (snd z))))\""], ["proof (prove)\nusing this:\n  t \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n           q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> Q; fst (snd (snd z)) \\<noteq> [];\n         t = ord_term_lin.Max (set (fst (snd (snd z))))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  z \\<in> Q\n  fst (snd (snd z)) \\<noteq> []\n  t = ord_term_lin.Max (set (fst (snd (snd z))))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>z\\<in>Q. fst (snd (snd z)) = []) \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m}.\n          (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow>\n          y \\<notin> Q", "proof (intro bexI ballI impI, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "assume \"y \\<in> ?A\" and \"(y, z) \\<in> sym_preproc_aux_term1 d\" and \"y \\<in> Q\""], ["proof (state)\nthis:\n  y \\<in> {x. set (fst (snd (snd x)))\n              \\<subseteq> pp_of_term -` dgrad_set d m}\n  (y, z) \\<in> sym_preproc_aux_term1 d\n  y \\<in> Q\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "from this(2)"], ["proof (chain)\npicking this:\n  (y, z) \\<in> sym_preproc_aux_term1 d", "obtain t' where \"t' \\<in> set (fst (snd (snd z)))\"\n        and **: \"\\<And>s. s \\<in> set (fst (snd (snd y))) \\<Longrightarrow> s \\<prec>\\<^sub>t t'\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> sym_preproc_aux_term1 d\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>t' \\<in> set (fst (snd (snd z)));\n         \\<And>s.\n            s \\<in> set (fst (snd (snd y))) \\<Longrightarrow>\n            s \\<prec>\\<^sub>t t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sym_preproc_aux_term1_def"], ["proof (prove)\nusing this:\n  (y, z)\n  \\<in> {((gs1, ks1, ts1, fs1), gs2, ks2, ts2, fs2).\n         \\<exists>t2\\<in>set ts2.\n            \\<forall>t1\\<in>set ts1. t1 \\<prec>\\<^sub>t t2}\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>t' \\<in> set (fst (snd (snd z)));\n         \\<And>s.\n            s \\<in> set (fst (snd (snd y))) \\<Longrightarrow>\n            s \\<prec>\\<^sub>t t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t' \\<in> set (fst (snd (snd z)))\n  ?s94 \\<in> set (fst (snd (snd y))) \\<Longrightarrow>\n  ?s94 \\<prec>\\<^sub>t t'\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "from \\<open>y \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> Q", "have \"fst (snd (snd y)) \\<noteq> []\""], ["proof (prove)\nusing this:\n  y \\<in> Q\n\ngoal (1 subgoal):\n 1. fst (snd (snd y)) \\<noteq> []", "by (rule *)"], ["proof (state)\nthis:\n  fst (snd (snd y)) \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "with \\<open>y \\<in> Q\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> Q\n  fst (snd (snd y)) \\<noteq> []", "have \"ord_term_lin.Max (set (fst (snd (snd y)))) \\<in> ?Q\" (is \"?s \\<in> _\")"], ["proof (prove)\nusing this:\n  y \\<in> Q\n  fst (snd (snd y)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. ord_term_lin.Max (set (fst (snd (snd y))))\n    \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n           q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}", "by blast"], ["proof (state)\nthis:\n  ord_term_lin.Max (set (fst (snd (snd y))))\n  \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n         q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "from \\<open>fst (snd (snd y)) \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  fst (snd (snd y)) \\<noteq> []", "have \"?s \\<in> set (fst (snd (snd y)))\""], ["proof (prove)\nusing this:\n  fst (snd (snd y)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. ord_term_lin.Max (set (fst (snd (snd y)))) \\<in> set (fst (snd (snd y)))", "by simp"], ["proof (state)\nthis:\n  ord_term_lin.Max (set (fst (snd (snd y)))) \\<in> set (fst (snd (snd y)))\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "hence \"?s \\<prec>\\<^sub>t t'\""], ["proof (prove)\nusing this:\n  ord_term_lin.Max (set (fst (snd (snd y)))) \\<in> set (fst (snd (snd y)))\n\ngoal (1 subgoal):\n 1. ord_term_lin.Max (set (fst (snd (snd y)))) \\<prec>\\<^sub>t t'", "by (rule **)"], ["proof (state)\nthis:\n  ord_term_lin.Max (set (fst (snd (snd y)))) \\<prec>\\<^sub>t t'\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "also"], ["proof (state)\nthis:\n  ord_term_lin.Max (set (fst (snd (snd y)))) \\<prec>\\<^sub>t t'\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "from \\<open>t' \\<in> set (fst (snd (snd z)))\\<close>"], ["proof (chain)\npicking this:\n  t' \\<in> set (fst (snd (snd z)))", "have \"t' \\<preceq>\\<^sub>t t\""], ["proof (prove)\nusing this:\n  t' \\<in> set (fst (snd (snd z)))\n\ngoal (1 subgoal):\n 1. t' \\<preceq>\\<^sub>t t", "unfolding t"], ["proof (prove)\nusing this:\n  t' \\<in> set (fst (snd (snd z)))\n\ngoal (1 subgoal):\n 1. t' \\<preceq>\\<^sub>t ord_term_lin.Max (set (fst (snd (snd z))))", "using \\<open>fst (snd (snd z)) \\<noteq> []\\<close>"], ["proof (prove)\nusing this:\n  t' \\<in> set (fst (snd (snd z)))\n  fst (snd (snd z)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. t' \\<preceq>\\<^sub>t ord_term_lin.Max (set (fst (snd (snd z))))", "by simp"], ["proof (state)\nthis:\n  t' \\<preceq>\\<^sub>t t\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "finally"], ["proof (chain)\npicking this:\n  ord_term_lin.Max (set (fst (snd (snd y)))) \\<prec>\\<^sub>t t", "have \"?s \\<notin> ?Q\""], ["proof (prove)\nusing this:\n  ord_term_lin.Max (set (fst (snd (snd y)))) \\<prec>\\<^sub>t t\n\ngoal (1 subgoal):\n 1. ord_term_lin.Max (set (fst (snd (snd y))))\n    \\<notin> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n              q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}", "by (rule min)"], ["proof (state)\nthis:\n  ord_term_lin.Max (set (fst (snd (snd y))))\n  \\<notin> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n            q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> {x. set (fst (snd (snd x)))\n                            \\<subseteq> pp_of_term -` dgrad_set d m};\n        (y, ?z) \\<in> sym_preproc_aux_term1 d; y \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. ?z \\<in> Q", "from this \\<open>?s \\<in> ?Q\\<close>"], ["proof (chain)\npicking this:\n  ord_term_lin.Max (set (fst (snd (snd y))))\n  \\<notin> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n            q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n  ord_term_lin.Max (set (fst (snd (snd y))))\n  \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n         q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}", "show False"], ["proof (prove)\nusing this:\n  ord_term_lin.Max (set (fst (snd (snd y))))\n  \\<notin> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n            q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n  ord_term_lin.Max (set (fst (snd (snd y))))\n  \\<in> {ord_term_lin.Max (set (fst (snd (snd q)))) |q.\n         q \\<in> Q \\<and> fst (snd (snd q)) \\<noteq> []}\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. z \\<in> Q", "qed fact"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                        \\<subseteq> pp_of_term -` dgrad_set d m}.\n        (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y\\<in>{x. set (fst (snd (snd x)))\n                        \\<subseteq> pp_of_term -` dgrad_set d m}.\n        (y, z) \\<in> sym_preproc_aux_term1 d \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sym_preproc_aux_term_wf:\n  assumes \"dickson_grading d\"\n  shows \"wf (sym_preproc_aux_term d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (sym_preproc_aux_term d)", "proof (rule wfI_min)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "fix x::\"(('t \\<Rightarrow>\\<^sub>0 'b) list \\<times> 't list \\<times> 't list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list)\" and Q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "assume \"x \\<in> Q\""], ["proof (state)\nthis:\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "let ?A = \"Keys (set (fst x)) \\<union> set (fst (snd (snd x)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "have \"finite ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Keys (set (fst x)) \\<union> set (fst (snd (snd x))))", "by (simp add: finite_Keys)"], ["proof (state)\nthis:\n  finite (Keys (set (fst x)) \\<union> set (fst (snd (snd x))))\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "hence \"finite (pp_of_term ` ?A)\""], ["proof (prove)\nusing this:\n  finite (Keys (set (fst x)) \\<union> set (fst (snd (snd x))))\n\ngoal (1 subgoal):\n 1. finite\n     (pp_of_term ` (Keys (set (fst x)) \\<union> set (fst (snd (snd x)))))", "by (rule finite_imageI)"], ["proof (state)\nthis:\n  finite\n   (pp_of_term ` (Keys (set (fst x)) \\<union> set (fst (snd (snd x)))))\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "then"], ["proof (chain)\npicking this:\n  finite\n   (pp_of_term ` (Keys (set (fst x)) \\<union> set (fst (snd (snd x)))))", "obtain m where \"pp_of_term ` ?A \\<subseteq> dgrad_set d m\""], ["proof (prove)\nusing this:\n  finite\n   (pp_of_term ` (Keys (set (fst x)) \\<union> set (fst (snd (snd x)))))\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        pp_of_term ` (Keys (set (fst x)) \\<union> set (fst (snd (snd x))))\n        \\<subseteq> dgrad_set d m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_set_exhaust)"], ["proof (state)\nthis:\n  pp_of_term ` (Keys (set (fst x)) \\<union> set (fst (snd (snd x))))\n  \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "hence A: \"?A \\<subseteq> pp_of_term -` dgrad_set d m\""], ["proof (prove)\nusing this:\n  pp_of_term ` (Keys (set (fst x)) \\<union> set (fst (snd (snd x))))\n  \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. Keys (set (fst x)) \\<union> set (fst (snd (snd x)))\n    \\<subseteq> pp_of_term -` dgrad_set d m", "by blast"], ["proof (state)\nthis:\n  Keys (set (fst x)) \\<union> set (fst (snd (snd x)))\n  \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "let ?B = \"pp_of_term -` dgrad_set d m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "let ?Q = \"{q \\<in> Q. Keys (set (fst q)) \\<union> set (fst (snd (snd q))) \\<subseteq> ?B}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"wfp_on (\\<lambda>x y. (x, y) \\<in> sym_preproc_aux_term1 d) {x. set (fst (snd (snd x))) \\<subseteq> ?B}\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. wfp_on (\\<lambda>x y. (x, y) \\<in> sym_preproc_aux_term1 d)\n     {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}", "by (rule sym_preproc_aux_term1_wf_on)"], ["proof (state)\nthis:\n  wfp_on (\\<lambda>x y. (x, y) \\<in> sym_preproc_aux_term1 d)\n   {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  wfp_on (\\<lambda>x y. (x, y) \\<in> sym_preproc_aux_term1 d)\n   {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "from \\<open>x \\<in> Q\\<close> A"], ["proof (chain)\npicking this:\n  x \\<in> Q\n  Keys (set (fst x)) \\<union> set (fst (snd (snd x)))\n  \\<subseteq> pp_of_term -` dgrad_set d m", "have \"x \\<in> ?Q\""], ["proof (prove)\nusing this:\n  x \\<in> Q\n  Keys (set (fst x)) \\<union> set (fst (snd (snd x)))\n  \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. x \\<in> {q \\<in> Q.\n             Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n             \\<subseteq> pp_of_term -` dgrad_set d m}", "by simp"], ["proof (state)\nthis:\n  x \\<in> {q \\<in> Q.\n           Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n           \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  x \\<in> {q \\<in> Q.\n           Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n           \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "have \"?Q \\<subseteq> {x. set (fst (snd (snd x))) \\<subseteq> ?B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {q \\<in> Q.\n     Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n     \\<subseteq> pp_of_term -` dgrad_set d m}\n    \\<subseteq> {x. set (fst (snd (snd x)))\n                    \\<subseteq> pp_of_term -` dgrad_set d m}", "by auto"], ["proof (state)\nthis:\n  {q \\<in> Q.\n   Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n   \\<subseteq> pp_of_term -` dgrad_set d m}\n  \\<subseteq> {x. set (fst (snd (snd x)))\n                  \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "ultimately"], ["proof (chain)\npicking this:\n  wfp_on (\\<lambda>x y. (x, y) \\<in> sym_preproc_aux_term1 d)\n   {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\n  x \\<in> {q \\<in> Q.\n           Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n           \\<subseteq> pp_of_term -` dgrad_set d m}\n  {q \\<in> Q.\n   Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n   \\<subseteq> pp_of_term -` dgrad_set d m}\n  \\<subseteq> {x. set (fst (snd (snd x)))\n                  \\<subseteq> pp_of_term -` dgrad_set d m}", "obtain z where \"z \\<in> ?Q\"\n    and *: \"\\<And>y. (y, z) \\<in> sym_preproc_aux_term1 d \\<Longrightarrow> y \\<notin> ?Q\""], ["proof (prove)\nusing this:\n  wfp_on (\\<lambda>x y. (x, y) \\<in> sym_preproc_aux_term1 d)\n   {x. set (fst (snd (snd x))) \\<subseteq> pp_of_term -` dgrad_set d m}\n  x \\<in> {q \\<in> Q.\n           Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n           \\<subseteq> pp_of_term -` dgrad_set d m}\n  {q \\<in> Q.\n   Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n   \\<subseteq> pp_of_term -` dgrad_set d m}\n  \\<subseteq> {x. set (fst (snd (snd x)))\n                  \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> {q \\<in> Q.\n                          Keys (set (fst q)) \\<union>\n                          set (fst (snd (snd q)))\n                          \\<subseteq> pp_of_term -` dgrad_set d m};\n         \\<And>y.\n            (y, z) \\<in> sym_preproc_aux_term1 d \\<Longrightarrow>\n            y \\<notin> {q \\<in> Q.\n                        Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n                        \\<subseteq> pp_of_term -` dgrad_set d m}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfp_onE_min) blast"], ["proof (state)\nthis:\n  z \\<in> {q \\<in> Q.\n           Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n           \\<subseteq> pp_of_term -` dgrad_set d m}\n  (?y95, z) \\<in> sym_preproc_aux_term1 d \\<Longrightarrow>\n  ?y95\n  \\<notin> {q \\<in> Q.\n            Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n            \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  z \\<in> {q \\<in> Q.\n           Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n           \\<subseteq> pp_of_term -` dgrad_set d m}", "have \"z \\<in> Q\" and \"Keys (set (fst z)) \\<union> set (fst (snd (snd z))) \\<subseteq> ?B\""], ["proof (prove)\nusing this:\n  z \\<in> {q \\<in> Q.\n           Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n           \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. z \\<in> Q &&&\n    Keys (set (fst z)) \\<union> set (fst (snd (snd z)))\n    \\<subseteq> pp_of_term -` dgrad_set d m", "by simp_all"], ["proof (state)\nthis:\n  z \\<in> Q\n  Keys (set (fst z)) \\<union> set (fst (snd (snd z)))\n  \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "from this(2)"], ["proof (chain)\npicking this:\n  Keys (set (fst z)) \\<union> set (fst (snd (snd z)))\n  \\<subseteq> pp_of_term -` dgrad_set d m", "have a: \"pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z)))) \\<subseteq> dgrad_set d m\""], ["proof (prove)\nusing this:\n  Keys (set (fst z)) \\<union> set (fst (snd (snd z)))\n  \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (1 subgoal):\n 1. pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z))))\n    \\<subseteq> dgrad_set d m", "by blast"], ["proof (state)\nthis:\n  pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z))))\n  \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow>\n             y \\<notin> Q", "show \"\\<exists>z\\<in>Q. \\<forall>y. (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow> y \\<notin> Q", "proof (intro bexI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       (y, ?z) \\<in> sym_preproc_aux_term d \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       (y, ?z) \\<in> sym_preproc_aux_term d \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "assume \"(y, z) \\<in> sym_preproc_aux_term d\""], ["proof (state)\nthis:\n  (y, z) \\<in> sym_preproc_aux_term d\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       (y, ?z) \\<in> sym_preproc_aux_term d \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "hence \"(y, z) \\<in> sym_preproc_aux_term1 d\" and \"(y, z) \\<in> sym_preproc_aux_term2 d\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> sym_preproc_aux_term d\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> sym_preproc_aux_term1 d &&&\n    (y, z) \\<in> sym_preproc_aux_term2 d", "by (simp_all add: sym_preproc_aux_term_def)"], ["proof (state)\nthis:\n  (y, z) \\<in> sym_preproc_aux_term1 d\n  (y, z) \\<in> sym_preproc_aux_term2 d\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       (y, ?z) \\<in> sym_preproc_aux_term d \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "from this(2)"], ["proof (chain)\npicking this:\n  (y, z) \\<in> sym_preproc_aux_term2 d", "have \"fst y = fst z\"\n      and \"dgrad_set_le d (pp_of_term ` set (fst (snd (snd y)))) (pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z)))))\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> sym_preproc_aux_term2 d\n\ngoal (1 subgoal):\n 1. fst y = fst z &&&\n    dgrad_set_le d (pp_of_term ` set (fst (snd (snd y))))\n     (pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z)))))", "by (auto simp add: sym_preproc_aux_term2_def)"], ["proof (state)\nthis:\n  fst y = fst z\n  dgrad_set_le d (pp_of_term ` set (fst (snd (snd y))))\n   (pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z)))))\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       (y, ?z) \\<in> sym_preproc_aux_term d \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "from this(2) a"], ["proof (chain)\npicking this:\n  dgrad_set_le d (pp_of_term ` set (fst (snd (snd y))))\n   (pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z)))))\n  pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z))))\n  \\<subseteq> dgrad_set d m", "have \"pp_of_term ` (set (fst (snd (snd y)))) \\<subseteq> dgrad_set d m\""], ["proof (prove)\nusing this:\n  dgrad_set_le d (pp_of_term ` set (fst (snd (snd y))))\n   (pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z)))))\n  pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z))))\n  \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. pp_of_term ` set (fst (snd (snd y))) \\<subseteq> dgrad_set d m", "by (rule dgrad_set_le_dgrad_set)"], ["proof (state)\nthis:\n  pp_of_term ` set (fst (snd (snd y))) \\<subseteq> dgrad_set d m\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       (y, ?z) \\<in> sym_preproc_aux_term d \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "hence \"Keys (set (fst y)) \\<union> set (fst (snd (snd y))) \\<subseteq> ?B\""], ["proof (prove)\nusing this:\n  pp_of_term ` set (fst (snd (snd y))) \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. Keys (set (fst y)) \\<union> set (fst (snd (snd y)))\n    \\<subseteq> pp_of_term -` dgrad_set d m", "using a"], ["proof (prove)\nusing this:\n  pp_of_term ` set (fst (snd (snd y))) \\<subseteq> dgrad_set d m\n  pp_of_term ` (Keys (set (fst z)) \\<union> set (fst (snd (snd z))))\n  \\<subseteq> dgrad_set d m\n\ngoal (1 subgoal):\n 1. Keys (set (fst y)) \\<union> set (fst (snd (snd y)))\n    \\<subseteq> pp_of_term -` dgrad_set d m", "by (auto simp add: \\<open>fst y = fst z\\<close>)"], ["proof (state)\nthis:\n  Keys (set (fst y)) \\<union> set (fst (snd (snd y)))\n  \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       (y, ?z) \\<in> sym_preproc_aux_term d \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "moreover"], ["proof (state)\nthis:\n  Keys (set (fst y)) \\<union> set (fst (snd (snd y)))\n  \\<subseteq> pp_of_term -` dgrad_set d m\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       (y, ?z) \\<in> sym_preproc_aux_term d \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "from \\<open>(y, z) \\<in> sym_preproc_aux_term1 d\\<close>"], ["proof (chain)\npicking this:\n  (y, z) \\<in> sym_preproc_aux_term1 d", "have \"y \\<notin> ?Q\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> sym_preproc_aux_term1 d\n\ngoal (1 subgoal):\n 1. y \\<notin> {q \\<in> Q.\n                Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n                \\<subseteq> pp_of_term -` dgrad_set d m}", "by (rule *)"], ["proof (state)\nthis:\n  y \\<notin> {q \\<in> Q.\n              Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n              \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       (y, ?z) \\<in> sym_preproc_aux_term d \\<Longrightarrow> y \\<notin> Q\n 2. ?z \\<in> Q", "ultimately"], ["proof (chain)\npicking this:\n  Keys (set (fst y)) \\<union> set (fst (snd (snd y)))\n  \\<subseteq> pp_of_term -` dgrad_set d m\n  y \\<notin> {q \\<in> Q.\n              Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n              \\<subseteq> pp_of_term -` dgrad_set d m}", "show \"y \\<notin> Q\""], ["proof (prove)\nusing this:\n  Keys (set (fst y)) \\<union> set (fst (snd (snd y)))\n  \\<subseteq> pp_of_term -` dgrad_set d m\n  y \\<notin> {q \\<in> Q.\n              Keys (set (fst q)) \\<union> set (fst (snd (snd q)))\n              \\<subseteq> pp_of_term -` dgrad_set d m}\n\ngoal (1 subgoal):\n 1. y \\<notin> Q", "by simp"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal (1 subgoal):\n 1. z \\<in> Q", "qed fact"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        (y, z) \\<in> sym_preproc_aux_term d \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec sym_preproc_addnew :: \"('t \\<Rightarrow>\\<^sub>0 'b::semiring_1) list \\<Rightarrow> 't list \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) list \\<Rightarrow> 't \\<Rightarrow>\n                              ('t list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list)\" where\n  \"sym_preproc_addnew [] vs fs _ = (vs, fs)\"|\n  \"sym_preproc_addnew (g # gs) vs fs v =\n    (if lt g adds\\<^sub>t v then\n      (let f = monom_mult 1 (pp_of_term v - lp g) g in\n        sym_preproc_addnew gs (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f))) (insert_list f fs) v\n      )\n    else\n      sym_preproc_addnew gs vs fs v\n    )\""], ["", "lemma fst_sym_preproc_addnew_less:\n  assumes \"\\<And>u. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\"\n    and \"u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\"\n  shows \"u \\<prec>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "using assms"], ["proof (prove)\nusing this:\n  ?u95 \\<in> set vs \\<Longrightarrow> ?u95 \\<prec>\\<^sub>t v\n  u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "proof (induct gs arbitrary: fs vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>fs vs.\n       \\<lbrakk>\\<And>u.\n                   u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        u \\<in> set (fst (sym_preproc_addnew [] vs fs v))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. \\<And>a gs fs vs.\n       \\<lbrakk>\\<And>fs vs.\n                   \\<lbrakk>\\<And>u.\n                               u \\<in> set vs \\<Longrightarrow>\n                               u \\<prec>\\<^sub>t v;\n                    u \\<in> set (fst (sym_preproc_addnew gs vs fs\n v))\\<rbrakk>\n                   \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        \\<And>u. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        u \\<in> set (fst (sym_preproc_addnew (a # gs) vs fs v))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "case Nil"], ["proof (state)\nthis:\n  ?u95 \\<in> set vs \\<Longrightarrow> ?u95 \\<prec>\\<^sub>t v\n  u \\<in> set (fst (sym_preproc_addnew [] vs fs v))\n\ngoal (2 subgoals):\n 1. \\<And>fs vs.\n       \\<lbrakk>\\<And>u.\n                   u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        u \\<in> set (fst (sym_preproc_addnew [] vs fs v))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. \\<And>a gs fs vs.\n       \\<lbrakk>\\<And>fs vs.\n                   \\<lbrakk>\\<And>u.\n                               u \\<in> set vs \\<Longrightarrow>\n                               u \\<prec>\\<^sub>t v;\n                    u \\<in> set (fst (sym_preproc_addnew gs vs fs\n v))\\<rbrakk>\n                   \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        \\<And>u. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        u \\<in> set (fst (sym_preproc_addnew (a # gs) vs fs v))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "from Nil(2)"], ["proof (chain)\npicking this:\n  u \\<in> set (fst (sym_preproc_addnew [] vs fs v))", "have \"u \\<in> set vs\""], ["proof (prove)\nusing this:\n  u \\<in> set (fst (sym_preproc_addnew [] vs fs v))\n\ngoal (1 subgoal):\n 1. u \\<in> set vs", "by simp"], ["proof (state)\nthis:\n  u \\<in> set vs\n\ngoal (2 subgoals):\n 1. \\<And>fs vs.\n       \\<lbrakk>\\<And>u.\n                   u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        u \\<in> set (fst (sym_preproc_addnew [] vs fs v))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. \\<And>a gs fs vs.\n       \\<lbrakk>\\<And>fs vs.\n                   \\<lbrakk>\\<And>u.\n                               u \\<in> set vs \\<Longrightarrow>\n                               u \\<prec>\\<^sub>t v;\n                    u \\<in> set (fst (sym_preproc_addnew gs vs fs\n v))\\<rbrakk>\n                   \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        \\<And>u. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        u \\<in> set (fst (sym_preproc_addnew (a # gs) vs fs v))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "thus ?case"], ["proof (prove)\nusing this:\n  u \\<in> set vs\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "by (rule Nil(1))"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>a gs fs vs.\n       \\<lbrakk>\\<And>fs vs.\n                   \\<lbrakk>\\<And>u.\n                               u \\<in> set vs \\<Longrightarrow>\n                               u \\<prec>\\<^sub>t v;\n                    u \\<in> set (fst (sym_preproc_addnew gs vs fs\n v))\\<rbrakk>\n                   \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        \\<And>u. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        u \\<in> set (fst (sym_preproc_addnew (a # gs) vs fs v))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a gs fs vs.\n       \\<lbrakk>\\<And>fs vs.\n                   \\<lbrakk>\\<And>u.\n                               u \\<in> set vs \\<Longrightarrow>\n                               u \\<prec>\\<^sub>t v;\n                    u \\<in> set (fst (sym_preproc_addnew gs vs fs\n v))\\<rbrakk>\n                   \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        \\<And>u. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        u \\<in> set (fst (sym_preproc_addnew (a # gs) vs fs v))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "case (Cons g gs)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>u. u \\<in> set ?vs95 \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n   u \\<in> set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v))\\<rbrakk>\n  \\<Longrightarrow> u \\<prec>\\<^sub>t v\n  ?u95 \\<in> set vs \\<Longrightarrow> ?u95 \\<prec>\\<^sub>t v\n  u \\<in> set (fst (sym_preproc_addnew (g # gs) vs fs v))\n\ngoal (1 subgoal):\n 1. \\<And>a gs fs vs.\n       \\<lbrakk>\\<And>fs vs.\n                   \\<lbrakk>\\<And>u.\n                               u \\<in> set vs \\<Longrightarrow>\n                               u \\<prec>\\<^sub>t v;\n                    u \\<in> set (fst (sym_preproc_addnew gs vs fs\n v))\\<rbrakk>\n                   \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        \\<And>u. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v;\n        u \\<in> set (fst (sym_preproc_addnew (a # gs) vs fs v))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "from Cons(3)"], ["proof (chain)\npicking this:\n  u \\<in> set (fst (sym_preproc_addnew (g # gs) vs fs v))", "show ?case"], ["proof (prove)\nusing this:\n  u \\<in> set (fst (sym_preproc_addnew (g # gs) vs fs v))\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "proof (simp add: Let_def split: if_splits)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs\n                        (merge_wrt (\\<succ>\\<^sub>t) vs\n                          (keys_to_list\n                            (tail\n                              (monom_mult (1::'b) (pp_of_term v - lp g)\n                                g))))\n                        (insert_list\n                          (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                        v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v", "let ?t = \"pp_of_term v - lp g\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs\n                        (merge_wrt (\\<succ>\\<^sub>t) vs\n                          (keys_to_list\n                            (tail\n                              (monom_mult (1::'b) (pp_of_term v - lp g)\n                                g))))\n                        (insert_list\n                          (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                        v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v", "assume \"lt g adds\\<^sub>t v\""], ["proof (state)\nthis:\n  lt g adds\\<^sub>t v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs\n                        (merge_wrt (\\<succ>\\<^sub>t) vs\n                          (keys_to_list\n                            (tail\n                              (monom_mult (1::'b) (pp_of_term v - lp g)\n                                g))))\n                        (insert_list\n                          (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                        v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v", "assume \"u \\<in> set (fst (sym_preproc_addnew gs\n                                (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail (monom_mult 1 ?t g))))\n                                (insert_list (monom_mult 1 ?t g) fs) v))\""], ["proof (state)\nthis:\n  u \\<in> set (fst (sym_preproc_addnew gs\n                     (merge_wrt (\\<succ>\\<^sub>t) vs\n                       (keys_to_list\n                         (tail\n                           (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                     (insert_list\n                       (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                     v))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs\n                        (merge_wrt (\\<succ>\\<^sub>t) vs\n                          (keys_to_list\n                            (tail\n                              (monom_mult (1::'b) (pp_of_term v - lp g)\n                                g))))\n                        (insert_list\n                          (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                        v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v", "with _"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  u \\<in> set (fst (sym_preproc_addnew gs\n                     (merge_wrt (\\<succ>\\<^sub>t) vs\n                       (keys_to_list\n                         (tail\n                           (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                     (insert_list\n                       (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                     v))", "show ?thesis"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  u \\<in> set (fst (sym_preproc_addnew gs\n                     (merge_wrt (\\<succ>\\<^sub>t) vs\n                       (keys_to_list\n                         (tail\n                           (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                     (insert_list\n                       (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                     v))\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "proof (rule Cons(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> set (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail\n                         (monom_mult (1::'b) (pp_of_term v - lp g)\n                           g)))) \\<Longrightarrow>\n       u \\<prec>\\<^sub>t v", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> set (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail\n                         (monom_mult (1::'b) (pp_of_term v - lp g)\n                           g)))) \\<Longrightarrow>\n       u \\<prec>\\<^sub>t v", "assume \"u \\<in> set (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail (monom_mult 1 ?t g))))\""], ["proof (state)\nthis:\n  u \\<in> set (merge_wrt (\\<succ>\\<^sub>t) vs\n                (keys_to_list\n                  (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> set (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail\n                         (monom_mult (1::'b) (pp_of_term v - lp g)\n                           g)))) \\<Longrightarrow>\n       u \\<prec>\\<^sub>t v", "hence \"u \\<in> set vs \\<or> u \\<in> keys (tail (monom_mult 1 ?t g))\""], ["proof (prove)\nusing this:\n  u \\<in> set (merge_wrt (\\<succ>\\<^sub>t) vs\n                (keys_to_list\n                  (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n\ngoal (1 subgoal):\n 1. u \\<in> set vs \\<or>\n    u \\<in> keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))", "by (simp add: set_merge_wrt keys_to_list_def set_pps_to_list)"], ["proof (state)\nthis:\n  u \\<in> set vs \\<or>\n  u \\<in> keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> set (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail\n                         (monom_mult (1::'b) (pp_of_term v - lp g)\n                           g)))) \\<Longrightarrow>\n       u \\<prec>\\<^sub>t v", "thus \"u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  u \\<in> set vs \\<or>\n  u \\<in> keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "assume \"u \\<in> set vs\""], ["proof (state)\nthis:\n  u \\<in> set vs\n\ngoal (2 subgoals):\n 1. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "thus ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> set vs\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "by (rule Cons(2))"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "assume \"u \\<in> keys (tail (monom_mult 1 ?t g))\""], ["proof (state)\nthis:\n  u \\<in> keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "hence \"u \\<prec>\\<^sub>t lt (monom_mult 1 ?t g)\""], ["proof (prove)\nusing this:\n  u \\<in> keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t lt (monom_mult (1::'b) (pp_of_term v - lp g) g)", "by (rule keys_tail_less_lt)"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t lt (monom_mult (1::'b) (pp_of_term v - lp g) g)\n\ngoal (1 subgoal):\n 1. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "also"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t lt (monom_mult (1::'b) (pp_of_term v - lp g) g)\n\ngoal (1 subgoal):\n 1. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "have \"... \\<preceq>\\<^sub>t ?t \\<oplus> lt g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monom_mult (1::'b) (pp_of_term v - lp g) g) \\<preceq>\\<^sub>t\n    (pp_of_term v - lp g) \\<oplus> lt g", "by (rule lt_monom_mult_le)"], ["proof (state)\nthis:\n  lt (monom_mult (1::'b) (pp_of_term v - lp g) g) \\<preceq>\\<^sub>t\n  (pp_of_term v - lp g) \\<oplus> lt g\n\ngoal (1 subgoal):\n 1. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "also"], ["proof (state)\nthis:\n  lt (monom_mult (1::'b) (pp_of_term v - lp g) g) \\<preceq>\\<^sub>t\n  (pp_of_term v - lp g) \\<oplus> lt g\n\ngoal (1 subgoal):\n 1. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "from \\<open>lt g adds\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  lt g adds\\<^sub>t v", "have \"... = v\""], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. (pp_of_term v - lp g) \\<oplus> lt g = v", "by (metis add_diff_cancel_right' adds_termE pp_of_term_splus)"], ["proof (state)\nthis:\n  (pp_of_term v - lp g) \\<oplus> lt g = v\n\ngoal (1 subgoal):\n 1. u \\<in> keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    u \\<prec>\\<^sub>t v", "finally"], ["proof (chain)\npicking this:\n  u \\<prec>\\<^sub>t v", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "."], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v", "assume \"u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\""], ["proof (state)\nthis:\n  u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> u \\<prec>\\<^sub>t v", "with Cons(2)"], ["proof (chain)\npicking this:\n  ?u95 \\<in> set vs \\<Longrightarrow> ?u95 \\<prec>\\<^sub>t v\n  u \\<in> set (fst (sym_preproc_addnew gs vs fs v))", "show ?thesis"], ["proof (prove)\nusing this:\n  ?u95 \\<in> set vs \\<Longrightarrow> ?u95 \\<prec>\\<^sub>t v\n  u \\<in> set (fst (sym_preproc_addnew gs vs fs v))\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "by (rule Cons(1))"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fst_sym_preproc_addnew_dgrad_set_le:\n  assumes \"dickson_grading d\"\n  shows \"dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v))) (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)))", "proof (induct gs arbitrary: fs vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>fs vs.\n       dgrad_set_le d\n        (pp_of_term ` set (fst (sym_preproc_addnew [] vs fs v)))\n        (pp_of_term ` (Keys (set []) \\<union> insert v (set vs)))\n 2. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           dgrad_set_le d\n            (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n            (pp_of_term `\n             (Keys (set gs) \\<union> insert v (set vs)))) \\<Longrightarrow>\n       dgrad_set_le d\n        (pp_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v)))\n        (pp_of_term ` (Keys (set (a # gs)) \\<union> insert v (set vs)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>fs vs.\n       dgrad_set_le d\n        (pp_of_term ` set (fst (sym_preproc_addnew [] vs fs v)))\n        (pp_of_term ` (Keys (set []) \\<union> insert v (set vs)))\n 2. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           dgrad_set_le d\n            (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n            (pp_of_term `\n             (Keys (set gs) \\<union> insert v (set vs)))) \\<Longrightarrow>\n       dgrad_set_le d\n        (pp_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v)))\n        (pp_of_term ` (Keys (set (a # gs)) \\<union> insert v (set vs)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew [] vs fs v)))\n     (pp_of_term ` (Keys (set []) \\<union> insert v (set vs)))", "by (auto intro: dgrad_set_le_subset)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew [] vs fs v)))\n   (pp_of_term ` (Keys (set []) \\<union> insert v (set vs)))\n\ngoal (1 subgoal):\n 1. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           dgrad_set_le d\n            (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n            (pp_of_term `\n             (Keys (set gs) \\<union> insert v (set vs)))) \\<Longrightarrow>\n       dgrad_set_le d\n        (pp_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v)))\n        (pp_of_term ` (Keys (set (a # gs)) \\<union> insert v (set vs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           dgrad_set_le d\n            (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n            (pp_of_term `\n             (Keys (set gs) \\<union> insert v (set vs)))) \\<Longrightarrow>\n       dgrad_set_le d\n        (pp_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v)))\n        (pp_of_term ` (Keys (set (a # gs)) \\<union> insert v (set vs)))", "case (Cons g gs)"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set ?vs95)))\n\ngoal (1 subgoal):\n 1. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           dgrad_set_le d\n            (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n            (pp_of_term `\n             (Keys (set gs) \\<union> insert v (set vs)))) \\<Longrightarrow>\n       dgrad_set_le d\n        (pp_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v)))\n        (pp_of_term ` (Keys (set (a # gs)) \\<union> insert v (set vs)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` set (fst (sym_preproc_addnew (g # gs) vs fs v)))\n     (pp_of_term ` (Keys (set (g # gs)) \\<union> insert v (set vs)))", "proof (simp add: Let_def, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d\n     (pp_of_term `\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "assume \"lt g adds\\<^sub>t v\""], ["proof (state)\nthis:\n  lt g adds\\<^sub>t v\n\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d\n     (pp_of_term `\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "let ?t = \"pp_of_term v - lp g\""], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d\n     (pp_of_term `\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "let ?vs = \"merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail (monom_mult 1 ?t g)))\""], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d\n     (pp_of_term `\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "let ?fs = \"insert_list (monom_mult 1 ?t g) fs\""], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d\n     (pp_of_term `\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "from Cons"], ["proof (chain)\npicking this:\n  dgrad_set_le d\n   (pp_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set ?vs95)))", "have \"dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs ?vs ?fs v)))\n                                    (pp_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs)))\""], ["proof (prove)\nusing this:\n  dgrad_set_le d\n   (pp_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set ?vs95)))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))\n     (pp_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs)))", "proof (rule dgrad_set_le_trans)"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      (Keys (set gs) \\<union>\n       insert v\n        (set (merge_wrt (\\<succ>\\<^sub>t) vs\n               (keys_to_list\n                 (tail (monom_mult (1::'b) (pp_of_term v - lp g) g)))))))\n     (pp_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs)))", "show \"dgrad_set_le d (pp_of_term ` (Keys (set gs) \\<union> insert v (set ?vs)))\n                            (pp_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      (Keys (set gs) \\<union>\n       insert v\n        (set (merge_wrt (\\<succ>\\<^sub>t) vs\n               (keys_to_list\n                 (tail (monom_mult (1::'b) (pp_of_term v - lp g) g)))))))\n     (pp_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs)))", "unfolding dgrad_set_le_def set_merge_wrt set_keys_to_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>pp_of_term `\n                   (Keys (set gs) \\<union>\n                    insert v\n                     (set vs \\<union>\n                      keys\n                       (tail\n                         (monom_mult (1::'b) (pp_of_term v - lp g) g)))).\n       \\<exists>t\\<in>pp_of_term `\n                      (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n          d s \\<le> d t", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term `\n               (Keys (set gs) \\<union>\n                insert v\n                 (set vs \\<union>\n                  keys\n                   (tail\n                     (monom_mult (1::'b) (pp_of_term v - lp g)\n                       g)))) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term `\n                      (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n          d s \\<le> d t", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term `\n               (Keys (set gs) \\<union>\n                insert v\n                 (set vs \\<union>\n                  keys\n                   (tail\n                     (monom_mult (1::'b) (pp_of_term v - lp g)\n                       g)))) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term `\n                      (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n          d s \\<le> d t", "assume \"s \\<in> pp_of_term ` (Keys (set gs) \\<union> insert v (set vs \\<union> keys (tail (monom_mult 1 ?t g))))\""], ["proof (state)\nthis:\n  s \\<in> pp_of_term `\n          (Keys (set gs) \\<union>\n           insert v\n            (set vs \\<union>\n             keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term `\n               (Keys (set gs) \\<union>\n                insert v\n                 (set vs \\<union>\n                  keys\n                   (tail\n                     (monom_mult (1::'b) (pp_of_term v - lp g)\n                       g)))) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term `\n                      (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n          d s \\<le> d t", "hence \"s \\<in> pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)) \\<union> pp_of_term ` keys (tail (monom_mult 1 ?t g))\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term `\n          (Keys (set gs) \\<union>\n           insert v\n            (set vs \\<union>\n             keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)) \\<union>\n            pp_of_term `\n            keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))", "by auto"], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)) \\<union>\n          pp_of_term `\n          keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term `\n               (Keys (set gs) \\<union>\n                insert v\n                 (set vs \\<union>\n                  keys\n                   (tail\n                     (monom_mult (1::'b) (pp_of_term v - lp g)\n                       g)))) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term `\n                      (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n          d s \\<le> d t", "thus \"\\<exists>t \\<in> pp_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs)). d s \\<le> d t\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)) \\<union>\n          pp_of_term `\n          keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<in> pp_of_term `\n            (Keys (set gs) \\<union> insert v (set vs)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t\n 2. s \\<in> pp_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "assume \"s \\<in> pp_of_term ` (Keys (set gs) \\<union> insert v (set vs))\""], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` (Keys (set gs) \\<union> insert v (set vs))\n\ngoal (2 subgoals):\n 1. s \\<in> pp_of_term `\n            (Keys (set gs) \\<union> insert v (set vs)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t\n 2. s \\<in> pp_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "thus ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` (Keys (set gs) \\<union> insert v (set vs))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "by (auto simp add: Keys_insert)"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term `\n                 (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n     d s \\<le> d t\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "assume \"s \\<in> pp_of_term ` keys (tail (monom_mult 1 ?t g))\""], ["proof (state)\nthis:\n  s \\<in> pp_of_term `\n          keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "hence \"s \\<in> pp_of_term ` keys (monom_mult 1 ?t g)\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term `\n          keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys (monom_mult (1::'b) (pp_of_term v - lp g) g)", "by (auto simp add: keys_tail)"], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` keys (monom_mult (1::'b) (pp_of_term v - lp g) g)\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "from this keys_monom_mult_subset"], ["proof (chain)\npicking this:\n  s \\<in> pp_of_term ` keys (monom_mult (1::'b) (pp_of_term v - lp g) g)\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p", "have \"s \\<in> pp_of_term ` (\\<oplus>) ?t ` keys g\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` keys (monom_mult (1::'b) (pp_of_term v - lp g) g)\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g", "by blast"], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "then"], ["proof (chain)\npicking this:\n  s \\<in> pp_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g", "obtain u where \"u \\<in> keys g\" and s: \"s = pp_of_term (?t \\<oplus> u)\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys g;\n         s = pp_of_term ((pp_of_term v - lp g) \\<oplus> u)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  u \\<in> keys g\n  s = pp_of_term ((pp_of_term v - lp g) \\<oplus> u)\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "have \"d s = d ?t \\<or> d s = d (pp_of_term u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d s = d (pp_of_term v - lp g) \\<or> d s = d (pp_of_term u)", "unfolding s pp_of_term_splus"], ["proof (prove)\ngoal (1 subgoal):\n 1. d (pp_of_term v - lp g + pp_of_term u) = d (pp_of_term v - lp g) \\<or>\n    d (pp_of_term v - lp g + pp_of_term u) = d (pp_of_term u)", "using dickson_gradingD1[OF assms]"], ["proof (prove)\nusing this:\n  d (?s + ?t) = ord_class.max (d ?s) (d ?t)\n\ngoal (1 subgoal):\n 1. d (pp_of_term v - lp g + pp_of_term u) = d (pp_of_term v - lp g) \\<or>\n    d (pp_of_term v - lp g + pp_of_term u) = d (pp_of_term u)", "by auto"], ["proof (state)\nthis:\n  d s = d (pp_of_term v - lp g) \\<or> d s = d (pp_of_term u)\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "thus ?thesis"], ["proof (prove)\nusing this:\n  d s = d (pp_of_term v - lp g) \\<or> d s = d (pp_of_term u)\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. d s = d (pp_of_term v - lp g) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t\n 2. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "from \\<open>lt g adds\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  lt g adds\\<^sub>t v", "have \"lp g adds pp_of_term v\""], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lp g adds pp_of_term v", "by (simp add: adds_term_def)"], ["proof (state)\nthis:\n  lp g adds pp_of_term v\n\ngoal (2 subgoals):\n 1. d s = d (pp_of_term v - lp g) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t\n 2. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "assume \"d s = d ?t\""], ["proof (state)\nthis:\n  d s = d (pp_of_term v - lp g)\n\ngoal (2 subgoals):\n 1. d s = d (pp_of_term v - lp g) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t\n 2. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "also"], ["proof (state)\nthis:\n  d s = d (pp_of_term v - lp g)\n\ngoal (2 subgoals):\n 1. d s = d (pp_of_term v - lp g) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t\n 2. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "from assms \\<open>lp g adds pp_of_term v\\<close>"], ["proof (chain)\npicking this:\n  dickson_grading d\n  lp g adds pp_of_term v", "have \"... \\<le> d (pp_of_term v)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  lp g adds pp_of_term v\n\ngoal (1 subgoal):\n 1. d (pp_of_term v - lp g) \\<le> d (pp_of_term v)", "by (rule dickson_grading_minus)"], ["proof (state)\nthis:\n  d (pp_of_term v - lp g) \\<le> d (pp_of_term v)\n\ngoal (2 subgoals):\n 1. d s = d (pp_of_term v - lp g) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t\n 2. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "finally"], ["proof (chain)\npicking this:\n  d s \\<le> d (pp_of_term v)", "show ?thesis"], ["proof (prove)\nusing this:\n  d s \\<le> d (pp_of_term v)\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "by blast"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term `\n                 (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n     d s \\<le> d t\n\ngoal (1 subgoal):\n 1. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "assume \"d s = d (pp_of_term u)\""], ["proof (state)\nthis:\n  d s = d (pp_of_term u)\n\ngoal (1 subgoal):\n 1. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "moreover"], ["proof (state)\nthis:\n  d s = d (pp_of_term u)\n\ngoal (1 subgoal):\n 1. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "from \\<open>u \\<in> keys g\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys g", "have \"u \\<in> Keys (insert g (set gs))\""], ["proof (prove)\nusing this:\n  u \\<in> keys g\n\ngoal (1 subgoal):\n 1. u \\<in> Keys (insert g (set gs))", "by (simp add: Keys_insert)"], ["proof (state)\nthis:\n  u \\<in> Keys (insert g (set gs))\n\ngoal (1 subgoal):\n 1. d s = d (pp_of_term u) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "ultimately"], ["proof (chain)\npicking this:\n  d s = d (pp_of_term u)\n  u \\<in> Keys (insert g (set gs))", "show ?thesis"], ["proof (prove)\nusing this:\n  d s = d (pp_of_term u)\n  u \\<in> Keys (insert g (set gs))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term `\n                   (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n       d s \\<le> d t", "by auto"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term `\n                 (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n     d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term `\n                 (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n     d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term `\n                 (Keys (insert g (set gs)) \\<union> insert v (set vs)).\n     d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term `\n    (Keys (set gs) \\<union>\n     insert v\n      (set (merge_wrt (\\<succ>\\<^sub>t) vs\n             (keys_to_list\n               (tail (monom_mult (1::'b) (pp_of_term v - lp g) g)))))))\n   (pp_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v)))\n   (pp_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs)))\n\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d\n     (pp_of_term `\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "thus \"dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs ?vs ?fs v)))\n                        (insert (pp_of_term v) (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\""], ["proof (prove)\nusing this:\n  dgrad_set_le d\n   (pp_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v)))\n   (pp_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs)))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "by simp"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v)))\n   (insert (pp_of_term v)\n     (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\n\ngoal (1 subgoal):\n 1. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "from Cons"], ["proof (chain)\npicking this:\n  dgrad_set_le d\n   (pp_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set ?vs95)))", "show \"dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n                           (insert (pp_of_term v) (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\""], ["proof (prove)\nusing this:\n  dgrad_set_le d\n   (pp_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set ?vs95)))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "proof (rule dgrad_set_le_trans)"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "show \"dgrad_set_le d (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)))\n                          (insert (pp_of_term v) (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)))\n     (insert (pp_of_term v)\n       (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))", "by (rule dgrad_set_le_subset, auto simp add: Keys_def)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs)))\n   (insert (pp_of_term v)\n     (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs fs v)))\n   (insert (pp_of_term v)\n     (pp_of_term ` (Keys (insert g (set gs)) \\<union> set vs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` set (fst (sym_preproc_addnew (g # gs) vs fs v)))\n   (pp_of_term ` (Keys (set (g # gs)) \\<union> insert v (set vs)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma components_fst_sym_preproc_addnew_subset:\n  \"component_of_term ` set (fst (sym_preproc_addnew gs vs fs v)) \\<subseteq> component_of_term ` (Keys (set gs) \\<union> insert v (set vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> component_of_term `\n                (Keys (set gs) \\<union> insert v (set vs))", "proof (induct gs arbitrary: fs vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>fs vs.\n       component_of_term ` set (fst (sym_preproc_addnew [] vs fs v))\n       \\<subseteq> component_of_term `\n                   (Keys (set []) \\<union> insert v (set vs))\n 2. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n           \\<subseteq> component_of_term `\n                       (Keys (set gs) \\<union>\n                        insert v (set vs))) \\<Longrightarrow>\n       component_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v))\n       \\<subseteq> component_of_term `\n                   (Keys (set (a # gs)) \\<union> insert v (set vs))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>fs vs.\n       component_of_term ` set (fst (sym_preproc_addnew [] vs fs v))\n       \\<subseteq> component_of_term `\n                   (Keys (set []) \\<union> insert v (set vs))\n 2. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n           \\<subseteq> component_of_term `\n                       (Keys (set gs) \\<union>\n                        insert v (set vs))) \\<Longrightarrow>\n       component_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v))\n       \\<subseteq> component_of_term `\n                   (Keys (set (a # gs)) \\<union> insert v (set vs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` set (fst (sym_preproc_addnew [] vs fs v))\n    \\<subseteq> component_of_term `\n                (Keys (set []) \\<union> insert v (set vs))", "by (auto intro: dgrad_set_le_subset)"], ["proof (state)\nthis:\n  component_of_term ` set (fst (sym_preproc_addnew [] vs fs v))\n  \\<subseteq> component_of_term ` (Keys (set []) \\<union> insert v (set vs))\n\ngoal (1 subgoal):\n 1. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n           \\<subseteq> component_of_term `\n                       (Keys (set gs) \\<union>\n                        insert v (set vs))) \\<Longrightarrow>\n       component_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v))\n       \\<subseteq> component_of_term `\n                   (Keys (set (a # gs)) \\<union> insert v (set vs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n           \\<subseteq> component_of_term `\n                       (Keys (set gs) \\<union>\n                        insert v (set vs))) \\<Longrightarrow>\n       component_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v))\n       \\<subseteq> component_of_term `\n                   (Keys (set (a # gs)) \\<union> insert v (set vs))", "case (Cons g gs)"], ["proof (state)\nthis:\n  component_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set ?vs95))\n\ngoal (1 subgoal):\n 1. \\<And>a gs fs vs.\n       (\\<And>fs vs.\n           component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n           \\<subseteq> component_of_term `\n                       (Keys (set gs) \\<union>\n                        insert v (set vs))) \\<Longrightarrow>\n       component_of_term ` set (fst (sym_preproc_addnew (a # gs) vs fs v))\n       \\<subseteq> component_of_term `\n                   (Keys (set (a # gs)) \\<union> insert v (set vs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` set (fst (sym_preproc_addnew (g # gs) vs fs v))\n    \\<subseteq> component_of_term `\n                (Keys (set (g # gs)) \\<union> insert v (set vs))", "proof (simp add: Let_def, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "assume \"lt g adds\\<^sub>t v\""], ["proof (state)\nthis:\n  lt g adds\\<^sub>t v\n\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "let ?t = \"pp_of_term v - lp g\""], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "let ?vs = \"merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail (monom_mult 1 ?t g)))\""], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "let ?fs = \"insert_list (monom_mult 1 ?t g) fs\""], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "from Cons"], ["proof (chain)\npicking this:\n  component_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set ?vs95))", "have \"component_of_term ` set (fst (sym_preproc_addnew gs ?vs ?fs v)) \\<subseteq>\n                     component_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs))\""], ["proof (prove)\nusing this:\n  component_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set ?vs95))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v))\n    \\<subseteq> component_of_term `\n                (Keys (insert g (set gs)) \\<union> insert v (set vs))", "proof (rule subset_trans)"], ["proof (state)\ngoal (1 subgoal):\n 1. component_of_term `\n    (Keys (set gs) \\<union>\n     insert v\n      (set (merge_wrt (\\<succ>\\<^sub>t) vs\n             (keys_to_list\n               (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))))\n    \\<subseteq> component_of_term `\n                (Keys (insert g (set gs)) \\<union> insert v (set vs))", "show \"component_of_term ` (Keys (set gs) \\<union> insert v (set ?vs)) \\<subseteq>\n             component_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    (Keys (set gs) \\<union>\n     insert v\n      (set (merge_wrt (\\<succ>\\<^sub>t) vs\n             (keys_to_list\n               (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))))\n    \\<subseteq> component_of_term `\n                (Keys (insert g (set gs)) \\<union> insert v (set vs))", "unfolding set_merge_wrt set_keys_to_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    (Keys (set gs) \\<union>\n     insert v\n      (set vs \\<union>\n       keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n    \\<subseteq> component_of_term `\n                (Keys (insert g (set gs)) \\<union> insert v (set vs))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               (Keys (set gs) \\<union>\n                insert v\n                 (set vs \\<union>\n                  keys\n                   (tail\n                     (monom_mult (1::'b) (pp_of_term v - lp g)\n                       g)))) \\<Longrightarrow>\n       x \\<in> component_of_term `\n               (Keys (insert g (set gs)) \\<union> insert v (set vs))", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               (Keys (set gs) \\<union>\n                insert v\n                 (set vs \\<union>\n                  keys\n                   (tail\n                     (monom_mult (1::'b) (pp_of_term v - lp g)\n                       g)))) \\<Longrightarrow>\n       x \\<in> component_of_term `\n               (Keys (insert g (set gs)) \\<union> insert v (set vs))", "assume \"k \\<in> component_of_term ` (Keys (set gs) \\<union> insert v (set vs \\<union> keys (tail (monom_mult 1 ?t g))))\""], ["proof (state)\nthis:\n  k \\<in> component_of_term `\n          (Keys (set gs) \\<union>\n           insert v\n            (set vs \\<union>\n             keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               (Keys (set gs) \\<union>\n                insert v\n                 (set vs \\<union>\n                  keys\n                   (tail\n                     (monom_mult (1::'b) (pp_of_term v - lp g)\n                       g)))) \\<Longrightarrow>\n       x \\<in> component_of_term `\n               (Keys (insert g (set gs)) \\<union> insert v (set vs))", "hence \"k \\<in> component_of_term ` (Keys (set gs) \\<union> insert v (set vs)) \\<union> component_of_term ` keys (tail (monom_mult 1 ?t g))\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term `\n          (Keys (set gs) \\<union>\n           insert v\n            (set vs \\<union>\n             keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            (Keys (set gs) \\<union> insert v (set vs)) \\<union>\n            component_of_term `\n            keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))", "by auto"], ["proof (state)\nthis:\n  k \\<in> component_of_term `\n          (Keys (set gs) \\<union> insert v (set vs)) \\<union>\n          component_of_term `\n          keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               (Keys (set gs) \\<union>\n                insert v\n                 (set vs \\<union>\n                  keys\n                   (tail\n                     (monom_mult (1::'b) (pp_of_term v - lp g)\n                       g)))) \\<Longrightarrow>\n       x \\<in> component_of_term `\n               (Keys (insert g (set gs)) \\<union> insert v (set vs))", "thus \"k \\<in> component_of_term ` (Keys (insert g (set gs)) \\<union> insert v (set vs))\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term `\n          (Keys (set gs) \\<union> insert v (set vs)) \\<union>\n          component_of_term `\n          keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<in> component_of_term `\n            (Keys (set gs) \\<union> insert v (set vs)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))\n 2. k \\<in> component_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "assume \"k \\<in> component_of_term ` (Keys (set gs) \\<union> insert v (set vs))\""], ["proof (state)\nthis:\n  k \\<in> component_of_term ` (Keys (set gs) \\<union> insert v (set vs))\n\ngoal (2 subgoals):\n 1. k \\<in> component_of_term `\n            (Keys (set gs) \\<union> insert v (set vs)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))\n 2. k \\<in> component_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` (Keys (set gs) \\<union> insert v (set vs))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "by (auto simp add: Keys_insert)"], ["proof (state)\nthis:\n  k \\<in> component_of_term `\n          (Keys (insert g (set gs)) \\<union> insert v (set vs))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "assume \"k \\<in> component_of_term ` keys (tail (monom_mult 1 ?t g))\""], ["proof (state)\nthis:\n  k \\<in> component_of_term `\n          keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "hence \"k \\<in> component_of_term ` keys (monom_mult 1 ?t g)\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term `\n          keys (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            keys (monom_mult (1::'b) (pp_of_term v - lp g) g)", "by (auto simp add: keys_tail)"], ["proof (state)\nthis:\n  k \\<in> component_of_term `\n          keys (monom_mult (1::'b) (pp_of_term v - lp g) g)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "from this keys_monom_mult_subset"], ["proof (chain)\npicking this:\n  k \\<in> component_of_term `\n          keys (monom_mult (1::'b) (pp_of_term v - lp g) g)\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p", "have \"k \\<in> component_of_term ` (\\<oplus>) ?t ` keys g\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term `\n          keys (monom_mult (1::'b) (pp_of_term v - lp g) g)\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g", "by blast"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "also"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "have \"... \\<subseteq> component_of_term ` keys g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g\n    \\<subseteq> component_of_term ` keys g", "using component_of_term_splus"], ["proof (prove)\nusing this:\n  component_of_term (?t \\<oplus> ?v) = component_of_term ?v\n\ngoal (1 subgoal):\n 1. component_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g\n    \\<subseteq> component_of_term ` keys g", "by fastforce"], ["proof (state)\nthis:\n  component_of_term ` (\\<oplus>) (pp_of_term v - lp g) ` keys g\n  \\<subseteq> component_of_term ` keys g\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            keys\n             (tail\n               (monom_mult (1::'b) (pp_of_term v - lp g)\n                 g)) \\<Longrightarrow>\n    k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "finally"], ["proof (chain)\npicking this:\n  k \\<in> component_of_term ` keys g", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` keys g\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            (Keys (insert g (set gs)) \\<union> insert v (set vs))", "by (simp add: image_Un Keys_insert)"], ["proof (state)\nthis:\n  k \\<in> component_of_term `\n          (Keys (insert g (set gs)) \\<union> insert v (set vs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k \\<in> component_of_term `\n          (Keys (insert g (set gs)) \\<union> insert v (set vs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term `\n  (Keys (set gs) \\<union>\n   insert v\n    (set (merge_wrt (\\<succ>\\<^sub>t) vs\n           (keys_to_list\n             (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))))\n  \\<subseteq> component_of_term `\n              (Keys (insert g (set gs)) \\<union> insert v (set vs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term `\n  set (fst (sym_preproc_addnew gs\n             (merge_wrt (\\<succ>\\<^sub>t) vs\n               (keys_to_list\n                 (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n             (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n             v))\n  \\<subseteq> component_of_term `\n              (Keys (insert g (set gs)) \\<union> insert v (set vs))\n\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "thus \"component_of_term ` set (fst (sym_preproc_addnew gs ?vs ?fs v)) \\<subseteq>\n           insert (component_of_term v) (component_of_term ` (Keys (insert g (set gs)) \\<union> set vs))\""], ["proof (prove)\nusing this:\n  component_of_term `\n  set (fst (sym_preproc_addnew gs\n             (merge_wrt (\\<succ>\\<^sub>t) vs\n               (keys_to_list\n                 (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n             (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n             v))\n  \\<subseteq> component_of_term `\n              (Keys (insert g (set gs)) \\<union> insert v (set vs))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    set (fst (sym_preproc_addnew gs\n               (merge_wrt (\\<succ>\\<^sub>t) vs\n                 (keys_to_list\n                   (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n               (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n               v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "by simp"], ["proof (state)\nthis:\n  component_of_term `\n  set (fst (sym_preproc_addnew gs\n             (merge_wrt (\\<succ>\\<^sub>t) vs\n               (keys_to_list\n                 (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n             (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n             v))\n  \\<subseteq> insert (component_of_term v)\n               (component_of_term `\n                (Keys (insert g (set gs)) \\<union> set vs))\n\ngoal (1 subgoal):\n 1. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "from Cons"], ["proof (chain)\npicking this:\n  component_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set ?vs95))", "show \"component_of_term ` set (fst (sym_preproc_addnew gs vs fs v)) \\<subseteq>\n                insert (component_of_term v) (component_of_term ` (Keys (insert g (set gs)) \\<union> set vs))\""], ["proof (prove)\nusing this:\n  component_of_term ` set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set ?vs95))\n\ngoal (1 subgoal):\n 1. component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "proof (rule subset_trans)"], ["proof (state)\ngoal (1 subgoal):\n 1. component_of_term ` (Keys (set gs) \\<union> insert v (set vs))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "show \"component_of_term ` (Keys (set gs) \\<union> insert v (set vs)) \\<subseteq>\n             insert (component_of_term v) (component_of_term ` (Keys (insert g (set gs)) \\<union> set vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` (Keys (set gs) \\<union> insert v (set vs))\n    \\<subseteq> insert (component_of_term v)\n                 (component_of_term `\n                  (Keys (insert g (set gs)) \\<union> set vs))", "by (auto simp add: Keys_def)"], ["proof (state)\nthis:\n  component_of_term ` (Keys (set gs) \\<union> insert v (set vs))\n  \\<subseteq> insert (component_of_term v)\n               (component_of_term `\n                (Keys (insert g (set gs)) \\<union> set vs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term ` set (fst (sym_preproc_addnew gs vs fs v))\n  \\<subseteq> insert (component_of_term v)\n               (component_of_term `\n                (Keys (insert g (set gs)) \\<union> set vs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term ` set (fst (sym_preproc_addnew (g # gs) vs fs v))\n  \\<subseteq> component_of_term `\n              (Keys (set (g # gs)) \\<union> insert v (set vs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fst_sym_preproc_addnew_superset: \"set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))", "proof (induct gs arbitrary: vs fs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs fs.\n       set vs \\<subseteq> set (fst (sym_preproc_addnew [] vs fs v))\n 2. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set vs\n           \\<subseteq> set (fst (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set vs \\<subseteq> set (fst (sym_preproc_addnew (a # gs) vs fs v))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>vs fs.\n       set vs \\<subseteq> set (fst (sym_preproc_addnew [] vs fs v))\n 2. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set vs\n           \\<subseteq> set (fst (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set vs \\<subseteq> set (fst (sym_preproc_addnew (a # gs) vs fs v))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set vs \\<subseteq> set (fst (sym_preproc_addnew [] vs fs v))", "by simp"], ["proof (state)\nthis:\n  set vs \\<subseteq> set (fst (sym_preproc_addnew [] vs fs v))\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set vs\n           \\<subseteq> set (fst (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set vs \\<subseteq> set (fst (sym_preproc_addnew (a # gs) vs fs v))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set vs\n           \\<subseteq> set (fst (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set vs \\<subseteq> set (fst (sym_preproc_addnew (a # gs) vs fs v))", "case (Cons g gs)"], ["proof (state)\nthis:\n  set ?vs95 \\<subseteq> set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v))\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set vs\n           \\<subseteq> set (fst (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set vs \\<subseteq> set (fst (sym_preproc_addnew (a # gs) vs fs v))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set vs \\<subseteq> set (fst (sym_preproc_addnew (g # gs) vs fs v))", "proof (simp add: Let_def, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs\n    \\<subseteq> set (fst (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list\n                               (tail\n                                 (monom_mult (1::'b) (pp_of_term v - lp g)\n                                   g))))\n                           (insert_list\n                             (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                             fs)\n                           v))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))", "let ?t = \"pp_of_term v - lp g\""], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs\n    \\<subseteq> set (fst (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list\n                               (tail\n                                 (monom_mult (1::'b) (pp_of_term v - lp g)\n                                   g))))\n                           (insert_list\n                             (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                             fs)\n                           v))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))", "define f where \"f = monom_mult 1 ?t g\""], ["proof (state)\nthis:\n  f = monom_mult (1::'b) (pp_of_term v - lp g) g\n\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs\n    \\<subseteq> set (fst (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list\n                               (tail\n                                 (monom_mult (1::'b) (pp_of_term v - lp g)\n                                   g))))\n                           (insert_list\n                             (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                             fs)\n                           v))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))", "have \"set vs \\<subseteq> set (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set vs\n    \\<subseteq> set (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f)))", "by (auto simp add: set_merge_wrt)"], ["proof (state)\nthis:\n  set vs\n  \\<subseteq> set (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f)))\n\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs\n    \\<subseteq> set (fst (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list\n                               (tail\n                                 (monom_mult (1::'b) (pp_of_term v - lp g)\n                                   g))))\n                           (insert_list\n                             (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                             fs)\n                           v))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))", "thus \"set vs \\<subseteq> set (fst (sym_preproc_addnew gs\n                              (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f))) (insert_list f fs) v))\""], ["proof (prove)\nusing this:\n  set vs\n  \\<subseteq> set (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f)))\n\ngoal (1 subgoal):\n 1. set vs\n    \\<subseteq> set (fst (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list (tail f)))\n                           (insert_list f fs) v))", "using Cons"], ["proof (prove)\nusing this:\n  set vs\n  \\<subseteq> set (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f)))\n  set ?vs95 \\<subseteq> set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v))\n\ngoal (1 subgoal):\n 1. set vs\n    \\<subseteq> set (fst (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list (tail f)))\n                           (insert_list f fs) v))", "by (rule subset_trans)"], ["proof (state)\nthis:\n  set vs\n  \\<subseteq> set (fst (sym_preproc_addnew gs\n                         (merge_wrt (\\<succ>\\<^sub>t) vs\n                           (keys_to_list (tail f)))\n                         (insert_list f fs) v))\n\ngoal (1 subgoal):\n 1. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))", "show \"set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))", "by (fact Cons)"], ["proof (state)\nthis:\n  set vs \\<subseteq> set (fst (sym_preproc_addnew gs vs fs v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set vs \\<subseteq> set (fst (sym_preproc_addnew (g # gs) vs fs v))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snd_sym_preproc_addnew_superset: \"set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))", "proof (induct gs arbitrary: vs fs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs fs.\n       set fs \\<subseteq> set (snd (sym_preproc_addnew [] vs fs v))\n 2. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set fs\n           \\<subseteq> set (snd (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set fs \\<subseteq> set (snd (sym_preproc_addnew (a # gs) vs fs v))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>vs fs.\n       set fs \\<subseteq> set (snd (sym_preproc_addnew [] vs fs v))\n 2. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set fs\n           \\<subseteq> set (snd (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set fs \\<subseteq> set (snd (sym_preproc_addnew (a # gs) vs fs v))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<subseteq> set (snd (sym_preproc_addnew [] vs fs v))", "by simp"], ["proof (state)\nthis:\n  set fs \\<subseteq> set (snd (sym_preproc_addnew [] vs fs v))\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set fs\n           \\<subseteq> set (snd (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set fs \\<subseteq> set (snd (sym_preproc_addnew (a # gs) vs fs v))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set fs\n           \\<subseteq> set (snd (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set fs \\<subseteq> set (snd (sym_preproc_addnew (a # gs) vs fs v))", "case (Cons g gs)"], ["proof (state)\nthis:\n  set ?fs95 \\<subseteq> set (snd (sym_preproc_addnew gs ?vs95 ?fs95 v))\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           set fs\n           \\<subseteq> set (snd (sym_preproc_addnew gs vs fs\n                                  v))) \\<Longrightarrow>\n       set fs \\<subseteq> set (snd (sym_preproc_addnew (a # gs) vs fs v))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<subseteq> set (snd (sym_preproc_addnew (g # gs) vs fs v))", "proof (simp add: Let_def, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs\n    \\<subseteq> set (snd (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list\n                               (tail\n                                 (monom_mult (1::'b) (pp_of_term v - lp g)\n                                   g))))\n                           (insert_list\n                             (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                             fs)\n                           v))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))", "let ?t = \"pp_of_term v - lp g\""], ["proof (state)\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs\n    \\<subseteq> set (snd (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list\n                               (tail\n                                 (monom_mult (1::'b) (pp_of_term v - lp g)\n                                   g))))\n                           (insert_list\n                             (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                             fs)\n                           v))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))", "define f where \"f = monom_mult 1 ?t g\""], ["proof (state)\nthis:\n  f = monom_mult (1::'b) (pp_of_term v - lp g) g\n\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs\n    \\<subseteq> set (snd (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list\n                               (tail\n                                 (monom_mult (1::'b) (pp_of_term v - lp g)\n                                   g))))\n                           (insert_list\n                             (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                             fs)\n                           v))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))", "have \"set fs \\<subseteq> set (insert_list f fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<subseteq> set (insert_list f fs)", "by (auto simp add: set_insert_list)"], ["proof (state)\nthis:\n  set fs \\<subseteq> set (insert_list f fs)\n\ngoal (2 subgoals):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs\n    \\<subseteq> set (snd (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list\n                               (tail\n                                 (monom_mult (1::'b) (pp_of_term v - lp g)\n                                   g))))\n                           (insert_list\n                             (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                             fs)\n                           v))\n 2. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))", "thus \"set fs \\<subseteq> set (snd (sym_preproc_addnew gs\n                              (merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f))) (insert_list f fs) v))\""], ["proof (prove)\nusing this:\n  set fs \\<subseteq> set (insert_list f fs)\n\ngoal (1 subgoal):\n 1. set fs\n    \\<subseteq> set (snd (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list (tail f)))\n                           (insert_list f fs) v))", "using Cons"], ["proof (prove)\nusing this:\n  set fs \\<subseteq> set (insert_list f fs)\n  set ?fs95 \\<subseteq> set (snd (sym_preproc_addnew gs ?vs95 ?fs95 v))\n\ngoal (1 subgoal):\n 1. set fs\n    \\<subseteq> set (snd (sym_preproc_addnew gs\n                           (merge_wrt (\\<succ>\\<^sub>t) vs\n                             (keys_to_list (tail f)))\n                           (insert_list f fs) v))", "by (rule subset_trans)"], ["proof (state)\nthis:\n  set fs\n  \\<subseteq> set (snd (sym_preproc_addnew gs\n                         (merge_wrt (\\<succ>\\<^sub>t) vs\n                           (keys_to_list (tail f)))\n                         (insert_list f fs) v))\n\ngoal (1 subgoal):\n 1. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lt g adds\\<^sub>t v \\<Longrightarrow>\n    set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))", "show \"set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))", "by (fact Cons)"], ["proof (state)\nthis:\n  set fs \\<subseteq> set (snd (sym_preproc_addnew gs vs fs v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set fs \\<subseteq> set (snd (sym_preproc_addnew (g # gs) vs fs v))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_snd_sym_preproc_addnewE:\n  assumes \"p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\"\n  assumes 1: \"p \\<in> set fs \\<Longrightarrow> thesis\"\n  assumes 2: \"\\<And>g s. g \\<in> set gs \\<Longrightarrow> p = monom_mult 1 s g \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?g95 \\<in> set gs; p = monom_mult (1::'b) ?s95 ?g95\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "proof (induct gs arbitrary: vs fs thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs fs thesis.\n       \\<lbrakk>p \\<in> set (snd (sym_preproc_addnew [] vs fs v));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g s.\n           \\<lbrakk>g \\<in> set []; p = monom_mult (1::'b) s g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a gs vs fs thesis.\n       \\<lbrakk>\\<And>vs fs thesis.\n                   \\<lbrakk>p \\<in> set (snd\n    (sym_preproc_addnew gs vs fs v));\n                    p \\<in> set fs \\<Longrightarrow> thesis;\n                    \\<And>g s.\n                       \\<lbrakk>g \\<in> set gs;\n                        p = monom_mult (1::'b) s g\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs v));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g s.\n           \\<lbrakk>g \\<in> set (a # gs);\n            p = monom_mult (1::'b) s g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  p \\<in> set (snd (sym_preproc_addnew [] vs fs v))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?g95 \\<in> set []; p = monom_mult (1::'b) ?s95 ?g95\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>vs fs thesis.\n       \\<lbrakk>p \\<in> set (snd (sym_preproc_addnew [] vs fs v));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g s.\n           \\<lbrakk>g \\<in> set []; p = monom_mult (1::'b) s g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a gs vs fs thesis.\n       \\<lbrakk>\\<And>vs fs thesis.\n                   \\<lbrakk>p \\<in> set (snd\n    (sym_preproc_addnew gs vs fs v));\n                    p \\<in> set fs \\<Longrightarrow> thesis;\n                    \\<And>g s.\n                       \\<lbrakk>g \\<in> set gs;\n                        p = monom_mult (1::'b) s g\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs v));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g s.\n           \\<lbrakk>g \\<in> set (a # gs);\n            p = monom_mult (1::'b) s g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Nil(1)"], ["proof (chain)\npicking this:\n  p \\<in> set (snd (sym_preproc_addnew [] vs fs v))", "have \"p \\<in> set fs\""], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_addnew [] vs fs v))\n\ngoal (1 subgoal):\n 1. p \\<in> set fs", "by simp"], ["proof (state)\nthis:\n  p \\<in> set fs\n\ngoal (2 subgoals):\n 1. \\<And>vs fs thesis.\n       \\<lbrakk>p \\<in> set (snd (sym_preproc_addnew [] vs fs v));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g s.\n           \\<lbrakk>g \\<in> set []; p = monom_mult (1::'b) s g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a gs vs fs thesis.\n       \\<lbrakk>\\<And>vs fs thesis.\n                   \\<lbrakk>p \\<in> set (snd\n    (sym_preproc_addnew gs vs fs v));\n                    p \\<in> set fs \\<Longrightarrow> thesis;\n                    \\<And>g s.\n                       \\<lbrakk>g \\<in> set gs;\n                        p = monom_mult (1::'b) s g\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs v));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g s.\n           \\<lbrakk>g \\<in> set (a # gs);\n            p = monom_mult (1::'b) s g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  p \\<in> set fs\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Nil(2))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs thesis.\n       \\<lbrakk>\\<And>vs fs thesis.\n                   \\<lbrakk>p \\<in> set (snd\n    (sym_preproc_addnew gs vs fs v));\n                    p \\<in> set fs \\<Longrightarrow> thesis;\n                    \\<And>g s.\n                       \\<lbrakk>g \\<in> set gs;\n                        p = monom_mult (1::'b) s g\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs v));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g s.\n           \\<lbrakk>g \\<in> set (a # gs);\n            p = monom_mult (1::'b) s g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs thesis.\n       \\<lbrakk>\\<And>vs fs thesis.\n                   \\<lbrakk>p \\<in> set (snd\n    (sym_preproc_addnew gs vs fs v));\n                    p \\<in> set fs \\<Longrightarrow> thesis;\n                    \\<And>g s.\n                       \\<lbrakk>g \\<in> set gs;\n                        p = monom_mult (1::'b) s g\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs v));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g s.\n           \\<lbrakk>g \\<in> set (a # gs);\n            p = monom_mult (1::'b) s g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons g gs)"], ["proof (state)\nthis:\n  \\<lbrakk>p \\<in> set (snd (sym_preproc_addnew gs ?vs95 ?fs95 v));\n   p \\<in> set ?fs95 \\<Longrightarrow> ?thesis95;\n   \\<And>g s.\n      \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n      \\<Longrightarrow> ?thesis95\\<rbrakk>\n  \\<Longrightarrow> ?thesis95\n  p \\<in> set (snd (sym_preproc_addnew (g # gs) vs fs v))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?g95 \\<in> set (g # gs);\n   p = monom_mult (1::'b) ?s95 ?g95\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs thesis.\n       \\<lbrakk>\\<And>vs fs thesis.\n                   \\<lbrakk>p \\<in> set (snd\n    (sym_preproc_addnew gs vs fs v));\n                    p \\<in> set fs \\<Longrightarrow> thesis;\n                    \\<And>g s.\n                       \\<lbrakk>g \\<in> set gs;\n                        p = monom_mult (1::'b) s g\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs v));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g s.\n           \\<lbrakk>g \\<in> set (a # gs);\n            p = monom_mult (1::'b) s g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons(2)"], ["proof (chain)\npicking this:\n  p \\<in> set (snd (sym_preproc_addnew (g # gs) vs fs v))", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_addnew (g # gs) vs fs v))\n\ngoal (1 subgoal):\n 1. thesis", "proof (simp add: Let_def split: if_splits)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs\n                        (merge_wrt (\\<succ>\\<^sub>t) vs\n                          (keys_to_list\n                            (tail\n                              (monom_mult (1::'b) (pp_of_term v - lp g)\n                                g))))\n                        (insert_list\n                          (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                        v))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "define f where \"f = monom_mult 1 (pp_of_term v - lp g) g\""], ["proof (state)\nthis:\n  f = monom_mult (1::'b) (pp_of_term v - lp g) g\n\ngoal (2 subgoals):\n 1. \\<lbrakk>lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs\n                        (merge_wrt (\\<succ>\\<^sub>t) vs\n                          (keys_to_list\n                            (tail\n                              (monom_mult (1::'b) (pp_of_term v - lp g)\n                                g))))\n                        (insert_list\n                          (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                        v))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "define ts' where \"ts' = merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f))\""], ["proof (state)\nthis:\n  ts' = merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs\n                        (merge_wrt (\\<succ>\\<^sub>t) vs\n                          (keys_to_list\n                            (tail\n                              (monom_mult (1::'b) (pp_of_term v - lp g)\n                                g))))\n                        (insert_list\n                          (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                        v))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "define fs' where \"fs' = insert_list f fs\""], ["proof (state)\nthis:\n  fs' = insert_list f fs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs\n                        (merge_wrt (\\<succ>\\<^sub>t) vs\n                          (keys_to_list\n                            (tail\n                              (monom_mult (1::'b) (pp_of_term v - lp g)\n                                g))))\n                        (insert_list\n                          (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                        v))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"p \\<in> set (snd (sym_preproc_addnew gs ts' fs' v))\""], ["proof (state)\nthis:\n  p \\<in> set (snd (sym_preproc_addnew gs ts' fs' v))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs\n                        (merge_wrt (\\<succ>\\<^sub>t) vs\n                          (keys_to_list\n                            (tail\n                              (monom_mult (1::'b) (pp_of_term v - lp g)\n                                g))))\n                        (insert_list\n                          (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                        v))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_addnew gs ts' fs' v))\n\ngoal (1 subgoal):\n 1. thesis", "proof (rule Cons(1))"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> set fs' \\<Longrightarrow> thesis\n 2. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"p \\<in> set fs'\""], ["proof (state)\nthis:\n  p \\<in> set fs'\n\ngoal (2 subgoals):\n 1. p \\<in> set fs' \\<Longrightarrow> thesis\n 2. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \"p = f \\<or> p \\<in> set fs\""], ["proof (prove)\nusing this:\n  p \\<in> set fs'\n\ngoal (1 subgoal):\n 1. p = f \\<or> p \\<in> set fs", "by (simp add: fs'_def set_insert_list)"], ["proof (state)\nthis:\n  p = f \\<or> p \\<in> set fs\n\ngoal (2 subgoals):\n 1. p \\<in> set fs' \\<Longrightarrow> thesis\n 2. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = f \\<or> p \\<in> set fs\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p = f \\<Longrightarrow> thesis\n 2. p \\<in> set fs \\<Longrightarrow> thesis", "assume \"p = f\""], ["proof (state)\nthis:\n  p = f\n\ngoal (2 subgoals):\n 1. p = f \\<Longrightarrow> thesis\n 2. p \\<in> set fs \\<Longrightarrow> thesis", "have \"g \\<in> set (g # gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> set (g # gs)", "by simp"], ["proof (state)\nthis:\n  g \\<in> set (g # gs)\n\ngoal (2 subgoals):\n 1. p = f \\<Longrightarrow> thesis\n 2. p \\<in> set fs \\<Longrightarrow> thesis", "from this \\<open>p = f\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> set (g # gs)\n  p = f", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> set (g # gs)\n  p = f\n\ngoal (1 subgoal):\n 1. thesis", "unfolding f_def"], ["proof (prove)\nusing this:\n  g \\<in> set (g # gs)\n  p = monom_mult (1::'b) (pp_of_term v - lp g) g\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(4))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. p \\<in> set fs \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<in> set fs \\<Longrightarrow> thesis", "assume \"p \\<in> set fs\""], ["proof (state)\nthis:\n  p \\<in> set fs\n\ngoal (1 subgoal):\n 1. p \\<in> set fs \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> set fs\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(3))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix h s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"h \\<in> set gs\""], ["proof (state)\nthis:\n  h \\<in> set gs\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \"h \\<in> set (g # gs)\""], ["proof (prove)\nusing this:\n  h \\<in> set gs\n\ngoal (1 subgoal):\n 1. h \\<in> set (g # gs)", "by simp"], ["proof (state)\nthis:\n  h \\<in> set (g # gs)\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  h \\<in> set (g # gs)\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"p = monom_mult 1 s h\""], ["proof (state)\nthis:\n  p = monom_mult (1::'b) s h\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  h \\<in> set (g # gs)\n  p = monom_mult (1::'b) s h", "show thesis"], ["proof (prove)\nusing this:\n  h \\<in> set (g # gs)\n  p = monom_mult (1::'b) s h\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(4))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\""], ["proof (state)\nthis:\n  p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "note Cons(3)"], ["proof (state)\nthis:\n  p \\<in> set fs \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  p \\<in> set fs \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"h \\<in> set gs \\<Longrightarrow> p = monom_mult 1 s h \\<Longrightarrow> thesis\" for h s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> set gs; p = monom_mult (1::'b) s h\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> set gs; p = monom_mult (1::'b) s h\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"h \\<in> set gs\""], ["proof (state)\nthis:\n  h \\<in> set gs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> set gs; p = monom_mult (1::'b) s h\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"h \\<in> set (g # gs)\""], ["proof (prove)\nusing this:\n  h \\<in> set gs\n\ngoal (1 subgoal):\n 1. h \\<in> set (g # gs)", "by simp"], ["proof (state)\nthis:\n  h \\<in> set (g # gs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> set gs; p = monom_mult (1::'b) s h\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  h \\<in> set (g # gs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> set gs; p = monom_mult (1::'b) s h\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"p = monom_mult 1 s h\""], ["proof (state)\nthis:\n  p = monom_mult (1::'b) s h\n\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<in> set gs; p = monom_mult (1::'b) s h\\<rbrakk>\n    \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  h \\<in> set (g # gs)\n  p = monom_mult (1::'b) s h", "show thesis"], ["proof (prove)\nusing this:\n  h \\<in> set (g # gs)\n  p = monom_mult (1::'b) s h\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(4))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?h95 \\<in> set gs; p = monom_mult (1::'b) ?s95 ?h95\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lt g adds\\<^sub>t v;\n     p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\\<rbrakk>\n    \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?h95 \\<in> set gs; p = monom_mult (1::'b) ?s95 ?h95\\<rbrakk>\n  \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?h95 \\<in> set gs; p = monom_mult (1::'b) ?s95 ?h95\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(1))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sym_preproc_addnew_pmdl:\n  \"pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v))) = pmdl (set gs \\<union> set fs)\"\n    (is \"pmdl (set gs \\<union> ?l) = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v))) =\n    pmdl (set gs \\<union> set fs)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n    \\<subseteq> pmdl (set gs \\<union> set fs)\n 2. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "have \"set gs \\<subseteq> set gs \\<union> set fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set gs \\<subseteq> set gs \\<union> set fs", "by simp"], ["proof (state)\nthis:\n  set gs \\<subseteq> set gs \\<union> set fs\n\ngoal (2 subgoals):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n    \\<subseteq> pmdl (set gs \\<union> set fs)\n 2. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "also"], ["proof (state)\nthis:\n  set gs \\<subseteq> set gs \\<union> set fs\n\ngoal (2 subgoals):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n    \\<subseteq> pmdl (set gs \\<union> set fs)\n 2. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "have \"... \\<subseteq> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set gs \\<union> set fs \\<subseteq> pmdl (set gs \\<union> set fs)", "by (fact pmdl.span_superset)"], ["proof (state)\nthis:\n  set gs \\<union> set fs \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (2 subgoals):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n    \\<subseteq> pmdl (set gs \\<union> set fs)\n 2. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "finally"], ["proof (chain)\npicking this:\n  set gs \\<subseteq> pmdl (set gs \\<union> set fs)", "have \"set gs \\<subseteq> ?r\""], ["proof (prove)\nusing this:\n  set gs \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. set gs \\<subseteq> pmdl (set gs \\<union> set fs)", "."], ["proof (state)\nthis:\n  set gs \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (2 subgoals):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n    \\<subseteq> pmdl (set gs \\<union> set fs)\n 2. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "moreover"], ["proof (state)\nthis:\n  set gs \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (2 subgoals):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n    \\<subseteq> pmdl (set gs \\<union> set fs)\n 2. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "have \"?l \\<subseteq> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (snd (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> pmdl (set gs \\<union> set fs)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (snd (sym_preproc_addnew gs vs fs v)) \\<Longrightarrow>\n       x \\<in> pmdl (set gs \\<union> set fs)", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (snd (sym_preproc_addnew gs vs fs v)) \\<Longrightarrow>\n       x \\<in> pmdl (set gs \\<union> set fs)", "assume \"p \\<in> ?l\""], ["proof (state)\nthis:\n  p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (snd (sym_preproc_addnew gs vs fs v)) \\<Longrightarrow>\n       x \\<in> pmdl (set gs \\<union> set fs)", "thus \"p \\<in> ?r\""], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_addnew gs vs fs v))\n\ngoal (1 subgoal):\n 1. p \\<in> pmdl (set gs \\<union> set fs)", "proof (rule in_snd_sym_preproc_addnewE)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> set fs \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)\n 2. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)", "assume \"p \\<in> set fs\""], ["proof (state)\nthis:\n  p \\<in> set fs\n\ngoal (2 subgoals):\n 1. p \\<in> set fs \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)\n 2. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)", "hence \"p \\<in> set gs \\<union> set fs\""], ["proof (prove)\nusing this:\n  p \\<in> set fs\n\ngoal (1 subgoal):\n 1. p \\<in> set gs \\<union> set fs", "by simp"], ["proof (state)\nthis:\n  p \\<in> set gs \\<union> set fs\n\ngoal (2 subgoals):\n 1. p \\<in> set fs \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)\n 2. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> set gs \\<union> set fs\n\ngoal (1 subgoal):\n 1. p \\<in> pmdl (set gs \\<union> set fs)", "by (rule pmdl.span_base)"], ["proof (state)\nthis:\n  p \\<in> pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)", "fix g s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)", "assume \"g \\<in> set gs\" and p: \"p = monom_mult 1 s g\""], ["proof (state)\nthis:\n  g \\<in> set gs\n  p = monom_mult (1::'b) s g\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)", "from this(1) \\<open>set gs \\<subseteq> ?r\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> set gs\n  set gs \\<subseteq> pmdl (set gs \\<union> set fs)", "have \"g \\<in> ?r\""], ["proof (prove)\nusing this:\n  g \\<in> set gs\n  set gs \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. g \\<in> pmdl (set gs \\<union> set fs)", ".."], ["proof (state)\nthis:\n  g \\<in> pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> p \\<in> pmdl (set gs \\<union> set fs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. p \\<in> pmdl (set gs \\<union> set fs)", "unfolding p"], ["proof (prove)\nusing this:\n  g \\<in> pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) s g \\<in> pmdl (set gs \\<union> set fs)", "by (rule pmdl_closed_monom_mult)"], ["proof (state)\nthis:\n  p \\<in> pmdl (set gs \\<union> set fs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in> pmdl (set gs \\<union> set fs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (snd (sym_preproc_addnew gs vs fs v))\n  \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (2 subgoals):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n    \\<subseteq> pmdl (set gs \\<union> set fs)\n 2. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "ultimately"], ["proof (chain)\npicking this:\n  set gs \\<subseteq> pmdl (set gs \\<union> set fs)\n  set (snd (sym_preproc_addnew gs vs fs v))\n  \\<subseteq> pmdl (set gs \\<union> set fs)", "have \"set gs \\<union> ?l \\<subseteq> ?r\""], ["proof (prove)\nusing this:\n  set gs \\<subseteq> pmdl (set gs \\<union> set fs)\n  set (snd (sym_preproc_addnew gs vs fs v))\n  \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v))\n    \\<subseteq> pmdl (set gs \\<union> set fs)", "by blast"], ["proof (state)\nthis:\n  set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v))\n  \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (2 subgoals):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n    \\<subseteq> pmdl (set gs \\<union> set fs)\n 2. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "thus \"pmdl (set gs \\<union> ?l) \\<subseteq> ?r\""], ["proof (prove)\nusing this:\n  set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v))\n  \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n    \\<subseteq> pmdl (set gs \\<union> set fs)", "by (rule pmdl.span_subset_spanI)"], ["proof (state)\nthis:\n  pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n  \\<subseteq> pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "from snd_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))", "have \"set gs \\<union> set fs \\<subseteq> set gs \\<union> ?l\""], ["proof (prove)\nusing this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n\ngoal (1 subgoal):\n 1. set gs \\<union> set fs\n    \\<subseteq> set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v))", "by blast"], ["proof (state)\nthis:\n  set gs \\<union> set fs\n  \\<subseteq> set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v))\n\ngoal (1 subgoal):\n 1. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "thus \"?r \\<subseteq> pmdl (set gs \\<union> ?l)\""], ["proof (prove)\nusing this:\n  set gs \\<union> set fs\n  \\<subseteq> set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v))\n\ngoal (1 subgoal):\n 1. pmdl (set gs \\<union> set fs)\n    \\<subseteq> pmdl\n                 (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))", "by (rule pmdl.span_mono)"], ["proof (state)\nthis:\n  pmdl (set gs \\<union> set fs)\n  \\<subseteq> pmdl\n               (set gs \\<union> set (snd (sym_preproc_addnew gs vs fs v)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Keys_snd_sym_preproc_addnew:\n  \"Keys (set (snd (sym_preproc_addnew gs vs fs v))) \\<union> insert v (set vs) =\n   Keys (set fs) \\<union> insert v (set (fst (sym_preproc_addnew gs vs (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list) v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs fs v))) \\<union>\n    insert v (set vs) =\n    Keys (set fs) \\<union>\n    insert v (set (fst (sym_preproc_addnew gs vs fs v)))", "proof (induct gs arbitrary: vs fs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs fs.\n       Keys (set (snd (sym_preproc_addnew [] vs fs v))) \\<union>\n       insert v (set vs) =\n       Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew [] vs fs v)))\n 2. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           Keys (set (snd (sym_preproc_addnew gs vs fs v))) \\<union>\n           insert v (set vs) =\n           Keys (set fs) \\<union>\n           insert v\n            (set (fst (sym_preproc_addnew gs vs fs v)))) \\<Longrightarrow>\n       Keys (set (snd (sym_preproc_addnew (a # gs) vs fs v))) \\<union>\n       insert v (set vs) =\n       Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew (a # gs) vs fs v)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>vs fs.\n       Keys (set (snd (sym_preproc_addnew [] vs fs v))) \\<union>\n       insert v (set vs) =\n       Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew [] vs fs v)))\n 2. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           Keys (set (snd (sym_preproc_addnew gs vs fs v))) \\<union>\n           insert v (set vs) =\n           Keys (set fs) \\<union>\n           insert v\n            (set (fst (sym_preproc_addnew gs vs fs v)))) \\<Longrightarrow>\n       Keys (set (snd (sym_preproc_addnew (a # gs) vs fs v))) \\<union>\n       insert v (set vs) =\n       Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew (a # gs) vs fs v)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew [] vs fs v))) \\<union>\n    insert v (set vs) =\n    Keys (set fs) \\<union>\n    insert v (set (fst (sym_preproc_addnew [] vs fs v)))", "by simp"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew [] vs fs v))) \\<union>\n  insert v (set vs) =\n  Keys (set fs) \\<union>\n  insert v (set (fst (sym_preproc_addnew [] vs fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           Keys (set (snd (sym_preproc_addnew gs vs fs v))) \\<union>\n           insert v (set vs) =\n           Keys (set fs) \\<union>\n           insert v\n            (set (fst (sym_preproc_addnew gs vs fs v)))) \\<Longrightarrow>\n       Keys (set (snd (sym_preproc_addnew (a # gs) vs fs v))) \\<union>\n       insert v (set vs) =\n       Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew (a # gs) vs fs v)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           Keys (set (snd (sym_preproc_addnew gs vs fs v))) \\<union>\n           insert v (set vs) =\n           Keys (set fs) \\<union>\n           insert v\n            (set (fst (sym_preproc_addnew gs vs fs v)))) \\<Longrightarrow>\n       Keys (set (snd (sym_preproc_addnew (a # gs) vs fs v))) \\<union>\n       insert v (set vs) =\n       Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew (a # gs) vs fs v)))", "case (Cons g gs)"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs ?vs95 ?fs95 v))) \\<union>\n  insert v (set ?vs95) =\n  Keys (set ?fs95) \\<union>\n  insert v (set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v)))\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           Keys (set (snd (sym_preproc_addnew gs vs fs v))) \\<union>\n           insert v (set vs) =\n           Keys (set fs) \\<union>\n           insert v\n            (set (fst (sym_preproc_addnew gs vs fs v)))) \\<Longrightarrow>\n       Keys (set (snd (sym_preproc_addnew (a # gs) vs fs v))) \\<union>\n       insert v (set vs) =\n       Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew (a # gs) vs fs v)))", "from Cons"], ["proof (chain)\npicking this:\n  Keys (set (snd (sym_preproc_addnew gs ?vs95 ?fs95 v))) \\<union>\n  insert v (set ?vs95) =\n  Keys (set ?fs95) \\<union>\n  insert v (set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v)))", "have eq: \"insert v (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set ts') =\n                      insert v (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\"\n    for ts' fs'"], ["proof (prove)\nusing this:\n  Keys (set (snd (sym_preproc_addnew gs ?vs95 ?fs95 v))) \\<union>\n  insert v (set ?vs95) =\n  Keys (set ?fs95) \\<union>\n  insert v (set (fst (sym_preproc_addnew gs ?vs95 ?fs95 v)))\n\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set ts') =\n    insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "by simp"], ["proof (state)\nthis:\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ?ts'95 ?fs'95 v))) \\<union>\n    set ?ts'95) =\n  insert v\n   (Keys (set ?fs'95) \\<union>\n    set (fst (sym_preproc_addnew gs ?ts'95 ?fs'95 v)))\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       (\\<And>vs fs.\n           Keys (set (snd (sym_preproc_addnew gs vs fs v))) \\<union>\n           insert v (set vs) =\n           Keys (set fs) \\<union>\n           insert v\n            (set (fst (sym_preproc_addnew gs vs fs v)))) \\<Longrightarrow>\n       Keys (set (snd (sym_preproc_addnew (a # gs) vs fs v))) \\<union>\n       insert v (set vs) =\n       Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew (a # gs) vs fs v)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew (g # gs) vs fs v))) \\<union>\n    insert v (set vs) =\n    Keys (set fs) \\<union>\n    insert v (set (fst (sym_preproc_addnew (g # gs) vs fs v)))", "proof (simp add: Let_def eq, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "assume \"lt g adds\\<^sub>t v\""], ["proof (state)\nthis:\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "let ?t = \"pp_of_term v - lp g\""], ["proof (state)\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "define f where \"f = monom_mult 1 ?t g\""], ["proof (state)\nthis:\n  f = monom_mult (1::'b) (pp_of_term v - lp g) g\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "define ts' where \"ts' = merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f))\""], ["proof (state)\nthis:\n  ts' = merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail f))\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "define fs' where \"fs' = insert_list f fs\""], ["proof (state)\nthis:\n  fs' = insert_list f fs\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "have \"keys (tail f) = keys f - {v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (tail f) = keys f - {v}", "proof (cases \"g = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow> keys (tail f) = keys f - {v}\n 2. g \\<noteq> 0 \\<Longrightarrow> keys (tail f) = keys f - {v}", "case True"], ["proof (state)\nthis:\n  g = 0\n\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow> keys (tail f) = keys f - {v}\n 2. g \\<noteq> 0 \\<Longrightarrow> keys (tail f) = keys f - {v}", "hence \"f = 0\""], ["proof (prove)\nusing this:\n  g = 0\n\ngoal (1 subgoal):\n 1. f = 0", "by (simp add: f_def)"], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow> keys (tail f) = keys f - {v}\n 2. g \\<noteq> 0 \\<Longrightarrow> keys (tail f) = keys f - {v}", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = 0\n\ngoal (1 subgoal):\n 1. keys (tail f) = keys f - {v}", "by simp"], ["proof (state)\nthis:\n  keys (tail f) = keys f - {v}\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow> keys (tail f) = keys f - {v}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow> keys (tail f) = keys f - {v}", "case False"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow> keys (tail f) = keys f - {v}", "hence \"lt f = ?t \\<oplus> lt g\""], ["proof (prove)\nusing this:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt f = (pp_of_term v - lp g) \\<oplus> lt g", "by (simp add: f_def lt_monom_mult)"], ["proof (state)\nthis:\n  lt f = (pp_of_term v - lp g) \\<oplus> lt g\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow> keys (tail f) = keys f - {v}", "also"], ["proof (state)\nthis:\n  lt f = (pp_of_term v - lp g) \\<oplus> lt g\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow> keys (tail f) = keys f - {v}", "from \\<open>lt g adds\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  lt g adds\\<^sub>t v", "have \"... = v\""], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. (pp_of_term v - lp g) \\<oplus> lt g = v", "by (metis add_diff_cancel_right' adds_termE pp_of_term_splus)"], ["proof (state)\nthis:\n  (pp_of_term v - lp g) \\<oplus> lt g = v\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow> keys (tail f) = keys f - {v}", "finally"], ["proof (chain)\npicking this:\n  lt f = v", "show ?thesis"], ["proof (prove)\nusing this:\n  lt f = v\n\ngoal (1 subgoal):\n 1. keys (tail f) = keys f - {v}", "by (simp add: keys_tail)"], ["proof (state)\nthis:\n  keys (tail f) = keys f - {v}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  keys (tail f) = keys f - {v}\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "hence ts': \"set ts' = set vs \\<union> (keys f - {v})\""], ["proof (prove)\nusing this:\n  keys (tail f) = keys f - {v}\n\ngoal (1 subgoal):\n 1. set ts' = set vs \\<union> (keys f - {v})", "by (simp add: ts'_def set_merge_wrt set_keys_to_list)"], ["proof (state)\nthis:\n  set ts' = set vs \\<union> (keys f - {v})\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "have fs': \"set fs' = insert f (set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs' = insert f (set fs)", "by (simp add: fs'_def set_insert_list)"], ["proof (state)\nthis:\n  set fs' = insert f (set fs)\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "hence \"f \\<in> set fs'\""], ["proof (prove)\nusing this:\n  set fs' = insert f (set fs)\n\ngoal (1 subgoal):\n 1. f \\<in> set fs'", "by simp"], ["proof (state)\nthis:\n  f \\<in> set fs'\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "from this snd_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  f \\<in> set fs'\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))", "have \"f \\<in> set (snd (sym_preproc_addnew gs ts' fs' v))\""], ["proof (prove)\nusing this:\n  f \\<in> set fs'\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n\ngoal (1 subgoal):\n 1. f \\<in> set (snd (sym_preproc_addnew gs ts' fs' v))", ".."], ["proof (state)\nthis:\n  f \\<in> set (snd (sym_preproc_addnew gs ts' fs' v))\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "hence \"keys f \\<subseteq> Keys (set (snd (sym_preproc_addnew gs ts' fs' v)))\""], ["proof (prove)\nusing this:\n  f \\<in> set (snd (sym_preproc_addnew gs ts' fs' v))\n\ngoal (1 subgoal):\n 1. keys f \\<subseteq> Keys (set (snd (sym_preproc_addnew gs ts' fs' v)))", "by (rule keys_subset_Keys)"], ["proof (state)\nthis:\n  keys f \\<subseteq> Keys (set (snd (sym_preproc_addnew gs ts' fs' v)))\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "hence \"insert v (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set vs) =\n          insert v (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set ts')\""], ["proof (prove)\nusing this:\n  keys f \\<subseteq> Keys (set (snd (sym_preproc_addnew gs ts' fs' v)))\n\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set vs) =\n    insert v\n     (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set ts')", "by (auto simp add: ts')"], ["proof (state)\nthis:\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set vs) =\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set ts')\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "also"], ["proof (state)\nthis:\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set vs) =\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set ts')\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "have \"... = insert v (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set ts') =\n    insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "by (fact eq)"], ["proof (state)\nthis:\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set ts') =\n  insert v\n   (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "also"], ["proof (state)\nthis:\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set ts') =\n  insert v\n   (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "have \"... = insert v (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "assume \"u \\<noteq> v\" and \"u \\<in> keys f\""], ["proof (state)\nthis:\n  u \\<noteq> v\n  u \\<in> keys f\n\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "hence \"u \\<in> set ts'\""], ["proof (prove)\nusing this:\n  u \\<noteq> v\n  u \\<in> keys f\n\ngoal (1 subgoal):\n 1. u \\<in> set ts'", "by (simp add: ts')"], ["proof (state)\nthis:\n  u \\<in> set ts'\n\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "from this fst_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  u \\<in> set ts'\n  set ?vs \\<subseteq> set (fst (sym_preproc_addnew ?gs ?vs ?fs ?v))", "have \"u \\<in> set (fst (sym_preproc_addnew gs ts' fs' v))\""], ["proof (prove)\nusing this:\n  u \\<in> set ts'\n  set ?vs \\<subseteq> set (fst (sym_preproc_addnew ?gs ?vs ?fs ?v))\n\ngoal (1 subgoal):\n 1. u \\<in> set (fst (sym_preproc_addnew gs ts' fs' v))", ".."], ["proof (state)\nthis:\n  u \\<in> set (fst (sym_preproc_addnew gs ts' fs' v))\n\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?u97 \\<noteq> v; ?u97 \\<in> keys f\\<rbrakk>\n  \\<Longrightarrow> ?u97 \\<in> set (fst (sym_preproc_addnew gs ts' fs' v))\n\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?u97 \\<noteq> v; ?u97 \\<in> keys f\\<rbrakk>\n  \\<Longrightarrow> ?u97 \\<in> set (fst (sym_preproc_addnew gs ts' fs' v))\n\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "by (auto simp add: fs' Keys_insert)"], ["proof (state)\nthis:\n  insert v\n   (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n  insert v\n   (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  insert v\n   (Keys (set fs') \\<union> set (fst (sym_preproc_addnew gs ts' fs' v))) =\n  insert v\n   (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\n\ngoal (1 subgoal):\n 1. lt g adds\\<^sub>t v \\<Longrightarrow>\n    insert v\n     (Keys\n       (set (snd (sym_preproc_addnew gs\n                   (merge_wrt (\\<succ>\\<^sub>t) vs\n                     (keys_to_list\n                       (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                   (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                     fs)\n                   v))) \\<union>\n      set vs) =\n    insert v\n     (Keys (set fs) \\<union>\n      set (fst (sym_preproc_addnew gs\n                 (merge_wrt (\\<succ>\\<^sub>t) vs\n                   (keys_to_list\n                     (tail (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                 (insert_list (monom_mult (1::'b) (pp_of_term v - lp g) g)\n                   fs)\n                 v)))", "finally"], ["proof (chain)\npicking this:\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set vs) =\n  insert v\n   (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "show \"insert v (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set vs) =\n                  insert v (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\""], ["proof (prove)\nusing this:\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set vs) =\n  insert v\n   (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\n\ngoal (1 subgoal):\n 1. insert v\n     (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set vs) =\n    insert v\n     (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))", "."], ["proof (state)\nthis:\n  insert v\n   (Keys (set (snd (sym_preproc_addnew gs ts' fs' v))) \\<union> set vs) =\n  insert v\n   (Keys (set fs) \\<union> set (fst (sym_preproc_addnew gs ts' fs' v)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew (g # gs) vs fs v))) \\<union>\n  insert v (set vs) =\n  Keys (set fs) \\<union>\n  insert v (set (fst (sym_preproc_addnew (g # gs) vs fs v)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sym_preproc_addnew_complete:\n  assumes \"g \\<in> set gs\" and \"lt g adds\\<^sub>t v\"\n  shows \"monom_mult 1 (pp_of_term v - lp g) g \\<in> set (snd (sym_preproc_addnew gs vs fs v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew gs vs fs v))", "using assms(1)"], ["proof (prove)\nusing this:\n  g \\<in> set gs\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew gs vs fs v))", "proof (induct gs arbitrary: vs fs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs fs.\n       g \\<in> set [] \\<Longrightarrow>\n       monom_mult (1::'b) (pp_of_term v - lp g) g\n       \\<in> set (snd (sym_preproc_addnew [] vs fs v))\n 2. \\<And>a gs vs fs.\n       \\<lbrakk>\\<And>vs fs.\n                   g \\<in> set gs \\<Longrightarrow>\n                   monom_mult (1::'b) (pp_of_term v - lp g) g\n                   \\<in> set (snd (sym_preproc_addnew gs vs fs v));\n        g \\<in> set (a # gs)\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term v - lp g) g\n                         \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs\n    v))", "case Nil"], ["proof (state)\nthis:\n  g \\<in> set []\n\ngoal (2 subgoals):\n 1. \\<And>vs fs.\n       g \\<in> set [] \\<Longrightarrow>\n       monom_mult (1::'b) (pp_of_term v - lp g) g\n       \\<in> set (snd (sym_preproc_addnew [] vs fs v))\n 2. \\<And>a gs vs fs.\n       \\<lbrakk>\\<And>vs fs.\n                   g \\<in> set gs \\<Longrightarrow>\n                   monom_mult (1::'b) (pp_of_term v - lp g) g\n                   \\<in> set (snd (sym_preproc_addnew gs vs fs v));\n        g \\<in> set (a # gs)\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term v - lp g) g\n                         \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs\n    v))", "thus ?case"], ["proof (prove)\nusing this:\n  g \\<in> set []\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew [] vs fs v))", "by simp"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term v - lp g) g\n  \\<in> set (snd (sym_preproc_addnew [] vs fs v))\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       \\<lbrakk>\\<And>vs fs.\n                   g \\<in> set gs \\<Longrightarrow>\n                   monom_mult (1::'b) (pp_of_term v - lp g) g\n                   \\<in> set (snd (sym_preproc_addnew gs vs fs v));\n        g \\<in> set (a # gs)\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term v - lp g) g\n                         \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs\n    v))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       \\<lbrakk>\\<And>vs fs.\n                   g \\<in> set gs \\<Longrightarrow>\n                   monom_mult (1::'b) (pp_of_term v - lp g) g\n                   \\<in> set (snd (sym_preproc_addnew gs vs fs v));\n        g \\<in> set (a # gs)\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term v - lp g) g\n                         \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs\n    v))", "case (Cons h gs)"], ["proof (state)\nthis:\n  g \\<in> set gs \\<Longrightarrow>\n  monom_mult (1::'b) (pp_of_term v - lp g) g\n  \\<in> set (snd (sym_preproc_addnew gs ?vs95 ?fs95 v))\n  g \\<in> set (h # gs)\n\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       \\<lbrakk>\\<And>vs fs.\n                   g \\<in> set gs \\<Longrightarrow>\n                   monom_mult (1::'b) (pp_of_term v - lp g) g\n                   \\<in> set (snd (sym_preproc_addnew gs vs fs v));\n        g \\<in> set (a # gs)\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term v - lp g) g\n                         \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs\n    v))", "let ?t = \"pp_of_term v - lp g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a gs vs fs.\n       \\<lbrakk>\\<And>vs fs.\n                   g \\<in> set gs \\<Longrightarrow>\n                   monom_mult (1::'b) (pp_of_term v - lp g) g\n                   \\<in> set (snd (sym_preproc_addnew gs vs fs v));\n        g \\<in> set (a # gs)\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term v - lp g) g\n                         \\<in> set (snd (sym_preproc_addnew (a # gs) vs fs\n    v))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "proof (cases \"h = g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. h = g \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))\n 2. h \\<noteq> g \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "case True"], ["proof (state)\nthis:\n  h = g\n\ngoal (2 subgoals):\n 1. h = g \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))\n 2. h \\<noteq> g \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "proof (simp add: True assms(2) Let_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew gs\n                     (merge_wrt (\\<succ>\\<^sub>t) vs\n                       (keys_to_list\n                         (tail\n                           (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                     (insert_list\n                       (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                     v))", "define f where \"f = monom_mult 1 ?t g\""], ["proof (state)\nthis:\n  f = monom_mult (1::'b) (pp_of_term v - lp g) g\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew gs\n                     (merge_wrt (\\<succ>\\<^sub>t) vs\n                       (keys_to_list\n                         (tail\n                           (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                     (insert_list\n                       (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                     v))", "define ts' where \"ts' = merge_wrt (\\<succ>\\<^sub>t) vs (keys_to_list (tail (monom_mult 1 ?t g)))\""], ["proof (state)\nthis:\n  ts' =\n  merge_wrt (\\<succ>\\<^sub>t) vs\n   (keys_to_list (tail (monom_mult (1::'b) (pp_of_term v - lp g) g)))\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew gs\n                     (merge_wrt (\\<succ>\\<^sub>t) vs\n                       (keys_to_list\n                         (tail\n                           (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                     (insert_list\n                       (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                     v))", "have \"f \\<in> set (insert_list f fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> set (insert_list f fs)", "by (simp add: set_insert_list)"], ["proof (state)\nthis:\n  f \\<in> set (insert_list f fs)\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew gs\n                     (merge_wrt (\\<succ>\\<^sub>t) vs\n                       (keys_to_list\n                         (tail\n                           (monom_mult (1::'b) (pp_of_term v - lp g) g))))\n                     (insert_list\n                       (monom_mult (1::'b) (pp_of_term v - lp g) g) fs)\n                     v))", "with snd_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n  f \\<in> set (insert_list f fs)", "show \"f \\<in> set (snd (sym_preproc_addnew gs ts' (insert_list f fs) v))\""], ["proof (prove)\nusing this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n  f \\<in> set (insert_list f fs)\n\ngoal (1 subgoal):\n 1. f \\<in> set (snd (sym_preproc_addnew gs ts' (insert_list f fs) v))", ".."], ["proof (state)\nthis:\n  f \\<in> set (snd (sym_preproc_addnew gs ts' (insert_list f fs) v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term v - lp g) g\n  \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))\n\ngoal (1 subgoal):\n 1. h \\<noteq> g \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. h \\<noteq> g \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "case False"], ["proof (state)\nthis:\n  h \\<noteq> g\n\ngoal (1 subgoal):\n 1. h \\<noteq> g \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "with Cons(2)"], ["proof (chain)\npicking this:\n  g \\<in> set (h # gs)\n  h \\<noteq> g", "have \"g \\<in> set gs\""], ["proof (prove)\nusing this:\n  g \\<in> set (h # gs)\n  h \\<noteq> g\n\ngoal (1 subgoal):\n 1. g \\<in> set gs", "by simp"], ["proof (state)\nthis:\n  g \\<in> set gs\n\ngoal (1 subgoal):\n 1. h \\<noteq> g \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "hence *: \"monom_mult 1 ?t g \\<in> set (snd (sym_preproc_addnew gs ts' fs' v))\" for ts' fs'"], ["proof (prove)\nusing this:\n  g \\<in> set gs\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew gs ts' fs' v))", "by (rule Cons(1))"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term v - lp g) g\n  \\<in> set (snd (sym_preproc_addnew gs ?ts'95 ?fs'95 v))\n\ngoal (1 subgoal):\n 1. h \\<noteq> g \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))", "by (simp add: Let_def *)"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term v - lp g) g\n  \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term v - lp g) g\n  \\<in> set (snd (sym_preproc_addnew (h # gs) vs fs v))\n\ngoal:\nNo subgoals!", "qed"], ["", "function sym_preproc_aux :: \"('t \\<Rightarrow>\\<^sub>0 'b::semiring_1) list \\<Rightarrow> 't list \\<Rightarrow> ('t list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list) \\<Rightarrow>\n                              ('t list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list)\" where\n  \"sym_preproc_aux gs ks (vs, fs) =\n    (if vs = [] then\n      (ks, fs)\n    else\n      let v = ord_term_lin.max_list vs; vs' = removeAll v vs in\n        sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)\n    )\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>gs ks vs fs.\n           x = (gs, ks, vs, fs) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>gs ks vs fs gsa ksa vsa fsa.\n       (gs, ks, vs, fs) = (gsa, ksa, vsa, fsa) \\<Longrightarrow>\n       (if vs = [] then (ks, fs)\n        else let v = ord_term_lin.max_list vs; vs' = removeAll v vs\n             in sym_preproc_aux_sumC\n                 (gs, ks @ [v], sym_preproc_addnew gs vs' fs v)) =\n       (if vsa = [] then (ksa, fsa)\n        else let v = ord_term_lin.max_list vsa; vs' = removeAll v vsa\n             in sym_preproc_aux_sumC\n                 (gsa, ksa @ [v], sym_preproc_addnew gsa vs' fsa v))", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All sym_preproc_aux_dom", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. All sym_preproc_aux_dom", "from ex_dgrad"], ["proof (chain)\npicking this:\n  \\<exists>d. dickson_grading d", "obtain d::\"'a \\<Rightarrow> nat\" where dg: \"dickson_grading d\""], ["proof (prove)\nusing this:\n  \\<exists>d. dickson_grading d\n\ngoal (1 subgoal):\n 1. (\\<And>d. dickson_grading d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. All sym_preproc_aux_dom", "let ?R = \"(sym_preproc_aux_term d)::((('t \\<Rightarrow>\\<^sub>0 'b) list \\<times> 't list \\<times> 't list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list) \\<times>\n                                        ('t \\<Rightarrow>\\<^sub>0 'b) list \\<times> 't list \\<times> 't list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. All sym_preproc_aux_dom", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. All sym_preproc_aux_dom", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. wf ?R\n 2. \\<And>gs ks vs fs x xa.\n       \\<lbrakk>vs \\<noteq> []; x = ord_term_lin.max_list vs;\n        xa = removeAll x vs\\<rbrakk>\n       \\<Longrightarrow> ((gs, ks @ [x], sym_preproc_addnew gs xa fs x), gs,\n                          ks, vs, fs)\n                         \\<in> ?R", "from dg"], ["proof (chain)\npicking this:\n  dickson_grading d", "show \"wf ?R\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. wf (sym_preproc_aux_term d)", "by (rule sym_preproc_aux_term_wf)"], ["proof (state)\nthis:\n  wf (sym_preproc_aux_term d)\n\ngoal (1 subgoal):\n 1. \\<And>gs ks vs fs x xa.\n       \\<lbrakk>vs \\<noteq> []; x = ord_term_lin.max_list vs;\n        xa = removeAll x vs\\<rbrakk>\n       \\<Longrightarrow> ((gs, ks @ [x], sym_preproc_addnew gs xa fs x), gs,\n                          ks, vs, fs)\n                         \\<in> sym_preproc_aux_term d", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gs ks vs fs x xa.\n       \\<lbrakk>vs \\<noteq> []; x = ord_term_lin.max_list vs;\n        xa = removeAll x vs\\<rbrakk>\n       \\<Longrightarrow> ((gs, ks @ [x], sym_preproc_addnew gs xa fs x), gs,\n                          ks, vs, fs)\n                         \\<in> sym_preproc_aux_term d", "fix gs::\"('t \\<Rightarrow>\\<^sub>0 'b) list\" and ks vs fs v vs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gs ks vs fs x xa.\n       \\<lbrakk>vs \\<noteq> []; x = ord_term_lin.max_list vs;\n        xa = removeAll x vs\\<rbrakk>\n       \\<Longrightarrow> ((gs, ks @ [x], sym_preproc_addnew gs xa fs x), gs,\n                          ks, vs, fs)\n                         \\<in> sym_preproc_aux_term d", "assume \"vs \\<noteq> []\" and \"v = ord_term_lin.max_list vs\" and vs': \"vs' = removeAll v vs\""], ["proof (state)\nthis:\n  vs \\<noteq> []\n  v = ord_term_lin.max_list vs\n  vs' = removeAll v vs\n\ngoal (1 subgoal):\n 1. \\<And>gs ks vs fs x xa.\n       \\<lbrakk>vs \\<noteq> []; x = ord_term_lin.max_list vs;\n        xa = removeAll x vs\\<rbrakk>\n       \\<Longrightarrow> ((gs, ks @ [x], sym_preproc_addnew gs xa fs x), gs,\n                          ks, vs, fs)\n                         \\<in> sym_preproc_aux_term d", "from this(1, 2)"], ["proof (chain)\npicking this:\n  vs \\<noteq> []\n  v = ord_term_lin.max_list vs", "have v: \"v = ord_term_lin.Max (set vs)\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n  v = ord_term_lin.max_list vs\n\ngoal (1 subgoal):\n 1. v = ord_term_lin.Max (set vs)", "by (simp add: ord_term_lin.max_list_Max)"], ["proof (state)\nthis:\n  v = ord_term_lin.Max (set vs)\n\ngoal (1 subgoal):\n 1. \\<And>gs ks vs fs x xa.\n       \\<lbrakk>vs \\<noteq> []; x = ord_term_lin.max_list vs;\n        xa = removeAll x vs\\<rbrakk>\n       \\<Longrightarrow> ((gs, ks @ [x], sym_preproc_addnew gs xa fs x), gs,\n                          ks, vs, fs)\n                         \\<in> sym_preproc_aux_term d", "obtain vs0 fs0 where eq: \"sym_preproc_addnew gs vs' fs v = (vs0, fs0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs0 fs0.\n        sym_preproc_addnew gs vs' fs v = (vs0, fs0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  sym_preproc_addnew gs vs' fs v = (vs0, fs0)\n\ngoal (1 subgoal):\n 1. \\<And>gs ks vs fs x xa.\n       \\<lbrakk>vs \\<noteq> []; x = ord_term_lin.max_list vs;\n        xa = removeAll x vs\\<rbrakk>\n       \\<Longrightarrow> ((gs, ks @ [x], sym_preproc_addnew gs xa fs x), gs,\n                          ks, vs, fs)\n                         \\<in> sym_preproc_aux_term d", "show \"((gs, ks @ [v], sym_preproc_addnew gs vs' fs v), (gs, ks, vs, fs)) \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((gs, ks @ [v], sym_preproc_addnew gs vs' fs v), gs, ks, vs, fs)\n    \\<in> sym_preproc_aux_term d", "proof (simp add: eq sym_preproc_aux_term_def sym_preproc_aux_term1_def sym_preproc_aux_term2_def,\n           intro conjI bexI ballI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1. t1 \\<in> set vs0 \\<Longrightarrow> t1 \\<prec>\\<^sub>t ?t2.31\n 2. ?t2.31 \\<in> set vs\n 3. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "fix w"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1. t1 \\<in> set vs0 \\<Longrightarrow> t1 \\<prec>\\<^sub>t ?t2.31\n 2. ?t2.31 \\<in> set vs\n 3. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "assume \"w \\<in> set vs0\""], ["proof (state)\nthis:\n  w \\<in> set vs0\n\ngoal (3 subgoals):\n 1. \\<And>t1. t1 \\<in> set vs0 \\<Longrightarrow> t1 \\<prec>\\<^sub>t ?t2.31\n 2. ?t2.31 \\<in> set vs\n 3. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "show \"w \\<prec>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<prec>\\<^sub>t v", "proof (rule fst_sym_preproc_addnew_less)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> set ?vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. w \\<in> set (fst (sym_preproc_addnew ?gs ?vs ?fs v))", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> set ?vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. w \\<in> set (fst (sym_preproc_addnew ?gs ?vs ?fs v))", "assume \"u \\<in> set vs'\""], ["proof (state)\nthis:\n  u \\<in> set vs'\n\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> set ?vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. w \\<in> set (fst (sym_preproc_addnew ?gs ?vs ?fs v))", "thus \"u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  u \\<in> set vs'\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "unfolding vs' v set_removeAll"], ["proof (prove)\nusing this:\n  u \\<in> set vs - {ord_term_lin.Max (set vs)}\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t ord_term_lin.Max (set vs)", "using ord_term_lin.antisym_conv1"], ["proof (prove)\nusing this:\n  u \\<in> set vs - {ord_term_lin.Max (set vs)}\n  \\<not> ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n  (?x \\<preceq>\\<^sub>t ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t ord_term_lin.Max (set vs)", "by fastforce"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. w \\<in> set (fst (sym_preproc_addnew ?gs vs' ?fs v))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<in> set (fst (sym_preproc_addnew ?gs vs' ?fs v))", "from \\<open>w \\<in> set vs0\\<close>"], ["proof (chain)\npicking this:\n  w \\<in> set vs0", "show \"w \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\""], ["proof (prove)\nusing this:\n  w \\<in> set vs0\n\ngoal (1 subgoal):\n 1. w \\<in> set (fst (sym_preproc_addnew gs vs' fs v))", "by (simp add: eq)"], ["proof (state)\nthis:\n  w \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<prec>\\<^sub>t v\n\ngoal (2 subgoals):\n 1. v \\<in> set vs\n 2. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> set vs\n 2. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "from \\<open>vs \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  vs \\<noteq> []", "show \"v \\<in> set vs\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<in> set vs", "by (simp add: v)"], ["proof (state)\nthis:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "from dg"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n                                    (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n     (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))", "by (rule fst_sym_preproc_addnew_dgrad_set_le)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "moreover"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "have \"insert v (set vs') = set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert v (set vs') = set vs", "by (auto simp add: vs' v \\<open>vs \\<noteq> []\\<close>)"], ["proof (state)\nthis:\n  insert v (set vs') = set vs\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "ultimately"], ["proof (chain)\npicking this:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n  insert v (set vs') = set vs", "show \"dgrad_set_le d (pp_of_term ` set vs0) (pp_of_term ` (Keys (set gs) \\<union> set vs))\""], ["proof (prove)\nusing this:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n  insert v (set vs') = set vs\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "by (simp add: eq)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` set vs0)\n   (pp_of_term ` (Keys (set gs) \\<union> set vs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((gs, ks @ [v], sym_preproc_addnew gs vs' fs v), gs, ks, vs, fs)\n  \\<in> sym_preproc_aux_term d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  All sym_preproc_aux_dom\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sym_preproc_aux_Nil: \"sym_preproc_aux gs ks ([], fs) = (ks, fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks ([], fs) = (ks, fs)", "by simp"], ["", "lemma sym_preproc_aux_sorted:\n  assumes \"sorted_wrt (\\<succ>\\<^sub>t) (v # vs)\"\n  shows \"sym_preproc_aux gs ks (v # vs, fs) = sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks (v # vs, fs) =\n    sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks (v # vs, fs) =\n    sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)", "from assms"], ["proof (chain)\npicking this:\n  sorted_wrt (\\<succ>\\<^sub>t) (v # vs)", "have *: \"u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\" for u"], ["proof (prove)\nusing this:\n  sorted_wrt (\\<succ>\\<^sub>t) (v # vs)\n\ngoal (1 subgoal):\n 1. u \\<in> set vs \\<Longrightarrow> u \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  ?u100 \\<in> set vs \\<Longrightarrow> ?u100 \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks (v # vs, fs) =\n    sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)", "have \"ord_term_lin.max_list (v # vs) = ord_term_lin.Max (set (v # vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_term_lin.max_list (v # vs) = ord_term_lin.Max (set (v # vs))", "by (simp add: ord_term_lin.max_list_Max del: ord_term_lin.max_list.simps)"], ["proof (state)\nthis:\n  ord_term_lin.max_list (v # vs) = ord_term_lin.Max (set (v # vs))\n\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks (v # vs, fs) =\n    sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)", "also"], ["proof (state)\nthis:\n  ord_term_lin.max_list (v # vs) = ord_term_lin.Max (set (v # vs))\n\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks (v # vs, fs) =\n    sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)", "have \"... = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_term_lin.Max (set (v # vs)) = v", "proof (rule ord_term_lin.Max_eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (set (v # vs))\n 2. \\<And>y. y \\<in> set (v # vs) \\<Longrightarrow> y \\<preceq>\\<^sub>t v\n 3. v \\<in> set (v # vs)", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (set (v # vs))\n 2. \\<And>y. y \\<in> set (v # vs) \\<Longrightarrow> y \\<preceq>\\<^sub>t v\n 3. v \\<in> set (v # vs)", "assume \"s \\<in> set (v # vs)\""], ["proof (state)\nthis:\n  s \\<in> set (v # vs)\n\ngoal (3 subgoals):\n 1. finite (set (v # vs))\n 2. \\<And>y. y \\<in> set (v # vs) \\<Longrightarrow> y \\<preceq>\\<^sub>t v\n 3. v \\<in> set (v # vs)", "hence \"s = v \\<or> s \\<in> set vs\""], ["proof (prove)\nusing this:\n  s \\<in> set (v # vs)\n\ngoal (1 subgoal):\n 1. s = v \\<or> s \\<in> set vs", "by simp"], ["proof (state)\nthis:\n  s = v \\<or> s \\<in> set vs\n\ngoal (3 subgoals):\n 1. finite (set (v # vs))\n 2. \\<And>y. y \\<in> set (v # vs) \\<Longrightarrow> y \\<preceq>\\<^sub>t v\n 3. v \\<in> set (v # vs)", "thus \"s \\<preceq>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  s = v \\<or> s \\<in> set vs\n\ngoal (1 subgoal):\n 1. s \\<preceq>\\<^sub>t v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s = v \\<Longrightarrow> s \\<preceq>\\<^sub>t v\n 2. s \\<in> set vs \\<Longrightarrow> s \\<preceq>\\<^sub>t v", "assume \"s = v\""], ["proof (state)\nthis:\n  s = v\n\ngoal (2 subgoals):\n 1. s = v \\<Longrightarrow> s \\<preceq>\\<^sub>t v\n 2. s \\<in> set vs \\<Longrightarrow> s \\<preceq>\\<^sub>t v", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = v\n\ngoal (1 subgoal):\n 1. s \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  s \\<preceq>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. s \\<in> set vs \\<Longrightarrow> s \\<preceq>\\<^sub>t v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<in> set vs \\<Longrightarrow> s \\<preceq>\\<^sub>t v", "assume \"s \\<in> set vs\""], ["proof (state)\nthis:\n  s \\<in> set vs\n\ngoal (1 subgoal):\n 1. s \\<in> set vs \\<Longrightarrow> s \\<preceq>\\<^sub>t v", "hence \"s \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  s \\<in> set vs\n\ngoal (1 subgoal):\n 1. s \\<prec>\\<^sub>t v", "by (rule *)"], ["proof (state)\nthis:\n  s \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. s \\<in> set vs \\<Longrightarrow> s \\<preceq>\\<^sub>t v", "thus ?thesis"], ["proof (prove)\nusing this:\n  s \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. s \\<preceq>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  s \\<preceq>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s \\<preceq>\\<^sub>t v\n\ngoal (2 subgoals):\n 1. finite (set (v # vs))\n 2. v \\<in> set (v # vs)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (set (v # vs))\n 2. v \\<in> set (v # vs)", "show \"v \\<in> set (v # vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> set (v # vs)", "by simp"], ["proof (state)\nthis:\n  v \\<in> set (v # vs)\n\ngoal (1 subgoal):\n 1. finite (set (v # vs))", "qed rule"], ["proof (state)\nthis:\n  ord_term_lin.Max (set (v # vs)) = v\n\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks (v # vs, fs) =\n    sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)", "finally"], ["proof (chain)\npicking this:\n  ord_term_lin.max_list (v # vs) = v", "have eq1: \"ord_term_lin.max_list (v # vs) = v\""], ["proof (prove)\nusing this:\n  ord_term_lin.max_list (v # vs) = v\n\ngoal (1 subgoal):\n 1. ord_term_lin.max_list (v # vs) = v", "."], ["proof (state)\nthis:\n  ord_term_lin.max_list (v # vs) = v\n\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks (v # vs, fs) =\n    sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)", "have eq2: \"removeAll v (v # vs) = vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. removeAll v (v # vs) = vs", "proof (simp, rule removeAll_id, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> set vs \\<Longrightarrow> False", "assume \"v \\<in> set vs\""], ["proof (state)\nthis:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. v \\<in> set vs \\<Longrightarrow> False", "hence \"v \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t v", "by (rule *)"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. v \\<in> set vs \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  v \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  removeAll v (v # vs) = vs\n\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks (v # vs, fs) =\n    sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_preproc_aux gs ks (v # vs, fs) =\n    sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)", "by (simp only: sym_preproc_aux.simps eq1 eq2 Let_def, simp)"], ["proof (state)\nthis:\n  sym_preproc_aux gs ks (v # vs, fs) =\n  sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs fs v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sym_preproc_aux_induct [consumes 0, case_names base rec]:\n  assumes base: \"\\<And>ks fs. P ks [] fs (ks, fs)\"\n    and rec: \"\\<And>ks vs fs v vs'. vs \\<noteq> [] \\<Longrightarrow> v = ord_term_lin.Max (set vs) \\<Longrightarrow> vs' = removeAll v vs \\<Longrightarrow>\n                P (ks @ [v]) (fst (sym_preproc_addnew gs vs' fs v)) (snd (sym_preproc_addnew gs vs' fs v))\n                    (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n                P ks vs fs (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))\"\n  shows \"P ks vs fs (sym_preproc_aux gs ks (vs, fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ks vs fs (sym_preproc_aux gs ks (vs, fs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P ks vs fs (sym_preproc_aux gs ks (vs, fs))", "from ex_dgrad"], ["proof (chain)\npicking this:\n  \\<exists>d. dickson_grading d", "obtain d::\"'a \\<Rightarrow> nat\" where dg: \"dickson_grading d\""], ["proof (prove)\nusing this:\n  \\<exists>d. dickson_grading d\n\ngoal (1 subgoal):\n 1. (\\<And>d. dickson_grading d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. P ks vs fs (sym_preproc_aux gs ks (vs, fs))", "let ?R = \"(sym_preproc_aux_term d)::((('t \\<Rightarrow>\\<^sub>0 'b) list \\<times> 't list \\<times> 't list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list) \\<times>\n                                        ('t \\<Rightarrow>\\<^sub>0 'b) list \\<times> 't list \\<times> 't list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. P ks vs fs (sym_preproc_aux gs ks (vs, fs))", "define args where \"args = (gs, ks, vs, fs)\""], ["proof (state)\nthis:\n  args = (gs, ks, vs, fs)\n\ngoal (1 subgoal):\n 1. P ks vs fs (sym_preproc_aux gs ks (vs, fs))", "from dg"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"wf ?R\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. wf (sym_preproc_aux_term d)", "by (rule sym_preproc_aux_term_wf)"], ["proof (state)\nthis:\n  wf (sym_preproc_aux_term d)\n\ngoal (1 subgoal):\n 1. P ks vs fs (sym_preproc_aux gs ks (vs, fs))", "hence \"fst args = gs \\<Longrightarrow> P (fst (snd args)) (fst (snd (snd args))) (snd (snd (snd args)))\n                              (sym_preproc_aux gs (fst (snd args)) (snd (snd args)))\""], ["proof (prove)\nusing this:\n  wf (sym_preproc_aux_term d)\n\ngoal (1 subgoal):\n 1. fst args = gs \\<Longrightarrow>\n    P (fst (snd args)) (fst (snd (snd args))) (snd (snd (snd args)))\n     (sym_preproc_aux gs (fst (snd args)) (snd (snd args)))", "proof induct"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> sym_preproc_aux_term d;\n                    fst y = gs\\<rbrakk>\n                   \\<Longrightarrow> P (fst (snd y)) (fst (snd (snd y)))\n(snd (snd (snd y))) (sym_preproc_aux gs (fst (snd y)) (snd (snd y)));\n        fst x = gs\\<rbrakk>\n       \\<Longrightarrow> P (fst (snd x)) (fst (snd (snd x)))\n                          (snd (snd (snd x)))\n                          (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> sym_preproc_aux_term d;\n                    fst y = gs\\<rbrakk>\n                   \\<Longrightarrow> P (fst (snd y)) (fst (snd (snd y)))\n(snd (snd (snd y))) (sym_preproc_aux gs (fst (snd y)) (snd (snd y)));\n        fst x = gs\\<rbrakk>\n       \\<Longrightarrow> P (fst (snd x)) (fst (snd (snd x)))\n                          (snd (snd (snd x)))\n                          (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))", "assume IH': \"\\<And>y. (y, x) \\<in> sym_preproc_aux_term d \\<Longrightarrow> fst y = gs \\<Longrightarrow>\n                    P (fst (snd y)) (fst (snd (snd y))) (snd (snd (snd y)))\n                      (sym_preproc_aux gs (fst (snd y)) (snd (snd y)))\""], ["proof (state)\nthis:\n  \\<lbrakk>(?y100, x) \\<in> sym_preproc_aux_term d; fst ?y100 = gs\\<rbrakk>\n  \\<Longrightarrow> P (fst (snd ?y100)) (fst (snd (snd ?y100)))\n                     (snd (snd (snd ?y100)))\n                     (sym_preproc_aux gs (fst (snd ?y100))\n                       (snd (snd ?y100)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> sym_preproc_aux_term d;\n                    fst y = gs\\<rbrakk>\n                   \\<Longrightarrow> P (fst (snd y)) (fst (snd (snd y)))\n(snd (snd (snd y))) (sym_preproc_aux gs (fst (snd y)) (snd (snd y)));\n        fst x = gs\\<rbrakk>\n       \\<Longrightarrow> P (fst (snd x)) (fst (snd (snd x)))\n                          (snd (snd (snd x)))\n                          (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))", "assume \"fst x = gs\""], ["proof (state)\nthis:\n  fst x = gs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> sym_preproc_aux_term d;\n                    fst y = gs\\<rbrakk>\n                   \\<Longrightarrow> P (fst (snd y)) (fst (snd (snd y)))\n(snd (snd (snd y))) (sym_preproc_aux gs (fst (snd y)) (snd (snd y)));\n        fst x = gs\\<rbrakk>\n       \\<Longrightarrow> P (fst (snd x)) (fst (snd (snd x)))\n                          (snd (snd (snd x)))\n                          (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))", "then"], ["proof (chain)\npicking this:\n  fst x = gs", "obtain x0 where x: \"x = (gs, x0)\""], ["proof (prove)\nusing this:\n  fst x = gs\n\ngoal (1 subgoal):\n 1. (\\<And>x0. x = (gs, x0) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson eq_fst_iff)"], ["proof (state)\nthis:\n  x = (gs, x0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> sym_preproc_aux_term d;\n                    fst y = gs\\<rbrakk>\n                   \\<Longrightarrow> P (fst (snd y)) (fst (snd (snd y)))\n(snd (snd (snd y))) (sym_preproc_aux gs (fst (snd y)) (snd (snd y)));\n        fst x = gs\\<rbrakk>\n       \\<Longrightarrow> P (fst (snd x)) (fst (snd (snd x)))\n                          (snd (snd (snd x)))\n                          (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))", "obtain ks x1 where x0: \"x0 = (ks, x1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ks x1. x0 = (ks, x1) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson case_prodE case_prodI2)"], ["proof (state)\nthis:\n  x0 = (ks, x1)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> sym_preproc_aux_term d;\n                    fst y = gs\\<rbrakk>\n                   \\<Longrightarrow> P (fst (snd y)) (fst (snd (snd y)))\n(snd (snd (snd y))) (sym_preproc_aux gs (fst (snd y)) (snd (snd y)));\n        fst x = gs\\<rbrakk>\n       \\<Longrightarrow> P (fst (snd x)) (fst (snd (snd x)))\n                          (snd (snd (snd x)))\n                          (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))", "obtain vs fs where x1: \"x1 = (vs, fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs fs. x1 = (vs, fs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson case_prodE case_prodI2)"], ["proof (state)\nthis:\n  x1 = (vs, fs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> sym_preproc_aux_term d;\n                    fst y = gs\\<rbrakk>\n                   \\<Longrightarrow> P (fst (snd y)) (fst (snd (snd y)))\n(snd (snd (snd y))) (sym_preproc_aux gs (fst (snd y)) (snd (snd y)));\n        fst x = gs\\<rbrakk>\n       \\<Longrightarrow> P (fst (snd x)) (fst (snd (snd x)))\n                          (snd (snd (snd x)))\n                          (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))", "from IH'"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?y100, x) \\<in> sym_preproc_aux_term d; fst ?y100 = gs\\<rbrakk>\n  \\<Longrightarrow> P (fst (snd ?y100)) (fst (snd (snd ?y100)))\n                     (snd (snd (snd ?y100)))\n                     (sym_preproc_aux gs (fst (snd ?y100))\n                       (snd (snd ?y100)))", "have IH: \"\\<And>ks' n. ((gs, ks', n), (gs, ks, vs, fs)) \\<in> sym_preproc_aux_term d \\<Longrightarrow>\n                            P ks' (fst n) (snd n) (sym_preproc_aux gs ks' n)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y100, x) \\<in> sym_preproc_aux_term d; fst ?y100 = gs\\<rbrakk>\n  \\<Longrightarrow> P (fst (snd ?y100)) (fst (snd (snd ?y100)))\n                     (snd (snd (snd ?y100)))\n                     (sym_preproc_aux gs (fst (snd ?y100))\n                       (snd (snd ?y100)))\n\ngoal (1 subgoal):\n 1. \\<And>ks' n.\n       ((gs, ks', n), gs, ks, vs, fs)\n       \\<in> sym_preproc_aux_term d \\<Longrightarrow>\n       P ks' (fst n) (snd n) (sym_preproc_aux gs ks' n)", "unfolding x x0 x1"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y100, gs, ks, vs, fs) \\<in> sym_preproc_aux_term d;\n   fst ?y100 = gs\\<rbrakk>\n  \\<Longrightarrow> P (fst (snd ?y100)) (fst (snd (snd ?y100)))\n                     (snd (snd (snd ?y100)))\n                     (sym_preproc_aux gs (fst (snd ?y100))\n                       (snd (snd ?y100)))\n\ngoal (1 subgoal):\n 1. \\<And>ks' n.\n       ((gs, ks', n), gs, ks, vs, fs)\n       \\<in> sym_preproc_aux_term d \\<Longrightarrow>\n       P ks' (fst n) (snd n) (sym_preproc_aux gs ks' n)", "by fastforce"], ["proof (state)\nthis:\n  ((gs, ?ks'100, ?n100), gs, ks, vs, fs)\n  \\<in> sym_preproc_aux_term d \\<Longrightarrow>\n  P ?ks'100 (fst ?n100) (snd ?n100) (sym_preproc_aux gs ?ks'100 ?n100)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> sym_preproc_aux_term d;\n                    fst y = gs\\<rbrakk>\n                   \\<Longrightarrow> P (fst (snd y)) (fst (snd (snd y)))\n(snd (snd (snd y))) (sym_preproc_aux gs (fst (snd y)) (snd (snd y)));\n        fst x = gs\\<rbrakk>\n       \\<Longrightarrow> P (fst (snd x)) (fst (snd (snd x)))\n                          (snd (snd (snd x)))\n                          (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))", "show \"P (fst (snd x)) (fst (snd (snd x))) (snd (snd (snd x)))\n            (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (fst (snd x)) (fst (snd (snd x))) (snd (snd (snd x)))\n     (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))", "proof (simp add: x x0 x1 Let_def, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. vs = [] \\<Longrightarrow> P ks [] fs (ks, fs)\n 2. vs \\<noteq> [] \\<Longrightarrow>\n    P ks vs fs\n     (sym_preproc_aux gs (ks @ [ord_term_lin.max_list vs])\n       (sym_preproc_addnew gs (removeAll (ord_term_lin.max_list vs) vs) fs\n         (ord_term_lin.max_list vs)))", "show \"P ks [] fs (ks, fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ks [] fs (ks, fs)", "by (fact base)"], ["proof (state)\nthis:\n  P ks [] fs (ks, fs)\n\ngoal (1 subgoal):\n 1. vs \\<noteq> [] \\<Longrightarrow>\n    P ks vs fs\n     (sym_preproc_aux gs (ks @ [ord_term_lin.max_list vs])\n       (sym_preproc_addnew gs (removeAll (ord_term_lin.max_list vs) vs) fs\n         (ord_term_lin.max_list vs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. vs \\<noteq> [] \\<Longrightarrow>\n    P ks vs fs\n     (sym_preproc_aux gs (ks @ [ord_term_lin.max_list vs])\n       (sym_preproc_addnew gs (removeAll (ord_term_lin.max_list vs) vs) fs\n         (ord_term_lin.max_list vs)))", "assume \"vs \\<noteq> []\""], ["proof (state)\nthis:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. vs \\<noteq> [] \\<Longrightarrow>\n    P ks vs fs\n     (sym_preproc_aux gs (ks @ [ord_term_lin.max_list vs])\n       (sym_preproc_addnew gs (removeAll (ord_term_lin.max_list vs) vs) fs\n         (ord_term_lin.max_list vs)))", "define v where \"v = ord_term_lin.max_list vs\""], ["proof (state)\nthis:\n  v = ord_term_lin.max_list vs\n\ngoal (1 subgoal):\n 1. vs \\<noteq> [] \\<Longrightarrow>\n    P ks vs fs\n     (sym_preproc_aux gs (ks @ [ord_term_lin.max_list vs])\n       (sym_preproc_addnew gs (removeAll (ord_term_lin.max_list vs) vs) fs\n         (ord_term_lin.max_list vs)))", "from \\<open>vs \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  vs \\<noteq> []", "have v_alt: \"v = ord_term_lin.Max (set vs)\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v = ord_term_lin.Max (set vs)", "unfolding v_def"], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. ord_term_lin.max_list vs = ord_term_lin.Max (set vs)", "by (rule ord_term_lin.max_list_Max)"], ["proof (state)\nthis:\n  v = ord_term_lin.Max (set vs)\n\ngoal (1 subgoal):\n 1. vs \\<noteq> [] \\<Longrightarrow>\n    P ks vs fs\n     (sym_preproc_aux gs (ks @ [ord_term_lin.max_list vs])\n       (sym_preproc_addnew gs (removeAll (ord_term_lin.max_list vs) vs) fs\n         (ord_term_lin.max_list vs)))", "define vs' where \"vs' = removeAll v vs\""], ["proof (state)\nthis:\n  vs' = removeAll v vs\n\ngoal (1 subgoal):\n 1. vs \\<noteq> [] \\<Longrightarrow>\n    P ks vs fs\n     (sym_preproc_aux gs (ks @ [ord_term_lin.max_list vs])\n       (sym_preproc_addnew gs (removeAll (ord_term_lin.max_list vs) vs) fs\n         (ord_term_lin.max_list vs)))", "show \"P ks vs fs (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ks vs fs\n     (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))", "proof (rule rec, fact \\<open>vs \\<noteq> []\\<close>, fact v_alt, fact vs'_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. P (ks @ [v]) (fst (sym_preproc_addnew gs vs' fs v))\n     (snd (sym_preproc_addnew gs vs' fs v))\n     (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))", "let ?n = \"sym_preproc_addnew gs vs' fs v\""], ["proof (state)\ngoal (1 subgoal):\n 1. P (ks @ [v]) (fst (sym_preproc_addnew gs vs' fs v))\n     (snd (sym_preproc_addnew gs vs' fs v))\n     (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))", "obtain vs0 fs0 where eq: \"?n = (vs0, fs0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs0 fs0.\n        sym_preproc_addnew gs vs' fs v = (vs0, fs0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  sym_preproc_addnew gs vs' fs v = (vs0, fs0)\n\ngoal (1 subgoal):\n 1. P (ks @ [v]) (fst (sym_preproc_addnew gs vs' fs v))\n     (snd (sym_preproc_addnew gs vs' fs v))\n     (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))", "show \"P (ks @ [v]) (fst ?n) (snd ?n) (sym_preproc_aux gs (ks @ [v]) ?n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (ks @ [v]) (fst (sym_preproc_addnew gs vs' fs v))\n     (snd (sym_preproc_addnew gs vs' fs v))\n     (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))", "proof (rule IH,\n              simp add: eq sym_preproc_aux_term_def sym_preproc_aux_term1_def sym_preproc_aux_term2_def,\n              intro conjI bexI ballI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1. t1 \\<in> set vs0 \\<Longrightarrow> t1 \\<prec>\\<^sub>t ?t2.103\n 2. ?t2.103 \\<in> set vs\n 3. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1. t1 \\<in> set vs0 \\<Longrightarrow> t1 \\<prec>\\<^sub>t ?t2.103\n 2. ?t2.103 \\<in> set vs\n 3. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "assume \"s \\<in> set vs0\""], ["proof (state)\nthis:\n  s \\<in> set vs0\n\ngoal (3 subgoals):\n 1. \\<And>t1. t1 \\<in> set vs0 \\<Longrightarrow> t1 \\<prec>\\<^sub>t ?t2.103\n 2. ?t2.103 \\<in> set vs\n 3. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "show \"s \\<prec>\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<prec>\\<^sub>t v", "proof (rule fst_sym_preproc_addnew_less)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> set ?vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. s \\<in> set (fst (sym_preproc_addnew ?gs ?vs ?fs v))", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> set ?vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. s \\<in> set (fst (sym_preproc_addnew ?gs ?vs ?fs v))", "assume \"u \\<in> set vs'\""], ["proof (state)\nthis:\n  u \\<in> set vs'\n\ngoal (2 subgoals):\n 1. \\<And>u. u \\<in> set ?vs \\<Longrightarrow> u \\<prec>\\<^sub>t v\n 2. s \\<in> set (fst (sym_preproc_addnew ?gs ?vs ?fs v))", "thus \"u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  u \\<in> set vs'\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "unfolding vs'_def v_alt set_removeAll"], ["proof (prove)\nusing this:\n  u \\<in> set vs - {ord_term_lin.Max (set vs)}\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t ord_term_lin.Max (set vs)", "using ord_term_lin.antisym_conv1"], ["proof (prove)\nusing this:\n  u \\<in> set vs - {ord_term_lin.Max (set vs)}\n  \\<not> ?x \\<prec>\\<^sub>t ?y \\<Longrightarrow>\n  (?x \\<preceq>\\<^sub>t ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t ord_term_lin.Max (set vs)", "by fastforce"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. s \\<in> set (fst (sym_preproc_addnew ?gs vs' ?fs v))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<in> set (fst (sym_preproc_addnew ?gs vs' ?fs v))", "from \\<open>s \\<in> set vs0\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> set vs0", "show \"s \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\""], ["proof (prove)\nusing this:\n  s \\<in> set vs0\n\ngoal (1 subgoal):\n 1. s \\<in> set (fst (sym_preproc_addnew gs vs' fs v))", "by (simp add: eq)"], ["proof (state)\nthis:\n  s \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s \\<prec>\\<^sub>t v\n\ngoal (2 subgoals):\n 1. v \\<in> set vs\n 2. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> set vs\n 2. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "from \\<open>vs \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  vs \\<noteq> []", "show \"v \\<in> set vs\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<in> set vs", "by (simp add: v_alt)"], ["proof (state)\nthis:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "from dg"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n                                        (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n     (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))", "by (rule fst_sym_preproc_addnew_dgrad_set_le)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "moreover"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "have \"insert v (set vs') = set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert v (set vs') = set vs", "by (auto simp add: vs'_def v_alt \\<open>vs \\<noteq> []\\<close>)"], ["proof (state)\nthis:\n  insert v (set vs') = set vs\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "ultimately"], ["proof (chain)\npicking this:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n  insert v (set vs') = set vs", "show \"dgrad_set_le d (pp_of_term ` set vs0) (pp_of_term ` (Keys (set gs) \\<union> set vs))\""], ["proof (prove)\nusing this:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n  insert v (set vs') = set vs\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set vs0)\n     (pp_of_term ` (Keys (set gs) \\<union> set vs))", "by (simp add: eq)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` set vs0)\n   (pp_of_term ` (Keys (set gs) \\<union> set vs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (ks @ [v]) (fst (sym_preproc_addnew gs vs' fs v))\n   (snd (sym_preproc_addnew gs vs' fs v))\n   (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P ks vs fs\n   (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (fst (snd x)) (fst (snd (snd x))) (snd (snd (snd x)))\n   (sym_preproc_aux gs (fst (snd x)) (snd (snd x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst args = gs \\<Longrightarrow>\n  P (fst (snd args)) (fst (snd (snd args))) (snd (snd (snd args)))\n   (sym_preproc_aux gs (fst (snd args)) (snd (snd args)))\n\ngoal (1 subgoal):\n 1. P ks vs fs (sym_preproc_aux gs ks (vs, fs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst args = gs \\<Longrightarrow>\n  P (fst (snd args)) (fst (snd (snd args))) (snd (snd (snd args)))\n   (sym_preproc_aux gs (fst (snd args)) (snd (snd args)))\n\ngoal (1 subgoal):\n 1. P ks vs fs (sym_preproc_aux gs ks (vs, fs))", "by (simp add: args_def)"], ["proof (state)\nthis:\n  P ks vs fs (sym_preproc_aux gs ks (vs, fs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fst_sym_preproc_aux_sorted_wrt:\n  assumes \"sorted_wrt (\\<succ>\\<^sub>t) ks\" and \"\\<And>k v. k \\<in> set ks \\<Longrightarrow> v \\<in> set vs \\<Longrightarrow> v \\<prec>\\<^sub>t k\"\n  shows \"sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc_aux gs ks (vs, fs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc_aux gs ks (vs, fs)))", "using assms"], ["proof (prove)\nusing this:\n  sorted_wrt (\\<succ>\\<^sub>t) ks\n  \\<lbrakk>?k100 \\<in> set ks; ?v100 \\<in> set vs\\<rbrakk>\n  \\<Longrightarrow> ?v100 \\<prec>\\<^sub>t ?k100\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc_aux gs ks (vs, fs)))", "proof (induct gs ks vs fs rule: sym_preproc_aux_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) ks;\n        \\<And>k v.\n           \\<lbrakk>k \\<in> set ks; v \\<in> set []\\<rbrakk>\n           \\<Longrightarrow> v \\<prec>\\<^sub>t k\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t) (fst (ks, fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v]);\n         \\<And>k va.\n            \\<lbrakk>k \\<in> set (ks @ [v]);\n             va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n            \\<Longrightarrow> va \\<prec>\\<^sub>t k\\<rbrakk>\n        \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                           (fst (sym_preproc_aux gs (ks @ [v])\n                                  (sym_preproc_addnew gs vs' fs v)));\n        sorted_wrt (\\<succ>\\<^sub>t) ks;\n        \\<And>k v.\n           \\<lbrakk>k \\<in> set ks; v \\<in> set vs\\<rbrakk>\n           \\<Longrightarrow> v \\<prec>\\<^sub>t k\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fst (sym_preproc_aux gs (ks @ [v])\n                                 (sym_preproc_addnew gs vs' fs v)))", "case (base ks fs)"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) ks\n  \\<lbrakk>?k100 \\<in> set ks; ?v100 \\<in> set []\\<rbrakk>\n  \\<Longrightarrow> ?v100 \\<prec>\\<^sub>t ?k100\n\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) ks;\n        \\<And>k v.\n           \\<lbrakk>k \\<in> set ks; v \\<in> set []\\<rbrakk>\n           \\<Longrightarrow> v \\<prec>\\<^sub>t k\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t) (fst (ks, fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v]);\n         \\<And>k va.\n            \\<lbrakk>k \\<in> set (ks @ [v]);\n             va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n            \\<Longrightarrow> va \\<prec>\\<^sub>t k\\<rbrakk>\n        \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                           (fst (sym_preproc_aux gs (ks @ [v])\n                                  (sym_preproc_addnew gs vs' fs v)));\n        sorted_wrt (\\<succ>\\<^sub>t) ks;\n        \\<And>k v.\n           \\<lbrakk>k \\<in> set ks; v \\<in> set vs\\<rbrakk>\n           \\<Longrightarrow> v \\<prec>\\<^sub>t k\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fst (sym_preproc_aux gs (ks @ [v])\n                                 (sym_preproc_addnew gs vs' fs v)))", "from base(1)"], ["proof (chain)\npicking this:\n  sorted_wrt (\\<succ>\\<^sub>t) ks", "show ?case"], ["proof (prove)\nusing this:\n  sorted_wrt (\\<succ>\\<^sub>t) ks\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (fst (ks, fs))", "by simp"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) (fst (ks, fs))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v]);\n         \\<And>k va.\n            \\<lbrakk>k \\<in> set (ks @ [v]);\n             va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n            \\<Longrightarrow> va \\<prec>\\<^sub>t k\\<rbrakk>\n        \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                           (fst (sym_preproc_aux gs (ks @ [v])\n                                  (sym_preproc_addnew gs vs' fs v)));\n        sorted_wrt (\\<succ>\\<^sub>t) ks;\n        \\<And>k v.\n           \\<lbrakk>k \\<in> set ks; v \\<in> set vs\\<rbrakk>\n           \\<Longrightarrow> v \\<prec>\\<^sub>t k\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fst (sym_preproc_aux gs (ks @ [v])\n                                 (sym_preproc_addnew gs vs' fs v)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v]);\n         \\<And>k va.\n            \\<lbrakk>k \\<in> set (ks @ [v]);\n             va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n            \\<Longrightarrow> va \\<prec>\\<^sub>t k\\<rbrakk>\n        \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                           (fst (sym_preproc_aux gs (ks @ [v])\n                                  (sym_preproc_addnew gs vs' fs v)));\n        sorted_wrt (\\<succ>\\<^sub>t) ks;\n        \\<And>k v.\n           \\<lbrakk>k \\<in> set ks; v \\<in> set vs\\<rbrakk>\n           \\<Longrightarrow> v \\<prec>\\<^sub>t k\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fst (sym_preproc_aux gs (ks @ [v])\n                                 (sym_preproc_addnew gs vs' fs v)))", "case (rec ks vs fs v vs')"], ["proof (state)\nthis:\n  vs \\<noteq> []\n  v = ord_term_lin.Max (set vs)\n  vs' = removeAll v vs\n  \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v]);\n   \\<And>k va.\n      \\<lbrakk>k \\<in> set (ks @ [v]);\n       va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n      \\<Longrightarrow> va \\<prec>\\<^sub>t k\\<rbrakk>\n  \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                     (fst (sym_preproc_aux gs (ks @ [v])\n                            (sym_preproc_addnew gs vs' fs v)))\n  sorted_wrt (\\<succ>\\<^sub>t) ks\n  \\<lbrakk>?k100 \\<in> set ks; ?v100 \\<in> set vs\\<rbrakk>\n  \\<Longrightarrow> ?v100 \\<prec>\\<^sub>t ?k100\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v]);\n         \\<And>k va.\n            \\<lbrakk>k \\<in> set (ks @ [v]);\n             va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n            \\<Longrightarrow> va \\<prec>\\<^sub>t k\\<rbrakk>\n        \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                           (fst (sym_preproc_aux gs (ks @ [v])\n                                  (sym_preproc_addnew gs vs' fs v)));\n        sorted_wrt (\\<succ>\\<^sub>t) ks;\n        \\<And>k v.\n           \\<lbrakk>k \\<in> set ks; v \\<in> set vs\\<rbrakk>\n           \\<Longrightarrow> v \\<prec>\\<^sub>t k\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fst (sym_preproc_aux gs (ks @ [v])\n                                 (sym_preproc_addnew gs vs' fs v)))", "from rec(1)"], ["proof (chain)\npicking this:\n  vs \\<noteq> []", "have \"v \\<in> set vs\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<in> set vs", "by (simp add: rec(2))"], ["proof (state)\nthis:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v]);\n         \\<And>k va.\n            \\<lbrakk>k \\<in> set (ks @ [v]);\n             va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n            \\<Longrightarrow> va \\<prec>\\<^sub>t k\\<rbrakk>\n        \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                           (fst (sym_preproc_aux gs (ks @ [v])\n                                  (sym_preproc_addnew gs vs' fs v)));\n        sorted_wrt (\\<succ>\\<^sub>t) ks;\n        \\<And>k v.\n           \\<lbrakk>k \\<in> set ks; v \\<in> set vs\\<rbrakk>\n           \\<Longrightarrow> v \\<prec>\\<^sub>t k\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fst (sym_preproc_aux gs (ks @ [v])\n                                 (sym_preproc_addnew gs vs' fs v)))", "from rec(1)"], ["proof (chain)\npicking this:\n  vs \\<noteq> []", "have *: \"\\<And>u. u \\<in> set vs' \\<Longrightarrow> u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> set vs' \\<Longrightarrow> u \\<prec>\\<^sub>t v", "unfolding rec(2, 3) set_removeAll"], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> set vs - {ord_term_lin.Max (set vs)} \\<Longrightarrow>\n       u \\<prec>\\<^sub>t ord_term_lin.Max (set vs)", "using ord_term_lin.antisym_conv3"], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n  \\<not> ?y \\<prec>\\<^sub>t ?x \\<Longrightarrow>\n  (\\<not> ?x \\<prec>\\<^sub>t ?y) = (?x = ?y)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> set vs - {ord_term_lin.Max (set vs)} \\<Longrightarrow>\n       u \\<prec>\\<^sub>t ord_term_lin.Max (set vs)", "by force"], ["proof (state)\nthis:\n  ?u100 \\<in> set vs' \\<Longrightarrow> ?u100 \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v]);\n         \\<And>k va.\n            \\<lbrakk>k \\<in> set (ks @ [v]);\n             va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n            \\<Longrightarrow> va \\<prec>\\<^sub>t k\\<rbrakk>\n        \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                           (fst (sym_preproc_aux gs (ks @ [v])\n                                  (sym_preproc_addnew gs vs' fs v)));\n        sorted_wrt (\\<succ>\\<^sub>t) ks;\n        \\<And>k v.\n           \\<lbrakk>k \\<in> set ks; v \\<in> set vs\\<rbrakk>\n           \\<Longrightarrow> v \\<prec>\\<^sub>t k\\<rbrakk>\n       \\<Longrightarrow> sorted_wrt (\\<succ>\\<^sub>t)\n                          (fst (sym_preproc_aux gs (ks @ [v])\n                                 (sym_preproc_addnew gs vs' fs v)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t)\n     (fst (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)))", "proof (rule rec(4))"], ["proof (state)\ngoal (2 subgoals):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v])\n 2. \\<And>k va.\n       \\<lbrakk>k \\<in> set (ks @ [v]);\n        va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n       \\<Longrightarrow> va \\<prec>\\<^sub>t k", "show \"sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v])", "proof (simp add: sorted_wrt_append rec(5), rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ks \\<Longrightarrow> v \\<prec>\\<^sub>t x", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ks \\<Longrightarrow> v \\<prec>\\<^sub>t x", "assume \"k \\<in> set ks\""], ["proof (state)\nthis:\n  k \\<in> set ks\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set ks \\<Longrightarrow> v \\<prec>\\<^sub>t x", "from this \\<open>v \\<in> set vs\\<close>"], ["proof (chain)\npicking this:\n  k \\<in> set ks\n  v \\<in> set vs", "show \"v \\<prec>\\<^sub>t k\""], ["proof (prove)\nusing this:\n  k \\<in> set ks\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t k", "by (rule rec(6))"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) (ks @ [v])\n\ngoal (1 subgoal):\n 1. \\<And>k va.\n       \\<lbrakk>k \\<in> set (ks @ [v]);\n        va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n       \\<Longrightarrow> va \\<prec>\\<^sub>t k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k va.\n       \\<lbrakk>k \\<in> set (ks @ [v]);\n        va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n       \\<Longrightarrow> va \\<prec>\\<^sub>t k", "fix k u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k va.\n       \\<lbrakk>k \\<in> set (ks @ [v]);\n        va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n       \\<Longrightarrow> va \\<prec>\\<^sub>t k", "assume \"k \\<in> set (ks @ [v])\" and \"u \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\""], ["proof (state)\nthis:\n  k \\<in> set (ks @ [v])\n  u \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. \\<And>k va.\n       \\<lbrakk>k \\<in> set (ks @ [v]);\n        va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n       \\<Longrightarrow> va \\<prec>\\<^sub>t k", "from * this(2)"], ["proof (chain)\npicking this:\n  ?u100 \\<in> set vs' \\<Longrightarrow> ?u100 \\<prec>\\<^sub>t v\n  u \\<in> set (fst (sym_preproc_addnew gs vs' fs v))", "have \"u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  ?u100 \\<in> set vs' \\<Longrightarrow> ?u100 \\<prec>\\<^sub>t v\n  u \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "by (rule fst_sym_preproc_addnew_less)"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>k va.\n       \\<lbrakk>k \\<in> set (ks @ [v]);\n        va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n       \\<Longrightarrow> va \\<prec>\\<^sub>t k", "from \\<open>k \\<in> set (ks @ [v])\\<close>"], ["proof (chain)\npicking this:\n  k \\<in> set (ks @ [v])", "have \"k \\<in> set ks \\<or> k = v\""], ["proof (prove)\nusing this:\n  k \\<in> set (ks @ [v])\n\ngoal (1 subgoal):\n 1. k \\<in> set ks \\<or> k = v", "by auto"], ["proof (state)\nthis:\n  k \\<in> set ks \\<or> k = v\n\ngoal (1 subgoal):\n 1. \\<And>k va.\n       \\<lbrakk>k \\<in> set (ks @ [v]);\n        va \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\\<rbrakk>\n       \\<Longrightarrow> va \\<prec>\\<^sub>t k", "thus \"u \\<prec>\\<^sub>t k\""], ["proof (prove)\nusing this:\n  k \\<in> set ks \\<or> k = v\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t k", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<in> set ks \\<Longrightarrow> u \\<prec>\\<^sub>t k\n 2. k = v \\<Longrightarrow> u \\<prec>\\<^sub>t k", "assume \"k \\<in> set ks\""], ["proof (state)\nthis:\n  k \\<in> set ks\n\ngoal (2 subgoals):\n 1. k \\<in> set ks \\<Longrightarrow> u \\<prec>\\<^sub>t k\n 2. k = v \\<Longrightarrow> u \\<prec>\\<^sub>t k", "from this \\<open>v \\<in> set vs\\<close>"], ["proof (chain)\npicking this:\n  k \\<in> set ks\n  v \\<in> set vs", "have \"v \\<prec>\\<^sub>t k\""], ["proof (prove)\nusing this:\n  k \\<in> set ks\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. v \\<prec>\\<^sub>t k", "by (rule rec(6))"], ["proof (state)\nthis:\n  v \\<prec>\\<^sub>t k\n\ngoal (2 subgoals):\n 1. k \\<in> set ks \\<Longrightarrow> u \\<prec>\\<^sub>t k\n 2. k = v \\<Longrightarrow> u \\<prec>\\<^sub>t k", "with \\<open>u \\<prec>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  u \\<prec>\\<^sub>t v\n  v \\<prec>\\<^sub>t k", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t v\n  v \\<prec>\\<^sub>t k\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t k", "by simp"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t k\n\ngoal (1 subgoal):\n 1. k = v \\<Longrightarrow> u \\<prec>\\<^sub>t k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k = v \\<Longrightarrow> u \\<prec>\\<^sub>t k", "assume \"k = v\""], ["proof (state)\nthis:\n  k = v\n\ngoal (1 subgoal):\n 1. k = v \\<Longrightarrow> u \\<prec>\\<^sub>t k", "with \\<open>u \\<prec>\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  u \\<prec>\\<^sub>t v\n  k = v", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<prec>\\<^sub>t v\n  k = v\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t k", "by simp"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t)\n   (fst (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fst_sym_preproc_aux_complete:\n  assumes \"Keys (set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list)) = set ks \\<union> set vs\"\n  shows \"set (fst (sym_preproc_aux gs ks (vs, fs))) = Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_aux gs ks (vs, fs))) =\n    Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))", "using assms"], ["proof (prove)\nusing this:\n  Keys (set fs) = set ks \\<union> set vs\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_aux gs ks (vs, fs))) =\n    Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))", "proof (induct gs ks vs fs rule: sym_preproc_aux_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       Keys (set fs) = set ks \\<union> set [] \\<Longrightarrow>\n       set (fst (ks, fs)) = Keys (set (snd (ks, fs)))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "case (base ks fs)"], ["proof (state)\nthis:\n  Keys (set fs) = set ks \\<union> set []\n\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       Keys (set fs) = set ks \\<union> set [] \\<Longrightarrow>\n       set (fst (ks, fs)) = Keys (set (snd (ks, fs)))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "thus ?case"], ["proof (prove)\nusing this:\n  Keys (set fs) = set ks \\<union> set []\n\ngoal (1 subgoal):\n 1. set (fst (ks, fs)) = Keys (set (snd (ks, fs)))", "by simp"], ["proof (state)\nthis:\n  set (fst (ks, fs)) = Keys (set (snd (ks, fs)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "case (rec ks vs fs v vs')"], ["proof (state)\nthis:\n  vs \\<noteq> []\n  v = ord_term_lin.Max (set vs)\n  vs' = removeAll v vs\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n  set (ks @ [v]) \\<union>\n  set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n  set (fst (sym_preproc_aux gs (ks @ [v])\n             (sym_preproc_addnew gs vs' fs v))) =\n  Keys\n   (set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v))))\n  Keys (set fs) = set ks \\<union> set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "from rec(1)"], ["proof (chain)\npicking this:\n  vs \\<noteq> []", "have \"v \\<in> set vs\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<in> set vs", "by (simp add: rec(2))"], ["proof (state)\nthis:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "hence eq: \"insert v (set vs') = set vs\""], ["proof (prove)\nusing this:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. insert v (set vs') = set vs", "by (auto simp add: rec(3))"], ["proof (state)\nthis:\n  insert v (set vs') = set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "also"], ["proof (state)\nthis:\n  insert v (set vs') = set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "from rec(5)"], ["proof (chain)\npicking this:\n  Keys (set fs) = set ks \\<union> set vs", "have \"... \\<subseteq> Keys (set fs)\""], ["proof (prove)\nusing this:\n  Keys (set fs) = set ks \\<union> set vs\n\ngoal (1 subgoal):\n 1. set vs \\<subseteq> Keys (set fs)", "by simp"], ["proof (state)\nthis:\n  set vs \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "also"], ["proof (state)\nthis:\n  set vs \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "from snd_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))", "have \"... \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\""], ["proof (prove)\nusing this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n\ngoal (1 subgoal):\n 1. Keys (set fs)\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "by (rule Keys_mono)"], ["proof (state)\nthis:\n  Keys (set fs)\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "finally"], ["proof (chain)\npicking this:\n  insert v (set vs')\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "have \"... = ... \\<union> (insert v (set vs'))\""], ["proof (prove)\nusing this:\n  insert v (set vs')\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n    Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n    insert v (set vs')", "by blast"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n  insert v (set vs')\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "also"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n  insert v (set vs')\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "have \"... = Keys (set fs) \\<union> insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n    insert v (set vs') =\n    Keys (set fs) \\<union>\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))", "by (fact Keys_snd_sym_preproc_addnew)"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n  insert v (set vs') =\n  Keys (set fs) \\<union>\n  insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "also"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n  insert v (set vs') =\n  Keys (set fs) \\<union>\n  insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "have \"... = (set ks \\<union> (insert v (set vs'))) \\<union> (insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set fs) \\<union>\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v))) =\n    set ks \\<union> insert v (set vs') \\<union>\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))", "by (simp only: rec(5) eq)"], ["proof (state)\nthis:\n  Keys (set fs) \\<union>\n  insert v (set (fst (sym_preproc_addnew gs vs' fs v))) =\n  set ks \\<union> insert v (set vs') \\<union>\n  insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "also"], ["proof (state)\nthis:\n  Keys (set fs) \\<union>\n  insert v (set (fst (sym_preproc_addnew gs vs' fs v))) =\n  set ks \\<union> insert v (set vs') \\<union>\n  insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "have \"... = set (ks @ [v]) \\<union> (set vs' \\<union> set (fst (sym_preproc_addnew gs vs' fs v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ks \\<union> insert v (set vs') \\<union>\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v))) =\n    set (ks @ [v]) \\<union>\n    (set vs' \\<union> set (fst (sym_preproc_addnew gs vs' fs v)))", "by auto"], ["proof (state)\nthis:\n  set ks \\<union> insert v (set vs') \\<union>\n  insert v (set (fst (sym_preproc_addnew gs vs' fs v))) =\n  set (ks @ [v]) \\<union>\n  (set vs' \\<union> set (fst (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "also"], ["proof (state)\nthis:\n  set ks \\<union> insert v (set vs') \\<union>\n  insert v (set (fst (sym_preproc_addnew gs vs' fs v))) =\n  set (ks @ [v]) \\<union>\n  (set vs' \\<union> set (fst (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "from fst_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  set ?vs \\<subseteq> set (fst (sym_preproc_addnew ?gs ?vs ?fs ?v))", "have \"... = set (ks @ [v]) \\<union> set (fst (sym_preproc_addnew gs vs' fs v))\""], ["proof (prove)\nusing this:\n  set ?vs \\<subseteq> set (fst (sym_preproc_addnew ?gs ?vs ?fs ?v))\n\ngoal (1 subgoal):\n 1. set (ks @ [v]) \\<union>\n    (set vs' \\<union> set (fst (sym_preproc_addnew gs vs' fs v))) =\n    set (ks @ [v]) \\<union> set (fst (sym_preproc_addnew gs vs' fs v))", "by blast"], ["proof (state)\nthis:\n  set (ks @ [v]) \\<union>\n  (set vs' \\<union> set (fst (sym_preproc_addnew gs vs' fs v))) =\n  set (ks @ [v]) \\<union> set (fst (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n        set (ks @ [v]) \\<union>\n        set (fst (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n        set (fst (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v))) =\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))));\n        Keys (set fs) = set ks \\<union> set vs\\<rbrakk>\n       \\<Longrightarrow> set (fst (sym_preproc_aux gs (ks @ [v])\n                                    (sym_preproc_addnew gs vs' fs v))) =\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))", "finally"], ["proof (chain)\npicking this:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n  set (ks @ [v]) \\<union> set (fst (sym_preproc_addnew gs vs' fs v))", "show ?case"], ["proof (prove)\nusing this:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) =\n  set (ks @ [v]) \\<union> set (fst (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v))) =\n    Keys\n     (set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v))))", "by (rule rec(4))"], ["proof (state)\nthis:\n  set (fst (sym_preproc_aux gs (ks @ [v])\n             (sym_preproc_addnew gs vs' fs v))) =\n  Keys\n   (set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snd_sym_preproc_aux_superset: \"set fs \\<subseteq> set (snd (sym_preproc_aux gs ks (vs, fs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<subseteq> set (snd (sym_preproc_aux gs ks (vs, fs)))", "proof (induct fs rule: sym_preproc_aux_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ks fs. set fs \\<subseteq> set (snd (ks, fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (snd (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                               (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> set fs\n                         \\<subseteq> set\n(snd (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)))", "case (base ks fs)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>ks fs. set fs \\<subseteq> set (snd (ks, fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (snd (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                               (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> set fs\n                         \\<subseteq> set\n(snd (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<subseteq> set (snd (ks, fs))", "by simp"], ["proof (state)\nthis:\n  set fs \\<subseteq> set (snd (ks, fs))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (snd (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                               (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> set fs\n                         \\<subseteq> set\n(snd (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (snd (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                               (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> set fs\n                         \\<subseteq> set\n(snd (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)))", "case (rec ks vs fs v vs')"], ["proof (state)\nthis:\n  vs \\<noteq> []\n  v = ord_term_lin.Max (set vs)\n  vs' = removeAll v vs\n  set (snd (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                         (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (snd (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                               (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> set fs\n                         \\<subseteq> set\n(snd (sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)))", "from snd_sym_preproc_addnew_superset rec(4)"], ["proof (chain)\npicking this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n  set (snd (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                         (sym_preproc_addnew gs vs' fs v)))", "show ?case"], ["proof (prove)\nusing this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n  set (snd (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                         (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. set fs\n    \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                           (sym_preproc_addnew gs vs' fs v)))", "by (rule subset_trans)"], ["proof (state)\nthis:\n  set fs\n  \\<subseteq> set (snd (sym_preproc_aux gs (ks @ [v])\n                         (sym_preproc_addnew gs vs' fs v)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_snd_sym_preproc_auxE:\n  assumes \"p \\<in> set (snd (sym_preproc_aux gs ks (vs, fs)))\"\n  assumes 1: \"p \\<in> set fs \\<Longrightarrow> thesis\"\n  assumes 2: \"\\<And>g t. g \\<in> set gs \\<Longrightarrow> p = monom_mult 1 t g \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_aux gs ks (vs, fs)))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?g100 \\<in> set gs; p = monom_mult (1::'b) ?t100 ?g100\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "proof (induct gs ks vs fs arbitrary: thesis rule: sym_preproc_aux_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ks fs thesis.\n       \\<lbrakk>p \\<in> set (snd (ks, fs));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g t.\n           \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>ks vs fs v vs' thesis.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<And>thesis.\n           \\<lbrakk>p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n (sym_preproc_addnew gs vs' fs v)));\n            p \\<in> set (snd (sym_preproc_addnew gs vs' fs\n                               v)) \\<Longrightarrow>\n            thesis;\n            \\<And>g t.\n               \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n               \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                           (sym_preproc_addnew gs vs' fs v)));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g t.\n           \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (base ks fs)"], ["proof (state)\nthis:\n  p \\<in> set (snd (ks, fs))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?g100 \\<in> set gs; p = monom_mult (1::'b) ?t100 ?g100\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>ks fs thesis.\n       \\<lbrakk>p \\<in> set (snd (ks, fs));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g t.\n           \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>ks vs fs v vs' thesis.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<And>thesis.\n           \\<lbrakk>p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n (sym_preproc_addnew gs vs' fs v)));\n            p \\<in> set (snd (sym_preproc_addnew gs vs' fs\n                               v)) \\<Longrightarrow>\n            thesis;\n            \\<And>g t.\n               \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n               \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                           (sym_preproc_addnew gs vs' fs v)));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g t.\n           \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from base(1)"], ["proof (chain)\npicking this:\n  p \\<in> set (snd (ks, fs))", "have \"p \\<in> set fs\""], ["proof (prove)\nusing this:\n  p \\<in> set (snd (ks, fs))\n\ngoal (1 subgoal):\n 1. p \\<in> set fs", "by simp"], ["proof (state)\nthis:\n  p \\<in> set fs\n\ngoal (2 subgoals):\n 1. \\<And>ks fs thesis.\n       \\<lbrakk>p \\<in> set (snd (ks, fs));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g t.\n           \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>ks vs fs v vs' thesis.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<And>thesis.\n           \\<lbrakk>p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n (sym_preproc_addnew gs vs' fs v)));\n            p \\<in> set (snd (sym_preproc_addnew gs vs' fs\n                               v)) \\<Longrightarrow>\n            thesis;\n            \\<And>g t.\n               \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n               \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                           (sym_preproc_addnew gs vs' fs v)));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g t.\n           \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  p \\<in> set fs\n\ngoal (1 subgoal):\n 1. thesis", "by (rule base(2))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs' thesis.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<And>thesis.\n           \\<lbrakk>p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n (sym_preproc_addnew gs vs' fs v)));\n            p \\<in> set (snd (sym_preproc_addnew gs vs' fs\n                               v)) \\<Longrightarrow>\n            thesis;\n            \\<And>g t.\n               \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n               \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                           (sym_preproc_addnew gs vs' fs v)));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g t.\n           \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs' thesis.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<And>thesis.\n           \\<lbrakk>p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n (sym_preproc_addnew gs vs' fs v)));\n            p \\<in> set (snd (sym_preproc_addnew gs vs' fs\n                               v)) \\<Longrightarrow>\n            thesis;\n            \\<And>g t.\n               \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n               \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                           (sym_preproc_addnew gs vs' fs v)));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g t.\n           \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (rec ks vs fs v vs')"], ["proof (state)\nthis:\n  vs \\<noteq> []\n  v = ord_term_lin.Max (set vs)\n  vs' = removeAll v vs\n  \\<lbrakk>p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v)));\n   p \\<in> set (snd (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n   ?thesis100;\n   \\<And>g t.\n      \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n      \\<Longrightarrow> ?thesis100\\<rbrakk>\n  \\<Longrightarrow> ?thesis100\n  p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v)))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?g100 \\<in> set gs; p = monom_mult (1::'b) ?t100 ?g100\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs' thesis.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<And>thesis.\n           \\<lbrakk>p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n (sym_preproc_addnew gs vs' fs v)));\n            p \\<in> set (snd (sym_preproc_addnew gs vs' fs\n                               v)) \\<Longrightarrow>\n            thesis;\n            \\<And>g t.\n               \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n               \\<Longrightarrow> thesis\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                           (sym_preproc_addnew gs vs' fs v)));\n        p \\<in> set fs \\<Longrightarrow> thesis;\n        \\<And>g t.\n           \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from rec(5)"], ["proof (chain)\npicking this:\n  p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v)))", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. thesis", "proof (rule rec(4))"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> set (snd (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n    thesis\n 2. \\<And>g t.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"p \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\""], ["proof (state)\nthis:\n  p \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n\ngoal (2 subgoals):\n 1. p \\<in> set (snd (sym_preproc_addnew gs vs' fs v)) \\<Longrightarrow>\n    thesis\n 2. \\<And>g t.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. thesis", "proof (rule in_snd_sym_preproc_addnewE)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> set fs \\<Longrightarrow> thesis\n 2. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"p \\<in> set fs\""], ["proof (state)\nthis:\n  p \\<in> set fs\n\ngoal (2 subgoals):\n 1. p \\<in> set fs \\<Longrightarrow> thesis\n 2. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> set fs\n\ngoal (1 subgoal):\n 1. thesis", "by (rule rec(6))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix g s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"g \\<in> set gs\" and \"p = monom_mult 1 s g\""], ["proof (state)\nthis:\n  g \\<in> set gs\n  p = monom_mult (1::'b) s g\n\ngoal (1 subgoal):\n 1. \\<And>g s.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) s g\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> set gs\n  p = monom_mult (1::'b) s g\n\ngoal (1 subgoal):\n 1. thesis", "by (rule rec(7))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix g t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"g \\<in> set gs\" and \"p = monom_mult 1 t g\""], ["proof (state)\nthis:\n  g \\<in> set gs\n  p = monom_mult (1::'b) t g\n\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>g \\<in> set gs; p = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> set gs\n  p = monom_mult (1::'b) t g\n\ngoal (1 subgoal):\n 1. thesis", "by (rule rec(7))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snd_sym_preproc_aux_pmdl:\n  \"pmdl (set gs \\<union> set (snd (sym_preproc_aux gs ks (ts, fs)))) = pmdl (set gs \\<union> set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc_aux gs ks (ts, fs)))) =\n    pmdl (set gs \\<union> set fs)", "proof (induct fs rule: sym_preproc_aux_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       pmdl (set gs \\<union> set (snd (ks, fs))) =\n       pmdl (set gs \\<union> set fs)\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v)))) =\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> pmdl\n                          (set gs \\<union>\n                           set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v)))) =\n                         pmdl (set gs \\<union> set fs)", "case (base ks fs)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       pmdl (set gs \\<union> set (snd (ks, fs))) =\n       pmdl (set gs \\<union> set fs)\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v)))) =\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> pmdl\n                          (set gs \\<union>\n                           set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v)))) =\n                         pmdl (set gs \\<union> set fs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set gs \\<union> set (snd (ks, fs))) =\n    pmdl (set gs \\<union> set fs)", "by simp"], ["proof (state)\nthis:\n  pmdl (set gs \\<union> set (snd (ks, fs))) = pmdl (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v)))) =\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> pmdl\n                          (set gs \\<union>\n                           set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v)))) =\n                         pmdl (set gs \\<union> set fs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v)))) =\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> pmdl\n                          (set gs \\<union>\n                           set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v)))) =\n                         pmdl (set gs \\<union> set fs)", "case (rec ks vs fs v vs')"], ["proof (state)\nthis:\n  vs \\<noteq> []\n  v = ord_term_lin.Max (set vs)\n  vs' = removeAll v vs\n  pmdl\n   (set gs \\<union>\n    set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v)))) =\n  pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v)))) =\n        pmdl\n         (set gs \\<union>\n          set (snd (sym_preproc_addnew gs vs' fs v)))\\<rbrakk>\n       \\<Longrightarrow> pmdl\n                          (set gs \\<union>\n                           set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v)))) =\n                         pmdl (set gs \\<union> set fs)", "from rec(4) sym_preproc_addnew_pmdl"], ["proof (chain)\npicking this:\n  pmdl\n   (set gs \\<union>\n    set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v)))) =\n  pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v)))\n  pmdl (set ?gs \\<union> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))) =\n  pmdl (set ?gs \\<union> set ?fs)", "show ?case"], ["proof (prove)\nusing this:\n  pmdl\n   (set gs \\<union>\n    set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v)))) =\n  pmdl (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v)))\n  pmdl (set ?gs \\<union> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))) =\n  pmdl (set ?gs \\<union> set ?fs)\n\ngoal (1 subgoal):\n 1. pmdl\n     (set gs \\<union>\n      set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v)))) =\n    pmdl (set gs \\<union> set fs)", "by (rule trans)"], ["proof (state)\nthis:\n  pmdl\n   (set gs \\<union>\n    set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v)))) =\n  pmdl (set gs \\<union> set fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snd_sym_preproc_aux_dgrad_set_le:\n  assumes \"dickson_grading d\" and \"set vs \\<subseteq> Keys (set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list))\"\n  shows \"dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))) (pp_of_term ` Keys (set gs \\<union> set fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_aux gs ks (vs, fs)))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "using assms(2)"], ["proof (prove)\nusing this:\n  set vs \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_aux gs ks (vs, fs)))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "proof (induct fs rule: sym_preproc_aux_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       set [] \\<subseteq> Keys (set fs) \\<Longrightarrow>\n       dgrad_set_le d (pp_of_term ` Keys (set (snd (ks, fs))))\n        (pp_of_term ` Keys (set gs \\<union> set fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "case (base ks fs)"], ["proof (state)\nthis:\n  set [] \\<subseteq> Keys (set fs)\n\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       set [] \\<subseteq> Keys (set fs) \\<Longrightarrow>\n       dgrad_set_le d (pp_of_term ` Keys (set (snd (ks, fs))))\n        (pp_of_term ` Keys (set gs \\<union> set fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` Keys (set (snd (ks, fs))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "by (rule dgrad_set_le_subset, simp add: Keys_Un image_Un)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` Keys (set (snd (ks, fs))))\n   (pp_of_term ` Keys (set gs \\<union> set fs))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "case (rec ks vs fs v vs')"], ["proof (state)\nthis:\n  vs \\<noteq> []\n  v = ord_term_lin.Max (set vs)\n  vs' = removeAll v vs\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys\n               (set (snd (sym_preproc_addnew gs vs' fs\n                           v))) \\<Longrightarrow>\n  dgrad_set_le d\n   (pp_of_term `\n    Keys\n     (set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v)))))\n   (pp_of_term `\n    Keys (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))))\n  set vs \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "let ?n = \"sym_preproc_addnew gs vs' fs v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "from rec(1)"], ["proof (chain)\npicking this:\n  vs \\<noteq> []", "have \"v \\<in> set vs\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<in> set vs", "by (simp add: rec(2))"], ["proof (state)\nthis:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "hence set_vs: \"insert v (set vs') = set vs\""], ["proof (prove)\nusing this:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. insert v (set vs') = set vs", "by (auto simp add: rec(3))"], ["proof (state)\nthis:\n  insert v (set vs') = set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "from rec(5)"], ["proof (chain)\npicking this:\n  set vs \\<subseteq> Keys (set fs)", "have eq: \"Keys (set fs) \\<union> (Keys (set gs) \\<union> set vs) = Keys (set gs) \\<union> Keys (set fs)\""], ["proof (prove)\nusing this:\n  set vs \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. Keys (set fs) \\<union> (Keys (set gs) \\<union> set vs) =\n    Keys (set gs) \\<union> Keys (set fs)", "by blast"], ["proof (state)\nthis:\n  Keys (set fs) \\<union> (Keys (set gs) \\<union> set vs) =\n  Keys (set gs) \\<union> Keys (set fs)\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "have \"dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc_aux gs (ks @ [v]) ?n))))\n                        (pp_of_term ` Keys (set gs \\<union> set (snd ?n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      Keys\n       (set (snd (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v)))))\n     (pp_of_term `\n      Keys (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))))", "proof (rule rec(4))"], ["proof (state)\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "have \"set (fst ?n) \\<subseteq> Keys (set (snd ?n)) \\<union> insert v (set vs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n                insert v (set vs')", "by (simp only: Keys_snd_sym_preproc_addnew, blast)"], ["proof (state)\nthis:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n              insert v (set vs')\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "also"], ["proof (state)\nthis:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n              insert v (set vs')\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "have \"... = Keys (set (snd ?n)) \\<union> (set vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n    insert v (set vs') =\n    Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs", "by (simp only: set_vs)"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n  insert v (set vs') =\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "also"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n  insert v (set vs') =\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "have \"... \\<subseteq> Keys (set (snd ?n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "assume \"u \\<in> set vs\""], ["proof (state)\nthis:\n  u \\<in> set vs\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "with rec(5)"], ["proof (chain)\npicking this:\n  set vs \\<subseteq> Keys (set fs)\n  u \\<in> set vs", "have \"u \\<in> Keys (set fs)\""], ["proof (prove)\nusing this:\n  set vs \\<subseteq> Keys (set fs)\n  u \\<in> set vs\n\ngoal (1 subgoal):\n 1. u \\<in> Keys (set fs)", ".."], ["proof (state)\nthis:\n  u \\<in> Keys (set fs)\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "then"], ["proof (chain)\npicking this:\n  u \\<in> Keys (set fs)", "obtain f where \"f \\<in> set fs\" and \"u \\<in> keys f\""], ["proof (prove)\nusing this:\n  u \\<in> Keys (set fs)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> set fs; u \\<in> keys f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_KeysE)"], ["proof (state)\nthis:\n  f \\<in> set fs\n  u \\<in> keys f\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "from this(1) snd_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  f \\<in> set fs\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))", "have \"f \\<in> set (snd ?n)\""], ["proof (prove)\nusing this:\n  f \\<in> set fs\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n\ngoal (1 subgoal):\n 1. f \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", ".."], ["proof (state)\nthis:\n  f \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "with \\<open>u \\<in> keys f\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys f\n  f \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "have \"u \\<in> Keys (set (snd ?n))\""], ["proof (prove)\nusing this:\n  u \\<in> keys f\n  f \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. u \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "by (rule in_KeysI)"], ["proof (state)\nthis:\n  u \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "}"], ["proof (state)\nthis:\n  ?u102 \\<in> set vs \\<Longrightarrow>\n  ?u102 \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?u102 \\<in> set vs \\<Longrightarrow>\n  ?u102 \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "by auto"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "finally"], ["proof (chain)\npicking this:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "show \"set (fst ?n) \\<subseteq> Keys (set (snd ?n))\""], ["proof (prove)\nusing this:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "."], ["proof (state)\nthis:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term `\n    Keys\n     (set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v)))))\n   (pp_of_term `\n    Keys (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "also"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term `\n    Keys\n     (set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v)))))\n   (pp_of_term `\n    Keys (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "have \"dgrad_set_le d ... (pp_of_term ` Keys (set gs \\<union> set fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      Keys (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "proof (simp only: image_Un Keys_Un dgrad_set_le_Un, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. dgrad_set_le d (pp_of_term ` Keys (set gs))\n     (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))\n 2. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))", "show \"dgrad_set_le d (pp_of_term ` Keys (set gs)) (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` Keys (set gs))\n     (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))", "by (rule dgrad_set_le_subset, simp)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` Keys (set gs))\n   (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))", "have \"dgrad_set_le d (pp_of_term ` Keys (set (snd ?n))) (pp_of_term ` (Keys (set fs) \\<union> insert v (set (fst ?n))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term `\n      (Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew gs vs' fs v)))))", "by (rule dgrad_set_le_subset, auto simp only: Keys_snd_sym_preproc_addnew[symmetric])"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term `\n    (Keys (set fs) \\<union>\n     insert v (set (fst (sym_preproc_addnew gs vs' fs v)))))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))", "also"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term `\n    (Keys (set fs) \\<union>\n     insert v (set (fst (sym_preproc_addnew gs vs' fs v)))))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))", "have \"dgrad_set_le d ... (pp_of_term ` Keys (set fs) \\<union> pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      (Keys (set fs) \\<union>\n       insert v (set (fst (sym_preproc_addnew gs vs' fs v)))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))", "proof (simp only: dgrad_set_le_Un image_Un, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. dgrad_set_le d (pp_of_term ` Keys (set fs))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))\n 2. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "show \"dgrad_set_le d (pp_of_term ` Keys (set fs))\n            (pp_of_term ` Keys (set fs) \\<union> (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` Keys (set fs))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "by (rule dgrad_set_le_subset, blast)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` Keys (set fs))\n   (pp_of_term ` Keys (set fs) \\<union>\n    (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "have \"dgrad_set_le d (pp_of_term ` {v}) (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` {v})\n     (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))", "by (rule dgrad_set_le_subset, simp)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` {v})\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "moreover"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` {v})\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "from assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"dgrad_set_le d (pp_of_term ` set (fst ?n)) (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n     (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))", "by (rule fst_sym_preproc_addnew_dgrad_set_le)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "ultimately"], ["proof (chain)\npicking this:\n  dgrad_set_le d (pp_of_term ` {v})\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))", "have \"dgrad_set_le d (pp_of_term ` ({v} \\<union> set (fst ?n))) (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\""], ["proof (prove)\nusing this:\n  dgrad_set_le d (pp_of_term ` {v})\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n  dgrad_set_le d (pp_of_term ` set (fst (sym_preproc_addnew gs vs' fs v)))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))", "by (simp only: dgrad_set_le_Un image_Un)"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "also"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "have \"dgrad_set_le d (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n                                (pp_of_term ` (Keys (set fs) \\<union> (Keys (set gs) \\<union> insert v (set vs'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n     (pp_of_term `\n      (Keys (set fs) \\<union> (Keys (set gs) \\<union> insert v (set vs'))))", "by (rule dgrad_set_le_subset, blast)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n   (pp_of_term `\n    (Keys (set fs) \\<union> (Keys (set gs) \\<union> insert v (set vs'))))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "finally"], ["proof (chain)\npicking this:\n  dgrad_set_le d\n   (pp_of_term ` ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term `\n    (Keys (set fs) \\<union> (Keys (set gs) \\<union> insert v (set vs'))))", "show \"dgrad_set_le d (pp_of_term ` insert v (set (fst ?n)))\n                                   (pp_of_term ` Keys (set fs) \\<union> (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))\""], ["proof (prove)\nusing this:\n  dgrad_set_le d\n   (pp_of_term ` ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term `\n    (Keys (set fs) \\<union> (Keys (set gs) \\<union> insert v (set vs'))))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set fs) \\<union>\n      (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))", "by (simp add: image_Un)"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term ` Keys (set fs) \\<union>\n    (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` insert v (set vs')))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term `\n    (Keys (set fs) \\<union>\n     insert v (set (fst (sym_preproc_addnew gs vs' fs v)))))\n   (pp_of_term ` Keys (set fs) \\<union>\n    pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))", "finally"], ["proof (chain)\npicking this:\n  dgrad_set_le d\n   (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term ` Keys (set fs) \\<union>\n    pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))", "show \"dgrad_set_le d (pp_of_term ` Keys (set (snd ?n))) (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))\""], ["proof (prove)\nusing this:\n  dgrad_set_le d\n   (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term ` Keys (set fs) \\<union>\n    pp_of_term ` (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n     (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))", "by (simp only: set_vs eq, metis eq image_Un)"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term ` Keys (set gs) \\<union> pp_of_term ` Keys (set fs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term `\n    Keys (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))))\n   (pp_of_term ` Keys (set gs \\<union> set fs))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        dgrad_set_le d\n         (pp_of_term `\n          Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v)))))\n         (pp_of_term `\n          Keys\n           (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v))));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> dgrad_set_le d\n                          (pp_of_term `\n                           Keys\n                            (set (snd (sym_preproc_aux gs (ks @ [v])\n  (sym_preproc_addnew gs vs' fs v)))))\n                          (pp_of_term ` Keys (set gs \\<union> set fs))", "finally"], ["proof (chain)\npicking this:\n  dgrad_set_le d\n   (pp_of_term `\n    Keys\n     (set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v)))))\n   (pp_of_term ` Keys (set gs \\<union> set fs))", "show ?case"], ["proof (prove)\nusing this:\n  dgrad_set_le d\n   (pp_of_term `\n    Keys\n     (set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v)))))\n   (pp_of_term ` Keys (set gs \\<union> set fs))\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      Keys\n       (set (snd (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v)))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "."], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term `\n    Keys\n     (set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v)))))\n   (pp_of_term ` Keys (set gs \\<union> set fs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma components_snd_sym_preproc_aux_subset:\n  assumes \"set vs \\<subseteq> Keys (set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list))\"\n  shows \"component_of_term ` Keys (set (snd (sym_preproc_aux gs ks (vs, fs)))) \\<subseteq>\n          component_of_term ` Keys (set gs \\<union> set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))\n    \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)", "using assms"], ["proof (prove)\nusing this:\n  set vs \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))\n    \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)", "proof (induct fs rule: sym_preproc_aux_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       set [] \\<subseteq> Keys (set fs) \\<Longrightarrow>\n       component_of_term ` Keys (set (snd (ks, fs)))\n       \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "case (base ks fs)"], ["proof (state)\nthis:\n  set [] \\<subseteq> Keys (set fs)\n\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       set [] \\<subseteq> Keys (set fs) \\<Longrightarrow>\n       component_of_term ` Keys (set (snd (ks, fs)))\n       \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (ks, fs)))\n    \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)", "by (simp add: Keys_Un image_Un)"], ["proof (state)\nthis:\n  component_of_term ` Keys (set (snd (ks, fs)))\n  \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "case (rec ks vs fs v vs')"], ["proof (state)\nthis:\n  vs \\<noteq> []\n  v = ord_term_lin.Max (set vs)\n  vs' = removeAll v vs\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys\n               (set (snd (sym_preproc_addnew gs vs' fs\n                           v))) \\<Longrightarrow>\n  component_of_term `\n  Keys\n   (set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v))))\n  \\<subseteq> component_of_term `\n              Keys\n               (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v)))\n  set vs \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "let ?n = \"sym_preproc_addnew gs vs' fs v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "from rec(1)"], ["proof (chain)\npicking this:\n  vs \\<noteq> []", "have \"v \\<in> set vs\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<in> set vs", "by (simp add: rec(2))"], ["proof (state)\nthis:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "hence set_vs: \"insert v (set vs') = set vs\""], ["proof (prove)\nusing this:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. insert v (set vs') = set vs", "by (auto simp add: rec(3))"], ["proof (state)\nthis:\n  insert v (set vs') = set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "from rec(5)"], ["proof (chain)\npicking this:\n  set vs \\<subseteq> Keys (set fs)", "have eq: \"Keys (set fs) \\<union> (Keys (set gs) \\<union> set vs) = Keys (set gs) \\<union> Keys (set fs)\""], ["proof (prove)\nusing this:\n  set vs \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. Keys (set fs) \\<union> (Keys (set gs) \\<union> set vs) =\n    Keys (set gs) \\<union> Keys (set fs)", "by blast"], ["proof (state)\nthis:\n  Keys (set fs) \\<union> (Keys (set gs) \\<union> set vs) =\n  Keys (set gs) \\<union> Keys (set fs)\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "have \"component_of_term ` Keys (set (snd (sym_preproc_aux gs (ks @ [v]) ?n))) \\<subseteq>\n                        component_of_term ` Keys (set gs \\<union> set (snd ?n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    Keys\n     (set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v))))\n    \\<subseteq> component_of_term `\n                Keys\n                 (set gs \\<union>\n                  set (snd (sym_preproc_addnew gs vs' fs v)))", "proof (rule rec(4))"], ["proof (state)\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "have \"set (fst ?n) \\<subseteq> Keys (set (snd ?n)) \\<union> insert v (set vs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n                insert v (set vs')", "by (simp only: Keys_snd_sym_preproc_addnew, blast)"], ["proof (state)\nthis:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n              insert v (set vs')\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "also"], ["proof (state)\nthis:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n              insert v (set vs')\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "have \"... = Keys (set (snd ?n)) \\<union> (set vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n    insert v (set vs') =\n    Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs", "by (simp only: set_vs)"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n  insert v (set vs') =\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "also"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union>\n  insert v (set vs') =\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "have \"... \\<subseteq> Keys (set (snd ?n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "assume \"u \\<in> set vs\""], ["proof (state)\nthis:\n  u \\<in> set vs\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "with rec(5)"], ["proof (chain)\npicking this:\n  set vs \\<subseteq> Keys (set fs)\n  u \\<in> set vs", "have \"u \\<in> Keys (set fs)\""], ["proof (prove)\nusing this:\n  set vs \\<subseteq> Keys (set fs)\n  u \\<in> set vs\n\ngoal (1 subgoal):\n 1. u \\<in> Keys (set fs)", ".."], ["proof (state)\nthis:\n  u \\<in> Keys (set fs)\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "then"], ["proof (chain)\npicking this:\n  u \\<in> Keys (set fs)", "obtain f where \"f \\<in> set fs\" and \"u \\<in> keys f\""], ["proof (prove)\nusing this:\n  u \\<in> Keys (set fs)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> set fs; u \\<in> keys f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_KeysE)"], ["proof (state)\nthis:\n  f \\<in> set fs\n  u \\<in> keys f\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "from this(1) snd_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  f \\<in> set fs\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))", "have \"f \\<in> set (snd ?n)\""], ["proof (prove)\nusing this:\n  f \\<in> set fs\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n\ngoal (1 subgoal):\n 1. f \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", ".."], ["proof (state)\nthis:\n  f \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "with \\<open>u \\<in> keys f\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys f\n  f \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "have \"u \\<in> Keys (set (snd ?n))\""], ["proof (prove)\nusing this:\n  u \\<in> keys f\n  f \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. u \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "by (rule in_KeysI)"], ["proof (state)\nthis:\n  u \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "}"], ["proof (state)\nthis:\n  ?u102 \\<in> set vs \\<Longrightarrow>\n  ?u102 \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?u102 \\<in> set vs \\<Longrightarrow>\n  ?u102 \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "by auto"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Keys (set (snd (sym_preproc_addnew gs vs' fs v))) \\<union> set vs\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "finally"], ["proof (chain)\npicking this:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "show \"set (fst ?n) \\<subseteq> Keys (set (snd ?n))\""], ["proof (prove)\nusing this:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))", "."], ["proof (state)\nthis:\n  set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term `\n  Keys\n   (set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v))))\n  \\<subseteq> component_of_term `\n              Keys\n               (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "also"], ["proof (state)\nthis:\n  component_of_term `\n  Keys\n   (set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v))))\n  \\<subseteq> component_of_term `\n              Keys\n               (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "have \"... \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    Keys (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)", "proof (simp only: image_Un Keys_Un Un_subset_iff, rule, fact Un_upper1)"], ["proof (state)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set gs) \\<union>\n                component_of_term ` Keys (set fs)", "have \"component_of_term ` Keys (set (snd ?n)) \\<subseteq> component_of_term ` (Keys (set fs) \\<union> insert v (set (fst ?n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term `\n                (Keys (set fs) \\<union>\n                 insert v (set (fst (sym_preproc_addnew gs vs' fs v))))", "by (auto simp only: Keys_snd_sym_preproc_addnew[symmetric])"], ["proof (state)\nthis:\n  component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term `\n              (Keys (set fs) \\<union>\n               insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set gs) \\<union>\n                component_of_term ` Keys (set fs)", "also"], ["proof (state)\nthis:\n  component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term `\n              (Keys (set fs) \\<union>\n               insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set gs) \\<union>\n                component_of_term ` Keys (set fs)", "have \"... \\<subseteq> component_of_term ` Keys (set fs) \\<union> component_of_term ` (Keys (set gs) \\<union> insert v (set vs'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    (Keys (set fs) \\<union>\n     insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n    \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n                component_of_term `\n                (Keys (set gs) \\<union> insert v (set vs'))", "proof (simp only: Un_subset_iff image_Un, rule, fact Un_upper1)"], ["proof (state)\ngoal (1 subgoal):\n 1. component_of_term `\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n                (component_of_term ` Keys (set gs) \\<union>\n                 component_of_term ` insert v (set vs'))", "have \"component_of_term ` {v} \\<subseteq> component_of_term ` (Keys (set gs) \\<union> insert v (set vs'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` {v}\n    \\<subseteq> component_of_term `\n                (Keys (set gs) \\<union> insert v (set vs'))", "by simp"], ["proof (state)\nthis:\n  component_of_term ` {v}\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n                (component_of_term ` Keys (set gs) \\<union>\n                 component_of_term ` insert v (set vs'))", "moreover"], ["proof (state)\nthis:\n  component_of_term ` {v}\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n                (component_of_term ` Keys (set gs) \\<union>\n                 component_of_term ` insert v (set vs'))", "have \"component_of_term ` set (fst ?n) \\<subseteq> component_of_term ` (Keys (set gs) \\<union> insert v (set vs'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` set (fst (sym_preproc_addnew gs vs' fs v))\n    \\<subseteq> component_of_term `\n                (Keys (set gs) \\<union> insert v (set vs'))", "by (rule components_fst_sym_preproc_addnew_subset)"], ["proof (state)\nthis:\n  component_of_term ` set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n                (component_of_term ` Keys (set gs) \\<union>\n                 component_of_term ` insert v (set vs'))", "ultimately"], ["proof (chain)\npicking this:\n  component_of_term ` {v}\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n  component_of_term ` set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))", "have \"component_of_term ` ({v} \\<union> set (fst ?n)) \\<subseteq> component_of_term ` (Keys (set gs) \\<union> insert v (set vs'))\""], ["proof (prove)\nusing this:\n  component_of_term ` {v}\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n  component_of_term ` set (fst (sym_preproc_addnew gs vs' fs v))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term `\n                (Keys (set gs) \\<union> insert v (set vs'))", "by (simp only: Un_subset_iff image_Un)"], ["proof (state)\nthis:\n  component_of_term `\n  ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n                (component_of_term ` Keys (set gs) \\<union>\n                 component_of_term ` insert v (set vs'))", "also"], ["proof (state)\nthis:\n  component_of_term `\n  ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n                (component_of_term ` Keys (set gs) \\<union>\n                 component_of_term ` insert v (set vs'))", "have \"component_of_term ` (Keys (set gs) \\<union> insert v (set vs')) \\<subseteq>\n                          component_of_term ` (Keys (set fs) \\<union> (Keys (set gs) \\<union> insert v (set vs')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` (Keys (set gs) \\<union> insert v (set vs'))\n    \\<subseteq> component_of_term `\n                (Keys (set fs) \\<union>\n                 (Keys (set gs) \\<union> insert v (set vs')))", "by blast"], ["proof (state)\nthis:\n  component_of_term ` (Keys (set gs) \\<union> insert v (set vs'))\n  \\<subseteq> component_of_term `\n              (Keys (set fs) \\<union>\n               (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n                (component_of_term ` Keys (set gs) \\<union>\n                 component_of_term ` insert v (set vs'))", "finally"], ["proof (chain)\npicking this:\n  component_of_term `\n  ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term `\n              (Keys (set fs) \\<union>\n               (Keys (set gs) \\<union> insert v (set vs')))", "show \"component_of_term ` insert v (set (fst ?n)) \\<subseteq>\n                        component_of_term ` Keys (set fs) \\<union>\n                        (component_of_term ` Keys (set gs) \\<union> component_of_term ` insert v (set vs'))\""], ["proof (prove)\nusing this:\n  component_of_term `\n  ({v} \\<union> set (fst (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term `\n              (Keys (set fs) \\<union>\n               (Keys (set gs) \\<union> insert v (set vs')))\n\ngoal (1 subgoal):\n 1. component_of_term `\n    insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n                (component_of_term ` Keys (set gs) \\<union>\n                 component_of_term ` insert v (set vs'))", "by (simp add: image_Un)"], ["proof (state)\nthis:\n  component_of_term ` insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n              (component_of_term ` Keys (set gs) \\<union>\n               component_of_term ` insert v (set vs'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term `\n  (Keys (set fs) \\<union>\n   insert v (set (fst (sym_preproc_addnew gs vs' fs v))))\n  \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n              component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set gs) \\<union>\n                component_of_term ` Keys (set fs)", "finally"], ["proof (chain)\npicking this:\n  component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n              component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))", "show \"component_of_term ` Keys (set (snd ?n)) \\<subseteq>\n                    component_of_term ` Keys (set gs) \\<union> component_of_term ` Keys (set fs)\""], ["proof (prove)\nusing this:\n  component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term ` Keys (set fs) \\<union>\n              component_of_term `\n              (Keys (set gs) \\<union> insert v (set vs'))\n\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n    \\<subseteq> component_of_term ` Keys (set gs) \\<union>\n                component_of_term ` Keys (set fs)", "by (simp only: set_vs eq, metis eq image_Un)"], ["proof (state)\nthis:\n  component_of_term ` Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term ` Keys (set gs) \\<union>\n              component_of_term ` Keys (set fs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term `\n  Keys (set gs \\<union> set (snd (sym_preproc_addnew gs vs' fs v)))\n  \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        set (fst (sym_preproc_addnew gs vs' fs v))\n        \\<subseteq> Keys\n                     (set (snd (sym_preproc_addnew gs vs' fs\n                                 v))) \\<Longrightarrow>\n        component_of_term `\n        Keys\n         (set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v))))\n        \\<subseteq> component_of_term `\n                    Keys\n                     (set gs \\<union>\n                      set (snd (sym_preproc_addnew gs vs' fs v)));\n        set vs \\<subseteq> Keys (set fs)\\<rbrakk>\n       \\<Longrightarrow> component_of_term `\n                         Keys\n                          (set (snd (sym_preproc_aux gs (ks @ [v])\n(sym_preproc_addnew gs vs' fs v))))\n                         \\<subseteq> component_of_term `\n                                     Keys (set gs \\<union> set fs)", "finally"], ["proof (chain)\npicking this:\n  component_of_term `\n  Keys\n   (set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v))))\n  \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)", "show ?case"], ["proof (prove)\nusing this:\n  component_of_term `\n  Keys\n   (set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v))))\n  \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)\n\ngoal (1 subgoal):\n 1. component_of_term `\n    Keys\n     (set (snd (sym_preproc_aux gs (ks @ [v])\n                 (sym_preproc_addnew gs vs' fs v))))\n    \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)", "."], ["proof (state)\nthis:\n  component_of_term `\n  Keys\n   (set (snd (sym_preproc_aux gs (ks @ [v])\n               (sym_preproc_addnew gs vs' fs v))))\n  \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snd_sym_preproc_aux_complete:\n  assumes \"\\<And>u' g'. u' \\<in> Keys (set fs) \\<Longrightarrow> u' \\<notin> set vs \\<Longrightarrow> g' \\<in> set gs \\<Longrightarrow> lt g' adds\\<^sub>t u' \\<Longrightarrow>\n            monom_mult 1 (pp_of_term u' - lp g') g' \\<in> set fs\"\n  assumes \"u \\<in> Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))\" and \"g \\<in> set gs\" and \"lt g adds\\<^sub>t u\"\n  shows \"monom_mult (1::'b::semiring_1_no_zero_divisors) (pp_of_term u - lp g) g \\<in>\n          set (snd (sym_preproc_aux gs ks (vs, fs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term u - lp g) g\n    \\<in> set (snd (sym_preproc_aux gs ks (vs, fs)))", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?u'100 \\<in> Keys (set fs); ?u'100 \\<notin> set vs;\n   ?g'100 \\<in> set gs; lt ?g'100 adds\\<^sub>t ?u'100\\<rbrakk>\n  \\<Longrightarrow> monom_mult (1::'b) (pp_of_term ?u'100 - lp ?g'100)\n                     ?g'100\n                    \\<in> set fs\n  u \\<in> Keys (set (snd (sym_preproc_aux gs ks (vs, fs))))\n  g \\<in> set gs\n  lt g adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term u - lp g) g\n    \\<in> set (snd (sym_preproc_aux gs ks (vs, fs)))", "proof (induct fs rule: sym_preproc_aux_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       \\<lbrakk>\\<And>u' g'.\n                   \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set [];\n                    g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                   \\<Longrightarrow> monom_mult (1::'b)\n(pp_of_term u' - lp g') g'\n                                     \\<in> set fs;\n        u \\<in> Keys (set (snd (ks, fs))); g \\<in> set gs;\n        lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (ks, fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "case (base ks fs)"], ["proof (state)\nthis:\n  \\<lbrakk>?u'100 \\<in> Keys (set fs); ?u'100 \\<notin> set [];\n   ?g'100 \\<in> set gs; lt ?g'100 adds\\<^sub>t ?u'100\\<rbrakk>\n  \\<Longrightarrow> monom_mult (1::'b) (pp_of_term ?u'100 - lp ?g'100)\n                     ?g'100\n                    \\<in> set fs\n  u \\<in> Keys (set (snd (ks, fs)))\n  g \\<in> set gs\n  lt g adds\\<^sub>t u\n\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       \\<lbrakk>\\<And>u' g'.\n                   \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set [];\n                    g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                   \\<Longrightarrow> monom_mult (1::'b)\n(pp_of_term u' - lp g') g'\n                                     \\<in> set fs;\n        u \\<in> Keys (set (snd (ks, fs))); g \\<in> set gs;\n        lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (ks, fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "from base(2)"], ["proof (chain)\npicking this:\n  u \\<in> Keys (set (snd (ks, fs)))", "have \"u \\<in> Keys (set fs)\""], ["proof (prove)\nusing this:\n  u \\<in> Keys (set (snd (ks, fs)))\n\ngoal (1 subgoal):\n 1. u \\<in> Keys (set fs)", "by simp"], ["proof (state)\nthis:\n  u \\<in> Keys (set fs)\n\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       \\<lbrakk>\\<And>u' g'.\n                   \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set [];\n                    g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                   \\<Longrightarrow> monom_mult (1::'b)\n(pp_of_term u' - lp g') g'\n                                     \\<in> set fs;\n        u \\<in> Keys (set (snd (ks, fs))); g \\<in> set gs;\n        lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (ks, fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "from this _ base(3, 4)"], ["proof (chain)\npicking this:\n  u \\<in> Keys (set fs)\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  g \\<in> set gs\n  lt g adds\\<^sub>t u", "have \"monom_mult 1 (pp_of_term u - lp g) g \\<in> set fs\""], ["proof (prove)\nusing this:\n  u \\<in> Keys (set fs)\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  g \\<in> set gs\n  lt g adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term u - lp g) g \\<in> set fs", "proof (rule base(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<notin> set []", "show \"u \\<notin> set []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<notin> set []", "by simp"], ["proof (state)\nthis:\n  u \\<notin> set []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term u - lp g) g \\<in> set fs\n\ngoal (2 subgoals):\n 1. \\<And>ks fs.\n       \\<lbrakk>\\<And>u' g'.\n                   \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set [];\n                    g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                   \\<Longrightarrow> monom_mult (1::'b)\n(pp_of_term u' - lp g') g'\n                                     \\<in> set fs;\n        u \\<in> Keys (set (snd (ks, fs))); g \\<in> set gs;\n        lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (ks, fs))\n 2. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "thus ?case"], ["proof (prove)\nusing this:\n  monom_mult (1::'b) (pp_of_term u - lp g) g \\<in> set fs\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term u - lp g) g \\<in> set (snd (ks, fs))", "by simp"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term u - lp g) g \\<in> set (snd (ks, fs))\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "case (rec ks vs fs v vs')"], ["proof (state)\nthis:\n  vs \\<noteq> []\n  v = ord_term_lin.Max (set vs)\n  vs' = removeAll v vs\n  \\<lbrakk>\\<And>u' g'.\n              \\<lbrakk>u' \\<in> Keys\n                                 (set (snd\n  (sym_preproc_addnew gs vs' fs v)));\n               u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n               g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n              \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g')\n                                 g'\n                                \\<in> set\n (snd (sym_preproc_addnew gs vs' fs v));\n   u \\<in> Keys\n            (set (snd (sym_preproc_aux gs (ks @ [v])\n                        (sym_preproc_addnew gs vs' fs v))));\n   g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                    \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                                     (sym_preproc_addnew gs vs' fs v)))\n  \\<lbrakk>?u'100 \\<in> Keys (set fs); ?u'100 \\<notin> set vs;\n   ?g'100 \\<in> set gs; lt ?g'100 adds\\<^sub>t ?u'100\\<rbrakk>\n  \\<Longrightarrow> monom_mult (1::'b) (pp_of_term ?u'100 - lp ?g'100)\n                     ?g'100\n                    \\<in> set fs\n  u \\<in> Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v))))\n  g \\<in> set gs\n  lt g adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "from rec(1)"], ["proof (chain)\npicking this:\n  vs \\<noteq> []", "have \"v \\<in> set vs\""], ["proof (prove)\nusing this:\n  vs \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<in> set vs", "by (simp add: rec(2))"], ["proof (state)\nthis:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "hence set_ts: \"set vs = insert v (set vs')\""], ["proof (prove)\nusing this:\n  v \\<in> set vs\n\ngoal (1 subgoal):\n 1. set vs = insert v (set vs')", "by (auto simp add: rec(3))"], ["proof (state)\nthis:\n  set vs = insert v (set vs')\n\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "let ?n = \"sym_preproc_addnew gs vs' fs v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ks vs fs v vs'.\n       \\<lbrakk>vs \\<noteq> []; v = ord_term_lin.Max (set vs);\n        vs' = removeAll v vs;\n        \\<lbrakk>\\<And>u' g'.\n                    \\<lbrakk>u' \\<in> Keys\n (set (snd (sym_preproc_addnew gs vs' fs v)));\n                     u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n                     g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n                    \\<Longrightarrow> monom_mult (1::'b)\n (pp_of_term u' - lp g') g'\n\\<in> set (snd (sym_preproc_addnew gs vs' fs v));\n         u \\<in> Keys\n                  (set (snd (sym_preproc_aux gs (ks @ [v])\n                              (sym_preproc_addnew gs vs' fs v))));\n         g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                          \\<in> set (snd\n(sym_preproc_aux gs (ks @ [v]) (sym_preproc_addnew gs vs' fs v)));\n        \\<And>u' g'.\n           \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set vs;\n            g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n           \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                             \\<in> set fs;\n        u \\<in> Keys\n                 (set (snd (sym_preproc_aux gs (ks @ [v])\n                             (sym_preproc_addnew gs vs' fs v))));\n        g \\<in> set gs; lt g adds\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u - lp g) g\n                         \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n    (sym_preproc_addnew gs vs' fs v)))", "from _ rec(6, 7, 8)"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  u \\<in> Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v))))\n  g \\<in> set gs\n  lt g adds\\<^sub>t u", "show ?case"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  u \\<in> Keys\n           (set (snd (sym_preproc_aux gs (ks @ [v])\n                       (sym_preproc_addnew gs vs' fs v))))\n  g \\<in> set gs\n  lt g adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term u - lp g) g\n    \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                     (sym_preproc_addnew gs vs' fs v)))", "proof (rule rec(4))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u' g'.\n       \\<lbrakk>u' \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)));\n        u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n        g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                         \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "fix v' g'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u' g'.\n       \\<lbrakk>u' \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)));\n        u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n        g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                         \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "assume \"v' \\<in> Keys (set (snd ?n))\" and \"v' \\<notin> set (fst ?n)\" and \"g' \\<in> set gs\" and \"lt g' adds\\<^sub>t v'\""], ["proof (state)\nthis:\n  v' \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n  v' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v))\n  g' \\<in> set gs\n  lt g' adds\\<^sub>t v'\n\ngoal (1 subgoal):\n 1. \\<And>u' g'.\n       \\<lbrakk>u' \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)));\n        u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n        g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                         \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "from this(1) Keys_snd_sym_preproc_addnew"], ["proof (chain)\npicking this:\n  v' \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n  Keys (set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))) \\<union>\n  insert ?v (set ?vs) =\n  Keys (set ?fs) \\<union>\n  insert ?v (set (fst (sym_preproc_addnew ?gs ?vs ?fs ?v)))", "have \"v' \\<in> Keys (set fs) \\<union> insert v (set (fst ?n))\""], ["proof (prove)\nusing this:\n  v' \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)))\n  Keys (set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))) \\<union>\n  insert ?v (set ?vs) =\n  Keys (set ?fs) \\<union>\n  insert ?v (set (fst (sym_preproc_addnew ?gs ?vs ?fs ?v)))\n\ngoal (1 subgoal):\n 1. v' \\<in> Keys (set fs) \\<union>\n             insert v (set (fst (sym_preproc_addnew gs vs' fs v)))", "by blast"], ["proof (state)\nthis:\n  v' \\<in> Keys (set fs) \\<union>\n           insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. \\<And>u' g'.\n       \\<lbrakk>u' \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)));\n        u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n        g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                         \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "with \\<open>v' \\<notin> set (fst ?n)\\<close>"], ["proof (chain)\npicking this:\n  v' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v))\n  v' \\<in> Keys (set fs) \\<union>\n           insert v (set (fst (sym_preproc_addnew gs vs' fs v)))", "have disj: \"v' \\<in> Keys (set fs) \\<or> v' = v\""], ["proof (prove)\nusing this:\n  v' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v))\n  v' \\<in> Keys (set fs) \\<union>\n           insert v (set (fst (sym_preproc_addnew gs vs' fs v)))\n\ngoal (1 subgoal):\n 1. v' \\<in> Keys (set fs) \\<or> v' = v", "by blast"], ["proof (state)\nthis:\n  v' \\<in> Keys (set fs) \\<or> v' = v\n\ngoal (1 subgoal):\n 1. \\<And>u' g'.\n       \\<lbrakk>u' \\<in> Keys (set (snd (sym_preproc_addnew gs vs' fs v)));\n        u' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v));\n        g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                         \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "show \"monom_mult 1 (pp_of_term v' - lp g') g' \\<in> set (snd ?n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "proof (cases \"v' = v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v' = v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n 2. v' \\<noteq> v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "case True"], ["proof (state)\nthis:\n  v' = v\n\ngoal (2 subgoals):\n 1. v' = v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n 2. v' \\<noteq> v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "from \\<open>g' \\<in> set gs\\<close> \\<open>lt g' adds\\<^sub>t v'\\<close>"], ["proof (chain)\npicking this:\n  g' \\<in> set gs\n  lt g' adds\\<^sub>t v'", "show ?thesis"], ["proof (prove)\nusing this:\n  g' \\<in> set gs\n  lt g' adds\\<^sub>t v'\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "unfolding True"], ["proof (prove)\nusing this:\n  g' \\<in> set gs\n  lt g' adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "by (rule sym_preproc_addnew_complete)"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term v' - lp g') g'\n  \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. v' \\<noteq> v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v' \\<noteq> v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "case False"], ["proof (state)\nthis:\n  v' \\<noteq> v\n\ngoal (1 subgoal):\n 1. v' \\<noteq> v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "with disj"], ["proof (chain)\npicking this:\n  v' \\<in> Keys (set fs) \\<or> v' = v\n  v' \\<noteq> v", "have \"v' \\<in> Keys (set fs)\""], ["proof (prove)\nusing this:\n  v' \\<in> Keys (set fs) \\<or> v' = v\n  v' \\<noteq> v\n\ngoal (1 subgoal):\n 1. v' \\<in> Keys (set fs)", "by simp"], ["proof (state)\nthis:\n  v' \\<in> Keys (set fs)\n\ngoal (1 subgoal):\n 1. v' \\<noteq> v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "moreover"], ["proof (state)\nthis:\n  v' \\<in> Keys (set fs)\n\ngoal (1 subgoal):\n 1. v' \\<noteq> v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "have \"v' \\<notin> set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' \\<notin> set vs", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v' \\<in> set vs \\<Longrightarrow> False", "assume \"v' \\<in> set vs\""], ["proof (state)\nthis:\n  v' \\<in> set vs\n\ngoal (1 subgoal):\n 1. v' \\<in> set vs \\<Longrightarrow> False", "hence \"v' \\<in> set vs'\""], ["proof (prove)\nusing this:\n  v' \\<in> set vs\n\ngoal (1 subgoal):\n 1. v' \\<in> set vs'", "using False"], ["proof (prove)\nusing this:\n  v' \\<in> set vs\n  v' \\<noteq> v\n\ngoal (1 subgoal):\n 1. v' \\<in> set vs'", "by (simp add: rec(3))"], ["proof (state)\nthis:\n  v' \\<in> set vs'\n\ngoal (1 subgoal):\n 1. v' \\<in> set vs \\<Longrightarrow> False", "with fst_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  set ?vs \\<subseteq> set (fst (sym_preproc_addnew ?gs ?vs ?fs ?v))\n  v' \\<in> set vs'", "have \"v' \\<in> set (fst ?n)\""], ["proof (prove)\nusing this:\n  set ?vs \\<subseteq> set (fst (sym_preproc_addnew ?gs ?vs ?fs ?v))\n  v' \\<in> set vs'\n\ngoal (1 subgoal):\n 1. v' \\<in> set (fst (sym_preproc_addnew gs vs' fs v))", ".."], ["proof (state)\nthis:\n  v' \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. v' \\<in> set vs \\<Longrightarrow> False", "with \\<open>v' \\<notin> set (fst ?n)\\<close>"], ["proof (chain)\npicking this:\n  v' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v))\n  v' \\<in> set (fst (sym_preproc_addnew gs vs' fs v))", "show False"], ["proof (prove)\nusing this:\n  v' \\<notin> set (fst (sym_preproc_addnew gs vs' fs v))\n  v' \\<in> set (fst (sym_preproc_addnew gs vs' fs v))\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v' \\<notin> set vs\n\ngoal (1 subgoal):\n 1. v' \\<noteq> v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "ultimately"], ["proof (chain)\npicking this:\n  v' \\<in> Keys (set fs)\n  v' \\<notin> set vs", "have \"monom_mult 1 (pp_of_term v' - lp g') g' \\<in> set fs\""], ["proof (prove)\nusing this:\n  v' \\<in> Keys (set fs)\n  v' \\<notin> set vs\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v' - lp g') g' \\<in> set fs", "using \\<open>g' \\<in> set gs\\<close> \\<open>lt g' adds\\<^sub>t v'\\<close>"], ["proof (prove)\nusing this:\n  v' \\<in> Keys (set fs)\n  v' \\<notin> set vs\n  g' \\<in> set gs\n  lt g' adds\\<^sub>t v'\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v' - lp g') g' \\<in> set fs", "by (rule rec(5))"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term v' - lp g') g' \\<in> set fs\n\ngoal (1 subgoal):\n 1. v' \\<noteq> v \\<Longrightarrow>\n    monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", "with snd_sym_preproc_addnew_superset"], ["proof (chain)\npicking this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n  monom_mult (1::'b) (pp_of_term v' - lp g') g' \\<in> set fs", "show ?thesis"], ["proof (prove)\nusing this:\n  set ?fs \\<subseteq> set (snd (sym_preproc_addnew ?gs ?vs ?fs ?v))\n  monom_mult (1::'b) (pp_of_term v' - lp g') g' \\<in> set fs\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v' - lp g') g'\n    \\<in> set (snd (sym_preproc_addnew gs vs' fs v))", ".."], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term v' - lp g') g'\n  \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term v' - lp g') g'\n  \\<in> set (snd (sym_preproc_addnew gs vs' fs v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term u - lp g) g\n  \\<in> set (snd (sym_preproc_aux gs (ks @ [v])\n                   (sym_preproc_addnew gs vs' fs v)))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition sym_preproc :: \"('t \\<Rightarrow>\\<^sub>0 'b::semiring_1) list \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) list \\<Rightarrow> ('t list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) list)\"\n  where \"sym_preproc gs fs = sym_preproc_aux gs [] (Keys_to_list fs, fs)\""], ["", "lemma sym_preproc_Nil [simp]: \"sym_preproc gs [] = ([], [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_preproc gs [] = ([], [])", "by (simp add: sym_preproc_def)"], ["", "lemma fst_sym_preproc:\n  \"fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "let ?a = \"fst (sym_preproc gs fs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "let ?b = \"Keys_to_list (snd (sym_preproc gs fs))\""], ["proof (state)\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "have \"antisymp (\\<succ>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymp (\\<succ>\\<^sub>t)", "unfolding antisymp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       x \\<succ>\\<^sub>t y \\<longrightarrow>\n       y \\<succ>\\<^sub>t x \\<longrightarrow> x = y", "by fastforce"], ["proof (state)\nthis:\n  antisymp (\\<succ>\\<^sub>t)\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "have \"irreflp (\\<succ>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreflp (\\<succ>\\<^sub>t)", "by (simp add: irreflp_def)"], ["proof (state)\nthis:\n  irreflp (\\<succ>\\<^sub>t)\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "moreover"], ["proof (state)\nthis:\n  irreflp (\\<succ>\\<^sub>t)\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "have \"transp (\\<succ>\\<^sub>t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp (\\<succ>\\<^sub>t)", "unfolding transp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       x \\<succ>\\<^sub>t y \\<longrightarrow>\n       y \\<succ>\\<^sub>t z \\<longrightarrow> x \\<succ>\\<^sub>t z", "by fastforce"], ["proof (state)\nthis:\n  transp (\\<succ>\\<^sub>t)\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "moreover"], ["proof (state)\nthis:\n  transp (\\<succ>\\<^sub>t)\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "have s1: \"sorted_wrt (\\<succ>\\<^sub>t) ?a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc gs fs))", "unfolding sym_preproc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t)\n     (fst (sym_preproc_aux gs [] (Keys_to_list fs, fs)))", "by (rule fst_sym_preproc_aux_sorted_wrt, simp_all)"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc gs fs))\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "ultimately"], ["proof (chain)\npicking this:\n  irreflp (\\<succ>\\<^sub>t)\n  transp (\\<succ>\\<^sub>t)\n  sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc gs fs))", "have d1: \"distinct ?a\""], ["proof (prove)\nusing this:\n  irreflp (\\<succ>\\<^sub>t)\n  transp (\\<succ>\\<^sub>t)\n  sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc gs fs))\n\ngoal (1 subgoal):\n 1. distinct (fst (sym_preproc gs fs))", "by (rule distinct_sorted_wrt_irrefl)"], ["proof (state)\nthis:\n  distinct (fst (sym_preproc gs fs))\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "have s2: \"sorted_wrt (\\<succ>\\<^sub>t) ?b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list (snd (sym_preproc gs fs)))", "by (fact Keys_to_list_sorted_wrt)"], ["proof (state)\nthis:\n  sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list (snd (sym_preproc gs fs)))\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "with \\<open>irreflp (\\<succ>\\<^sub>t)\\<close> \\<open>transp (\\<succ>\\<^sub>t)\\<close>"], ["proof (chain)\npicking this:\n  irreflp (\\<succ>\\<^sub>t)\n  transp (\\<succ>\\<^sub>t)\n  sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list (snd (sym_preproc gs fs)))", "have d2: \"distinct ?b\""], ["proof (prove)\nusing this:\n  irreflp (\\<succ>\\<^sub>t)\n  transp (\\<succ>\\<^sub>t)\n  sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list (snd (sym_preproc gs fs)))\n\ngoal (1 subgoal):\n 1. distinct (Keys_to_list (snd (sym_preproc gs fs)))", "by (rule distinct_sorted_wrt_irrefl)"], ["proof (state)\nthis:\n  distinct (Keys_to_list (snd (sym_preproc gs fs)))\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "from \\<open>antisymp (\\<succ>\\<^sub>t)\\<close> s1 d1 s2 d2"], ["proof (chain)\npicking this:\n  antisymp (\\<succ>\\<^sub>t)\n  sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc gs fs))\n  distinct (fst (sym_preproc gs fs))\n  sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list (snd (sym_preproc gs fs)))\n  distinct (Keys_to_list (snd (sym_preproc gs fs)))", "show ?thesis"], ["proof (prove)\nusing this:\n  antisymp (\\<succ>\\<^sub>t)\n  sorted_wrt (\\<succ>\\<^sub>t) (fst (sym_preproc gs fs))\n  distinct (fst (sym_preproc gs fs))\n  sorted_wrt (\\<succ>\\<^sub>t) (Keys_to_list (snd (sym_preproc gs fs)))\n  distinct (Keys_to_list (snd (sym_preproc gs fs)))\n\ngoal (1 subgoal):\n 1. fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))", "proof (rule sorted_wrt_distinct_set_unique)"], ["proof (state)\ngoal (1 subgoal):\n 1. set (fst (sym_preproc gs fs)) =\n    set (Keys_to_list (snd (sym_preproc gs fs)))", "show \"set ?a = set ?b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fst (sym_preproc gs fs)) =\n    set (Keys_to_list (snd (sym_preproc gs fs)))", "unfolding set_Keys_to_list sym_preproc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fst (sym_preproc_aux gs [] (Keys_to_list fs, fs))) =\n    Keys (set (snd (sym_preproc_aux gs [] (Keys_to_list fs, fs))))", "by (rule fst_sym_preproc_aux_complete, simp add: set_Keys_to_list)"], ["proof (state)\nthis:\n  set (fst (sym_preproc gs fs)) =\n  set (Keys_to_list (snd (sym_preproc gs fs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (sym_preproc gs fs) = Keys_to_list (snd (sym_preproc gs fs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snd_sym_preproc_superset: \"set fs \\<subseteq> set (snd (sym_preproc gs fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<subseteq> set (snd (sym_preproc gs fs))", "by (simp only: sym_preproc_def snd_conv, fact snd_sym_preproc_aux_superset)"], ["", "lemma in_snd_sym_preprocE:\n  assumes \"p \\<in> set (snd (sym_preproc gs fs))\"\n  assumes 1: \"p \\<in> set fs \\<Longrightarrow> thesis\"\n  assumes 2: \"\\<And>g t. g \\<in> set gs \\<Longrightarrow> p = monom_mult 1 t g \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc gs fs))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?g101 \\<in> set gs; p = monom_mult (1::'b) ?t101 ?g101\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "unfolding sym_preproc_def snd_conv"], ["proof (prove)\nusing this:\n  p \\<in> set (snd (sym_preproc_aux gs [] (Keys_to_list fs, fs)))\n  p \\<in> set fs \\<Longrightarrow> thesis\n  \\<lbrakk>?g101 \\<in> set gs; p = monom_mult (1::'b) ?t101 ?g101\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (rule in_snd_sym_preproc_auxE)"], ["", "lemma snd_sym_preproc_pmdl: \"pmdl (set gs \\<union> set (snd (sym_preproc gs fs))) = pmdl (set gs \\<union> set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set gs \\<union> set (snd (sym_preproc gs fs))) =\n    pmdl (set gs \\<union> set fs)", "unfolding sym_preproc_def snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl\n     (set gs \\<union>\n      set (snd (sym_preproc_aux gs [] (Keys_to_list fs, fs)))) =\n    pmdl (set gs \\<union> set fs)", "by (fact snd_sym_preproc_aux_pmdl)"], ["", "lemma snd_sym_preproc_dgrad_set_le:\n  assumes \"dickson_grading d\"\n  shows \"dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc gs fs))))\n                        (pp_of_term ` Keys (set gs \\<union> set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc gs fs))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "unfolding sym_preproc_def snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      Keys (set (snd (sym_preproc_aux gs [] (Keys_to_list fs, fs)))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "using assms"], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      Keys (set (snd (sym_preproc_aux gs [] (Keys_to_list fs, fs)))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "proof (rule snd_sym_preproc_aux_dgrad_set_le)"], ["proof (state)\ngoal (1 subgoal):\n 1. set (Keys_to_list fs) \\<subseteq> Keys (set fs)", "show \"set (Keys_to_list fs) \\<subseteq> Keys (set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Keys_to_list fs) \\<subseteq> Keys (set fs)", "by (simp add: set_Keys_to_list)"], ["proof (state)\nthis:\n  set (Keys_to_list fs) \\<subseteq> Keys (set fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary snd_sym_preproc_dgrad_p_set_le:\n  assumes \"dickson_grading d\"\n  shows \"dgrad_p_set_le d (set (snd (sym_preproc gs fs))) (set gs \\<union> set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (set (snd (sym_preproc gs fs)))\n     (set gs \\<union> set fs)", "unfolding dgrad_p_set_le_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc gs fs))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc gs fs))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d", "show \"dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc gs fs)))) (pp_of_term ` Keys (set gs \\<union> set fs))\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc gs fs))))\n     (pp_of_term ` Keys (set gs \\<union> set fs))", "by (rule snd_sym_preproc_dgrad_set_le)"], ["proof (state)\nthis:\n  dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc gs fs))))\n   (pp_of_term ` Keys (set gs \\<union> set fs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma components_snd_sym_preproc_subset:\n  \"component_of_term ` Keys (set (snd (sym_preproc gs fs))) \\<subseteq>\n          component_of_term ` Keys (set gs \\<union> set (fs::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1_no_zero_divisors) list))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (snd (sym_preproc gs fs)))\n    \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)", "unfolding sym_preproc_def snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    Keys (set (snd (sym_preproc_aux gs [] (Keys_to_list fs, fs))))\n    \\<subseteq> component_of_term ` Keys (set gs \\<union> set fs)", "by (rule components_snd_sym_preproc_aux_subset, simp add: set_Keys_to_list)"], ["", "lemma snd_sym_preproc_complete:\n  assumes \"v \\<in> Keys (set (snd (sym_preproc gs fs)))\" and \"g \\<in> set gs\" and \"lt g adds\\<^sub>t v\"\n  shows \"monom_mult (1::'b::semiring_1_no_zero_divisors) (pp_of_term v - lp g) g \\<in> set (snd (sym_preproc gs fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc gs fs))", "using _ assms"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  v \\<in> Keys (set (snd (sym_preproc gs fs)))\n  g \\<in> set gs\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc gs fs))", "unfolding sym_preproc_def snd_conv"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  v \\<in> Keys (set (snd (sym_preproc_aux gs [] (Keys_to_list fs, fs))))\n  g \\<in> set gs\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term v - lp g) g\n    \\<in> set (snd (sym_preproc_aux gs [] (Keys_to_list fs, fs)))", "proof (rule snd_sym_preproc_aux_complete)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u' g'.\n       \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set (Keys_to_list fs);\n        g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                         \\<in> set fs", "fix u' and g'::\"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u' g'.\n       \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set (Keys_to_list fs);\n        g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                         \\<in> set fs", "assume \"u' \\<in> Keys (set fs)\" and \"u' \\<notin> set (Keys_to_list fs)\""], ["proof (state)\nthis:\n  u' \\<in> Keys (set fs)\n  u' \\<notin> set (Keys_to_list fs)\n\ngoal (1 subgoal):\n 1. \\<And>u' g'.\n       \\<lbrakk>u' \\<in> Keys (set fs); u' \\<notin> set (Keys_to_list fs);\n        g' \\<in> set gs; lt g' adds\\<^sub>t u'\\<rbrakk>\n       \\<Longrightarrow> monom_mult (1::'b) (pp_of_term u' - lp g') g'\n                         \\<in> set fs", "thus \"monom_mult 1 (pp_of_term u' - lp g') g' \\<in> set fs\""], ["proof (prove)\nusing this:\n  u' \\<in> Keys (set fs)\n  u' \\<notin> set (Keys_to_list fs)\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (pp_of_term u' - lp g') g' \\<in> set fs", "by (simp add: set_Keys_to_list)"], ["proof (state)\nthis:\n  monom_mult (1::'b) (pp_of_term u' - lp g') g' \\<in> set fs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* gd_term *)"], ["", "subsection \\<open>\\<open>lin_red\\<close>\\<close>"], ["", "context ordered_term\nbegin"], ["", "definition lin_red :: \"('t \\<Rightarrow>\\<^sub>0 'b::field) set \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> bool\"\n  where \"lin_red F p q \\<equiv> (\\<exists>f\\<in>F. red_single p q f 0)\""], ["", "text \\<open>@{const lin_red} is a restriction of @{const red}, where the reductor (\\<open>f\\<close>) may only be\n  multiplied by a constant factor, i.\\,e. where the power-product is \\<open>0\\<close>.\\<close>"], ["", "lemma lin_redI:\n  assumes \"f \\<in> F\" and \"red_single p q f 0\"\n  shows \"lin_red F p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_red F p q", "unfolding lin_red_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>F. red_single p q f (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>F. red_single p q f (0::'a)", ".."], ["", "lemma lin_redE:\n  assumes \"lin_red F p q\"\n  obtains f::\"'t \\<Rightarrow>\\<^sub>0 'b::field\" where \"f \\<in> F\" and \"red_single p q f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; red_single p q f (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; red_single p q f (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  lin_red F p q", "obtain f where \"f \\<in> F\" and t: \"red_single p q f 0\""], ["proof (prove)\nusing this:\n  lin_red F p q\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; red_single p q f (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lin_red_def"], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>F. red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; red_single p q f (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; red_single p q f (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lin_red_imp_red:\n  assumes \"lin_red F p q\"\n  shows \"red F p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red F p q", "from assms"], ["proof (chain)\npicking this:\n  lin_red F p q", "obtain f where \"f \\<in> F\" and \"red_single p q f 0\""], ["proof (prove)\nusing this:\n  lin_red F p q\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; red_single p q f (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lin_redE)"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. red F p q", "thus ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. red F p q", "by (rule red_setI)"], ["proof (state)\nthis:\n  red F p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lin_red_Un: \"lin_red (F \\<union> G) p q = (lin_red F p q \\<or> lin_red G p q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_red (F \\<union> G) p q = (lin_red F p q \\<or> lin_red G p q)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lin_red (F \\<union> G) p q \\<Longrightarrow>\n    lin_red F p q \\<or> lin_red G p q\n 2. lin_red F p q \\<or> lin_red G p q \\<Longrightarrow>\n    lin_red (F \\<union> G) p q", "assume \"lin_red (F \\<union> G) p q\""], ["proof (state)\nthis:\n  lin_red (F \\<union> G) p q\n\ngoal (2 subgoals):\n 1. lin_red (F \\<union> G) p q \\<Longrightarrow>\n    lin_red F p q \\<or> lin_red G p q\n 2. lin_red F p q \\<or> lin_red G p q \\<Longrightarrow>\n    lin_red (F \\<union> G) p q", "then"], ["proof (chain)\npicking this:\n  lin_red (F \\<union> G) p q", "obtain f where \"f \\<in> F \\<union> G\" and r: \"red_single p q f 0\""], ["proof (prove)\nusing this:\n  lin_red (F \\<union> G) p q\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F \\<union> G; red_single p q f (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lin_redE)"], ["proof (state)\nthis:\n  f \\<in> F \\<union> G\n  red_single p q f (0::'a)\n\ngoal (2 subgoals):\n 1. lin_red (F \\<union> G) p q \\<Longrightarrow>\n    lin_red F p q \\<or> lin_red G p q\n 2. lin_red F p q \\<or> lin_red G p q \\<Longrightarrow>\n    lin_red (F \\<union> G) p q", "from this(1)"], ["proof (chain)\npicking this:\n  f \\<in> F \\<union> G", "show \"lin_red F p q \\<or> lin_red G p q\""], ["proof (prove)\nusing this:\n  f \\<in> F \\<union> G\n\ngoal (1 subgoal):\n 1. lin_red F p q \\<or> lin_red G p q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<in> F \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q\n 2. f \\<in> G \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q", "assume \"f \\<in> F\""], ["proof (state)\nthis:\n  f \\<in> F\n\ngoal (2 subgoals):\n 1. f \\<in> F \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q\n 2. f \\<in> G \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q", "from this r"], ["proof (chain)\npicking this:\n  f \\<in> F\n  red_single p q f (0::'a)", "have \"lin_red F p q\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. lin_red F p q", "by (rule lin_redI)"], ["proof (state)\nthis:\n  lin_red F p q\n\ngoal (2 subgoals):\n 1. f \\<in> F \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q\n 2. f \\<in> G \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q", "thus ?thesis"], ["proof (prove)\nusing this:\n  lin_red F p q\n\ngoal (1 subgoal):\n 1. lin_red F p q \\<or> lin_red G p q", ".."], ["proof (state)\nthis:\n  lin_red F p q \\<or> lin_red G p q\n\ngoal (1 subgoal):\n 1. f \\<in> G \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> G \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q", "assume \"f \\<in> G\""], ["proof (state)\nthis:\n  f \\<in> G\n\ngoal (1 subgoal):\n 1. f \\<in> G \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q", "from this r"], ["proof (chain)\npicking this:\n  f \\<in> G\n  red_single p q f (0::'a)", "have \"lin_red G p q\""], ["proof (prove)\nusing this:\n  f \\<in> G\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. lin_red G p q", "by (rule lin_redI)"], ["proof (state)\nthis:\n  lin_red G p q\n\ngoal (1 subgoal):\n 1. f \\<in> G \\<Longrightarrow> lin_red F p q \\<or> lin_red G p q", "thus ?thesis"], ["proof (prove)\nusing this:\n  lin_red G p q\n\ngoal (1 subgoal):\n 1. lin_red F p q \\<or> lin_red G p q", ".."], ["proof (state)\nthis:\n  lin_red F p q \\<or> lin_red G p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lin_red F p q \\<or> lin_red G p q\n\ngoal (1 subgoal):\n 1. lin_red F p q \\<or> lin_red G p q \\<Longrightarrow>\n    lin_red (F \\<union> G) p q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lin_red F p q \\<or> lin_red G p q \\<Longrightarrow>\n    lin_red (F \\<union> G) p q", "assume \"lin_red F p q \\<or> lin_red G p q\""], ["proof (state)\nthis:\n  lin_red F p q \\<or> lin_red G p q\n\ngoal (1 subgoal):\n 1. lin_red F p q \\<or> lin_red G p q \\<Longrightarrow>\n    lin_red (F \\<union> G) p q", "thus \"lin_red (F \\<union> G) p q\""], ["proof (prove)\nusing this:\n  lin_red F p q \\<or> lin_red G p q\n\ngoal (1 subgoal):\n 1. lin_red (F \\<union> G) p q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lin_red F p q \\<Longrightarrow> lin_red (F \\<union> G) p q\n 2. lin_red G p q \\<Longrightarrow> lin_red (F \\<union> G) p q", "assume \"lin_red F p q\""], ["proof (state)\nthis:\n  lin_red F p q\n\ngoal (2 subgoals):\n 1. lin_red F p q \\<Longrightarrow> lin_red (F \\<union> G) p q\n 2. lin_red G p q \\<Longrightarrow> lin_red (F \\<union> G) p q", "then"], ["proof (chain)\npicking this:\n  lin_red F p q", "obtain f where \"f \\<in> F\" and r: \"red_single p q f 0\""], ["proof (prove)\nusing this:\n  lin_red F p q\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; red_single p q f (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lin_redE)"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f (0::'a)\n\ngoal (2 subgoals):\n 1. lin_red F p q \\<Longrightarrow> lin_red (F \\<union> G) p q\n 2. lin_red G p q \\<Longrightarrow> lin_red (F \\<union> G) p q", "from this(1)"], ["proof (chain)\npicking this:\n  f \\<in> F", "have \"f \\<in> F \\<union> G\""], ["proof (prove)\nusing this:\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. f \\<in> F \\<union> G", "by simp"], ["proof (state)\nthis:\n  f \\<in> F \\<union> G\n\ngoal (2 subgoals):\n 1. lin_red F p q \\<Longrightarrow> lin_red (F \\<union> G) p q\n 2. lin_red G p q \\<Longrightarrow> lin_red (F \\<union> G) p q", "from this r"], ["proof (chain)\npicking this:\n  f \\<in> F \\<union> G\n  red_single p q f (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> F \\<union> G\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. lin_red (F \\<union> G) p q", "by (rule lin_redI)"], ["proof (state)\nthis:\n  lin_red (F \\<union> G) p q\n\ngoal (1 subgoal):\n 1. lin_red G p q \\<Longrightarrow> lin_red (F \\<union> G) p q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lin_red G p q \\<Longrightarrow> lin_red (F \\<union> G) p q", "assume \"lin_red G p q\""], ["proof (state)\nthis:\n  lin_red G p q\n\ngoal (1 subgoal):\n 1. lin_red G p q \\<Longrightarrow> lin_red (F \\<union> G) p q", "then"], ["proof (chain)\npicking this:\n  lin_red G p q", "obtain g where \"g \\<in> G\" and r: \"red_single p q g 0\""], ["proof (prove)\nusing this:\n  lin_red G p q\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> G; red_single p q g (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lin_redE)"], ["proof (state)\nthis:\n  g \\<in> G\n  red_single p q g (0::'a)\n\ngoal (1 subgoal):\n 1. lin_red G p q \\<Longrightarrow> lin_red (F \\<union> G) p q", "from this(1)"], ["proof (chain)\npicking this:\n  g \\<in> G", "have \"g \\<in> F \\<union> G\""], ["proof (prove)\nusing this:\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. g \\<in> F \\<union> G", "by simp"], ["proof (state)\nthis:\n  g \\<in> F \\<union> G\n\ngoal (1 subgoal):\n 1. lin_red G p q \\<Longrightarrow> lin_red (F \\<union> G) p q", "from this r"], ["proof (chain)\npicking this:\n  g \\<in> F \\<union> G\n  red_single p q g (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> F \\<union> G\n  red_single p q g (0::'a)\n\ngoal (1 subgoal):\n 1. lin_red (F \\<union> G) p q", "by (rule lin_redI)"], ["proof (state)\nthis:\n  lin_red (F \\<union> G) p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lin_red (F \\<union> G) p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lin_red_imp_red_rtrancl:\n  assumes \"(lin_red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"(red F)\\<^sup>*\\<^sup>* p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p q", "using assms"], ["proof (prove)\nusing this:\n  (lin_red F)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p q", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* p p\n 2. \\<And>y z.\n       \\<lbrakk>(lin_red F)\\<^sup>*\\<^sup>* p y; lin_red F y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* p p\n 2. \\<And>y z.\n       \\<lbrakk>(lin_red F)\\<^sup>*\\<^sup>* p y; lin_red F y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p p", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p p\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(lin_red F)\\<^sup>*\\<^sup>* p y; lin_red F y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(lin_red F)\\<^sup>*\\<^sup>* p y; lin_red F y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "case (step y z)"], ["proof (state)\nthis:\n  (lin_red F)\\<^sup>*\\<^sup>* p y\n  lin_red F y z\n  (red F)\\<^sup>*\\<^sup>* p y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(lin_red F)\\<^sup>*\\<^sup>* p y; lin_red F y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "from step(2)"], ["proof (chain)\npicking this:\n  lin_red F y z", "have \"red F y z\""], ["proof (prove)\nusing this:\n  lin_red F y z\n\ngoal (1 subgoal):\n 1. red F y z", "by (rule lin_red_imp_red)"], ["proof (state)\nthis:\n  red F y z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(lin_red F)\\<^sup>*\\<^sup>* p y; lin_red F y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "with step(3)"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* p y\n  red F y z", "show ?case"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p y\n  red F y z\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p z", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phull_closed_lin_red:\n  assumes \"phull B \\<subseteq> phull A\" and \"p \\<in> phull A\" and \"lin_red B p q\"\n  shows \"q \\<in> phull A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> phull A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<in> phull A", "from assms(3)"], ["proof (chain)\npicking this:\n  lin_red B p q", "obtain f where \"f \\<in> B\" and \"red_single p q f 0\""], ["proof (prove)\nusing this:\n  lin_red B p q\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> B; red_single p q f (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lin_redE)"], ["proof (state)\nthis:\n  f \\<in> B\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. q \\<in> phull A", "hence q: \"q = p - (lookup p (lt f) / lc f) \\<cdot> f\""], ["proof (prove)\nusing this:\n  f \\<in> B\n  red_single p q f (0::'a)\n\ngoal (1 subgoal):\n 1. q = p - (lookup p (lt f) / lc f) \\<cdot> f", "by (simp add: red_single_def term_simps map_scale_eq_monom_mult)"], ["proof (state)\nthis:\n  q = p - (lookup p (lt f) / lc f) \\<cdot> f\n\ngoal (1 subgoal):\n 1. q \\<in> phull A", "have \"q - p \\<in> phull B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q - p \\<in> phull B", "by (simp add: q, rule phull.span_neg, rule phull.span_scale, rule phull.span_base, fact \\<open>f \\<in> B\\<close>)"], ["proof (state)\nthis:\n  q - p \\<in> phull B\n\ngoal (1 subgoal):\n 1. q \\<in> phull A", "with assms(1)"], ["proof (chain)\npicking this:\n  phull B \\<subseteq> phull A\n  q - p \\<in> phull B", "have \"q - p \\<in> phull A\""], ["proof (prove)\nusing this:\n  phull B \\<subseteq> phull A\n  q - p \\<in> phull B\n\ngoal (1 subgoal):\n 1. q - p \\<in> phull A", ".."], ["proof (state)\nthis:\n  q - p \\<in> phull A\n\ngoal (1 subgoal):\n 1. q \\<in> phull A", "from this assms(2)"], ["proof (chain)\npicking this:\n  q - p \\<in> phull A\n  p \\<in> phull A", "have \"(q - p) + p \\<in> phull A\""], ["proof (prove)\nusing this:\n  q - p \\<in> phull A\n  p \\<in> phull A\n\ngoal (1 subgoal):\n 1. q - p + p \\<in> phull A", "by (rule phull.span_add)"], ["proof (state)\nthis:\n  q - p + p \\<in> phull A\n\ngoal (1 subgoal):\n 1. q \\<in> phull A", "thus ?thesis"], ["proof (prove)\nusing this:\n  q - p + p \\<in> phull A\n\ngoal (1 subgoal):\n 1. q \\<in> phull A", "by simp"], ["proof (state)\nthis:\n  q \\<in> phull A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Reduction\\<close>"], ["", "definition Macaulay_red :: \"'t list \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) list \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::field) list\"\n  where \"Macaulay_red vs fs =\n     (let lts = map lt (filter (\\<lambda>p. p \\<noteq> 0) fs) in\n       filter (\\<lambda>p. p \\<noteq> 0 \\<and> lt p \\<notin> set lts) (mat_to_polys vs (row_echelon (polys_to_mat vs fs)))\n     )\""], ["", "text \\<open>\\<open>Macaulay_red vs fs\\<close> auto-reduces (w.\\,r.\\,t. @{const lin_red}) the given list \\<open>fs\\<close> and returns\n  those non-zero polynomials whose leading terms are not in \\<open>lt_set (set fs)\\<close>.\n  Argument \\<open>vs\\<close> is expected to be \\<open>Keys_to_list fs\\<close>; this list is passed as an argument\n  to @{const Macaulay_red}, because it can be efficiently computed by symbolic preprocessing.\\<close>"], ["", "lemma Macaulay_red_alt:\n  \"Macaulay_red (Keys_to_list fs) fs = filter (\\<lambda>p. lt p \\<notin> lt_set (set fs)) (Macaulay_list fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Macaulay_red (Keys_to_list fs) fs =\n    filter (\\<lambda>p. lt p \\<notin> lt_set (set fs)) (Macaulay_list fs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Macaulay_red (Keys_to_list fs) fs =\n    filter (\\<lambda>p. lt p \\<notin> lt_set (set fs)) (Macaulay_list fs)", "have \"{x \\<in> set fs. x \\<noteq> 0} = set fs - {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> set fs. x \\<noteq> 0} = set fs - {0}", "by blast"], ["proof (state)\nthis:\n  {x \\<in> set fs. x \\<noteq> 0} = set fs - {0}\n\ngoal (1 subgoal):\n 1. Macaulay_red (Keys_to_list fs) fs =\n    filter (\\<lambda>p. lt p \\<notin> lt_set (set fs)) (Macaulay_list fs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {x \\<in> set fs. x \\<noteq> 0} = set fs - {0}\n\ngoal (1 subgoal):\n 1. Macaulay_red (Keys_to_list fs) fs =\n    filter (\\<lambda>p. lt p \\<notin> lt_set (set fs)) (Macaulay_list fs)", "by (simp add: Macaulay_red_def Macaulay_list_def Macaulay_mat_def lt_set_def Let_def)"], ["proof (state)\nthis:\n  Macaulay_red (Keys_to_list fs) fs =\n  filter (\\<lambda>p. lt p \\<notin> lt_set (set fs)) (Macaulay_list fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_Macaulay_red:\n  \"set (Macaulay_red (Keys_to_list fs) fs) = set (Macaulay_list fs) - {p. lt p \\<in> lt_set (set fs)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs) =\n    set (Macaulay_list fs) - {p. lt p \\<in> lt_set (set fs)}", "by (auto simp add: Macaulay_red_alt)"], ["", "lemma Keys_Macaulay_red: \"Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)", "have \"Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set (Macaulay_list fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_red (Keys_to_list fs) fs))\n    \\<subseteq> Keys (set (Macaulay_list fs))", "unfolding set_Macaulay_red"], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_list fs) - {p. lt p \\<in> lt_set (set fs)})\n    \\<subseteq> Keys (set (Macaulay_list fs))", "by (fact Keys_minus)"], ["proof (state)\nthis:\n  Keys (set (Macaulay_red (Keys_to_list fs) fs))\n  \\<subseteq> Keys (set (Macaulay_list fs))\n\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)", "also"], ["proof (state)\nthis:\n  Keys (set (Macaulay_red (Keys_to_list fs) fs))\n  \\<subseteq> Keys (set (Macaulay_list fs))\n\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)", "have \"... \\<subseteq> Keys (set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_list fs)) \\<subseteq> Keys (set fs)", "by (fact Keys_Macaulay_list)"], ["proof (state)\nthis:\n  Keys (set (Macaulay_list fs)) \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)", "finally"], ["proof (chain)\npicking this:\n  Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)", "show ?thesis"], ["proof (prove)\nusing this:\n  Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)\n\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)", "."], ["proof (state)\nthis:\n  Keys (set (Macaulay_red (Keys_to_list fs) fs)) \\<subseteq> Keys (set fs)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ordered_term *)"], ["", "context gd_term\nbegin"], ["", "lemma Macaulay_red_reducible:\n  assumes \"f \\<in> phull (set fs)\" and \"F \\<subseteq> set fs\" and \"lt_set F = lt_set (set fs)\"\n  shows \"(lin_red (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>* f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "define A where \"A = F \\<union> set (Macaulay_red (Keys_to_list fs) fs)\""], ["proof (state)\nthis:\n  A = F \\<union> set (Macaulay_red (Keys_to_list fs) fs)\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "have phull_A: \"phull A \\<subseteq> phull (set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull A \\<subseteq> phull (set fs)", "proof (rule phull.span_subset_spanI, simp add: A_def, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. F \\<subseteq> phull (set fs)\n 2. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "have \"F \\<subseteq> phull F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> phull F", "by (rule phull.span_superset)"], ["proof (state)\nthis:\n  F \\<subseteq> phull F\n\ngoal (2 subgoals):\n 1. F \\<subseteq> phull (set fs)\n 2. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "also"], ["proof (state)\nthis:\n  F \\<subseteq> phull F\n\ngoal (2 subgoals):\n 1. F \\<subseteq> phull (set fs)\n 2. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "from assms(2)"], ["proof (chain)\npicking this:\n  F \\<subseteq> set fs", "have \"... \\<subseteq> phull (set fs)\""], ["proof (prove)\nusing this:\n  F \\<subseteq> set fs\n\ngoal (1 subgoal):\n 1. phull F \\<subseteq> phull (set fs)", "by (rule phull.span_mono)"], ["proof (state)\nthis:\n  phull F \\<subseteq> phull (set fs)\n\ngoal (2 subgoals):\n 1. F \\<subseteq> phull (set fs)\n 2. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "finally"], ["proof (chain)\npicking this:\n  F \\<subseteq> phull (set fs)", "show \"F \\<subseteq> phull (set fs)\""], ["proof (prove)\nusing this:\n  F \\<subseteq> phull (set fs)\n\ngoal (1 subgoal):\n 1. F \\<subseteq> phull (set fs)", "."], ["proof (state)\nthis:\n  F \\<subseteq> phull (set fs)\n\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "have \"set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> set (Macaulay_list fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs)\n    \\<subseteq> set (Macaulay_list fs)", "by (auto simp add: set_Macaulay_red)"], ["proof (state)\nthis:\n  set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> set (Macaulay_list fs)\n\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "also"], ["proof (state)\nthis:\n  set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> set (Macaulay_list fs)\n\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "have \"... \\<subseteq> phull (set (Macaulay_list fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Macaulay_list fs) \\<subseteq> phull (set (Macaulay_list fs))", "by (rule phull.span_superset)"], ["proof (state)\nthis:\n  set (Macaulay_list fs) \\<subseteq> phull (set (Macaulay_list fs))\n\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "also"], ["proof (state)\nthis:\n  set (Macaulay_list fs) \\<subseteq> phull (set (Macaulay_list fs))\n\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "have \"... = phull (set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull (set (Macaulay_list fs)) = phull (set fs)", "by (rule phull_Macaulay_list)"], ["proof (state)\nthis:\n  phull (set (Macaulay_list fs)) = phull (set fs)\n\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "finally"], ["proof (chain)\npicking this:\n  set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "show \"set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)\""], ["proof (prove)\nusing this:\n  set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)\n\ngoal (1 subgoal):\n 1. set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)", "."], ["proof (state)\nthis:\n  set (Macaulay_red (Keys_to_list fs) fs) \\<subseteq> phull (set fs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  phull A \\<subseteq> phull (set fs)\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "have lt_A: \"p \\<in> phull (set fs) \\<Longrightarrow> p \\<noteq> 0 \\<Longrightarrow> (\\<And>g. g \\<in> A \\<Longrightarrow> g \\<noteq> 0 \\<Longrightarrow> lt g = lt p \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\"\n    for p thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> phull (set fs); p \\<noteq> 0;\n     \\<And>g.\n        \\<lbrakk>g \\<in> A; g \\<noteq> 0; lt g = lt p\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> phull (set fs); p \\<noteq> 0;\n     \\<And>g.\n        \\<lbrakk>g \\<in> A; g \\<noteq> 0; lt g = lt p\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"p \\<in> phull (set fs)\" and \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<in> phull (set fs)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> phull (set fs); p \\<noteq> 0;\n     \\<And>g.\n        \\<lbrakk>g \\<in> A; g \\<noteq> 0; lt g = lt p\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  p \\<in> phull (set fs)\n  p \\<noteq> 0", "obtain g where g_in: \"g \\<in> set (Macaulay_list fs)\" and \"g \\<noteq> 0\" and \"lt p = lt g\""], ["proof (prove)\nusing this:\n  p \\<in> phull (set fs)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list fs); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule Macaulay_list_lt)"], ["proof (state)\nthis:\n  g \\<in> set (Macaulay_list fs)\n  g \\<noteq> 0\n  lt p = lt g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> phull (set fs); p \\<noteq> 0;\n     \\<And>g.\n        \\<lbrakk>g \\<in> A; g \\<noteq> 0; lt g = lt p\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume *: \"\\<And>g. g \\<in> A \\<Longrightarrow> g \\<noteq> 0 \\<Longrightarrow> lt g = lt p \\<Longrightarrow> thesis\""], ["proof (state)\nthis:\n  \\<lbrakk>?g101 \\<in> A; ?g101 \\<noteq> 0; lt ?g101 = lt p\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> phull (set fs); p \\<noteq> 0;\n     \\<And>g.\n        \\<lbrakk>g \\<in> A; g \\<noteq> 0; lt g = lt p\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"g \\<in> set (Macaulay_red (Keys_to_list fs) fs)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. g \\<in> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow> thesis\n 2. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "case True"], ["proof (state)\nthis:\n  g \\<in> set (Macaulay_red (Keys_to_list fs) fs)\n\ngoal (2 subgoals):\n 1. g \\<in> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow> thesis\n 2. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "hence \"g \\<in> A\""], ["proof (prove)\nusing this:\n  g \\<in> set (Macaulay_red (Keys_to_list fs) fs)\n\ngoal (1 subgoal):\n 1. g \\<in> A", "by (simp add: A_def)"], ["proof (state)\nthis:\n  g \\<in> A\n\ngoal (2 subgoals):\n 1. g \\<in> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow> thesis\n 2. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "from this \\<open>g \\<noteq> 0\\<close> \\<open>lt p = lt g\\<close>[symmetric]"], ["proof (chain)\npicking this:\n  g \\<in> A\n  g \\<noteq> 0\n  lt g = lt p", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> A\n  g \\<noteq> 0\n  lt g = lt p\n\ngoal (1 subgoal):\n 1. thesis", "by (rule *)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "case False"], ["proof (state)\nthis:\n  g \\<notin> set (Macaulay_red (Keys_to_list fs) fs)\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "with g_in"], ["proof (chain)\npicking this:\n  g \\<in> set (Macaulay_list fs)\n  g \\<notin> set (Macaulay_red (Keys_to_list fs) fs)", "have \"lt g \\<in> lt_set (set fs)\""], ["proof (prove)\nusing this:\n  g \\<in> set (Macaulay_list fs)\n  g \\<notin> set (Macaulay_red (Keys_to_list fs) fs)\n\ngoal (1 subgoal):\n 1. lt g \\<in> lt_set (set fs)", "by (simp add: set_Macaulay_red)"], ["proof (state)\nthis:\n  lt g \\<in> lt_set (set fs)\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  lt g \\<in> lt_set (set fs)\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "have \"... = lt_set F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt_set (set fs) = lt_set F", "by (simp only: assms(3))"], ["proof (state)\nthis:\n  lt_set (set fs) = lt_set F\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  lt g \\<in> lt_set F", "obtain g' where \"g' \\<in> F\" and \"g' \\<noteq> 0\" and \"lt g' = lt g\""], ["proof (prove)\nusing this:\n  lt g \\<in> lt_set F\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<lbrakk>g' \\<in> F; g' \\<noteq> 0; lt g' = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lt_setE)"], ["proof (state)\nthis:\n  g' \\<in> F\n  g' \\<noteq> 0\n  lt g' = lt g\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "from this(1)"], ["proof (chain)\npicking this:\n  g' \\<in> F", "have \"g' \\<in> A\""], ["proof (prove)\nusing this:\n  g' \\<in> F\n\ngoal (1 subgoal):\n 1. g' \\<in> A", "by (simp add: A_def)"], ["proof (state)\nthis:\n  g' \\<in> A\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  g' \\<in> A\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "note \\<open>g' \\<noteq> 0\\<close>"], ["proof (state)\nthis:\n  g' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  g' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "have \"lt g' = lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt g' = lt p", "by (simp only: \\<open>lt p = lt g\\<close> \\<open>lt g' = lt g\\<close>)"], ["proof (state)\nthis:\n  lt g' = lt p\n\ngoal (1 subgoal):\n 1. g \\<notin> set (Macaulay_red (Keys_to_list fs) fs) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  g' \\<in> A\n  g' \\<noteq> 0\n  lt g' = lt p", "show ?thesis"], ["proof (prove)\nusing this:\n  g' \\<in> A\n  g' \\<noteq> 0\n  lt g' = lt p\n\ngoal (1 subgoal):\n 1. thesis", "by (rule *)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?p101 \\<in> phull (set fs); ?p101 \\<noteq> 0;\n   \\<And>g.\n      \\<lbrakk>g \\<in> A; g \\<noteq> 0; lt g = lt ?p101\\<rbrakk>\n      \\<Longrightarrow> ?thesis101\\<rbrakk>\n  \\<Longrightarrow> ?thesis101\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "from assms(2) finite_set"], ["proof (chain)\npicking this:\n  F \\<subseteq> set fs\n  finite (set ?xs)", "have \"finite F\""], ["proof (prove)\nusing this:\n  F \\<subseteq> set fs\n  finite (set ?xs)\n\ngoal (1 subgoal):\n 1. finite F", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite F\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "from this finite_set"], ["proof (chain)\npicking this:\n  finite F\n  finite (set ?xs)", "have fin_A: \"finite A\""], ["proof (prove)\nusing this:\n  finite F\n  finite (set ?xs)\n\ngoal (1 subgoal):\n 1. finite A", "unfolding A_def"], ["proof (prove)\nusing this:\n  finite F\n  finite (set ?xs)\n\ngoal (1 subgoal):\n 1. finite (F \\<union> set (Macaulay_red (Keys_to_list fs) fs))", "by (rule finite_UnI)"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "from ex_dgrad"], ["proof (chain)\npicking this:\n  \\<exists>d. dickson_grading d", "obtain d::\"'a \\<Rightarrow> nat\" where dg: \"dickson_grading d\""], ["proof (prove)\nusing this:\n  \\<exists>d. dickson_grading d\n\ngoal (1 subgoal):\n 1. (\\<And>d. dickson_grading d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "from fin_A"], ["proof (chain)\npicking this:\n  finite A", "have \"finite (insert f A)\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. finite (insert f A)", ".."], ["proof (state)\nthis:\n  finite (insert f A)\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "then"], ["proof (chain)\npicking this:\n  finite (insert f A)", "obtain m where \"insert f A \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  finite (insert f A)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        insert f A \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_p_set_exhaust)"], ["proof (state)\nthis:\n  insert f A \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "hence A_sub: \"A \\<subseteq> dgrad_p_set d m\" and \"f \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  insert f A \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. A \\<subseteq> dgrad_p_set d m &&& f \\<in> dgrad_p_set d m", "by simp_all"], ["proof (state)\nthis:\n  A \\<subseteq> dgrad_p_set d m\n  f \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "from dg"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"wfP (dickson_less_p d m)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. wfP (dickson_less_p d m)", "by (rule wf_dickson_less_p)"], ["proof (state)\nthis:\n  wfP (dickson_less_p d m)\n\ngoal (1 subgoal):\n 1. (lin_red\n      (F \\<union> set (Macaulay_red (Keys_to_list fs) fs)))\\<^sup>*\\<^sup>*\n     f 0", "from this assms(1) \\<open>f \\<in> dgrad_p_set d m\\<close>"], ["proof (chain)\npicking this:\n  wfP (dickson_less_p d m)\n  f \\<in> phull (set fs)\n  f \\<in> dgrad_p_set d m", "show \"(lin_red A)\\<^sup>*\\<^sup>* f 0\""], ["proof (prove)\nusing this:\n  wfP (dickson_less_p d m)\n  f \\<in> phull (set fs)\n  f \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* f 0", "proof (induct f)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>dickson_less_p d m y x; y \\<in> phull (set fs);\n                    y \\<in> dgrad_p_set d m\\<rbrakk>\n                   \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* y 0;\n        x \\<in> phull (set fs); x \\<in> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* x 0", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>dickson_less_p d m y x; y \\<in> phull (set fs);\n                    y \\<in> dgrad_p_set d m\\<rbrakk>\n                   \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* y 0;\n        x \\<in> phull (set fs); x \\<in> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* x 0", "assume IH: \"\\<And>q. dickson_less_p d m q p \\<Longrightarrow> q \\<in> phull (set fs) \\<Longrightarrow> q \\<in> dgrad_p_set d m \\<Longrightarrow>\n                    (lin_red A)\\<^sup>*\\<^sup>* q 0\"\n      and \"p \\<in> phull (set fs)\" and \"p \\<in> dgrad_p_set d m\""], ["proof (state)\nthis:\n  \\<lbrakk>dickson_less_p d m ?q102 p; ?q102 \\<in> phull (set fs);\n   ?q102 \\<in> dgrad_p_set d m\\<rbrakk>\n  \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* ?q102 0\n  p \\<in> phull (set fs)\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>dickson_less_p d m y x; y \\<in> phull (set fs);\n                    y \\<in> dgrad_p_set d m\\<rbrakk>\n                   \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* y 0;\n        x \\<in> phull (set fs); x \\<in> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* x 0", "show \"(lin_red A)\\<^sup>*\\<^sup>* p 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* p 0", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0\n 2. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0\n 2. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* p 0", "by simp"], ["proof (state)\nthis:\n  (lin_red A)\\<^sup>*\\<^sup>* p 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "with \\<open>p \\<in> phull (set fs)\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> phull (set fs)\n  p \\<noteq> 0", "obtain g where \"g \\<in> A\" and \"g \\<noteq> 0\" and \"lt g = lt p\""], ["proof (prove)\nusing this:\n  p \\<in> phull (set fs)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> A; g \\<noteq> 0; lt g = lt p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lt_A)"], ["proof (state)\nthis:\n  g \\<in> A\n  g \\<noteq> 0\n  lt g = lt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "define q where \"q = p - monom_mult (lc p / lc g) 0 g\""], ["proof (state)\nthis:\n  q = p - monom_mult (lc p / lc g) (0::'a) g\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "from \\<open>g \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> A", "have lr: \"lin_red A p q\""], ["proof (prove)\nusing this:\n  g \\<in> A\n\ngoal (1 subgoal):\n 1. lin_red A p q", "proof (rule lin_redI)"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p q g (0::'a)", "show \"red_single p q g 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p q g (0::'a)", "by (simp add: red_single_def \\<open>lt g = lt p\\<close> lc_def[symmetric] q_def \\<open>g \\<noteq> 0\\<close> lc_not_0[OF False] term_simps)"], ["proof (state)\nthis:\n  red_single p q g (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lin_red A p q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "moreover"], ["proof (state)\nthis:\n  lin_red A p q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "have \"(lin_red A)\\<^sup>*\\<^sup>* q 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "from lr"], ["proof (chain)\npicking this:\n  lin_red A p q", "have red: \"red A p q\""], ["proof (prove)\nusing this:\n  lin_red A p q\n\ngoal (1 subgoal):\n 1. red A p q", "by (rule lin_red_imp_red)"], ["proof (state)\nthis:\n  red A p q\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "with dg A_sub \\<open>p \\<in> dgrad_p_set d m\\<close>"], ["proof (chain)\npicking this:\n  dickson_grading d\n  A \\<subseteq> dgrad_p_set d m\n  p \\<in> dgrad_p_set d m\n  red A p q", "have \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  A \\<subseteq> dgrad_p_set d m\n  p \\<in> dgrad_p_set d m\n  red A p q\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_red)"], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "moreover"], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "from red"], ["proof (chain)\npicking this:\n  red A p q", "have \"q \\<prec>\\<^sub>p p\""], ["proof (prove)\nusing this:\n  red A p q\n\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p p", "by (rule red_ord)"], ["proof (state)\nthis:\n  q \\<prec>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "ultimately"], ["proof (chain)\npicking this:\n  q \\<in> dgrad_p_set d m\n  q \\<prec>\\<^sub>p p", "have \"dickson_less_p d m q p\""], ["proof (prove)\nusing this:\n  q \\<in> dgrad_p_set d m\n  q \\<prec>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. dickson_less_p d m q p", "using \\<open>p \\<in> dgrad_p_set d m\\<close>"], ["proof (prove)\nusing this:\n  q \\<in> dgrad_p_set d m\n  q \\<prec>\\<^sub>p p\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. dickson_less_p d m q p", "by (simp add: dickson_less_p_def)"], ["proof (state)\nthis:\n  dickson_less_p d m q p\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "moreover"], ["proof (state)\nthis:\n  dickson_less_p d m q p\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "from phull_A \\<open>p \\<in> phull (set fs)\\<close> lr"], ["proof (chain)\npicking this:\n  phull A \\<subseteq> phull (set fs)\n  p \\<in> phull (set fs)\n  lin_red A p q", "have \"q \\<in> phull (set fs)\""], ["proof (prove)\nusing this:\n  phull A \\<subseteq> phull (set fs)\n  p \\<in> phull (set fs)\n  lin_red A p q\n\ngoal (1 subgoal):\n 1. q \\<in> phull (set fs)", "by (rule phull_closed_lin_red)"], ["proof (state)\nthis:\n  q \\<in> phull (set fs)\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "ultimately"], ["proof (chain)\npicking this:\n  dickson_less_p d m q p\n  q \\<in> phull (set fs)", "show ?thesis"], ["proof (prove)\nusing this:\n  dickson_less_p d m q p\n  q \\<in> phull (set fs)\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "using \\<open>q \\<in> dgrad_p_set d m\\<close>"], ["proof (prove)\nusing this:\n  dickson_less_p d m q p\n  q \\<in> phull (set fs)\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* q 0", "by (rule IH)"], ["proof (state)\nthis:\n  (lin_red A)\\<^sup>*\\<^sup>* q 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (lin_red A)\\<^sup>*\\<^sup>* q 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> (lin_red A)\\<^sup>*\\<^sup>* p 0", "ultimately"], ["proof (chain)\npicking this:\n  lin_red A p q\n  (lin_red A)\\<^sup>*\\<^sup>* q 0", "show ?thesis"], ["proof (prove)\nusing this:\n  lin_red A p q\n  (lin_red A)\\<^sup>*\\<^sup>* q 0\n\ngoal (1 subgoal):\n 1. (lin_red A)\\<^sup>*\\<^sup>* p 0", "by fastforce"], ["proof (state)\nthis:\n  (lin_red A)\\<^sup>*\\<^sup>* p 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (lin_red A)\\<^sup>*\\<^sup>* p 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (lin_red A)\\<^sup>*\\<^sup>* f 0\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec pdata_pairs_to_list :: \"('t, 'b::field, 'c) pdata_pair list \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) list\" where\n  \"pdata_pairs_to_list [] = []\"|\n  \"pdata_pairs_to_list (p # ps) =\n    (let f = fst (fst p); g = fst (snd p); lf = lp f; lg = lp g; l = lcs lf lg in\n      (monom_mult (1 / lc f) (l - lf) f) # (monom_mult (1 / lc g) (l - lg) g) #\n      (pdata_pairs_to_list ps)\n    )\""], ["", "lemma in_pdata_pairs_to_listI1:\n  assumes \"(f, g) \\<in> set ps\"\n  shows \"monom_mult (1 / lc (fst f)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst f)))\n              (fst f) \\<in> set (pdata_pairs_to_list ps)\" (is \"?m \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list ps)", "using assms"], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list ps)", "proof (induct ps)"], ["proof (state)\ngoal (2 subgoals):\n 1. (f, g) \\<in> set [] \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list [])\n 2. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst f))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst f))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n                          (fst f)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "case Nil"], ["proof (state)\nthis:\n  (f, g) \\<in> set []\n\ngoal (2 subgoals):\n 1. (f, g) \\<in> set [] \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list [])\n 2. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst f))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst f))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n                          (fst f)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "thus ?case"], ["proof (prove)\nusing this:\n  (f, g) \\<in> set []\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list [])", "by simp"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n  \\<in> set (pdata_pairs_to_list [])\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst f))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst f))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n                          (fst f)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst f))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst f))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n                          (fst f)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "case (Cons p ps)"], ["proof (state)\nthis:\n  (f, g) \\<in> set ps \\<Longrightarrow>\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n  \\<in> set (pdata_pairs_to_list ps)\n  (f, g) \\<in> set (p # ps)\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst f))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst f))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n                          (fst f)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "from Cons(2)"], ["proof (chain)\npicking this:\n  (f, g) \\<in> set (p # ps)", "have \"p = (f, g) \\<or> (f, g) \\<in> set ps\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set (p # ps)\n\ngoal (1 subgoal):\n 1. p = (f, g) \\<or> (f, g) \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  p = (f, g) \\<or> (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst f))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst f))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n                          (fst f)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "thus ?case"], ["proof (prove)\nusing this:\n  p = (f, g) \\<or> (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p = (f, g) \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))\n 2. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "assume \"p = (f, g)\""], ["proof (state)\nthis:\n  p = (f, g)\n\ngoal (2 subgoals):\n 1. p = (f, g) \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))\n 2. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "by (simp add: \\<open>p = (f, g)\\<close> Let_def)"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n  \\<in> set (pdata_pairs_to_list (p # ps))\n\ngoal (1 subgoal):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "assume \"(f, g) \\<in> set ps\""], ["proof (state)\nthis:\n  (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "hence \"?m \\<in> set (pdata_pairs_to_list ps)\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list ps)", "by (rule Cons(1))"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n  \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "thus ?thesis"], ["proof (prove)\nusing this:\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n  \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n  \\<in> set (pdata_pairs_to_list (p # ps))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n  \\<in> set (pdata_pairs_to_list (p # ps))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_pdata_pairs_to_listI2:\n  assumes \"(f, g) \\<in> set ps\"\n  shows \"monom_mult (1 / lc (fst g)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst g)))\n              (fst g) \\<in> set (pdata_pairs_to_list ps)\" (is \"?m \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list ps)", "using assms"], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list ps)", "proof (induct ps)"], ["proof (state)\ngoal (2 subgoals):\n 1. (f, g) \\<in> set [] \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list [])\n 2. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst g))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst g))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst g))\n                          (fst g)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "case Nil"], ["proof (state)\nthis:\n  (f, g) \\<in> set []\n\ngoal (2 subgoals):\n 1. (f, g) \\<in> set [] \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list [])\n 2. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst g))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst g))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst g))\n                          (fst g)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "thus ?case"], ["proof (prove)\nusing this:\n  (f, g) \\<in> set []\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list [])", "by simp"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst g))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n  \\<in> set (pdata_pairs_to_list [])\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst g))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst g))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst g))\n                          (fst g)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst g))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst g))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst g))\n                          (fst g)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "case (Cons p ps)"], ["proof (state)\nthis:\n  (f, g) \\<in> set ps \\<Longrightarrow>\n  monom_mult ((1::'b) / lc (fst g))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n  \\<in> set (pdata_pairs_to_list ps)\n  (f, g) \\<in> set (p # ps)\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst g))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst g))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst g))\n                          (fst g)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "from Cons(2)"], ["proof (chain)\npicking this:\n  (f, g) \\<in> set (p # ps)", "have \"p = (f, g) \\<or> (f, g) \\<in> set ps\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set (p # ps)\n\ngoal (1 subgoal):\n 1. p = (f, g) \\<or> (f, g) \\<in> set ps", "by auto"], ["proof (state)\nthis:\n  p = (f, g) \\<or> (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>a ps.\n       \\<lbrakk>(f, g) \\<in> set ps \\<Longrightarrow>\n                monom_mult ((1::'b) / lc (fst g))\n                 (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n                \\<in> set (pdata_pairs_to_list ps);\n        (f, g) \\<in> set (a # ps)\\<rbrakk>\n       \\<Longrightarrow> monom_mult ((1::'b) / lc (fst g))\n                          (lcs (lp (fst f)) (lp (fst g)) - lp (fst g))\n                          (fst g)\n                         \\<in> set (pdata_pairs_to_list (a # ps))", "thus ?case"], ["proof (prove)\nusing this:\n  p = (f, g) \\<or> (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p = (f, g) \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))\n 2. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "assume \"p = (f, g)\""], ["proof (state)\nthis:\n  p = (f, g)\n\ngoal (2 subgoals):\n 1. p = (f, g) \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))\n 2. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "by (simp add: \\<open>p = (f, g)\\<close> Let_def)"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst g))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n  \\<in> set (pdata_pairs_to_list (p # ps))\n\ngoal (1 subgoal):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "assume \"(f, g) \\<in> set ps\""], ["proof (state)\nthis:\n  (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "hence \"?m \\<in> set (pdata_pairs_to_list ps)\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list ps)", "by (rule Cons(1))"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst g))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n  \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "thus ?thesis"], ["proof (prove)\nusing this:\n  monom_mult ((1::'b) / lc (fst g))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n  \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst g))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n    \\<in> set (pdata_pairs_to_list (p # ps))", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst g))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n  \\<in> set (pdata_pairs_to_list (p # ps))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst g))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst g)) (fst g)\n  \\<in> set (pdata_pairs_to_list (p # ps))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_pdata_pairs_to_listE:\n  assumes \"h \\<in> set (pdata_pairs_to_list ps)\"\n  obtains f g where \"(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\"\n    and \"h = monom_mult (1 / lc (fst f)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst f))) (fst f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f g.\n        \\<lbrakk>(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps;\n         h =\n         monom_mult ((1::'b) / lc (fst f))\n          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  h \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. (\\<And>f g.\n        \\<lbrakk>(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps;\n         h =\n         monom_mult ((1::'b) / lc (fst f))\n          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct ps arbitrary: thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>f g.\n                   \\<lbrakk>(f, g) \\<in> set [] \\<or> (g, f) \\<in> set [];\n                    h =\n                    monom_mult ((1::'b) / lc (fst f))\n                     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n                     (fst f)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list [])\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>(?f102, ?g102) \\<in> set [] \\<or> (?g102, ?f102) \\<in> set [];\n   h =\n   monom_mult ((1::'b) / lc (fst ?f102))\n    (lcs (lp (fst ?f102)) (lp (fst ?g102)) - lp (fst ?f102))\n    (fst ?f102)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  h \\<in> set (pdata_pairs_to_list [])\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>f g.\n                   \\<lbrakk>(f, g) \\<in> set [] \\<or> (g, f) \\<in> set [];\n                    h =\n                    monom_mult ((1::'b) / lc (fst f))\n                     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n                     (fst f)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list [])\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Nil(2)"], ["proof (chain)\npicking this:\n  h \\<in> set (pdata_pairs_to_list [])", "show ?case"], ["proof (prove)\nusing this:\n  h \\<in> set (pdata_pairs_to_list [])\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons p ps)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>f g.\n              \\<lbrakk>(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps;\n               h =\n               monom_mult ((1::'b) / lc (fst f))\n                (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n                (fst f)\\<rbrakk>\n              \\<Longrightarrow> ?thesis102;\n   h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n  \\<Longrightarrow> ?thesis102\n  \\<lbrakk>(?f102, ?g102) \\<in> set (p # ps) \\<or>\n           (?g102, ?f102) \\<in> set (p # ps);\n   h =\n   monom_mult ((1::'b) / lc (fst ?f102))\n    (lcs (lp (fst ?f102)) (lp (fst ?g102)) - lp (fst ?f102))\n    (fst ?f102)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  h \\<in> set (pdata_pairs_to_list (p # ps))\n\ngoal (1 subgoal):\n 1. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "let ?f = \"fst (fst p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "let ?g = \"fst (snd p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "let ?lf = \"lp ?f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "let ?lg = \"lp ?g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "let ?l = \"lcs ?lf ?lg\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons(3)"], ["proof (chain)\npicking this:\n  h \\<in> set (pdata_pairs_to_list (p # ps))", "have \"h = monom_mult (1 / lc ?f) (?l - ?lf) ?f \\<or> h = monom_mult (1 / lc ?g) (?l - ?lg) ?g \\<or>\n                     h \\<in> set (pdata_pairs_to_list ps)\""], ["proof (prove)\nusing this:\n  h \\<in> set (pdata_pairs_to_list (p # ps))\n\ngoal (1 subgoal):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (fst p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n     (fst (fst p)) \\<or>\n    h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<or>\n    h \\<in> set (pdata_pairs_to_list ps)", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  h =\n  monom_mult ((1::'b) / lc (fst (fst p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n   (fst (fst p)) \\<or>\n  h =\n  monom_mult ((1::'b) / lc (fst (snd p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n   (fst (snd p)) \\<or>\n  h \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. \\<And>a ps thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>f g.\n                               \\<lbrakk>(f, g) \\<in> set ps \\<or>\n  (g, f) \\<in> set ps;\n                                h =\n                                monom_mult ((1::'b) / lc (fst f))\n                                 (lcs (lp (fst f)) (lp (fst g)) -\n                                  lp (fst f))\n                                 (fst f)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    h \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>f g.\n           \\<lbrakk>(f, g) \\<in> set (a # ps) \\<or>\n                    (g, f) \\<in> set (a # ps);\n            h =\n            monom_mult ((1::'b) / lc (fst f))\n             (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        h \\<in> set (pdata_pairs_to_list (a # ps))\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  h =\n  monom_mult ((1::'b) / lc (fst (fst p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n   (fst (fst p)) \\<or>\n  h =\n  monom_mult ((1::'b) / lc (fst (snd p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n   (fst (snd p)) \\<or>\n  h \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. thesis", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (fst p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n     (fst (fst p)) \\<Longrightarrow>\n    thesis\n 2. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 3. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "assume h: \"h = monom_mult (1 / lc ?f) (?l - ?lf) ?f\""], ["proof (state)\nthis:\n  h =\n  monom_mult ((1::'b) / lc (fst (fst p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n   (fst (fst p))\n\ngoal (3 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (fst p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n     (fst (fst p)) \\<Longrightarrow>\n    thesis\n 2. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 3. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "have \"(fst p, snd p) \\<in> set (p # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst p, snd p) \\<in> set (p # ps)", "by simp"], ["proof (state)\nthis:\n  (fst p, snd p) \\<in> set (p # ps)\n\ngoal (3 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (fst p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n     (fst (fst p)) \\<Longrightarrow>\n    thesis\n 2. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 3. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "hence \"(fst p, snd p) \\<in> set (p # ps) \\<or> (snd p, fst p) \\<in> set (p # ps)\""], ["proof (prove)\nusing this:\n  (fst p, snd p) \\<in> set (p # ps)\n\ngoal (1 subgoal):\n 1. (fst p, snd p) \\<in> set (p # ps) \\<or>\n    (snd p, fst p) \\<in> set (p # ps)", ".."], ["proof (state)\nthis:\n  (fst p, snd p) \\<in> set (p # ps) \\<or> (snd p, fst p) \\<in> set (p # ps)\n\ngoal (3 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (fst p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n     (fst (fst p)) \\<Longrightarrow>\n    thesis\n 2. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 3. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "from this h"], ["proof (chain)\npicking this:\n  (fst p, snd p) \\<in> set (p # ps) \\<or> (snd p, fst p) \\<in> set (p # ps)\n  h =\n  monom_mult ((1::'b) / lc (fst (fst p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n   (fst (fst p))", "show ?thesis"], ["proof (prove)\nusing this:\n  (fst p, snd p) \\<in> set (p # ps) \\<or> (snd p, fst p) \\<in> set (p # ps)\n  h =\n  monom_mult ((1::'b) / lc (fst (fst p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (fst p)))\n   (fst (fst p))\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(2))"], ["proof (state)\nthis:\n  thesis\n\ngoal (2 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 2. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 2. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "assume h: \"h = monom_mult (1 / lc ?g) (?l - ?lg) ?g\""], ["proof (state)\nthis:\n  h =\n  monom_mult ((1::'b) / lc (fst (snd p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n   (fst (snd p))\n\ngoal (2 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 2. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "have \"(fst p, snd p) \\<in> set (p # ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst p, snd p) \\<in> set (p # ps)", "by simp"], ["proof (state)\nthis:\n  (fst p, snd p) \\<in> set (p # ps)\n\ngoal (2 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 2. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "hence \"(snd p, fst p) \\<in> set (p # ps) \\<or> (fst p, snd p) \\<in> set (p # ps)\""], ["proof (prove)\nusing this:\n  (fst p, snd p) \\<in> set (p # ps)\n\ngoal (1 subgoal):\n 1. (snd p, fst p) \\<in> set (p # ps) \\<or>\n    (fst p, snd p) \\<in> set (p # ps)", ".."], ["proof (state)\nthis:\n  (snd p, fst p) \\<in> set (p # ps) \\<or> (fst p, snd p) \\<in> set (p # ps)\n\ngoal (2 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 2. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  (snd p, fst p) \\<in> set (p # ps) \\<or> (fst p, snd p) \\<in> set (p # ps)\n\ngoal (2 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 2. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "from h"], ["proof (chain)\npicking this:\n  h =\n  monom_mult ((1::'b) / lc (fst (snd p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n   (fst (snd p))", "have \"h = monom_mult (1 / lc ?g) ((lcs ?lg ?lf) - ?lg) ?g\""], ["proof (prove)\nusing this:\n  h =\n  monom_mult ((1::'b) / lc (fst (snd p)))\n   (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n   (fst (snd p))\n\ngoal (1 subgoal):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (snd p))) (lp (fst (fst p))) - lp (fst (snd p)))\n     (fst (snd p))", "by (simp only: lcs_comm)"], ["proof (state)\nthis:\n  h =\n  monom_mult ((1::'b) / lc (fst (snd p)))\n   (lcs (lp (fst (snd p))) (lp (fst (fst p))) - lp (fst (snd p)))\n   (fst (snd p))\n\ngoal (2 subgoals):\n 1. h =\n    monom_mult ((1::'b) / lc (fst (snd p)))\n     (lcs (lp (fst (fst p))) (lp (fst (snd p))) - lp (fst (snd p)))\n     (fst (snd p)) \\<Longrightarrow>\n    thesis\n 2. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  (snd p, fst p) \\<in> set (p # ps) \\<or> (fst p, snd p) \\<in> set (p # ps)\n  h =\n  monom_mult ((1::'b) / lc (fst (snd p)))\n   (lcs (lp (fst (snd p))) (lp (fst (fst p))) - lp (fst (snd p)))\n   (fst (snd p))", "show ?thesis"], ["proof (prove)\nusing this:\n  (snd p, fst p) \\<in> set (p # ps) \\<or> (fst p, snd p) \\<in> set (p # ps)\n  h =\n  monom_mult ((1::'b) / lc (fst (snd p)))\n   (lcs (lp (fst (snd p))) (lp (fst (fst p))) - lp (fst (snd p)))\n   (fst (snd p))\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(2))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "assume h_in: \"h \\<in> set (pdata_pairs_to_list ps)\""], ["proof (state)\nthis:\n  h \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "obtain f g where \"(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\"\n      and h: \"h = monom_mult (1 / lc (fst f)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst f))) (fst f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f g.\n        \\<lbrakk>(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps;\n         h =\n         monom_mult ((1::'b) / lc (fst f))\n          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule Cons(1), assumption, intro h_in)"], ["proof (state)\nthis:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n  h =\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n\ngoal (1 subgoal):\n 1. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "from this(1)"], ["proof (chain)\npicking this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps", "have \"(f, g) \\<in> set (p # ps) \\<or> (g, f) \\<in> set (p # ps)\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n\ngoal (1 subgoal):\n 1. (f, g) \\<in> set (p # ps) \\<or> (g, f) \\<in> set (p # ps)", "by auto"], ["proof (state)\nthis:\n  (f, g) \\<in> set (p # ps) \\<or> (g, f) \\<in> set (p # ps)\n\ngoal (1 subgoal):\n 1. h \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow> thesis", "from this h"], ["proof (chain)\npicking this:\n  (f, g) \\<in> set (p # ps) \\<or> (g, f) \\<in> set (p # ps)\n  h =\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)", "show ?thesis"], ["proof (prove)\nusing this:\n  (f, g) \\<in> set (p # ps) \\<or> (g, f) \\<in> set (p # ps)\n  h =\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(2))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "definition f4_red_aux :: \"('t, 'b::field, 'c) pdata list \\<Rightarrow> ('t, 'b, 'c) pdata_pair list \\<Rightarrow>\n                          ('t \\<Rightarrow>\\<^sub>0 'b) list\"\n  where \"f4_red_aux bs ps =\n            (let aux = sym_preproc (map fst bs) (pdata_pairs_to_list ps) in Macaulay_red (fst aux) (snd aux))\""], ["", "text \\<open>@{const f4_red_aux} only takes two arguments, since it does not distinguish between those\n  elements of the current basis that are known to be a Gr\\\"obner basis (called \\<open>gs\\<close> in\n  @{theory Groebner_Bases.Algorithm_Schema}) and the remaining ones.\\<close>"], ["", "lemma f4_red_aux_not_zero: \"0 \\<notin> set (f4_red_aux bs ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> set (f4_red_aux bs ps)", "by (simp add: f4_red_aux_def Let_def fst_sym_preproc set_Macaulay_red set_Macaulay_list)"], ["", "lemma f4_red_aux_irredudible:\n  assumes \"h \\<in> set (f4_red_aux bs ps)\" and \"b \\<in> set bs\" and \"fst b \\<noteq> 0\"\n  shows \"\\<not> lt (fst b) adds\\<^sub>t lt h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lt (fst b) adds\\<^sub>t lt h", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "from assms(1) f4_red_aux_not_zero"], ["proof (chain)\npicking this:\n  h \\<in> set (f4_red_aux bs ps)\n  0 \\<notin> set (f4_red_aux ?bs ?ps)", "have \"h \\<noteq> 0\""], ["proof (prove)\nusing this:\n  h \\<in> set (f4_red_aux bs ps)\n  0 \\<notin> set (f4_red_aux ?bs ?ps)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0", "by metis"], ["proof (state)\nthis:\n  h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "hence \"lt h \\<in> keys h\""], ["proof (prove)\nusing this:\n  h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt h \\<in> keys h", "by (rule lt_in_keys)"], ["proof (state)\nthis:\n  lt h \\<in> keys h\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lt h \\<in> keys h\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "from assms(1)"], ["proof (chain)\npicking this:\n  h \\<in> set (f4_red_aux bs ps)", "have \"... \\<subseteq> Keys (set (f4_red_aux bs ps))\""], ["proof (prove)\nusing this:\n  h \\<in> set (f4_red_aux bs ps)\n\ngoal (1 subgoal):\n 1. keys h \\<subseteq> Keys (set (f4_red_aux bs ps))", "by (rule keys_subset_Keys)"], ["proof (state)\nthis:\n  keys h \\<subseteq> Keys (set (f4_red_aux bs ps))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  keys h \\<subseteq> Keys (set (f4_red_aux bs ps))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "have \"... \\<subseteq> Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\"\n    (is \"_ \\<subseteq> Keys (set ?s)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (f4_red_aux bs ps))\n    \\<subseteq> Keys\n                 (set (snd (sym_preproc (map fst bs)\n                             (pdata_pairs_to_list ps))))", "by (simp only: f4_red_aux_def Let_def fst_sym_preproc Keys_Macaulay_red)"], ["proof (state)\nthis:\n  Keys (set (f4_red_aux bs ps))\n  \\<subseteq> Keys\n               (set (snd (sym_preproc (map fst bs)\n                           (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  lt h\n  \\<in> Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))", "have \"lt h \\<in> Keys (set ?s)\""], ["proof (prove)\nusing this:\n  lt h\n  \\<in> Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. lt h\n    \\<in> Keys\n           (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))", "."], ["proof (state)\nthis:\n  lt h\n  \\<in> Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  lt h\n  \\<in> Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "from assms(2)"], ["proof (chain)\npicking this:\n  b \\<in> set bs", "have \"fst b \\<in> set (map fst bs)\""], ["proof (prove)\nusing this:\n  b \\<in> set bs\n\ngoal (1 subgoal):\n 1. fst b \\<in> set (map fst bs)", "by auto"], ["proof (state)\nthis:\n  fst b \\<in> set (map fst bs)\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fst b \\<in> set (map fst bs)\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "assume a: \"lt (fst b) adds\\<^sub>t lt h\""], ["proof (state)\nthis:\n  lt (fst b) adds\\<^sub>t lt h\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  lt h\n  \\<in> Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  fst b \\<in> set (map fst bs)\n  lt (fst b) adds\\<^sub>t lt h", "have \"monom_mult 1 (lp h - lp (fst b)) (fst b) \\<in> set ?s\" (is \"?m \\<in> _\")"], ["proof (prove)\nusing this:\n  lt h\n  \\<in> Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  fst b \\<in> set (map fst bs)\n  lt (fst b) adds\\<^sub>t lt h\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (lp h - lp (fst b)) (fst b)\n    \\<in> set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps)))", "by (rule snd_sym_preproc_complete)"], ["proof (state)\nthis:\n  monom_mult (1::'b) (lp h - lp (fst b)) (fst b)\n  \\<in> set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps)))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "from assms(3)"], ["proof (chain)\npicking this:\n  fst b \\<noteq> 0", "have \"?m \\<noteq> 0\""], ["proof (prove)\nusing this:\n  fst b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. monom_mult (1::'b) (lp h - lp (fst b)) (fst b) \\<noteq> 0", "by (simp add: monom_mult_eq_zero_iff)"], ["proof (state)\nthis:\n  monom_mult (1::'b) (lp h - lp (fst b)) (fst b) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "with \\<open>?m \\<in> set ?s\\<close>"], ["proof (chain)\npicking this:\n  monom_mult (1::'b) (lp h - lp (fst b)) (fst b)\n  \\<in> set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps)))\n  monom_mult (1::'b) (lp h - lp (fst b)) (fst b) \\<noteq> 0", "have \"lt ?m \\<in> lt_set (set ?s)\""], ["proof (prove)\nusing this:\n  monom_mult (1::'b) (lp h - lp (fst b)) (fst b)\n  \\<in> set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps)))\n  monom_mult (1::'b) (lp h - lp (fst b)) (fst b) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt (monom_mult (1::'b) (lp h - lp (fst b)) (fst b))\n    \\<in> lt_set\n           (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))", "by (rule lt_setI)"], ["proof (state)\nthis:\n  lt (monom_mult (1::'b) (lp h - lp (fst b)) (fst b))\n  \\<in> lt_set\n         (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  lt (monom_mult (1::'b) (lp h - lp (fst b)) (fst b))\n  \\<in> lt_set\n         (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "from assms(3) a"], ["proof (chain)\npicking this:\n  fst b \\<noteq> 0\n  lt (fst b) adds\\<^sub>t lt h", "have \"lt ?m = lt h\""], ["proof (prove)\nusing this:\n  fst b \\<noteq> 0\n  lt (fst b) adds\\<^sub>t lt h\n\ngoal (1 subgoal):\n 1. lt (monom_mult (1::'b) (lp h - lp (fst b)) (fst b)) = lt h", "by (simp add: lt_monom_mult, metis add_diff_cancel_right' adds_termE pp_of_term_splus)"], ["proof (state)\nthis:\n  lt (monom_mult (1::'b) (lp h - lp (fst b)) (fst b)) = lt h\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  lt (monom_mult (1::'b) (lp h - lp (fst b)) (fst b))\n  \\<in> lt_set\n         (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  lt (monom_mult (1::'b) (lp h - lp (fst b)) (fst b)) = lt h", "have \"lt h \\<in> lt_set (set ?s)\""], ["proof (prove)\nusing this:\n  lt (monom_mult (1::'b) (lp h - lp (fst b)) (fst b))\n  \\<in> lt_set\n         (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  lt (monom_mult (1::'b) (lp h - lp (fst b)) (fst b)) = lt h\n\ngoal (1 subgoal):\n 1. lt h\n    \\<in> lt_set\n           (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))", "by simp"], ["proof (state)\nthis:\n  lt h\n  \\<in> lt_set\n         (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  lt h\n  \\<in> lt_set\n         (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "from assms(1)"], ["proof (chain)\npicking this:\n  h \\<in> set (f4_red_aux bs ps)", "have \"lt h \\<notin> lt_set (set ?s)\""], ["proof (prove)\nusing this:\n  h \\<in> set (f4_red_aux bs ps)\n\ngoal (1 subgoal):\n 1. lt h\n    \\<notin> lt_set\n              (set (snd (sym_preproc (map fst bs)\n                          (pdata_pairs_to_list ps))))", "by (simp add: f4_red_aux_def Let_def fst_sym_preproc set_Macaulay_red)"], ["proof (state)\nthis:\n  lt h\n  \\<notin> lt_set\n            (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. lt (fst b) adds\\<^sub>t lt h \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  lt h\n  \\<in> lt_set\n         (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  lt h\n  \\<notin> lt_set\n            (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))", "show False"], ["proof (prove)\nusing this:\n  lt h\n  \\<in> lt_set\n         (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  lt h\n  \\<notin> lt_set\n            (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma f4_red_aux_dgrad_p_set_le:\n  assumes \"dickson_grading d\"\n  shows \"dgrad_p_set_le d (set (f4_red_aux bs ps)) (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (set (f4_red_aux bs ps)) (args_to_set ([], bs, ps))", "unfolding dgrad_p_set_le_def dgrad_set_le_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>pp_of_term ` Keys (set (f4_red_aux bs ps)).\n       \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n          d s \\<le> d t", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n          d s \\<le> d t", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n          d s \\<le> d t", "assume \"s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps))\""], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n          d s \\<le> d t", "also"], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n          d s \\<le> d t", "have \"... \\<subseteq> pp_of_term ` Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\"\n    (is \"_ \\<subseteq> pp_of_term ` Keys (set ?s)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pp_of_term ` Keys (set (f4_red_aux bs ps))\n    \\<subseteq> pp_of_term `\n                Keys\n                 (set (snd (sym_preproc (map fst bs)\n                             (pdata_pairs_to_list ps))))", "by (rule image_mono, simp only: f4_red_aux_def Let_def fst_sym_preproc Keys_Macaulay_red)"], ["proof (state)\nthis:\n  pp_of_term ` Keys (set (f4_red_aux bs ps))\n  \\<subseteq> pp_of_term `\n              Keys\n               (set (snd (sym_preproc (map fst bs)\n                           (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n          d s \\<le> d t", "finally"], ["proof (chain)\npicking this:\n  s \\<in> pp_of_term `\n          Keys\n           (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))", "have \"s \\<in> pp_of_term ` Keys (set ?s)\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term `\n          Keys\n           (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term `\n            Keys\n             (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))", "."], ["proof (state)\nthis:\n  s \\<in> pp_of_term `\n          Keys\n           (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n          d s \\<le> d t", "with snd_sym_preproc_dgrad_set_le[OF assms]"], ["proof (chain)\npicking this:\n  dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc ?gs ?fs))))\n   (pp_of_term ` Keys (set ?gs \\<union> set ?fs))\n  s \\<in> pp_of_term `\n          Keys\n           (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))", "obtain t\n    where \"t \\<in> pp_of_term ` Keys (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\" and \"d s \\<le> d t\""], ["proof (prove)\nusing this:\n  dgrad_set_le d (pp_of_term ` Keys (set (snd (sym_preproc ?gs ?fs))))\n   (pp_of_term ` Keys (set ?gs \\<union> set ?fs))\n  s \\<in> pp_of_term `\n          Keys\n           (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>t \\<in> pp_of_term `\n                         Keys\n                          (set (map fst bs) \\<union>\n                           set (pdata_pairs_to_list ps));\n         d s \\<le> d t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_set_leE)"], ["proof (state)\nthis:\n  t \\<in> pp_of_term `\n          Keys (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\n  d s \\<le> d t\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n          d s \\<le> d t", "from this(1)"], ["proof (chain)\npicking this:\n  t \\<in> pp_of_term `\n          Keys (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))", "have \"t \\<in> pp_of_term ` Keys (fst ` set bs) \\<or> t \\<in> pp_of_term ` Keys (set (pdata_pairs_to_list ps))\""], ["proof (prove)\nusing this:\n  t \\<in> pp_of_term `\n          Keys (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term ` Keys (fst ` set bs) \\<or>\n    t \\<in> pp_of_term ` Keys (set (pdata_pairs_to_list ps))", "by (simp add: Keys_Un image_Un)"], ["proof (state)\nthis:\n  t \\<in> pp_of_term ` Keys (fst ` set bs) \\<or>\n  t \\<in> pp_of_term ` Keys (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> pp_of_term ` Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n          d s \\<le> d t", "thus \"\\<exists>t \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\""], ["proof (prove)\nusing this:\n  t \\<in> pp_of_term ` Keys (fst ` set bs) \\<or>\n  t \\<in> pp_of_term ` Keys (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> pp_of_term ` Keys (fst ` set bs) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "assume \"t \\<in> pp_of_term ` Keys (fst `  set bs)\""], ["proof (state)\nthis:\n  t \\<in> pp_of_term ` Keys (fst ` set bs)\n\ngoal (2 subgoals):\n 1. t \\<in> pp_of_term ` Keys (fst ` set bs) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "also"], ["proof (state)\nthis:\n  t \\<in> pp_of_term ` Keys (fst ` set bs)\n\ngoal (2 subgoals):\n 1. t \\<in> pp_of_term ` Keys (fst ` set bs) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "have \"... \\<subseteq> pp_of_term ` Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pp_of_term ` Keys (fst ` set bs)\n    \\<subseteq> pp_of_term ` Keys (args_to_set ([], bs, ps))", "by (rule image_mono, rule Keys_mono, auto simp add: args_to_set_alt)"], ["proof (state)\nthis:\n  pp_of_term ` Keys (fst ` set bs)\n  \\<subseteq> pp_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (2 subgoals):\n 1. t \\<in> pp_of_term ` Keys (fst ` set bs) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "finally"], ["proof (chain)\npicking this:\n  t \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))", "have \"t \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  t \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))", "."], ["proof (state)\nthis:\n  t \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (2 subgoals):\n 1. t \\<in> pp_of_term ` Keys (fst ` set bs) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "with \\<open>d s \\<le> d t\\<close>"], ["proof (chain)\npicking this:\n  d s \\<le> d t\n  t \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))", "show ?thesis"], ["proof (prove)\nusing this:\n  d s \\<le> d t\n  t \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", ".."], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "assume \"t \\<in> pp_of_term ` Keys (set (pdata_pairs_to_list ps))\""], ["proof (state)\nthis:\n  t \\<in> pp_of_term ` Keys (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "then"], ["proof (chain)\npicking this:\n  t \\<in> pp_of_term ` Keys (set (pdata_pairs_to_list ps))", "obtain p where \"p \\<in> set (pdata_pairs_to_list ps)\" and \"t \\<in> pp_of_term ` keys p\""], ["proof (prove)\nusing this:\n  t \\<in> pp_of_term ` Keys (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> set (pdata_pairs_to_list ps);\n         t \\<in> pp_of_term ` keys p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: in_KeysE)"], ["proof (state)\nthis:\n  p \\<in> set (pdata_pairs_to_list ps)\n  t \\<in> pp_of_term ` keys p\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "from this(1)"], ["proof (chain)\npicking this:\n  p \\<in> set (pdata_pairs_to_list ps)", "obtain f g where disj: \"(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\"\n      and p: \"p = monom_mult (1 / lc (fst f)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst f))) (fst f)\""], ["proof (prove)\nusing this:\n  p \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. (\\<And>f g.\n        \\<lbrakk>(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps;\n         p =\n         monom_mult ((1::'b) / lc (fst f))\n          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_pdata_pairs_to_listE)"], ["proof (state)\nthis:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n  p =\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "from disj"], ["proof (chain)\npicking this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps", "have \"fst f \\<in> args_to_set ([], bs, ps) \\<and> fst g \\<in> args_to_set ([], bs, ps)\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n\ngoal (1 subgoal):\n 1. fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)\n 2. (g, f) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "assume \"(f, g) \\<in> set ps\""], ["proof (state)\nthis:\n  (f, g) \\<in> set ps\n\ngoal (2 subgoals):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)\n 2. (g, f) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "hence \"f \\<in> fst ` set ps\" and \"g \\<in> snd ` set ps\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps\n\ngoal (1 subgoal):\n 1. f \\<in> fst ` set ps &&& g \\<in> snd ` set ps", "by force+"], ["proof (state)\nthis:\n  f \\<in> fst ` set ps\n  g \\<in> snd ` set ps\n\ngoal (2 subgoals):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)\n 2. (g, f) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "hence \"fst f \\<in> fst ` fst ` set ps\" and \"fst g \\<in> fst ` snd ` set ps\""], ["proof (prove)\nusing this:\n  f \\<in> fst ` set ps\n  g \\<in> snd ` set ps\n\ngoal (1 subgoal):\n 1. fst f \\<in> fst ` fst ` set ps &&& fst g \\<in> fst ` snd ` set ps", "by simp_all"], ["proof (state)\nthis:\n  fst f \\<in> fst ` fst ` set ps\n  fst g \\<in> fst ` snd ` set ps\n\ngoal (2 subgoals):\n 1. (f, g) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)\n 2. (g, f) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst f \\<in> fst ` fst ` set ps\n  fst g \\<in> fst ` snd ` set ps\n\ngoal (1 subgoal):\n 1. fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "by (simp add: args_to_set_def image_Un)"], ["proof (state)\nthis:\n  fst f \\<in> args_to_set ([], bs, ps) \\<and>\n  fst g \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. (g, f) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (g, f) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "assume \"(g, f) \\<in> set ps\""], ["proof (state)\nthis:\n  (g, f) \\<in> set ps\n\ngoal (1 subgoal):\n 1. (g, f) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "hence \"f \\<in> snd ` set ps\" and \"g \\<in> fst ` set ps\""], ["proof (prove)\nusing this:\n  (g, f) \\<in> set ps\n\ngoal (1 subgoal):\n 1. f \\<in> snd ` set ps &&& g \\<in> fst ` set ps", "by force+"], ["proof (state)\nthis:\n  f \\<in> snd ` set ps\n  g \\<in> fst ` set ps\n\ngoal (1 subgoal):\n 1. (g, f) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "hence \"fst f \\<in> fst ` snd ` set ps\" and \"fst g \\<in> fst ` fst ` set ps\""], ["proof (prove)\nusing this:\n  f \\<in> snd ` set ps\n  g \\<in> fst ` set ps\n\ngoal (1 subgoal):\n 1. fst f \\<in> fst ` snd ` set ps &&& fst g \\<in> fst ` fst ` set ps", "by simp_all"], ["proof (state)\nthis:\n  fst f \\<in> fst ` snd ` set ps\n  fst g \\<in> fst ` fst ` set ps\n\ngoal (1 subgoal):\n 1. (g, f) \\<in> set ps \\<Longrightarrow>\n    fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst f \\<in> fst ` snd ` set ps\n  fst g \\<in> fst ` fst ` set ps\n\ngoal (1 subgoal):\n 1. fst f \\<in> args_to_set ([], bs, ps) \\<and>\n    fst g \\<in> args_to_set ([], bs, ps)", "by (simp add: args_to_set_def image_Un)"], ["proof (state)\nthis:\n  fst f \\<in> args_to_set ([], bs, ps) \\<and>\n  fst g \\<in> args_to_set ([], bs, ps)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst f \\<in> args_to_set ([], bs, ps) \\<and>\n  fst g \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "hence \"fst f \\<in> args_to_set ([], bs, ps)\" and \"fst g \\<in> args_to_set ([], bs, ps)\""], ["proof (prove)\nusing this:\n  fst f \\<in> args_to_set ([], bs, ps) \\<and>\n  fst g \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. fst f \\<in> args_to_set ([], bs, ps) &&&\n    fst g \\<in> args_to_set ([], bs, ps)", "by simp_all"], ["proof (state)\nthis:\n  fst f \\<in> args_to_set ([], bs, ps)\n  fst g \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "hence keys_f: \"keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))\"\n      and keys_g: \"keys (fst g) \\<subseteq> Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  fst f \\<in> args_to_set ([], bs, ps)\n  fst g \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps)) &&&\n    keys (fst g) \\<subseteq> Keys (args_to_set ([], bs, ps))", "by (auto intro!: keys_subset_Keys)"], ["proof (state)\nthis:\n  keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))\n  keys (fst g) \\<subseteq> Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "let ?lf = \"lp (fst f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "let ?lg = \"lp (fst g)\""], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "define l where \"l = lcs ?lf ?lg\""], ["proof (state)\nthis:\n  l = lcs (lp (fst f)) (lp (fst g))\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "have \"pp_of_term ` keys p \\<subseteq> pp_of_term ` ((\\<oplus>) (lcs ?lf ?lg - ?lf) ` keys (fst f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pp_of_term ` keys p\n    \\<subseteq> pp_of_term `\n                (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n                keys (fst f)", "unfolding p"], ["proof (prove)\ngoal (1 subgoal):\n 1. pp_of_term `\n    keys\n     (monom_mult ((1::'b) / lc (fst f))\n       (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f))\n    \\<subseteq> pp_of_term `\n                (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n                keys (fst f)", "using keys_monom_mult_subset"], ["proof (prove)\nusing this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n\ngoal (1 subgoal):\n 1. pp_of_term `\n    keys\n     (monom_mult ((1::'b) / lc (fst f))\n       (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f))\n    \\<subseteq> pp_of_term `\n                (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n                keys (fst f)", "by (rule image_mono)"], ["proof (state)\nthis:\n  pp_of_term ` keys p\n  \\<subseteq> pp_of_term `\n              (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n              keys (fst f)\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "with \\<open>t \\<in> pp_of_term ` keys p\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> pp_of_term ` keys p\n  pp_of_term ` keys p\n  \\<subseteq> pp_of_term `\n              (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n              keys (fst f)", "have \"t \\<in> pp_of_term ` ((\\<oplus>) (l - ?lf) ` keys (fst f))\""], ["proof (prove)\nusing this:\n  t \\<in> pp_of_term ` keys p\n  pp_of_term ` keys p\n  \\<subseteq> pp_of_term `\n              (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n              keys (fst f)\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term ` (\\<oplus>) (l - lp (fst f)) ` keys (fst f)", "unfolding l_def"], ["proof (prove)\nusing this:\n  t \\<in> pp_of_term ` keys p\n  pp_of_term ` keys p\n  \\<subseteq> pp_of_term `\n              (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n              keys (fst f)\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n            keys (fst f)", ".."], ["proof (state)\nthis:\n  t \\<in> pp_of_term ` (\\<oplus>) (l - lp (fst f)) ` keys (fst f)\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "then"], ["proof (chain)\npicking this:\n  t \\<in> pp_of_term ` (\\<oplus>) (l - lp (fst f)) ` keys (fst f)", "obtain t' where \"t' \\<in> pp_of_term ` keys (fst f)\" and t: \"t = (l - ?lf) + t'\""], ["proof (prove)\nusing this:\n  t \\<in> pp_of_term ` (\\<oplus>) (l - lp (fst f)) ` keys (fst f)\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>t' \\<in> pp_of_term ` keys (fst f);\n         t = l - lp (fst f) + t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pp_of_term_splus"], ["proof (prove)\nusing this:\n  t \\<in> pp_of_term ` (\\<oplus>) (l - lp (fst f)) ` keys (fst f)\n  pp_of_term (?t \\<oplus> ?v) = ?t + pp_of_term ?v\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>t' \\<in> pp_of_term ` keys (fst f);\n         t = l - lp (fst f) + t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  t' \\<in> pp_of_term ` keys (fst f)\n  t = l - lp (fst f) + t'\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "from this(1)"], ["proof (chain)\npicking this:\n  t' \\<in> pp_of_term ` keys (fst f)", "have \"fst f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  t' \\<in> pp_of_term ` keys (fst f)\n\ngoal (1 subgoal):\n 1. fst f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  fst f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. t \\<in> pp_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "proof (cases \"fst g = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst g = 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "case True"], ["proof (state)\nthis:\n  fst g = 0\n\ngoal (2 subgoals):\n 1. fst g = 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "hence \"?lg = 0\""], ["proof (prove)\nusing this:\n  fst g = 0\n\ngoal (1 subgoal):\n 1. lp (fst g) = (0::'a)", "by (simp add: lt_def min_term_def term_simps)"], ["proof (state)\nthis:\n  lp (fst g) = (0::'a)\n\ngoal (2 subgoals):\n 1. fst g = 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "hence \"l = ?lf\""], ["proof (prove)\nusing this:\n  lp (fst g) = (0::'a)\n\ngoal (1 subgoal):\n 1. l = lp (fst f)", "by (simp add: l_def lcs_zero lcs_comm)"], ["proof (state)\nthis:\n  l = lp (fst f)\n\ngoal (2 subgoals):\n 1. fst g = 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "hence \"t = t'\""], ["proof (prove)\nusing this:\n  l = lp (fst f)\n\ngoal (1 subgoal):\n 1. t = t'", "by (simp add: t)"], ["proof (state)\nthis:\n  t = t'\n\ngoal (2 subgoals):\n 1. fst g = 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "with \\<open>d s \\<le> d t\\<close>"], ["proof (chain)\npicking this:\n  d s \\<le> d t\n  t = t'", "have \"d s \\<le> d t'\""], ["proof (prove)\nusing this:\n  d s \\<le> d t\n  t = t'\n\ngoal (1 subgoal):\n 1. d s \\<le> d t'", "by simp"], ["proof (state)\nthis:\n  d s \\<le> d t'\n\ngoal (2 subgoals):\n 1. fst g = 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "moreover"], ["proof (state)\nthis:\n  d s \\<le> d t'\n\ngoal (2 subgoals):\n 1. fst g = 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "from \\<open>t' \\<in> pp_of_term ` keys (fst f)\\<close> keys_f"], ["proof (chain)\npicking this:\n  t' \\<in> pp_of_term ` keys (fst f)\n  keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))", "have \"t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  t' \\<in> pp_of_term ` keys (fst f)\n  keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))", "by blast"], ["proof (state)\nthis:\n  t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (2 subgoals):\n 1. fst g = 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "ultimately"], ["proof (chain)\npicking this:\n  d s \\<le> d t'\n  t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))", "show ?thesis"], ["proof (prove)\nusing this:\n  d s \\<le> d t'\n  t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", ".."], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\n\ngoal (1 subgoal):\n 1. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "case False"], ["proof (state)\nthis:\n  fst g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "have \"d t = d (l - ?lf) \\<or> d t = d t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d t = d (l - lp (fst f)) \\<or> d t = d t'", "by (auto simp add: t dickson_gradingD1[OF assms])"], ["proof (state)\nthis:\n  d t = d (l - lp (fst f)) \\<or> d t = d t'\n\ngoal (1 subgoal):\n 1. fst g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "thus ?thesis"], ["proof (prove)\nusing this:\n  d t = d (l - lp (fst f)) \\<or> d t = d t'\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. d t = d (l - lp (fst f)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "assume \"d t = d (l - ?lf)\""], ["proof (state)\nthis:\n  d t = d (l - lp (fst f))\n\ngoal (2 subgoals):\n 1. d t = d (l - lp (fst f)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "also"], ["proof (state)\nthis:\n  d t = d (l - lp (fst f))\n\ngoal (2 subgoals):\n 1. d t = d (l - lp (fst f)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"... \\<le> ord_class.max (d ?lf) (d ?lg)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. d (l - lp (fst f)) \\<le> ord_class.max (d (lp (fst f))) (d (lp (fst g)))", "unfolding l_def"], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. d (lcs (lp (fst f)) (lp (fst g)) - lp (fst f))\n    \\<le> ord_class.max (d (lp (fst f))) (d (lp (fst g)))", "by (rule dickson_grading_lcs_minus)"], ["proof (state)\nthis:\n  d (l - lp (fst f)) \\<le> ord_class.max (d (lp (fst f))) (d (lp (fst g)))\n\ngoal (2 subgoals):\n 1. d t = d (l - lp (fst f)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "finally"], ["proof (chain)\npicking this:\n  d t \\<le> ord_class.max (d (lp (fst f))) (d (lp (fst g)))", "have \"d s \\<le> d ?lf \\<or> d s \\<le> d ?lg\""], ["proof (prove)\nusing this:\n  d t \\<le> ord_class.max (d (lp (fst f))) (d (lp (fst g)))\n\ngoal (1 subgoal):\n 1. d s \\<le> d (lp (fst f)) \\<or> d s \\<le> d (lp (fst g))", "using \\<open>d s \\<le> d t\\<close>"], ["proof (prove)\nusing this:\n  d t \\<le> ord_class.max (d (lp (fst f))) (d (lp (fst g)))\n  d s \\<le> d t\n\ngoal (1 subgoal):\n 1. d s \\<le> d (lp (fst f)) \\<or> d s \\<le> d (lp (fst g))", "by auto"], ["proof (state)\nthis:\n  d s \\<le> d (lp (fst f)) \\<or> d s \\<le> d (lp (fst g))\n\ngoal (2 subgoals):\n 1. d t = d (l - lp (fst f)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "thus ?thesis"], ["proof (prove)\nusing this:\n  d s \\<le> d (lp (fst f)) \\<or> d s \\<le> d (lp (fst g))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. d s \\<le> d (lp (fst f)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. d s \\<le> d (lp (fst g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "assume \"d s \\<le> d ?lf\""], ["proof (state)\nthis:\n  d s \\<le> d (lp (fst f))\n\ngoal (2 subgoals):\n 1. d s \\<le> d (lp (fst f)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. d s \\<le> d (lp (fst g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "moreover"], ["proof (state)\nthis:\n  d s \\<le> d (lp (fst f))\n\ngoal (2 subgoals):\n 1. d s \\<le> d (lp (fst f)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. d s \\<le> d (lp (fst g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "have \"lt (fst f) \\<in> Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (fst f) \\<in> Keys (args_to_set ([], bs, ps))", "by (rule, rule lt_in_keys, fact+)"], ["proof (state)\nthis:\n  lt (fst f) \\<in> Keys (args_to_set ([], bs, ps))\n\ngoal (2 subgoals):\n 1. d s \\<le> d (lp (fst f)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t\n 2. d s \\<le> d (lp (fst g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "ultimately"], ["proof (chain)\npicking this:\n  d s \\<le> d (lp (fst f))\n  lt (fst f) \\<in> Keys (args_to_set ([], bs, ps))", "show ?thesis"], ["proof (prove)\nusing this:\n  d s \\<le> d (lp (fst f))\n  lt (fst f) \\<in> Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "by blast"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\n\ngoal (1 subgoal):\n 1. d s \\<le> d (lp (fst g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d s \\<le> d (lp (fst g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "assume \"d s \\<le> d ?lg\""], ["proof (state)\nthis:\n  d s \\<le> d (lp (fst g))\n\ngoal (1 subgoal):\n 1. d s \\<le> d (lp (fst g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "moreover"], ["proof (state)\nthis:\n  d s \\<le> d (lp (fst g))\n\ngoal (1 subgoal):\n 1. d s \\<le> d (lp (fst g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "have \"lt (fst g) \\<in> Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (fst g) \\<in> Keys (args_to_set ([], bs, ps))", "by (rule, rule lt_in_keys, fact+)"], ["proof (state)\nthis:\n  lt (fst g) \\<in> Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. d s \\<le> d (lp (fst g)) \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "ultimately"], ["proof (chain)\npicking this:\n  d s \\<le> d (lp (fst g))\n  lt (fst g) \\<in> Keys (args_to_set ([], bs, ps))", "show ?thesis"], ["proof (prove)\nusing this:\n  d s \\<le> d (lp (fst g))\n  lt (fst g) \\<in> Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "by blast"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\n\ngoal (1 subgoal):\n 1. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "assume \"d t = d t'\""], ["proof (state)\nthis:\n  d t = d t'\n\ngoal (1 subgoal):\n 1. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "with \\<open>d s \\<le> d t\\<close>"], ["proof (chain)\npicking this:\n  d s \\<le> d t\n  d t = d t'", "have \"d s \\<le> d t'\""], ["proof (prove)\nusing this:\n  d s \\<le> d t\n  d t = d t'\n\ngoal (1 subgoal):\n 1. d s \\<le> d t'", "by simp"], ["proof (state)\nthis:\n  d s \\<le> d t'\n\ngoal (1 subgoal):\n 1. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "moreover"], ["proof (state)\nthis:\n  d s \\<le> d t'\n\ngoal (1 subgoal):\n 1. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "from \\<open>t' \\<in> pp_of_term ` keys (fst f)\\<close> keys_f"], ["proof (chain)\npicking this:\n  t' \\<in> pp_of_term ` keys (fst f)\n  keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))", "have \"t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  t' \\<in> pp_of_term ` keys (fst f)\n  keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))", "by blast"], ["proof (state)\nthis:\n  t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. d t = d t' \\<Longrightarrow>\n    \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", "ultimately"], ["proof (chain)\npicking this:\n  d s \\<le> d t'\n  t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))", "show ?thesis"], ["proof (prove)\nusing this:\n  d s \\<le> d t'\n  t' \\<in> pp_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)).\n       d s \\<le> d t", ".."], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t\\<in>pp_of_term ` Keys (args_to_set ([], bs, ps)). d s \\<le> d t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma components_f4_red_aux_subset:\n  \"component_of_term ` Keys (set (f4_red_aux bs ps)) \\<subseteq> component_of_term ` Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (f4_red_aux bs ps))\n    \\<subseteq> component_of_term ` Keys (args_to_set ([], bs, ps))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       x \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       x \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "assume \"k \\<in> component_of_term ` Keys (set (f4_red_aux bs ps))\""], ["proof (state)\nthis:\n  k \\<in> component_of_term ` Keys (set (f4_red_aux bs ps))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       x \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "also"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` Keys (set (f4_red_aux bs ps))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       x \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "have \"... \\<subseteq> component_of_term ` Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (f4_red_aux bs ps))\n    \\<subseteq> component_of_term `\n                Keys\n                 (set (snd (sym_preproc (map fst bs)\n                             (pdata_pairs_to_list ps))))", "by (rule image_mono, simp only: f4_red_aux_def Let_def fst_sym_preproc Keys_Macaulay_red)"], ["proof (state)\nthis:\n  component_of_term ` Keys (set (f4_red_aux bs ps))\n  \\<subseteq> component_of_term `\n              Keys\n               (set (snd (sym_preproc (map fst bs)\n                           (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       x \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "also"], ["proof (state)\nthis:\n  component_of_term ` Keys (set (f4_red_aux bs ps))\n  \\<subseteq> component_of_term `\n              Keys\n               (set (snd (sym_preproc (map fst bs)\n                           (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       x \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "have \"... \\<subseteq> component_of_term ` Keys (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n    \\<subseteq> component_of_term `\n                Keys\n                 (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))", "by (fact components_snd_sym_preproc_subset)"], ["proof (state)\nthis:\n  component_of_term `\n  Keys (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  \\<subseteq> component_of_term `\n              Keys (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       x \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "finally"], ["proof (chain)\npicking this:\n  k \\<in> component_of_term `\n          Keys (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))", "have \"k \\<in> component_of_term ` Keys (fst ` set bs) \\<union> component_of_term ` Keys (set (pdata_pairs_to_list ps))\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term `\n          Keys (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` Keys (fst ` set bs) \\<union>\n            component_of_term ` Keys (set (pdata_pairs_to_list ps))", "by (simp add: image_Un Keys_Un)"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` Keys (fst ` set bs) \\<union>\n          component_of_term ` Keys (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               Keys (set (f4_red_aux bs ps)) \\<Longrightarrow>\n       x \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "thus \"k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` Keys (fst ` set bs) \\<union>\n          component_of_term ` Keys (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<in> component_of_term ` Keys (fst ` set bs) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\n 2. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "assume \"k \\<in> component_of_term ` Keys (fst `  set bs)\""], ["proof (state)\nthis:\n  k \\<in> component_of_term ` Keys (fst ` set bs)\n\ngoal (2 subgoals):\n 1. k \\<in> component_of_term ` Keys (fst ` set bs) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\n 2. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "also"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` Keys (fst ` set bs)\n\ngoal (2 subgoals):\n 1. k \\<in> component_of_term ` Keys (fst ` set bs) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\n 2. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "have \"... \\<subseteq> component_of_term ` Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (fst ` set bs)\n    \\<subseteq> component_of_term ` Keys (args_to_set ([], bs, ps))", "by (rule image_mono, rule Keys_mono, auto simp add: args_to_set_alt)"], ["proof (state)\nthis:\n  component_of_term ` Keys (fst ` set bs)\n  \\<subseteq> component_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (2 subgoals):\n 1. k \\<in> component_of_term ` Keys (fst ` set bs) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\n 2. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "finally"], ["proof (chain)\npicking this:\n  k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "show \"k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "."], ["proof (state)\nthis:\n  k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "assume \"k \\<in> component_of_term ` Keys (set (pdata_pairs_to_list ps))\""], ["proof (state)\nthis:\n  k \\<in> component_of_term ` Keys (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "then"], ["proof (chain)\npicking this:\n  k \\<in> component_of_term ` Keys (set (pdata_pairs_to_list ps))", "obtain p where \"p \\<in> set (pdata_pairs_to_list ps)\" and \"k \\<in> component_of_term ` keys p\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` Keys (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> set (pdata_pairs_to_list ps);\n         k \\<in> component_of_term ` keys p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: in_KeysE)"], ["proof (state)\nthis:\n  p \\<in> set (pdata_pairs_to_list ps)\n  k \\<in> component_of_term ` keys p\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "from this(1)"], ["proof (chain)\npicking this:\n  p \\<in> set (pdata_pairs_to_list ps)", "obtain f g where disj: \"(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\"\n      and p: \"p = monom_mult (1 / lc (fst f)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst f))) (fst f)\""], ["proof (prove)\nusing this:\n  p \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. (\\<And>f g.\n        \\<lbrakk>(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps;\n         p =\n         monom_mult ((1::'b) / lc (fst f))\n          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_pdata_pairs_to_listE)"], ["proof (state)\nthis:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n  p =\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "from disj"], ["proof (chain)\npicking this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps", "have \"fst f \\<in> args_to_set ([], bs, ps)\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n\ngoal (1 subgoal):\n 1. fst f \\<in> args_to_set ([], bs, ps)", "by (simp add: args_to_set_alt, metis fst_conv image_eqI snd_conv)"], ["proof (state)\nthis:\n  fst f \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "hence \"fst f \\<in> args_to_set ([], bs, ps)\""], ["proof (prove)\nusing this:\n  fst f \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. fst f \\<in> args_to_set ([], bs, ps)", "by simp"], ["proof (state)\nthis:\n  fst f \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "hence keys_f: \"keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  fst f \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))", "by (auto intro!: keys_subset_Keys)"], ["proof (state)\nthis:\n  keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "let ?lf = \"lp (fst f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "let ?lg = \"lp (fst g)\""], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "define l where \"l = lcs ?lf ?lg\""], ["proof (state)\nthis:\n  l = lcs (lp (fst f)) (lp (fst g))\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "have \"component_of_term ` keys p \\<subseteq> component_of_term ` ((\\<oplus>) (lcs ?lf ?lg - ?lf) ` keys (fst f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` keys p\n    \\<subseteq> component_of_term `\n                (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n                keys (fst f)", "unfolding p"], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    keys\n     (monom_mult ((1::'b) / lc (fst f))\n       (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f))\n    \\<subseteq> component_of_term `\n                (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n                keys (fst f)", "using keys_monom_mult_subset"], ["proof (prove)\nusing this:\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n\ngoal (1 subgoal):\n 1. component_of_term `\n    keys\n     (monom_mult ((1::'b) / lc (fst f))\n       (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f))\n    \\<subseteq> component_of_term `\n                (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n                keys (fst f)", "by (rule image_mono)"], ["proof (state)\nthis:\n  component_of_term ` keys p\n  \\<subseteq> component_of_term `\n              (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n              keys (fst f)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "with \\<open>k \\<in> component_of_term ` keys p\\<close>"], ["proof (chain)\npicking this:\n  k \\<in> component_of_term ` keys p\n  component_of_term ` keys p\n  \\<subseteq> component_of_term `\n              (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n              keys (fst f)", "have \"k \\<in> component_of_term ` ((\\<oplus>) (l - ?lf) ` keys (fst f))\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` keys p\n  component_of_term ` keys p\n  \\<subseteq> component_of_term `\n              (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n              keys (fst f)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` (\\<oplus>) (l - lp (fst f)) ` keys (fst f)", "unfolding l_def"], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` keys p\n  component_of_term ` keys p\n  \\<subseteq> component_of_term `\n              (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n              keys (fst f)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            (\\<oplus>) (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) `\n            keys (fst f)", ".."], ["proof (state)\nthis:\n  k \\<in> component_of_term ` (\\<oplus>) (l - lp (fst f)) ` keys (fst f)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "hence \"k \\<in> component_of_term ` keys (fst f)\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` (\\<oplus>) (l - lp (fst f)) ` keys (fst f)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` keys (fst f)", "using component_of_term_splus"], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` (\\<oplus>) (l - lp (fst f)) ` keys (fst f)\n  component_of_term (?t \\<oplus> ?v) = component_of_term ?v\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` keys (fst f)", "by fastforce"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` keys (fst f)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term `\n            Keys (set (pdata_pairs_to_list ps)) \\<Longrightarrow>\n    k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "with keys_f"], ["proof (chain)\npicking this:\n  keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))\n  k \\<in> component_of_term ` keys (fst f)", "show \"k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  keys (fst f) \\<subseteq> Keys (args_to_set ([], bs, ps))\n  k \\<in> component_of_term ` keys (fst f)\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))", "by blast"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` Keys (args_to_set ([], bs, ps))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pmdl_f4_red_aux: \"set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "have \"set (f4_red_aux bs ps) \\<subseteq>\n          set (Macaulay_list (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps)\n    \\<subseteq> set (Macaulay_list\n                      (snd (sym_preproc (map fst bs)\n                             (pdata_pairs_to_list ps))))", "by (auto simp add: f4_red_aux_def Let_def fst_sym_preproc set_Macaulay_red)"], ["proof (state)\nthis:\n  set (f4_red_aux bs ps)\n  \\<subseteq> set (Macaulay_list\n                    (snd (sym_preproc (map fst bs)\n                           (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "also"], ["proof (state)\nthis:\n  set (f4_red_aux bs ps)\n  \\<subseteq> set (Macaulay_list\n                    (snd (sym_preproc (map fst bs)\n                           (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "have \"... \\<subseteq> pmdl (set (Macaulay_list (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Macaulay_list\n          (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n    \\<subseteq> pmdl\n                 (set (Macaulay_list\n                        (snd (sym_preproc (map fst bs)\n                               (pdata_pairs_to_list ps)))))", "by (fact pmdl.span_superset)"], ["proof (state)\nthis:\n  set (Macaulay_list\n        (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  \\<subseteq> pmdl\n               (set (Macaulay_list\n                      (snd (sym_preproc (map fst bs)\n                             (pdata_pairs_to_list ps)))))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "also"], ["proof (state)\nthis:\n  set (Macaulay_list\n        (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  \\<subseteq> pmdl\n               (set (Macaulay_list\n                      (snd (sym_preproc (map fst bs)\n                             (pdata_pairs_to_list ps)))))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "have \"... = pmdl (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl\n     (set (Macaulay_list\n            (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))) =\n    pmdl (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))", "by (fact pmdl_Macaulay_list)"], ["proof (state)\nthis:\n  pmdl\n   (set (Macaulay_list\n          (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))) =\n  pmdl (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "also"], ["proof (state)\nthis:\n  pmdl\n   (set (Macaulay_list\n          (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))) =\n  pmdl (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "have \"... \\<subseteq> pmdl (set (map fst bs) \\<union>\n                        set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n    \\<subseteq> pmdl\n                 (set (map fst bs) \\<union>\n                  set (snd (sym_preproc (map fst bs)\n                             (pdata_pairs_to_list ps))))", "by (rule pmdl.span_mono, blast)"], ["proof (state)\nthis:\n  pmdl (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  \\<subseteq> pmdl\n               (set (map fst bs) \\<union>\n                set (snd (sym_preproc (map fst bs)\n                           (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "also"], ["proof (state)\nthis:\n  pmdl (set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))))\n  \\<subseteq> pmdl\n               (set (map fst bs) \\<union>\n                set (snd (sym_preproc (map fst bs)\n                           (pdata_pairs_to_list ps))))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "have \"... = pmdl (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl\n     (set (map fst bs) \\<union>\n      set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps)))) =\n    pmdl (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))", "by (fact snd_sym_preproc_pmdl)"], ["proof (state)\nthis:\n  pmdl\n   (set (map fst bs) \\<union>\n    set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps)))) =\n  pmdl (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "also"], ["proof (state)\nthis:\n  pmdl\n   (set (map fst bs) \\<union>\n    set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps)))) =\n  pmdl (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "have \"... \\<subseteq> pmdl (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\n    \\<subseteq> pmdl (args_to_set ([], bs, ps))", "proof (rule pmdl.span_subset_spanI, simp only: Un_subset_iff, rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. set (map fst bs) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n 2. set (pdata_pairs_to_list ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "have \"set (map fst bs) \\<subseteq> args_to_set ([], bs, ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map fst bs) \\<subseteq> args_to_set ([], bs, ps)", "by (auto simp add: args_to_set_def)"], ["proof (state)\nthis:\n  set (map fst bs) \\<subseteq> args_to_set ([], bs, ps)\n\ngoal (2 subgoals):\n 1. set (map fst bs) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n 2. set (pdata_pairs_to_list ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "also"], ["proof (state)\nthis:\n  set (map fst bs) \\<subseteq> args_to_set ([], bs, ps)\n\ngoal (2 subgoals):\n 1. set (map fst bs) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n 2. set (pdata_pairs_to_list ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "have \"... \\<subseteq> pmdl (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. args_to_set ([], bs, ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "by (rule pmdl.span_superset)"], ["proof (state)\nthis:\n  args_to_set ([], bs, ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n\ngoal (2 subgoals):\n 1. set (map fst bs) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n 2. set (pdata_pairs_to_list ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "finally"], ["proof (chain)\npicking this:\n  set (map fst bs) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "show \"set (map fst bs) \\<subseteq> pmdl (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  set (map fst bs) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. set (map fst bs) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "."], ["proof (state)\nthis:\n  set (map fst bs) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. set (pdata_pairs_to_list ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set (pdata_pairs_to_list ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "show \"set (pdata_pairs_to_list ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pdata_pairs_to_list ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow>\n       x \\<in> pmdl (args_to_set ([], bs, ps))", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow>\n       x \\<in> pmdl (args_to_set ([], bs, ps))", "assume \"p \\<in> set (pdata_pairs_to_list ps)\""], ["proof (state)\nthis:\n  p \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow>\n       x \\<in> pmdl (args_to_set ([], bs, ps))", "then"], ["proof (chain)\npicking this:\n  p \\<in> set (pdata_pairs_to_list ps)", "obtain f g where \"(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\"\n        and p: \"p = monom_mult (1 / lc (fst f)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst f))) (fst f)\""], ["proof (prove)\nusing this:\n  p \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. (\\<And>f g.\n        \\<lbrakk>(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps;\n         p =\n         monom_mult ((1::'b) / lc (fst f))\n          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_pdata_pairs_to_listE)"], ["proof (state)\nthis:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n  p =\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow>\n       x \\<in> pmdl (args_to_set ([], bs, ps))", "from this(1)"], ["proof (chain)\npicking this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps", "have \"f \\<in> fst ` set ps \\<union> snd ` set ps\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n\ngoal (1 subgoal):\n 1. f \\<in> fst ` set ps \\<union> snd ` set ps", "by force"], ["proof (state)\nthis:\n  f \\<in> fst ` set ps \\<union> snd ` set ps\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow>\n       x \\<in> pmdl (args_to_set ([], bs, ps))", "hence \"fst f \\<in> args_to_set ([], bs, ps)\""], ["proof (prove)\nusing this:\n  f \\<in> fst ` set ps \\<union> snd ` set ps\n\ngoal (1 subgoal):\n 1. fst f \\<in> args_to_set ([], bs, ps)", "by (auto simp add: args_to_set_alt)"], ["proof (state)\nthis:\n  fst f \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow>\n       x \\<in> pmdl (args_to_set ([], bs, ps))", "hence \"fst f \\<in> pmdl (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  fst f \\<in> args_to_set ([], bs, ps)\n\ngoal (1 subgoal):\n 1. fst f \\<in> pmdl (args_to_set ([], bs, ps))", "by (rule pmdl.span_base)"], ["proof (state)\nthis:\n  fst f \\<in> pmdl (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (pdata_pairs_to_list ps) \\<Longrightarrow>\n       x \\<in> pmdl (args_to_set ([], bs, ps))", "thus \"p \\<in> pmdl (args_to_set ([], bs, ps))\""], ["proof (prove)\nusing this:\n  fst f \\<in> pmdl (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. p \\<in> pmdl (args_to_set ([], bs, ps))", "unfolding p"], ["proof (prove)\nusing this:\n  fst f \\<in> pmdl (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst f))\n     (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n    \\<in> pmdl (args_to_set ([], bs, ps))", "by (rule pmdl_closed_monom_mult)"], ["proof (state)\nthis:\n  p \\<in> pmdl (args_to_set ([], bs, ps))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (pdata_pairs_to_list ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pmdl (set (map fst bs) \\<union> set (pdata_pairs_to_list ps))\n  \\<subseteq> pmdl (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "finally"], ["proof (chain)\npicking this:\n  set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n\ngoal (1 subgoal):\n 1. set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))", "."], ["proof (state)\nthis:\n  set (f4_red_aux bs ps) \\<subseteq> pmdl (args_to_set ([], bs, ps))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma f4_red_aux_phull_reducible:\n  assumes \"set ps \\<subseteq> set bs \\<times> set bs\"\n    and \"f \\<in> phull (set (pdata_pairs_to_list ps))\"\n  shows \"(red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "define fs where \"fs = snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))\""], ["proof (state)\nthis:\n  fs = snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "have \"set (pdata_pairs_to_list ps) \\<subseteq> set fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pdata_pairs_to_list ps) \\<subseteq> set fs", "unfolding fs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (pdata_pairs_to_list ps)\n    \\<subseteq> set (snd (sym_preproc (map fst bs)\n                           (pdata_pairs_to_list ps)))", "by (fact snd_sym_preproc_superset)"], ["proof (state)\nthis:\n  set (pdata_pairs_to_list ps) \\<subseteq> set fs\n\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "hence \"phull (set (pdata_pairs_to_list ps)) \\<subseteq> phull (set fs)\""], ["proof (prove)\nusing this:\n  set (pdata_pairs_to_list ps) \\<subseteq> set fs\n\ngoal (1 subgoal):\n 1. phull (set (pdata_pairs_to_list ps)) \\<subseteq> phull (set fs)", "by (rule phull.span_mono)"], ["proof (state)\nthis:\n  phull (set (pdata_pairs_to_list ps)) \\<subseteq> phull (set fs)\n\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "with assms(2)"], ["proof (chain)\npicking this:\n  f \\<in> phull (set (pdata_pairs_to_list ps))\n  phull (set (pdata_pairs_to_list ps)) \\<subseteq> phull (set fs)", "have f_in: \"f \\<in> phull (set fs)\""], ["proof (prove)\nusing this:\n  f \\<in> phull (set (pdata_pairs_to_list ps))\n  phull (set (pdata_pairs_to_list ps)) \\<subseteq> phull (set fs)\n\ngoal (1 subgoal):\n 1. f \\<in> phull (set fs)", ".."], ["proof (state)\nthis:\n  f \\<in> phull (set fs)\n\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "have eq: \"(set fs) \\<union> set (f4_red_aux bs ps) = (set fs) \\<union> set (Macaulay_red (Keys_to_list fs) fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set fs \\<union> set (f4_red_aux bs ps) =\n    set fs \\<union> set (Macaulay_red (Keys_to_list fs) fs)", "by (simp add: f4_red_aux_def fs_def Let_def fst_sym_preproc)"], ["proof (state)\nthis:\n  set fs \\<union> set (f4_red_aux bs ps) =\n  set fs \\<union> set (Macaulay_red (Keys_to_list fs) fs)\n\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "have \"(lin_red ((set fs) \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lin_red (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "by (simp only: eq, rule Macaulay_red_reducible, fact f_in, fact subset_refl, fact refl)"], ["proof (state)\nthis:\n  (lin_red (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  (lin_red (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f f\n 2. \\<And>y z.\n       \\<lbrakk>(lin_red\n                  (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                 f y;\n        lin_red (set fs \\<union> set (f4_red_aux bs ps)) y z;\n        (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n         f y\\<rbrakk>\n       \\<Longrightarrow> (red (fst ` set bs \\<union>\n                               set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                          f z", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f f\n 2. \\<And>y z.\n       \\<lbrakk>(lin_red\n                  (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                 f y;\n        lin_red (set fs \\<union> set (f4_red_aux bs ps)) y z;\n        (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n         f y\\<rbrakk>\n       \\<Longrightarrow> (red (fst ` set bs \\<union>\n                               set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                          f z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f f", ".."], ["proof (state)\nthis:\n  (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f f\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(lin_red\n                  (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                 f y;\n        lin_red (set fs \\<union> set (f4_red_aux bs ps)) y z;\n        (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n         f y\\<rbrakk>\n       \\<Longrightarrow> (red (fst ` set bs \\<union>\n                               set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                          f z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(lin_red\n                  (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                 f y;\n        lin_red (set fs \\<union> set (f4_red_aux bs ps)) y z;\n        (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n         f y\\<rbrakk>\n       \\<Longrightarrow> (red (fst ` set bs \\<union>\n                               set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                          f z", "case (step y z)"], ["proof (state)\nthis:\n  (lin_red (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f y\n  lin_red (set fs \\<union> set (f4_red_aux bs ps)) y z\n  (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(lin_red\n                  (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                 f y;\n        lin_red (set fs \\<union> set (f4_red_aux bs ps)) y z;\n        (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n         f y\\<rbrakk>\n       \\<Longrightarrow> (red (fst ` set bs \\<union>\n                               set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                          f z", "from step(2)"], ["proof (chain)\npicking this:\n  lin_red (set fs \\<union> set (f4_red_aux bs ps)) y z", "have \"red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\""], ["proof (prove)\nusing this:\n  lin_red (set fs \\<union> set (f4_red_aux bs ps)) y z\n\ngoal (1 subgoal):\n 1. red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "unfolding lin_red_Un"], ["proof (prove)\nusing this:\n  lin_red (set fs) y z \\<or> lin_red (set (f4_red_aux bs ps)) y z\n\ngoal (1 subgoal):\n 1. red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lin_red (set fs) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n 2. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "assume \"lin_red (set fs) y z\""], ["proof (state)\nthis:\n  lin_red (set fs) y z\n\ngoal (2 subgoals):\n 1. lin_red (set fs) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n 2. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "then"], ["proof (chain)\npicking this:\n  lin_red (set fs) y z", "obtain a where \"a \\<in> set fs\" and r: \"red_single y z a 0\""], ["proof (prove)\nusing this:\n  lin_red (set fs) y z\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> set fs; red_single y z a (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lin_redE)"], ["proof (state)\nthis:\n  a \\<in> set fs\n  red_single y z a (0::'a)\n\ngoal (2 subgoals):\n 1. lin_red (set fs) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n 2. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "from this(1)"], ["proof (chain)\npicking this:\n  a \\<in> set fs", "obtain b c t where \"b \\<in> fst ` set bs\" and a: \"a = monom_mult c t b\""], ["proof (prove)\nusing this:\n  a \\<in> set fs\n\ngoal (1 subgoal):\n 1. (\\<And>b c t.\n        \\<lbrakk>b \\<in> fst ` set bs; a = monom_mult c t b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding fs_def"], ["proof (prove)\nusing this:\n  a \\<in> set (snd (sym_preproc (map fst bs) (pdata_pairs_to_list ps)))\n\ngoal (1 subgoal):\n 1. (\\<And>b c t.\n        \\<lbrakk>b \\<in> fst ` set bs; a = monom_mult c t b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule in_snd_sym_preprocE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b c t.\n                \\<lbrakk>b \\<in> fst ` set bs; a = monom_mult c t b\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     a \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume *: \"\\<And>b c t. b \\<in> fst ` set bs \\<Longrightarrow> a = monom_mult c t b \\<Longrightarrow> thesis\""], ["proof (state)\nthis:\n  \\<lbrakk>?b103 \\<in> fst ` set bs;\n   a = monom_mult ?c103 ?t103 ?b103\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b c t.\n                \\<lbrakk>b \\<in> fst ` set bs; a = monom_mult c t b\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     a \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"a \\<in> set (pdata_pairs_to_list ps)\""], ["proof (state)\nthis:\n  a \\<in> set (pdata_pairs_to_list ps)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b c t.\n                \\<lbrakk>b \\<in> fst ` set bs; a = monom_mult c t b\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     a \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  a \\<in> set (pdata_pairs_to_list ps)", "obtain f g where \"(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\"\n          and a: \"a = monom_mult (1 / lc (fst f)) ((lcs (lp (fst f)) (lp (fst g))) - (lp (fst f))) (fst f)\""], ["proof (prove)\nusing this:\n  a \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. (\\<And>f g.\n        \\<lbrakk>(f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps;\n         a =\n         monom_mult ((1::'b) / lc (fst f))\n          (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_pdata_pairs_to_listE)"], ["proof (state)\nthis:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n  a =\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b c t.\n                \\<lbrakk>b \\<in> fst ` set bs; a = monom_mult c t b\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     a \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "from this(1)"], ["proof (chain)\npicking this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps", "have \"f \\<in> fst ` set ps \\<union> snd ` set ps\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> set ps \\<or> (g, f) \\<in> set ps\n\ngoal (1 subgoal):\n 1. f \\<in> fst ` set ps \\<union> snd ` set ps", "by force"], ["proof (state)\nthis:\n  f \\<in> fst ` set ps \\<union> snd ` set ps\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b c t.\n                \\<lbrakk>b \\<in> fst ` set bs; a = monom_mult c t b\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     a \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "with assms(1)"], ["proof (chain)\npicking this:\n  set ps \\<subseteq> set bs \\<times> set bs\n  f \\<in> fst ` set ps \\<union> snd ` set ps", "have \"f \\<in> set bs\""], ["proof (prove)\nusing this:\n  set ps \\<subseteq> set bs \\<times> set bs\n  f \\<in> fst ` set ps \\<union> snd ` set ps\n\ngoal (1 subgoal):\n 1. f \\<in> set bs", "by fastforce"], ["proof (state)\nthis:\n  f \\<in> set bs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b c t.\n                \\<lbrakk>b \\<in> fst ` set bs; a = monom_mult c t b\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     a \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \"fst f \\<in> fst ` set bs\""], ["proof (prove)\nusing this:\n  f \\<in> set bs\n\ngoal (1 subgoal):\n 1. fst f \\<in> fst ` set bs", "by simp"], ["proof (state)\nthis:\n  fst f \\<in> fst ` set bs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>b c t.\n                \\<lbrakk>b \\<in> fst ` set bs; a = monom_mult c t b\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     a \\<in> set (pdata_pairs_to_list ps)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "from this a"], ["proof (chain)\npicking this:\n  fst f \\<in> fst ` set bs\n  a =\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)", "show ?thesis"], ["proof (prove)\nusing this:\n  fst f \\<in> fst ` set bs\n  a =\n  monom_mult ((1::'b) / lc (fst f))\n   (lcs (lp (fst f)) (lp (fst g)) - lp (fst f)) (fst f)\n\ngoal (1 subgoal):\n 1. thesis", "by (rule *)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix g s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume *: \"\\<And>b c t. b \\<in> fst ` set bs \\<Longrightarrow> a = monom_mult c t b \\<Longrightarrow> thesis\""], ["proof (state)\nthis:\n  \\<lbrakk>?b103 \\<in> fst ` set bs;\n   a = monom_mult ?c103 ?t103 ?b103\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"g \\<in> set (map fst bs)\""], ["proof (state)\nthis:\n  g \\<in> set (map fst bs)\n\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \"g \\<in> fst ` set bs\""], ["proof (prove)\nusing this:\n  g \\<in> set (map fst bs)\n\ngoal (1 subgoal):\n 1. g \\<in> fst ` set bs", "by simp"], ["proof (state)\nthis:\n  g \\<in> fst ` set bs\n\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  g \\<in> fst ` set bs\n\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"a = monom_mult 1 s g\""], ["proof (state)\nthis:\n  a = monom_mult (1::'b) s g\n\ngoal (1 subgoal):\n 1. \\<And>g t.\n       \\<lbrakk>\\<And>b c t.\n                   \\<lbrakk>b \\<in> fst ` set bs;\n                    a = monom_mult c t b\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        g \\<in> set (map fst bs); a = monom_mult (1::'b) t g\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  g \\<in> fst ` set bs\n  a = monom_mult (1::'b) s g", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> fst ` set bs\n  a = monom_mult (1::'b) s g\n\ngoal (1 subgoal):\n 1. thesis", "by (rule *)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  b \\<in> fst ` set bs\n  a = monom_mult c t b\n\ngoal (2 subgoals):\n 1. lin_red (set fs) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n 2. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "from r"], ["proof (chain)\npicking this:\n  red_single y z a (0::'a)", "have \"c \\<noteq> 0\" and \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  red_single y z a (0::'a)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) &&& b \\<noteq> 0", "by (simp_all add: a red_single_def monom_mult_eq_zero_iff)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n  b \\<noteq> 0\n\ngoal (2 subgoals):\n 1. lin_red (set fs) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n 2. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "from r"], ["proof (chain)\npicking this:\n  red_single y z a (0::'a)", "have \"red_single y z b t\""], ["proof (prove)\nusing this:\n  red_single y z a (0::'a)\n\ngoal (1 subgoal):\n 1. red_single y z b t", "by (simp add: a red_single_def monom_mult_eq_zero_iff lt_monom_mult[OF \\<open>c \\<noteq> 0\\<close> \\<open>b \\<noteq> 0\\<close>]\n                      monom_mult_assoc term_simps)"], ["proof (state)\nthis:\n  red_single y z b t\n\ngoal (2 subgoals):\n 1. lin_red (set fs) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n 2. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "with \\<open>b \\<in> fst ` set bs\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> fst ` set bs\n  red_single y z b t", "have \"red (fst ` set bs) y z\""], ["proof (prove)\nusing this:\n  b \\<in> fst ` set bs\n  red_single y z b t\n\ngoal (1 subgoal):\n 1. red (fst ` set bs) y z", "by (rule red_setI)"], ["proof (state)\nthis:\n  red (fst ` set bs) y z\n\ngoal (2 subgoals):\n 1. lin_red (set fs) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n 2. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "thus ?thesis"], ["proof (prove)\nusing this:\n  red (fst ` set bs) y z\n\ngoal (1 subgoal):\n 1. red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "by (rule red_unionI1)"], ["proof (state)\nthis:\n  red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n\ngoal (1 subgoal):\n 1. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "assume \"lin_red (set (f4_red_aux bs ps)) y z\""], ["proof (state)\nthis:\n  lin_red (set (f4_red_aux bs ps)) y z\n\ngoal (1 subgoal):\n 1. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "hence \"red (set (f4_red_aux bs ps)) y z\""], ["proof (prove)\nusing this:\n  lin_red (set (f4_red_aux bs ps)) y z\n\ngoal (1 subgoal):\n 1. red (set (f4_red_aux bs ps)) y z", "by (rule lin_red_imp_red)"], ["proof (state)\nthis:\n  red (set (f4_red_aux bs ps)) y z\n\ngoal (1 subgoal):\n 1. lin_red (set (f4_red_aux bs ps)) y z \\<Longrightarrow>\n    red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "thus ?thesis"], ["proof (prove)\nusing this:\n  red (set (f4_red_aux bs ps)) y z\n\ngoal (1 subgoal):\n 1. red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "by (rule red_unionI2)"], ["proof (state)\nthis:\n  red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(lin_red\n                  (set fs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                 f y;\n        lin_red (set fs \\<union> set (f4_red_aux bs ps)) y z;\n        (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n         f y\\<rbrakk>\n       \\<Longrightarrow> (red (fst ` set bs \\<union>\n                               set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n                          f z", "with step(3)"], ["proof (chain)\npicking this:\n  (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f y\n  red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z", "show ?case"], ["proof (prove)\nusing this:\n  (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f y\n  red (fst ` set bs \\<union> set (f4_red_aux bs ps)) y z\n\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f z", ".."], ["proof (state)\nthis:\n  (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* f 0\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary f4_red_aux_spoly_reducible:\n  assumes \"set ps \\<subseteq> set bs \\<times> set bs\" and \"(p, q) \\<in> set ps\"\n  shows \"(red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>* (spoly (fst p) (fst q)) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n     (spoly (fst p) (fst q)) 0", "using assms(1)"], ["proof (prove)\nusing this:\n  set ps \\<subseteq> set bs \\<times> set bs\n\ngoal (1 subgoal):\n 1. (red (fst ` set bs \\<union> set (f4_red_aux bs ps)))\\<^sup>*\\<^sup>*\n     (spoly (fst p) (fst q)) 0", "proof (rule f4_red_aux_phull_reducible)"], ["proof (state)\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "let ?lt = \"lp (fst p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "let ?lq = \"lp (fst q)\""], ["proof (state)\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "let ?l = \"lcs ?lt ?lq\""], ["proof (state)\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "let ?p = \"monom_mult (1 / lc (fst p)) (?l - ?lt) (fst p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "let ?q = \"monom_mult (1 / lc (fst q)) (?l - ?lq) (fst q)\""], ["proof (state)\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "from assms(2)"], ["proof (chain)\npicking this:\n  (p, q) \\<in> set ps", "have \"?p \\<in> set (pdata_pairs_to_list ps)\" and \"?q \\<in> set (pdata_pairs_to_list ps)\""], ["proof (prove)\nusing this:\n  (p, q) \\<in> set ps\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst p))\n     (lcs (lp (fst p)) (lp (fst q)) - lp (fst p)) (fst p)\n    \\<in> set (pdata_pairs_to_list ps) &&&\n    monom_mult ((1::'b) / lc (fst q))\n     (lcs (lp (fst p)) (lp (fst q)) - lp (fst q)) (fst q)\n    \\<in> set (pdata_pairs_to_list ps)", "by (rule in_pdata_pairs_to_listI1, rule in_pdata_pairs_to_listI2)"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst p))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst p)) (fst p)\n  \\<in> set (pdata_pairs_to_list ps)\n  monom_mult ((1::'b) / lc (fst q))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst q)) (fst q)\n  \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "hence \"?p \\<in> phull (set (pdata_pairs_to_list ps))\" and \"?q \\<in> phull (set (pdata_pairs_to_list ps))\""], ["proof (prove)\nusing this:\n  monom_mult ((1::'b) / lc (fst p))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst p)) (fst p)\n  \\<in> set (pdata_pairs_to_list ps)\n  monom_mult ((1::'b) / lc (fst q))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst q)) (fst q)\n  \\<in> set (pdata_pairs_to_list ps)\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst p))\n     (lcs (lp (fst p)) (lp (fst q)) - lp (fst p)) (fst p)\n    \\<in> phull (set (pdata_pairs_to_list ps)) &&&\n    monom_mult ((1::'b) / lc (fst q))\n     (lcs (lp (fst p)) (lp (fst q)) - lp (fst q)) (fst q)\n    \\<in> phull (set (pdata_pairs_to_list ps))", "by (auto intro: phull.span_base)"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst p))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst p)) (fst p)\n  \\<in> phull (set (pdata_pairs_to_list ps))\n  monom_mult ((1::'b) / lc (fst q))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst q)) (fst q)\n  \\<in> phull (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "hence \"?p - ?q \\<in> phull (set (pdata_pairs_to_list ps))\""], ["proof (prove)\nusing this:\n  monom_mult ((1::'b) / lc (fst p))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst p)) (fst p)\n  \\<in> phull (set (pdata_pairs_to_list ps))\n  monom_mult ((1::'b) / lc (fst q))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst q)) (fst q)\n  \\<in> phull (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. monom_mult ((1::'b) / lc (fst p))\n     (lcs (lp (fst p)) (lp (fst q)) - lp (fst p)) (fst p) -\n    monom_mult ((1::'b) / lc (fst q))\n     (lcs (lp (fst p)) (lp (fst q)) - lp (fst q)) (fst q)\n    \\<in> phull (set (pdata_pairs_to_list ps))", "by (rule phull.span_diff)"], ["proof (state)\nthis:\n  monom_mult ((1::'b) / lc (fst p))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst p)) (fst p) -\n  monom_mult ((1::'b) / lc (fst q))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst q)) (fst q)\n  \\<in> phull (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "thus \"spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))\""], ["proof (prove)\nusing this:\n  monom_mult ((1::'b) / lc (fst p))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst p)) (fst p) -\n  monom_mult ((1::'b) / lc (fst q))\n   (lcs (lp (fst p)) (lp (fst q)) - lp (fst q)) (fst q)\n  \\<in> phull (set (pdata_pairs_to_list ps))\n\ngoal (1 subgoal):\n 1. spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))", "by (simp add: spoly_def Let_def phull.span_zero lc_def split: if_split)"], ["proof (state)\nthis:\n  spoly (fst p) (fst q) \\<in> phull (set (pdata_pairs_to_list ps))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition f4_red :: \"('t, 'b::field, 'c::default, 'd) complT\"\n  where \"f4_red gs bs ps sps data = (map (\\<lambda>h. (h, default)) (f4_red_aux (gs @ bs) sps), snd data)\""], ["", "lemma fst_set_fst_f4_red: \"fst ` set (fst (f4_red gs bs ps sps data)) = set (f4_red_aux (gs @ bs) sps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` set (fst (f4_red gs bs ps sps data)) =\n    set (f4_red_aux (gs @ bs) sps)", "by (simp add: f4_red_def, force)"], ["", "lemma rcp_spec_f4_red: \"rcp_spec f4_red\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rcp_spec f4_red", "proof (rule rcp_specI)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>gs bs ps sps data.\n       0 \\<notin> fst ` set (fst (f4_red gs bs ps sps data))\n 2. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 3. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 5. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "fix gs bs::\"('t, 'b, 'c) pdata list\" and ps sps and data::\"nat \\<times> 'd\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>gs bs ps sps data.\n       0 \\<notin> fst ` set (fst (f4_red gs bs ps sps data))\n 2. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 3. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 5. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "show \"0 \\<notin> fst ` set (fst (f4_red gs bs ps sps data))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> fst ` set (fst (f4_red gs bs ps sps data))", "by (simp add: fst_set_fst_f4_red f4_red_aux_not_zero)"], ["proof (state)\nthis:\n  0 \\<notin> fst ` set (fst (f4_red gs bs ps sps data))\n\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "fix gs bs::\"('t, 'b, 'c) pdata list\" and ps sps h b and data::\"nat \\<times> 'd\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "assume \"h \\<in> set (fst (f4_red gs bs ps sps data))\" and \"b \\<in> set gs \\<union> set bs\""], ["proof (state)\nthis:\n  h \\<in> set (fst (f4_red gs bs ps sps data))\n  b \\<in> set gs \\<union> set bs\n\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "from this(1)"], ["proof (chain)\npicking this:\n  h \\<in> set (fst (f4_red gs bs ps sps data))", "have \"fst h \\<in> fst ` set (fst (f4_red gs bs ps sps data))\""], ["proof (prove)\nusing this:\n  h \\<in> set (fst (f4_red gs bs ps sps data))\n\ngoal (1 subgoal):\n 1. fst h \\<in> fst ` set (fst (f4_red gs bs ps sps data))", "by simp"], ["proof (state)\nthis:\n  fst h \\<in> fst ` set (fst (f4_red gs bs ps sps data))\n\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "hence \"fst h \\<in> set (f4_red_aux (gs @ bs) sps)\""], ["proof (prove)\nusing this:\n  fst h \\<in> fst ` set (fst (f4_red gs bs ps sps data))\n\ngoal (1 subgoal):\n 1. fst h \\<in> set (f4_red_aux (gs @ bs) sps)", "by (simp only: fst_set_fst_f4_red)"], ["proof (state)\nthis:\n  fst h \\<in> set (f4_red_aux (gs @ bs) sps)\n\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "moreover"], ["proof (state)\nthis:\n  fst h \\<in> set (f4_red_aux (gs @ bs) sps)\n\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "from \\<open>b \\<in> set gs \\<union> set bs\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> set gs \\<union> set bs", "have \"b \\<in> set (gs @ bs)\""], ["proof (prove)\nusing this:\n  b \\<in> set gs \\<union> set bs\n\ngoal (1 subgoal):\n 1. b \\<in> set (gs @ bs)", "by simp"], ["proof (state)\nthis:\n  b \\<in> set (gs @ bs)\n\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "moreover"], ["proof (state)\nthis:\n  b \\<in> set (gs @ bs)\n\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "assume \"fst b \\<noteq> 0\""], ["proof (state)\nthis:\n  fst b \\<noteq> 0\n\ngoal (4 subgoals):\n 1. \\<And>gs bs ps sps h b data.\n       \\<lbrakk>h \\<in> set (fst (f4_red gs bs ps sps data));\n        b \\<in> set gs \\<union> set bs; fst b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n 2. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 4. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "ultimately"], ["proof (chain)\npicking this:\n  fst h \\<in> set (f4_red_aux (gs @ bs) sps)\n  b \\<in> set (gs @ bs)\n  fst b \\<noteq> 0", "show \"\\<not> lt (fst b) adds\\<^sub>t lt (fst h)\""], ["proof (prove)\nusing this:\n  fst h \\<in> set (f4_red_aux (gs @ bs) sps)\n  b \\<in> set (gs @ bs)\n  fst b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> lt (fst b) adds\\<^sub>t lt (fst h)", "by (rule f4_red_aux_irredudible)"], ["proof (state)\nthis:\n  \\<not> lt (fst b) adds\\<^sub>t lt (fst h)\n\ngoal (3 subgoals):\n 1. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "fix gs bs::\"('t, 'b, 'c) pdata list\" and ps sps and d::\"'a \\<Rightarrow> nat\" and data::\"nat \\<times> 'd\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "assume \"dickson_grading d\""], ["proof (state)\nthis:\n  dickson_grading d\n\ngoal (3 subgoals):\n 1. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "hence \"dgrad_p_set_le d (set (f4_red_aux (gs @ bs) sps)) (args_to_set ([], gs @ bs, sps))\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (set (f4_red_aux (gs @ bs) sps))\n     (args_to_set ([], gs @ bs, sps))", "by (fact f4_red_aux_dgrad_p_set_le)"], ["proof (state)\nthis:\n  dgrad_p_set_le d (set (f4_red_aux (gs @ bs) sps))\n   (args_to_set ([], gs @ bs, sps))\n\ngoal (3 subgoals):\n 1. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "also"], ["proof (state)\nthis:\n  dgrad_p_set_le d (set (f4_red_aux (gs @ bs) sps))\n   (args_to_set ([], gs @ bs, sps))\n\ngoal (3 subgoals):\n 1. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "have \"... = args_to_set (gs, bs, sps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. args_to_set ([], gs @ bs, sps) = args_to_set (gs, bs, sps)", "by (simp add: args_to_set_alt image_Un)"], ["proof (state)\nthis:\n  args_to_set ([], gs @ bs, sps) = args_to_set (gs, bs, sps)\n\ngoal (3 subgoals):\n 1. \\<And>gs bs ps sps d data.\n       dickson_grading d \\<Longrightarrow>\n       dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n        (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 3. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "finally"], ["proof (chain)\npicking this:\n  dgrad_p_set_le d (set (f4_red_aux (gs @ bs) sps))\n   (args_to_set (gs, bs, sps))", "show \"dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data))) (args_to_set (gs, bs, sps))\""], ["proof (prove)\nusing this:\n  dgrad_p_set_le d (set (f4_red_aux (gs @ bs) sps))\n   (args_to_set (gs, bs, sps))\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n     (args_to_set (gs, bs, sps))", "by (simp only: fst_set_fst_f4_red)"], ["proof (state)\nthis:\n  dgrad_p_set_le d (fst ` set (fst (f4_red gs bs ps sps data)))\n   (args_to_set (gs, bs, sps))\n\ngoal (2 subgoals):\n 1. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "fix gs bs::\"('t, 'b, 'c) pdata list\" and ps sps and data::\"nat \\<times> 'd\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "have \"component_of_term ` Keys (set (f4_red_aux (gs @ bs) sps)) \\<subseteq>\n        component_of_term ` Keys (args_to_set ([], gs @ bs, sps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (set (f4_red_aux (gs @ bs) sps))\n    \\<subseteq> component_of_term ` Keys (args_to_set ([], gs @ bs, sps))", "by (fact components_f4_red_aux_subset)"], ["proof (state)\nthis:\n  component_of_term ` Keys (set (f4_red_aux (gs @ bs) sps))\n  \\<subseteq> component_of_term ` Keys (args_to_set ([], gs @ bs, sps))\n\ngoal (2 subgoals):\n 1. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "also"], ["proof (state)\nthis:\n  component_of_term ` Keys (set (f4_red_aux (gs @ bs) sps))\n  \\<subseteq> component_of_term ` Keys (args_to_set ([], gs @ bs, sps))\n\ngoal (2 subgoals):\n 1. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "have \"... = component_of_term ` Keys (args_to_set (gs, bs, sps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` Keys (args_to_set ([], gs @ bs, sps)) =\n    component_of_term ` Keys (args_to_set (gs, bs, sps))", "by (simp add: args_to_set_alt image_Un)"], ["proof (state)\nthis:\n  component_of_term ` Keys (args_to_set ([], gs @ bs, sps)) =\n  component_of_term ` Keys (args_to_set (gs, bs, sps))\n\ngoal (2 subgoals):\n 1. \\<And>gs bs ps sps data.\n       component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n       \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n 2. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "finally"], ["proof (chain)\npicking this:\n  component_of_term ` Keys (set (f4_red_aux (gs @ bs) sps))\n  \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))", "show \"component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data))) \\<subseteq>\n        component_of_term ` Keys (args_to_set (gs, bs, sps))\""], ["proof (prove)\nusing this:\n  component_of_term ` Keys (set (f4_red_aux (gs @ bs) sps))\n  \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n\ngoal (1 subgoal):\n 1. component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n    \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))", "by (simp only: fst_set_fst_f4_red)"], ["proof (state)\nthis:\n  component_of_term ` Keys (fst ` set (fst (f4_red gs bs ps sps data)))\n  \\<subseteq> component_of_term ` Keys (args_to_set (gs, bs, sps))\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "fix gs bs::\"('t, 'b, 'c) pdata list\" and ps sps and data::\"nat \\<times> 'd\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "have \"set (f4_red_aux (gs @ bs) sps) \\<subseteq> pmdl (args_to_set ([], gs @ bs, sps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (f4_red_aux (gs @ bs) sps)\n    \\<subseteq> pmdl (args_to_set ([], gs @ bs, sps))", "by (fact pmdl_f4_red_aux)"], ["proof (state)\nthis:\n  set (f4_red_aux (gs @ bs) sps)\n  \\<subseteq> pmdl (args_to_set ([], gs @ bs, sps))\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "also"], ["proof (state)\nthis:\n  set (f4_red_aux (gs @ bs) sps)\n  \\<subseteq> pmdl (args_to_set ([], gs @ bs, sps))\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "have \"... = pmdl (args_to_set (gs, bs, sps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (args_to_set ([], gs @ bs, sps)) = pmdl (args_to_set (gs, bs, sps))", "by (simp add: args_to_set_alt image_Un)"], ["proof (state)\nthis:\n  pmdl (args_to_set ([], gs @ bs, sps)) = pmdl (args_to_set (gs, bs, sps))\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "finally"], ["proof (chain)\npicking this:\n  set (f4_red_aux (gs @ bs) sps)\n  \\<subseteq> pmdl (args_to_set (gs, bs, sps))", "have \"fst ` set (fst (f4_red gs bs ps sps data)) \\<subseteq> pmdl (args_to_set (gs, bs, sps))\""], ["proof (prove)\nusing this:\n  set (f4_red_aux (gs @ bs) sps)\n  \\<subseteq> pmdl (args_to_set (gs, bs, sps))\n\ngoal (1 subgoal):\n 1. fst ` set (fst (f4_red gs bs ps sps data))\n    \\<subseteq> pmdl (args_to_set (gs, bs, sps))", "by (simp only: fst_set_fst_f4_red)"], ["proof (state)\nthis:\n  fst ` set (fst (f4_red gs bs ps sps data))\n  \\<subseteq> pmdl (args_to_set (gs, bs, sps))\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "moreover"], ["proof (state)\nthis:\n  fst ` set (fst (f4_red gs bs ps sps data))\n  \\<subseteq> pmdl (args_to_set (gs, bs, sps))\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "{"], ["proof (state)\nthis:\n  fst ` set (fst (f4_red gs bs ps sps data))\n  \\<subseteq> pmdl (args_to_set (gs, bs, sps))\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "fix p q :: \"('t, 'b, 'c) pdata\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "assume \"set sps \\<subseteq> set bs \\<times> (set gs \\<union> set bs)\""], ["proof (state)\nthis:\n  set sps \\<subseteq> set bs \\<times> (set gs \\<union> set bs)\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "hence \"set sps \\<subseteq> set (gs @ bs) \\<times> set (gs @ bs)\""], ["proof (prove)\nusing this:\n  set sps \\<subseteq> set bs \\<times> (set gs \\<union> set bs)\n\ngoal (1 subgoal):\n 1. set sps \\<subseteq> set (gs @ bs) \\<times> set (gs @ bs)", "by fastforce"], ["proof (state)\nthis:\n  set sps \\<subseteq> set (gs @ bs) \\<times> set (gs @ bs)\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "moreover"], ["proof (state)\nthis:\n  set sps \\<subseteq> set (gs @ bs) \\<times> set (gs @ bs)\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "assume \"(p, q) \\<in> set sps\""], ["proof (state)\nthis:\n  (p, q) \\<in> set sps\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "ultimately"], ["proof (chain)\npicking this:\n  set sps \\<subseteq> set (gs @ bs) \\<times> set (gs @ bs)\n  (p, q) \\<in> set sps", "have \"(red (fst ` set (gs @ bs) \\<union> set (f4_red_aux (gs @ bs) sps)))\\<^sup>*\\<^sup>* (spoly (fst p) (fst q)) 0\""], ["proof (prove)\nusing this:\n  set sps \\<subseteq> set (gs @ bs) \\<times> set (gs @ bs)\n  (p, q) \\<in> set sps\n\ngoal (1 subgoal):\n 1. (red (fst ` set (gs @ bs) \\<union>\n          set (f4_red_aux (gs @ bs) sps)))\\<^sup>*\\<^sup>*\n     (spoly (fst p) (fst q)) 0", "by (rule f4_red_aux_spoly_reducible)"], ["proof (state)\nthis:\n  (red (fst ` set (gs @ bs) \\<union>\n        set (f4_red_aux (gs @ bs) sps)))\\<^sup>*\\<^sup>*\n   (spoly (fst p) (fst q)) 0\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>set sps \\<subseteq> set bs \\<times> (set gs \\<union> set bs);\n   (?p106, ?q106) \\<in> set sps\\<rbrakk>\n  \\<Longrightarrow> (red (fst ` set (gs @ bs) \\<union>\n                          set (f4_red_aux (gs @ bs) sps)))\\<^sup>*\\<^sup>*\n                     (spoly (fst ?p106) (fst ?q106)) 0\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps sps data.\n       \\<lbrakk>is_Groebner_basis (fst ` set gs);\n        unique_idx (gs @ bs) data\\<rbrakk>\n       \\<Longrightarrow> fst ` set (fst (f4_red gs bs ps sps data))\n                         \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n                         (\\<forall>(p, q)\\<in>set sps.\n                             set sps\n                             \\<subseteq> set bs \\<times>\n   (set gs \\<union> set bs) \\<longrightarrow>\n                             (red (fst ` (set gs \\<union> set bs) \\<union>\n                                   fst `\n                                   set (fst\n   (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n                              (spoly (fst p) (fst q)) 0)", "ultimately"], ["proof (chain)\npicking this:\n  fst ` set (fst (f4_red gs bs ps sps data))\n  \\<subseteq> pmdl (args_to_set (gs, bs, sps))\n  \\<lbrakk>set sps \\<subseteq> set bs \\<times> (set gs \\<union> set bs);\n   (?p106, ?q106) \\<in> set sps\\<rbrakk>\n  \\<Longrightarrow> (red (fst ` set (gs @ bs) \\<union>\n                          set (f4_red_aux (gs @ bs) sps)))\\<^sup>*\\<^sup>*\n                     (spoly (fst ?p106) (fst ?q106)) 0", "show\n    \"fst ` set (fst (f4_red gs bs ps sps data)) \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n     (\\<forall>(p, q)\\<in>set sps.\n         set sps \\<subseteq> set bs \\<times> (set gs \\<union> set bs) \\<longrightarrow>\n         (red (fst ` (set gs \\<union> set bs) \\<union> fst ` set (fst (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>* (spoly (fst p) (fst q)) 0)\""], ["proof (prove)\nusing this:\n  fst ` set (fst (f4_red gs bs ps sps data))\n  \\<subseteq> pmdl (args_to_set (gs, bs, sps))\n  \\<lbrakk>set sps \\<subseteq> set bs \\<times> (set gs \\<union> set bs);\n   (?p106, ?q106) \\<in> set sps\\<rbrakk>\n  \\<Longrightarrow> (red (fst ` set (gs @ bs) \\<union>\n                          set (f4_red_aux (gs @ bs) sps)))\\<^sup>*\\<^sup>*\n                     (spoly (fst ?p106) (fst ?q106)) 0\n\ngoal (1 subgoal):\n 1. fst ` set (fst (f4_red gs bs ps sps data))\n    \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n    (\\<forall>(p, q)\\<in>set sps.\n        set sps\n        \\<subseteq> set bs \\<times>\n                    (set gs \\<union> set bs) \\<longrightarrow>\n        (red (fst ` (set gs \\<union> set bs) \\<union>\n              fst ` set (fst (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n         (spoly (fst p) (fst q)) 0)", "by (auto simp add: image_Un fst_set_fst_f4_red)"], ["proof (state)\nthis:\n  fst ` set (fst (f4_red gs bs ps sps data))\n  \\<subseteq> pmdl (args_to_set (gs, bs, sps)) \\<and>\n  (\\<forall>(p, q)\\<in>set sps.\n      set sps\n      \\<subseteq> set bs \\<times> (set gs \\<union> set bs) \\<longrightarrow>\n      (red (fst ` (set gs \\<union> set bs) \\<union>\n            fst ` set (fst (f4_red gs bs ps sps data))))\\<^sup>*\\<^sup>*\n       (spoly (fst p) (fst q)) 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas compl_struct_f4_red = compl_struct_rcp[OF rcp_spec_f4_red]"], ["", "lemmas compl_pmdl_f4_red = compl_pmdl_rcp[OF rcp_spec_f4_red]"], ["", "lemmas compl_conn_f4_red = compl_conn_rcp[OF rcp_spec_f4_red]"], ["", "subsection \\<open>Pair Selection\\<close>"], ["", "primrec f4_sel_aux :: \"'a \\<Rightarrow> ('t, 'b::zero, 'c) pdata_pair list \\<Rightarrow> ('t, 'b, 'c) pdata_pair list\" where\n  \"f4_sel_aux _ [] = []\"|\n  \"f4_sel_aux t (p # ps) =\n    (if (lcs (lp (fst (fst p))) (lp (fst (snd p)))) = t then\n      p # (f4_sel_aux t ps)\n    else\n      []\n    )\""], ["", "lemma f4_sel_aux_subset: \"set (f4_sel_aux t ps) \\<subseteq> set ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (f4_sel_aux t ps) \\<subseteq> set ps", "by (induct ps, auto)"], ["", "primrec f4_sel :: \"('t, 'b::zero, 'c, 'd) selT\" where\n  \"f4_sel gs bs [] data = []\"|\n  \"f4_sel gs bs (p # ps) data = p # (f4_sel_aux (lcs (lp (fst (fst p))) (lp (fst (snd p)))) ps)\""], ["", "lemma sel_spec_f4_sel: \"sel_spec f4_sel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sel_spec f4_sel", "proof (rule sel_specI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gs bs ps data.\n       ps \\<noteq> [] \\<Longrightarrow>\n       f4_sel gs bs ps data \\<noteq> [] \\<and>\n       set (f4_sel gs bs ps data) \\<subseteq> set ps", "fix gs bs :: \"('t, 'b, 'c) pdata list\" and ps::\"('t, 'b, 'c) pdata_pair list\" and data::\"nat \\<times> 'd\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>gs bs ps data.\n       ps \\<noteq> [] \\<Longrightarrow>\n       f4_sel gs bs ps data \\<noteq> [] \\<and>\n       set (f4_sel gs bs ps data) \\<subseteq> set ps", "assume \"ps \\<noteq> []\""], ["proof (state)\nthis:\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps data.\n       ps \\<noteq> [] \\<Longrightarrow>\n       f4_sel gs bs ps data \\<noteq> [] \\<and>\n       set (f4_sel gs bs ps data) \\<subseteq> set ps", "then"], ["proof (chain)\npicking this:\n  ps \\<noteq> []", "obtain p ps' where ps: \"ps = p # ps'\""], ["proof (prove)\nusing this:\n  ps \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>p ps'. ps = p # ps' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson list.exhaust)"], ["proof (state)\nthis:\n  ps = p # ps'\n\ngoal (1 subgoal):\n 1. \\<And>gs bs ps data.\n       ps \\<noteq> [] \\<Longrightarrow>\n       f4_sel gs bs ps data \\<noteq> [] \\<and>\n       set (f4_sel gs bs ps data) \\<subseteq> set ps", "show \"f4_sel gs bs ps data \\<noteq> [] \\<and> set (f4_sel gs bs ps data) \\<subseteq> set ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f4_sel gs bs ps data \\<noteq> [] \\<and>\n    set (f4_sel gs bs ps data) \\<subseteq> set ps", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f4_sel gs bs ps data \\<noteq> []\n 2. set (f4_sel gs bs ps data) \\<subseteq> set ps", "show \"f4_sel gs bs ps data \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f4_sel gs bs ps data \\<noteq> []", "by (simp add: ps)"], ["proof (state)\nthis:\n  f4_sel gs bs ps data \\<noteq> []\n\ngoal (1 subgoal):\n 1. set (f4_sel gs bs ps data) \\<subseteq> set ps", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set (f4_sel gs bs ps data) \\<subseteq> set ps", "from f4_sel_aux_subset"], ["proof (chain)\npicking this:\n  set (f4_sel_aux ?t ?ps) \\<subseteq> set ?ps", "show \"set (f4_sel gs bs ps data) \\<subseteq> set ps\""], ["proof (prove)\nusing this:\n  set (f4_sel_aux ?t ?ps) \\<subseteq> set ?ps\n\ngoal (1 subgoal):\n 1. set (f4_sel gs bs ps data) \\<subseteq> set ps", "by (auto simp add: ps)"], ["proof (state)\nthis:\n  set (f4_sel gs bs ps data) \\<subseteq> set ps\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f4_sel gs bs ps data \\<noteq> [] \\<and>\n  set (f4_sel gs bs ps data) \\<subseteq> set ps\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The F4 Algorithm\\<close>"], ["", "text \\<open>The F4 algorithm is just @{const gb_schema_direct} with parameters instantiated by suitable\n  functions.\\<close>"], ["", "lemma struct_spec_f4: \"struct_spec f4_sel add_pairs_canon add_basis_canon f4_red\""], ["proof (prove)\ngoal (1 subgoal):\n 1. struct_spec f4_sel add_pairs_canon add_basis_canon f4_red", "using sel_spec_f4_sel ap_spec_add_pairs_canon ab_spec_add_basis_sorted compl_struct_f4_red"], ["proof (prove)\nusing this:\n  sel_spec f4_sel\n  ap_spec add_pairs_canon\n  ab_spec (add_basis_sorted ?rel)\n  compl_struct f4_red\n\ngoal (1 subgoal):\n 1. struct_spec f4_sel add_pairs_canon add_basis_canon f4_red", "by (rule struct_specI)"], ["", "definition f4_aux :: \"('t, 'b, 'c) pdata list \\<Rightarrow> nat \\<times> nat \\<times> 'd \\<Rightarrow> ('t, 'b, 'c) pdata list \\<Rightarrow>\n                   ('t, 'b, 'c) pdata_pair list \\<Rightarrow> ('t, 'b::field, 'c::default) pdata list\"\n  where \"f4_aux = gb_schema_aux f4_sel add_pairs_canon add_basis_canon f4_red\""], ["", "lemmas f4_aux_simps [code] = gb_schema_aux_simps[OF struct_spec_f4, folded f4_aux_def]"], ["", "definition f4 :: \"('t, 'b, 'c) pdata' list \\<Rightarrow> 'd \\<Rightarrow> ('t, 'b::field, 'c::default) pdata' list\"\n  where \"f4 = gb_schema_direct f4_sel add_pairs_canon add_basis_canon f4_red\""], ["", "lemmas f4_simps [code] = gb_schema_direct_def[of f4_sel add_pairs_canon add_basis_canon f4_red, folded f4_def f4_aux_def]"], ["", "lemmas f4_isGB = gb_schema_direct_isGB[OF struct_spec_f4 compl_conn_f4_red, folded f4_def]"], ["", "lemmas f4_pmdl = gb_schema_direct_pmdl[OF struct_spec_f4 compl_pmdl_f4_red, folded f4_def]"], ["", "subsubsection \\<open>Special Case: \\<open>punit\\<close>\\<close>"], ["", "lemma (in gd_term) struct_spec_f4_punit: \"punit.struct_spec punit.f4_sel add_pairs_punit_canon punit.add_basis_canon punit.f4_red\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.struct_spec punit.f4_sel add_pairs_punit_canon\n     punit.add_basis_canon punit.f4_red", "using punit.sel_spec_f4_sel ap_spec_add_pairs_punit_canon ab_spec_add_basis_sorted punit.compl_struct_f4_red"], ["proof (prove)\nusing this:\n  sel_spec punit.f4_sel\n  punit.ap_spec add_pairs_punit_canon\n  ab_spec (add_basis_sorted ?rel)\n  punit.compl_struct punit.f4_red\n\ngoal (1 subgoal):\n 1. punit.struct_spec punit.f4_sel add_pairs_punit_canon\n     punit.add_basis_canon punit.f4_red", "by (rule punit.struct_specI)"], ["", "definition f4_aux_punit :: \"('a, 'b, 'c) pdata list \\<Rightarrow> nat \\<times> nat \\<times> 'd \\<Rightarrow> ('a, 'b, 'c) pdata list \\<Rightarrow>\n                   ('a, 'b, 'c) pdata_pair list \\<Rightarrow> ('a, 'b::field, 'c::default) pdata list\"\n  where \"f4_aux_punit = punit.gb_schema_aux punit.f4_sel add_pairs_punit_canon punit.add_basis_canon punit.f4_red\""], ["", "lemmas f4_aux_punit_simps [code] = punit.gb_schema_aux_simps[OF struct_spec_f4_punit, folded f4_aux_punit_def]"], ["", "definition f4_punit :: \"('a, 'b, 'c) pdata' list \\<Rightarrow> 'd \\<Rightarrow> ('a, 'b::field, 'c::default) pdata' list\"\n  where \"f4_punit = punit.gb_schema_direct punit.f4_sel add_pairs_punit_canon punit.add_basis_canon punit.f4_red\""], ["", "lemmas f4_punit_simps [code] = punit.gb_schema_direct_def[of \"punit.f4_sel\" add_pairs_punit_canon\n                                \"punit.add_basis_canon\" \"punit.f4_red\", folded f4_punit_def f4_aux_punit_def]"], ["", "lemmas f4_punit_isGB = punit.gb_schema_direct_isGB[OF struct_spec_f4_punit punit.compl_conn_f4_red, folded f4_punit_def]"], ["", "lemmas f4_punit_pmdl = punit.gb_schema_direct_pmdl[OF struct_spec_f4_punit punit.compl_pmdl_f4_red, folded f4_punit_def]"], ["", "end"], ["", "(* gd_term *)"], ["", "end"], ["", "(* theory *)"]]}