{"file_name": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases/Reduced_GB_Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases", "problem_names": ["lemma compute_trd_aux [code]:\n  \"trd_aux fs p r =\n    (if is_zero p then\n      r\n    else\n      case find_adds fs (lt p) of\n        None   \\<Rightarrow> trd_aux fs (tail p) (plus_monomial_less r (lc p) (lt p))\n      | Some f \\<Rightarrow> trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) r\n    )\"", "lemma compute_spoly_punit [code]:\n  \"spoly_punit to p q = (let t1 = lt_punit to p; t2 = lt_punit to q; l = lcs t1 t2 in\n         (monom_mult_punit (1 / lc_punit to p) (l - t1) p) - (monom_mult_punit (1 / lc_punit to q) (l - t2) q))\"", "lemma compute_trd_punit [code]: \"trd_punit to fs p = trd_aux_punit to fs p (change_ord to 0)\"", "lemma\n  \"rgb_punit DRLEX\n    [\n     X ^ 3 - X * Y * Z\\<^sup>2,\n     Y\\<^sup>2 * Z - 1\n    ] =\n    [\n     X ^ 3 * Y - X * Z,\n     - (X ^ 3) + X * Y * Z\\<^sup>2,\n     Y\\<^sup>2 * Z - 1,\n     - (X * Z ^ 3) + X ^ 5\n    ]\"", "lemma\n  \"rgb_punit DRLEX\n    [\n     X\\<^sup>2 + Y\\<^sup>2 + Z\\<^sup>2 - 1,\n     X * Y - Z - 1,\n     Y\\<^sup>2 + X,\n     Z\\<^sup>2 + X\n    ] =\n    [\n     1\n    ]\""], "translations": [["", "lemma compute_trd_aux [code]:\n  \"trd_aux fs p r =\n    (if is_zero p then\n      r\n    else\n      case find_adds fs (lt p) of\n        None   \\<Rightarrow> trd_aux fs (tail p) (plus_monomial_less r (lc p) (lt p))\n      | Some f \\<Rightarrow> trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) r\n    )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trd_aux fs p r =\n    (if is_zero p then r\n     else case find_adds fs (lt p) of\n          None \\<Rightarrow>\n            trd_aux fs (tail p) (plus_monomial_less r (lc p) (lt p))\n          | Some f \\<Rightarrow>\n              trd_aux fs\n               (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) r)", "by (simp only: trd_aux.simps[of fs p r] plus_monomial_less_def is_zero_def)"], ["", "end"], ["", "text \\<open>We only consider scalar polynomials here, but vector-polynomials could be handled, too.\\<close>"], ["", "global_interpretation punit': gd_powerprod \"ord_pp_punit cmp_term\" \"ord_pp_strict_punit cmp_term\"\n  rewrites \"punit.adds_term = (adds)\"\n  and \"punit.pp_of_term = (\\<lambda>x. x)\"\n  and \"punit.component_of_term = (\\<lambda>_. ())\"\n  and \"punit.monom_mult = monom_mult_punit\"\n  and \"punit.mult_scalar = mult_scalar_punit\"\n  and \"punit'.punit.min_term = min_term_punit\"\n  and \"punit'.punit.lt = lt_punit cmp_term\"\n  and \"punit'.punit.lc = lc_punit cmp_term\"\n  and \"punit'.punit.tail = tail_punit cmp_term\"\n  and \"punit'.punit.ord_p = ord_p_punit cmp_term\"\n  and \"punit'.punit.ord_strict_p = ord_strict_p_punit cmp_term\"\n  for cmp_term :: \"('a::nat, 'b::{nat,add_wellorder}) pp nat_term_order\"\n\n  defines find_adds_punit = punit'.punit.find_adds\n  and trd_aux_punit = punit'.punit.trd_aux\n  and trd_punit = punit'.punit.trd\n  and spoly_punit = punit'.punit.spoly\n  and count_const_lt_components_punit = punit'.punit.count_const_lt_components\n  and count_rem_components_punit = punit'.punit.count_rem_components\n  and const_lt_component_punit = punit'.punit.const_lt_component\n  and full_gb_punit = punit'.punit.full_gb\n  and add_pairs_single_sorted_punit = punit'.punit.add_pairs_single_sorted\n  and add_pairs_punit = punit'.punit.add_pairs\n  and canon_pair_order_aux_punit = punit'.punit.canon_pair_order_aux\n  and canon_basis_order_punit = punit'.punit.canon_basis_order\n  and new_pairs_sorted_punit = punit'.punit.new_pairs_sorted\n  and product_crit_punit = punit'.punit.product_crit\n  and chain_ncrit_punit = punit'.punit.chain_ncrit\n  and chain_ocrit_punit = punit'.punit.chain_ocrit\n  and apply_icrit_punit = punit'.punit.apply_icrit\n  and apply_ncrit_punit = punit'.punit.apply_ncrit\n  and apply_ocrit_punit = punit'.punit.apply_ocrit\n  and trdsp_punit = punit'.punit.trdsp\n  and gb_sel_punit = punit'.punit.gb_sel\n  and gb_red_aux_punit = punit'.punit.gb_red_aux\n  and gb_red_punit = punit'.punit.gb_red\n  and gb_aux_punit = punit'.punit.gb_aux_punit\n  and gb_punit = punit'.punit.gb_punit \\<comment>\\<open>Faster, because incorporates product criterion.\\<close>\n  and comp_min_basis_punit = punit'.punit.comp_min_basis\n  and comp_red_basis_aux_punit = punit'.punit.comp_red_basis_aux\n  and comp_red_basis_punit = punit'.punit.comp_red_basis\n  and monic_punit = punit'.punit.monic\n  and comp_red_monic_basis_punit = punit'.punit.comp_red_monic_basis\n  and rgb_punit = punit'.punit.rgb_punit"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((gd_powerprod (ord_pp_punit cmp_term)\n       (ord_pp_strict_punit cmp_term) &&&\n      punit.adds_term = (adds) &&& punit.pp_of_term = (\\<lambda>x. x)) &&&\n     punit.component_of_term = (\\<lambda>_. ()) &&&\n     punit.monom_mult = monom_mult_punit &&&\n     punit.mult_scalar = mult_scalar_punit) &&&\n    (ordered_term.min_term fst = min_term_punit &&&\n     ordered_term.lt fst (ord_pp_punit cmp_term) = lt_punit cmp_term &&&\n     ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term) &&&\n    ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term &&&\n    ordered_term.ord_p (ord_pp_strict_punit cmp_term) =\n    ord_p_punit cmp_term &&&\n    ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. gd_powerprod (ord_pp_punit cmp_term) (ord_pp_strict_punit cmp_term)", "by (fact gd_powerprod_ord_pp_punit)"], ["proof (prove)\ngoal (11 subgoals):\n 1. punit.adds_term = (adds)\n 2. punit.pp_of_term = (\\<lambda>x. x)\n 3. punit.component_of_term = (\\<lambda>_. ())\n 4. punit.monom_mult = monom_mult_punit\n 5. punit.mult_scalar = mult_scalar_punit\n 6. ordered_term.min_term fst = min_term_punit\n 7. ordered_term.lt fst (ord_pp_punit cmp_term) = lt_punit cmp_term\n 8. ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term\n 9. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term\n 10. ordered_term.ord_p (ord_pp_strict_punit cmp_term) =\n     ord_p_punit cmp_term\nA total of 11 subgoals...", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.adds_term = (adds)", "by (fact punit_adds_term)"], ["proof (prove)\ngoal (10 subgoals):\n 1. punit.pp_of_term = (\\<lambda>x. x)\n 2. punit.component_of_term = (\\<lambda>_. ())\n 3. punit.monom_mult = monom_mult_punit\n 4. punit.mult_scalar = mult_scalar_punit\n 5. ordered_term.min_term fst = min_term_punit\n 6. ordered_term.lt fst (ord_pp_punit cmp_term) = lt_punit cmp_term\n 7. ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term\n 8. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term\n 9. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term\n 10. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n     ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.pp_of_term = (\\<lambda>x. x)", "by (simp add: id_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. punit.component_of_term = (\\<lambda>_. ())\n 2. punit.monom_mult = monom_mult_punit\n 3. punit.mult_scalar = mult_scalar_punit\n 4. ordered_term.min_term fst = min_term_punit\n 5. ordered_term.lt fst (ord_pp_punit cmp_term) = lt_punit cmp_term\n 6. ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term\n 7. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term\n 8. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term\n 9. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.component_of_term = (\\<lambda>_. ())", "by (fact punit_component_of_term)"], ["proof (prove)\ngoal (8 subgoals):\n 1. punit.monom_mult = monom_mult_punit\n 2. punit.mult_scalar = mult_scalar_punit\n 3. ordered_term.min_term fst = min_term_punit\n 4. ordered_term.lt fst (ord_pp_punit cmp_term) = lt_punit cmp_term\n 5. ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term\n 6. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term\n 7. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term\n 8. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.monom_mult = monom_mult_punit", "by (simp only: monom_mult_punit_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. punit.mult_scalar = mult_scalar_punit\n 2. ordered_term.min_term fst = min_term_punit\n 3. ordered_term.lt fst (ord_pp_punit cmp_term) = lt_punit cmp_term\n 4. ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term\n 5. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term\n 6. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term\n 7. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.mult_scalar = mult_scalar_punit", "by (simp only: mult_scalar_punit_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. ordered_term.min_term fst = min_term_punit\n 2. ordered_term.lt fst (ord_pp_punit cmp_term) = lt_punit cmp_term\n 3. ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term\n 4. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term\n 5. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term\n 6. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term.min_term fst = min_term_punit", "using min_term_punit_def"], ["proof (prove)\nusing this:\n  min_term_punit \\<equiv> ordered_term.min_term fst\n\ngoal (1 subgoal):\n 1. ordered_term.min_term fst = min_term_punit", "by fastforce"], ["proof (prove)\ngoal (5 subgoals):\n 1. ordered_term.lt fst (ord_pp_punit cmp_term) = lt_punit cmp_term\n 2. ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term\n 3. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term\n 4. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term\n 5. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term.lt fst (ord_pp_punit cmp_term) = lt_punit cmp_term", "by (simp only: lt_punit_def ord_pp_punit_alt)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term\n 2. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term\n 3. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term\n 4. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term.lc fst (ord_pp_punit cmp_term) = lc_punit cmp_term", "by (simp only: lc_punit_def ord_pp_punit_alt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term\n 2. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term\n 3. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term.tail fst (ord_pp_punit cmp_term) = tail_punit cmp_term", "by (simp only: tail_punit_def ord_pp_punit_alt)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term\n 2. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term.ord_p (ord_pp_strict_punit cmp_term) = ord_p_punit cmp_term", "by (simp only: ord_p_punit_def ord_pp_strict_punit_alt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ordered_term.ord_strict_p (ord_pp_strict_punit cmp_term) =\n    ord_strict_p_punit cmp_term", "by (simp only: ord_strict_p_punit_def ord_pp_strict_punit_alt)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma compute_spoly_punit [code]:\n  \"spoly_punit to p q = (let t1 = lt_punit to p; t2 = lt_punit to q; l = lcs t1 t2 in\n         (monom_mult_punit (1 / lc_punit to p) (l - t1) p) - (monom_mult_punit (1 / lc_punit to q) (l - t2) q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spoly_punit to p q =\n    (let t1 = lt_punit to p; t2 = lt_punit to q; l = lcs t1 t2\n     in monom_mult_punit ((1::'c) / lc_punit to p) (l - t1) p -\n        monom_mult_punit ((1::'c) / lc_punit to q) (l - t2) q)", "by (simp add: punit'.punit.spoly_def Let_def punit'.punit.lc_def)"], ["", "lemma compute_trd_punit [code]: \"trd_punit to fs p = trd_aux_punit to fs p (change_ord to 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trd_punit to fs p = trd_aux_punit to fs p (change_ord to 0)", "by (simp only: punit'.punit.trd_def change_ord_def)"], ["", "experiment begin"], ["", "interpretation trivariate\\<^sub>0_rat"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma\n  \"rgb_punit DRLEX\n    [\n     X ^ 3 - X * Y * Z\\<^sup>2,\n     Y\\<^sup>2 * Z - 1\n    ] =\n    [\n     X ^ 3 * Y - X * Z,\n     - (X ^ 3) + X * Y * Z\\<^sup>2,\n     Y\\<^sup>2 * Z - 1,\n     - (X * Z ^ 3) + X ^ 5\n    ]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rgb_punit DRLEX\n     [V\\<^sub>0 0 ^ 3 - V\\<^sub>0 0 * V\\<^sub>0 1 * (V\\<^sub>0 2)\\<^sup>2,\n      (V\\<^sub>0 1)\\<^sup>2 * V\\<^sub>0 2 - 1] =\n    [V\\<^sub>0 0 ^ 3 * V\\<^sub>0 1 - V\\<^sub>0 0 * V\\<^sub>0 2,\n     - (V\\<^sub>0 0 ^ 3) +\n     V\\<^sub>0 0 * V\\<^sub>0 1 * (V\\<^sub>0 2)\\<^sup>2,\n     (V\\<^sub>0 1)\\<^sup>2 * V\\<^sub>0 2 - 1,\n     - (V\\<^sub>0 0 * V\\<^sub>0 2 ^ 3) + V\\<^sub>0 0 ^ 5]", "by eval"], ["", "lemma\n  \"rgb_punit DRLEX\n    [\n     X\\<^sup>2 + Y\\<^sup>2 + Z\\<^sup>2 - 1,\n     X * Y - Z - 1,\n     Y\\<^sup>2 + X,\n     Z\\<^sup>2 + X\n    ] =\n    [\n     1\n    ]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rgb_punit DRLEX\n     [(V\\<^sub>0 0)\\<^sup>2 + (V\\<^sub>0 1)\\<^sup>2 +\n      (V\\<^sub>0 2)\\<^sup>2 -\n      1,\n      V\\<^sub>0 0 * V\\<^sub>0 1 - V\\<^sub>0 2 - 1,\n      (V\\<^sub>0 1)\\<^sup>2 + V\\<^sub>0 0,\n      (V\\<^sub>0 2)\\<^sup>2 + V\\<^sub>0 0] =\n    [1]", "by eval"], ["", "text \\<open>Note: The above computations have been cross-checked with Mathematica 11.1.\\<close>"], ["", "end"], ["", "end"], ["", "(* theory *)"]]}