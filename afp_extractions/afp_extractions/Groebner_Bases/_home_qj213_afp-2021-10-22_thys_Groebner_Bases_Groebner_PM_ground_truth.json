{"file_name": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases/Groebner_PM.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases", "problem_names": ["lemmas finite_reduced_GB_Polys =\n  punit.finite_reduced_GB_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemmas reduced_GB_is_reduced_GB_Polys =\n  punit.reduced_GB_is_reduced_GB_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemmas reduced_GB_is_GB_Polys =\n  punit.reduced_GB_is_GB_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemmas reduced_GB_is_auto_reduced_Polys =\n  punit.reduced_GB_is_auto_reduced_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemmas reduced_GB_is_monic_set_Polys =\n  punit.reduced_GB_is_monic_set_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemmas reduced_GB_nonzero_Polys =\n  punit.reduced_GB_nonzero_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemmas reduced_GB_ideal_Polys =\n  punit.reduced_GB_pmdl_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemmas reduced_GB_unique_Polys =\n  punit.reduced_GB_unique_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemmas reduced_GB_Polys =\n  punit.reduced_GB_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemmas ideal_eq_UNIV_iff_reduced_GB_eq_one_Polys =\n  ideal_eq_UNIV_iff_reduced_GB_eq_one_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]", "lemma (in -) adds_univariate_linear:\n  assumes \"finite X\" and \"card X \\<le> 1\" and \"s \\<in> .[X]\" and \"t \\<in> .[X]\"\n  obtains \"s adds t\" | \"t adds s\"", "lemma ord_iff_adds_univariate:\n  assumes \"s \\<in> .[X]\" and \"t \\<in> .[X]\"\n  shows \"s \\<preceq> t \\<longleftrightarrow> s adds t\"", "lemma adds_iff_deg_le_univariate:\n  assumes \"s \\<in> .[X]\" and \"t \\<in> .[X]\"\n  shows \"s adds t \\<longleftrightarrow> deg_pm s \\<le> deg_pm t\"", "lemma poly_deg_univariate:\n  assumes \"p \\<in> P[X]\"\n  shows \"poly_deg p = deg_pm (lpp p)\"", "lemma reduced_GB_univariate_cases:\n  assumes \"F \\<subseteq> P[X]\"\n  obtains g where \"g \\<in> P[X]\" and \"g \\<noteq> 0\" and \"lcf g = 1\" and \"punit.reduced_GB F = {g}\" |\n    \"punit.reduced_GB F = {}\"", "lemma is_reduced_GB_homogeneous:\n  assumes \"\\<And>f. f \\<in> F \\<Longrightarrow> homogeneous f\" and \"punit.is_reduced_GB G\" and \"ideal G = ideal F\"\n    and \"g \\<in> G\"\n  shows \"homogeneous g\"", "lemma lp_dehomogenize:\n  assumes \"is_hom_ord x\" and \"homogeneous p\"\n  shows \"lpp (dehomogenize x p) = except (lpp p) {x}\"", "lemma isGB_dehomogenize:\n  assumes \"is_hom_ord x\" and \"finite X\" and \"G \\<subseteq> P[X]\" and \"punit.is_Groebner_basis G\"\n    and \"\\<And>g. g \\<in> G \\<Longrightarrow> homogeneous g\"\n  shows \"punit.is_Groebner_basis (dehomogenize x ` G)\"", "lemma extended_ord_lp:\n  assumes \"None \\<notin> indets p\"\n  shows \"restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)\"", "lemma restrict_indets_reduced_GB:\n  assumes \"finite X\" and \"F \\<subseteq> P[X]\"\n  shows \"punit.is_Groebner_basis (restrict_indets ` extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\"\n          (is ?thesis1)\n    and \"ideal (restrict_indets ` extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) = ideal F\"\n          (is ?thesis2)\n    and \"restrict_indets ` extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F) \\<subseteq> P[X]\"\n          (is ?thesis3)"], "translations": [["", "lemmas finite_reduced_GB_Polys =\n  punit.finite_reduced_GB_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "lemmas reduced_GB_is_reduced_GB_Polys =\n  punit.reduced_GB_is_reduced_GB_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "lemmas reduced_GB_is_GB_Polys =\n  punit.reduced_GB_is_GB_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "lemmas reduced_GB_is_auto_reduced_Polys =\n  punit.reduced_GB_is_auto_reduced_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "lemmas reduced_GB_is_monic_set_Polys =\n  punit.reduced_GB_is_monic_set_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "lemmas reduced_GB_nonzero_Polys =\n  punit.reduced_GB_nonzero_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "lemmas reduced_GB_ideal_Polys =\n  punit.reduced_GB_pmdl_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "lemmas reduced_GB_unique_Polys =\n  punit.reduced_GB_unique_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "lemmas reduced_GB_Polys =\n  punit.reduced_GB_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "lemmas ideal_eq_UNIV_iff_reduced_GB_eq_one_Polys =\n  ideal_eq_UNIV_iff_reduced_GB_eq_one_dgrad_p_set[simplified, OF dickson_grading_varnum, where m=0, simplified dgrad_p_set_varnum]"], ["", "subsection \\<open>Univariate Polynomials\\<close>"], ["", "lemma (in -) adds_univariate_linear:\n  assumes \"finite X\" and \"card X \\<le> 1\" and \"s \\<in> .[X]\" and \"t \\<in> .[X]\"\n  obtains \"s adds t\" | \"t adds s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof (cases \"s adds t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  s adds t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  s adds t\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  \\<not> s adds t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<not> s adds t", "obtain x where 1: \"lookup t x < lookup s x\""], ["proof (prove)\nusing this:\n  \\<not> s adds t\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        lookup t x < lookup s x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: adds_poly_mapping le_fun_def not_le)"], ["proof (state)\nthis:\n  lookup t x < lookup s x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"x \\<in> keys s\""], ["proof (prove)\nusing this:\n  lookup t x < lookup s x\n\ngoal (1 subgoal):\n 1. x \\<in> keys s", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  x \\<in> keys s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "also"], ["proof (state)\nthis:\n  x \\<in> keys s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "from assms(3)"], ["proof (chain)\npicking this:\n  s \\<in> .[X]", "have \"\\<dots> \\<subseteq> X\""], ["proof (prove)\nusing this:\n  s \\<in> .[X]\n\ngoal (1 subgoal):\n 1. keys s \\<subseteq> X", "by (rule PPsD)"], ["proof (state)\nthis:\n  keys s \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "finally"], ["proof (chain)\npicking this:\n  x \\<in> X", "have \"x \\<in> X\""], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<in> X", "."], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"t adds s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t adds s", "unfolding adds_poly_mapping le_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. lookup t x \\<le> lookup s x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lookup t x \\<le> lookup s x", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. lookup t x \\<le> lookup s x", "show \"lookup t y \\<le> lookup s y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup t y \\<le> lookup s y", "proof (cases \"y \\<in> keys t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y\n 2. y \\<notin> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y", "case True"], ["proof (state)\nthis:\n  y \\<in> keys t\n\ngoal (2 subgoals):\n 1. y \\<in> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y\n 2. y \\<notin> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y", "also"], ["proof (state)\nthis:\n  y \\<in> keys t\n\ngoal (2 subgoals):\n 1. y \\<in> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y\n 2. y \\<notin> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y", "from assms(4)"], ["proof (chain)\npicking this:\n  t \\<in> .[X]", "have \"keys t \\<subseteq> X\""], ["proof (prove)\nusing this:\n  t \\<in> .[X]\n\ngoal (1 subgoal):\n 1. keys t \\<subseteq> X", "by (rule PPsD)"], ["proof (state)\nthis:\n  keys t \\<subseteq> X\n\ngoal (2 subgoals):\n 1. y \\<in> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y\n 2. y \\<notin> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y", "finally"], ["proof (chain)\npicking this:\n  y \\<in> X", "have \"y \\<in> X\""], ["proof (prove)\nusing this:\n  y \\<in> X\n\ngoal (1 subgoal):\n 1. y \\<in> X", "."], ["proof (state)\nthis:\n  y \\<in> X\n\ngoal (2 subgoals):\n 1. y \\<in> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y\n 2. y \\<notin> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y", "with assms(1, 2) \\<open>x \\<in> X\\<close>"], ["proof (chain)\npicking this:\n  finite X\n  card X \\<le> 1\n  x \\<in> X\n  y \\<in> X", "have \"x = y\""], ["proof (prove)\nusing this:\n  finite X\n  card X \\<le> 1\n  x \\<in> X\n  y \\<in> X\n\ngoal (1 subgoal):\n 1. x = y", "by (simp add: card_le_Suc0_iff_eq)"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. y \\<in> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y\n 2. y \\<notin> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y", "with 1"], ["proof (chain)\npicking this:\n  lookup t x < lookup s x\n  x = y", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup t x < lookup s x\n  x = y\n\ngoal (1 subgoal):\n 1. lookup t y \\<le> lookup s y", "by simp"], ["proof (state)\nthis:\n  lookup t y \\<le> lookup s y\n\ngoal (1 subgoal):\n 1. y \\<notin> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y", "case False"], ["proof (state)\nthis:\n  y \\<notin> keys t\n\ngoal (1 subgoal):\n 1. y \\<notin> keys t \\<Longrightarrow> lookup t y \\<le> lookup s y", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<notin> keys t\n\ngoal (1 subgoal):\n 1. lookup t y \\<le> lookup s y", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup t y \\<le> lookup s y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup t y \\<le> lookup s y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t adds s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s adds t \\<Longrightarrow> thesis;\n     t adds s \\<Longrightarrow> thesis; \\<not> s adds t\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  t adds s\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  fixes X :: \"'x set\"\n  assumes fin_X: \"finite X\" and card_X: \"card X \\<le> 1\"\nbegin"], ["", "lemma ord_iff_adds_univariate:\n  assumes \"s \\<in> .[X]\" and \"t \\<in> .[X]\"\n  shows \"s \\<preceq> t \\<longleftrightarrow> s adds t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s \\<preceq> t) = (s adds t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s \\<preceq> t \\<Longrightarrow> s adds t\n 2. s adds t \\<Longrightarrow> s \\<preceq> t", "assume \"s \\<preceq> t\""], ["proof (state)\nthis:\n  s \\<preceq> t\n\ngoal (2 subgoals):\n 1. s \\<preceq> t \\<Longrightarrow> s adds t\n 2. s adds t \\<Longrightarrow> s \\<preceq> t", "from fin_X card_X assms"], ["proof (chain)\npicking this:\n  finite X\n  card X \\<le> 1\n  s \\<in> .[X]\n  t \\<in> .[X]", "show \"s adds t\""], ["proof (prove)\nusing this:\n  finite X\n  card X \\<le> 1\n  s \\<in> .[X]\n  t \\<in> .[X]\n\ngoal (1 subgoal):\n 1. s adds t", "proof (rule adds_univariate_linear)"], ["proof (state)\ngoal (2 subgoals):\n 1. s adds t \\<Longrightarrow> s adds t\n 2. t adds s \\<Longrightarrow> s adds t", "assume \"t adds s\""], ["proof (state)\nthis:\n  t adds s\n\ngoal (2 subgoals):\n 1. s adds t \\<Longrightarrow> s adds t\n 2. t adds s \\<Longrightarrow> s adds t", "hence \"t \\<preceq> s\""], ["proof (prove)\nusing this:\n  t adds s\n\ngoal (1 subgoal):\n 1. t \\<preceq> s", "by (rule ord_adds)"], ["proof (state)\nthis:\n  t \\<preceq> s\n\ngoal (2 subgoals):\n 1. s adds t \\<Longrightarrow> s adds t\n 2. t adds s \\<Longrightarrow> s adds t", "with \\<open>s \\<preceq> t\\<close>"], ["proof (chain)\npicking this:\n  s \\<preceq> t\n  t \\<preceq> s", "have \"s = t\""], ["proof (prove)\nusing this:\n  s \\<preceq> t\n  t \\<preceq> s\n\ngoal (1 subgoal):\n 1. s = t", "by (rule ordered_powerprod_lin.antisym)"], ["proof (state)\nthis:\n  s = t\n\ngoal (2 subgoals):\n 1. s adds t \\<Longrightarrow> s adds t\n 2. t adds s \\<Longrightarrow> s adds t", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = t\n\ngoal (1 subgoal):\n 1. s adds t", "by simp"], ["proof (state)\nthis:\n  s adds t\n\ngoal (1 subgoal):\n 1. s adds t \\<Longrightarrow> s adds t", "qed"], ["proof (state)\nthis:\n  s adds t\n\ngoal (1 subgoal):\n 1. s adds t \\<Longrightarrow> s \\<preceq> t", "qed (rule ord_adds)"], ["", "lemma adds_iff_deg_le_univariate:\n  assumes \"s \\<in> .[X]\" and \"t \\<in> .[X]\"\n  shows \"s adds t \\<longleftrightarrow> deg_pm s \\<le> deg_pm t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s adds t) = (deg_pm s \\<le> deg_pm t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s adds t \\<Longrightarrow> deg_pm s \\<le> deg_pm t\n 2. deg_pm s \\<le> deg_pm t \\<Longrightarrow> s adds t", "assume *: \"deg_pm s \\<le> deg_pm t\""], ["proof (state)\nthis:\n  deg_pm s \\<le> deg_pm t\n\ngoal (2 subgoals):\n 1. s adds t \\<Longrightarrow> deg_pm s \\<le> deg_pm t\n 2. deg_pm s \\<le> deg_pm t \\<Longrightarrow> s adds t", "from fin_X card_X assms"], ["proof (chain)\npicking this:\n  finite X\n  card X \\<le> 1\n  s \\<in> .[X]\n  t \\<in> .[X]", "show \"s adds t\""], ["proof (prove)\nusing this:\n  finite X\n  card X \\<le> 1\n  s \\<in> .[X]\n  t \\<in> .[X]\n\ngoal (1 subgoal):\n 1. s adds t", "proof (rule adds_univariate_linear)"], ["proof (state)\ngoal (2 subgoals):\n 1. s adds t \\<Longrightarrow> s adds t\n 2. t adds s \\<Longrightarrow> s adds t", "assume \"t adds s\""], ["proof (state)\nthis:\n  t adds s\n\ngoal (2 subgoals):\n 1. s adds t \\<Longrightarrow> s adds t\n 2. t adds s \\<Longrightarrow> s adds t", "hence \"t = s\""], ["proof (prove)\nusing this:\n  t adds s\n\ngoal (1 subgoal):\n 1. t = s", "using *"], ["proof (prove)\nusing this:\n  t adds s\n  deg_pm s \\<le> deg_pm t\n\ngoal (1 subgoal):\n 1. t = s", "by (rule adds_deg_pm_antisym)"], ["proof (state)\nthis:\n  t = s\n\ngoal (2 subgoals):\n 1. s adds t \\<Longrightarrow> s adds t\n 2. t adds s \\<Longrightarrow> s adds t", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = s\n\ngoal (1 subgoal):\n 1. s adds t", "by simp"], ["proof (state)\nthis:\n  s adds t\n\ngoal (1 subgoal):\n 1. s adds t \\<Longrightarrow> s adds t", "qed"], ["proof (state)\nthis:\n  s adds t\n\ngoal (1 subgoal):\n 1. s adds t \\<Longrightarrow> deg_pm s \\<le> deg_pm t", "qed (rule deg_pm_mono)"], ["", "corollary ord_iff_deg_le_univariate: \"s \\<in> .[X] \\<Longrightarrow> t \\<in> .[X] \\<Longrightarrow> s \\<preceq> t \\<longleftrightarrow> deg_pm s \\<le> deg_pm t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> .[X]; t \\<in> .[X]\\<rbrakk>\n    \\<Longrightarrow> (s \\<preceq> t) = (deg_pm s \\<le> deg_pm t)", "by (simp only: ord_iff_adds_univariate adds_iff_deg_le_univariate)"], ["", "lemma poly_deg_univariate:\n  assumes \"p \\<in> P[X]\"\n  shows \"poly_deg p = deg_pm (lpp p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_deg p = deg_pm (lpp p)", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)\n 2. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)\n 2. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. poly_deg p = deg_pm (lpp p)", "by simp"], ["proof (state)\nthis:\n  poly_deg p = deg_pm (lpp p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)", "hence lp_in: \"lpp p \\<in> keys p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lpp p \\<in> keys p", "by (rule punit.lt_in_keys)"], ["proof (state)\nthis:\n  lpp p \\<in> keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)", "also"], ["proof (state)\nthis:\n  lpp p \\<in> keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)", "from assms"], ["proof (chain)\npicking this:\n  p \\<in> P[X]", "have \"\\<dots> \\<subseteq> .[X]\""], ["proof (prove)\nusing this:\n  p \\<in> P[X]\n\ngoal (1 subgoal):\n 1. keys p \\<subseteq> .[X]", "by (rule PolysD)"], ["proof (state)\nthis:\n  keys p \\<subseteq> .[X]\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)", "finally"], ["proof (chain)\npicking this:\n  lpp p \\<in> .[X]", "have \"lpp p \\<in> .[X]\""], ["proof (prove)\nusing this:\n  lpp p \\<in> .[X]\n\ngoal (1 subgoal):\n 1. lpp p \\<in> .[X]", "."], ["proof (state)\nthis:\n  lpp p \\<in> .[X]\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> poly_deg p = deg_pm (lpp p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_deg p = deg_pm (lpp p)", "proof (intro antisym poly_deg_leI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t. t \\<in> keys p \\<Longrightarrow> deg_pm t \\<le> deg_pm (lpp p)\n 2. deg_pm (lpp p) \\<le> poly_deg p", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t. t \\<in> keys p \\<Longrightarrow> deg_pm t \\<le> deg_pm (lpp p)\n 2. deg_pm (lpp p) \\<le> poly_deg p", "assume \"t \\<in> keys p\""], ["proof (state)\nthis:\n  t \\<in> keys p\n\ngoal (2 subgoals):\n 1. \\<And>t. t \\<in> keys p \\<Longrightarrow> deg_pm t \\<le> deg_pm (lpp p)\n 2. deg_pm (lpp p) \\<le> poly_deg p", "hence \"t \\<preceq> lpp p\""], ["proof (prove)\nusing this:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. t \\<preceq> lpp p", "by (rule punit.lt_max_keys)"], ["proof (state)\nthis:\n  t \\<preceq> lpp p\n\ngoal (2 subgoals):\n 1. \\<And>t. t \\<in> keys p \\<Longrightarrow> deg_pm t \\<le> deg_pm (lpp p)\n 2. deg_pm (lpp p) \\<le> poly_deg p", "moreover"], ["proof (state)\nthis:\n  t \\<preceq> lpp p\n\ngoal (2 subgoals):\n 1. \\<And>t. t \\<in> keys p \\<Longrightarrow> deg_pm t \\<le> deg_pm (lpp p)\n 2. deg_pm (lpp p) \\<le> poly_deg p", "from \\<open>t \\<in> keys p\\<close> \\<open>keys p \\<subseteq> .[X]\\<close>"], ["proof (chain)\npicking this:\n  t \\<in> keys p\n  keys p \\<subseteq> .[X]", "have \"t \\<in> .[X]\""], ["proof (prove)\nusing this:\n  t \\<in> keys p\n  keys p \\<subseteq> .[X]\n\ngoal (1 subgoal):\n 1. t \\<in> .[X]", ".."], ["proof (state)\nthis:\n  t \\<in> .[X]\n\ngoal (2 subgoals):\n 1. \\<And>t. t \\<in> keys p \\<Longrightarrow> deg_pm t \\<le> deg_pm (lpp p)\n 2. deg_pm (lpp p) \\<le> poly_deg p", "ultimately"], ["proof (chain)\npicking this:\n  t \\<preceq> lpp p\n  t \\<in> .[X]", "show \"deg_pm t \\<le> deg_pm (lpp p)\""], ["proof (prove)\nusing this:\n  t \\<preceq> lpp p\n  t \\<in> .[X]\n\ngoal (1 subgoal):\n 1. deg_pm t \\<le> deg_pm (lpp p)", "using \\<open>lpp p \\<in> .[X]\\<close>"], ["proof (prove)\nusing this:\n  t \\<preceq> lpp p\n  t \\<in> .[X]\n  lpp p \\<in> .[X]\n\ngoal (1 subgoal):\n 1. deg_pm t \\<le> deg_pm (lpp p)", "by (simp only: ord_iff_deg_le_univariate)"], ["proof (state)\nthis:\n  deg_pm t \\<le> deg_pm (lpp p)\n\ngoal (1 subgoal):\n 1. deg_pm (lpp p) \\<le> poly_deg p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. deg_pm (lpp p) \\<le> poly_deg p", "from lp_in"], ["proof (chain)\npicking this:\n  lpp p \\<in> keys p", "show \"deg_pm (lpp p) \\<le> poly_deg p\""], ["proof (prove)\nusing this:\n  lpp p \\<in> keys p\n\ngoal (1 subgoal):\n 1. deg_pm (lpp p) \\<le> poly_deg p", "by (rule poly_deg_max_keys)"], ["proof (state)\nthis:\n  deg_pm (lpp p) \\<le> poly_deg p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  poly_deg p = deg_pm (lpp p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduced_GB_univariate_cases:\n  assumes \"F \\<subseteq> P[X]\"\n  obtains g where \"g \\<in> P[X]\" and \"g \\<noteq> 0\" and \"lcf g = 1\" and \"punit.reduced_GB F = {g}\" |\n    \"punit.reduced_GB F = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof (cases \"punit.reduced_GB F = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {}\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  punit.reduced_GB F = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {}\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  punit.reduced_GB F = {}\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  punit.reduced_GB F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "let ?G = \"punit.reduced_GB F\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "from fin_X assms"], ["proof (chain)\npicking this:\n  finite X\n  F \\<subseteq> P[X]", "have ar: \"punit.is_auto_reduced ?G\" and \"0 \\<notin> ?G\" and \"?G \\<subseteq> P[X]\"\n    and m: \"punit.is_monic_set ?G\""], ["proof (prove)\nusing this:\n  finite X\n  F \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. (punit.is_auto_reduced (punit.reduced_GB F) &&&\n     0 \\<notin> punit.reduced_GB F) &&&\n    punit.reduced_GB F \\<subseteq> P[X] &&&\n    punit.is_monic_set (punit.reduced_GB F)", "by (rule reduced_GB_is_auto_reduced_Polys, rule reduced_GB_nonzero_Polys, rule reduced_GB_Polys,\n        rule reduced_GB_is_monic_set_Polys)"], ["proof (state)\nthis:\n  punit.is_auto_reduced (punit.reduced_GB F)\n  0 \\<notin> punit.reduced_GB F\n  punit.reduced_GB F \\<subseteq> P[X]\n  punit.is_monic_set (punit.reduced_GB F)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "from False"], ["proof (chain)\npicking this:\n  punit.reduced_GB F \\<noteq> {}", "obtain g where \"g \\<in> ?G\""], ["proof (prove)\nusing this:\n  punit.reduced_GB F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        g \\<in> punit.reduced_GB F \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  g \\<in> punit.reduced_GB F\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "with \\<open>0 \\<notin> ?G\\<close> \\<open>?G \\<subseteq> P[X]\\<close>"], ["proof (chain)\npicking this:\n  0 \\<notin> punit.reduced_GB F\n  punit.reduced_GB F \\<subseteq> P[X]\n  g \\<in> punit.reduced_GB F", "have \"g \\<noteq> 0\" and \"g \\<in> P[X]\""], ["proof (prove)\nusing this:\n  0 \\<notin> punit.reduced_GB F\n  punit.reduced_GB F \\<subseteq> P[X]\n  g \\<in> punit.reduced_GB F\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 &&& g \\<in> P[X]", "by blast+"], ["proof (state)\nthis:\n  g \\<noteq> 0\n  g \\<in> P[X]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "from this(1)"], ["proof (chain)\npicking this:\n  g \\<noteq> 0", "have lp_g: \"lpp g \\<in> keys g\""], ["proof (prove)\nusing this:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lpp g \\<in> keys g", "by (rule punit.lt_in_keys)"], ["proof (state)\nthis:\n  lpp g \\<in> keys g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "also"], ["proof (state)\nthis:\n  lpp g \\<in> keys g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "from \\<open>g \\<in> P[X]\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> P[X]", "have \"\\<dots> \\<subseteq> .[X]\""], ["proof (prove)\nusing this:\n  g \\<in> P[X]\n\ngoal (1 subgoal):\n 1. keys g \\<subseteq> .[X]", "by (rule PolysD)"], ["proof (state)\nthis:\n  keys g \\<subseteq> .[X]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "finally"], ["proof (chain)\npicking this:\n  lpp g \\<in> .[X]", "have \"lpp g \\<in> .[X]\""], ["proof (prove)\nusing this:\n  lpp g \\<in> .[X]\n\ngoal (1 subgoal):\n 1. lpp g \\<in> .[X]", "."], ["proof (state)\nthis:\n  lpp g \\<in> .[X]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "note \\<open>g \\<in> P[X]\\<close> \\<open>g \\<noteq> 0\\<close>"], ["proof (state)\nthis:\n  g \\<in> P[X]\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  g \\<in> P[X]\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "from m \\<open>g \\<in> ?G\\<close> \\<open>g \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  punit.is_monic_set (punit.reduced_GB F)\n  g \\<in> punit.reduced_GB F\n  g \\<noteq> 0", "have \"lcf g = 1\""], ["proof (prove)\nusing this:\n  punit.is_monic_set (punit.reduced_GB F)\n  g \\<in> punit.reduced_GB F\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lcf g = (1::'a)", "by (rule punit.is_monic_setD)"], ["proof (state)\nthis:\n  lcf g = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  lcf g = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"?G = {g}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {g}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. punit.reduced_GB F \\<subseteq> {g}\n 2. {g} \\<subseteq> punit.reduced_GB F", "show \"?G \\<subseteq> {g}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.reduced_GB F \\<subseteq> {g}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> punit.reduced_GB F \\<Longrightarrow> x \\<in> {g}", "fix g'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> punit.reduced_GB F \\<Longrightarrow> x \\<in> {g}", "assume \"g' \\<in> ?G\""], ["proof (state)\nthis:\n  g' \\<in> punit.reduced_GB F\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> punit.reduced_GB F \\<Longrightarrow> x \\<in> {g}", "with \\<open>0 \\<notin> ?G\\<close> \\<open>?G \\<subseteq> P[X]\\<close>"], ["proof (chain)\npicking this:\n  0 \\<notin> punit.reduced_GB F\n  punit.reduced_GB F \\<subseteq> P[X]\n  g' \\<in> punit.reduced_GB F", "have \"g' \\<noteq> 0\" and \"g' \\<in> P[X]\""], ["proof (prove)\nusing this:\n  0 \\<notin> punit.reduced_GB F\n  punit.reduced_GB F \\<subseteq> P[X]\n  g' \\<in> punit.reduced_GB F\n\ngoal (1 subgoal):\n 1. g' \\<noteq> 0 &&& g' \\<in> P[X]", "by blast+"], ["proof (state)\nthis:\n  g' \\<noteq> 0\n  g' \\<in> P[X]\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> punit.reduced_GB F \\<Longrightarrow> x \\<in> {g}", "from this(1)"], ["proof (chain)\npicking this:\n  g' \\<noteq> 0", "have lp_g': \"lpp g' \\<in> keys g'\""], ["proof (prove)\nusing this:\n  g' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lpp g' \\<in> keys g'", "by (rule punit.lt_in_keys)"], ["proof (state)\nthis:\n  lpp g' \\<in> keys g'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> punit.reduced_GB F \\<Longrightarrow> x \\<in> {g}", "also"], ["proof (state)\nthis:\n  lpp g' \\<in> keys g'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> punit.reduced_GB F \\<Longrightarrow> x \\<in> {g}", "from \\<open>g' \\<in> P[X]\\<close>"], ["proof (chain)\npicking this:\n  g' \\<in> P[X]", "have \"\\<dots> \\<subseteq> .[X]\""], ["proof (prove)\nusing this:\n  g' \\<in> P[X]\n\ngoal (1 subgoal):\n 1. keys g' \\<subseteq> .[X]", "by (rule PolysD)"], ["proof (state)\nthis:\n  keys g' \\<subseteq> .[X]\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> punit.reduced_GB F \\<Longrightarrow> x \\<in> {g}", "finally"], ["proof (chain)\npicking this:\n  lpp g' \\<in> .[X]", "have \"lpp g' \\<in> .[X]\""], ["proof (prove)\nusing this:\n  lpp g' \\<in> .[X]\n\ngoal (1 subgoal):\n 1. lpp g' \\<in> .[X]", "."], ["proof (state)\nthis:\n  lpp g' \\<in> .[X]\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> punit.reduced_GB F \\<Longrightarrow> x \\<in> {g}", "have \"g' = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' = g", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. g' \\<noteq> g \\<Longrightarrow> False", "assume \"g' \\<noteq> g\""], ["proof (state)\nthis:\n  g' \\<noteq> g\n\ngoal (1 subgoal):\n 1. g' \\<noteq> g \\<Longrightarrow> False", "with \\<open>g \\<in> ?G\\<close> \\<open>g' \\<in> ?G\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> punit.reduced_GB F\n  g' \\<in> punit.reduced_GB F\n  g' \\<noteq> g", "have g: \"g \\<in> ?G - {g'}\" and g': \"g' \\<in> ?G - {g}\""], ["proof (prove)\nusing this:\n  g \\<in> punit.reduced_GB F\n  g' \\<in> punit.reduced_GB F\n  g' \\<noteq> g\n\ngoal (1 subgoal):\n 1. g \\<in> punit.reduced_GB F - {g'} &&& g' \\<in> punit.reduced_GB F - {g}", "by blast+"], ["proof (state)\nthis:\n  g \\<in> punit.reduced_GB F - {g'}\n  g' \\<in> punit.reduced_GB F - {g}\n\ngoal (1 subgoal):\n 1. g' \\<noteq> g \\<Longrightarrow> False", "from fin_X card_X \\<open>lpp g \\<in> .[X]\\<close> \\<open>lpp g' \\<in> .[X]\\<close>"], ["proof (chain)\npicking this:\n  finite X\n  card X \\<le> 1\n  lpp g \\<in> .[X]\n  lpp g' \\<in> .[X]", "show False"], ["proof (prove)\nusing this:\n  finite X\n  card X \\<le> 1\n  lpp g \\<in> .[X]\n  lpp g' \\<in> .[X]\n\ngoal (1 subgoal):\n 1. False", "proof (rule adds_univariate_linear)"], ["proof (state)\ngoal (2 subgoals):\n 1. lpp g adds lpp g' \\<Longrightarrow> False\n 2. lpp g' adds lpp g \\<Longrightarrow> False", "assume *: \"lpp g adds lpp g'\""], ["proof (state)\nthis:\n  lpp g adds lpp g'\n\ngoal (2 subgoals):\n 1. lpp g adds lpp g' \\<Longrightarrow> False\n 2. lpp g' adds lpp g \\<Longrightarrow> False", "from ar \\<open>g' \\<in> ?G\\<close>"], ["proof (chain)\npicking this:\n  punit.is_auto_reduced (punit.reduced_GB F)\n  g' \\<in> punit.reduced_GB F", "have \"\\<not> punit.is_red (?G - {g'}) g'\""], ["proof (prove)\nusing this:\n  punit.is_auto_reduced (punit.reduced_GB F)\n  g' \\<in> punit.reduced_GB F\n\ngoal (1 subgoal):\n 1. \\<not> punit.is_red (punit.reduced_GB F - {g'}) g'", "by (rule punit.is_auto_reducedD)"], ["proof (state)\nthis:\n  \\<not> punit.is_red (punit.reduced_GB F - {g'}) g'\n\ngoal (2 subgoals):\n 1. lpp g adds lpp g' \\<Longrightarrow> False\n 2. lpp g' adds lpp g \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> punit.is_red (punit.reduced_GB F - {g'}) g'\n\ngoal (2 subgoals):\n 1. lpp g adds lpp g' \\<Longrightarrow> False\n 2. lpp g' adds lpp g \\<Longrightarrow> False", "from g \\<open>g \\<noteq> 0\\<close> lp_g' *"], ["proof (chain)\npicking this:\n  g \\<in> punit.reduced_GB F - {g'}\n  g \\<noteq> 0\n  lpp g' \\<in> keys g'\n  lpp g adds lpp g'", "have \"punit.is_red (?G - {g'}) g'\""], ["proof (prove)\nusing this:\n  g \\<in> punit.reduced_GB F - {g'}\n  g \\<noteq> 0\n  lpp g' \\<in> keys g'\n  lpp g adds lpp g'\n\ngoal (1 subgoal):\n 1. punit.is_red (punit.reduced_GB F - {g'}) g'", "by (rule punit.is_red_addsI[simplified])"], ["proof (state)\nthis:\n  punit.is_red (punit.reduced_GB F - {g'}) g'\n\ngoal (2 subgoals):\n 1. lpp g adds lpp g' \\<Longrightarrow> False\n 2. lpp g' adds lpp g \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> punit.is_red (punit.reduced_GB F - {g'}) g'\n  punit.is_red (punit.reduced_GB F - {g'}) g'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> punit.is_red (punit.reduced_GB F - {g'}) g'\n  punit.is_red (punit.reduced_GB F - {g'}) g'\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. lpp g' adds lpp g \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lpp g' adds lpp g \\<Longrightarrow> False", "assume *: \"lpp g' adds lpp g\""], ["proof (state)\nthis:\n  lpp g' adds lpp g\n\ngoal (1 subgoal):\n 1. lpp g' adds lpp g \\<Longrightarrow> False", "from ar \\<open>g \\<in> ?G\\<close>"], ["proof (chain)\npicking this:\n  punit.is_auto_reduced (punit.reduced_GB F)\n  g \\<in> punit.reduced_GB F", "have \"\\<not> punit.is_red (?G - {g}) g\""], ["proof (prove)\nusing this:\n  punit.is_auto_reduced (punit.reduced_GB F)\n  g \\<in> punit.reduced_GB F\n\ngoal (1 subgoal):\n 1. \\<not> punit.is_red (punit.reduced_GB F - {g}) g", "by (rule punit.is_auto_reducedD)"], ["proof (state)\nthis:\n  \\<not> punit.is_red (punit.reduced_GB F - {g}) g\n\ngoal (1 subgoal):\n 1. lpp g' adds lpp g \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> punit.is_red (punit.reduced_GB F - {g}) g\n\ngoal (1 subgoal):\n 1. lpp g' adds lpp g \\<Longrightarrow> False", "from g' \\<open>g' \\<noteq> 0\\<close> lp_g *"], ["proof (chain)\npicking this:\n  g' \\<in> punit.reduced_GB F - {g}\n  g' \\<noteq> 0\n  lpp g \\<in> keys g\n  lpp g' adds lpp g", "have \"punit.is_red (?G - {g}) g\""], ["proof (prove)\nusing this:\n  g' \\<in> punit.reduced_GB F - {g}\n  g' \\<noteq> 0\n  lpp g \\<in> keys g\n  lpp g' adds lpp g\n\ngoal (1 subgoal):\n 1. punit.is_red (punit.reduced_GB F - {g}) g", "by (rule punit.is_red_addsI[simplified])"], ["proof (state)\nthis:\n  punit.is_red (punit.reduced_GB F - {g}) g\n\ngoal (1 subgoal):\n 1. lpp g' adds lpp g \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> punit.is_red (punit.reduced_GB F - {g}) g\n  punit.is_red (punit.reduced_GB F - {g}) g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> punit.is_red (punit.reduced_GB F - {g}) g\n  punit.is_red (punit.reduced_GB F - {g}) g\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g' = g\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> punit.reduced_GB F \\<Longrightarrow> x \\<in> {g}", "thus \"g' \\<in> {g}\""], ["proof (prove)\nusing this:\n  g' = g\n\ngoal (1 subgoal):\n 1. g' \\<in> {g}", "by simp"], ["proof (state)\nthis:\n  g' \\<in> {g}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  punit.reduced_GB F \\<subseteq> {g}\n\ngoal (1 subgoal):\n 1. {g} \\<subseteq> punit.reduced_GB F", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {g} \\<subseteq> punit.reduced_GB F", "from \\<open>g \\<in> ?G\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> punit.reduced_GB F", "show \"{g} \\<subseteq> ?G\""], ["proof (prove)\nusing this:\n  g \\<in> punit.reduced_GB F\n\ngoal (1 subgoal):\n 1. {g} \\<subseteq> punit.reduced_GB F", "by simp"], ["proof (state)\nthis:\n  {g} \\<subseteq> punit.reduced_GB F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  punit.reduced_GB F = {g}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g.\n                \\<lbrakk>g \\<in> P[X]; g \\<noteq> 0; lcf g = (1::'a);\n                 punit.reduced_GB F = {g}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     punit.reduced_GB F = {} \\<Longrightarrow> thesis;\n     punit.reduced_GB F \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  g \\<in> P[X]\n  g \\<noteq> 0\n  lcf g = (1::'a)\n  punit.reduced_GB F = {g}", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> P[X]\n  g \\<noteq> 0\n  lcf g = (1::'a)\n  punit.reduced_GB F = {g}\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary deg_reduced_GB_univariate_le:\n  assumes \"F \\<subseteq> P[X]\" and \"f \\<in> ideal F\" and \"f \\<noteq> 0\" and \"g \\<in> punit.reduced_GB F\"\n  shows \"poly_deg g \\<le> poly_deg f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_deg g \\<le> poly_deg f", "using assms(1)"], ["proof (prove)\nusing this:\n  F \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. poly_deg g \\<le> poly_deg f", "proof (rule reduced_GB_univariate_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "let ?G = \"punit.reduced_GB F\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "fix g'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "assume \"g' \\<in> P[X]\" and \"g' \\<noteq> 0\" and G: \"?G = {g'}\""], ["proof (state)\nthis:\n  g' \\<in> P[X]\n  g' \\<noteq> 0\n  punit.reduced_GB F = {g'}\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "from fin_X assms(1)"], ["proof (chain)\npicking this:\n  finite X\n  F \\<subseteq> P[X]", "have gb: \"punit.is_Groebner_basis ?G\" and \"ideal ?G = ideal F\"\n    and \"?G \\<subseteq> P[X]\""], ["proof (prove)\nusing this:\n  finite X\n  F \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. punit.is_Groebner_basis (punit.reduced_GB F) &&&\n    ideal (punit.reduced_GB F) = ideal F &&&\n    punit.reduced_GB F \\<subseteq> P[X]", "by (rule reduced_GB_is_GB_Polys, rule reduced_GB_ideal_Polys, rule reduced_GB_Polys)"], ["proof (state)\nthis:\n  punit.is_Groebner_basis (punit.reduced_GB F)\n  ideal (punit.reduced_GB F) = ideal F\n  punit.reduced_GB F \\<subseteq> P[X]\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "from assms(2) this(2)"], ["proof (chain)\npicking this:\n  f \\<in> ideal F\n  ideal (punit.reduced_GB F) = ideal F", "have \"f \\<in> ideal ?G\""], ["proof (prove)\nusing this:\n  f \\<in> ideal F\n  ideal (punit.reduced_GB F) = ideal F\n\ngoal (1 subgoal):\n 1. f \\<in> ideal (punit.reduced_GB F)", "by simp"], ["proof (state)\nthis:\n  f \\<in> ideal (punit.reduced_GB F)\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "with gb"], ["proof (chain)\npicking this:\n  punit.is_Groebner_basis (punit.reduced_GB F)\n  f \\<in> ideal (punit.reduced_GB F)", "obtain g'' where \"g'' \\<in> ?G\" and \"lpp g'' adds lpp f\""], ["proof (prove)\nusing this:\n  punit.is_Groebner_basis (punit.reduced_GB F)\n  f \\<in> ideal (punit.reduced_GB F)\n\ngoal (1 subgoal):\n 1. (\\<And>g''.\n        \\<lbrakk>g'' \\<in> punit.reduced_GB F; lpp g'' adds lpp f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(3)"], ["proof (prove)\nusing this:\n  punit.is_Groebner_basis (punit.reduced_GB F)\n  f \\<in> ideal (punit.reduced_GB F)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g''.\n        \\<lbrakk>g'' \\<in> punit.reduced_GB F; lpp g'' adds lpp f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule punit.GB_adds_lt[simplified])"], ["proof (state)\nthis:\n  g'' \\<in> punit.reduced_GB F\n  lpp g'' adds lpp f\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "with assms(4)"], ["proof (chain)\npicking this:\n  g \\<in> punit.reduced_GB F\n  g'' \\<in> punit.reduced_GB F\n  lpp g'' adds lpp f", "have \"lpp g adds lpp f\""], ["proof (prove)\nusing this:\n  g \\<in> punit.reduced_GB F\n  g'' \\<in> punit.reduced_GB F\n  lpp g'' adds lpp f\n\ngoal (1 subgoal):\n 1. lpp g adds lpp f", "by (simp add: G)"], ["proof (state)\nthis:\n  lpp g adds lpp f\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "hence \"deg_pm (lpp g) \\<le> deg_pm (lpp f)\""], ["proof (prove)\nusing this:\n  lpp g adds lpp f\n\ngoal (1 subgoal):\n 1. deg_pm (lpp g) \\<le> deg_pm (lpp f)", "by (rule deg_pm_mono)"], ["proof (state)\nthis:\n  deg_pm (lpp g) \\<le> deg_pm (lpp f)\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "moreover"], ["proof (state)\nthis:\n  deg_pm (lpp g) \\<le> deg_pm (lpp f)\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "from assms(4) \\<open>?G \\<subseteq> P[X]\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> punit.reduced_GB F\n  punit.reduced_GB F \\<subseteq> P[X]", "have \"g \\<in> P[X]\""], ["proof (prove)\nusing this:\n  g \\<in> punit.reduced_GB F\n  punit.reduced_GB F \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. g \\<in> P[X]", ".."], ["proof (state)\nthis:\n  g \\<in> P[X]\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "ultimately"], ["proof (chain)\npicking this:\n  deg_pm (lpp g) \\<le> deg_pm (lpp f)\n  g \\<in> P[X]", "have \"poly_deg g \\<le> deg_pm (lpp f)\""], ["proof (prove)\nusing this:\n  deg_pm (lpp g) \\<le> deg_pm (lpp f)\n  g \\<in> P[X]\n\ngoal (1 subgoal):\n 1. poly_deg g \\<le> deg_pm (lpp f)", "by (simp only: poly_deg_univariate)"], ["proof (state)\nthis:\n  poly_deg g \\<le> deg_pm (lpp f)\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "also"], ["proof (state)\nthis:\n  poly_deg g \\<le> deg_pm (lpp f)\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "from punit.lt_in_keys"], ["proof (chain)\npicking this:\n  ?p \\<noteq> 0 \\<Longrightarrow> lpp ?p \\<in> keys ?p", "have \"\\<dots> \\<le> poly_deg f\""], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<Longrightarrow> lpp ?p \\<in> keys ?p\n\ngoal (1 subgoal):\n 1. deg_pm (lpp f) \\<le> poly_deg f", "by (rule poly_deg_max_keys) fact"], ["proof (state)\nthis:\n  deg_pm (lpp f) \\<le> poly_deg f\n\ngoal (2 subgoals):\n 1. \\<And>ga.\n       \\<lbrakk>ga \\<in> P[X]; ga \\<noteq> 0; lcf ga = (1::'a);\n        punit.reduced_GB F = {ga}\\<rbrakk>\n       \\<Longrightarrow> poly_deg g \\<le> poly_deg f\n 2. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "finally"], ["proof (chain)\npicking this:\n  poly_deg g \\<le> poly_deg f", "show ?thesis"], ["proof (prove)\nusing this:\n  poly_deg g \\<le> poly_deg f\n\ngoal (1 subgoal):\n 1. poly_deg g \\<le> poly_deg f", "."], ["proof (state)\nthis:\n  poly_deg g \\<le> poly_deg f\n\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "assume \"punit.reduced_GB F = {}\""], ["proof (state)\nthis:\n  punit.reduced_GB F = {}\n\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {} \\<Longrightarrow> poly_deg g \\<le> poly_deg f", "with assms(4)"], ["proof (chain)\npicking this:\n  g \\<in> punit.reduced_GB F\n  punit.reduced_GB F = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> punit.reduced_GB F\n  punit.reduced_GB F = {}\n\ngoal (1 subgoal):\n 1. poly_deg g \\<le> poly_deg f", "by simp"], ["proof (state)\nthis:\n  poly_deg g \\<le> poly_deg f\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Homogeneity\\<close>"], ["", "lemma is_reduced_GB_homogeneous:\n  assumes \"\\<And>f. f \\<in> F \\<Longrightarrow> homogeneous f\" and \"punit.is_reduced_GB G\" and \"ideal G = ideal F\"\n    and \"g \\<in> G\"\n  shows \"homogeneous g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homogeneous g", "proof (rule homogeneousI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>s \\<in> keys g; t \\<in> keys g\\<rbrakk>\n       \\<Longrightarrow> deg_pm s = deg_pm t", "fix s t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>s \\<in> keys g; t \\<in> keys g\\<rbrakk>\n       \\<Longrightarrow> deg_pm s = deg_pm t", "have 1: \"deg_pm u = deg_pm (lpp g)\" if \"u \\<in> keys g\" for u"], ["proof (prove)\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from assms(4)"], ["proof (chain)\npicking this:\n  g \\<in> G", "have \"g \\<in> ideal G\""], ["proof (prove)\nusing this:\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. g \\<in> ideal G", "by (rule ideal.span_base)"], ["proof (state)\nthis:\n  g \\<in> ideal G\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "hence \"g \\<in> ideal F\""], ["proof (prove)\nusing this:\n  g \\<in> ideal G\n\ngoal (1 subgoal):\n 1. g \\<in> ideal F", "by (simp only: assms(3))"], ["proof (state)\nthis:\n  g \\<in> ideal F\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from that"], ["proof (chain)\npicking this:\n  u \\<in> keys g", "have \"u \\<in> Keys (hom_components g)\""], ["proof (prove)\nusing this:\n  u \\<in> keys g\n\ngoal (1 subgoal):\n 1. u \\<in> Keys (hom_components g)", "by (simp only: Keys_hom_components)"], ["proof (state)\nthis:\n  u \\<in> Keys (hom_components g)\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "then"], ["proof (chain)\npicking this:\n  u \\<in> Keys (hom_components g)", "obtain q where q: \"q \\<in> hom_components g\" and \"u \\<in> keys q\""], ["proof (prove)\nusing this:\n  u \\<in> Keys (hom_components g)\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> hom_components g; u \\<in> keys q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_KeysE)"], ["proof (state)\nthis:\n  q \\<in> hom_components g\n  u \\<in> keys q\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from assms(1) \\<open>g \\<in> ideal F\\<close> q"], ["proof (chain)\npicking this:\n  ?f5 \\<in> F \\<Longrightarrow> homogeneous ?f5\n  g \\<in> ideal F\n  q \\<in> hom_components g", "have \"q \\<in> ideal F\""], ["proof (prove)\nusing this:\n  ?f5 \\<in> F \\<Longrightarrow> homogeneous ?f5\n  g \\<in> ideal F\n  q \\<in> hom_components g\n\ngoal (1 subgoal):\n 1. q \\<in> ideal F", "by (rule homogeneous_ideal')"], ["proof (state)\nthis:\n  q \\<in> ideal F\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from assms(2)"], ["proof (chain)\npicking this:\n  punit.is_reduced_GB G", "have \"punit.is_Groebner_basis G\""], ["proof (prove)\nusing this:\n  punit.is_reduced_GB G\n\ngoal (1 subgoal):\n 1. punit.is_Groebner_basis G", "by (rule punit.reduced_GB_D1)"], ["proof (state)\nthis:\n  punit.is_Groebner_basis G\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "moreover"], ["proof (state)\nthis:\n  punit.is_Groebner_basis G\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from \\<open>q \\<in> ideal F\\<close>"], ["proof (chain)\npicking this:\n  q \\<in> ideal F", "have \"q \\<in> ideal G\""], ["proof (prove)\nusing this:\n  q \\<in> ideal F\n\ngoal (1 subgoal):\n 1. q \\<in> ideal G", "by (simp only: assms(3))"], ["proof (state)\nthis:\n  q \\<in> ideal G\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "moreover"], ["proof (state)\nthis:\n  q \\<in> ideal G\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from q"], ["proof (chain)\npicking this:\n  q \\<in> hom_components g", "have \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<in> hom_components g\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by (rule hom_components_nonzero)"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "ultimately"], ["proof (chain)\npicking this:\n  punit.is_Groebner_basis G\n  q \\<in> ideal G\n  q \\<noteq> 0", "obtain g' where \"g' \\<in> G\" and \"g' \\<noteq> 0\" and adds: \"lpp g' adds lpp q\""], ["proof (prove)\nusing this:\n  punit.is_Groebner_basis G\n  q \\<in> ideal G\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<lbrakk>g' \\<in> G; g' \\<noteq> 0; lpp g' adds lpp q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule punit.GB_adds_lt[simplified])"], ["proof (state)\nthis:\n  g' \\<in> G\n  g' \\<noteq> 0\n  lpp g' adds lpp q\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from \\<open>q \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  q \\<noteq> 0", "have \"lpp q \\<in> keys q\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lpp q \\<in> keys q", "by (rule punit.lt_in_keys)"], ["proof (state)\nthis:\n  lpp q \\<in> keys q\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "also"], ["proof (state)\nthis:\n  lpp q \\<in> keys q\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from q"], ["proof (chain)\npicking this:\n  q \\<in> hom_components g", "have \"\\<dots> \\<subseteq> Keys (hom_components g)\""], ["proof (prove)\nusing this:\n  q \\<in> hom_components g\n\ngoal (1 subgoal):\n 1. keys q \\<subseteq> Keys (hom_components g)", "by (rule keys_subset_Keys)"], ["proof (state)\nthis:\n  keys q \\<subseteq> Keys (hom_components g)\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "finally"], ["proof (chain)\npicking this:\n  lpp q \\<in> Keys (hom_components g)", "have \"lpp q \\<in> keys g\""], ["proof (prove)\nusing this:\n  lpp q \\<in> Keys (hom_components g)\n\ngoal (1 subgoal):\n 1. lpp q \\<in> keys g", "by (simp only: Keys_hom_components)"], ["proof (state)\nthis:\n  lpp q \\<in> keys g\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "with _ \\<open>g' \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  g' \\<noteq> 0\n  lpp q \\<in> keys g", "have red: \"punit.is_red {g'} g\""], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  g' \\<noteq> 0\n  lpp q \\<in> keys g\n\ngoal (1 subgoal):\n 1. punit.is_red {g'} g", "using adds"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  g' \\<noteq> 0\n  lpp q \\<in> keys g\n  lpp g' adds lpp q\n\ngoal (1 subgoal):\n 1. punit.is_red {g'} g", "by (rule punit.is_red_addsI[simplified]) simp"], ["proof (state)\nthis:\n  punit.is_red {g'} g\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from assms(2)"], ["proof (chain)\npicking this:\n  punit.is_reduced_GB G", "have \"punit.is_auto_reduced G\""], ["proof (prove)\nusing this:\n  punit.is_reduced_GB G\n\ngoal (1 subgoal):\n 1. punit.is_auto_reduced G", "by (rule punit.reduced_GB_D2)"], ["proof (state)\nthis:\n  punit.is_auto_reduced G\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "hence \"\\<not> punit.is_red (G - {g}) g\""], ["proof (prove)\nusing this:\n  punit.is_auto_reduced G\n\ngoal (1 subgoal):\n 1. \\<not> punit.is_red (G - {g}) g", "using assms(4)"], ["proof (prove)\nusing this:\n  punit.is_auto_reduced G\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. \\<not> punit.is_red (G - {g}) g", "by (rule punit.is_auto_reducedD)"], ["proof (state)\nthis:\n  \\<not> punit.is_red (G - {g}) g\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "with red"], ["proof (chain)\npicking this:\n  punit.is_red {g'} g\n  \\<not> punit.is_red (G - {g}) g", "have \"\\<not> {g'} \\<subseteq> G - {g}\""], ["proof (prove)\nusing this:\n  punit.is_red {g'} g\n  \\<not> punit.is_red (G - {g}) g\n\ngoal (1 subgoal):\n 1. \\<not> {g'} \\<subseteq> G - {g}", "using punit.is_red_subset"], ["proof (prove)\nusing this:\n  punit.is_red {g'} g\n  \\<not> punit.is_red (G - {g}) g\n  \\<lbrakk>punit.is_red ?A ?p; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> punit.is_red ?B ?p\n\ngoal (1 subgoal):\n 1. \\<not> {g'} \\<subseteq> G - {g}", "by blast"], ["proof (state)\nthis:\n  \\<not> {g'} \\<subseteq> G - {g}\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "with \\<open>g' \\<in> G\\<close>"], ["proof (chain)\npicking this:\n  g' \\<in> G\n  \\<not> {g'} \\<subseteq> G - {g}", "have \"g' = g\""], ["proof (prove)\nusing this:\n  g' \\<in> G\n  \\<not> {g'} \\<subseteq> G - {g}\n\ngoal (1 subgoal):\n 1. g' = g", "by simp"], ["proof (state)\nthis:\n  g' = g\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from \\<open>lpp q \\<in> keys g\\<close>"], ["proof (chain)\npicking this:\n  lpp q \\<in> keys g", "have \"lpp q \\<preceq> lpp g\""], ["proof (prove)\nusing this:\n  lpp q \\<in> keys g\n\ngoal (1 subgoal):\n 1. lpp q \\<preceq> lpp g", "by (rule punit.lt_max_keys)"], ["proof (state)\nthis:\n  lpp q \\<preceq> lpp g\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "moreover"], ["proof (state)\nthis:\n  lpp q \\<preceq> lpp g\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from adds"], ["proof (chain)\npicking this:\n  lpp g' adds lpp q", "have \"lpp g \\<preceq> lpp q\""], ["proof (prove)\nusing this:\n  lpp g' adds lpp q\n\ngoal (1 subgoal):\n 1. lpp g \\<preceq> lpp q", "unfolding \\<open>g' = g\\<close>"], ["proof (prove)\nusing this:\n  lpp g adds lpp q\n\ngoal (1 subgoal):\n 1. lpp g \\<preceq> lpp q", "by (rule punit.ord_adds_term[simplified])"], ["proof (state)\nthis:\n  lpp g \\<preceq> lpp q\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "ultimately"], ["proof (chain)\npicking this:\n  lpp q \\<preceq> lpp g\n  lpp g \\<preceq> lpp q", "have eq: \"lpp q = lpp g\""], ["proof (prove)\nusing this:\n  lpp q \\<preceq> lpp g\n  lpp g \\<preceq> lpp q\n\ngoal (1 subgoal):\n 1. lpp q = lpp g", "by (rule ordered_powerprod_lin.antisym)"], ["proof (state)\nthis:\n  lpp q = lpp g\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "from q"], ["proof (chain)\npicking this:\n  q \\<in> hom_components g", "have \"homogeneous q\""], ["proof (prove)\nusing this:\n  q \\<in> hom_components g\n\ngoal (1 subgoal):\n 1. homogeneous q", "by (rule hom_components_homogeneous)"], ["proof (state)\nthis:\n  homogeneous q\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "hence \"deg_pm u = deg_pm (lpp q)\""], ["proof (prove)\nusing this:\n  homogeneous q\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp q)", "using \\<open>u \\<in> keys q\\<close> \\<open>lpp q \\<in> keys q\\<close>"], ["proof (prove)\nusing this:\n  homogeneous q\n  u \\<in> keys q\n  lpp q \\<in> keys q\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp q)", "by (rule homogeneousD)"], ["proof (state)\nthis:\n  deg_pm u = deg_pm (lpp q)\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "thus ?thesis"], ["proof (prove)\nusing this:\n  deg_pm u = deg_pm (lpp q)\n\ngoal (1 subgoal):\n 1. deg_pm u = deg_pm (lpp g)", "by (simp only: eq)"], ["proof (state)\nthis:\n  deg_pm u = deg_pm (lpp g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?u5 \\<in> keys g \\<Longrightarrow> deg_pm ?u5 = deg_pm (lpp g)\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>s \\<in> keys g; t \\<in> keys g\\<rbrakk>\n       \\<Longrightarrow> deg_pm s = deg_pm t", "assume \"s \\<in> keys g\""], ["proof (state)\nthis:\n  s \\<in> keys g\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>s \\<in> keys g; t \\<in> keys g\\<rbrakk>\n       \\<Longrightarrow> deg_pm s = deg_pm t", "hence 2: \"deg_pm s = deg_pm (lpp g)\""], ["proof (prove)\nusing this:\n  s \\<in> keys g\n\ngoal (1 subgoal):\n 1. deg_pm s = deg_pm (lpp g)", "by (rule 1)"], ["proof (state)\nthis:\n  deg_pm s = deg_pm (lpp g)\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>s \\<in> keys g; t \\<in> keys g\\<rbrakk>\n       \\<Longrightarrow> deg_pm s = deg_pm t", "assume \"t \\<in> keys g\""], ["proof (state)\nthis:\n  t \\<in> keys g\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>s \\<in> keys g; t \\<in> keys g\\<rbrakk>\n       \\<Longrightarrow> deg_pm s = deg_pm t", "hence \"deg_pm t = deg_pm (lpp g)\""], ["proof (prove)\nusing this:\n  t \\<in> keys g\n\ngoal (1 subgoal):\n 1. deg_pm t = deg_pm (lpp g)", "by (rule 1)"], ["proof (state)\nthis:\n  deg_pm t = deg_pm (lpp g)\n\ngoal (1 subgoal):\n 1. \\<And>s t.\n       \\<lbrakk>s \\<in> keys g; t \\<in> keys g\\<rbrakk>\n       \\<Longrightarrow> deg_pm s = deg_pm t", "with 2"], ["proof (chain)\npicking this:\n  deg_pm s = deg_pm (lpp g)\n  deg_pm t = deg_pm (lpp g)", "show \"deg_pm s = deg_pm t\""], ["proof (prove)\nusing this:\n  deg_pm s = deg_pm (lpp g)\n  deg_pm t = deg_pm (lpp g)\n\ngoal (1 subgoal):\n 1. deg_pm s = deg_pm t", "by simp"], ["proof (state)\nthis:\n  deg_pm s = deg_pm t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lp_dehomogenize:\n  assumes \"is_hom_ord x\" and \"homogeneous p\"\n  shows \"lpp (dehomogenize x p) = except (lpp p) {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lpp (dehomogenize x p) = except (lpp p) {x}", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lpp (dehomogenize x p) = except (lpp p) {x}\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    lpp (dehomogenize x p) = except (lpp p) {x}", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> lpp (dehomogenize x p) = except (lpp p) {x}\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    lpp (dehomogenize x p) = except (lpp p) {x}", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. lpp (dehomogenize x p) = except (lpp p) {x}", "by simp"], ["proof (state)\nthis:\n  lpp (dehomogenize x p) = except (lpp p) {x}\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    lpp (dehomogenize x p) = except (lpp p) {x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    lpp (dehomogenize x p) = except (lpp p) {x}", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    lpp (dehomogenize x p) = except (lpp p) {x}", "hence \"lpp p \\<in> keys p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lpp p \\<in> keys p", "by (rule punit.lt_in_keys)"], ["proof (state)\nthis:\n  lpp p \\<in> keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    lpp (dehomogenize x p) = except (lpp p) {x}", "with assms(2)"], ["proof (chain)\npicking this:\n  homogeneous p\n  lpp p \\<in> keys p", "have \"except (lpp p) {x} \\<in> keys (dehomogenize x p)\""], ["proof (prove)\nusing this:\n  homogeneous p\n  lpp p \\<in> keys p\n\ngoal (1 subgoal):\n 1. except (lpp p) {x} \\<in> keys (dehomogenize x p)", "by (rule keys_dehomogenizeI)"], ["proof (state)\nthis:\n  except (lpp p) {x} \\<in> keys (dehomogenize x p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    lpp (dehomogenize x p) = except (lpp p) {x}", "thus ?thesis"], ["proof (prove)\nusing this:\n  except (lpp p) {x} \\<in> keys (dehomogenize x p)\n\ngoal (1 subgoal):\n 1. lpp (dehomogenize x p) = except (lpp p) {x}", "proof (rule punit.lt_eqI_keys)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (dehomogenize x p) \\<Longrightarrow>\n       u \\<preceq> except (lpp p) {x}", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (dehomogenize x p) \\<Longrightarrow>\n       u \\<preceq> except (lpp p) {x}", "assume \"t \\<in> keys (dehomogenize x p)\""], ["proof (state)\nthis:\n  t \\<in> keys (dehomogenize x p)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (dehomogenize x p) \\<Longrightarrow>\n       u \\<preceq> except (lpp p) {x}", "then"], ["proof (chain)\npicking this:\n  t \\<in> keys (dehomogenize x p)", "obtain s where \"s \\<in> keys p\" and t: \"t = except s {x}\""], ["proof (prove)\nusing this:\n  t \\<in> keys (dehomogenize x p)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> keys p; t = except s {x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule keys_dehomogenizeE)"], ["proof (state)\nthis:\n  s \\<in> keys p\n  t = except s {x}\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (dehomogenize x p) \\<Longrightarrow>\n       u \\<preceq> except (lpp p) {x}", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> keys p", "have \"s \\<preceq> lpp p\""], ["proof (prove)\nusing this:\n  s \\<in> keys p\n\ngoal (1 subgoal):\n 1. s \\<preceq> lpp p", "by (rule punit.lt_max_keys)"], ["proof (state)\nthis:\n  s \\<preceq> lpp p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (dehomogenize x p) \\<Longrightarrow>\n       u \\<preceq> except (lpp p) {x}", "moreover"], ["proof (state)\nthis:\n  s \\<preceq> lpp p\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (dehomogenize x p) \\<Longrightarrow>\n       u \\<preceq> except (lpp p) {x}", "from assms(2) \\<open>s \\<in> keys p\\<close> \\<open>lpp p \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  homogeneous p\n  s \\<in> keys p\n  lpp p \\<in> keys p", "have \"deg_pm s = deg_pm (lpp p)\""], ["proof (prove)\nusing this:\n  homogeneous p\n  s \\<in> keys p\n  lpp p \\<in> keys p\n\ngoal (1 subgoal):\n 1. deg_pm s = deg_pm (lpp p)", "by (rule homogeneousD)"], ["proof (state)\nthis:\n  deg_pm s = deg_pm (lpp p)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (dehomogenize x p) \\<Longrightarrow>\n       u \\<preceq> except (lpp p) {x}", "ultimately"], ["proof (chain)\npicking this:\n  s \\<preceq> lpp p\n  deg_pm s = deg_pm (lpp p)", "show \"t \\<preceq> except (lpp p) {x}\""], ["proof (prove)\nusing this:\n  s \\<preceq> lpp p\n  deg_pm s = deg_pm (lpp p)\n\ngoal (1 subgoal):\n 1. t \\<preceq> except (lpp p) {x}", "using assms(1)"], ["proof (prove)\nusing this:\n  s \\<preceq> lpp p\n  deg_pm s = deg_pm (lpp p)\n  is_hom_ord x\n\ngoal (1 subgoal):\n 1. t \\<preceq> except (lpp p) {x}", "by (simp add: t is_hom_ordD)"], ["proof (state)\nthis:\n  t \\<preceq> except (lpp p) {x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lpp (dehomogenize x p) = except (lpp p) {x}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isGB_dehomogenize:\n  assumes \"is_hom_ord x\" and \"finite X\" and \"G \\<subseteq> P[X]\" and \"punit.is_Groebner_basis G\"\n    and \"\\<And>g. g \\<in> G \\<Longrightarrow> homogeneous g\"\n  shows \"punit.is_Groebner_basis (dehomogenize x ` G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.is_Groebner_basis (dehomogenize x ` G)", "using dickson_grading_varnum"], ["proof (prove)\nusing this:\n  finite ?X \\<Longrightarrow> dickson_grading (varnum ?X)\n\ngoal (1 subgoal):\n 1. punit.is_Groebner_basis (dehomogenize x ` G)", "proof (rule punit.isGB_I_adds_lt[simplified])"], ["proof (state)\ngoal (3 subgoals):\n 1. finite ?X7\n 2. dehomogenize x ` G \\<subseteq> punit.dgrad_p_set (varnum ?X7) ?m\n 3. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum ?X7) ?m; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "from assms(2)"], ["proof (chain)\npicking this:\n  finite X", "show \"finite (X - {x})\""], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. finite (X - {x})", "by simp"], ["proof (state)\nthis:\n  finite (X - {x})\n\ngoal (2 subgoals):\n 1. dehomogenize x ` G \\<subseteq> punit.dgrad_p_set (varnum (X - {x})) ?m\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) ?m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. dehomogenize x ` G \\<subseteq> punit.dgrad_p_set (varnum (X - {x})) ?m\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) ?m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "have \"dehomogenize x ` G \\<subseteq> P[X - {x}]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dehomogenize x ` G \\<subseteq> P[X - {x}]", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> dehomogenize x ` G \\<Longrightarrow> xa \\<in> P[X - {x}]", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> dehomogenize x ` G \\<Longrightarrow> xa \\<in> P[X - {x}]", "assume \"g \\<in> dehomogenize x ` G\""], ["proof (state)\nthis:\n  g \\<in> dehomogenize x ` G\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> dehomogenize x ` G \\<Longrightarrow> xa \\<in> P[X - {x}]", "then"], ["proof (chain)\npicking this:\n  g \\<in> dehomogenize x ` G", "obtain g' where \"g' \\<in> G\" and g: \"g = dehomogenize x g'\""], ["proof (prove)\nusing this:\n  g \\<in> dehomogenize x ` G\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<lbrakk>g' \\<in> G; g = dehomogenize x g'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  g' \\<in> G\n  g = dehomogenize x g'\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> dehomogenize x ` G \\<Longrightarrow> xa \\<in> P[X - {x}]", "from this(1) assms(3)"], ["proof (chain)\npicking this:\n  g' \\<in> G\n  G \\<subseteq> P[X]", "have \"g' \\<in> P[X]\""], ["proof (prove)\nusing this:\n  g' \\<in> G\n  G \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. g' \\<in> P[X]", ".."], ["proof (state)\nthis:\n  g' \\<in> P[X]\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> dehomogenize x ` G \\<Longrightarrow> xa \\<in> P[X - {x}]", "hence \"indets g' \\<subseteq> X\""], ["proof (prove)\nusing this:\n  g' \\<in> P[X]\n\ngoal (1 subgoal):\n 1. indets g' \\<subseteq> X", "by (rule PolysD)"], ["proof (state)\nthis:\n  indets g' \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> dehomogenize x ` G \\<Longrightarrow> xa \\<in> P[X - {x}]", "have \"indets g \\<subseteq> indets g' - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indets g \\<subseteq> indets g' - {x}", "by (simp only: g indets_dehomogenize)"], ["proof (state)\nthis:\n  indets g \\<subseteq> indets g' - {x}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> dehomogenize x ` G \\<Longrightarrow> xa \\<in> P[X - {x}]", "also"], ["proof (state)\nthis:\n  indets g \\<subseteq> indets g' - {x}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> dehomogenize x ` G \\<Longrightarrow> xa \\<in> P[X - {x}]", "from \\<open>indets g' \\<subseteq> X\\<close> subset_refl"], ["proof (chain)\npicking this:\n  indets g' \\<subseteq> X\n  ?A \\<subseteq> ?A", "have \"\\<dots> \\<subseteq> X - {x}\""], ["proof (prove)\nusing this:\n  indets g' \\<subseteq> X\n  ?A \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. indets g' - {x} \\<subseteq> X - {x}", "by (rule Diff_mono)"], ["proof (state)\nthis:\n  indets g' - {x} \\<subseteq> X - {x}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> dehomogenize x ` G \\<Longrightarrow> xa \\<in> P[X - {x}]", "finally"], ["proof (chain)\npicking this:\n  indets g \\<subseteq> X - {x}", "show \"g \\<in> P[X - {x}]\""], ["proof (prove)\nusing this:\n  indets g \\<subseteq> X - {x}\n\ngoal (1 subgoal):\n 1. g \\<in> P[X - {x}]", "by (rule PolysI_alt)"], ["proof (state)\nthis:\n  g \\<in> P[X - {x}]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dehomogenize x ` G \\<subseteq> P[X - {x}]\n\ngoal (2 subgoals):\n 1. dehomogenize x ` G \\<subseteq> punit.dgrad_p_set (varnum (X - {x})) ?m\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) ?m;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "thus \"dehomogenize x ` G \\<subseteq> punit.dgrad_p_set (varnum (X - {x})) 0\""], ["proof (prove)\nusing this:\n  dehomogenize x ` G \\<subseteq> P[X - {x}]\n\ngoal (1 subgoal):\n 1. dehomogenize x ` G \\<subseteq> punit.dgrad_p_set (varnum (X - {x})) 0", "by (simp only: dgrad_p_set_varnum)"], ["proof (state)\nthis:\n  dehomogenize x ` G \\<subseteq> punit.dgrad_p_set (varnum (X - {x})) 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "assume \"p \\<in> ideal (dehomogenize x ` G)\""], ["proof (state)\nthis:\n  p \\<in> ideal (dehomogenize x ` G)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "then"], ["proof (chain)\npicking this:\n  p \\<in> ideal (dehomogenize x ` G)", "obtain G0 q where \"G0 \\<subseteq> dehomogenize x ` G\" and \"finite G0\" and p: \"p = (\\<Sum>g\\<in>G0. q g * g)\""], ["proof (prove)\nusing this:\n  p \\<in> ideal (dehomogenize x ` G)\n\ngoal (1 subgoal):\n 1. (\\<And>G0 q.\n        \\<lbrakk>G0 \\<subseteq> dehomogenize x ` G; finite G0;\n         p = (\\<Sum>g\\<in>G0. q g * g)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ideal.spanE)"], ["proof (state)\nthis:\n  G0 \\<subseteq> dehomogenize x ` G\n  finite G0\n  p = (\\<Sum>g\\<in>G0. q g * g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "from this(1)"], ["proof (chain)\npicking this:\n  G0 \\<subseteq> dehomogenize x ` G", "obtain G' where \"G' \\<subseteq> G\" and G0: \"G0 = dehomogenize x ` G'\"\n    and inj: \"inj_on (dehomogenize x) G'\""], ["proof (prove)\nusing this:\n  G0 \\<subseteq> dehomogenize x ` G\n\ngoal (1 subgoal):\n 1. (\\<And>G'.\n        \\<lbrakk>G' \\<subseteq> G; G0 = dehomogenize x ` G';\n         inj_on (dehomogenize x) G'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule subset_imageE_inj)"], ["proof (state)\nthis:\n  G' \\<subseteq> G\n  G0 = dehomogenize x ` G'\n  inj_on (dehomogenize x) G'\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "define p' where \"p' = (\\<Sum>g\\<in>G'. q (dehomogenize x g) * g)\""], ["proof (state)\nthis:\n  p' = (\\<Sum>g\\<in>G'. q (dehomogenize x g) * g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "have \"p' \\<in> ideal G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<in> ideal G'", "unfolding p'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>g\\<in>G'. q (dehomogenize x g) * g) \\<in> ideal G'", "by (rule ideal.sum_in_spanI)"], ["proof (state)\nthis:\n  p' \\<in> ideal G'\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "also"], ["proof (state)\nthis:\n  p' \\<in> ideal G'\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "from \\<open>G' \\<subseteq> G\\<close>"], ["proof (chain)\npicking this:\n  G' \\<subseteq> G", "have \"\\<dots> \\<subseteq> ideal G\""], ["proof (prove)\nusing this:\n  G' \\<subseteq> G\n\ngoal (1 subgoal):\n 1. ideal G' \\<subseteq> ideal G", "by (rule ideal.span_mono)"], ["proof (state)\nthis:\n  ideal G' \\<subseteq> ideal G\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "finally"], ["proof (chain)\npicking this:\n  p' \\<in> ideal G", "have \"p' \\<in> ideal G\""], ["proof (prove)\nusing this:\n  p' \\<in> ideal G\n\ngoal (1 subgoal):\n 1. p' \\<in> ideal G", "."], ["proof (state)\nthis:\n  p' \\<in> ideal G\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "with assms(5)"], ["proof (chain)\npicking this:\n  ?g5 \\<in> G \\<Longrightarrow> homogeneous ?g5\n  p' \\<in> ideal G", "have \"homogenize x p' \\<in> ideal G\" (is \"?p \\<in> _\")"], ["proof (prove)\nusing this:\n  ?g5 \\<in> G \\<Longrightarrow> homogeneous ?g5\n  p' \\<in> ideal G\n\ngoal (1 subgoal):\n 1. homogenize x p' \\<in> ideal G", "by (rule homogeneous_ideal_homogenize)"], ["proof (state)\nthis:\n  homogenize x p' \\<in> ideal G\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "assume \"p \\<in> punit.dgrad_p_set (varnum (X - {x})) 0\""], ["proof (state)\nthis:\n  p \\<in> punit.dgrad_p_set (varnum (X - {x})) 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "hence \"p \\<in> P[X - {x}]\""], ["proof (prove)\nusing this:\n  p \\<in> punit.dgrad_p_set (varnum (X - {x})) 0\n\ngoal (1 subgoal):\n 1. p \\<in> P[X - {x}]", "by (simp only: dgrad_p_set_varnum)"], ["proof (state)\nthis:\n  p \\<in> P[X - {x}]\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "hence \"indets p \\<subseteq> X - {x}\""], ["proof (prove)\nusing this:\n  p \\<in> P[X - {x}]\n\ngoal (1 subgoal):\n 1. indets p \\<subseteq> X - {x}", "by (rule PolysD)"], ["proof (state)\nthis:\n  indets p \\<subseteq> X - {x}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "hence \"x \\<notin> indets p\""], ["proof (prove)\nusing this:\n  indets p \\<subseteq> X - {x}\n\ngoal (1 subgoal):\n 1. x \\<notin> indets p", "by blast"], ["proof (state)\nthis:\n  x \\<notin> indets p\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "have \"p = dehomogenize x p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = dehomogenize x p", "by (rule sym) (simp add: \\<open>x \\<notin> indets p\\<close>)"], ["proof (state)\nthis:\n  p = dehomogenize x p\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "also"], ["proof (state)\nthis:\n  p = dehomogenize x p\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "from inj"], ["proof (chain)\npicking this:\n  inj_on (dehomogenize x) G'", "have \"\\<dots> = dehomogenize x (\\<Sum>g\\<in>G'. q (dehomogenize x g) * dehomogenize x g)\""], ["proof (prove)\nusing this:\n  inj_on (dehomogenize x) G'\n\ngoal (1 subgoal):\n 1. dehomogenize x p =\n    dehomogenize x (\\<Sum>g\\<in>G'. q (dehomogenize x g) * dehomogenize x g)", "by (simp add: p G0 sum.reindex)"], ["proof (state)\nthis:\n  dehomogenize x p =\n  dehomogenize x (\\<Sum>g\\<in>G'. q (dehomogenize x g) * dehomogenize x g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "also"], ["proof (state)\nthis:\n  dehomogenize x p =\n  dehomogenize x (\\<Sum>g\\<in>G'. q (dehomogenize x g) * dehomogenize x g)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "have \"\\<dots> = dehomogenize x ?p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dehomogenize x\n     (\\<Sum>g\\<in>G'. q (dehomogenize x g) * dehomogenize x g) =\n    dehomogenize x (homogenize x p')", "by (simp add: dehomogenize_sum dehomogenize_times p'_def)"], ["proof (state)\nthis:\n  dehomogenize x (\\<Sum>g\\<in>G'. q (dehomogenize x g) * dehomogenize x g) =\n  dehomogenize x (homogenize x p')\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "finally"], ["proof (chain)\npicking this:\n  p = dehomogenize x (homogenize x p')", "have p: \"p = dehomogenize x ?p\""], ["proof (prove)\nusing this:\n  p = dehomogenize x (homogenize x p')\n\ngoal (1 subgoal):\n 1. p = dehomogenize x (homogenize x p')", "."], ["proof (state)\nthis:\n  p = dehomogenize x (homogenize x p')\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "moreover"], ["proof (state)\nthis:\n  p = dehomogenize x (homogenize x p')\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "assume \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "ultimately"], ["proof (chain)\npicking this:\n  p = dehomogenize x (homogenize x p')\n  p \\<noteq> 0", "have \"?p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p = dehomogenize x (homogenize x p')\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. homogenize x p' \\<noteq> 0", "by (auto simp del: dehomogenize_homogenize)"], ["proof (state)\nthis:\n  homogenize x p' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "with assms(4) \\<open>?p \\<in> ideal G\\<close>"], ["proof (chain)\npicking this:\n  punit.is_Groebner_basis G\n  homogenize x p' \\<in> ideal G\n  homogenize x p' \\<noteq> 0", "obtain g where \"g \\<in> G\" and \"g \\<noteq> 0\" and adds: \"lpp g adds lpp ?p\""], ["proof (prove)\nusing this:\n  punit.is_Groebner_basis G\n  homogenize x p' \\<in> ideal G\n  homogenize x p' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> G; g \\<noteq> 0;\n         lpp g adds lpp (homogenize x p')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule punit.GB_adds_lt[simplified])"], ["proof (state)\nthis:\n  g \\<in> G\n  g \\<noteq> 0\n  lpp g adds lpp (homogenize x p')\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "from this(1)"], ["proof (chain)\npicking this:\n  g \\<in> G", "have \"homogeneous g\""], ["proof (prove)\nusing this:\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. homogeneous g", "by (rule assms(5))"], ["proof (state)\nthis:\n  homogeneous g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> ideal (dehomogenize x ` G);\n        f \\<in> punit.dgrad_p_set (varnum (X - {x})) 0;\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>dehomogenize x ` G.\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "show \"\\<exists>g\\<in>dehomogenize x ` G. g \\<noteq> 0 \\<and> lpp g adds lpp p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>dehomogenize x ` G. g \\<noteq> 0 \\<and> lpp g adds lpp p", "proof (intro bexI conjI notI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> dehomogenize x ` G", "assume \"dehomogenize x g = 0\""], ["proof (state)\nthis:\n  dehomogenize x g = 0\n\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> dehomogenize x ` G", "hence \"g = 0\""], ["proof (prove)\nusing this:\n  dehomogenize x g = 0\n\ngoal (1 subgoal):\n 1. g = 0", "using \\<open>homogeneous g\\<close>"], ["proof (prove)\nusing this:\n  dehomogenize x g = 0\n  homogeneous g\n\ngoal (1 subgoal):\n 1. g = 0", "by (rule dehomogenize_zeroD)"], ["proof (state)\nthis:\n  g = 0\n\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> dehomogenize x ` G", "with \\<open>g \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  g \\<noteq> 0\n  g = 0", "show False"], ["proof (prove)\nusing this:\n  g \\<noteq> 0\n  g = 0\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. lpp (dehomogenize x g) adds lpp p\n 2. dehomogenize x g \\<in> dehomogenize x ` G", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lpp (dehomogenize x g) adds lpp p\n 2. dehomogenize x g \\<in> dehomogenize x ` G", "from assms(1) \\<open>homogeneous g\\<close>"], ["proof (chain)\npicking this:\n  is_hom_ord x\n  homogeneous g", "have \"lpp (dehomogenize x g) = except (lpp g) {x}\""], ["proof (prove)\nusing this:\n  is_hom_ord x\n  homogeneous g\n\ngoal (1 subgoal):\n 1. lpp (dehomogenize x g) = except (lpp g) {x}", "by (rule lp_dehomogenize)"], ["proof (state)\nthis:\n  lpp (dehomogenize x g) = except (lpp g) {x}\n\ngoal (2 subgoals):\n 1. lpp (dehomogenize x g) adds lpp p\n 2. dehomogenize x g \\<in> dehomogenize x ` G", "also"], ["proof (state)\nthis:\n  lpp (dehomogenize x g) = except (lpp g) {x}\n\ngoal (2 subgoals):\n 1. lpp (dehomogenize x g) adds lpp p\n 2. dehomogenize x g \\<in> dehomogenize x ` G", "from adds"], ["proof (chain)\npicking this:\n  lpp g adds lpp (homogenize x p')", "have \"\\<dots> adds except (lpp ?p) {x}\""], ["proof (prove)\nusing this:\n  lpp g adds lpp (homogenize x p')\n\ngoal (1 subgoal):\n 1. except (lpp g) {x} adds except (lpp (homogenize x p')) {x}", "by (simp add: adds_poly_mapping le_fun_def lookup_except)"], ["proof (state)\nthis:\n  except (lpp g) {x} adds except (lpp (homogenize x p')) {x}\n\ngoal (2 subgoals):\n 1. lpp (dehomogenize x g) adds lpp p\n 2. dehomogenize x g \\<in> dehomogenize x ` G", "also"], ["proof (state)\nthis:\n  except (lpp g) {x} adds except (lpp (homogenize x p')) {x}\n\ngoal (2 subgoals):\n 1. lpp (dehomogenize x g) adds lpp p\n 2. dehomogenize x g \\<in> dehomogenize x ` G", "from assms(1) homogeneous_homogenize"], ["proof (chain)\npicking this:\n  is_hom_ord x\n  homogeneous (homogenize ?x ?p)", "have \"\\<dots> = lpp (dehomogenize x ?p)\""], ["proof (prove)\nusing this:\n  is_hom_ord x\n  homogeneous (homogenize ?x ?p)\n\ngoal (1 subgoal):\n 1. except (lpp (homogenize x p')) {x} =\n    lpp (dehomogenize x (homogenize x p'))", "by (rule lp_dehomogenize[symmetric])"], ["proof (state)\nthis:\n  except (lpp (homogenize x p')) {x} =\n  lpp (dehomogenize x (homogenize x p'))\n\ngoal (2 subgoals):\n 1. lpp (dehomogenize x g) adds lpp p\n 2. dehomogenize x g \\<in> dehomogenize x ` G", "finally"], ["proof (chain)\npicking this:\n  lpp (dehomogenize x g) adds lpp (dehomogenize x (homogenize x p'))", "show \"lpp (dehomogenize x g) adds lpp p\""], ["proof (prove)\nusing this:\n  lpp (dehomogenize x g) adds lpp (dehomogenize x (homogenize x p'))\n\ngoal (1 subgoal):\n 1. lpp (dehomogenize x g) adds lpp p", "by (simp only: p)"], ["proof (state)\nthis:\n  lpp (dehomogenize x g) adds lpp p\n\ngoal (1 subgoal):\n 1. dehomogenize x g \\<in> dehomogenize x ` G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dehomogenize x g \\<in> dehomogenize x ` G", "from \\<open>g \\<in> G\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> G", "show \"dehomogenize x g \\<in> dehomogenize x ` G\""], ["proof (prove)\nusing this:\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. dehomogenize x g \\<in> dehomogenize x ` G", "by (rule imageI)"], ["proof (state)\nthis:\n  dehomogenize x g \\<in> dehomogenize x ` G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>g\\<in>dehomogenize x ` G. g \\<noteq> 0 \\<and> lpp g adds lpp p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* pm_powerprod *)"], ["", "context extended_ord_pm_powerprod\nbegin"], ["", "lemma extended_ord_lp:\n  assumes \"None \\<notin> indets p\"\n  shows \"restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)\n 2. p \\<noteq> 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = 0\n\ngoal (1 subgoal):\n 1. restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "by simp"], ["proof (state)\nthis:\n  restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "hence \"extended_ord.lpp p \\<in> keys p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. extended_ord.lpp p \\<in> keys p", "by (rule extended_ord.punit.lt_in_keys)"], ["proof (state)\nthis:\n  extended_ord.lpp p \\<in> keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "hence \"restrict_indets_pp (extended_ord.lpp p) \\<in> restrict_indets_pp ` keys p\""], ["proof (prove)\nusing this:\n  extended_ord.lpp p \\<in> keys p\n\ngoal (1 subgoal):\n 1. restrict_indets_pp (extended_ord.lpp p)\n    \\<in> restrict_indets_pp ` keys p", "by (rule imageI)"], ["proof (state)\nthis:\n  restrict_indets_pp (extended_ord.lpp p) \\<in> restrict_indets_pp ` keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "also"], ["proof (state)\nthis:\n  restrict_indets_pp (extended_ord.lpp p) \\<in> restrict_indets_pp ` keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "from assms"], ["proof (chain)\npicking this:\n  None \\<notin> indets p", "have eq: \"\\<dots> = keys (restrict_indets p)\""], ["proof (prove)\nusing this:\n  None \\<notin> indets p\n\ngoal (1 subgoal):\n 1. restrict_indets_pp ` keys p = keys (restrict_indets p)", "by (rule keys_restrict_indets[symmetric])"], ["proof (state)\nthis:\n  restrict_indets_pp ` keys p = keys (restrict_indets p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "finally"], ["proof (chain)\npicking this:\n  restrict_indets_pp (extended_ord.lpp p) \\<in> keys (restrict_indets p)", "show ?thesis"], ["proof (prove)\nusing this:\n  restrict_indets_pp (extended_ord.lpp p) \\<in> keys (restrict_indets p)\n\ngoal (1 subgoal):\n 1. restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)", "proof (rule punit.lt_eqI_keys[symmetric])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (restrict_indets p) \\<Longrightarrow>\n       u \\<preceq> restrict_indets_pp (extended_ord.lpp p)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (restrict_indets p) \\<Longrightarrow>\n       u \\<preceq> restrict_indets_pp (extended_ord.lpp p)", "assume \"t \\<in> keys (restrict_indets p)\""], ["proof (state)\nthis:\n  t \\<in> keys (restrict_indets p)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (restrict_indets p) \\<Longrightarrow>\n       u \\<preceq> restrict_indets_pp (extended_ord.lpp p)", "then"], ["proof (chain)\npicking this:\n  t \\<in> keys (restrict_indets p)", "obtain s where \"s \\<in> keys p\" and t: \"t = restrict_indets_pp s\""], ["proof (prove)\nusing this:\n  t \\<in> keys (restrict_indets p)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> keys p; t = restrict_indets_pp s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding eq[symmetric]"], ["proof (prove)\nusing this:\n  t \\<in> restrict_indets_pp ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> keys p; t = restrict_indets_pp s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  s \\<in> keys p\n  t = restrict_indets_pp s\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (restrict_indets p) \\<Longrightarrow>\n       u \\<preceq> restrict_indets_pp (extended_ord.lpp p)", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> keys p", "have \"extended_ord s (extended_ord.lpp p)\""], ["proof (prove)\nusing this:\n  s \\<in> keys p\n\ngoal (1 subgoal):\n 1. extended_ord s (extended_ord.lpp p)", "by (rule extended_ord.punit.lt_max_keys)"], ["proof (state)\nthis:\n  extended_ord s (extended_ord.lpp p)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> keys (restrict_indets p) \\<Longrightarrow>\n       u \\<preceq> restrict_indets_pp (extended_ord.lpp p)", "thus \"t \\<preceq> restrict_indets_pp (extended_ord.lpp p)\""], ["proof (prove)\nusing this:\n  extended_ord s (extended_ord.lpp p)\n\ngoal (1 subgoal):\n 1. t \\<preceq> restrict_indets_pp (extended_ord.lpp p)", "by (auto simp: t extended_ord_def)"], ["proof (state)\nthis:\n  t \\<preceq> restrict_indets_pp (extended_ord.lpp p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  restrict_indets_pp (extended_ord.lpp p) = lpp (restrict_indets p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma restrict_indets_reduced_GB:\n  assumes \"finite X\" and \"F \\<subseteq> P[X]\"\n  shows \"punit.is_Groebner_basis (restrict_indets ` extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\"\n          (is ?thesis1)\n    and \"ideal (restrict_indets ` extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) = ideal F\"\n          (is ?thesis2)\n    and \"restrict_indets ` extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F) \\<subseteq> P[X]\"\n          (is ?thesis3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB\n       (homogenize None ` extend_indets ` F)) &&&\n    ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F &&&\n    restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[X]", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n 2. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F\n 3. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[X]", "let ?F = \"homogenize None ` extend_indets ` F\""], ["proof (state)\ngoal (3 subgoals):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n 2. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F\n 3. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[X]", "let ?G = \"extended_ord.punit.reduced_GB ?F\""], ["proof (state)\ngoal (3 subgoals):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n 2. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F\n 3. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[X]", "from assms(1)"], ["proof (chain)\npicking this:\n  finite X", "have \"finite (insert None (Some ` X))\""], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. finite (insert None (Some ` X))", "by simp"], ["proof (state)\nthis:\n  finite (insert None (Some ` X))\n\ngoal (3 subgoals):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n 2. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F\n 3. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[X]", "moreover"], ["proof (state)\nthis:\n  finite (insert None (Some ` X))\n\ngoal (3 subgoals):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n 2. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F\n 3. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[X]", "have \"?F \\<subseteq> P[insert None (Some ` X)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. homogenize None ` extend_indets ` F\n    \\<subseteq> P[insert None (Some ` X)]", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "fix hf"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "assume \"hf \\<in> ?F\""], ["proof (state)\nthis:\n  hf \\<in> homogenize None ` extend_indets ` F\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "then"], ["proof (chain)\npicking this:\n  hf \\<in> homogenize None ` extend_indets ` F", "obtain f where \"f \\<in> F\" and hf: \"hf = homogenize None (extend_indets f)\""], ["proof (prove)\nusing this:\n  hf \\<in> homogenize None ` extend_indets ` F\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; hf = homogenize None (extend_indets f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> F\n  hf = homogenize None (extend_indets f)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "from this(1) assms(2)"], ["proof (chain)\npicking this:\n  f \\<in> F\n  F \\<subseteq> P[X]", "have \"f \\<in> P[X]\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  F \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. f \\<in> P[X]", ".."], ["proof (state)\nthis:\n  f \\<in> P[X]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "hence \"indets f \\<subseteq> X\""], ["proof (prove)\nusing this:\n  f \\<in> P[X]\n\ngoal (1 subgoal):\n 1. indets f \\<subseteq> X", "by (rule PolysD)"], ["proof (state)\nthis:\n  indets f \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "hence \"Some ` indets f \\<subseteq> Some ` X\""], ["proof (prove)\nusing this:\n  indets f \\<subseteq> X\n\ngoal (1 subgoal):\n 1. Some ` indets f \\<subseteq> Some ` X", "by (rule image_mono)"], ["proof (state)\nthis:\n  Some ` indets f \\<subseteq> Some ` X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "with indets_extend_indets[of f]"], ["proof (chain)\npicking this:\n  indets (extend_indets f) = Some ` indets f\n  Some ` indets f \\<subseteq> Some ` X", "have \"indets (extend_indets f) \\<subseteq> Some ` X\""], ["proof (prove)\nusing this:\n  indets (extend_indets f) = Some ` indets f\n  Some ` indets f \\<subseteq> Some ` X\n\ngoal (1 subgoal):\n 1. indets (extend_indets f) \\<subseteq> Some ` X", "by blast"], ["proof (state)\nthis:\n  indets (extend_indets f) \\<subseteq> Some ` X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "hence \"insert None (indets (extend_indets f)) \\<subseteq> insert None (Some ` X)\""], ["proof (prove)\nusing this:\n  indets (extend_indets f) \\<subseteq> Some ` X\n\ngoal (1 subgoal):\n 1. insert None (indets (extend_indets f))\n    \\<subseteq> insert None (Some ` X)", "by blast"], ["proof (state)\nthis:\n  insert None (indets (extend_indets f)) \\<subseteq> insert None (Some ` X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "with indets_homogenize_subset"], ["proof (chain)\npicking this:\n  indets (homogenize ?x ?p) \\<subseteq> insert ?x (indets ?p)\n  insert None (indets (extend_indets f)) \\<subseteq> insert None (Some ` X)", "have \"indets hf \\<subseteq> insert None (Some ` X)\""], ["proof (prove)\nusing this:\n  indets (homogenize ?x ?p) \\<subseteq> insert ?x (indets ?p)\n  insert None (indets (extend_indets f)) \\<subseteq> insert None (Some ` X)\n\ngoal (1 subgoal):\n 1. indets hf \\<subseteq> insert None (Some ` X)", "unfolding hf"], ["proof (prove)\nusing this:\n  indets (homogenize ?x ?p) \\<subseteq> insert ?x (indets ?p)\n  insert None (indets (extend_indets f)) \\<subseteq> insert None (Some ` X)\n\ngoal (1 subgoal):\n 1. indets (homogenize None (extend_indets f))\n    \\<subseteq> insert None (Some ` X)", "by (rule subset_trans)"], ["proof (state)\nthis:\n  indets hf \\<subseteq> insert None (Some ` X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       x \\<in> P[insert None (Some ` X)]", "thus \"hf \\<in> P[insert None (Some ` X)]\""], ["proof (prove)\nusing this:\n  indets hf \\<subseteq> insert None (Some ` X)\n\ngoal (1 subgoal):\n 1. hf \\<in> P[insert None (Some ` X)]", "by (rule PolysI_alt)"], ["proof (state)\nthis:\n  hf \\<in> P[insert None (Some ` X)]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  homogenize None ` extend_indets ` F \\<subseteq> P[insert None (Some ` X)]\n\ngoal (3 subgoals):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n 2. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F\n 3. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[X]", "ultimately"], ["proof (chain)\npicking this:\n  finite (insert None (Some ` X))\n  homogenize None ` extend_indets ` F \\<subseteq> P[insert None (Some ` X)]", "have G_sub: \"?G \\<subseteq> P[insert None (Some ` X)]\"\n    and ideal_G: \"ideal ?G = ideal ?F\"\n    and GB_G: \"extended_ord.punit.is_reduced_GB ?G\""], ["proof (prove)\nusing this:\n  finite (insert None (Some ` X))\n  homogenize None ` extend_indets ` F \\<subseteq> P[insert None (Some ` X)]\n\ngoal (1 subgoal):\n 1. extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[insert None (Some ` X)] &&&\n    ideal\n     (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal (homogenize None ` extend_indets ` F) &&&\n    extended_ord.punit.is_reduced_GB\n     (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))", "by (rule extended_ord.reduced_GB_Polys, rule extended_ord.reduced_GB_ideal_Polys,\n        rule extended_ord.reduced_GB_is_reduced_GB_Polys)"], ["proof (state)\nthis:\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n  \\<subseteq> P[insert None (Some ` X)]\n  ideal\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n  ideal (homogenize None ` extend_indets ` F)\n  extended_ord.punit.is_reduced_GB\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n\ngoal (3 subgoals):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n 2. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F\n 3. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[X]", "show ?thesis3"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> P[X]", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> restrict_indets `\n               extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       x \\<in> P[X]", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> restrict_indets `\n               extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       x \\<in> P[X]", "assume \"g \\<in> restrict_indets ` ?G\""], ["proof (state)\nthis:\n  g \\<in> restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> restrict_indets `\n               extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       x \\<in> P[X]", "then"], ["proof (chain)\npicking this:\n  g \\<in> restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "obtain g' where \"g' \\<in> ?G\" and g: \"g = restrict_indets g'\""], ["proof (prove)\nusing this:\n  g \\<in> restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<lbrakk>g' \\<in> extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F);\n         g = restrict_indets g'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  g' \\<in> extended_ord.punit.reduced_GB\n            (homogenize None ` extend_indets ` F)\n  g = restrict_indets g'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> restrict_indets `\n               extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       x \\<in> P[X]", "from this(1) G_sub"], ["proof (chain)\npicking this:\n  g' \\<in> extended_ord.punit.reduced_GB\n            (homogenize None ` extend_indets ` F)\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n  \\<subseteq> P[insert None (Some ` X)]", "have \"g' \\<in> P[insert None (Some ` X)]\""], ["proof (prove)\nusing this:\n  g' \\<in> extended_ord.punit.reduced_GB\n            (homogenize None ` extend_indets ` F)\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n  \\<subseteq> P[insert None (Some ` X)]\n\ngoal (1 subgoal):\n 1. g' \\<in> P[insert None (Some ` X)]", ".."], ["proof (state)\nthis:\n  g' \\<in> P[insert None (Some ` X)]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> restrict_indets `\n               extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       x \\<in> P[X]", "hence \"indets g' \\<subseteq> insert None (Some ` X)\""], ["proof (prove)\nusing this:\n  g' \\<in> P[insert None (Some ` X)]\n\ngoal (1 subgoal):\n 1. indets g' \\<subseteq> insert None (Some ` X)", "by (rule PolysD)"], ["proof (state)\nthis:\n  indets g' \\<subseteq> insert None (Some ` X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> restrict_indets `\n               extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       x \\<in> P[X]", "have \"indets g \\<subseteq> the ` (indets g' - {None})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indets g \\<subseteq> the ` (indets g' - {None})", "by (simp only: g indets_restrict_indets_subset)"], ["proof (state)\nthis:\n  indets g \\<subseteq> the ` (indets g' - {None})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> restrict_indets `\n               extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       x \\<in> P[X]", "also"], ["proof (state)\nthis:\n  indets g \\<subseteq> the ` (indets g' - {None})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> restrict_indets `\n               extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       x \\<in> P[X]", "from \\<open>indets g' \\<subseteq> insert None (Some ` X)\\<close>"], ["proof (chain)\npicking this:\n  indets g' \\<subseteq> insert None (Some ` X)", "have \"\\<dots> \\<subseteq> X\""], ["proof (prove)\nusing this:\n  indets g' \\<subseteq> insert None (Some ` X)\n\ngoal (1 subgoal):\n 1. the ` (indets g' - {None}) \\<subseteq> X", "by auto"], ["proof (state)\nthis:\n  the ` (indets g' - {None}) \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> restrict_indets `\n               extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       x \\<in> P[X]", "finally"], ["proof (chain)\npicking this:\n  indets g \\<subseteq> X", "show \"g \\<in> P[X]\""], ["proof (prove)\nusing this:\n  indets g \\<subseteq> X\n\ngoal (1 subgoal):\n 1. g \\<in> P[X]", "by (rule PolysI_alt)"], ["proof (state)\nthis:\n  g \\<in> P[X]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n  \\<subseteq> P[X]\n\ngoal (2 subgoals):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n 2. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F", "from dickson_grading_varnum"], ["proof (chain)\npicking this:\n  finite ?X \\<Longrightarrow> dickson_grading (varnum ?X)", "show ?thesis1"], ["proof (prove)\nusing this:\n  finite ?X \\<Longrightarrow> dickson_grading (varnum ?X)\n\ngoal (1 subgoal):\n 1. punit.is_Groebner_basis\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))", "proof (rule punit.isGB_I_adds_lt[simplified])"], ["proof (state)\ngoal (3 subgoals):\n 1. finite ?X7\n 2. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> punit.dgrad_p_set (varnum ?X7) ?m\n 3. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum ?X7) ?m; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "from \\<open>?thesis3\\<close>"], ["proof (chain)\npicking this:\n  restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n  \\<subseteq> P[X]", "show \"restrict_indets ` ?G \\<subseteq> punit.dgrad_p_set (varnum X) 0\""], ["proof (prove)\nusing this:\n  restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n  \\<subseteq> P[X]\n\ngoal (1 subgoal):\n 1. restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n    \\<subseteq> punit.dgrad_p_set (varnum X) 0", "by (simp only: dgrad_p_set_varnum)"], ["proof (state)\nthis:\n  restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n  \\<subseteq> punit.dgrad_p_set (varnum X) 0\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "fix p :: \"('a \\<Rightarrow>\\<^sub>0 nat) \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "assume \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "assume \"p \\<in> ideal (restrict_indets ` ?G)\""], ["proof (state)\nthis:\n  p \\<in> ideal\n           (restrict_indets `\n            extended_ord.punit.reduced_GB\n             (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "hence \"extend_indets p \\<in> extend_indets ` ideal (restrict_indets ` ?G)\""], ["proof (prove)\nusing this:\n  p \\<in> ideal\n           (restrict_indets `\n            extended_ord.punit.reduced_GB\n             (homogenize None ` extend_indets ` F))\n\ngoal (1 subgoal):\n 1. extend_indets p\n    \\<in> extend_indets `\n          ideal\n           (restrict_indets `\n            extended_ord.punit.reduced_GB\n             (homogenize None ` extend_indets ` F))", "by (rule imageI)"], ["proof (state)\nthis:\n  extend_indets p\n  \\<in> extend_indets `\n        ideal\n         (restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "also"], ["proof (state)\nthis:\n  extend_indets p\n  \\<in> extend_indets `\n        ideal\n         (restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "have \"\\<dots> \\<subseteq> ideal (extend_indets ` restrict_indets ` ?G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extend_indets `\n    ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n    \\<subseteq> ideal\n                 (extend_indets `\n                  restrict_indets `\n                  extended_ord.punit.reduced_GB\n                   (homogenize None ` extend_indets ` F))", "by (fact extend_indets_ideal_subset)"], ["proof (state)\nthis:\n  extend_indets `\n  ideal\n   (restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n  \\<subseteq> ideal\n               (extend_indets `\n                restrict_indets `\n                extended_ord.punit.reduced_GB\n                 (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "also"], ["proof (state)\nthis:\n  extend_indets `\n  ideal\n   (restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n  \\<subseteq> ideal\n               (extend_indets `\n                restrict_indets `\n                extended_ord.punit.reduced_GB\n                 (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "have \"\\<dots> = ideal (dehomogenize None ` ?G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal\n     (extend_indets `\n      restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal\n     (dehomogenize None `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))", "by (simp only: image_comp extend_indets_comp_restrict_indets)"], ["proof (state)\nthis:\n  ideal\n   (extend_indets `\n    restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n  ideal\n   (dehomogenize None `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "finally"], ["proof (chain)\npicking this:\n  extend_indets p\n  \\<in> ideal\n         (dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F))", "have p_in_ideal: \"extend_indets p \\<in> ideal (dehomogenize None ` ?G)\""], ["proof (prove)\nusing this:\n  extend_indets p\n  \\<in> ideal\n         (dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F))\n\ngoal (1 subgoal):\n 1. extend_indets p\n    \\<in> ideal\n           (dehomogenize None `\n            extended_ord.punit.reduced_GB\n             (homogenize None ` extend_indets ` F))", "."], ["proof (state)\nthis:\n  extend_indets p\n  \\<in> ideal\n         (dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "assume \"p \\<in> punit.dgrad_p_set (varnum X) 0\""], ["proof (state)\nthis:\n  p \\<in> punit.dgrad_p_set (varnum X) 0\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "hence \"p \\<in> P[X]\""], ["proof (prove)\nusing this:\n  p \\<in> punit.dgrad_p_set (varnum X) 0\n\ngoal (1 subgoal):\n 1. p \\<in> P[X]", "by (simp only: dgrad_p_set_varnum)"], ["proof (state)\nthis:\n  p \\<in> P[X]\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "have \"extended_ord.punit.is_Groebner_basis (dehomogenize None ` ?G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extended_ord.punit.is_Groebner_basis\n     (dehomogenize None `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))", "using extended_ord_is_hom_ord \\<open>finite (insert None (Some ` X))\\<close> G_sub"], ["proof (prove)\nusing this:\n  extended_ord.is_hom_ord None\n  finite (insert None (Some ` X))\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n  \\<subseteq> P[insert None (Some ` X)]\n\ngoal (1 subgoal):\n 1. extended_ord.punit.is_Groebner_basis\n     (dehomogenize None `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))", "proof (rule extended_ord.isGB_dehomogenize)"], ["proof (state)\ngoal (2 subgoals):\n 1. extended_ord.punit.is_Groebner_basis\n     (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n 2. \\<And>g.\n       g \\<in> extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       homogeneous g", "from GB_G"], ["proof (chain)\npicking this:\n  extended_ord.punit.is_reduced_GB\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))", "show \"extended_ord.punit.is_Groebner_basis ?G\""], ["proof (prove)\nusing this:\n  extended_ord.punit.is_reduced_GB\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n\ngoal (1 subgoal):\n 1. extended_ord.punit.is_Groebner_basis\n     (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))", "by (rule extended_ord.punit.reduced_GB_D1)"], ["proof (state)\nthis:\n  extended_ord.punit.is_Groebner_basis\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n\ngoal (1 subgoal):\n 1. \\<And>g.\n       g \\<in> extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       homogeneous g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g.\n       g \\<in> extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       homogeneous g", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g.\n       g \\<in> extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       homogeneous g", "assume \"g \\<in> ?G\""], ["proof (state)\nthis:\n  g \\<in> extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)\n\ngoal (1 subgoal):\n 1. \\<And>g.\n       g \\<in> extended_ord.punit.reduced_GB\n                (homogenize None ` extend_indets ` F) \\<Longrightarrow>\n       homogeneous g", "with _ GB_G ideal_G"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  extended_ord.punit.is_reduced_GB\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n  ideal\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n  ideal (homogenize None ` extend_indets ` F)\n  g \\<in> extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "show \"homogeneous g\""], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  extended_ord.punit.is_reduced_GB\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n  ideal\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n  ideal (homogenize None ` extend_indets ` F)\n  g \\<in> extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)\n\ngoal (1 subgoal):\n 1. homogeneous g", "proof (rule extended_ord.is_reduced_GB_homogeneous)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       homogeneous f", "fix hf"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       homogeneous f", "assume \"hf \\<in> ?F\""], ["proof (state)\nthis:\n  hf \\<in> homogenize None ` extend_indets ` F\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       homogeneous f", "then"], ["proof (chain)\npicking this:\n  hf \\<in> homogenize None ` extend_indets ` F", "obtain f where \"hf = homogenize None f\""], ["proof (prove)\nusing this:\n  hf \\<in> homogenize None ` extend_indets ` F\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        hf = homogenize None f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  hf = homogenize None f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> homogenize None ` extend_indets ` F \\<Longrightarrow>\n       homogeneous f", "thus \"homogeneous hf\""], ["proof (prove)\nusing this:\n  hf = homogenize None f\n\ngoal (1 subgoal):\n 1. homogeneous hf", "by (simp only: homogeneous_homogenize)"], ["proof (state)\nthis:\n  homogeneous hf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  homogeneous g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  extended_ord.punit.is_Groebner_basis\n   (dehomogenize None `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "moreover"], ["proof (state)\nthis:\n  extended_ord.punit.is_Groebner_basis\n   (dehomogenize None `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "note p_in_ideal"], ["proof (state)\nthis:\n  extend_indets p\n  \\<in> ideal\n         (dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "moreover"], ["proof (state)\nthis:\n  extend_indets p\n  \\<in> ideal\n         (dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F))\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"extend_indets p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. extend_indets p \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  extend_indets p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "ultimately"], ["proof (chain)\npicking this:\n  extended_ord.punit.is_Groebner_basis\n   (dehomogenize None `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n  extend_indets p\n  \\<in> ideal\n         (dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F))\n  extend_indets p \\<noteq> 0", "obtain g where g_in: \"g \\<in> dehomogenize None ` ?G\" and \"g \\<noteq> 0\"\n      and adds: \"extended_ord.lpp g adds extended_ord.lpp (extend_indets p)\""], ["proof (prove)\nusing this:\n  extended_ord.punit.is_Groebner_basis\n   (dehomogenize None `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n  extend_indets p\n  \\<in> ideal\n         (dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F))\n  extend_indets p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> dehomogenize None `\n                         extended_ord.punit.reduced_GB\n                          (homogenize None ` extend_indets ` F);\n         g \\<noteq> 0;\n         extended_ord.lpp g adds extended_ord.lpp (extend_indets p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule extended_ord.punit.GB_adds_lt[simplified])"], ["proof (state)\nthis:\n  g \\<in> dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)\n  g \\<noteq> 0\n  extended_ord.lpp g adds extended_ord.lpp (extend_indets p)\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "have \"None \\<notin> indets g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<notin> indets g", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<in> indets g \\<Longrightarrow> False", "assume \"None \\<in> indets g\""], ["proof (state)\nthis:\n  None \\<in> indets g\n\ngoal (1 subgoal):\n 1. None \\<in> indets g \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  None \\<in> indets g\n\ngoal (1 subgoal):\n 1. None \\<in> indets g \\<Longrightarrow> False", "from g_in"], ["proof (chain)\npicking this:\n  g \\<in> dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "obtain g0 where \"g = dehomogenize None g0\""], ["proof (prove)\nusing this:\n  g \\<in> dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)\n\ngoal (1 subgoal):\n 1. (\\<And>g0.\n        g = dehomogenize None g0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  g = dehomogenize None g0\n\ngoal (1 subgoal):\n 1. None \\<in> indets g \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  None \\<in> indets g\n  g = dehomogenize None g0", "show False"], ["proof (prove)\nusing this:\n  None \\<in> indets g\n  g = dehomogenize None g0\n\ngoal (1 subgoal):\n 1. False", "using indets_dehomogenize[of None g0]"], ["proof (prove)\nusing this:\n  None \\<in> indets g\n  g = dehomogenize None g0\n  indets (dehomogenize None g0) \\<subseteq> indets g0 - {None}\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  None \\<notin> indets g\n\ngoal (2 subgoals):\n 1. finite X\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> ideal\n                         (restrict_indets `\n                          extended_ord.punit.reduced_GB\n                           (homogenize None ` extend_indets ` F));\n        f \\<in> punit.dgrad_p_set (varnum X) 0; f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F).\n                            g \\<noteq> 0 \\<and> lpp g adds lpp f", "show \"\\<exists>g\\<in>restrict_indets ` ?G. g \\<noteq> 0 \\<and> lpp g adds lpp p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>restrict_indets `\n                   extended_ord.punit.reduced_GB\n                    (homogenize None ` extend_indets ` F).\n       g \\<noteq> 0 \\<and> lpp g adds lpp p", "proof (intro bexI conjI notI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> restrict_indets `\n             extended_ord.punit.reduced_GB\n              (homogenize None ` extend_indets ` F)", "have \"lpp (restrict_indets g) = restrict_indets_pp (extended_ord.lpp g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lpp (restrict_indets g) = restrict_indets_pp (extended_ord.lpp g)", "by (rule sym, intro extended_ord_lp \\<open>None \\<notin> indets g\\<close>)"], ["proof (state)\nthis:\n  lpp (restrict_indets g) = restrict_indets_pp (extended_ord.lpp g)\n\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> restrict_indets `\n             extended_ord.punit.reduced_GB\n              (homogenize None ` extend_indets ` F)", "also"], ["proof (state)\nthis:\n  lpp (restrict_indets g) = restrict_indets_pp (extended_ord.lpp g)\n\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> restrict_indets `\n             extended_ord.punit.reduced_GB\n              (homogenize None ` extend_indets ` F)", "from adds"], ["proof (chain)\npicking this:\n  extended_ord.lpp g adds extended_ord.lpp (extend_indets p)", "have \"\\<dots> adds restrict_indets_pp (extended_ord.lpp (extend_indets p))\""], ["proof (prove)\nusing this:\n  extended_ord.lpp g adds extended_ord.lpp (extend_indets p)\n\ngoal (1 subgoal):\n 1. restrict_indets_pp (extended_ord.lpp g) adds\n    restrict_indets_pp (extended_ord.lpp (extend_indets p))", "by (simp add: adds_poly_mapping le_fun_def lookup_restrict_indets_pp)"], ["proof (state)\nthis:\n  restrict_indets_pp (extended_ord.lpp g) adds\n  restrict_indets_pp (extended_ord.lpp (extend_indets p))\n\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> restrict_indets `\n             extended_ord.punit.reduced_GB\n              (homogenize None ` extend_indets ` F)", "also"], ["proof (state)\nthis:\n  restrict_indets_pp (extended_ord.lpp g) adds\n  restrict_indets_pp (extended_ord.lpp (extend_indets p))\n\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> restrict_indets `\n             extended_ord.punit.reduced_GB\n              (homogenize None ` extend_indets ` F)", "have \"\\<dots> = lpp (restrict_indets (extend_indets p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_indets_pp (extended_ord.lpp (extend_indets p)) =\n    lpp (restrict_indets (extend_indets p))", "proof (intro extended_ord_lp notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. None \\<in> indets (extend_indets p) \\<Longrightarrow> False", "assume \"None \\<in> indets (extend_indets p)\""], ["proof (state)\nthis:\n  None \\<in> indets (extend_indets p)\n\ngoal (1 subgoal):\n 1. None \\<in> indets (extend_indets p) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  None \\<in> indets (extend_indets p)\n\ngoal (1 subgoal):\n 1. False", "by (simp add: indets_extend_indets)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  restrict_indets_pp (extended_ord.lpp (extend_indets p)) =\n  lpp (restrict_indets (extend_indets p))\n\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> restrict_indets `\n             extended_ord.punit.reduced_GB\n              (homogenize None ` extend_indets ` F)", "also"], ["proof (state)\nthis:\n  restrict_indets_pp (extended_ord.lpp (extend_indets p)) =\n  lpp (restrict_indets (extend_indets p))\n\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> restrict_indets `\n             extended_ord.punit.reduced_GB\n              (homogenize None ` extend_indets ` F)", "have \"\\<dots> = lpp p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lpp (restrict_indets (extend_indets p)) = lpp p", "by simp"], ["proof (state)\nthis:\n  lpp (restrict_indets (extend_indets p)) = lpp p\n\ngoal (3 subgoals):\n 1. ?g = 0 \\<Longrightarrow> False\n 2. lpp ?g adds lpp p\n 3. ?g \\<in> restrict_indets `\n             extended_ord.punit.reduced_GB\n              (homogenize None ` extend_indets ` F)", "finally"], ["proof (chain)\npicking this:\n  lpp (restrict_indets g) adds lpp p", "show \"lpp (restrict_indets g) adds lpp p\""], ["proof (prove)\nusing this:\n  lpp (restrict_indets g) adds lpp p\n\ngoal (1 subgoal):\n 1. lpp (restrict_indets g) adds lpp p", "."], ["proof (state)\nthis:\n  lpp (restrict_indets g) adds lpp p\n\ngoal (2 subgoals):\n 1. restrict_indets g = 0 \\<Longrightarrow> False\n 2. restrict_indets g\n    \\<in> restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. restrict_indets g = 0 \\<Longrightarrow> False\n 2. restrict_indets g\n    \\<in> restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "from g_in"], ["proof (chain)\npicking this:\n  g \\<in> dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "have \"restrict_indets g \\<in> restrict_indets ` dehomogenize None ` ?G\""], ["proof (prove)\nusing this:\n  g \\<in> dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)\n\ngoal (1 subgoal):\n 1. restrict_indets g\n    \\<in> restrict_indets `\n          dehomogenize None `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "by (rule imageI)"], ["proof (state)\nthis:\n  restrict_indets g\n  \\<in> restrict_indets `\n        dehomogenize None `\n        extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n\ngoal (2 subgoals):\n 1. restrict_indets g = 0 \\<Longrightarrow> False\n 2. restrict_indets g\n    \\<in> restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "also"], ["proof (state)\nthis:\n  restrict_indets g\n  \\<in> restrict_indets `\n        dehomogenize None `\n        extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n\ngoal (2 subgoals):\n 1. restrict_indets g = 0 \\<Longrightarrow> False\n 2. restrict_indets g\n    \\<in> restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "have \"\\<dots> = restrict_indets ` ?G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_indets `\n    dehomogenize None `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F) =\n    restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)", "by (simp only: image_comp restrict_indets_comp_dehomogenize)"], ["proof (state)\nthis:\n  restrict_indets `\n  dehomogenize None `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F) =\n  restrict_indets `\n  extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n\ngoal (2 subgoals):\n 1. restrict_indets g = 0 \\<Longrightarrow> False\n 2. restrict_indets g\n    \\<in> restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "finally"], ["proof (chain)\npicking this:\n  restrict_indets g\n  \\<in> restrict_indets `\n        extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)", "show \"restrict_indets g \\<in> restrict_indets ` ?G\""], ["proof (prove)\nusing this:\n  restrict_indets g\n  \\<in> restrict_indets `\n        extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n\ngoal (1 subgoal):\n 1. restrict_indets g\n    \\<in> restrict_indets `\n          extended_ord.punit.reduced_GB\n           (homogenize None ` extend_indets ` F)", "."], ["proof (state)\nthis:\n  restrict_indets g\n  \\<in> restrict_indets `\n        extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)\n\ngoal (1 subgoal):\n 1. restrict_indets g = 0 \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. restrict_indets g = 0 \\<Longrightarrow> False", "assume \"restrict_indets g = 0\""], ["proof (state)\nthis:\n  restrict_indets g = 0\n\ngoal (1 subgoal):\n 1. restrict_indets g = 0 \\<Longrightarrow> False", "with \\<open>None \\<notin> indets g\\<close> extend_restrict_indets"], ["proof (chain)\npicking this:\n  None \\<notin> indets g\n  None \\<notin> indets ?p \\<Longrightarrow>\n  extend_indets (restrict_indets ?p) = ?p\n  restrict_indets g = 0", "have \"g = 0\""], ["proof (prove)\nusing this:\n  None \\<notin> indets g\n  None \\<notin> indets ?p \\<Longrightarrow>\n  extend_indets (restrict_indets ?p) = ?p\n  restrict_indets g = 0\n\ngoal (1 subgoal):\n 1. g = 0", "by fastforce"], ["proof (state)\nthis:\n  g = 0\n\ngoal (1 subgoal):\n 1. restrict_indets g = 0 \\<Longrightarrow> False", "with \\<open>g \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  g \\<noteq> 0\n  g = 0", "show False"], ["proof (prove)\nusing this:\n  g \\<noteq> 0\n  g = 0\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>g\\<in>restrict_indets `\n                 extended_ord.punit.reduced_GB\n                  (homogenize None ` extend_indets ` F).\n     g \\<noteq> 0 \\<and> lpp g adds lpp p\n\ngoal (1 subgoal):\n 1. finite X", "qed (fact assms(1))"], ["proof (state)\nthis:\n  punit.is_Groebner_basis\n   (restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F))\n\ngoal (1 subgoal):\n 1. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F", "from ideal_G"], ["proof (chain)\npicking this:\n  ideal\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n  ideal (homogenize None ` extend_indets ` F)", "show ?thesis2"], ["proof (prove)\nusing this:\n  ideal\n   (extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n  ideal (homogenize None ` extend_indets ` F)\n\ngoal (1 subgoal):\n 1. ideal\n     (restrict_indets `\n      extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n    ideal F", "by (rule ideal_restrict_indets)"], ["proof (state)\nthis:\n  ideal\n   (restrict_indets `\n    extended_ord.punit.reduced_GB (homogenize None ` extend_indets ` F)) =\n  ideal F\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "(* theory *)"]]}