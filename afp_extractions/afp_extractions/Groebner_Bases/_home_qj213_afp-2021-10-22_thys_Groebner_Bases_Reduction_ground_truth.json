{"file_name": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases/Reduction.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases", "problem_names": ["lemma red_setI:\n  assumes \"f \\<in> F\" and a: \"red_single p q f t\"\n  shows \"red F p q\"", "lemma red_setE:\n  assumes \"red F p q\"\n  obtains f and t where \"f \\<in> F\" and \"red_single p q f t\"", "lemma red_empty: \"\\<not> red {} p q\"", "lemma red_singleton_zero: \"\\<not> red {0} p q\"", "lemma red_union: \"red (F \\<union> G) p q = (red F p q \\<or> red G p q)\"", "lemma red_unionI1:\n  assumes \"red F p q\"\n  shows \"red (F \\<union> G) p q\"", "lemma red_unionI2:\n  assumes \"red G p q\"\n  shows \"red (F \\<union> G) p q\"", "lemma red_subset:\n  assumes \"red G p q\" and \"G \\<subseteq> F\"\n  shows \"red F p q\"", "lemma red_union_singleton_zero: \"red (F \\<union> {0}) = red F\"", "lemma red_minus_singleton_zero: \"red (F - {0}) = red F\"", "lemma red_rtrancl_subset:\n  assumes major: \"(red G)\\<^sup>*\\<^sup>* p q\" and \"G \\<subseteq> F\"\n  shows \"(red F)\\<^sup>*\\<^sup>* p q\"", "lemma red_singleton: \"red {f} p q \\<longleftrightarrow> (\\<exists>t. red_single p q f t)\"", "lemma red_single_lookup:\n  assumes \"red_single p q f t\"\n  shows \"lookup q (t \\<oplus> lt f) = 0\"", "lemma red_single_higher:\n  assumes \"red_single p q f t\"\n  shows \"higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)\"", "lemma red_single_ord:\n  assumes \"red_single p q f t\"\n  shows \"q \\<prec>\\<^sub>p p\"", "lemma red_single_nonzero1:\n  assumes \"red_single p q f t\"\n  shows \"p \\<noteq> 0\"", "lemma red_single_nonzero2:\n  assumes \"red_single p q f t\"\n  shows \"f \\<noteq> 0\"", "lemma red_single_self:\n  assumes \"p \\<noteq> 0\"\n  shows \"red_single p 0 p 0\"", "lemma red_single_trans:\n  assumes \"red_single p p0 f t\" and \"lt g adds\\<^sub>t lt f\" and \"g \\<noteq> 0\"\n  obtains p1 where \"red_single p p1 g (t + (lp f - lp g))\"", "lemma red_nonzero:\n  assumes \"red F p q\"\n  shows \"p \\<noteq> 0\"", "lemma red_self:\n  assumes \"p \\<noteq> 0\"\n  shows \"red {p} p 0\"", "lemma red_ord:\n  assumes \"red F p q\"\n  shows \"q \\<prec>\\<^sub>p p\"", "lemma red_indI1:\n  assumes \"f \\<in> F\" and \"f \\<noteq> 0\" and \"p \\<noteq> 0\" and adds: \"lt f adds\\<^sub>t lt p\"\n  shows \"red F p (p - monom_mult (lc p / lc f) (lp p - lp f) f)\"", "lemma red_indI2:\n  assumes \"p \\<noteq> 0\" and r: \"red F (tail p) q\"\n  shows \"red F p (q + monomial (lc p) (lt p))\"", "lemma red_indE:\n  assumes \"red F p q\"\n  shows \"(\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p \\<and>\n            (q = p - monom_mult (lc p / lc f) (lp p - lp f) f)) \\<or>\n            red F (tail p) (q - monomial (lc p) (lt p))\"", "lemma is_redI:\n  assumes \"red F a b\"\n  shows \"is_red F a\"", "lemma is_redE:\n  assumes \"is_red F a\"\n  obtains b where \"red F a b\"", "lemma is_red_alt:\n  shows \"is_red F a \\<longleftrightarrow> (\\<exists>b. red F a b)\"", "lemma is_red_singletonI:\n  assumes \"is_red F q\"\n  obtains p where \"p \\<in> F\" and \"is_red {p} q\"", "lemma is_red_singletonD:\n  assumes \"is_red {p} q\" and \"p \\<in> F\"\n  shows \"is_red F q\"", "lemma is_red_singleton_trans:\n  assumes \"is_red {f} p\" and \"lt g adds\\<^sub>t lt f\" and \"g \\<noteq> 0\"\n  shows \"is_red {g} p\"", "lemma is_red_singleton_not_0:\n  assumes \"is_red {f} p\"\n  shows \"f \\<noteq> 0\"", "lemma irred_0:\n  shows \"\\<not> is_red F 0\"", "lemma is_red_indI1:\n  assumes \"f \\<in> F\" and \"f \\<noteq> 0\" and \"p \\<noteq> 0\" and \"lt f adds\\<^sub>t lt p\"\n  shows \"is_red F p\"", "lemma is_red_indI2:\n  assumes \"p \\<noteq> 0\" and \"is_red F (tail p)\"\n  shows \"is_red F p\"", "lemma is_red_indE:\n  assumes \"is_red F p\"\n  shows \"(\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or> is_red F (tail p)\"", "lemma rtrancl_0:\n  assumes \"(red F)\\<^sup>*\\<^sup>* 0 x\"\n  shows \"x = 0\"", "lemma red_rtrancl_ord:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"q \\<preceq>\\<^sub>p p\"", "lemma components_red_subset:\n  assumes \"red F p q\"\n  shows \"component_of_term ` keys q \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\"", "lemma red_single_monom_mult:\n  assumes \"red_single p q f t\" and \"c \\<noteq> 0\"\n  shows \"red_single (monom_mult c s p) (monom_mult c s q) f (s + t)\"", "lemma red_single_plus_1:\n  assumes \"red_single p q f t\" and \"t \\<oplus> lt f \\<notin> keys (p + r)\"\n  shows \"red_single (q + r) (p + r) f t\"", "lemma red_single_plus_2:\n  assumes \"red_single p q f t\" and \"t \\<oplus> lt f \\<notin> keys (q + r)\"\n  shows \"red_single (p + r) (q + r) f t\"", "lemma red_single_plus_3:\n  assumes \"red_single p q f t\" and \"t \\<oplus> lt f \\<in> keys (p + r)\" and \"t \\<oplus> lt f \\<in> keys (q + r)\"\n  shows \"\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t\"", "lemma red_single_plus:\n  assumes \"red_single p q f t\"\n  shows \"red_single (p + r) (q + r) f t \\<or>\n          red_single (q + r) (p + r) f t \\<or>\n          (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\" (is \"?A \\<or> ?B \\<or> ?C\")", "lemma red_single_diff:\n  assumes \"red_single (p - q) r f t\"\n  shows \"red_single p (r + q) f t \\<or> red_single q (p - r) f t \\<or>\n          (\\<exists>p' q'. red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\" (is \"?A \\<or> ?B \\<or> ?C\")", "lemma red_monom_mult:\n  assumes a: \"red F p q\" and \"c \\<noteq> 0\"\n  shows \"red F (monom_mult c s p) (monom_mult c s q)\"", "lemma red_plus_keys_disjoint:\n  assumes \"red F p q\" and \"keys p \\<inter> keys r = {}\"\n  shows \"red F (p + r) (q + r)\"", "lemma red_plus:\n  assumes \"red F p q\"\n  obtains s where \"(red F)\\<^sup>*\\<^sup>* (p + r) s\" and \"(red F)\\<^sup>*\\<^sup>* (q + r) s\"", "lemma red_uminus:\n  assumes \"red F p q\"\n  shows \"red F (-p) (-q)\"", "lemma red_diff:\n  assumes \"red F (p - q) r\"\n  obtains p' q' where \"(red F)\\<^sup>*\\<^sup>* p p'\" and \"(red F)\\<^sup>*\\<^sup>* q q'\" and \"r = p' - q'\"", "lemma red_diff_rtrancl':\n  assumes \"(red F)\\<^sup>*\\<^sup>* (p - q) r\"\n  obtains p' q' where \"(red F)\\<^sup>*\\<^sup>* p p'\" and \"(red F)\\<^sup>*\\<^sup>* q q'\" and \"r = p' - q'\"", "lemma red_diff_rtrancl:\n  assumes \"(red F)\\<^sup>*\\<^sup>* (p - q) 0\"\n  obtains s where \"(red F)\\<^sup>*\\<^sup>* p s\" and \"(red F)\\<^sup>*\\<^sup>* q s\"", "lemma confluent_distinct_aux:\n  assumes r1: \"red_single p q1 f1 t1\" and r2: \"red_single p q2 f2 t2\"\n    and \"t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2\" and \"f1 \\<in> F\" and \"f2 \\<in> F\"\n  obtains s where \"(red F)\\<^sup>*\\<^sup>* q1 s\" and \"(red F)\\<^sup>*\\<^sup>* q2 s\"", "lemma confluent_distinct:\n  assumes r1: \"red_single p q1 f1 t1\" and r2: \"red_single p q2 f2 t2\"\n    and ne: \"t1 \\<oplus> lt f1 \\<noteq> t2 \\<oplus> lt f2\" and \"f1 \\<in> F\" and \"f2 \\<in> F\"\n  obtains s where \"(red F)\\<^sup>*\\<^sup>* q1 s\" and \"(red F)\\<^sup>*\\<^sup>* q2 s\"", "lemma srtc_in_pmdl:\n  assumes \"relation.srtc (red F) p q\"\n  shows \"p - q \\<in> pmdl F\"", "lemma in_pmdl_srtc:\n  assumes \"p \\<in> pmdl F\"\n  shows \"relation.srtc (red F) p 0\"", "lemma red_rtranclp_diff_in_pmdl:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"p - q \\<in> pmdl F\"", "lemma pmdl_closed_red:\n  assumes \"pmdl B \\<subseteq> pmdl A\" and \"p \\<in> pmdl A\" and \"red B p q\"\n  shows \"q \\<in> pmdl A\"", "lemma red_rtrancl_mult:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"(red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)\"", "lemma red_rtrancl_diff_induct [consumes 1, case_names base step]:\n  assumes a: \"(red F)\\<^sup>*\\<^sup>* (p - q) r\"\n    and cases: \"P p p\" \"!!y z. [| (red F)\\<^sup>*\\<^sup>* (p - q) z; red F z y; P p (q + z)|] ==> P p (q + y)\"\n  shows \"P p (q + r)\"", "lemma red_rtrancl_diff_0_induct [consumes 1, case_names base step]:\n  assumes a: \"(red F)\\<^sup>*\\<^sup>* (p - q) 0\"\n    and base: \"P p p\" and ind: \"\\<And>y z. [| (red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z; P p (y + q)|] ==> P p (z + q)\"\n  shows \"P p q\"", "lemma is_red_union: \"is_red (A \\<union> B) p \\<longleftrightarrow> (is_red A p \\<or> is_red B p)\"", "lemma red_single_0_lt:\n  assumes \"red_single f 0 h t\"\n  shows \"lt f = t \\<oplus> lt h\"", "lemma red_single_lt_distinct_lt:\n  assumes rs: \"red_single f g h t\" and \"g \\<noteq> 0\" and \"lt g \\<noteq> lt f\"\n  shows \"lt f = t \\<oplus> lt h\"", "lemma zero_reducibility_implies_lt_divisibility':\n  assumes \"(red F)\\<^sup>*\\<^sup>* f 0\" and \"f \\<noteq> 0\"\n  shows \"\\<exists>h\\<in>F. h \\<noteq> 0 \\<and> (lt h adds\\<^sub>t lt f)\"", "lemma zero_reducibility_implies_lt_divisibility:\n  assumes \"(red F)\\<^sup>*\\<^sup>* f 0\" and \"f \\<noteq> 0\"\n  obtains h where \"h \\<in> F\" and \"h \\<noteq> 0\" and \"lt h adds\\<^sub>t lt f\"", "lemma is_red_addsI:\n  assumes \"f \\<in> F\" and \"f \\<noteq> 0\" and \"v \\<in> keys p\" and \"lt f adds\\<^sub>t v\"\n  shows \"is_red F p\"", "lemma is_red_addsE':\n  assumes \"is_red F p\"\n  shows \"\\<exists>f\\<in>F. \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\"", "lemma is_red_addsE:\n  assumes \"is_red F p\"\n  obtains f v where \"f \\<in> F\" and \"v \\<in> keys p\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t v\"", "lemma is_red_adds_iff:\n  shows \"(is_red F p) \\<longleftrightarrow> (\\<exists>f\\<in>F. \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v)\"", "lemma is_red_subset:\n  assumes red: \"is_red A p\" and sub: \"A \\<subseteq> B\"\n  shows \"is_red B p\"", "lemma not_is_red_empty: \"\\<not> is_red {} f\"", "lemma red_single_mult_const:\n  assumes \"red_single p q f t\" and \"c \\<noteq> 0\"\n  shows \"red_single p q (monom_mult c 0 f) t\"", "lemma red_rtrancl_plus_higher:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\" and \"\\<And>u v. u \\<in> keys p \\<Longrightarrow> v \\<in> keys r \\<Longrightarrow> u \\<prec>\\<^sub>t v\"\n  shows \"(red F)\\<^sup>*\\<^sup>* (p + r) (q + r)\"", "lemma red_mult_scalar_leading_monomial: \"(red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f)) (- p \\<odot> tail f)\"", "lemma is_red_monomial_iff: \"is_red F (monomial c v) \\<longleftrightarrow> (c \\<noteq> 0 \\<and> (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v))\"", "lemma is_red_monomialI:\n  assumes \"c \\<noteq> 0\" and \"f \\<in> F\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t v\"\n  shows \"is_red F (monomial c v)\"", "lemma is_red_monomialD:\n  assumes \"is_red F (monomial c v)\"\n  shows \"c \\<noteq> 0\"", "lemma is_red_monomialE:\n  assumes \"is_red F (monomial c v)\"\n  obtains f where \"f \\<in> F\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t v\"", "lemma replace_lt_adds_stable_is_red:\n  assumes red: \"is_red F f\" and \"q \\<noteq> 0\" and \"lt q adds\\<^sub>t lt p\"\n  shows \"is_red (insert q (F - {p})) f\"", "lemma conversion_property:\n  assumes \"is_red {p} f\" and \"red {r} p q\"\n  shows \"is_red {q} f \\<or> is_red {r} f\"", "lemma replace_red_stable_is_red:\n  assumes a1: \"is_red F f\" and a2: \"red (F - {p}) p q\"\n  shows \"is_red (insert q (F - {p})) f\" (is \"is_red ?F' f\")", "lemma is_red_map_scale:\n  assumes \"is_red F (c \\<cdot> p)\"\n  shows \"is_red F p\"", "lemma is_red_map_scale_iff: \"is_red F (c \\<cdot> p) \\<longleftrightarrow> (c \\<noteq> 0 \\<and> is_red F p)\"", "lemma is_red_uminus: \"is_red F (- p) \\<longleftrightarrow> is_red F p\"", "lemma is_red_plus:\n  assumes \"is_red F (p + q)\"\n  shows \"is_red F p \\<or> is_red F q\"", "lemma is_irred_plus: \"\\<not> is_red F p \\<Longrightarrow> \\<not> is_red F q \\<Longrightarrow> \\<not> is_red F (p + q)\"", "lemma is_red_minus:\n  assumes \"is_red F (p - q)\"\n  shows \"is_red F p \\<or> is_red F q\"", "lemma is_irred_minus: \"\\<not> is_red F p \\<Longrightarrow> \\<not> is_red F q \\<Longrightarrow> \\<not> is_red F (p - q)\"", "lemma dgrad_set_le_red_single:\n  assumes \"dickson_grading d\" and \"red_single p q f t\"\n  shows \"dgrad_set_le d {t} (pp_of_term ` keys p)\"", "lemma dgrad_p_set_le_red_single:\n  assumes \"dickson_grading d\" and \"red_single p q f t\"\n  shows \"dgrad_p_set_le d {q} {f, p}\"", "lemma dgrad_p_set_le_red:\n  assumes \"dickson_grading d\" and \"red F p q\"\n  shows \"dgrad_p_set_le d {q} (insert p F)\"", "lemma dgrad_p_set_red_single_pp:\n  assumes \"dickson_grading d\" and \"p \\<in> dgrad_p_set d m\" and \"red_single p q f t\"\n  shows \"d t \\<le> m\"", "lemma dgrad_p_set_closed_red_single:\n  assumes \"dickson_grading d\" and \"p \\<in> dgrad_p_set d m\" and \"f \\<in> dgrad_p_set d m\"\n    and \"red_single p q f t\"\n  shows \"q \\<in> dgrad_p_set d m\"", "lemma dgrad_p_set_closed_red:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\" and \"p \\<in> dgrad_p_set d m\" and \"red F p q\"\n  shows \"q \\<in> dgrad_p_set d m\"", "lemma dgrad_p_set_closed_red_rtrancl:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\" and \"p \\<in> dgrad_p_set d m\" and \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"q \\<in> dgrad_p_set d m\"", "lemma red_rtrancl_repE:\n  assumes \"dickson_grading d\" and \"G \\<subseteq> dgrad_p_set d m\" and \"finite G\" and \"p \\<in> dgrad_p_set d m\"\n    and \"(red G)\\<^sup>*\\<^sup>* p r\"\n  obtains q where \"p = r + (\\<Sum>g\\<in>G. q g \\<odot> g)\" and \"\\<And>g. q g \\<in> punit.dgrad_p_set d m\"\n    and \"\\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\"", "lemma is_relation_order_red:\n  assumes \"dickson_grading d\"\n  shows \"Confluence.relation_order (red F) (\\<prec>\\<^sub>p) (dgrad_p_set d m)\"", "lemma red_wf_dgrad_p_set_aux:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"wfp_on (red F)\\<inverse>\\<inverse> (dgrad_p_set d m)\"", "lemma red_wf_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"wfP (red F)\\<inverse>\\<inverse>\"", "lemmas red_wf_finite = red_wf_dgrad_p_set[OF dickson_grading_dgrad_dummy dgrad_p_set_exhaust_expl]", "lemma cbelow_on_monom_mult:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\" and \"d t \\<le> m\" and \"c \\<noteq> 0\"\n    and \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z (\\<lambda>a b. red F a b \\<or> red F b a) p q\"\n  shows \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z) (\\<lambda>a b. red F a b \\<or> red F b a)\n          (monom_mult c t p) (monom_mult c t q)\"", "lemma cbelow_on_monom_mult_monomial:\n  assumes \"c \\<noteq> 0\"\n    and \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c' v) (\\<lambda>a b. red F a b \\<or> red F b a) p q\"\n  shows \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c (t \\<oplus> v)) (\\<lambda>a b. red F a b \\<or> red F b a) p q\"", "lemma cbelow_on_plus:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\" and \"r \\<in> dgrad_p_set d m\"\n    and \"keys r \\<inter> keys z = {}\"\n    and \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z (\\<lambda>a b. red F a b \\<or> red F b a) p q\"\n  shows \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r) (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (q + r)\"", "lemma is_full_pmdlI_lt_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"B \\<subseteq> dgrad_p_set d m\"\n  assumes \"\\<And>k. k \\<in> component_of_term ` Keys (B::('t \\<Rightarrow>\\<^sub>0 'b::field) set) \\<Longrightarrow>\n            (\\<exists>b\\<in>B. b \\<noteq> 0 \\<and> component_of_term (lt b) = k \\<and> lp b = 0)\"\n  shows \"is_full_pmdl B\"", "lemmas is_full_pmdlI_lt_finite = is_full_pmdlI_lt_dgrad_p_set[OF dickson_grading_dgrad_dummy dgrad_p_set_exhaust_expl]", "lemma find_adds_SomeD1:\n  assumes \"find_adds fs u = Some f\"\n  shows \"f \\<in> set fs\"", "lemma find_adds_SomeD2:\n  assumes \"find_adds fs u = Some f\"\n  shows \"f \\<noteq> 0\"", "lemma find_adds_SomeD3:\n  assumes \"find_adds fs u = Some f\"\n  shows \"lt f adds\\<^sub>t u\"", "lemma find_adds_NoneE:\n  assumes \"find_adds fs u = None\" and \"f \\<in> set fs\"\n  assumes \"f = 0 \\<Longrightarrow> thesis\" and \"f \\<noteq> 0 \\<Longrightarrow> \\<not> lt f adds\\<^sub>t u \\<Longrightarrow> thesis\"\n  shows thesis", "lemma find_adds_SomeD_red_single:\n  assumes \"p \\<noteq> 0\" and \"find_adds fs (lt p) = Some f\"\n  shows \"red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) f (lp p - lp f)\"", "lemma find_adds_SomeD_red:\n  assumes \"p \\<noteq> 0\" and \"find_adds fs (lt p) = Some f\"\n  shows \"red (set fs) p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\"", "lemma trd_term_wf:\n  assumes \"dickson_grading d\"\n  shows \"wf (trd_term d)\"", "lemma trd_aux_red_rtrancl: \"(red (set fs))\\<^sup>*\\<^sup>* p (trd_aux fs p r - r)\"", "lemma trd_aux_irred:\n  assumes \"\\<not> is_red (set fs) r\"\n  shows \"\\<not> is_red (set fs) (trd_aux fs p r)\"", "lemma trd_in_pmdl: \"p - (trd fs p) \\<in> pmdl (set fs)\"", "lemma pmdl_closed_trd:\n  assumes \"p \\<in> pmdl B\" and \"set fs \\<subseteq> pmdl B\"\n  shows \"(trd fs p) \\<in> pmdl B\""], "translations": [["", "lemma red_setI:\n  assumes \"f \\<in> F\" and a: \"red_single p q f t\"\n  shows \"red F p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p q", "unfolding red_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>F. Ex (red_single p q f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Ex (red_single p q ?f)\n 2. ?f \\<in> F", "from \\<open>f \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> F", "show \"f \\<in> F\""], ["proof (prove)\nusing this:\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. f \\<in> F", "."], ["proof (state)\nthis:\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. Ex (red_single p q f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (red_single p q f)", "from a"], ["proof (chain)\npicking this:\n  red_single p q f t", "show \"\\<exists>t. red_single p q f t\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. \\<exists>t. red_single p q f t", ".."], ["proof (state)\nthis:\n  \\<exists>t. red_single p q f t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_setE:\n  assumes \"red F p q\"\n  obtains f and t where \"f \\<in> F\" and \"red_single p q f t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  red F p q", "obtain f where \"f \\<in> F\" and t: \"\\<exists>t. red_single p q f t\""], ["proof (prove)\nusing this:\n  red F p q\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; \\<exists>t. red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding red_def"], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>F. Ex (red_single p q f)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; \\<exists>t. red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> F\n  \\<exists>t. red_single p q f t\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from t"], ["proof (chain)\npicking this:\n  \\<exists>t. red_single p q f t", "obtain t where \"red_single p q f t\""], ["proof (prove)\nusing this:\n  \\<exists>t. red_single p q f t\n\ngoal (1 subgoal):\n 1. (\\<And>t. red_single p q f t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>f \\<in> F\\<close> this"], ["proof (chain)\npicking this:\n  f \\<in> F\n  red_single p q f t", "show \"?thesis\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_empty: \"\\<not> red {} p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> red {} p q", "by (rule, elim red_setE, simp)"], ["", "lemma red_singleton_zero: \"\\<not> red {0} p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> red {0} p q", "by (rule, elim red_setE, simp add: red_single_def)"], ["", "lemma red_union: \"red (F \\<union> G) p q = (red F p q \\<or> red G p q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red (F \\<union> G) p q = (red F p q \\<or> red G p q)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. red (F \\<union> G) p q \\<Longrightarrow> red F p q \\<or> red G p q\n 2. red F p q \\<or> red G p q \\<Longrightarrow> red (F \\<union> G) p q", "assume \"red (F \\<union> G) p q\""], ["proof (state)\nthis:\n  red (F \\<union> G) p q\n\ngoal (2 subgoals):\n 1. red (F \\<union> G) p q \\<Longrightarrow> red F p q \\<or> red G p q\n 2. red F p q \\<or> red G p q \\<Longrightarrow> red (F \\<union> G) p q", "from red_setE[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F \\<union> G; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f t where \"f \\<in> F \\<union> G\" and r: \"red_single p q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F \\<union> G; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F \\<union> G; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  f \\<in> F \\<union> G\n  red_single p q f t\n\ngoal (2 subgoals):\n 1. red (F \\<union> G) p q \\<Longrightarrow> red F p q \\<or> red G p q\n 2. red F p q \\<or> red G p q \\<Longrightarrow> red (F \\<union> G) p q", "from \\<open>f \\<in> F \\<union> G\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> F \\<union> G", "have \"f \\<in> F \\<or> f \\<in> G\""], ["proof (prove)\nusing this:\n  f \\<in> F \\<union> G\n\ngoal (1 subgoal):\n 1. f \\<in> F \\<or> f \\<in> G", "by simp"], ["proof (state)\nthis:\n  f \\<in> F \\<or> f \\<in> G\n\ngoal (2 subgoals):\n 1. red (F \\<union> G) p q \\<Longrightarrow> red F p q \\<or> red G p q\n 2. red F p q \\<or> red G p q \\<Longrightarrow> red (F \\<union> G) p q", "thus \"red F p q \\<or> red G p q\""], ["proof (prove)\nusing this:\n  f \\<in> F \\<or> f \\<in> G\n\ngoal (1 subgoal):\n 1. red F p q \\<or> red G p q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<in> F \\<Longrightarrow> red F p q \\<or> red G p q\n 2. f \\<in> G \\<Longrightarrow> red F p q \\<or> red G p q", "assume \"f \\<in> F\""], ["proof (state)\nthis:\n  f \\<in> F\n\ngoal (2 subgoals):\n 1. f \\<in> F \\<Longrightarrow> red F p q \\<or> red G p q\n 2. f \\<in> G \\<Longrightarrow> red F p q \\<or> red G p q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p q \\<or> red G p q", "by (intro disjI1, rule red_setI[OF \\<open>f \\<in> F\\<close> r])"], ["proof (state)\nthis:\n  red F p q \\<or> red G p q\n\ngoal (1 subgoal):\n 1. f \\<in> G \\<Longrightarrow> red F p q \\<or> red G p q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> G \\<Longrightarrow> red F p q \\<or> red G p q", "assume \"f \\<in> G\""], ["proof (state)\nthis:\n  f \\<in> G\n\ngoal (1 subgoal):\n 1. f \\<in> G \\<Longrightarrow> red F p q \\<or> red G p q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p q \\<or> red G p q", "by (intro disjI2, rule red_setI[OF \\<open>f \\<in> G\\<close> r])"], ["proof (state)\nthis:\n  red F p q \\<or> red G p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red F p q \\<or> red G p q\n\ngoal (1 subgoal):\n 1. red F p q \\<or> red G p q \\<Longrightarrow> red (F \\<union> G) p q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. red F p q \\<or> red G p q \\<Longrightarrow> red (F \\<union> G) p q", "assume \"red F p q \\<or> red G p q\""], ["proof (state)\nthis:\n  red F p q \\<or> red G p q\n\ngoal (1 subgoal):\n 1. red F p q \\<or> red G p q \\<Longrightarrow> red (F \\<union> G) p q", "thus \"red (F \\<union> G) p q\""], ["proof (prove)\nusing this:\n  red F p q \\<or> red G p q\n\ngoal (1 subgoal):\n 1. red (F \\<union> G) p q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. red F p q \\<Longrightarrow> red (F \\<union> G) p q\n 2. red G p q \\<Longrightarrow> red (F \\<union> G) p q", "assume \"red F p q\""], ["proof (state)\nthis:\n  red F p q\n\ngoal (2 subgoals):\n 1. red F p q \\<Longrightarrow> red (F \\<union> G) p q\n 2. red G p q \\<Longrightarrow> red (F \\<union> G) p q", "from red_setE[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f t where \"f \\<in> F\" and \"red_single p q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f t\n\ngoal (2 subgoals):\n 1. red F p q \\<Longrightarrow> red (F \\<union> G) p q\n 2. red G p q \\<Longrightarrow> red (F \\<union> G) p q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red (F \\<union> G) p q", "by (intro red_setI[of f _ _ _ t], rule UnI1, rule \\<open>f \\<in> F\\<close>, fact)"], ["proof (state)\nthis:\n  red (F \\<union> G) p q\n\ngoal (1 subgoal):\n 1. red G p q \\<Longrightarrow> red (F \\<union> G) p q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. red G p q \\<Longrightarrow> red (F \\<union> G) p q", "assume \"red G p q\""], ["proof (state)\nthis:\n  red G p q\n\ngoal (1 subgoal):\n 1. red G p q \\<Longrightarrow> red (F \\<union> G) p q", "from red_setE[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> G; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f t where \"f \\<in> G\" and \"red_single p q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> G; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> G; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  f \\<in> G\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. red G p q \\<Longrightarrow> red (F \\<union> G) p q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red (F \\<union> G) p q", "by (intro red_setI[of f _ _ _ t], rule UnI2, rule \\<open>f \\<in> G\\<close>, fact)"], ["proof (state)\nthis:\n  red (F \\<union> G) p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red (F \\<union> G) p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_unionI1:\n  assumes \"red F p q\"\n  shows \"red (F \\<union> G) p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red (F \\<union> G) p q", "unfolding red_union"], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p q \\<or> red G p q", "by (rule disjI1, fact)"], ["", "lemma red_unionI2:\n  assumes \"red G p q\"\n  shows \"red (F \\<union> G) p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red (F \\<union> G) p q", "unfolding red_union"], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p q \\<or> red G p q", "by (rule disjI2, fact)"], ["", "lemma red_subset:\n  assumes \"red G p q\" and \"G \\<subseteq> F\"\n  shows \"red F p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red F p q", "from \\<open>G \\<subseteq> F\\<close>"], ["proof (chain)\npicking this:\n  G \\<subseteq> F", "obtain H where \"F = G \\<union> H\""], ["proof (prove)\nusing this:\n  G \\<subseteq> F\n\ngoal (1 subgoal):\n 1. (\\<And>H. F = G \\<union> H \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  F = G \\<union> H\n\ngoal (1 subgoal):\n 1. red F p q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p q", "unfolding \\<open>F = G \\<union> H\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. red (G \\<union> H) p q", "by (rule red_unionI1, fact)"], ["proof (state)\nthis:\n  red F p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_union_singleton_zero: \"red (F \\<union> {0}) = red F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red (F \\<union> {0}) = red F", "by (intro ext, simp only: red_union red_singleton_zero, simp)"], ["", "lemma red_minus_singleton_zero: \"red (F - {0}) = red F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red (F - {0}) = red F", "by (metis Un_Diff_cancel2 red_union_singleton_zero)"], ["", "lemma red_rtrancl_subset:\n  assumes major: \"(red G)\\<^sup>*\\<^sup>* p q\" and \"G \\<subseteq> F\"\n  shows \"(red F)\\<^sup>*\\<^sup>* p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p q", "using major"], ["proof (prove)\nusing this:\n  (red G)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p q", "proof (induct rule: rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* p p\n 2. \\<And>y z.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "show \"(red F)\\<^sup>*\\<^sup>* p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p p", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p p\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "fix r q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "assume \"red G r q\" and \"(red F)\\<^sup>*\\<^sup>* p r\""], ["proof (state)\nthis:\n  red G r q\n  (red F)\\<^sup>*\\<^sup>* p r\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        (red F)\\<^sup>*\\<^sup>* p y\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* p z", "show \"(red F)\\<^sup>*\\<^sup>* p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* p ?b\n 2. red F ?b q", "show \"(red F)\\<^sup>*\\<^sup>* p r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p r", "by fact"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p r\n\ngoal (1 subgoal):\n 1. red F r q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. red F r q", "from red_subset[OF \\<open>red G r q\\<close> \\<open>G \\<subseteq> F\\<close>]"], ["proof (chain)\npicking this:\n  red F r q", "show \"red F r q\""], ["proof (prove)\nusing this:\n  red F r q\n\ngoal (1 subgoal):\n 1. red F r q", "."], ["proof (state)\nthis:\n  red F r q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_singleton: \"red {f} p q \\<longleftrightarrow> (\\<exists>t. red_single p q f t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red {f} p q = (\\<exists>t. red_single p q f t)", "unfolding red_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>{f}. Ex (red_single p q f)) =\n    (\\<exists>t. red_single p q f t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>{f}. Ex (red_single p q f) \\<Longrightarrow>\n    \\<exists>t. red_single p q f t\n 2. \\<exists>t. red_single p q f t \\<Longrightarrow>\n    \\<exists>f\\<in>{f}. Ex (red_single p q f)", "assume \"\\<exists>f\\<in>{f}. \\<exists>t. red_single p q f t\""], ["proof (state)\nthis:\n  \\<exists>f\\<in>{f}. \\<exists>t. red_single p q f t\n\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>{f}. Ex (red_single p q f) \\<Longrightarrow>\n    \\<exists>t. red_single p q f t\n 2. \\<exists>t. red_single p q f t \\<Longrightarrow>\n    \\<exists>f\\<in>{f}. Ex (red_single p q f)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>f\\<in>{f}. \\<exists>t. red_single p q f t", "obtain f0 where \"f0 \\<in> {f}\" and a: \"\\<exists>t. red_single p q f0 t\""], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>{f}. \\<exists>t. red_single p q f t\n\ngoal (1 subgoal):\n 1. (\\<And>f0.\n        \\<lbrakk>f0 \\<in> {f}; \\<exists>t. red_single p q f0 t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  f0 \\<in> {f}\n  \\<exists>t. red_single p q f0 t\n\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>{f}. Ex (red_single p q f) \\<Longrightarrow>\n    \\<exists>t. red_single p q f t\n 2. \\<exists>t. red_single p q f t \\<Longrightarrow>\n    \\<exists>f\\<in>{f}. Ex (red_single p q f)", "from \\<open>f0 \\<in> {f}\\<close>"], ["proof (chain)\npicking this:\n  f0 \\<in> {f}", "have \"f0 = f\""], ["proof (prove)\nusing this:\n  f0 \\<in> {f}\n\ngoal (1 subgoal):\n 1. f0 = f", "by simp"], ["proof (state)\nthis:\n  f0 = f\n\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>{f}. Ex (red_single p q f) \\<Longrightarrow>\n    \\<exists>t. red_single p q f t\n 2. \\<exists>t. red_single p q f t \\<Longrightarrow>\n    \\<exists>f\\<in>{f}. Ex (red_single p q f)", "from this a"], ["proof (chain)\npicking this:\n  f0 = f\n  \\<exists>t. red_single p q f0 t", "show \"\\<exists>t. red_single p q f t\""], ["proof (prove)\nusing this:\n  f0 = f\n  \\<exists>t. red_single p q f0 t\n\ngoal (1 subgoal):\n 1. \\<exists>t. red_single p q f t", "by simp"], ["proof (state)\nthis:\n  \\<exists>t. red_single p q f t\n\ngoal (1 subgoal):\n 1. \\<exists>t. red_single p q f t \\<Longrightarrow>\n    \\<exists>f\\<in>{f}. Ex (red_single p q f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t. red_single p q f t \\<Longrightarrow>\n    \\<exists>f\\<in>{f}. Ex (red_single p q f)", "assume a: \"\\<exists>t. red_single p q f t\""], ["proof (state)\nthis:\n  \\<exists>t. red_single p q f t\n\ngoal (1 subgoal):\n 1. \\<exists>t. red_single p q f t \\<Longrightarrow>\n    \\<exists>f\\<in>{f}. Ex (red_single p q f)", "show \"\\<exists>f\\<in>{f}. \\<exists>t. red_single p q f t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>{f}. \\<exists>t. red_single p q f t", "proof (rule, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t. red_single p q f t", "from a"], ["proof (chain)\npicking this:\n  \\<exists>t. red_single p q f t", "show \"\\<exists>t. red_single p q f t\""], ["proof (prove)\nusing this:\n  \\<exists>t. red_single p q f t\n\ngoal (1 subgoal):\n 1. \\<exists>t. red_single p q f t", "."], ["proof (state)\nthis:\n  \\<exists>t. red_single p q f t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f\\<in>{f}. \\<exists>t. red_single p q f t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_lookup:\n  assumes \"red_single p q f t\"\n  shows \"lookup q (t \\<oplus> lt f) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) = (0::'b)", "using assms"], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) = (0::'b)", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) = (0::'b)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0;\n     lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n     q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\\<rbrakk>\n    \\<Longrightarrow> lookup q (t \\<oplus> lt f) = (0::'b)", "assume \"f \\<noteq> 0\" and \"lookup p (t \\<oplus> lt f) \\<noteq> 0 \\<and> q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0;\n     lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n     q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\\<rbrakk>\n    \\<Longrightarrow> lookup q (t \\<oplus> lt f) = (0::'b)", "hence \"lookup p (t \\<oplus> lt f) \\<noteq> 0\" and q_def: \"q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by auto"], ["proof (state)\nthis:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0;\n     lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n     q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\\<rbrakk>\n    \\<Longrightarrow> lookup q (t \\<oplus> lt f) = (0::'b)", "from lookup_minus[of p \"monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\" \"t \\<oplus> lt f\"]\n       lookup_monom_mult_plus[of \"lookup p (t \\<oplus> lt f) / lc f\" t f \"lt f\"]\n       lc_not_0[OF \\<open>f \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  lookup (p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n   (t \\<oplus> lt f) =\n  lookup p (t \\<oplus> lt f) -\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n   (t \\<oplus> lt f)\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n   (t \\<oplus> lt f) =\n  lookup p (t \\<oplus> lt f) / lc f * lookup f (lt f)\n  lc f \\<noteq> (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup (p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n   (t \\<oplus> lt f) =\n  lookup p (t \\<oplus> lt f) -\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n   (t \\<oplus> lt f)\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n   (t \\<oplus> lt f) =\n  lookup p (t \\<oplus> lt f) / lc f * lookup f (lt f)\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) = (0::'b)", "unfolding q_def lc_def"], ["proof (prove)\nusing this:\n  lookup (p - monom_mult (lookup p (t \\<oplus> lt f) / lookup f (lt f)) t f)\n   (t \\<oplus> lt f) =\n  lookup p (t \\<oplus> lt f) -\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lookup f (lt f)) t f)\n   (t \\<oplus> lt f)\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lookup f (lt f)) t f)\n   (t \\<oplus> lt f) =\n  lookup p (t \\<oplus> lt f) / lookup f (lt f) * lookup f (lt f)\n  lookup f (lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup\n     (p - monom_mult (lookup p (t \\<oplus> lt f) / lookup f (lt f)) t f)\n     (t \\<oplus> lt f) =\n    (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_higher:\n  assumes \"red_single p q f t\"\n  shows \"higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)", "using assms"], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)", "unfolding higher_eq_iff red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. \\<forall>u.\n       t \\<oplus> lt f \\<prec>\\<^sub>t u \\<longrightarrow>\n       lookup q u = lookup p u", "proof (intro allI, intro impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>f \\<noteq> 0 \\<and>\n                lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n                q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        f \\<noteq> 0 \\<and>\n        lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n        q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        t \\<oplus> lt f \\<prec>\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> lookup q u = lookup p u", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>f \\<noteq> 0 \\<and>\n                lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n                q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        f \\<noteq> 0 \\<and>\n        lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n        q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        t \\<oplus> lt f \\<prec>\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> lookup q u = lookup p u", "assume a: \"t \\<oplus> lt f \\<prec>\\<^sub>t u\"\n    and \"f \\<noteq> 0 \\<and> lookup p (t \\<oplus> lt f) \\<noteq> 0 \\<and> q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\""], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<prec>\\<^sub>t u\n  f \\<noteq> 0 \\<and>\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>f \\<noteq> 0 \\<and>\n                lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n                q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        f \\<noteq> 0 \\<and>\n        lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n        q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        t \\<oplus> lt f \\<prec>\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> lookup q u = lookup p u", "hence \"f \\<noteq> 0\"\n    and \"lookup p (t \\<oplus> lt f) \\<noteq> 0\"\n    and q_def: \"q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<prec>\\<^sub>t u\n  f \\<noteq> 0 \\<and>\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by simp_all"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>f \\<noteq> 0 \\<and>\n                lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n                q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        f \\<noteq> 0 \\<and>\n        lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n        q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        t \\<oplus> lt f \\<prec>\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> lookup q u = lookup p u", "from \\<open>lookup p (t \\<oplus> lt f) \\<noteq> 0\\<close> lc_not_0[OF \\<open>f \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  lc f \\<noteq> (0::'b)", "have c_not_0: \"lookup p (t \\<oplus> lt f) / lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) / lc f \\<noteq> (0::'b)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  lookup p (t \\<oplus> lt f) / lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>f \\<noteq> 0 \\<and>\n                lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n                q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        f \\<noteq> 0 \\<and>\n        lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n        q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        t \\<oplus> lt f \\<prec>\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> lookup q u = lookup p u", "from q_def lookup_minus[of p \"monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\"]"], ["proof (chain)\npicking this:\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n  lookup (p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) ?k =\n  lookup p ?k -\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) ?k", "have q_lookup: \"\\<And>s. lookup q s = lookup p s - lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) s\""], ["proof (prove)\nusing this:\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n  lookup (p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) ?k =\n  lookup p ?k -\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) ?k\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       lookup q s =\n       lookup p s -\n       lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) s", "by simp"], ["proof (state)\nthis:\n  lookup q ?s27 =\n  lookup p ?s27 -\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) ?s27\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>f \\<noteq> 0 \\<and>\n                lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n                q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        f \\<noteq> 0 \\<and>\n        lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n        q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        t \\<oplus> lt f \\<prec>\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> lookup q u = lookup p u", "from a lt_monom_mult[OF c_not_0 \\<open>f \\<noteq> 0\\<close>, of t]"], ["proof (chain)\npicking this:\n  t \\<oplus> lt f \\<prec>\\<^sub>t u\n  lt (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) = t \\<oplus> lt f", "have \"\\<not> u \\<preceq>\\<^sub>t lt (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<prec>\\<^sub>t u\n  lt (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) = t \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. \\<not> u \\<preceq>\\<^sub>t\n           lt (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)", "by simp"], ["proof (state)\nthis:\n  \\<not> u \\<preceq>\\<^sub>t\n         lt (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>f \\<noteq> 0 \\<and>\n                lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n                q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        f \\<noteq> 0 \\<and>\n        lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n        q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        t \\<oplus> lt f \\<prec>\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> lookup q u = lookup p u", "with lt_max[of \"monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\" u]"], ["proof (chain)\npicking this:\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) u \\<noteq>\n  (0::'b) \\<Longrightarrow>\n  u \\<preceq>\\<^sub>t\n  lt (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n  \\<not> u \\<preceq>\\<^sub>t\n         lt (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)", "have \"lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) u = 0\""], ["proof (prove)\nusing this:\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) u \\<noteq>\n  (0::'b) \\<Longrightarrow>\n  u \\<preceq>\\<^sub>t\n  lt (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n  \\<not> u \\<preceq>\\<^sub>t\n         lt (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) u = (0::'b)", "by auto"], ["proof (state)\nthis:\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) u = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>f \\<noteq> 0 \\<and>\n                lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n                q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        f \\<noteq> 0 \\<and>\n        lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n        q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f;\n        t \\<oplus> lt f \\<prec>\\<^sub>t u\\<rbrakk>\n       \\<Longrightarrow> lookup q u = lookup p u", "thus \"lookup q u = lookup p u\""], ["proof (prove)\nusing this:\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) u = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q u = lookup p u", "using q_lookup[of u]"], ["proof (prove)\nusing this:\n  lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) u = (0::'b)\n  lookup q u =\n  lookup p u - lookup (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) u\n\ngoal (1 subgoal):\n 1. lookup q u = lookup p u", "by simp"], ["proof (state)\nthis:\n  lookup q u = lookup p u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_ord:\n  assumes \"red_single p q f t\"\n  shows \"q \\<prec>\\<^sub>p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p p", "unfolding ord_strict_higher"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       lookup q v = (0::'b) \\<and>\n       lookup p v \\<noteq> (0::'b) \\<and> higher q v = higher p v", "proof (intro exI, intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. lookup q ?v = (0::'b)\n 2. lookup p ?v \\<noteq> (0::'b)\n 3. higher q ?v = higher p ?v", "from red_single_lookup[OF assms]"], ["proof (chain)\npicking this:\n  lookup q (t \\<oplus> lt f) = (0::'b)", "show \"lookup q (t \\<oplus> lt f) = 0\""], ["proof (prove)\nusing this:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) = (0::'b)", "."], ["proof (state)\nthis:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n 2. higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n 2. higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)", "from assms"], ["proof (chain)\npicking this:\n  red_single p q f t", "show \"lookup p (t \\<oplus> lt f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)", "from red_single_higher[OF assms]"], ["proof (chain)\npicking this:\n  higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)", "show \"higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)\""], ["proof (prove)\nusing this:\n  higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)", "."], ["proof (state)\nthis:\n  higher q (t \\<oplus> lt f) = higher p (t \\<oplus> lt f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_nonzero1:\n  assumes \"red_single p q f t\"\n  shows \"p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow> False", "assume \"p = 0\""], ["proof (state)\nthis:\n  p = 0\n\ngoal (1 subgoal):\n 1. p = 0 \\<Longrightarrow> False", "from this red_single_ord[OF assms] ord_p_zero_min[of q]"], ["proof (chain)\npicking this:\n  p = 0\n  q \\<prec>\\<^sub>p p\n  0 \\<preceq>\\<^sub>p q", "show False"], ["proof (prove)\nusing this:\n  p = 0\n  q \\<prec>\\<^sub>p p\n  0 \\<preceq>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_nonzero2:\n  assumes \"red_single p q f t\"\n  shows \"f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> False", "assume \"f = 0\""], ["proof (state)\nthis:\n  f = 0\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> False", "from assms monom_mult_zero_right"], ["proof (chain)\npicking this:\n  red_single p q f t\n  monom_mult ?c ?t 0 = 0", "have \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  red_single p q f t\n  monom_mult ?c ?t 0 = 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by (simp add: red_single_def)"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> False", "from this \\<open>f = 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  f = 0", "show False"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  f = 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_self:\n  assumes \"p \\<noteq> 0\"\n  shows \"red_single p 0 p 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p 0 p (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p 0 p (0::'a)", "from lc_not_0[OF assms]"], ["proof (chain)\npicking this:\n  lc p \\<noteq> (0::'b)", "have lc: \"lc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lc p \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. red_single p 0 p (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p 0 p (0::'a)", "unfolding red_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<and>\n    lookup p ((0::'a) \\<oplus> lt p) \\<noteq> (0::'b) \\<and>\n    0 = p - monom_mult (lookup p ((0::'a) \\<oplus> lt p) / lc p) (0::'a) p", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. p \\<noteq> 0\n 2. lookup p ((0::'a) \\<oplus> lt p) \\<noteq> (0::'b)\n 3. 0 = p - monom_mult (lookup p ((0::'a) \\<oplus> lt p) / lc p) (0::'a) p", "show \"p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by fact"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. lookup p ((0::'a) \\<oplus> lt p) \\<noteq> (0::'b)\n 2. 0 = p - monom_mult (lookup p ((0::'a) \\<oplus> lt p) / lc p) (0::'a) p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p ((0::'a) \\<oplus> lt p) \\<noteq> (0::'b)\n 2. 0 = p - monom_mult (lookup p ((0::'a) \\<oplus> lt p) / lc p) (0::'a) p", "from lc"], ["proof (chain)\npicking this:\n  lc p \\<noteq> (0::'b)", "show \"lookup p (0 \\<oplus> lt p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p ((0::'a) \\<oplus> lt p) \\<noteq> (0::'b)", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lookup p (lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p ((0::'a) \\<oplus> lt p) \\<noteq> (0::'b)", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  lookup p ((0::'a) \\<oplus> lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. 0 = p - monom_mult (lookup p ((0::'a) \\<oplus> lt p) / lc p) (0::'a) p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 = p - monom_mult (lookup p ((0::'a) \\<oplus> lt p) / lc p) (0::'a) p", "from lc"], ["proof (chain)\npicking this:\n  lc p \\<noteq> (0::'b)", "have \"(lookup p (0 \\<oplus> lt p)) / lc p = 1\""], ["proof (prove)\nusing this:\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p ((0::'a) \\<oplus> lt p) / lc p = (1::'b)", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lookup p (lt p) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p ((0::'a) \\<oplus> lt p) / lookup p (lt p) = (1::'b)", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  lookup p ((0::'a) \\<oplus> lt p) / lc p = (1::'b)\n\ngoal (1 subgoal):\n 1. 0 = p - monom_mult (lookup p ((0::'a) \\<oplus> lt p) / lc p) (0::'a) p", "from this monom_mult_one_left[of p]"], ["proof (chain)\npicking this:\n  lookup p ((0::'a) \\<oplus> lt p) / lc p = (1::'b)\n  monom_mult (1::'b) (0::'a) p = p", "show \"0 = p - monom_mult (lookup p (0 \\<oplus> lt p) / lc p) 0 p\""], ["proof (prove)\nusing this:\n  lookup p ((0::'a) \\<oplus> lt p) / lc p = (1::'b)\n  monom_mult (1::'b) (0::'a) p = p\n\ngoal (1 subgoal):\n 1. 0 = p - monom_mult (lookup p ((0::'a) \\<oplus> lt p) / lc p) (0::'a) p", "by simp"], ["proof (state)\nthis:\n  0 = p - monom_mult (lookup p ((0::'a) \\<oplus> lt p) / lc p) (0::'a) p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single p 0 p (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_trans:\n  assumes \"red_single p p0 f t\" and \"lt g adds\\<^sub>t lt f\" and \"g \\<noteq> 0\"\n  obtains p1 where \"red_single p p1 g (t + (lp f - lp g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1.\n        red_single p p1 g (t + (lp f - lp g)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p1.\n        red_single p p1 g (t + (lp f - lp g)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "let ?s = \"t + (lp f - lp g)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p1.\n        red_single p p1 g (t + (lp f - lp g)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "let ?p = \"p - monom_mult (lookup p (?s \\<oplus> lt g) / lc g) ?s g\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p1.\n        red_single p p1 g (t + (lp f - lp g)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"red_single p ?p g ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p\n     (p -\n      monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n       (t + (lp f - lp g)) g)\n     g (t + (lp f - lp g))", "unfolding red_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<and>\n    lookup p ((t + (lp f - lp g)) \\<oplus> lt g) \\<noteq> (0::'b) \\<and>\n    p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g =\n    p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. g \\<noteq> 0\n 2. lookup p ((t + (lp f - lp g)) \\<oplus> lt g) \\<noteq> (0::'b)\n 3. p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g =\n    p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g", "from assms(2)"], ["proof (chain)\npicking this:\n  lt g adds\\<^sub>t lt f", "have eq: \"?s \\<oplus> lt g = t \\<oplus> lt f\""], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. (t + (lp f - lp g)) \\<oplus> lt g = t \\<oplus> lt f", "using adds_term_alt splus_assoc"], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t lt f\n  (?u adds\\<^sub>t ?v) = (\\<exists>t. ?v = t \\<oplus> ?u)\n  (?s + ?t) \\<oplus> ?v = ?s \\<oplus> (?t \\<oplus> ?v)\n\ngoal (1 subgoal):\n 1. (t + (lp f - lp g)) \\<oplus> lt g = t \\<oplus> lt f", "by (auto simp: term_simps)"], ["proof (state)\nthis:\n  (t + (lp f - lp g)) \\<oplus> lt g = t \\<oplus> lt f\n\ngoal (3 subgoals):\n 1. g \\<noteq> 0\n 2. lookup p ((t + (lp f - lp g)) \\<oplus> lt g) \\<noteq> (0::'b)\n 3. p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g =\n    p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g", "from \\<open>red_single p p0 f t\\<close>"], ["proof (chain)\npicking this:\n  red_single p p0 f t", "have \"lookup p (t \\<oplus> lt f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  red_single p p0 f t\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  p0 = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (3 subgoals):\n 1. g \\<noteq> 0\n 2. lookup p ((t + (lp f - lp g)) \\<oplus> lt g) \\<noteq> (0::'b)\n 3. p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g =\n    p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g", "thus \"lookup p (?s \\<oplus> lt g) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p ((t + (lp f - lp g)) \\<oplus> lt g) \\<noteq> (0::'b)", "by (simp add: eq)"], ["proof (state)\nthis:\n  lookup p ((t + (lp f - lp g)) \\<oplus> lt g) \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. g \\<noteq> 0\n 2. p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g =\n    p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g", "qed (fact, fact refl)"], ["proof (state)\nthis:\n  red_single p\n   (p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g)\n   g (t + (lp f - lp g))\n\ngoal (1 subgoal):\n 1. (\\<And>p1.\n        red_single p p1 g (t + (lp f - lp g)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  red_single p\n   (p -\n    monom_mult (lookup p ((t + (lp f - lp g)) \\<oplus> lt g) / lc g)\n     (t + (lp f - lp g)) g)\n   g (t + (lp f - lp g))\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_nonzero:\n  assumes \"red F p q\"\n  shows \"p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "from red_setE[OF assms]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f t where \"red_single p q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        red_single p q f t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by (rule red_single_nonzero1, fact)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_self:\n  assumes \"p \\<noteq> 0\"\n  shows \"red {p} p 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red {p} p 0", "unfolding red_singleton"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex (red_single p 0 p)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p 0 p ?x", "from red_single_self[OF assms]"], ["proof (chain)\npicking this:\n  red_single p 0 p (0::'a)", "show \"red_single p 0 p 0\""], ["proof (prove)\nusing this:\n  red_single p 0 p (0::'a)\n\ngoal (1 subgoal):\n 1. red_single p 0 p (0::'a)", "."], ["proof (state)\nthis:\n  red_single p 0 p (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_ord:\n  assumes \"red F p q\"\n  shows \"q \\<prec>\\<^sub>p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p p", "from red_setE[OF assms]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f and t where \"red_single p q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        red_single p q f t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p p", "from red_single_ord[OF this]"], ["proof (chain)\npicking this:\n  q \\<prec>\\<^sub>p p", "show \"q \\<prec>\\<^sub>p p\""], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p p", "."], ["proof (state)\nthis:\n  q \\<prec>\\<^sub>p p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_indI1:\n  assumes \"f \\<in> F\" and \"f \\<noteq> 0\" and \"p \\<noteq> 0\" and adds: \"lt f adds\\<^sub>t lt p\"\n  shows \"red F p (p - monom_mult (lc p / lc f) (lp p - lp f) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p (p - monom_mult (lc p / lc f) (lp p - lp f) f)", "proof (intro red_setI[OF \\<open>f \\<in> F\\<close>])"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f ?t", "let ?s = \"lp p - lp f\""], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f ?t", "have c: \"lookup p (?s \\<oplus> lt f) = lc p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p ((lp p - lp f) \\<oplus> lt f) = lc p", "unfolding lc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup p ((lp p - lp f) \\<oplus> lt f) = lookup p (lt p)", "by (metis add_diff_cancel_right' adds adds_termE pp_of_term_splus)"], ["proof (state)\nthis:\n  lookup p ((lp p - lp f) \\<oplus> lt f) = lc p\n\ngoal (1 subgoal):\n 1. red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f ?t", "show \"red_single p (p - monom_mult (lc p / lc f) ?s f) f ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f\n     (lp p - lp f)", "unfolding red_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<and>\n    lookup p ((lp p - lp f) \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n    p - monom_mult (lc p / lc f) (lp p - lp f) f =\n    p -\n    monom_mult (lookup p ((lp p - lp f) \\<oplus> lt f) / lc f) (lp p - lp f)\n     f", "proof (intro conjI, fact)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p ((lp p - lp f) \\<oplus> lt f) \\<noteq> (0::'b)\n 2. p - monom_mult (lc p / lc f) (lp p - lp f) f =\n    p -\n    monom_mult (lookup p ((lp p - lp f) \\<oplus> lt f) / lc f) (lp p - lp f)\n     f", "from c lc_not_0[OF \\<open>p \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  lookup p ((lp p - lp f) \\<oplus> lt f) = lc p\n  lc p \\<noteq> (0::'b)", "show \"lookup p (?s \\<oplus> lt f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p ((lp p - lp f) \\<oplus> lt f) = lc p\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p ((lp p - lp f) \\<oplus> lt f) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup p ((lp p - lp f) \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. p - monom_mult (lc p / lc f) (lp p - lp f) f =\n    p -\n    monom_mult (lookup p ((lp p - lp f) \\<oplus> lt f) / lc f) (lp p - lp f)\n     f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p - monom_mult (lc p / lc f) (lp p - lp f) f =\n    p -\n    monom_mult (lookup p ((lp p - lp f) \\<oplus> lt f) / lc f) (lp p - lp f)\n     f", "from c"], ["proof (chain)\npicking this:\n  lookup p ((lp p - lp f) \\<oplus> lt f) = lc p", "show \"p - monom_mult (lc p / lc f) ?s f = p - monom_mult (lookup p (?s \\<oplus> lt f) / lc f) ?s f\""], ["proof (prove)\nusing this:\n  lookup p ((lp p - lp f) \\<oplus> lt f) = lc p\n\ngoal (1 subgoal):\n 1. p - monom_mult (lc p / lc f) (lp p - lp f) f =\n    p -\n    monom_mult (lookup p ((lp p - lp f) \\<oplus> lt f) / lc f) (lp p - lp f)\n     f", "by simp"], ["proof (state)\nthis:\n  p - monom_mult (lc p / lc f) (lp p - lp f) f =\n  p -\n  monom_mult (lookup p ((lp p - lp f) \\<oplus> lt f) / lc f) (lp p - lp f) f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f\n   (lp p - lp f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_indI2:\n  assumes \"p \\<noteq> 0\" and r: \"red F (tail p) q\"\n  shows \"red F p (q + monomial (lc p) (lt p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p (q + monomial (lc p) (lt p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red F p (q + monomial (lc p) (lt p))", "from red_setE[OF r]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single (tail p) q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f t where \"f \\<in> F\" and rs: \"red_single (tail p) q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single (tail p) q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single (tail p) q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single (tail p) q f t\n\ngoal (1 subgoal):\n 1. red F p (q + monomial (lc p) (lt p))", "from rs"], ["proof (chain)\npicking this:\n  red_single (tail p) q f t", "have \"f \\<noteq> 0\" and ct: \"lookup (tail p) (t \\<oplus> lt f) \\<noteq> 0\"\n    and q: \"q = tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  red_single (tail p) q f t\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "by simp_all"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b)\n  q = tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. red F p (q + monomial (lc p) (lt p))", "from ct lookup_tail[of p \"t \\<oplus> lt f\"]"], ["proof (chain)\npicking this:\n  lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b)\n  lookup (tail p) (t \\<oplus> lt f) =\n  (if t \\<oplus> lt f \\<prec>\\<^sub>t lt p then lookup p (t \\<oplus> lt f)\n   else (0::'b))", "have \"t \\<oplus> lt f \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b)\n  lookup (tail p) (t \\<oplus> lt f) =\n  (if t \\<oplus> lt f \\<prec>\\<^sub>t lt p then lookup p (t \\<oplus> lt f)\n   else (0::'b))\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<prec>\\<^sub>t lt p", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. red F p (q + monomial (lc p) (lt p))", "hence c: \"lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)", "using lookup_tail[of p]"], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<prec>\\<^sub>t lt p\n  lookup (tail p) ?v =\n  (if ?v \\<prec>\\<^sub>t lt p then lookup p ?v else (0::'b))\n\ngoal (1 subgoal):\n 1. lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. red F p (q + monomial (lc p) (lt p))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red F p (q + monomial (lc p) (lt p))", "proof (intro red_setI[OF \\<open>f \\<in> F\\<close>])"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p (q + monomial (lc p) (lt p)) f ?t", "show \"red_single p (q + Poly_Mapping.single (lt p) (lc p)) f t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p (q + monomial (lc p) (lt p)) f t", "unfolding red_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<and>\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n    q + monomial (lc p) (lt p) =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "proof (intro conjI, fact)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n 2. q + monomial (lc p) (lt p) =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "from ct c"], ["proof (chain)\npicking this:\n  lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b)\n  lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)", "show \"lookup p (t \\<oplus> lt f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b)\n  lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. q + monomial (lc p) (lt p) =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q + monomial (lc p) (lt p) =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "from q"], ["proof (chain)\npicking this:\n  q = tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "have \"q + monomial (lc p) (lt p) =\n                  (monomial (lc p) (lt p) + tail p) - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  q = tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q + monomial (lc p) (lt p) =\n    monomial (lc p) (lt p) + tail p -\n    monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "by simp"], ["proof (state)\nthis:\n  q + monomial (lc p) (lt p) =\n  monomial (lc p) (lt p) + tail p -\n  monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q + monomial (lc p) (lt p) =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "also"], ["proof (state)\nthis:\n  q + monomial (lc p) (lt p) =\n  monomial (lc p) (lt p) + tail p -\n  monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q + monomial (lc p) (lt p) =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "have \"\\<dots> = p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) + tail p -\n    monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f =\n    p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "using leading_monomial_tail[of p]"], ["proof (prove)\nusing this:\n  p = monomial (lc p) (lt p) + tail p\n\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) + tail p -\n    monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f =\n    p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "by auto"], ["proof (state)\nthis:\n  monomial (lc p) (lt p) + tail p -\n  monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f =\n  p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q + monomial (lc p) (lt p) =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "finally"], ["proof (chain)\npicking this:\n  q + monomial (lc p) (lt p) =\n  p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "show \"q + monomial (lc p) (lt p) = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  q + monomial (lc p) (lt p) =\n  p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q + monomial (lc p) (lt p) =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by (simp only: c)"], ["proof (state)\nthis:\n  q + monomial (lc p) (lt p) =\n  p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single p (q + monomial (lc p) (lt p)) f t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red F p (q + monomial (lc p) (lt p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_indE:\n  assumes \"red F p q\"\n  shows \"(\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p \\<and>\n            (q = p - monom_mult (lc p / lc f) (lp p - lp f) f)) \\<or>\n            red F (tail p) (q - monomial (lc p) (lt p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "from red_nonzero[OF assms]"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "."], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "from red_setE[OF assms]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f t where \"f \\<in> F\" and rs: \"red_single p q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "from rs"], ["proof (chain)\npicking this:\n  red_single p q f t", "have \"f \\<noteq> 0\"\n    and cn0: \"lookup p (t \\<oplus> lt f) \\<noteq> 0\"\n    and q: \"q = p - monom_mult ((lookup p (t \\<oplus> lt f)) / lc f) t f\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by simp_all"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "proof (cases \"lt p = t \\<oplus> lt f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lt p = t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))\n 2. lt p \\<noteq> t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "case True"], ["proof (state)\nthis:\n  lt p = t \\<oplus> lt f\n\ngoal (2 subgoals):\n 1. lt p = t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))\n 2. lt p \\<noteq> t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "hence \"lt f adds\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt p = t \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. lt f adds\\<^sub>t lt p", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  lt f adds\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. lt p = t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))\n 2. lt p \\<noteq> t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "from True"], ["proof (chain)\npicking this:\n  lt p = t \\<oplus> lt f", "have eq1: \"lp p - lp f = t\""], ["proof (prove)\nusing this:\n  lt p = t \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. lp p - lp f = t", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  lp p - lp f = t\n\ngoal (2 subgoals):\n 1. lt p = t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))\n 2. lt p \\<noteq> t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "from True"], ["proof (chain)\npicking this:\n  lt p = t \\<oplus> lt f", "have eq2: \"lc p = lookup p (t \\<oplus> lt f)\""], ["proof (prove)\nusing this:\n  lt p = t \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. lc p = lookup p (t \\<oplus> lt f)", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lt p = t \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. lookup p (lt p) = lookup p (t \\<oplus> lt f)", "by simp"], ["proof (state)\nthis:\n  lc p = lookup p (t \\<oplus> lt f)\n\ngoal (2 subgoals):\n 1. lt p = t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))\n 2. lt p \\<noteq> t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "proof (intro disjI1, rule bexI[of _ f], intro conjI, fact+)"], ["proof (state)\ngoal (2 subgoals):\n 1. q = p - monom_mult (lc p / lc f) (lp p - lp f) f\n 2. f \\<in> F", "from q eq1 eq2"], ["proof (chain)\npicking this:\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n  lp p - lp f = t\n  lc p = lookup p (t \\<oplus> lt f)", "show \"q = p - monom_mult (lc p / lc f) (lp p - lp f) f\""], ["proof (prove)\nusing this:\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n  lp p - lp f = t\n  lc p = lookup p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. q = p - monom_mult (lc p / lc f) (lp p - lp f) f", "by simp"], ["proof (state)\nthis:\n  q = p - monom_mult (lc p / lc f) (lp p - lp f) f\n\ngoal (1 subgoal):\n 1. f \\<in> F", "qed (fact)"], ["proof (state)\nthis:\n  (\\<exists>f\\<in>F.\n      f \\<noteq> 0 \\<and>\n      lt f adds\\<^sub>t lt p \\<and>\n      q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n  red F (tail p) (q - monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<noteq> t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "case False"], ["proof (state)\nthis:\n  lt p \\<noteq> t \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "from this lookup_tail_2[of p \"t \\<oplus> lt f\"]"], ["proof (chain)\npicking this:\n  lt p \\<noteq> t \\<oplus> lt f\n  lookup (tail p) (t \\<oplus> lt f) =\n  (if t \\<oplus> lt f = lt p then 0::'b else lookup p (t \\<oplus> lt f))", "have ct: \"lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\""], ["proof (prove)\nusing this:\n  lt p \\<noteq> t \\<oplus> lt f\n  lookup (tail p) (t \\<oplus> lt f) =\n  (if t \\<oplus> lt f = lt p then 0::'b else lookup p (t \\<oplus> lt f))\n\ngoal (1 subgoal):\n 1. lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. lt p \\<noteq> t \\<oplus> lt f \\<Longrightarrow>\n    (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F.\n        f \\<noteq> 0 \\<and>\n        lt f adds\\<^sub>t lt p \\<and>\n        q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n    red F (tail p) (q - monomial (lc p) (lt p))", "proof (intro disjI2, intro red_setI[of f], fact)"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single (tail p) (q - monomial (lc p) (lt p)) f ?t1", "show \"red_single (tail p) (q - monomial (lc p) (lt p)) f t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single (tail p) (q - monomial (lc p) (lt p)) f t", "unfolding red_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<and>\n    lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n    q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "proof (intro conjI, fact)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b)\n 2. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "from cn0 ct"], ["proof (chain)\npicking this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)", "show \"lookup (tail p) (t \\<oplus> lt f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (tail p) (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "from leading_monomial_tail[of p]"], ["proof (chain)\npicking this:\n  p = monomial (lc p) (lt p) + tail p", "have \"p - monomial (lc p) (lt p) = (monomial (lc p) (lt p) + tail p) - monomial (lc p) (lt p)\""], ["proof (prove)\nusing this:\n  p = monomial (lc p) (lt p) + tail p\n\ngoal (1 subgoal):\n 1. p - monomial (lc p) (lt p) =\n    monomial (lc p) (lt p) + tail p - monomial (lc p) (lt p)", "by simp"], ["proof (state)\nthis:\n  p - monomial (lc p) (lt p) =\n  monomial (lc p) (lt p) + tail p - monomial (lc p) (lt p)\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "also"], ["proof (state)\nthis:\n  p - monomial (lc p) (lt p) =\n  monomial (lc p) (lt p) + tail p - monomial (lc p) (lt p)\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "have \"\\<dots> = tail p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) + tail p - monomial (lc p) (lt p) = tail p", "by simp"], ["proof (state)\nthis:\n  monomial (lc p) (lt p) + tail p - monomial (lc p) (lt p) = tail p\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "finally"], ["proof (chain)\npicking this:\n  p - monomial (lc p) (lt p) = tail p", "have eq: \"p - monomial (lc p) (lt p) = tail p\""], ["proof (prove)\nusing this:\n  p - monomial (lc p) (lt p) = tail p\n\ngoal (1 subgoal):\n 1. p - monomial (lc p) (lt p) = tail p", "."], ["proof (state)\nthis:\n  p - monomial (lc p) (lt p) = tail p\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "from q"], ["proof (chain)\npicking this:\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "have \"q - monomial (lc p) (lt p) =\n                    (p - monomial (lc p) (lt p)) - monom_mult ((lookup p (t \\<oplus> lt f)) / lc f) t f\""], ["proof (prove)\nusing this:\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    p - monomial (lc p) (lt p) -\n    monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by simp"], ["proof (state)\nthis:\n  q - monomial (lc p) (lt p) =\n  p - monomial (lc p) (lt p) -\n  monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "also"], ["proof (state)\nthis:\n  q - monomial (lc p) (lt p) =\n  p - monomial (lc p) (lt p) -\n  monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "from eq"], ["proof (chain)\npicking this:\n  p - monomial (lc p) (lt p) = tail p", "have \"\\<dots> = tail p - monom_mult ((lookup p (t \\<oplus> lt f)) / lc f) t f\""], ["proof (prove)\nusing this:\n  p - monomial (lc p) (lt p) = tail p\n\ngoal (1 subgoal):\n 1. p - monomial (lc p) (lt p) -\n    monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f =\n    tail p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by simp"], ["proof (state)\nthis:\n  p - monomial (lc p) (lt p) -\n  monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f =\n  tail p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "finally"], ["proof (chain)\npicking this:\n  q - monomial (lc p) (lt p) =\n  tail p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "show \"q - monomial (lc p) (lt p) = tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  q - monomial (lc p) (lt p) =\n  tail p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "using ct"], ["proof (prove)\nusing this:\n  q - monomial (lc p) (lt p) =\n  tail p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n  lookup (tail p) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) =\n    tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f", "by simp"], ["proof (state)\nthis:\n  q - monomial (lc p) (lt p) =\n  tail p - monom_mult (lookup (tail p) (t \\<oplus> lt f) / lc f) t f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single (tail p) (q - monomial (lc p) (lt p)) f t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>f\\<in>F.\n      f \\<noteq> 0 \\<and>\n      lt f adds\\<^sub>t lt p \\<and>\n      q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n  red F (tail p) (q - monomial (lc p) (lt p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>f\\<in>F.\n      f \\<noteq> 0 \\<and>\n      lt f adds\\<^sub>t lt p \\<and>\n      q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n  red F (tail p) (q - monomial (lc p) (lt p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_redI:\n  assumes \"red F a b\"\n  shows \"is_red F a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F a", "unfolding is_red_def relation.is_final_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>b. red F a b)", "by (simp, intro exI[of _ b], fact)"], ["", "lemma is_redE:\n  assumes \"is_red F a\"\n  obtains b where \"red F a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b. red F a b \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  is_red F a\n\ngoal (1 subgoal):\n 1. (\\<And>b. red F a b \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding is_red_def relation.is_final_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>b. red F a b)\n\ngoal (1 subgoal):\n 1. (\\<And>b. red F a b \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "proof simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b. red F a b \\<Longrightarrow> thesis;\n     \\<exists>x. red F a x\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume r: \"\\<And>b. red F a b \\<Longrightarrow> thesis\" and b: \"\\<exists>x. red F a x\""], ["proof (state)\nthis:\n  red F a ?b27 \\<Longrightarrow> thesis\n  \\<exists>x. red F a x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b. red F a b \\<Longrightarrow> thesis;\n     \\<exists>x. red F a x\\<rbrakk>\n    \\<Longrightarrow> thesis", "from b"], ["proof (chain)\npicking this:\n  \\<exists>x. red F a x", "obtain b where \"red F a b\""], ["proof (prove)\nusing this:\n  \\<exists>x. red F a x\n\ngoal (1 subgoal):\n 1. (\\<And>b. red F a b \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  red F a b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b. red F a b \\<Longrightarrow> thesis;\n     \\<exists>x. red F a x\\<rbrakk>\n    \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "by (rule r[of b], fact)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_alt:\n  shows \"is_red F a \\<longleftrightarrow> (\\<exists>b. red F a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F a = (\\<exists>b. red F a b)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red F a \\<Longrightarrow> \\<exists>b. red F a b\n 2. \\<exists>b. red F a b \\<Longrightarrow> is_red F a", "assume \"is_red F a\""], ["proof (state)\nthis:\n  is_red F a\n\ngoal (2 subgoals):\n 1. is_red F a \\<Longrightarrow> \\<exists>b. red F a b\n 2. \\<exists>b. red F a b \\<Longrightarrow> is_red F a", "from is_redE[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>b. red F a b \\<Longrightarrow> ?thesis) \\<Longrightarrow> ?thesis", "obtain b where \"red F a b\""], ["proof (prove)\nusing this:\n  (\\<And>b. red F a b \\<Longrightarrow> ?thesis) \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>b. red F a b \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "."], ["proof (state)\nthis:\n  red F a b\n\ngoal (2 subgoals):\n 1. is_red F a \\<Longrightarrow> \\<exists>b. red F a b\n 2. \\<exists>b. red F a b \\<Longrightarrow> is_red F a", "show \"\\<exists>b. red F a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. red F a b", "by (intro exI[of _ b], fact)"], ["proof (state)\nthis:\n  \\<exists>b. red F a b\n\ngoal (1 subgoal):\n 1. \\<exists>b. red F a b \\<Longrightarrow> is_red F a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>b. red F a b \\<Longrightarrow> is_red F a", "assume \"\\<exists>b. red F a b\""], ["proof (state)\nthis:\n  \\<exists>b. red F a b\n\ngoal (1 subgoal):\n 1. \\<exists>b. red F a b \\<Longrightarrow> is_red F a", "from this"], ["proof (chain)\npicking this:\n  \\<exists>b. red F a b", "obtain b where \"red F a b\""], ["proof (prove)\nusing this:\n  \\<exists>b. red F a b\n\ngoal (1 subgoal):\n 1. (\\<And>b. red F a b \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  red F a b\n\ngoal (1 subgoal):\n 1. \\<exists>b. red F a b \\<Longrightarrow> is_red F a", "show \"is_red F a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F a", "by (rule is_redI, fact)"], ["proof (state)\nthis:\n  is_red F a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_singletonI:\n  assumes \"is_red F q\"\n  obtains p where \"p \\<in> F\" and \"is_red {p} q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> F; is_red {p} q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> F; is_red {p} q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  is_red F q", "obtain q0 where \"red F q q0\""], ["proof (prove)\nusing this:\n  is_red F q\n\ngoal (1 subgoal):\n 1. (\\<And>q0. red F q q0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding is_red_alt"], ["proof (prove)\nusing this:\n  Ex (red F q)\n\ngoal (1 subgoal):\n 1. (\\<And>q0. red F q q0 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  red F q q0\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> F; is_red {p} q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this red_def[of F q q0]"], ["proof (chain)\npicking this:\n  red F q q0\n  red F q q0 = (\\<exists>f\\<in>F. \\<exists>t. red_single q q0 f t)", "obtain p where \"p \\<in> F\" and t: \"\\<exists>t. red_single q q0 p t\""], ["proof (prove)\nusing this:\n  red F q q0\n  red F q q0 = (\\<exists>f\\<in>F. \\<exists>t. red_single q q0 f t)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> F; \\<exists>t. red_single q q0 p t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p \\<in> F\n  \\<exists>t. red_single q q0 p t\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> F; is_red {p} q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"is_red {p} q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red {p} q", "unfolding is_red_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex (red {p} q)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. red {p} q ?x", "from red_singleton[of p q q0] t"], ["proof (chain)\npicking this:\n  red {p} q q0 = (\\<exists>t. red_single q q0 p t)\n  \\<exists>t. red_single q q0 p t", "show \"red {p} q q0\""], ["proof (prove)\nusing this:\n  red {p} q q0 = (\\<exists>t. red_single q q0 p t)\n  \\<exists>t. red_single q q0 p t\n\ngoal (1 subgoal):\n 1. red {p} q q0", "by simp"], ["proof (state)\nthis:\n  red {p} q q0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red {p} q\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> F; is_red {p} q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>p \\<in> F\\<close> this"], ["proof (chain)\npicking this:\n  p \\<in> F\n  is_red {p} q", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> F\n  is_red {p} q\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_singletonD:\n  assumes \"is_red {p} q\" and \"p \\<in> F\"\n  shows \"is_red F q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red F q", "from assms(1)"], ["proof (chain)\npicking this:\n  is_red {p} q", "obtain q0 where \"red {p} q q0\""], ["proof (prove)\nusing this:\n  is_red {p} q\n\ngoal (1 subgoal):\n 1. (\\<And>q0. red {p} q q0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_red_alt"], ["proof (prove)\nusing this:\n  Ex (red {p} q)\n\ngoal (1 subgoal):\n 1. (\\<And>q0. red {p} q q0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  red {p} q q0\n\ngoal (1 subgoal):\n 1. is_red F q", "from red_singleton[of p q q0] this"], ["proof (chain)\npicking this:\n  red {p} q q0 = (\\<exists>t. red_single q q0 p t)\n  red {p} q q0", "have \"\\<exists>t. red_single q q0 p t\""], ["proof (prove)\nusing this:\n  red {p} q q0 = (\\<exists>t. red_single q q0 p t)\n  red {p} q q0\n\ngoal (1 subgoal):\n 1. \\<exists>t. red_single q q0 p t", ".."], ["proof (state)\nthis:\n  \\<exists>t. red_single q q0 p t\n\ngoal (1 subgoal):\n 1. is_red F q", "from this"], ["proof (chain)\npicking this:\n  \\<exists>t. red_single q q0 p t", "obtain t where \"red_single q q0 p t\""], ["proof (prove)\nusing this:\n  \\<exists>t. red_single q q0 p t\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        red_single q q0 p t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  red_single q q0 p t\n\ngoal (1 subgoal):\n 1. is_red F q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F q", "unfolding is_red_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex (red F q)", "by (intro exI[of _ q0], intro red_setI[OF assms(2), of q q0 t], fact)"], ["proof (state)\nthis:\n  is_red F q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_singleton_trans:\n  assumes \"is_red {f} p\" and \"lt g adds\\<^sub>t lt f\" and \"g \\<noteq> 0\"\n  shows \"is_red {g} p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red {g} p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red {g} p", "from \\<open>is_red {f} p\\<close>"], ["proof (chain)\npicking this:\n  is_red {f} p", "obtain q where \"red {f} p q\""], ["proof (prove)\nusing this:\n  is_red {f} p\n\ngoal (1 subgoal):\n 1. (\\<And>q. red {f} p q \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding is_red_alt"], ["proof (prove)\nusing this:\n  Ex (red {f} p)\n\ngoal (1 subgoal):\n 1. (\\<And>q. red {f} p q \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  red {f} p q\n\ngoal (1 subgoal):\n 1. is_red {g} p", "from this red_singleton[of f p q]"], ["proof (chain)\npicking this:\n  red {f} p q\n  red {f} p q = (\\<exists>t. red_single p q f t)", "obtain t where \"red_single p q f t\""], ["proof (prove)\nusing this:\n  red {f} p q\n  red {f} p q = (\\<exists>t. red_single p q f t)\n\ngoal (1 subgoal):\n 1. (\\<And>t. red_single p q f t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. is_red {g} p", "from red_single_trans[OF this assms(2, 3)]"], ["proof (chain)\npicking this:\n  (\\<And>p1.\n      red_single p p1 g (t + (lp f - lp g)) \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain q0 where\n    \"red_single p q0 g (t + (lp f - lp g))\""], ["proof (prove)\nusing this:\n  (\\<And>p1.\n      red_single p p1 g (t + (lp f - lp g)) \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q0.\n        red_single p q0 g (t + (lp f - lp g)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  red_single p q0 g (t + (lp f - lp g))\n\ngoal (1 subgoal):\n 1. is_red {g} p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red {g} p", "proof (rule is_redI[of \"{g}\" p q0])"], ["proof (state)\ngoal (1 subgoal):\n 1. red {g} p q0", "show \"red {g} p q0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red {g} p q0", "unfolding red_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>{g}. Ex (red_single p q0 f)", "by (intro bexI[of _ g], intro exI[of _ \"t + (lp f - lp g)\"], fact, simp)"], ["proof (state)\nthis:\n  red {g} p q0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red {g} p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_singleton_not_0:\n  assumes \"is_red {f} p\"\n  shows \"f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  is_red {f} p\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "unfolding is_red_alt"], ["proof (prove)\nusing this:\n  Ex (red {f} p)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. red {f} p x \\<Longrightarrow> f \\<noteq> 0", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. red {f} p x \\<Longrightarrow> f \\<noteq> 0", "assume \"red {f} p q\""], ["proof (state)\nthis:\n  red {f} p q\n\ngoal (1 subgoal):\n 1. \\<And>x. red {f} p x \\<Longrightarrow> f \\<noteq> 0", "from this red_singleton[of f p q]"], ["proof (chain)\npicking this:\n  red {f} p q\n  red {f} p q = (\\<exists>t. red_single p q f t)", "obtain t where \"red_single p q f t\""], ["proof (prove)\nusing this:\n  red {f} p q\n  red {f} p q = (\\<exists>t. red_single p q f t)\n\ngoal (1 subgoal):\n 1. (\\<And>t. red_single p q f t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. \\<And>x. red {f} p x \\<Longrightarrow> f \\<noteq> 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", ".."], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irred_0:\n  shows \"\\<not> is_red F 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red F 0", "proof (rule, rule is_redE)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red F 0 \\<Longrightarrow> is_red ?F2 ?a2\n 2. \\<And>b.\n       \\<lbrakk>is_red F 0; red ?F2 ?a2 b\\<rbrakk> \\<Longrightarrow> False", "fix b"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red F 0 \\<Longrightarrow> is_red ?F2 ?a2\n 2. \\<And>b.\n       \\<lbrakk>is_red F 0; red ?F2 ?a2 b\\<rbrakk> \\<Longrightarrow> False", "assume \"red F 0 b\""], ["proof (state)\nthis:\n  red F 0 b\n\ngoal (2 subgoals):\n 1. is_red F 0 \\<Longrightarrow> is_red ?F2 ?a2\n 2. \\<And>b.\n       \\<lbrakk>is_red F 0; red ?F2 ?a2 b\\<rbrakk> \\<Longrightarrow> False", "from ord_p_zero_min[of b] red_ord[OF this]"], ["proof (chain)\npicking this:\n  0 \\<preceq>\\<^sub>p b\n  b \\<prec>\\<^sub>p 0", "show False"], ["proof (prove)\nusing this:\n  0 \\<preceq>\\<^sub>p b\n  b \\<prec>\\<^sub>p 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. is_red F 0 \\<Longrightarrow> is_red F 0", "qed"], ["", "lemma is_red_indI1:\n  assumes \"f \\<in> F\" and \"f \\<noteq> 0\" and \"p \\<noteq> 0\" and \"lt f adds\\<^sub>t lt p\"\n  shows \"is_red F p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p", "by (intro is_redI, rule red_indI1[OF assms])"], ["", "lemma is_red_indI2:\n  assumes \"p \\<noteq> 0\" and \"is_red F (tail p)\"\n  shows \"is_red F p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red F p", "from is_redE[OF \\<open>is_red F (tail p)\\<close>]"], ["proof (chain)\npicking this:\n  (\\<And>b. red F (tail p) b \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain q where \"red F (tail p) q\""], ["proof (prove)\nusing this:\n  (\\<And>b. red F (tail p) b \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q. red F (tail p) q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  red F (tail p) q\n\ngoal (1 subgoal):\n 1. is_red F p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p", "by (intro is_redI, rule red_indI2[OF \\<open>p \\<noteq> 0\\<close>], fact)"], ["proof (state)\nthis:\n  is_red F p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_indE:\n  assumes \"is_red F p\"\n  shows \"(\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or> is_red F (tail p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "from is_redE[OF assms]"], ["proof (chain)\npicking this:\n  (\\<And>b. red F p b \\<Longrightarrow> ?thesis) \\<Longrightarrow> ?thesis", "obtain q where \"red F p q\""], ["proof (prove)\nusing this:\n  (\\<And>b. red F p b \\<Longrightarrow> ?thesis) \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q. red F p q \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "."], ["proof (state)\nthis:\n  red F p q\n\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "from red_indE[OF this]"], ["proof (chain)\npicking this:\n  (\\<exists>f\\<in>F.\n      f \\<noteq> 0 \\<and>\n      lt f adds\\<^sub>t lt p \\<and>\n      q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n  red F (tail p) (q - monomial (lc p) (lt p))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>f\\<in>F.\n      f \\<noteq> 0 \\<and>\n      lt f adds\\<^sub>t lt p \\<and>\n      q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n  red F (tail p) (q - monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>F.\n       f \\<noteq> 0 \\<and>\n       lt f adds\\<^sub>t lt p \\<and>\n       q = p - monom_mult (lc p / lc f) (lp p - lp f) f \\<Longrightarrow>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)\n 2. red F (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "assume \"\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p \\<and> q = p - monom_mult (lc p / lc f) (lp p - lp f) f\""], ["proof (state)\nthis:\n  \\<exists>f\\<in>F.\n     f \\<noteq> 0 \\<and>\n     lt f adds\\<^sub>t lt p \\<and>\n     q = p - monom_mult (lc p / lc f) (lp p - lp f) f\n\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>F.\n       f \\<noteq> 0 \\<and>\n       lt f adds\\<^sub>t lt p \\<and>\n       q = p - monom_mult (lc p / lc f) (lp p - lp f) f \\<Longrightarrow>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)\n 2. red F (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>f\\<in>F.\n     f \\<noteq> 0 \\<and>\n     lt f adds\\<^sub>t lt p \\<and>\n     q = p - monom_mult (lc p / lc f) (lp p - lp f) f", "obtain f where \"f \\<in> F\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>F.\n     f \\<noteq> 0 \\<and>\n     lt f adds\\<^sub>t lt p \\<and>\n     q = p - monom_mult (lc p / lc f) (lp p - lp f) f\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t lt p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> F\n  f \\<noteq> 0\n  lt f adds\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>F.\n       f \\<noteq> 0 \\<and>\n       lt f adds\\<^sub>t lt p \\<and>\n       q = p - monom_mult (lc p / lc f) (lp p - lp f) f \\<Longrightarrow>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)\n 2. red F (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "by (intro disjI1, rule bexI[of _ f], intro conjI, fact+)"], ["proof (state)\nthis:\n  (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n  is_red F (tail p)\n\ngoal (1 subgoal):\n 1. red F (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. red F (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "assume \"red F (tail p) (q - monomial (lc p) (lt p))\""], ["proof (state)\nthis:\n  red F (tail p) (q - monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. red F (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n    is_red F (tail p)", "by (intro disjI2, intro is_redI, fact)"], ["proof (state)\nthis:\n  (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n  is_red F (tail p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n  is_red F (tail p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rtrancl_0:\n  assumes \"(red F)\\<^sup>*\\<^sup>* 0 x\"\n  shows \"x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x = 0", "from irred_0[of F]"], ["proof (chain)\npicking this:\n  \\<not> is_red F 0", "have \"relation.is_final (red F) 0\""], ["proof (prove)\nusing this:\n  \\<not> is_red F 0\n\ngoal (1 subgoal):\n 1. relation.is_final (red F) 0", "unfolding is_red_def"], ["proof (prove)\nusing this:\n  \\<not> \\<not> relation.is_final (red F) 0\n\ngoal (1 subgoal):\n 1. relation.is_final (red F) 0", "by simp"], ["proof (state)\nthis:\n  relation.is_final (red F) 0\n\ngoal (1 subgoal):\n 1. x = 0", "from relation.rtrancl_is_final[OF \\<open>(red F)\\<^sup>*\\<^sup>* 0 x\\<close> this]"], ["proof (chain)\npicking this:\n  0 = x", "show ?thesis"], ["proof (prove)\nusing this:\n  0 = x\n\ngoal (1 subgoal):\n 1. x = 0", "by simp"], ["proof (state)\nthis:\n  x = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_rtrancl_ord:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"q \\<preceq>\\<^sub>p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<preceq>\\<^sub>p p", "using assms"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. q \\<preceq>\\<^sub>p p", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<preceq>\\<^sub>p p\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<preceq>\\<^sub>p p\\<rbrakk>\n       \\<Longrightarrow> z \\<preceq>\\<^sub>p p", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. p \\<preceq>\\<^sub>p p\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<preceq>\\<^sub>p p\\<rbrakk>\n       \\<Longrightarrow> z \\<preceq>\\<^sub>p p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<preceq>\\<^sub>p p", ".."], ["proof (state)\nthis:\n  p \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<preceq>\\<^sub>p p\\<rbrakk>\n       \\<Longrightarrow> z \\<preceq>\\<^sub>p p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<preceq>\\<^sub>p p\\<rbrakk>\n       \\<Longrightarrow> z \\<preceq>\\<^sub>p p", "case (step y z)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p y\n  red F y z\n  y \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<preceq>\\<^sub>p p\\<rbrakk>\n       \\<Longrightarrow> z \\<preceq>\\<^sub>p p", "from step(2)"], ["proof (chain)\npicking this:\n  red F y z", "have \"z \\<prec>\\<^sub>p y\""], ["proof (prove)\nusing this:\n  red F y z\n\ngoal (1 subgoal):\n 1. z \\<prec>\\<^sub>p y", "by (rule red_ord)"], ["proof (state)\nthis:\n  z \\<prec>\\<^sub>p y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<preceq>\\<^sub>p p\\<rbrakk>\n       \\<Longrightarrow> z \\<preceq>\\<^sub>p p", "hence \"z \\<preceq>\\<^sub>p y\""], ["proof (prove)\nusing this:\n  z \\<prec>\\<^sub>p y\n\ngoal (1 subgoal):\n 1. z \\<preceq>\\<^sub>p y", "by simp"], ["proof (state)\nthis:\n  z \\<preceq>\\<^sub>p y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<preceq>\\<^sub>p p\\<rbrakk>\n       \\<Longrightarrow> z \\<preceq>\\<^sub>p p", "also"], ["proof (state)\nthis:\n  z \\<preceq>\\<^sub>p y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<preceq>\\<^sub>p p\\<rbrakk>\n       \\<Longrightarrow> z \\<preceq>\\<^sub>p p", "note step(3)"], ["proof (state)\nthis:\n  y \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<preceq>\\<^sub>p p\\<rbrakk>\n       \\<Longrightarrow> z \\<preceq>\\<^sub>p p", "finally"], ["proof (chain)\npicking this:\n  z \\<preceq>\\<^sub>p p", "show ?case"], ["proof (prove)\nusing this:\n  z \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. z \\<preceq>\\<^sub>p p", "."], ["proof (state)\nthis:\n  z \\<preceq>\\<^sub>p p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma components_red_subset:\n  assumes \"red F p q\"\n  shows \"component_of_term ` keys q \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "from assms"], ["proof (chain)\npicking this:\n  red F p q", "obtain f t where \"f \\<in> F\" and \"red_single p q f t\""], ["proof (prove)\nusing this:\n  red F p q\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_setE)"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "from this(2)"], ["proof (chain)\npicking this:\n  red_single p q f t", "have q: \"q = p - monom_mult ((lookup p (t \\<oplus> lt f)) / lc f) t f\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by (simp add: red_single_def)"], ["proof (state)\nthis:\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "have \"component_of_term ` keys q \\<subseteq>\n        component_of_term ` (keys p \\<union> keys (monom_mult ((lookup p (t \\<oplus> lt f)) / lc f) t f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term `\n                (keys p \\<union>\n                 keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))", "by (rule image_mono, simp add: q keys_minus)"], ["proof (state)\nthis:\n  component_of_term ` keys q\n  \\<subseteq> component_of_term `\n              (keys p \\<union>\n               keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))\n\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "also"], ["proof (state)\nthis:\n  component_of_term ` keys q\n  \\<subseteq> component_of_term `\n              (keys p \\<union>\n               keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))\n\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "have \"... \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term `\n    (keys p \\<union>\n     keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "proof (simp add: image_Un, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "assume \"k \\<in> component_of_term ` keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\""], ["proof (state)\nthis:\n  k \\<in> component_of_term `\n          keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "then"], ["proof (chain)\npicking this:\n  k \\<in> component_of_term `\n          keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)", "obtain v where \"v \\<in> keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\"\n      and \"k = component_of_term v\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term `\n          keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys\n                          (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                            f);\n         k = component_of_term v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  v \\<in> keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n  k = component_of_term v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "from this(1) keys_monom_mult_subset"], ["proof (chain)\npicking this:\n  v \\<in> keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p", "have \"v \\<in> (\\<oplus>) t ` keys f\""], ["proof (prove)\nusing this:\n  v \\<in> keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n  keys (monom_mult ?c ?t ?p) \\<subseteq> (\\<oplus>) ?t ` keys ?p\n\ngoal (1 subgoal):\n 1. v \\<in> (\\<oplus>) t ` keys f", ".."], ["proof (state)\nthis:\n  v \\<in> (\\<oplus>) t ` keys f\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "then"], ["proof (chain)\npicking this:\n  v \\<in> (\\<oplus>) t ` keys f", "obtain u where \"u \\<in> keys f\" and \"v = t \\<oplus> u\""], ["proof (prove)\nusing this:\n  v \\<in> (\\<oplus>) t ` keys f\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys f; v = t \\<oplus> u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> keys f\n  v = t \\<oplus> u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "have \"k = component_of_term u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = component_of_term u", "by (simp add: \\<open>k = component_of_term v\\<close> \\<open>v = t \\<oplus> u\\<close> term_simps)"], ["proof (state)\nthis:\n  k = component_of_term u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "with \\<open>u \\<in> keys f\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys f\n  k = component_of_term u", "have \"k \\<in> component_of_term ` keys f\""], ["proof (prove)\nusing this:\n  u \\<in> keys f\n  k = component_of_term u\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` keys f", "by fastforce"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` keys f\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "also"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` keys f\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "have \"... \\<subseteq> component_of_term ` Keys F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` keys f \\<subseteq> component_of_term ` Keys F", "by (rule image_mono, rule keys_subset_Keys, fact)"], ["proof (state)\nthis:\n  component_of_term ` keys f \\<subseteq> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> component_of_term `\n               keys\n                (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t\n                  f) \\<Longrightarrow>\n       x \\<in> component_of_term ` keys p \\<union>\n               component_of_term ` Keys F", "finally"], ["proof (chain)\npicking this:\n  k \\<in> component_of_term ` Keys F", "show \"k \\<in> component_of_term ` keys p \\<union> component_of_term ` Keys F\""], ["proof (prove)\nusing this:\n  k \\<in> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. k \\<in> component_of_term ` keys p \\<union> component_of_term ` Keys F", "by simp"], ["proof (state)\nthis:\n  k \\<in> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term `\n  (keys p \\<union>\n   keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "finally"], ["proof (chain)\npicking this:\n  component_of_term ` keys q\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F", "show ?thesis"], ["proof (prove)\nusing this:\n  component_of_term ` keys q\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "."], ["proof (state)\nthis:\n  component_of_term ` keys q\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary components_red_rtrancl_subset:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"component_of_term ` keys q \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "using assms"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. component_of_term ` keys p\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        component_of_term ` keys y\n        \\<subseteq> component_of_term ` keys p \\<union>\n                    component_of_term ` Keys F\\<rbrakk>\n       \\<Longrightarrow> component_of_term ` keys z\n                         \\<subseteq> component_of_term ` keys p \\<union>\n                                     component_of_term ` Keys F", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. component_of_term ` keys p\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        component_of_term ` keys y\n        \\<subseteq> component_of_term ` keys p \\<union>\n                    component_of_term ` Keys F\\<rbrakk>\n       \\<Longrightarrow> component_of_term ` keys z\n                         \\<subseteq> component_of_term ` keys p \\<union>\n                                     component_of_term ` Keys F", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` keys p\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "by simp"], ["proof (state)\nthis:\n  component_of_term ` keys p\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        component_of_term ` keys y\n        \\<subseteq> component_of_term ` keys p \\<union>\n                    component_of_term ` Keys F\\<rbrakk>\n       \\<Longrightarrow> component_of_term ` keys z\n                         \\<subseteq> component_of_term ` keys p \\<union>\n                                     component_of_term ` Keys F", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        component_of_term ` keys y\n        \\<subseteq> component_of_term ` keys p \\<union>\n                    component_of_term ` Keys F\\<rbrakk>\n       \\<Longrightarrow> component_of_term ` keys z\n                         \\<subseteq> component_of_term ` keys p \\<union>\n                                     component_of_term ` Keys F", "case (step q r)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p q\n  red F q r\n  component_of_term ` keys q\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        component_of_term ` keys y\n        \\<subseteq> component_of_term ` keys p \\<union>\n                    component_of_term ` Keys F\\<rbrakk>\n       \\<Longrightarrow> component_of_term ` keys z\n                         \\<subseteq> component_of_term ` keys p \\<union>\n                                     component_of_term ` Keys F", "from step(2)"], ["proof (chain)\npicking this:\n  red F q r", "have \"component_of_term ` keys r \\<subseteq> component_of_term ` keys q \\<union> component_of_term ` Keys F\""], ["proof (prove)\nusing this:\n  red F q r\n\ngoal (1 subgoal):\n 1. component_of_term ` keys r\n    \\<subseteq> component_of_term ` keys q \\<union>\n                component_of_term ` Keys F", "by (rule components_red_subset)"], ["proof (state)\nthis:\n  component_of_term ` keys r\n  \\<subseteq> component_of_term ` keys q \\<union> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        component_of_term ` keys y\n        \\<subseteq> component_of_term ` keys p \\<union>\n                    component_of_term ` Keys F\\<rbrakk>\n       \\<Longrightarrow> component_of_term ` keys z\n                         \\<subseteq> component_of_term ` keys p \\<union>\n                                     component_of_term ` Keys F", "also"], ["proof (state)\nthis:\n  component_of_term ` keys r\n  \\<subseteq> component_of_term ` keys q \\<union> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        component_of_term ` keys y\n        \\<subseteq> component_of_term ` keys p \\<union>\n                    component_of_term ` Keys F\\<rbrakk>\n       \\<Longrightarrow> component_of_term ` keys z\n                         \\<subseteq> component_of_term ` keys p \\<union>\n                                     component_of_term ` Keys F", "from step(3)"], ["proof (chain)\npicking this:\n  component_of_term ` keys q\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F", "have \"... \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\""], ["proof (prove)\nusing this:\n  component_of_term ` keys q\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. component_of_term ` keys q \\<union> component_of_term ` Keys F\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "by blast"], ["proof (state)\nthis:\n  component_of_term ` keys q \\<union> component_of_term ` Keys F\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        component_of_term ` keys y\n        \\<subseteq> component_of_term ` keys p \\<union>\n                    component_of_term ` Keys F\\<rbrakk>\n       \\<Longrightarrow> component_of_term ` keys z\n                         \\<subseteq> component_of_term ` keys p \\<union>\n                                     component_of_term ` Keys F", "finally"], ["proof (chain)\npicking this:\n  component_of_term ` keys r\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F", "show ?case"], ["proof (prove)\nusing this:\n  component_of_term ` keys r\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal (1 subgoal):\n 1. component_of_term ` keys r\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys F", "."], ["proof (state)\nthis:\n  component_of_term ` keys r\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys F\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Reducibility and Addition \\& Multiplication\\<close>"], ["", "lemma red_single_monom_mult:\n  assumes \"red_single p q f t\" and \"c \\<noteq> 0\"\n  shows \"red_single (monom_mult c s p) (monom_mult c s q) f (s + t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single (monom_mult c s p) (monom_mult c s q) f (s + t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single (monom_mult c s p) (monom_mult c s q) f (s + t)", "from assms(1)"], ["proof (chain)\npicking this:\n  red_single p q f t", "have \"f \\<noteq> 0\"\n    and \"lookup p (t \\<oplus> lt f) \\<noteq> 0\"\n    and q_def: \"q = p - monom_mult ((lookup p (t \\<oplus> lt f)) / lc f) t f\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. red_single (monom_mult c s p) (monom_mult c s q) f (s + t)", "have assoc: \"(s + t) \\<oplus> lt f = s \\<oplus> (t \\<oplus> lt f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s + t) \\<oplus> lt f = s \\<oplus> (t \\<oplus> lt f)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  (s + t) \\<oplus> lt f = s \\<oplus> (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. red_single (monom_mult c s p) (monom_mult c s q) f (s + t)", "have g2: \"lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) \\<noteq> (0::'b)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) =\n    (0::'b) \\<Longrightarrow>\n    False", "assume \"lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) = 0\""], ["proof (state)\nthis:\n  lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) =\n    (0::'b) \\<Longrightarrow>\n    False", "hence \"c * lookup p (t \\<oplus> lt f) = 0\""], ["proof (prove)\nusing this:\n  lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. c * lookup p (t \\<oplus> lt f) = (0::'b)", "using assoc"], ["proof (prove)\nusing this:\n  lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) = (0::'b)\n  (s + t) \\<oplus> lt f = s \\<oplus> (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. c * lookup p (t \\<oplus> lt f) = (0::'b)", "by (simp add: lookup_monom_mult_plus)"], ["proof (state)\nthis:\n  c * lookup p (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) =\n    (0::'b) \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  c * lookup p (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>c \\<noteq> 0\\<close> \\<open>lookup p (t \\<oplus> lt f) \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  c * lookup p (t \\<oplus> lt f) = (0::'b)\n  c \\<noteq> (0::'b)\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. red_single (monom_mult c s p) (monom_mult c s q) f (s + t)", "have g3: \"monom_mult c s q =\n    (monom_mult c s p) - monom_mult ((lookup (monom_mult c s p) ((s + t) \\<oplus> lt f)) / lc f) (s + t) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult c s q =\n    monom_mult c s p -\n    monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n     (s + t) f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. monom_mult c s q =\n    monom_mult c s p -\n    monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n     (s + t) f", "from q_def monom_mult_dist_right_minus[of c s p]"], ["proof (chain)\npicking this:\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n  monom_mult c s (p - ?q) = monom_mult c s p - monom_mult c s ?q", "have \"monom_mult c s q =\n            monom_mult c s p - monom_mult c s (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\""], ["proof (prove)\nusing this:\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n  monom_mult c s (p - ?q) = monom_mult c s p - monom_mult c s ?q\n\ngoal (1 subgoal):\n 1. monom_mult c s q =\n    monom_mult c s p -\n    monom_mult c s (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)", "by simp"], ["proof (state)\nthis:\n  monom_mult c s q =\n  monom_mult c s p -\n  monom_mult c s (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n\ngoal (1 subgoal):\n 1. monom_mult c s q =\n    monom_mult c s p -\n    monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n     (s + t) f", "also"], ["proof (state)\nthis:\n  monom_mult c s q =\n  monom_mult c s p -\n  monom_mult c s (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f)\n\ngoal (1 subgoal):\n 1. monom_mult c s q =\n    monom_mult c s p -\n    monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n     (s + t) f", "from monom_mult_assoc[of c s \"lookup p (t \\<oplus> lt f) / lc f\" t f] assoc"], ["proof (chain)\npicking this:\n  monom_mult c s (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) =\n  monom_mult (c * (lookup p (t \\<oplus> lt f) / lc f)) (s + t) f\n  (s + t) \\<oplus> lt f = s \\<oplus> (t \\<oplus> lt f)", "have \"monom_mult c s (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) =\n            monom_mult ((lookup (monom_mult c s p) ((s + t) \\<oplus> lt f)) / lc f) (s + t) f\""], ["proof (prove)\nusing this:\n  monom_mult c s (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) =\n  monom_mult (c * (lookup p (t \\<oplus> lt f) / lc f)) (s + t) f\n  (s + t) \\<oplus> lt f = s \\<oplus> (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. monom_mult c s (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) =\n    monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n     (s + t) f", "by (simp add: lookup_monom_mult_plus)"], ["proof (state)\nthis:\n  monom_mult c s (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) =\n  monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n   (s + t) f\n\ngoal (1 subgoal):\n 1. monom_mult c s q =\n    monom_mult c s p -\n    monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n     (s + t) f", "finally"], ["proof (chain)\npicking this:\n  monom_mult c s q =\n  monom_mult c s p -\n  monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n   (s + t) f", "show ?thesis"], ["proof (prove)\nusing this:\n  monom_mult c s q =\n  monom_mult c s p -\n  monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n   (s + t) f\n\ngoal (1 subgoal):\n 1. monom_mult c s q =\n    monom_mult c s p -\n    monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n     (s + t) f", "."], ["proof (state)\nthis:\n  monom_mult c s q =\n  monom_mult c s p -\n  monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n   (s + t) f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  monom_mult c s q =\n  monom_mult c s p -\n  monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n   (s + t) f\n\ngoal (1 subgoal):\n 1. red_single (monom_mult c s p) (monom_mult c s q) f (s + t)", "from \\<open>f \\<noteq> 0\\<close> g2 g3"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) \\<noteq> (0::'b)\n  monom_mult c s q =\n  monom_mult c s p -\n  monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n   (s + t) f", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) \\<noteq> (0::'b)\n  monom_mult c s q =\n  monom_mult c s p -\n  monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n   (s + t) f\n\ngoal (1 subgoal):\n 1. red_single (monom_mult c s p) (monom_mult c s q) f (s + t)", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) \\<noteq> (0::'b)\n  monom_mult c s q =\n  monom_mult c s p -\n  monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n   (s + t) f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<and>\n    lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) \\<noteq>\n    (0::'b) \\<and>\n    monom_mult c s q =\n    monom_mult c s p -\n    monom_mult (lookup (monom_mult c s p) ((s + t) \\<oplus> lt f) / lc f)\n     (s + t) f", "by auto"], ["proof (state)\nthis:\n  red_single (monom_mult c s p) (monom_mult c s q) f (s + t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_plus_1:\n  assumes \"red_single p q f t\" and \"t \\<oplus> lt f \\<notin> keys (p + r)\"\n  shows \"red_single (q + r) (p + r) f t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t", "from assms"], ["proof (chain)\npicking this:\n  red_single p q f t\n  t \\<oplus> lt f \\<notin> keys (p + r)", "have \"f \\<noteq> 0\" and \"lookup p (t \\<oplus> lt f) \\<noteq> 0\"\n    and q: \"q = p - monom_mult ((lookup p (t \\<oplus> lt f)) / lc f) t f\""], ["proof (prove)\nusing this:\n  red_single p q f t\n  t \\<oplus> lt f \\<notin> keys (p + r)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by (simp_all add: red_single_def)"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t", "from assms(1)"], ["proof (chain)\npicking this:\n  red_single p q f t", "have cq_0: \"lookup q (t \\<oplus> lt f) = 0\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) = (0::'b)", "by (rule red_single_lookup)"], ["proof (state)\nthis:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t", "from assms(2)"], ["proof (chain)\npicking this:\n  t \\<oplus> lt f \\<notin> keys (p + r)", "have \"lookup (p + r) (t \\<oplus> lt f) = 0\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<notin> keys (p + r)\n\ngoal (1 subgoal):\n 1. lookup (p + r) (t \\<oplus> lt f) = (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup (p + r) (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t", "with neg_eq_iff_add_eq_0[of \"lookup p (t \\<oplus> lt f)\" \"lookup r (t \\<oplus> lt f)\"]"], ["proof (chain)\npicking this:\n  (- lookup p (t \\<oplus> lt f) = lookup r (t \\<oplus> lt f)) =\n  (lookup p (t \\<oplus> lt f) + lookup r (t \\<oplus> lt f) = (0::'b))\n  lookup (p + r) (t \\<oplus> lt f) = (0::'b)", "have cr: \"lookup r (t \\<oplus> lt f) = - (lookup p (t \\<oplus> lt f))\""], ["proof (prove)\nusing this:\n  (- lookup p (t \\<oplus> lt f) = lookup r (t \\<oplus> lt f)) =\n  (lookup p (t \\<oplus> lt f) + lookup r (t \\<oplus> lt f) = (0::'b))\n  lookup (p + r) (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup r (t \\<oplus> lt f) = - lookup p (t \\<oplus> lt f)", "by (simp add: lookup_add)"], ["proof (state)\nthis:\n  lookup r (t \\<oplus> lt f) = - lookup p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t", "hence cr_not_0: \"lookup r (t \\<oplus> lt f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup r (t \\<oplus> lt f) = - lookup p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. lookup r (t \\<oplus> lt f) \\<noteq> (0::'b)", "using \\<open>lookup p (t \\<oplus> lt f) \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  lookup r (t \\<oplus> lt f) = - lookup p (t \\<oplus> lt f)\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup r (t \\<oplus> lt f) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup r (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t", "from \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<and>\n    lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n    p + r = q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n 3. f \\<noteq> 0 \\<Longrightarrow>\n    p + r = q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "from cr_not_0"], ["proof (chain)\npicking this:\n  lookup r (t \\<oplus> lt f) \\<noteq> (0::'b)", "show \"lookup (q + r) (t \\<oplus> lt f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup r (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)", "by (simp add: lookup_add cq_0)"], ["proof (state)\nthis:\n  lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    p + r = q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    p + r = q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "from lc_not_0[OF \\<open>f \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  lc f \\<noteq> (0::'b)", "have \"monom_mult ((lookup (q + r) (t \\<oplus> lt f)) / lc f) t f =\n                  monom_mult ((lookup r (t \\<oplus> lt f)) / lc f) t f\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f =\n    monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f", "by (simp add: field_simps lookup_add cq_0)"], ["proof (state)\nthis:\n  monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f =\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    p + r = q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "thus \"p + r = q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f =\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. p + r = q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "by (simp add: cr q monom_mult_uminus_left)"], ["proof (state)\nthis:\n  p + r = q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0", "qed"], ["proof (state)\nthis:\n  red_single (q + r) (p + r) f t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_plus_2:\n  assumes \"red_single p q f t\" and \"t \\<oplus> lt f \\<notin> keys (q + r)\"\n  shows \"red_single (p + r) (q + r) f t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t", "from assms"], ["proof (chain)\npicking this:\n  red_single p q f t\n  t \\<oplus> lt f \\<notin> keys (q + r)", "have \"f \\<noteq> 0\" and cp: \"lookup p (t \\<oplus> lt f) \\<noteq> 0\"\n    and q: \"q = p - monom_mult ((lookup p (t \\<oplus> lt f)) / lc f) t f\""], ["proof (prove)\nusing this:\n  red_single p q f t\n  t \\<oplus> lt f \\<notin> keys (q + r)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by (simp_all add: red_single_def)"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t", "from assms(1)"], ["proof (chain)\npicking this:\n  red_single p q f t", "have cq_0: \"lookup q (t \\<oplus> lt f) = 0\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) = (0::'b)", "by (rule red_single_lookup)"], ["proof (state)\nthis:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t", "with assms(2)"], ["proof (chain)\npicking this:\n  t \\<oplus> lt f \\<notin> keys (q + r)\n  lookup q (t \\<oplus> lt f) = (0::'b)", "have cr_0: \"lookup r (t \\<oplus> lt f) = 0\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<notin> keys (q + r)\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup r (t \\<oplus> lt f) = (0::'b)", "by (simp add: lookup_add in_keys_iff)"], ["proof (state)\nthis:\n  lookup r (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t", "from \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<and>\n    lookup (p + r) (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n    q + r = p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    lookup (p + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n 3. f \\<noteq> 0 \\<Longrightarrow>\n    q + r = p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f", "from cp"], ["proof (chain)\npicking this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)", "show \"lookup (p + r) (t \\<oplus> lt f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p + r) (t \\<oplus> lt f) \\<noteq> (0::'b)", "by (simp add: lookup_add cr_0)"], ["proof (state)\nthis:\n  lookup (p + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    q + r = p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    q + r = p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f", "show \"q + r = p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q + r = p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f", "by (simp add: cr_0 q lookup_add)"], ["proof (state)\nthis:\n  q + r = p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0", "qed"], ["proof (state)\nthis:\n  red_single (p + r) (q + r) f t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_plus_3:\n  assumes \"red_single p q f t\" and \"t \\<oplus> lt f \\<in> keys (p + r)\" and \"t \\<oplus> lt f \\<in> keys (q + r)\"\n  shows \"\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "let ?t = \"t \\<oplus> lt f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "from assms"], ["proof (chain)\npicking this:\n  red_single p q f t\n  t \\<oplus> lt f \\<in> keys (p + r)\n  t \\<oplus> lt f \\<in> keys (q + r)", "have \"f \\<noteq> 0\" and \"lookup p ?t \\<noteq> 0\"\n    and q: \"q = p - monom_mult ((lookup p ?t) / lc f) t f\""], ["proof (prove)\nusing this:\n  red_single p q f t\n  t \\<oplus> lt f \\<in> keys (p + r)\n  t \\<oplus> lt f \\<in> keys (q + r)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by (simp_all add: red_single_def)"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "from assms(2)"], ["proof (chain)\npicking this:\n  t \\<oplus> lt f \\<in> keys (p + r)", "have cpr: \"lookup (p + r) ?t \\<noteq> 0\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<in> keys (p + r)\n\ngoal (1 subgoal):\n 1. lookup (p + r) (t \\<oplus> lt f) \\<noteq> (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup (p + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "from assms(3)"], ["proof (chain)\npicking this:\n  t \\<oplus> lt f \\<in> keys (q + r)", "have cqr: \"lookup (q + r) ?t \\<noteq> 0\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<in> keys (q + r)\n\ngoal (1 subgoal):\n 1. lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "from assms(1)"], ["proof (chain)\npicking this:\n  red_single p q f t", "have cq_0: \"lookup q ?t = 0\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) = (0::'b)", "by (rule red_single_lookup)"], ["proof (state)\nthis:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "let ?s = \"(p + r) - monom_mult ((lookup (p + r) ?t) / lc f) t f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "from \\<open>f \\<noteq> 0\\<close> cpr"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  lookup (p + r) (t \\<oplus> lt f) \\<noteq> (0::'b)", "have \"red_single (p + r) ?s f t\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  lookup (p + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. red_single (p + r)\n     (p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f) f t", "by (simp add: red_single_def)"], ["proof (state)\nthis:\n  red_single (p + r)\n   (p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f) f t\n\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "moreover"], ["proof (state)\nthis:\n  red_single (p + r)\n   (p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f) f t\n\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "from \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "have \"red_single (q + r) ?s f t\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. red_single (q + r)\n     (p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f) f t", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<and>\n    lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n    p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n    q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n 3. f \\<noteq> 0 \\<Longrightarrow>\n    p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n    q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "from cqr"], ["proof (chain)\npicking this:\n  lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)", "show \"lookup (q + r) ?t \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lookup (q + r) (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n    q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n    q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "from lc_not_0[OF \\<open>f \\<noteq> 0\\<close>]\n      monom_mult_dist_left[of \"(lookup p ?t) / lc f\" \"(lookup r ?t) / lc f\" t f]"], ["proof (chain)\npicking this:\n  lc f \\<noteq> (0::'b)\n  monom_mult\n   (lookup p (t \\<oplus> lt f) / lc f + lookup r (t \\<oplus> lt f) / lc f) t\n   f =\n  monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f +\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f", "have \"monom_mult ((lookup (p + r) ?t) / lc f) t f =\n                (monom_mult ((lookup p ?t) / lc f) t f) +\n                  (monom_mult ((lookup r ?t) / lc f) t f)\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n  monom_mult\n   (lookup p (t \\<oplus> lt f) / lc f + lookup r (t \\<oplus> lt f) / lc f) t\n   f =\n  monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f +\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n    monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f +\n    monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f", "by (simp add: field_simps lookup_add)"], ["proof (state)\nthis:\n  monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n  monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f +\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n    q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "moreover"], ["proof (state)\nthis:\n  monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n  monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f +\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n    q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "from lc_not_0[OF \\<open>f \\<noteq> 0\\<close>]\n      monom_mult_dist_left[of \"(lookup q ?t) / lc f\" \"(lookup r ?t) / lc f\" t f]"], ["proof (chain)\npicking this:\n  lc f \\<noteq> (0::'b)\n  monom_mult\n   (lookup q (t \\<oplus> lt f) / lc f + lookup r (t \\<oplus> lt f) / lc f) t\n   f =\n  monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f +\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f", "have \"monom_mult ((lookup (q + r) ?t) / lc f) t f =\n                monom_mult ((lookup r ?t) / lc f) t f\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n  monom_mult\n   (lookup q (t \\<oplus> lt f) / lc f + lookup r (t \\<oplus> lt f) / lc f) t\n   f =\n  monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f +\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f =\n    monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f", "by (simp add: field_simps lookup_add cq_0)"], ["proof (state)\nthis:\n  monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f =\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n    q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "ultimately"], ["proof (chain)\npicking this:\n  monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n  monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f +\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n  monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f =\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f", "show \"p + r - monom_mult (lookup (p + r) ?t / lc f) t f =\n                     q + r - monom_mult (lookup (q + r) ?t / lc f) t f\""], ["proof (prove)\nusing this:\n  monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n  monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f +\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n  monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f =\n  monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n    q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f", "by (simp add: q)"], ["proof (state)\nthis:\n  p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f =\n  q + r - monom_mult (lookup (q + r) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<noteq> 0", "qed"], ["proof (state)\nthis:\n  red_single (q + r)\n   (p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f) f t\n\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "ultimately"], ["proof (chain)\npicking this:\n  red_single (p + r)\n   (p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f) f t\n  red_single (q + r)\n   (p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f) f t", "show ?thesis"], ["proof (prove)\nusing this:\n  red_single (p + r)\n   (p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f) f t\n  red_single (q + r)\n   (p + r - monom_mult (lookup (p + r) (t \\<oplus> lt f) / lc f) t f) f t\n\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "by auto"], ["proof (state)\nthis:\n  \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_plus:\n  assumes \"red_single p q f t\"\n  shows \"red_single (p + r) (q + r) f t \\<or>\n          red_single (q + r) (p + r) f t \\<or>\n          (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\" (is \"?A \\<or> ?B \\<or> ?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "proof (cases \"t \\<oplus> lt f \\<in> keys (p + r)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<oplus> lt f \\<in> keys (p + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n 2. t \\<oplus> lt f \\<notin> keys (p + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "case True"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys (p + r)\n\ngoal (2 subgoals):\n 1. t \\<oplus> lt f \\<in> keys (p + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n 2. t \\<oplus> lt f \\<notin> keys (p + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "proof (cases \"t \\<oplus> lt f \\<in> keys (q + r)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<oplus> lt f \\<in> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n 2. t \\<oplus> lt f \\<notin> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "case True"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys (q + r)\n\ngoal (2 subgoals):\n 1. t \\<oplus> lt f \\<in> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n 2. t \\<oplus> lt f \\<notin> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "with assms \\<open>t \\<oplus> lt f \\<in> keys (p + r)\\<close>"], ["proof (chain)\npicking this:\n  red_single p q f t\n  t \\<oplus> lt f \\<in> keys (p + r)\n  t \\<oplus> lt f \\<in> keys (q + r)", "have ?C"], ["proof (prove)\nusing this:\n  red_single p q f t\n  t \\<oplus> lt f \\<in> keys (p + r)\n  t \\<oplus> lt f \\<in> keys (q + r)\n\ngoal (1 subgoal):\n 1. \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "by (rule red_single_plus_3)"], ["proof (state)\nthis:\n  \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t\n\ngoal (2 subgoals):\n 1. t \\<oplus> lt f \\<in> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n 2. t \\<oplus> lt f \\<notin> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t\n\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "by simp"], ["proof (state)\nthis:\n  red_single (p + r) (q + r) f t \\<or>\n  red_single (q + r) (p + r) f t \\<or>\n  (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "case False"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<notin> keys (q + r)\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "with assms"], ["proof (chain)\npicking this:\n  red_single p q f t\n  t \\<oplus> lt f \\<notin> keys (q + r)", "have ?A"], ["proof (prove)\nusing this:\n  red_single p q f t\n  t \\<oplus> lt f \\<notin> keys (q + r)\n\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t", "by (rule red_single_plus_2)"], ["proof (state)\nthis:\n  red_single (p + r) (q + r) f t\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  red_single (p + r) (q + r) f t\n\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", ".."], ["proof (state)\nthis:\n  red_single (p + r) (q + r) f t \\<or>\n  red_single (q + r) (p + r) f t \\<or>\n  (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single (p + r) (q + r) f t \\<or>\n  red_single (q + r) (p + r) f t \\<or>\n  (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (p + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (p + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "case False"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<notin> keys (p + r)\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (p + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "with assms"], ["proof (chain)\npicking this:\n  red_single p q f t\n  t \\<oplus> lt f \\<notin> keys (p + r)", "have ?B"], ["proof (prove)\nusing this:\n  red_single p q f t\n  t \\<oplus> lt f \\<notin> keys (p + r)\n\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t", "by (rule red_single_plus_1)"], ["proof (state)\nthis:\n  red_single (q + r) (p + r) f t\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (p + r) \\<Longrightarrow>\n    red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  red_single (q + r) (p + r) f t\n\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t \\<or>\n    red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "by simp"], ["proof (state)\nthis:\n  red_single (p + r) (q + r) f t \\<or>\n  red_single (q + r) (p + r) f t \\<or>\n  (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_diff:\n  assumes \"red_single (p - q) r f t\"\n  shows \"red_single p (r + q) f t \\<or> red_single q (p - r) f t \\<or>\n          (\\<exists>p' q'. red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\" (is \"?A \\<or> ?B \\<or> ?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "let ?s = \"t \\<oplus> lt f\""], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "from assms"], ["proof (chain)\npicking this:\n  red_single (p - q) r f t", "have \"f \\<noteq> 0\"\n    and \"lookup (p - q) ?s \\<noteq> 0\"\n    and r: \"r = p - q - monom_mult ((lookup (p - q) ?s) / lc f) t f\""], ["proof (prove)\nusing this:\n  red_single (p - q) r f t\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup (p - q) (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    r = p - q - monom_mult (lookup (p - q) (t \\<oplus> lt f) / lc f) t f", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<and>\n  lookup (p - q) (t \\<oplus> lt f) \\<noteq> (0::'b) \\<and>\n  r = p - q - monom_mult (lookup (p - q) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup (p - q) (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    r = p - q - monom_mult (lookup (p - q) (t \\<oplus> lt f) / lc f) t f", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup (p - q) (t \\<oplus> lt f) \\<noteq> (0::'b)\n  r = p - q - monom_mult (lookup (p - q) (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "from this(2)"], ["proof (chain)\npicking this:\n  lookup (p - q) (t \\<oplus> lt f) \\<noteq> (0::'b)", "have diff: \"lookup p ?s \\<noteq> lookup q ?s\""], ["proof (prove)\nusing this:\n  lookup (p - q) (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> lookup q (t \\<oplus> lt f)", "by (simp add: lookup_minus)"], ["proof (state)\nthis:\n  lookup p (t \\<oplus> lt f) \\<noteq> lookup q (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "proof (cases \"lookup p ?s = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "case True"], ["proof (state)\nthis:\n  lookup p (t \\<oplus> lt f) = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "with diff"], ["proof (chain)\npicking this:\n  lookup p (t \\<oplus> lt f) \\<noteq> lookup q (t \\<oplus> lt f)\n  lookup p (t \\<oplus> lt f) = (0::'b)", "have \"?s \\<in> keys q\""], ["proof (prove)\nusing this:\n  lookup p (t \\<oplus> lt f) \\<noteq> lookup q (t \\<oplus> lt f)\n  lookup p (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys q", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys q\n\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "moreover"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys q\n\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "have \"lookup (p - q) ?s = - lookup q ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (p - q) (t \\<oplus> lt f) = - lookup q (t \\<oplus> lt f)", "by (simp add: lookup_minus True)"], ["proof (state)\nthis:\n  lookup (p - q) (t \\<oplus> lt f) = - lookup q (t \\<oplus> lt f)\n\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "ultimately"], ["proof (chain)\npicking this:\n  t \\<oplus> lt f \\<in> keys q\n  lookup (p - q) (t \\<oplus> lt f) = - lookup q (t \\<oplus> lt f)", "have ?B"], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<in> keys q\n  lookup (p - q) (t \\<oplus> lt f) = - lookup q (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. red_single q (p - r) f t", "using \\<open>f \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<in> keys q\n  lookup (p - q) (t \\<oplus> lt f) = - lookup q (t \\<oplus> lt f)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. red_single q (p - r) f t", "by (simp add: in_keys_iff red_single_def r monom_mult_uminus_left)"], ["proof (state)\nthis:\n  red_single q (p - r) f t\n\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "thus ?thesis"], ["proof (prove)\nusing this:\n  red_single q (p - r) f t\n\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "by simp"], ["proof (state)\nthis:\n  red_single p (r + q) f t \\<or>\n  red_single q (p - r) f t \\<or>\n  (\\<exists>p' q'.\n      red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "case False"], ["proof (state)\nthis:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "hence \"?s \\<in> keys p\""], ["proof (prove)\nusing this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys p", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys p\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "proof (cases \"lookup q ?s = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup q (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "case True"], ["proof (state)\nthis:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (2 subgoals):\n 1. lookup q (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "hence \"lookup (p - q) ?s = lookup p ?s\""], ["proof (prove)\nusing this:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p - q) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)", "by (simp add: lookup_minus)"], ["proof (state)\nthis:\n  lookup (p - q) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\n\ngoal (2 subgoals):\n 1. lookup q (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "hence ?A"], ["proof (prove)\nusing this:\n  lookup (p - q) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. red_single p (r + q) f t", "using \\<open>f \\<noteq> 0\\<close> \\<open>?s \\<in> keys p\\<close>"], ["proof (prove)\nusing this:\n  lookup (p - q) (t \\<oplus> lt f) = lookup p (t \\<oplus> lt f)\n  f \\<noteq> 0\n  t \\<oplus> lt f \\<in> keys p\n\ngoal (1 subgoal):\n 1. red_single p (r + q) f t", "by (simp add: in_keys_iff red_single_def r monom_mult_uminus_left)"], ["proof (state)\nthis:\n  red_single p (r + q) f t\n\ngoal (2 subgoals):\n 1. lookup q (t \\<oplus> lt f) = (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n 2. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "thus ?thesis"], ["proof (prove)\nusing this:\n  red_single p (r + q) f t\n\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", ".."], ["proof (state)\nthis:\n  red_single p (r + q) f t \\<or>\n  red_single q (p - r) f t \\<or>\n  (\\<exists>p' q'.\n      red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "case False"], ["proof (state)\nthis:\n  lookup q (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "hence \"?s \\<in> keys q\""], ["proof (prove)\nusing this:\n  lookup q (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys q", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys q\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "let ?p = \"p - monom_mult ((lookup p ?s) / lc f) t f\""], ["proof (state)\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "let ?q = \"q - monom_mult ((lookup q ?s) / lc f) t f\""], ["proof (state)\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "have ?C"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q'", "proof (intro exI conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. red_single p ?p' f t\n 2. red_single q ?q'1 f t\n 3. r = ?p' - ?q'1", "from \\<open>f \\<noteq> 0\\<close> \\<open>?s \\<in> keys p\\<close>"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  t \\<oplus> lt f \\<in> keys p", "show \"red_single p ?p f t\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  t \\<oplus> lt f \\<in> keys p\n\ngoal (1 subgoal):\n 1. red_single p (p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) f\n     t", "by (simp add: in_keys_iff red_single_def)"], ["proof (state)\nthis:\n  red_single p (p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f) f t\n\ngoal (2 subgoals):\n 1. red_single q ?q'1 f t\n 2. r = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f - ?q'1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. red_single q ?q'1 f t\n 2. r = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f - ?q'1", "from \\<open>f \\<noteq> 0\\<close> \\<open>?s \\<in> keys q\\<close>"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  t \\<oplus> lt f \\<in> keys q", "show \"red_single q ?q f t\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  t \\<oplus> lt f \\<in> keys q\n\ngoal (1 subgoal):\n 1. red_single q (q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f) f\n     t", "by (simp add: in_keys_iff red_single_def)"], ["proof (state)\nthis:\n  red_single q (q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f) f t\n\ngoal (1 subgoal):\n 1. r =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f -\n    (q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f -\n    (q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f)", "from \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "have \"lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc f \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. r =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f -\n    (q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f)", "hence eq: \"(lookup p ?s - lookup q ?s) / lc f =\n                   lookup p ?s / lc f - lookup q ?s / lc f\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. (lookup p (t \\<oplus> lt f) - lookup q (t \\<oplus> lt f)) / lc f =\n    lookup p (t \\<oplus> lt f) / lc f - lookup q (t \\<oplus> lt f) / lc f", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  (lookup p (t \\<oplus> lt f) - lookup q (t \\<oplus> lt f)) / lc f =\n  lookup p (t \\<oplus> lt f) / lc f - lookup q (t \\<oplus> lt f) / lc f\n\ngoal (1 subgoal):\n 1. r =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f -\n    (q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f)", "show \"r = ?p - ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r =\n    p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f -\n    (q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f)", "by (simp add: r lookup_minus eq monom_mult_dist_left_minus)"], ["proof (state)\nthis:\n  r =\n  p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f -\n  (q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p' q'.\n     red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q'\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) \\<noteq> (0::'b) \\<Longrightarrow>\n    red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>p' q'.\n     red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q'\n\ngoal (1 subgoal):\n 1. red_single p (r + q) f t \\<or>\n    red_single q (p - r) f t \\<or>\n    (\\<exists>p' q'.\n        red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "by simp"], ["proof (state)\nthis:\n  red_single p (r + q) f t \\<or>\n  red_single q (p - r) f t \\<or>\n  (\\<exists>p' q'.\n      red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single p (r + q) f t \\<or>\n  red_single q (p - r) f t \\<or>\n  (\\<exists>p' q'.\n      red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single p (r + q) f t \\<or>\n  red_single q (p - r) f t \\<or>\n  (\\<exists>p' q'.\n      red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_monom_mult:\n  assumes a: \"red F p q\" and \"c \\<noteq> 0\"\n  shows \"red F (monom_mult c s p) (monom_mult c s q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F (monom_mult c s p) (monom_mult c s q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red F (monom_mult c s p) (monom_mult c s q)", "from red_setE[OF a]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f and t where \"f \\<in> F\" and rs: \"red_single p q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. red F (monom_mult c s p) (monom_mult c s q)", "from red_single_monom_mult[OF rs \\<open>c \\<noteq> 0\\<close>, of s]"], ["proof (chain)\npicking this:\n  red_single (monom_mult c s p) (monom_mult c s q) f (s + t)", "show ?thesis"], ["proof (prove)\nusing this:\n  red_single (monom_mult c s p) (monom_mult c s q) f (s + t)\n\ngoal (1 subgoal):\n 1. red F (monom_mult c s p) (monom_mult c s q)", "by (intro red_setI[OF \\<open>f \\<in> F\\<close>])"], ["proof (state)\nthis:\n  red F (monom_mult c s p) (monom_mult c s q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_plus_keys_disjoint:\n  assumes \"red F p q\" and \"keys p \\<inter> keys r = {}\"\n  shows \"red F (p + r) (q + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F (p + r) (q + r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red F (p + r) (q + r)", "from assms(1)"], ["proof (chain)\npicking this:\n  red F p q", "obtain f t where \"f \\<in> F\" and *: \"red_single p q f t\""], ["proof (prove)\nusing this:\n  red F p q\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_setE)"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. red F (p + r) (q + r)", "from this(2)"], ["proof (chain)\npicking this:\n  red_single p q f t", "have \"red_single (p + r) (q + r) f t\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. red_single (p + r) (q + r) f t", "proof (rule red_single_plus_2)"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r)", "from *"], ["proof (chain)\npicking this:\n  red_single p q f t", "have \"lookup q (t \\<oplus> lt f) = 0\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. lookup q (t \\<oplus> lt f) = (0::'b)", "by (simp add: red_single_def lookup_minus lookup_monom_mult lc_def[symmetric] lc_not_0 term_simps)"], ["proof (state)\nthis:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r)", "hence \"t \\<oplus> lt f \\<notin> keys q\""], ["proof (prove)\nusing this:\n  lookup q (t \\<oplus> lt f) = (0::'b)\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys q", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<notin> keys q\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r)", "moreover"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<notin> keys q\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r)", "have \"t \\<oplus> lt f \\<notin> keys r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys r \\<Longrightarrow> False", "assume \"t \\<oplus> lt f \\<in> keys r\""], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys r\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys r \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys r\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys r \\<Longrightarrow> False", "from *"], ["proof (chain)\npicking this:\n  red_single p q f t", "have \"t \\<oplus> lt f \\<in> keys p\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys p", "by (simp add: in_keys_iff red_single_def)"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys p\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys r \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  t \\<oplus> lt f \\<in> keys r\n  t \\<oplus> lt f \\<in> keys p", "have \"t \\<oplus> lt f \\<in> keys p \\<inter> keys r\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<in> keys r\n  t \\<oplus> lt f \\<in> keys p\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys p \\<inter> keys r", "by simp"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys p \\<inter> keys r\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys r \\<Longrightarrow> False", "with assms(2)"], ["proof (chain)\npicking this:\n  keys p \\<inter> keys r = {}\n  t \\<oplus> lt f \\<in> keys p \\<inter> keys r", "show False"], ["proof (prove)\nusing this:\n  keys p \\<inter> keys r = {}\n  t \\<oplus> lt f \\<in> keys p \\<inter> keys r\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<notin> keys r\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r)", "ultimately"], ["proof (chain)\npicking this:\n  t \\<oplus> lt f \\<notin> keys q\n  t \\<oplus> lt f \\<notin> keys r", "have \"t \\<oplus> lt f \\<notin> keys q \\<union> keys r\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<notin> keys q\n  t \\<oplus> lt f \\<notin> keys r\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys q \\<union> keys r", "by simp"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<notin> keys q \\<union> keys r\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r)", "thus \"t \\<oplus> lt f \\<notin> keys (q + r)\""], ["proof (prove)\nusing this:\n  t \\<oplus> lt f \\<notin> keys q \\<union> keys r\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<notin> keys (q + r)", "by (meson Poly_Mapping.keys_add subsetD)"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<notin> keys (q + r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single (p + r) (q + r) f t\n\ngoal (1 subgoal):\n 1. red F (p + r) (q + r)", "with \\<open>f \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> F\n  red_single (p + r) (q + r) f t", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single (p + r) (q + r) f t\n\ngoal (1 subgoal):\n 1. red F (p + r) (q + r)", "by (rule red_setI)"], ["proof (state)\nthis:\n  red F (p + r) (q + r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_plus:\n  assumes \"red F p q\"\n  obtains s where \"(red F)\\<^sup>*\\<^sup>* (p + r) s\" and \"(red F)\\<^sup>*\\<^sup>* (q + r) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p + r) s;\n         (red F)\\<^sup>*\\<^sup>* (q + r) s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p + r) s;\n         (red F)\\<^sup>*\\<^sup>* (q + r) s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from red_setE[OF assms]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f and t where \"f \\<in> F\" and rs: \"red_single p q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p + r) s;\n         (red F)\\<^sup>*\\<^sup>* (q + r) s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from red_single_plus[OF rs, of r]"], ["proof (chain)\npicking this:\n  red_single (p + r) (q + r) f t \\<or>\n  red_single (q + r) (p + r) f t \\<or>\n  (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)", "show ?thesis"], ["proof (prove)\nusing this:\n  red_single (p + r) (q + r) f t \\<or>\n  red_single (q + r) (p + r) f t \\<or>\n  (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. red_single (p + r) (q + r) f t \\<Longrightarrow> thesis\n 2. red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s.\n        red_single (p + r) s f t \\<and>\n        red_single (q + r) s f t) \\<Longrightarrow>\n    thesis", "assume c1: \"red_single (p + r) (q + r) f t\""], ["proof (state)\nthis:\n  red_single (p + r) (q + r) f t\n\ngoal (2 subgoals):\n 1. red_single (p + r) (q + r) f t \\<Longrightarrow> thesis\n 2. red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s.\n        red_single (p + r) s f t \\<and>\n        red_single (q + r) s f t) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) ?s27\n 2. (red F)\\<^sup>*\\<^sup>* (q + r) ?s27", "from c1"], ["proof (chain)\npicking this:\n  red_single (p + r) (q + r) f t", "show \"(red F)\\<^sup>*\\<^sup>* (p + r) (q + r)\""], ["proof (prove)\nusing this:\n  red_single (p + r) (q + r) f t\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) (q + r)", "by (intro r_into_rtranclp, intro red_setI[OF \\<open>f \\<in> F\\<close>])"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (p + r) (q + r)\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (q + r) (q + r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (q + r) (q + r)", "show \"(red F)\\<^sup>*\\<^sup>* (q + r) (q + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (q + r) (q + r)", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (q + r) (q + r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s.\n        red_single (p + r) s f t \\<and>\n        red_single (q + r) s f t) \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s.\n        red_single (p + r) s f t \\<and>\n        red_single (q + r) s f t) \\<Longrightarrow>\n    thesis", "assume \"red_single (q + r) (p + r) f t \\<or> (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\""], ["proof (state)\nthis:\n  red_single (q + r) (p + r) f t \\<or>\n  (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n\ngoal (1 subgoal):\n 1. red_single (q + r) (p + r) f t \\<or>\n    (\\<exists>s.\n        red_single (p + r) s f t \\<and>\n        red_single (q + r) s f t) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  red_single (q + r) (p + r) f t \\<or>\n  (\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t)\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. red_single (q + r) (p + r) f t \\<Longrightarrow> thesis\n 2. \\<exists>s.\n       red_single (p + r) s f t \\<and>\n       red_single (q + r) s f t \\<Longrightarrow>\n    thesis", "assume c2: \"red_single (q + r) (p + r) f t\""], ["proof (state)\nthis:\n  red_single (q + r) (p + r) f t\n\ngoal (2 subgoals):\n 1. red_single (q + r) (p + r) f t \\<Longrightarrow> thesis\n 2. \\<exists>s.\n       red_single (p + r) s f t \\<and>\n       red_single (q + r) s f t \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) ?s27\n 2. (red F)\\<^sup>*\\<^sup>* (q + r) ?s27", "show \"(red F)\\<^sup>*\\<^sup>* (p + r) (p + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) (p + r)", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (p + r) (p + r)\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (q + r) (p + r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (q + r) (p + r)", "from c2"], ["proof (chain)\npicking this:\n  red_single (q + r) (p + r) f t", "show \"(red F)\\<^sup>*\\<^sup>* (q + r) (p + r)\""], ["proof (prove)\nusing this:\n  red_single (q + r) (p + r) f t\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (q + r) (p + r)", "by (intro r_into_rtranclp, intro red_setI[OF \\<open>f \\<in> F\\<close>])"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (q + r) (p + r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       red_single (p + r) s f t \\<and>\n       red_single (q + r) s f t \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s.\n       red_single (p + r) s f t \\<and>\n       red_single (q + r) s f t \\<Longrightarrow>\n    thesis", "assume \"\\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t\""], ["proof (state)\nthis:\n  \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       red_single (p + r) s f t \\<and>\n       red_single (q + r) s f t \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t", "obtain s where s1: \"red_single (p + r) s f t\" and s2: \"red_single (q + r) s f t\""], ["proof (prove)\nusing this:\n  \\<exists>s. red_single (p + r) s f t \\<and> red_single (q + r) s f t\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>red_single (p + r) s f t; red_single (q + r) s f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  red_single (p + r) s f t\n  red_single (q + r) s f t\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       red_single (p + r) s f t \\<and>\n       red_single (q + r) s f t \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) ?s27\n 2. (red F)\\<^sup>*\\<^sup>* (q + r) ?s27", "from s1"], ["proof (chain)\npicking this:\n  red_single (p + r) s f t", "show \"(red F)\\<^sup>*\\<^sup>* (p + r) s\""], ["proof (prove)\nusing this:\n  red_single (p + r) s f t\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) s", "by (intro r_into_rtranclp, intro red_setI[OF \\<open>f \\<in> F\\<close>])"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (p + r) s\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (q + r) s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (q + r) s", "from s2"], ["proof (chain)\npicking this:\n  red_single (q + r) s f t", "show \"(red F)\\<^sup>*\\<^sup>* (q + r) s\""], ["proof (prove)\nusing this:\n  red_single (q + r) s f t\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (q + r) s", "by (intro r_into_rtranclp, intro red_setI[OF \\<open>f \\<in> F\\<close>])"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (q + r) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary red_plus_cs:\n  assumes \"red F p q\"\n  shows \"relation.cs (red F) (p + r) (q + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relation.cs (red F) (p + r) (q + r)", "unfolding relation.cs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s.\n       (red F)\\<^sup>*\\<^sup>* (p + r) s \\<and>\n       (red F)\\<^sup>*\\<^sup>* (q + r) s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s.\n       (red F)\\<^sup>*\\<^sup>* (p + r) s \\<and>\n       (red F)\\<^sup>*\\<^sup>* (q + r) s", "from assms"], ["proof (chain)\npicking this:\n  red F p q", "obtain s where \"(red F)\\<^sup>*\\<^sup>* (p + r) s\" and \"(red F)\\<^sup>*\\<^sup>* (q + r) s\""], ["proof (prove)\nusing this:\n  red F p q\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p + r) s;\n         (red F)\\<^sup>*\\<^sup>* (q + r) s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_plus)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (p + r) s\n  (red F)\\<^sup>*\\<^sup>* (q + r) s\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       (red F)\\<^sup>*\\<^sup>* (p + r) s \\<and>\n       (red F)\\<^sup>*\\<^sup>* (q + r) s", "show \"\\<exists>s. (red F)\\<^sup>*\\<^sup>* (p + r) s \\<and> (red F)\\<^sup>*\\<^sup>* (q + r) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s.\n       (red F)\\<^sup>*\\<^sup>* (p + r) s \\<and>\n       (red F)\\<^sup>*\\<^sup>* (q + r) s", "by (intro exI, intro conjI, fact, fact)"], ["proof (state)\nthis:\n  \\<exists>s.\n     (red F)\\<^sup>*\\<^sup>* (p + r) s \\<and>\n     (red F)\\<^sup>*\\<^sup>* (q + r) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_uminus:\n  assumes \"red F p q\"\n  shows \"red F (-p) (-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F (- p) (- q)", "using red_monom_mult[OF assms, of \"-1\" 0]"], ["proof (prove)\nusing this:\n  - (1::'b) \\<noteq> (0::'b) \\<Longrightarrow>\n  red F (monom_mult (- (1::'b)) (0::'a) p)\n   (monom_mult (- (1::'b)) (0::'a) q)\n\ngoal (1 subgoal):\n 1. red F (- p) (- q)", "by (simp add: uminus_monom_mult)"], ["", "lemma red_diff:\n  assumes \"red F (p - q) r\"\n  obtains p' q' where \"(red F)\\<^sup>*\\<^sup>* p p'\" and \"(red F)\\<^sup>*\\<^sup>* q q'\" and \"r = p' - q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p' q'.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p'; (red F)\\<^sup>*\\<^sup>* q q';\n         r = p' - q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p' q'.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p'; (red F)\\<^sup>*\\<^sup>* q q';\n         r = p' - q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  red F (p - q) r", "obtain f t where \"f \\<in> F\" and \"red_single (p - q) r f t\""], ["proof (prove)\nusing this:\n  red F (p - q) r\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single (p - q) r f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_setE)"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single (p - q) r f t\n\ngoal (1 subgoal):\n 1. (\\<And>p' q'.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p'; (red F)\\<^sup>*\\<^sup>* q q';\n         r = p' - q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from red_single_diff[OF this(2)]"], ["proof (chain)\npicking this:\n  red_single p (r + q) f t \\<or>\n  red_single q (p - r) f t \\<or>\n  (\\<exists>p' q'.\n      red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')", "show ?thesis"], ["proof (prove)\nusing this:\n  red_single p (r + q) f t \\<or>\n  red_single q (p - r) f t \\<or>\n  (\\<exists>p' q'.\n      red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q')\n\ngoal (1 subgoal):\n 1. thesis", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. red_single p (r + q) f t \\<Longrightarrow> thesis\n 2. red_single q (p - r) f t \\<Longrightarrow> thesis\n 3. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "assume \"red_single p (r + q) f t\""], ["proof (state)\nthis:\n  red_single p (r + q) f t\n\ngoal (3 subgoals):\n 1. red_single p (r + q) f t \\<Longrightarrow> thesis\n 2. red_single q (p - r) f t \\<Longrightarrow> thesis\n 3. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "with \\<open>f \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> F\n  red_single p (r + q) f t", "have *: \"red F p (r + q)\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single p (r + q) f t\n\ngoal (1 subgoal):\n 1. red F p (r + q)", "by (rule red_setI)"], ["proof (state)\nthis:\n  red F p (r + q)\n\ngoal (3 subgoals):\n 1. red_single p (r + q) f t \\<Longrightarrow> thesis\n 2. red_single q (p - r) f t \\<Longrightarrow> thesis\n 3. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* p ?p'27\n 2. (red F)\\<^sup>*\\<^sup>* q ?q'27\n 3. r = ?p'27 - ?q'27", "from *"], ["proof (chain)\npicking this:\n  red F p (r + q)", "show \"(red F)\\<^sup>*\\<^sup>* p (r + q)\""], ["proof (prove)\nusing this:\n  red F p (r + q)\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p (r + q)", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p (r + q)\n\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* q ?q'27\n 2. r = r + q - ?q'27", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* q ?q'27\n 2. r = r + q - ?q'27", "show \"(red F)\\<^sup>*\\<^sup>* q q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q q", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q q\n\ngoal (1 subgoal):\n 1. r = r + q - q", "qed simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (2 subgoals):\n 1. red_single q (p - r) f t \\<Longrightarrow> thesis\n 2. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. red_single q (p - r) f t \\<Longrightarrow> thesis\n 2. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "assume \"red_single q (p - r) f t\""], ["proof (state)\nthis:\n  red_single q (p - r) f t\n\ngoal (2 subgoals):\n 1. red_single q (p - r) f t \\<Longrightarrow> thesis\n 2. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "with \\<open>f \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> F\n  red_single q (p - r) f t", "have *: \"red F q (p - r)\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single q (p - r) f t\n\ngoal (1 subgoal):\n 1. red F q (p - r)", "by (rule red_setI)"], ["proof (state)\nthis:\n  red F q (p - r)\n\ngoal (2 subgoals):\n 1. red_single q (p - r) f t \\<Longrightarrow> thesis\n 2. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* p ?p'27\n 2. (red F)\\<^sup>*\\<^sup>* q ?q'27\n 3. r = ?p'27 - ?q'27", "show \"(red F)\\<^sup>*\\<^sup>* p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p p", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p p\n\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* q ?q'27\n 2. r = p - ?q'27", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* q ?q'27\n 2. r = p - ?q'27", "from *"], ["proof (chain)\npicking this:\n  red F q (p - r)", "show \"(red F)\\<^sup>*\\<^sup>* q (p - r)\""], ["proof (prove)\nusing this:\n  red F q (p - r)\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q (p - r)", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q (p - r)\n\ngoal (1 subgoal):\n 1. r = p - (p - r)", "qed simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "assume \"\\<exists>p' q'. red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q'\""], ["proof (state)\nthis:\n  \\<exists>p' q'.\n     red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q'\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>p' q'.\n     red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q'", "obtain p' q' where 1: \"red_single p p' f t\" and 2: \"red_single q q' f t\" and \"r = p' - q'\""], ["proof (prove)\nusing this:\n  \\<exists>p' q'.\n     red_single p p' f t \\<and> red_single q q' f t \\<and> r = p' - q'\n\ngoal (1 subgoal):\n 1. (\\<And>p' q'.\n        \\<lbrakk>red_single p p' f t; red_single q q' f t;\n         r = p' - q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  red_single p p' f t\n  red_single q q' f t\n  r = p' - q'\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "from \\<open>f \\<in> F\\<close> 2"], ["proof (chain)\npicking this:\n  f \\<in> F\n  red_single q q' f t", "have \"red F q q'\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single q q' f t\n\ngoal (1 subgoal):\n 1. red F q q'", "by (rule red_setI)"], ["proof (state)\nthis:\n  red F q q'\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "from \\<open>f \\<in> F\\<close> 1"], ["proof (chain)\npicking this:\n  f \\<in> F\n  red_single p p' f t", "have \"red F p p'\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single p p' f t\n\ngoal (1 subgoal):\n 1. red F p p'", "by (rule red_setI)"], ["proof (state)\nthis:\n  red F p p'\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "hence \"(red F)\\<^sup>*\\<^sup>* p p'\""], ["proof (prove)\nusing this:\n  red F p p'\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p p'", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p p'\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p p'\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "from \\<open>red F q q'\\<close>"], ["proof (chain)\npicking this:\n  red F q q'", "have \"(red F)\\<^sup>*\\<^sup>* q q'\""], ["proof (prove)\nusing this:\n  red F q q'\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q q'", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q q'\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q q'\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "note \\<open>r = p' - q'\\<close>"], ["proof (state)\nthis:\n  r = p' - q'\n\ngoal (1 subgoal):\n 1. \\<exists>p' q'.\n       red_single p p' f t \\<and>\n       red_single q q' f t \\<and> r = p' - q' \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* p p'\n  (red F)\\<^sup>*\\<^sup>* q q'\n  r = p' - q'", "show ?thesis"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p p'\n  (red F)\\<^sup>*\\<^sup>* q q'\n  r = p' - q'\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_diff_rtrancl':\n  assumes \"(red F)\\<^sup>*\\<^sup>* (p - q) r\"\n  obtains p' q' where \"(red F)\\<^sup>*\\<^sup>* p p'\" and \"(red F)\\<^sup>*\\<^sup>* q q'\" and \"r = p' - q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p' q'.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p'; (red F)\\<^sup>*\\<^sup>* q q';\n         r = p' - q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (p - q) r\n\ngoal (1 subgoal):\n 1. (\\<And>p' q'.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p'; (red F)\\<^sup>*\\<^sup>* q q';\n         r = p' - q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct arbitrary: thesis rule: rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>p' q'.\n           \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n            (red F)\\<^sup>*\\<^sup>* q q'; p - q = p' - q'\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>y z thesis.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        \\<And>thesis.\n           (\\<And>p' q'.\n               \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n                (red F)\\<^sup>*\\<^sup>* q q'; y = p' - q'\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>p' q'.\n           \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n            (red F)\\<^sup>*\\<^sup>* q q'; z = p' - q'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case base"], ["proof (state)\nthis:\n  \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p ?p'27; (red F)\\<^sup>*\\<^sup>* q ?q'27;\n   p - q = ?p'27 - ?q'27\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>p' q'.\n           \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n            (red F)\\<^sup>*\\<^sup>* q q'; p - q = p' - q'\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>y z thesis.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        \\<And>thesis.\n           (\\<And>p' q'.\n               \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n                (red F)\\<^sup>*\\<^sup>* q q'; y = p' - q'\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>p' q'.\n           \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n            (red F)\\<^sup>*\\<^sup>* q q'; z = p' - q'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "by (rule base, fact rtrancl_refl[to_pred], fact rtrancl_refl[to_pred], fact refl)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        \\<And>thesis.\n           (\\<And>p' q'.\n               \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n                (red F)\\<^sup>*\\<^sup>* q q'; y = p' - q'\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>p' q'.\n           \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n            (red F)\\<^sup>*\\<^sup>* q q'; z = p' - q'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        \\<And>thesis.\n           (\\<And>p' q'.\n               \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n                (red F)\\<^sup>*\\<^sup>* q q'; y = p' - q'\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>p' q'.\n           \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n            (red F)\\<^sup>*\\<^sup>* q q'; z = p' - q'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (step y z)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (p - q) y\n  red F y z\n  (\\<And>p' q'.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p'; (red F)\\<^sup>*\\<^sup>* q q';\n       y = p' - q'\\<rbrakk>\n      \\<Longrightarrow> ?thesis27) \\<Longrightarrow>\n  ?thesis27\n  \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p ?p'27; (red F)\\<^sup>*\\<^sup>* q ?q'27;\n   z = ?p'27 - ?q'27\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        \\<And>thesis.\n           (\\<And>p' q'.\n               \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n                (red F)\\<^sup>*\\<^sup>* q q'; y = p' - q'\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>p' q'.\n           \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n            (red F)\\<^sup>*\\<^sup>* q q'; z = p' - q'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "obtain p1 q1 where p1: \"(red F)\\<^sup>*\\<^sup>* p p1\" and q1: \"(red F)\\<^sup>*\\<^sup>* q q1\" and y: \"y = p1 - q1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1 q1.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p1; (red F)\\<^sup>*\\<^sup>* q q1;\n         y = p1 - q1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule step(3))"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p p1\n  (red F)\\<^sup>*\\<^sup>* q q1\n  y = p1 - q1\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        \\<And>thesis.\n           (\\<And>p' q'.\n               \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n                (red F)\\<^sup>*\\<^sup>* q q'; y = p' - q'\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>p' q'.\n           \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n            (red F)\\<^sup>*\\<^sup>* q q'; z = p' - q'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from step(2)"], ["proof (chain)\npicking this:\n  red F y z", "obtain p' q' where p': \"(red F)\\<^sup>*\\<^sup>* p1 p'\" and q': \"(red F)\\<^sup>*\\<^sup>* q1 q'\" and z: \"z = p' - q'\""], ["proof (prove)\nusing this:\n  red F y z\n\ngoal (1 subgoal):\n 1. (\\<And>p' q'.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p1 p';\n         (red F)\\<^sup>*\\<^sup>* q1 q'; z = p' - q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding y"], ["proof (prove)\nusing this:\n  red F (p1 - q1) z\n\ngoal (1 subgoal):\n 1. (\\<And>p' q'.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p1 p';\n         (red F)\\<^sup>*\\<^sup>* q1 q'; z = p' - q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_diff)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p1 p'\n  (red F)\\<^sup>*\\<^sup>* q1 q'\n  z = p' - q'\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        \\<And>thesis.\n           (\\<And>p' q'.\n               \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n                (red F)\\<^sup>*\\<^sup>* q q'; y = p' - q'\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>p' q'.\n           \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p';\n            (red F)\\<^sup>*\\<^sup>* q q'; z = p' - q'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule step(4))"], ["proof (state)\ngoal (3 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* p ?p'27\n 2. (red F)\\<^sup>*\\<^sup>* q ?q'27\n 3. z = ?p'27 - ?q'27", "from p1 p'"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* p p1\n  (red F)\\<^sup>*\\<^sup>* p1 p'", "show \"(red F)\\<^sup>*\\<^sup>* p p'\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p p1\n  (red F)\\<^sup>*\\<^sup>* p1 p'\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* p p'", "by simp"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p p'\n\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* q ?q'27\n 2. z = p' - ?q'27", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* q ?q'27\n 2. z = p' - ?q'27", "from q1 q'"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* q q1\n  (red F)\\<^sup>*\\<^sup>* q1 q'", "show \"(red F)\\<^sup>*\\<^sup>* q q'\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* q q1\n  (red F)\\<^sup>*\\<^sup>* q1 q'\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q q'", "by simp"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q q'\n\ngoal (1 subgoal):\n 1. z = p' - q'", "qed fact"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_diff_rtrancl:\n  assumes \"(red F)\\<^sup>*\\<^sup>* (p - q) 0\"\n  obtains s where \"(red F)\\<^sup>*\\<^sup>* p s\" and \"(red F)\\<^sup>*\\<^sup>* q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p s;\n         (red F)\\<^sup>*\\<^sup>* q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p s;\n         (red F)\\<^sup>*\\<^sup>* q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* (p - q) 0", "obtain p' q' where p': \"(red F)\\<^sup>*\\<^sup>* p p'\" and q': \"(red F)\\<^sup>*\\<^sup>* q q'\" and \"0 = p' - q'\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (p - q) 0\n\ngoal (1 subgoal):\n 1. (\\<And>p' q'.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p p'; (red F)\\<^sup>*\\<^sup>* q q';\n         0 = p' - q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_diff_rtrancl')"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p p'\n  (red F)\\<^sup>*\\<^sup>* q q'\n  0 = p' - q'\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p s;\n         (red F)\\<^sup>*\\<^sup>* q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this(3)"], ["proof (chain)\npicking this:\n  0 = p' - q'", "have \"q' = p'\""], ["proof (prove)\nusing this:\n  0 = p' - q'\n\ngoal (1 subgoal):\n 1. q' = p'", "by simp"], ["proof (state)\nthis:\n  q' = p'\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p s;\n         (red F)\\<^sup>*\\<^sup>* q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from p' q'"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* p p'\n  (red F)\\<^sup>*\\<^sup>* q q'", "show ?thesis"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p p'\n  (red F)\\<^sup>*\\<^sup>* q q'\n\ngoal (1 subgoal):\n 1. thesis", "unfolding \\<open>q' = p'\\<close>"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p p'\n  (red F)\\<^sup>*\\<^sup>* q p'\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary red_diff_rtrancl_cs:\n  assumes \"(red F)\\<^sup>*\\<^sup>* (p - q) 0\"\n  shows \"relation.cs (red F) p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relation.cs (red F) p q", "unfolding relation.cs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s.\n       (red F)\\<^sup>*\\<^sup>* p s \\<and> (red F)\\<^sup>*\\<^sup>* q s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s.\n       (red F)\\<^sup>*\\<^sup>* p s \\<and> (red F)\\<^sup>*\\<^sup>* q s", "from assms"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* (p - q) 0", "obtain s where \"(red F)\\<^sup>*\\<^sup>* p s\" and \"(red F)\\<^sup>*\\<^sup>* q s\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (p - q) 0\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p s;\n         (red F)\\<^sup>*\\<^sup>* q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_diff_rtrancl)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p s\n  (red F)\\<^sup>*\\<^sup>* q s\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       (red F)\\<^sup>*\\<^sup>* p s \\<and> (red F)\\<^sup>*\\<^sup>* q s", "show \"\\<exists>s. (red F)\\<^sup>*\\<^sup>* p s \\<and> (red F)\\<^sup>*\\<^sup>* q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s.\n       (red F)\\<^sup>*\\<^sup>* p s \\<and> (red F)\\<^sup>*\\<^sup>* q s", "by (intro exI, intro conjI, fact, fact)"], ["proof (state)\nthis:\n  \\<exists>s. (red F)\\<^sup>*\\<^sup>* p s \\<and> (red F)\\<^sup>*\\<^sup>* q s\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Confluence of Reducibility\\<close>"], ["", "lemma confluent_distinct_aux:\n  assumes r1: \"red_single p q1 f1 t1\" and r2: \"red_single p q2 f2 t2\"\n    and \"t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2\" and \"f1 \\<in> F\" and \"f2 \\<in> F\"\n  obtains s where \"(red F)\\<^sup>*\\<^sup>* q1 s\" and \"(red F)\\<^sup>*\\<^sup>* q2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from r1"], ["proof (chain)\npicking this:\n  red_single p q1 f1 t1", "have \"f1 \\<noteq> 0\" and c1: \"lookup p (t1 \\<oplus> lt f1) \\<noteq> 0\"\n    and q1_def: \"q1 = p - monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1\""], ["proof (prove)\nusing this:\n  red_single p q1 f1 t1\n\ngoal (1 subgoal):\n 1. f1 \\<noteq> 0 &&&\n    lookup p (t1 \\<oplus> lt f1) \\<noteq> (0::'b) &&&\n    q1 = p - monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f1 \\<noteq> 0 \\<and>\n  lookup p (t1 \\<oplus> lt f1) \\<noteq> (0::'b) \\<and>\n  q1 = p - monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1\n\ngoal (1 subgoal):\n 1. f1 \\<noteq> 0 &&&\n    lookup p (t1 \\<oplus> lt f1) \\<noteq> (0::'b) &&&\n    q1 = p - monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1", "by auto"], ["proof (state)\nthis:\n  f1 \\<noteq> 0\n  lookup p (t1 \\<oplus> lt f1) \\<noteq> (0::'b)\n  q1 = p - monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from r2"], ["proof (chain)\npicking this:\n  red_single p q2 f2 t2", "have \"f2 \\<noteq> 0\" and c2: \"lookup p (t2 \\<oplus> lt f2) \\<noteq> 0\"\n    and q2_def: \"q2 = p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2\""], ["proof (prove)\nusing this:\n  red_single p q2 f2 t2\n\ngoal (1 subgoal):\n 1. f2 \\<noteq> 0 &&&\n    lookup p (t2 \\<oplus> lt f2) \\<noteq> (0::'b) &&&\n    q2 = p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  f2 \\<noteq> 0 \\<and>\n  lookup p (t2 \\<oplus> lt f2) \\<noteq> (0::'b) \\<and>\n  q2 = p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2\n\ngoal (1 subgoal):\n 1. f2 \\<noteq> 0 &&&\n    lookup p (t2 \\<oplus> lt f2) \\<noteq> (0::'b) &&&\n    q2 = p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2", "by auto"], ["proof (state)\nthis:\n  f2 \\<noteq> 0\n  lookup p (t2 \\<oplus> lt f2) \\<noteq> (0::'b)\n  q2 = p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from \\<open>t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2\\<close>"], ["proof (chain)\npicking this:\n  t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2", "have \"lookup (monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1) (t2 \\<oplus> lt f2) = 0\""], ["proof (prove)\nusing this:\n  t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2\n\ngoal (1 subgoal):\n 1. lookup (monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1)\n     (t2 \\<oplus> lt f2) =\n    (0::'b)", "by (simp add: lookup_monom_mult_eq_zero)"], ["proof (state)\nthis:\n  lookup (monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1)\n   (t2 \\<oplus> lt f2) =\n  (0::'b)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from lookup_minus[of p _ \"t2 \\<oplus> lt f2\"] this"], ["proof (chain)\npicking this:\n  lookup (p - ?g) (t2 \\<oplus> lt f2) =\n  lookup p (t2 \\<oplus> lt f2) - lookup ?g (t2 \\<oplus> lt f2)\n  lookup (monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1)\n   (t2 \\<oplus> lt f2) =\n  (0::'b)", "have c: \"lookup q1 (t2 \\<oplus> lt f2) = lookup p (t2 \\<oplus> lt f2)\""], ["proof (prove)\nusing this:\n  lookup (p - ?g) (t2 \\<oplus> lt f2) =\n  lookup p (t2 \\<oplus> lt f2) - lookup ?g (t2 \\<oplus> lt f2)\n  lookup (monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1)\n   (t2 \\<oplus> lt f2) =\n  (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q1 (t2 \\<oplus> lt f2) = lookup p (t2 \\<oplus> lt f2)", "unfolding q1_def"], ["proof (prove)\nusing this:\n  lookup (p - ?g) (t2 \\<oplus> lt f2) =\n  lookup p (t2 \\<oplus> lt f2) - lookup ?g (t2 \\<oplus> lt f2)\n  lookup (monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1)\n   (t2 \\<oplus> lt f2) =\n  (0::'b)\n\ngoal (1 subgoal):\n 1. lookup (p - monom_mult (lookup p (t1 \\<oplus> lt f1) / lc f1) t1 f1)\n     (t2 \\<oplus> lt f2) =\n    lookup p (t2 \\<oplus> lt f2)", "by simp"], ["proof (state)\nthis:\n  lookup q1 (t2 \\<oplus> lt f2) = lookup p (t2 \\<oplus> lt f2)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define q3 where \"q3 \\<equiv> q1 - monom_mult ((lookup q1 (t2 \\<oplus> lt f2)) / lc f2) t2 f2\""], ["proof (state)\nthis:\n  q3 \\<equiv> q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"red_single q1 q3 f2 t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single q1 q3 f2 t2", "unfolding red_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f2 \\<noteq> 0 \\<and>\n    lookup q1 (t2 \\<oplus> lt f2) \\<noteq> (0::'b) \\<and>\n    q3 = q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2", "proof (rule, fact, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup q1 (t2 \\<oplus> lt f2) \\<noteq> (0::'b)\n 2. q3 = q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2", "from c c2"], ["proof (chain)\npicking this:\n  lookup q1 (t2 \\<oplus> lt f2) = lookup p (t2 \\<oplus> lt f2)\n  lookup p (t2 \\<oplus> lt f2) \\<noteq> (0::'b)", "show \"lookup q1 (t2 \\<oplus> lt f2) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup q1 (t2 \\<oplus> lt f2) = lookup p (t2 \\<oplus> lt f2)\n  lookup p (t2 \\<oplus> lt f2) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup q1 (t2 \\<oplus> lt f2) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup q1 (t2 \\<oplus> lt f2) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. q3 = q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q3 = q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2", "show \"q3 = q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q3 = q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2", "unfolding q3_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2 =\n    q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2", ".."], ["proof (state)\nthis:\n  q3 = q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single q1 q3 f2 t2\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"red F q1 q3\""], ["proof (prove)\nusing this:\n  red_single q1 q3 f2 t2\n\ngoal (1 subgoal):\n 1. red F q1 q3", "by (intro red_setI[OF \\<open>f2 \\<in> F\\<close>])"], ["proof (state)\nthis:\n  red F q1 q3\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence q1q3: \"(red F)\\<^sup>*\\<^sup>* q1 q3\""], ["proof (prove)\nusing this:\n  red F q1 q3\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q1 q3", "by (intro r_into_rtranclp)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q1 q3\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from r1"], ["proof (chain)\npicking this:\n  red_single p q1 f1 t1", "have \"red F p q1\""], ["proof (prove)\nusing this:\n  red_single p q1 f1 t1\n\ngoal (1 subgoal):\n 1. red F p q1", "by (intro red_setI[OF \\<open>f1 \\<in> F\\<close>])"], ["proof (state)\nthis:\n  red F p q1\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from red_plus[OF this, of \"- monom_mult ((lookup p (t2 \\<oplus> lt f2)) / lc f2) t2 f2\"]"], ["proof (chain)\npicking this:\n  (\\<And>s.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>*\n                (p +\n                 - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2)\n                s;\n       (red F)\\<^sup>*\\<^sup>*\n        (q1 + - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2)\n        s\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain s\n    where r3: \"(red F)\\<^sup>*\\<^sup>* (p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s\"\n    and r4: \"(red F)\\<^sup>*\\<^sup>* (q1 - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s\""], ["proof (prove)\nusing this:\n  (\\<And>s.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>*\n                (p +\n                 - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2)\n                s;\n       (red F)\\<^sup>*\\<^sup>*\n        (q1 + - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2)\n        s\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>*\n                  (p -\n                   monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2)\n                  s;\n         (red F)\\<^sup>*\\<^sup>*\n          (q1 - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2)\n          s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>*\n   (p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s\n  (red F)\\<^sup>*\\<^sup>*\n   (q1 - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from r3"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>*\n   (p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s", "have q2s: \"(red F)\\<^sup>*\\<^sup>* q2 s\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>*\n   (p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q2 s", "unfolding q2_def"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>*\n   (p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>*\n     (p - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s", "by simp"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q2 s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from r4 c"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>*\n   (q1 - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s\n  lookup q1 (t2 \\<oplus> lt f2) = lookup p (t2 \\<oplus> lt f2)", "have q3s: \"(red F)\\<^sup>*\\<^sup>* q3 s\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>*\n   (q1 - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s\n  lookup q1 (t2 \\<oplus> lt f2) = lookup p (t2 \\<oplus> lt f2)\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q3 s", "unfolding q3_def"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>*\n   (q1 - monom_mult (lookup p (t2 \\<oplus> lt f2) / lc f2) t2 f2) s\n  lookup q1 (t2 \\<oplus> lt f2) = lookup p (t2 \\<oplus> lt f2)\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>*\n     (q1 - monom_mult (lookup q1 (t2 \\<oplus> lt f2) / lc f2) t2 f2) s", "by simp"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q3 s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* q1 ?s27\n 2. (red F)\\<^sup>*\\<^sup>* q2 ?s27", "from rtranclp_trans[OF q1q3 q3s]"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* q1 s", "show \"(red F)\\<^sup>*\\<^sup>* q1 s\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* q1 s\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q1 s", "."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q1 s\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q2 s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q2 s", "from q2s"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* q2 s", "show \"(red F)\\<^sup>*\\<^sup>* q2 s\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* q2 s\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q2 s", "."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q2 s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma confluent_distinct:\n  assumes r1: \"red_single p q1 f1 t1\" and r2: \"red_single p q2 f2 t2\"\n    and ne: \"t1 \\<oplus> lt f1 \\<noteq> t2 \\<oplus> lt f2\" and \"f1 \\<in> F\" and \"f2 \\<in> F\"\n  obtains s where \"(red F)\\<^sup>*\\<^sup>* q1 s\" and \"(red F)\\<^sup>*\\<^sup>* q2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from ne"], ["proof (chain)\npicking this:\n  t1 \\<oplus> lt f1 \\<noteq> t2 \\<oplus> lt f2", "have \"t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2 \\<or> t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1\""], ["proof (prove)\nusing this:\n  t1 \\<oplus> lt f1 \\<noteq> t2 \\<oplus> lt f2\n\ngoal (1 subgoal):\n 1. t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2 \\<or>\n    t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1", "by auto"], ["proof (state)\nthis:\n  t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2 \\<or>\n  t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2 \\<or>\n  t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2 \\<Longrightarrow>\n    thesis\n 2. t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1 \\<Longrightarrow>\n    thesis", "assume a1: \"t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2\""], ["proof (state)\nthis:\n  t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2\n\ngoal (2 subgoals):\n 1. t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2 \\<Longrightarrow>\n    thesis\n 2. t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1 \\<Longrightarrow>\n    thesis", "from confluent_distinct_aux[OF r1 r2 a1 \\<open>f1 \\<in> F\\<close> \\<open>f2 \\<in> F\\<close>]"], ["proof (chain)\npicking this:\n  (\\<And>s.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n       (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain s where\n      \"(red F)\\<^sup>*\\<^sup>* q1 s\" and \"(red F)\\<^sup>*\\<^sup>* q2 s\""], ["proof (prove)\nusing this:\n  (\\<And>s.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n       (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q1 s\n  (red F)\\<^sup>*\\<^sup>* q2 s\n\ngoal (2 subgoals):\n 1. t1 \\<oplus> lt f1 \\<prec>\\<^sub>t t2 \\<oplus> lt f2 \\<Longrightarrow>\n    thesis\n 2. t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1 \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* q1 s\n  (red F)\\<^sup>*\\<^sup>* q2 s\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1 \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1 \\<Longrightarrow>\n    thesis", "assume a2: \"t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1\""], ["proof (state)\nthis:\n  t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1\n\ngoal (1 subgoal):\n 1. t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1 \\<Longrightarrow>\n    thesis", "from confluent_distinct_aux[OF r2 r1 a2 \\<open>f2 \\<in> F\\<close> \\<open>f1 \\<in> F\\<close>]"], ["proof (chain)\npicking this:\n  (\\<And>s.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q2 s;\n       (red F)\\<^sup>*\\<^sup>* q1 s\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain s where\n      \"(red F)\\<^sup>*\\<^sup>* q1 s\" and \"(red F)\\<^sup>*\\<^sup>* q2 s\""], ["proof (prove)\nusing this:\n  (\\<And>s.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q2 s;\n       (red F)\\<^sup>*\\<^sup>* q1 s\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q1 s\n  (red F)\\<^sup>*\\<^sup>* q2 s\n\ngoal (1 subgoal):\n 1. t2 \\<oplus> lt f2 \\<prec>\\<^sub>t t1 \\<oplus> lt f1 \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* q1 s\n  (red F)\\<^sup>*\\<^sup>* q2 s\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary confluent_same:\n  assumes r1: \"red_single p q1 f t1\" and r2: \"red_single p q2 f t2\" and \"f \\<in> F\"\n  obtains s where \"(red F)\\<^sup>*\\<^sup>* q1 s\" and \"(red F)\\<^sup>*\\<^sup>* q2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (cases \"t1 = t2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 = t2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<noteq> t2\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  t1 = t2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 = t2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<noteq> t2\\<rbrakk>\n    \\<Longrightarrow> thesis", "with r1 r2"], ["proof (chain)\npicking this:\n  red_single p q1 f t1\n  red_single p q2 f t2\n  t1 = t2", "have \"q1 = q2\""], ["proof (prove)\nusing this:\n  red_single p q1 f t1\n  red_single p q2 f t2\n  t1 = t2\n\ngoal (1 subgoal):\n 1. q1 = q2", "by (simp add: red_single_def)"], ["proof (state)\nthis:\n  q1 = q2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 = t2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<noteq> t2\\<rbrakk>\n    \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* q1 ?s27\n 2. (red F)\\<^sup>*\\<^sup>* q2 ?s27", "show \"(red F)\\<^sup>*\\<^sup>* q1 q2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q1 q2", "unfolding \\<open>q1 = q2\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q2 q2", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q1 q2\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q2 q2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q2 q2", "show \"(red F)\\<^sup>*\\<^sup>* q2 q2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* q2 q2", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q2 q2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<noteq> t2\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<noteq> t2\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  t1 \\<noteq> t2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<noteq> t2\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"t1 \\<oplus> lt f \\<noteq> t2 \\<oplus> lt f\""], ["proof (prove)\nusing this:\n  t1 \\<noteq> t2\n\ngoal (1 subgoal):\n 1. t1 \\<oplus> lt f \\<noteq> t2 \\<oplus> lt f", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  t1 \\<oplus> lt f \\<noteq> t2 \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<noteq> t2\\<rbrakk>\n    \\<Longrightarrow> thesis", "from r1 r2 this \\<open>f \\<in> F\\<close> \\<open>f \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  red_single p q1 f t1\n  red_single p q2 f t2\n  t1 \\<oplus> lt f \\<noteq> t2 \\<oplus> lt f\n  f \\<in> F\n  f \\<in> F", "obtain s where \"(red F)\\<^sup>*\\<^sup>* q1 s\" and \"(red F)\\<^sup>*\\<^sup>* q2 s\""], ["proof (prove)\nusing this:\n  red_single p q1 f t1\n  red_single p q2 f t2\n  t1 \\<oplus> lt f \\<noteq> t2 \\<oplus> lt f\n  f \\<in> F\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n         (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule confluent_distinct)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* q1 s\n  (red F)\\<^sup>*\\<^sup>* q2 s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                \\<lbrakk>(red F)\\<^sup>*\\<^sup>* q1 s;\n                 (red F)\\<^sup>*\\<^sup>* q2 s\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<noteq> t2\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* q1 s\n  (red F)\\<^sup>*\\<^sup>* q2 s\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Reducibility and Module Membership\\<close>"], ["", "lemma srtc_in_pmdl:\n  assumes \"relation.srtc (red F) p q\"\n  shows \"p - q \\<in> pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl F", "using assms"], ["proof (prove)\nusing this:\n  relation.srtc (red F) p q\n\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl F", "unfolding relation.srtc_def"], ["proof (prove)\nusing this:\n  (\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl F", "proof (induct rule: rtranclp.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. a - a \\<in> pmdl F\n 2. \\<And>a b c.\n       \\<lbrakk>(\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* a\n                 b;\n        a - b \\<in> pmdl F; red F b c \\<or> red F c b\\<rbrakk>\n       \\<Longrightarrow> a - c \\<in> pmdl F", "fix p"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. a - a \\<in> pmdl F\n 2. \\<And>a b c.\n       \\<lbrakk>(\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* a\n                 b;\n        a - b \\<in> pmdl F; red F b c \\<or> red F c b\\<rbrakk>\n       \\<Longrightarrow> a - c \\<in> pmdl F", "show \"p - p \\<in> pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - p \\<in> pmdl F", "by (simp add: pmdl.span_zero)"], ["proof (state)\nthis:\n  p - p \\<in> pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>(\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* a\n                 b;\n        a - b \\<in> pmdl F; red F b c \\<or> red F c b\\<rbrakk>\n       \\<Longrightarrow> a - c \\<in> pmdl F", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>(\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* a\n                 b;\n        a - b \\<in> pmdl F; red F b c \\<or> red F c b\\<rbrakk>\n       \\<Longrightarrow> a - c \\<in> pmdl F", "fix p r q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>(\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* a\n                 b;\n        a - b \\<in> pmdl F; red F b c \\<or> red F c b\\<rbrakk>\n       \\<Longrightarrow> a - c \\<in> pmdl F", "assume pr_in: \"p - r \\<in> pmdl F\" and red: \"red F r q \\<or> red F q r\""], ["proof (state)\nthis:\n  p - r \\<in> pmdl F\n  red F r q \\<or> red F q r\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>(\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* a\n                 b;\n        a - b \\<in> pmdl F; red F b c \\<or> red F c b\\<rbrakk>\n       \\<Longrightarrow> a - c \\<in> pmdl F", "from red"], ["proof (chain)\npicking this:\n  red F r q \\<or> red F q r", "obtain f c t where \"f \\<in> F\" and \"q = r - monom_mult c t f\""], ["proof (prove)\nusing this:\n  red F r q \\<or> red F q r\n\ngoal (1 subgoal):\n 1. (\\<And>f c t.\n        \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F r q\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"red F r q\""], ["proof (state)\nthis:\n  red F r q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F r q\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "from red_setE[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single r q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f t where \"f \\<in> F\" and \"red_single r q f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single r q f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single r q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  f \\<in> F\n  red_single r q f t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F r q\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"q = r - monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single r q f t\n\ngoal (1 subgoal):\n 1. q = r - monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f", "by (simp add: red_single_def)"], ["proof (state)\nthis:\n  q = r - monom_mult (lookup r (t \\<oplus> lt f) / lc f) t f\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F r q\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "by (rule, fact, fact)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"red F q r\""], ["proof (state)\nthis:\n  red F q r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "from red_setE[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single q r f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain f t where \"f \\<in> F\" and \"red_single q r f t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single q r f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single q r f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  f \\<in> F\n  red_single q r f t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"r = q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  red_single q r f t\n\ngoal (1 subgoal):\n 1. r = q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f", "by (simp add: red_single_def)"], ["proof (state)\nthis:\n  r = q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"q = r + monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f\""], ["proof (prove)\nusing this:\n  r = q - monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q = r + monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f", "by simp"], ["proof (state)\nthis:\n  q = r + monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"q = r - monom_mult (-(lookup q (t \\<oplus> lt f) / lc f)) t f\""], ["proof (prove)\nusing this:\n  q = r + monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. q = r - monom_mult (- (lookup q (t \\<oplus> lt f) / lc f)) t f", "using monom_mult_uminus_left[of _ t f]"], ["proof (prove)\nusing this:\n  q = r + monom_mult (lookup q (t \\<oplus> lt f) / lc f) t f\n  monom_mult (- ?c) t f = - monom_mult ?c t f\n\ngoal (1 subgoal):\n 1. q = r - monom_mult (- (lookup q (t \\<oplus> lt f) / lc f)) t f", "by simp"], ["proof (state)\nthis:\n  q = r - monom_mult (- (lookup q (t \\<oplus> lt f) / lc f)) t f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f c t.\n                \\<lbrakk>f \\<in> F; q = r - monom_mult c t f\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     red F q r\\<rbrakk>\n    \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "by (rule, fact, fact)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> F\n  q = r - monom_mult c t f\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>(\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* a\n                 b;\n        a - b \\<in> pmdl F; red F b c \\<or> red F c b\\<rbrakk>\n       \\<Longrightarrow> a - c \\<in> pmdl F", "hence eq: \"p - q = (p - r) + monom_mult c t f\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  q = r - monom_mult c t f\n\ngoal (1 subgoal):\n 1. p - q = p - r + monom_mult c t f", "by simp"], ["proof (state)\nthis:\n  p - q = p - r + monom_mult c t f\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>(\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* a\n                 b;\n        a - b \\<in> pmdl F; red F b c \\<or> red F c b\\<rbrakk>\n       \\<Longrightarrow> a - c \\<in> pmdl F", "show \"p - q \\<in> pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl F", "unfolding eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. p - r + monom_mult c t f \\<in> pmdl F", "by (rule pmdl.span_add, fact, rule monom_mult_in_pmdl, fact)"], ["proof (state)\nthis:\n  p - q \\<in> pmdl F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_pmdl_srtc:\n  assumes \"p \\<in> pmdl F\"\n  shows \"relation.srtc (red F) p 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relation.srtc (red F) p 0", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> pmdl F\n\ngoal (1 subgoal):\n 1. relation.srtc (red F) p 0", "proof (induct p rule: pmdl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. relation.srtc (red F) 0 0\n 2. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl F; relation.srtc (red F) a 0; p \\<in> F;\n        c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> relation.srtc (red F) (a + monom_mult c t p) 0", "show \"relation.srtc (red F) 0 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relation.srtc (red F) 0 0", "unfolding relation.srtc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a b. red F a b \\<or> red F b a)\\<^sup>*\\<^sup>* 0 0", ".."], ["proof (state)\nthis:\n  relation.srtc (red F) 0 0\n\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl F; relation.srtc (red F) a 0; p \\<in> F;\n        c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> relation.srtc (red F) (a + monom_mult c t p) 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl F; relation.srtc (red F) a 0; p \\<in> F;\n        c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> relation.srtc (red F) (a + monom_mult c t p) 0", "fix a f c t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl F; relation.srtc (red F) a 0; p \\<in> F;\n        c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> relation.srtc (red F) (a + monom_mult c t p) 0", "assume a_in: \"a \\<in> pmdl F\" and IH: \"relation.srtc (red F) a 0\" and \"f \\<in> F\""], ["proof (state)\nthis:\n  a \\<in> pmdl F\n  relation.srtc (red F) a 0\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. \\<And>a p c t.\n       \\<lbrakk>a \\<in> pmdl F; relation.srtc (red F) a 0; p \\<in> F;\n        c \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> relation.srtc (red F) (a + monom_mult c t p) 0", "show \"relation.srtc (red F) (a + monom_mult c t f) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relation.srtc (red F) (a + monom_mult c t f) 0", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "assume \"c = 0\""], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "hence \"a + monom_mult c t f = a\""], ["proof (prove)\nusing this:\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. a + monom_mult c t f = a", "by simp"], ["proof (state)\nthis:\n  a + monom_mult c t f = a\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  a + monom_mult c t f = a\n\ngoal (1 subgoal):\n 1. relation.srtc (red F) (a + monom_mult c t f) 0", "using IH"], ["proof (prove)\nusing this:\n  a + monom_mult c t f = a\n  relation.srtc (red F) a 0\n\ngoal (1 subgoal):\n 1. relation.srtc (red F) (a + monom_mult c t f) 0", "by simp"], ["proof (state)\nthis:\n  relation.srtc (red F) (a + monom_mult c t f) 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "assume \"c \\<noteq> 0\""], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. relation.srtc (red F) (a + monom_mult c t f) 0", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> relation.srtc (red F) (a + monom_mult c t f) 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "assume \"f = 0\""], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> relation.srtc (red F) (a + monom_mult c t f) 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "hence \"a + monom_mult c t f = a\""], ["proof (prove)\nusing this:\n  f = 0\n\ngoal (1 subgoal):\n 1. a + monom_mult c t f = a", "by simp"], ["proof (state)\nthis:\n  a + monom_mult c t f = a\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> relation.srtc (red F) (a + monom_mult c t f) 0\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  a + monom_mult c t f = a\n\ngoal (1 subgoal):\n 1. relation.srtc (red F) (a + monom_mult c t f) 0", "using IH"], ["proof (prove)\nusing this:\n  a + monom_mult c t f = a\n  relation.srtc (red F) a 0\n\ngoal (1 subgoal):\n 1. relation.srtc (red F) (a + monom_mult c t f) 0", "by simp"], ["proof (state)\nthis:\n  relation.srtc (red F) (a + monom_mult c t f) 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "assume \"f \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "from lc_not_0[OF this]"], ["proof (chain)\npicking this:\n  lc f \\<noteq> (0::'b)", "have \"lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lc f \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "have \"red F (monom_mult c t f) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F (monom_mult c t f) 0", "proof (intro red_setI[OF \\<open>f \\<in> F\\<close>])"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single (monom_mult c t f) 0 f ?t", "from lookup_monom_mult_plus[of c t f \"lt f\"]"], ["proof (chain)\npicking this:\n  lookup (monom_mult c t f) (t \\<oplus> lt f) = c * lookup f (lt f)", "have eq: \"lookup (monom_mult c t f) (t \\<oplus> lt f) = c * lc f\""], ["proof (prove)\nusing this:\n  lookup (monom_mult c t f) (t \\<oplus> lt f) = c * lookup f (lt f)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t f) (t \\<oplus> lt f) = c * lc f", "unfolding lc_def"], ["proof (prove)\nusing this:\n  lookup (monom_mult c t f) (t \\<oplus> lt f) = c * lookup f (lt f)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult c t f) (t \\<oplus> lt f) = c * lookup f (lt f)", "."], ["proof (state)\nthis:\n  lookup (monom_mult c t f) (t \\<oplus> lt f) = c * lc f\n\ngoal (1 subgoal):\n 1. red_single (monom_mult c t f) 0 f ?t", "show \"red_single (monom_mult c t f) 0 f t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single (monom_mult c t f) 0 f t", "unfolding red_single_def eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<and>\n    c * lc f \\<noteq> (0::'b) \\<and>\n    0 = monom_mult c t f - monom_mult (c * lc f / lc f) t f", "proof (intro conjI, fact)"], ["proof (state)\ngoal (2 subgoals):\n 1. c * lc f \\<noteq> (0::'b)\n 2. 0 = monom_mult c t f - monom_mult (c * lc f / lc f) t f", "from \\<open>c \\<noteq> 0\\<close> \\<open>lc f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'b)\n  lc f \\<noteq> (0::'b)", "show \"c * lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c * lc f \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  c * lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. 0 = monom_mult c t f - monom_mult (c * lc f / lc f) t f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 = monom_mult c t f - monom_mult (c * lc f / lc f) t f", "from \\<open>lc f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lc f \\<noteq> (0::'b)", "show \"0 = monom_mult c t f - monom_mult (c * lc f / lc f) t f\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. 0 = monom_mult c t f - monom_mult (c * lc f / lc f) t f", "by simp"], ["proof (state)\nthis:\n  0 = monom_mult c t f - monom_mult (c * lc f / lc f) t f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single (monom_mult c t f) 0 f t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red F (monom_mult c t f) 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "from red_plus[OF this, of a]"], ["proof (chain)\npicking this:\n  (\\<And>s.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (monom_mult c t f + a) s;\n       (red F)\\<^sup>*\\<^sup>* (0 + a) s\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain s where\n        s1: \"(red F)\\<^sup>*\\<^sup>* (monom_mult c t f + a) s\" and s2: \"(red F)\\<^sup>*\\<^sup>* (0 + a) s\""], ["proof (prove)\nusing this:\n  (\\<And>s.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (monom_mult c t f + a) s;\n       (red F)\\<^sup>*\\<^sup>* (0 + a) s\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (monom_mult c t f + a) s;\n         (red F)\\<^sup>*\\<^sup>* (0 + a) s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (monom_mult c t f + a) s\n  (red F)\\<^sup>*\\<^sup>* (0 + a) s\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "have \"relation.cs (red F) (a + monom_mult c t f) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relation.cs (red F) (a + monom_mult c t f) a", "unfolding relation.cs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s.\n       (red F)\\<^sup>*\\<^sup>* (a + monom_mult c t f) s \\<and>\n       (red F)\\<^sup>*\\<^sup>* a s", "proof (intro exI[of _ s], intro conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* (a + monom_mult c t f) s\n 2. (red F)\\<^sup>*\\<^sup>* a s", "from s1"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* (monom_mult c t f + a) s", "show \"(red F)\\<^sup>*\\<^sup>* (a + monom_mult c t f) s\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (monom_mult c t f + a) s\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (a + monom_mult c t f) s", "by (simp only: add.commute)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (a + monom_mult c t f) s\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* a s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* a s", "from s2"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* (0 + a) s", "show \"(red F)\\<^sup>*\\<^sup>* a s\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (0 + a) s\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* a s", "by simp"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* a s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  relation.cs (red F) (a + monom_mult c t f) a\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    relation.srtc (red F) (a + monom_mult c t f) 0", "from relation.srtc_transitive[OF relation.cs_implies_srtc[OF this] IH]"], ["proof (chain)\npicking this:\n  relation.srtc (red F) (a + monom_mult c t f) 0", "show ?thesis"], ["proof (prove)\nusing this:\n  relation.srtc (red F) (a + monom_mult c t f) 0\n\ngoal (1 subgoal):\n 1. relation.srtc (red F) (a + monom_mult c t f) 0", "."], ["proof (state)\nthis:\n  relation.srtc (red F) (a + monom_mult c t f) 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  relation.srtc (red F) (a + monom_mult c t f) 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  relation.srtc (red F) (a + monom_mult c t f) 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_rtranclp_diff_in_pmdl:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"p - q \\<in> pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl F", "from assms"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* p q", "have \"relation.srtc (red F) p q\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. relation.srtc (red F) p q", "by (simp add: r_into_rtranclp relation.rtc_implies_srtc)"], ["proof (state)\nthis:\n  relation.srtc (red F) p q\n\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl F", "thus ?thesis"], ["proof (prove)\nusing this:\n  relation.srtc (red F) p q\n\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl F", "by (rule srtc_in_pmdl)"], ["proof (state)\nthis:\n  p - q \\<in> pmdl F\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary red_diff_in_pmdl:\n  assumes \"red F p q\"\n  shows \"p - q \\<in> pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl F", "by (rule red_rtranclp_diff_in_pmdl, rule r_into_rtranclp, fact)"], ["", "corollary red_rtranclp_0_in_pmdl:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p 0\"\n  shows \"p \\<in> pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> pmdl F", "using assms red_rtranclp_diff_in_pmdl"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p 0\n  (red ?F)\\<^sup>*\\<^sup>* ?p ?q \\<Longrightarrow> ?p - ?q \\<in> pmdl ?F\n\ngoal (1 subgoal):\n 1. p \\<in> pmdl F", "by fastforce"], ["", "lemma pmdl_closed_red:\n  assumes \"pmdl B \\<subseteq> pmdl A\" and \"p \\<in> pmdl A\" and \"red B p q\"\n  shows \"q \\<in> pmdl A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> pmdl A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<in> pmdl A", "have \"q - p \\<in> pmdl A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q - p \\<in> pmdl A", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. q - p \\<in> ?A\n 2. ?A \\<subseteq> pmdl A", "have \"p - q \\<in> pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - q \\<in> pmdl B", "by (rule red_diff_in_pmdl, fact)"], ["proof (state)\nthis:\n  p - q \\<in> pmdl B\n\ngoal (2 subgoals):\n 1. q - p \\<in> ?A\n 2. ?A \\<subseteq> pmdl A", "hence \"- (p - q) \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  p - q \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. - (p - q) \\<in> pmdl B", "by (rule pmdl.span_neg)"], ["proof (state)\nthis:\n  - (p - q) \\<in> pmdl B\n\ngoal (2 subgoals):\n 1. q - p \\<in> ?A\n 2. ?A \\<subseteq> pmdl A", "thus \"q - p \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  - (p - q) \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. q - p \\<in> pmdl B", "by simp"], ["proof (state)\nthis:\n  q - p \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. pmdl B \\<subseteq> pmdl A", "qed fact"], ["proof (state)\nthis:\n  q - p \\<in> pmdl A\n\ngoal (1 subgoal):\n 1. q \\<in> pmdl A", "from pmdl.span_add[OF this \\<open>p \\<in> pmdl A\\<close>]"], ["proof (chain)\npicking this:\n  q - p + p \\<in> pmdl A", "show ?thesis"], ["proof (prove)\nusing this:\n  q - p + p \\<in> pmdl A\n\ngoal (1 subgoal):\n 1. q \\<in> pmdl A", "by simp"], ["proof (state)\nthis:\n  q \\<in> pmdl A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>More Properties of @{const red}, @{const red_single} and @{const is_red}\\<close>"], ["", "lemma red_rtrancl_mult:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"(red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "case True"], ["proof (state)\nthis:\n  c = (0::'b)\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "have \"(red F)\\<^sup>*\\<^sup>* 0 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* 0 0", "by simp"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* 0 0\n\ngoal (2 subgoals):\n 1. c = (0::'b) \\<Longrightarrow>\n    (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)\n 2. c \\<noteq> (0::'b) \\<Longrightarrow>\n    (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* 0 0\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "by (simp only: True monom_mult_zero_left)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<Longrightarrow>\n    (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "from assms"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* p q", "show ?thesis"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "proof (induct rule: rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t p)\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n         (monom_mult c t y)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n                          (monom_mult c t z)", "show \"(red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t p)", "by simp"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n         (monom_mult c t y)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n                          (monom_mult c t z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n         (monom_mult c t y)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n                          (monom_mult c t z)", "fix q0 q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n         (monom_mult c t y)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n                          (monom_mult c t z)", "assume \"(red F)\\<^sup>*\\<^sup>* p q0\" and \"red F q0 q\" and \"(red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q0)\""], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p q0\n  red F q0 q\n  (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q0)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n         (monom_mult c t y)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (monom_mult c t p)\n                          (monom_mult c t z)", "show \"(red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)", "proof (rule rtranclp.intros(2)[OF \\<open>(red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q0)\\<close>])"], ["proof (state)\ngoal (1 subgoal):\n 1. red F (monom_mult c t q0) (monom_mult c t q)", "from red_monom_mult[OF \\<open>red F q0 q\\<close> False, of t]"], ["proof (chain)\npicking this:\n  red F (monom_mult c t q0) (monom_mult c t q)", "show \"red F (monom_mult c t q0) (monom_mult c t q)\""], ["proof (prove)\nusing this:\n  red F (monom_mult c t q0) (monom_mult c t q)\n\ngoal (1 subgoal):\n 1. red F (monom_mult c t q0) (monom_mult c t q)", "."], ["proof (state)\nthis:\n  red F (monom_mult c t q0) (monom_mult c t q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (monom_mult c t p) (monom_mult c t q)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary red_rtrancl_uminus:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"(red F)\\<^sup>*\\<^sup>* (-p) (-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (- p) (- q)", "using red_rtrancl_mult[OF assms, of \"-1\" 0]"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (monom_mult (- (1::'b)) (0::'a) p)\n   (monom_mult (- (1::'b)) (0::'a) q)\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (- p) (- q)", "by (simp add: uminus_monom_mult)"], ["", "lemma red_rtrancl_diff_induct [consumes 1, case_names base step]:\n  assumes a: \"(red F)\\<^sup>*\\<^sup>* (p - q) r\"\n    and cases: \"P p p\" \"!!y z. [| (red F)\\<^sup>*\\<^sup>* (p - q) z; red F z y; P p (q + z)|] ==> P p (q + y)\"\n  shows \"P p (q + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P p (q + r)", "using a"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (p - q) r\n\ngoal (1 subgoal):\n 1. P p (q + r)", "proof (induct rule: rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. P p (q + (p - q))\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        P p (q + y)\\<rbrakk>\n       \\<Longrightarrow> P p (q + z)", "from cases(1)"], ["proof (chain)\npicking this:\n  P p p", "show \"P p (q + (p - q))\""], ["proof (prove)\nusing this:\n  P p p\n\ngoal (1 subgoal):\n 1. P p (q + (p - q))", "by simp"], ["proof (state)\nthis:\n  P p (q + (p - q))\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        P p (q + y)\\<rbrakk>\n       \\<Longrightarrow> P p (q + z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        P p (q + y)\\<rbrakk>\n       \\<Longrightarrow> P p (q + z)", "fix y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        P p (q + y)\\<rbrakk>\n       \\<Longrightarrow> P p (q + z)", "assume \"(red F)\\<^sup>*\\<^sup>* (p - q) z\" \"red F z y\" \"P p (q + z)\""], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (p - q) z\n  red F z y\n  P p (q + z)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z;\n        P p (q + y)\\<rbrakk>\n       \\<Longrightarrow> P p (q + z)", "thus \"P p (q + y)\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (p - q) z\n  red F z y\n  P p (q + z)\n\ngoal (1 subgoal):\n 1. P p (q + y)", "using cases(2)"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (p - q) z\n  red F z y\n  P p (q + z)\n  \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) ?z27; red F ?z27 ?y27;\n   P p (q + ?z27)\\<rbrakk>\n  \\<Longrightarrow> P p (q + ?y27)\n\ngoal (1 subgoal):\n 1. P p (q + y)", "by simp"], ["proof (state)\nthis:\n  P p (q + y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_rtrancl_diff_0_induct [consumes 1, case_names base step]:\n  assumes a: \"(red F)\\<^sup>*\\<^sup>* (p - q) 0\"\n    and base: \"P p p\" and ind: \"\\<And>y z. [| (red F)\\<^sup>*\\<^sup>* (p - q) y; red F y z; P p (y + q)|] ==> P p (z + q)\"\n  shows \"P p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P p q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P p q", "from ind red_rtrancl_diff_induct[of F p q 0 P, OF a base]"], ["proof (chain)\npicking this:\n  \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) ?y27; red F ?y27 ?z27;\n   P p (?y27 + q)\\<rbrakk>\n  \\<Longrightarrow> P p (?z27 + q)\n  (\\<And>y z.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) z; red F z y;\n       P p (q + z)\\<rbrakk>\n      \\<Longrightarrow> P p (q + y)) \\<Longrightarrow>\n  P p (q + 0)", "have \"P p (0 + q)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) ?y27; red F ?y27 ?z27;\n   P p (?y27 + q)\\<rbrakk>\n  \\<Longrightarrow> P p (?z27 + q)\n  (\\<And>y z.\n      \\<lbrakk>(red F)\\<^sup>*\\<^sup>* (p - q) z; red F z y;\n       P p (q + z)\\<rbrakk>\n      \\<Longrightarrow> P p (q + y)) \\<Longrightarrow>\n  P p (q + 0)\n\ngoal (1 subgoal):\n 1. P p (0 + q)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  P p (0 + q)\n\ngoal (1 subgoal):\n 1. P p q", "thus ?thesis"], ["proof (prove)\nusing this:\n  P p (0 + q)\n\ngoal (1 subgoal):\n 1. P p q", "by simp"], ["proof (state)\nthis:\n  P p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_union: \"is_red (A \\<union> B) p \\<longleftrightarrow> (is_red A p \\<or> is_red B p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (A \\<union> B) p = (is_red A p \\<or> is_red B p)", "unfolding is_red_alt red_union"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>q. red A p q \\<or> red B p q) =\n    (Ex (red A p) \\<or> Ex (red B p))", "by auto"], ["", "lemma red_single_0_lt:\n  assumes \"red_single f 0 h t\"\n  shows \"lt f = t \\<oplus> lt h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from red_single_nonzero1[OF assms]"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "have \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "."], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "{"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "assume \"h \\<noteq> 0\" and neq: \"lookup f (t \\<oplus> lt h) \\<noteq> 0\" and\n      eq: \"f = monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\""], ["proof (state)\nthis:\n  h \\<noteq> 0\n  lookup f (t \\<oplus> lt h) \\<noteq> (0::'b)\n  f = monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from lc_not_0[OF \\<open>h \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  lc h \\<noteq> (0::'b)", "have \"lc h \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc h \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lc h \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lc h \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "with neq"], ["proof (chain)\npicking this:\n  lookup f (t \\<oplus> lt h) \\<noteq> (0::'b)\n  lc h \\<noteq> (0::'b)", "have \"(lookup f (t \\<oplus> lt h) / lc h) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup f (t \\<oplus> lt h) \\<noteq> (0::'b)\n  lc h \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup f (t \\<oplus> lt h) / lc h \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup f (t \\<oplus> lt h) / lc h \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from eq lt_monom_mult[OF this \\<open>h \\<noteq> 0\\<close>, of t]"], ["proof (chain)\npicking this:\n  f = monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) = t \\<oplus> lt h", "have \"lt f = t \\<oplus> lt h\""], ["proof (prove)\nusing this:\n  f = monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "by simp"], ["proof (state)\nthis:\n  lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "hence \"lt f = t \\<oplus> lt h\""], ["proof (prove)\nusing this:\n  lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "}"], ["proof (state)\nthis:\n  \\<lbrakk>h \\<noteq> 0; lookup f (t \\<oplus> lt h) \\<noteq> (0::'b);\n   f = monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\\<rbrakk>\n  \\<Longrightarrow> lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "with assms"], ["proof (chain)\npicking this:\n  red_single f 0 h t\n  \\<lbrakk>h \\<noteq> 0; lookup f (t \\<oplus> lt h) \\<noteq> (0::'b);\n   f = monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\\<rbrakk>\n  \\<Longrightarrow> lt f = t \\<oplus> lt h", "show ?thesis"], ["proof (prove)\nusing this:\n  red_single f 0 h t\n  \\<lbrakk>h \\<noteq> 0; lookup f (t \\<oplus> lt h) \\<noteq> (0::'b);\n   f = monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\\<rbrakk>\n  \\<Longrightarrow> lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  h \\<noteq> 0 \\<and>\n  lookup f (t \\<oplus> lt h) \\<noteq> (0::'b) \\<and>\n  0 = f - monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  \\<lbrakk>h \\<noteq> 0; lookup f (t \\<oplus> lt h) \\<noteq> (0::'b);\n   f = monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\\<rbrakk>\n  \\<Longrightarrow> lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "by auto"], ["proof (state)\nthis:\n  lt f = t \\<oplus> lt h\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_single_lt_distinct_lt:\n  assumes rs: \"red_single f g h t\" and \"g \\<noteq> 0\" and \"lt g \\<noteq> lt f\"\n  shows \"lt f = t \\<oplus> lt h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from red_single_nonzero1[OF rs]"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "have \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "."], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from red_single_ord[OF rs]"], ["proof (chain)\npicking this:\n  g \\<prec>\\<^sub>p f", "have \"g \\<preceq>\\<^sub>p f\""], ["proof (prove)\nusing this:\n  g \\<prec>\\<^sub>p f\n\ngoal (1 subgoal):\n 1. g \\<preceq>\\<^sub>p f", "by simp"], ["proof (state)\nthis:\n  g \\<preceq>\\<^sub>p f\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from ord_p_lt[OF this] \\<open>lt g \\<noteq> lt f\\<close>"], ["proof (chain)\npicking this:\n  lt g \\<preceq>\\<^sub>t lt f\n  lt g \\<noteq> lt f", "have \"lt g \\<prec>\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  lt g \\<preceq>\\<^sub>t lt f\n  lt g \\<noteq> lt f\n\ngoal (1 subgoal):\n 1. lt g \\<prec>\\<^sub>t lt f", "by simp"], ["proof (state)\nthis:\n  lt g \\<prec>\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "{"], ["proof (state)\nthis:\n  lt g \\<prec>\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "assume \"h \\<noteq> 0\" and neq: \"lookup f (t \\<oplus> lt h) \\<noteq> 0\" and\n      eq: \"f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\" (is \"f = g + ?R\")"], ["proof (state)\nthis:\n  h \\<noteq> 0\n  lookup f (t \\<oplus> lt h) \\<noteq> (0::'b)\n  f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from lc_not_0[OF \\<open>h \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  lc h \\<noteq> (0::'b)", "have \"lc h \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc h \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lc h \\<noteq> (0::'b)", "."], ["proof (state)\nthis:\n  lc h \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "with neq"], ["proof (chain)\npicking this:\n  lookup f (t \\<oplus> lt h) \\<noteq> (0::'b)\n  lc h \\<noteq> (0::'b)", "have \"(lookup f (t \\<oplus> lt h) / lc h) \\<noteq> 0\" (is \"?c \\<noteq> 0\")"], ["proof (prove)\nusing this:\n  lookup f (t \\<oplus> lt h) \\<noteq> (0::'b)\n  lc h \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup f (t \\<oplus> lt h) / lc h \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup f (t \\<oplus> lt h) / lc h \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from eq lt_monom_mult[OF this \\<open>h \\<noteq> 0\\<close>, of t]"], ["proof (chain)\npicking this:\n  f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) = t \\<oplus> lt h", "have ltR: \"lt ?R = t \\<oplus> lt h\""], ["proof (prove)\nusing this:\n  f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) =\n    t \\<oplus> lt h", "by simp"], ["proof (state)\nthis:\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from monom_mult_eq_zero_iff[of ?c t h] \\<open>?c \\<noteq> 0\\<close> \\<open>h \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h = 0) =\n  (lookup f (t \\<oplus> lt h) / lc h = (0::'b) \\<or> h = 0)\n  lookup f (t \\<oplus> lt h) / lc h \\<noteq> (0::'b)\n  h \\<noteq> 0", "have \"?R \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h = 0) =\n  (lookup f (t \\<oplus> lt h) / lc h = (0::'b) \\<or> h = 0)\n  lookup f (t \\<oplus> lt h) / lc h \\<noteq> (0::'b)\n  h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from lt_plus_lessE[of g] eq \\<open>lt g \\<prec>\\<^sub>t lt f\\<close>"], ["proof (chain)\npicking this:\n  lt g \\<prec>\\<^sub>t lt (g + ?q) \\<Longrightarrow>\n  lt g \\<prec>\\<^sub>t lt ?q\n  f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  lt g \\<prec>\\<^sub>t lt f", "have \"lt g \\<prec>\\<^sub>t lt ?R\""], ["proof (prove)\nusing this:\n  lt g \\<prec>\\<^sub>t lt (g + ?q) \\<Longrightarrow>\n  lt g \\<prec>\\<^sub>t lt ?q\n  f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  lt g \\<prec>\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. lt g \\<prec>\\<^sub>t\n    lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h)", "by auto"], ["proof (state)\nthis:\n  lt g \\<prec>\\<^sub>t\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h)\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "from lt_plus_eqI[OF this] eq ltR"], ["proof (chain)\npicking this:\n  lt (g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) =\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h)\n  f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) = t \\<oplus> lt h", "have \"lt f = t \\<oplus> lt h\""], ["proof (prove)\nusing this:\n  lt (g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) =\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h)\n  f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  lt (monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h) = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "}"], ["proof (state)\nthis:\n  \\<lbrakk>h \\<noteq> 0; lookup f (t \\<oplus> lt h) \\<noteq> (0::'b);\n   f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\\<rbrakk>\n  \\<Longrightarrow> lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "with assms"], ["proof (chain)\npicking this:\n  red_single f g h t\n  g \\<noteq> 0\n  lt g \\<noteq> lt f\n  \\<lbrakk>h \\<noteq> 0; lookup f (t \\<oplus> lt h) \\<noteq> (0::'b);\n   f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\\<rbrakk>\n  \\<Longrightarrow> lt f = t \\<oplus> lt h", "show ?thesis"], ["proof (prove)\nusing this:\n  red_single f g h t\n  g \\<noteq> 0\n  lt g \\<noteq> lt f\n  \\<lbrakk>h \\<noteq> 0; lookup f (t \\<oplus> lt h) \\<noteq> (0::'b);\n   f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\\<rbrakk>\n  \\<Longrightarrow> lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "unfolding red_single_def"], ["proof (prove)\nusing this:\n  h \\<noteq> 0 \\<and>\n  lookup f (t \\<oplus> lt h) \\<noteq> (0::'b) \\<and>\n  g = f - monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\n  g \\<noteq> 0\n  lt g \\<noteq> lt f\n  \\<lbrakk>h \\<noteq> 0; lookup f (t \\<oplus> lt h) \\<noteq> (0::'b);\n   f = g + monom_mult (lookup f (t \\<oplus> lt h) / lc h) t h\\<rbrakk>\n  \\<Longrightarrow> lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt f = t \\<oplus> lt h", "by auto"], ["proof (state)\nthis:\n  lt f = t \\<oplus> lt h\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma zero_reducibility_implies_lt_divisibility':\n  assumes \"(red F)\\<^sup>*\\<^sup>* f 0\" and \"f \\<noteq> 0\"\n  shows \"\\<exists>h\\<in>F. h \\<noteq> 0 \\<and> (lt h adds\\<^sub>t lt f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "using assms"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* f 0\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "proof (induct rule: converse_rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt 0\n 2. \\<And>y z.\n       \\<lbrakk>red F y z; (red F)\\<^sup>*\\<^sup>* z 0;\n        z \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt z;\n        y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>F.\n                            h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt y", "case base"], ["proof (state)\nthis:\n  0 \\<noteq> 0\n\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt 0\n 2. \\<And>y z.\n       \\<lbrakk>red F y z; (red F)\\<^sup>*\\<^sup>* z 0;\n        z \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt z;\n        y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>F.\n                            h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt y", "then"], ["proof (chain)\npicking this:\n  0 \\<noteq> 0", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt 0\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>red F y z; (red F)\\<^sup>*\\<^sup>* z 0;\n        z \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt z;\n        y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>F.\n                            h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>red F y z; (red F)\\<^sup>*\\<^sup>* z 0;\n        z \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt z;\n        y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>F.\n                            h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt y", "case (step f g)"], ["proof (state)\nthis:\n  red F f g\n  (red F)\\<^sup>*\\<^sup>* g 0\n  g \\<noteq> 0 \\<Longrightarrow>\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt g\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>red F y z; (red F)\\<^sup>*\\<^sup>* z 0;\n        z \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt z;\n        y \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>F.\n                            h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "proof (cases \"g = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n 2. g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "case True"], ["proof (state)\nthis:\n  g = 0\n\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n 2. g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "with step.hyps"], ["proof (chain)\npicking this:\n  red F f g\n  (red F)\\<^sup>*\\<^sup>* g 0\n  g \\<noteq> 0 \\<Longrightarrow>\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt g\n  g = 0", "have \"red F f 0\""], ["proof (prove)\nusing this:\n  red F f g\n  (red F)\\<^sup>*\\<^sup>* g 0\n  g \\<noteq> 0 \\<Longrightarrow>\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt g\n  g = 0\n\ngoal (1 subgoal):\n 1. red F f 0", "by simp"], ["proof (state)\nthis:\n  red F f 0\n\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n 2. g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "from red_setE[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single f 0 f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain h t where \"h \\<in> F\" and rs: \"red_single f 0 h t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single f 0 f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>h t.\n        \\<lbrakk>h \\<in> F; red_single f 0 h t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  h \\<in> F\n  red_single f 0 h t\n\ngoal (2 subgoals):\n 1. g = 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n 2. g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ?h \\<noteq> 0 \\<and> lt ?h adds\\<^sub>t lt f\n 2. ?h \\<in> F", "from red_single_0_lt[OF rs]"], ["proof (chain)\npicking this:\n  lt f = t \\<oplus> lt h", "have \"lt h adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt h adds\\<^sub>t lt f", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  lt h adds\\<^sub>t lt f\n\ngoal (2 subgoals):\n 1. ?h \\<noteq> 0 \\<and> lt ?h adds\\<^sub>t lt f\n 2. ?h \\<in> F", "also"], ["proof (state)\nthis:\n  lt h adds\\<^sub>t lt f\n\ngoal (2 subgoals):\n 1. ?h \\<noteq> 0 \\<and> lt ?h adds\\<^sub>t lt f\n 2. ?h \\<in> F", "from rs"], ["proof (chain)\npicking this:\n  red_single f 0 h t", "have \"h \\<noteq> 0\""], ["proof (prove)\nusing this:\n  red_single f 0 h t\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0", "by (simp add: red_single_def)"], ["proof (state)\nthis:\n  h \\<noteq> 0\n\ngoal (2 subgoals):\n 1. ?h \\<noteq> 0 \\<and> lt ?h adds\\<^sub>t lt f\n 2. ?h \\<in> F", "ultimately"], ["proof (chain)\npicking this:\n  lt h adds\\<^sub>t lt f\n  h \\<noteq> 0", "show \"h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  lt h adds\\<^sub>t lt f\n  h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "by simp"], ["proof (state)\nthis:\n  h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. h \\<in> F", "qed (rule \\<open>h \\<in> F\\<close>)"], ["proof (state)\nthis:\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "case False"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "proof (cases \"lt g = lt f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lt g = lt f \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n 2. lt g \\<noteq> lt f \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "case True"], ["proof (state)\nthis:\n  lt g = lt f\n\ngoal (2 subgoals):\n 1. lt g = lt f \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n 2. lt g \\<noteq> lt f \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "with False step.hyps"], ["proof (chain)\npicking this:\n  g \\<noteq> 0\n  red F f g\n  (red F)\\<^sup>*\\<^sup>* g 0\n  g \\<noteq> 0 \\<Longrightarrow>\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt g\n  lt g = lt f", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<noteq> 0\n  red F f g\n  (red F)\\<^sup>*\\<^sup>* g 0\n  g \\<noteq> 0 \\<Longrightarrow>\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt g\n  lt g = lt f\n\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "by simp"], ["proof (state)\nthis:\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. lt g \\<noteq> lt f \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt g \\<noteq> lt f \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "case False"], ["proof (state)\nthis:\n  lt g \\<noteq> lt f\n\ngoal (1 subgoal):\n 1. lt g \\<noteq> lt f \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "from red_setE[OF \\<open>red F f g\\<close>]"], ["proof (chain)\npicking this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single f g f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain h t where \"h \\<in> F\" and rs: \"red_single f g h t\""], ["proof (prove)\nusing this:\n  (\\<And>f t.\n      \\<lbrakk>f \\<in> F; red_single f g f t\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>h t.\n        \\<lbrakk>h \\<in> F; red_single f g h t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  h \\<in> F\n  red_single f g h t\n\ngoal (1 subgoal):\n 1. lt g \\<noteq> lt f \\<Longrightarrow>\n    \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ?h \\<noteq> 0 \\<and> lt ?h adds\\<^sub>t lt f\n 2. ?h \\<in> F", "from red_single_lt_distinct_lt[OF rs \\<open>g \\<noteq> 0\\<close> False]"], ["proof (chain)\npicking this:\n  lt f = t \\<oplus> lt h", "have \"lt h adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  lt f = t \\<oplus> lt h\n\ngoal (1 subgoal):\n 1. lt h adds\\<^sub>t lt f", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  lt h adds\\<^sub>t lt f\n\ngoal (2 subgoals):\n 1. ?h \\<noteq> 0 \\<and> lt ?h adds\\<^sub>t lt f\n 2. ?h \\<in> F", "also"], ["proof (state)\nthis:\n  lt h adds\\<^sub>t lt f\n\ngoal (2 subgoals):\n 1. ?h \\<noteq> 0 \\<and> lt ?h adds\\<^sub>t lt f\n 2. ?h \\<in> F", "from rs"], ["proof (chain)\npicking this:\n  red_single f g h t", "have \"h \\<noteq> 0\""], ["proof (prove)\nusing this:\n  red_single f g h t\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0", "by (simp add: red_single_def)"], ["proof (state)\nthis:\n  h \\<noteq> 0\n\ngoal (2 subgoals):\n 1. ?h \\<noteq> 0 \\<and> lt ?h adds\\<^sub>t lt f\n 2. ?h \\<in> F", "ultimately"], ["proof (chain)\npicking this:\n  lt h adds\\<^sub>t lt f\n  h \\<noteq> 0", "show \"h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  lt h adds\\<^sub>t lt f\n  h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f", "by simp"], ["proof (state)\nthis:\n  h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. h \\<in> F", "qed (rule \\<open>h \\<in> F\\<close>)"], ["proof (state)\nthis:\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma zero_reducibility_implies_lt_divisibility:\n  assumes \"(red F)\\<^sup>*\\<^sup>* f 0\" and \"f \\<noteq> 0\"\n  obtains h where \"h \\<in> F\" and \"h \\<noteq> 0\" and \"lt h adds\\<^sub>t lt f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>h \\<in> F; h \\<noteq> 0; lt h adds\\<^sub>t lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zero_reducibility_implies_lt_divisibility'[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>h\\<in>F. h \\<noteq> 0 \\<and> lt h adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>h \\<in> F; h \\<noteq> 0; lt h adds\\<^sub>t lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma is_red_addsI:\n  assumes \"f \\<in> F\" and \"f \\<noteq> 0\" and \"v \\<in> keys p\" and \"lt f adds\\<^sub>t v\"\n  shows \"is_red F p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n  v \\<in> keys p\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red F p", "proof (induction p rule: poly_mapping_tail_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys 0;\n     lt f adds\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> is_red F 0\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys (tail p);\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> is_red F (tail p);\n        f \\<in> F; f \\<noteq> 0; v \\<in> keys p;\n        lt f adds\\<^sub>t v\\<rbrakk>\n       \\<Longrightarrow> is_red F p", "case 0"], ["proof (state)\nthis:\n  f \\<in> F\n  f \\<noteq> 0\n  v \\<in> keys 0\n  lt f adds\\<^sub>t v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys 0;\n     lt f adds\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> is_red F 0\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys (tail p);\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> is_red F (tail p);\n        f \\<in> F; f \\<noteq> 0; v \\<in> keys p;\n        lt f adds\\<^sub>t v\\<rbrakk>\n       \\<Longrightarrow> is_red F p", "from \\<open>v \\<in> keys 0\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys 0", "show ?case"], ["proof (prove)\nusing this:\n  v \\<in> keys 0\n\ngoal (1 subgoal):\n 1. is_red F 0", "by auto"], ["proof (state)\nthis:\n  is_red F 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys (tail p);\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> is_red F (tail p);\n        f \\<in> F; f \\<noteq> 0; v \\<in> keys p;\n        lt f adds\\<^sub>t v\\<rbrakk>\n       \\<Longrightarrow> is_red F p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys (tail p);\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> is_red F (tail p);\n        f \\<in> F; f \\<noteq> 0; v \\<in> keys p;\n        lt f adds\\<^sub>t v\\<rbrakk>\n       \\<Longrightarrow> is_red F p", "case (tail p)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n  \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys (tail p);\n   lt f adds\\<^sub>t v\\<rbrakk>\n  \\<Longrightarrow> is_red F (tail p)\n  f \\<in> F\n  f \\<noteq> 0\n  v \\<in> keys p\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys (tail p);\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> is_red F (tail p);\n        f \\<in> F; f \\<noteq> 0; v \\<in> keys p;\n        lt f adds\\<^sub>t v\\<rbrakk>\n       \\<Longrightarrow> is_red F p", "from \"tail.IH\"[OF \\<open>f \\<in> F\\<close> \\<open>f \\<noteq> 0\\<close> _ \\<open>lt f adds\\<^sub>t v\\<close>]"], ["proof (chain)\npicking this:\n  v \\<in> keys (tail p) \\<Longrightarrow> is_red F (tail p)", "have imp: \"v \\<in> keys (tail p) \\<Longrightarrow> is_red F (tail p)\""], ["proof (prove)\nusing this:\n  v \\<in> keys (tail p) \\<Longrightarrow> is_red F (tail p)\n\ngoal (1 subgoal):\n 1. v \\<in> keys (tail p) \\<Longrightarrow> is_red F (tail p)", "."], ["proof (state)\nthis:\n  v \\<in> keys (tail p) \\<Longrightarrow> is_red F (tail p)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys (tail p);\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> is_red F (tail p);\n        f \\<in> F; f \\<noteq> 0; v \\<in> keys p;\n        lt f adds\\<^sub>t v\\<rbrakk>\n       \\<Longrightarrow> is_red F p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p", "proof (cases \"v = lt p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow> is_red F p\n 2. v \\<noteq> lt p \\<Longrightarrow> is_red F p", "case True"], ["proof (state)\nthis:\n  v = lt p\n\ngoal (2 subgoals):\n 1. v = lt p \\<Longrightarrow> is_red F p\n 2. v \\<noteq> lt p \\<Longrightarrow> is_red F p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p", "proof (rule is_red_indI1[OF \\<open>f \\<in> F\\<close> \\<open>f \\<noteq> 0\\<close> \\<open>p \\<noteq> 0\\<close>])"], ["proof (state)\ngoal (1 subgoal):\n 1. lt f adds\\<^sub>t lt p", "from \\<open>lt f adds\\<^sub>t v\\<close> True"], ["proof (chain)\npicking this:\n  lt f adds\\<^sub>t v\n  v = lt p", "show \"lt f adds\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt f adds\\<^sub>t v\n  v = lt p\n\ngoal (1 subgoal):\n 1. lt f adds\\<^sub>t lt p", "by simp"], ["proof (state)\nthis:\n  lt f adds\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red F p\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow> is_red F p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow> is_red F p", "case False"], ["proof (state)\nthis:\n  v \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow> is_red F p", "with \\<open>v \\<in> keys p\\<close> \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys p\n  p \\<noteq> 0\n  v \\<noteq> lt p", "have \"v \\<in> keys (tail p)\""], ["proof (prove)\nusing this:\n  v \\<in> keys p\n  p \\<noteq> 0\n  v \\<noteq> lt p\n\ngoal (1 subgoal):\n 1. v \\<in> keys (tail p)", "by (simp add: lookup_tail_2 in_keys_iff)"], ["proof (state)\nthis:\n  v \\<in> keys (tail p)\n\ngoal (1 subgoal):\n 1. v \\<noteq> lt p \\<Longrightarrow> is_red F p", "from is_red_indI2[OF \\<open>p \\<noteq> 0\\<close> imp[OF this]]"], ["proof (chain)\npicking this:\n  is_red F p", "show ?thesis"], ["proof (prove)\nusing this:\n  is_red F p\n\ngoal (1 subgoal):\n 1. is_red F p", "."], ["proof (state)\nthis:\n  is_red F p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red F p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_addsE':\n  assumes \"is_red F p\"\n  shows \"\\<exists>f\\<in>F. \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "using assms"], ["proof (prove)\nusing this:\n  is_red F p\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "proof (induction p rule: poly_mapping_tail_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red F 0 \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys 0. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        is_red F (tail p) \\<Longrightarrow>\n        \\<exists>f\\<in>F.\n           \\<exists>v\\<in>keys (tail p).\n              f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v;\n        is_red F p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>F.\n                            \\<exists>v\\<in>keys p.\n                               f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "case 0"], ["proof (state)\nthis:\n  is_red F 0\n\ngoal (2 subgoals):\n 1. is_red F 0 \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys 0. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        is_red F (tail p) \\<Longrightarrow>\n        \\<exists>f\\<in>F.\n           \\<exists>v\\<in>keys (tail p).\n              f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v;\n        is_red F p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>F.\n                            \\<exists>v\\<in>keys p.\n                               f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "with irred_0[of F]"], ["proof (chain)\npicking this:\n  \\<not> is_red F 0\n  is_red F 0", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> is_red F 0\n  is_red F 0\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys 0. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  \\<exists>f\\<in>F.\n     \\<exists>v\\<in>keys 0. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        is_red F (tail p) \\<Longrightarrow>\n        \\<exists>f\\<in>F.\n           \\<exists>v\\<in>keys (tail p).\n              f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v;\n        is_red F p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>F.\n                            \\<exists>v\\<in>keys p.\n                               f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        is_red F (tail p) \\<Longrightarrow>\n        \\<exists>f\\<in>F.\n           \\<exists>v\\<in>keys (tail p).\n              f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v;\n        is_red F p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>F.\n                            \\<exists>v\\<in>keys p.\n                               f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "case (tail p)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n  is_red F (tail p) \\<Longrightarrow>\n  \\<exists>f\\<in>F.\n     \\<exists>v\\<in>keys (tail p). f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n  is_red F p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        is_red F (tail p) \\<Longrightarrow>\n        \\<exists>f\\<in>F.\n           \\<exists>v\\<in>keys (tail p).\n              f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v;\n        is_red F p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>F.\n                            \\<exists>v\\<in>keys p.\n                               f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "from is_red_indE[OF \\<open>is_red F p\\<close>]"], ["proof (chain)\npicking this:\n  (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n  is_red F (tail p)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p) \\<or>\n  is_red F (tail p)\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>F.\n       f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n 2. is_red F (tail p) \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "assume \"\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p\""], ["proof (state)\nthis:\n  \\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>F.\n       f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n 2. is_red F (tail p) \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "then"], ["proof (chain)\npicking this:\n  \\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p", "obtain f where \"f \\<in> F\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t lt p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> F\n  f \\<noteq> 0\n  lt f adds\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. \\<exists>f\\<in>F.\n       f \\<noteq> 0 \\<and> lt f adds\\<^sub>t lt p \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n 2. is_red F (tail p) \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>keys p. ?f \\<noteq> 0 \\<and> lt ?f adds\\<^sub>t v\n 2. ?f \\<in> F", "show \"\\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "proof (intro bexI, intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. f \\<noteq> 0\n 2. lt f adds\\<^sub>t ?v\n 3. ?v \\<in> keys p", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "show \"lt p \\<in> keys p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt p \\<in> keys p", "by (metis in_keys_iff lc_def lc_not_0)"], ["proof (state)\nthis:\n  lt p \\<in> keys p\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0\n 2. lt f adds\\<^sub>t lt p", "qed (rule \\<open>f \\<noteq> 0\\<close>, rule \\<open>lt f adds\\<^sub>t lt p\\<close>)"], ["proof (state)\nthis:\n  \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. f \\<in> F", "qed (rule \\<open>f \\<in> F\\<close>)"], ["proof (state)\nthis:\n  \\<exists>f\\<in>F.\n     \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red F (tail p) \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red F (tail p) \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "assume \"is_red F (tail p)\""], ["proof (state)\nthis:\n  is_red F (tail p)\n\ngoal (1 subgoal):\n 1. is_red F (tail p) \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "from \"tail.IH\"[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>f\\<in>F.\n     \\<exists>v\\<in>keys (tail p). f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "obtain f v\n      where \"f \\<in> F\" and \"f \\<noteq> 0\" and v_in_keys_tail: \"v \\<in> keys (tail p)\" and \"lt f adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>F.\n     \\<exists>v\\<in>keys (tail p). f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. (\\<And>f v.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; v \\<in> keys (tail p);\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in> F\n  f \\<noteq> 0\n  v \\<in> keys (tail p)\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red F (tail p) \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "from \"tail.hyps\" v_in_keys_tail"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  v \\<in> keys (tail p)", "have v_in_keys: \"v \\<in> keys p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  v \\<in> keys (tail p)\n\ngoal (1 subgoal):\n 1. v \\<in> keys p", "by (metis lookup_tail in_keys_iff)"], ["proof (state)\nthis:\n  v \\<in> keys p\n\ngoal (1 subgoal):\n 1. is_red F (tail p) \\<Longrightarrow>\n    \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>F.\n       \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>v\\<in>keys p. ?f \\<noteq> 0 \\<and> lt ?f adds\\<^sub>t v\n 2. ?f \\<in> F", "show \"\\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v", "by (intro bexI, intro conjI, rule \\<open>f \\<noteq> 0\\<close>, rule \\<open>lt f adds\\<^sub>t v\\<close>, rule v_in_keys)"], ["proof (state)\nthis:\n  \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. f \\<in> F", "qed (rule \\<open>f \\<in> F\\<close>)"], ["proof (state)\nthis:\n  \\<exists>f\\<in>F.\n     \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f\\<in>F.\n     \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_addsE:\n  assumes \"is_red F p\"\n  obtains f v where \"f \\<in> F\" and \"v \\<in> keys p\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f v.\n        \\<lbrakk>f \\<in> F; v \\<in> keys p; f \\<noteq> 0;\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using is_red_addsE'[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>F.\n     \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. (\\<And>f v.\n        \\<lbrakk>f \\<in> F; v \\<in> keys p; f \\<noteq> 0;\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma is_red_adds_iff:\n  shows \"(is_red F p) \\<longleftrightarrow> (\\<exists>f\\<in>F. \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p =\n    (\\<exists>f\\<in>F.\n        \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v)", "using is_red_addsE' is_red_addsI"], ["proof (prove)\nusing this:\n  is_red ?F ?p \\<Longrightarrow>\n  \\<exists>f\\<in>?F.\n     \\<exists>v\\<in>keys ?p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v\n  \\<lbrakk>?f \\<in> ?F; ?f \\<noteq> 0; ?v \\<in> keys ?p;\n   lt ?f adds\\<^sub>t ?v\\<rbrakk>\n  \\<Longrightarrow> is_red ?F ?p\n\ngoal (1 subgoal):\n 1. is_red F p =\n    (\\<exists>f\\<in>F.\n        \\<exists>v\\<in>keys p. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v)", "by auto"], ["", "lemma is_red_subset:\n  assumes red: \"is_red A p\" and sub: \"A \\<subseteq> B\"\n  shows \"is_red B p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red B p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red B p", "from red"], ["proof (chain)\npicking this:\n  is_red A p", "obtain f v where \"f \\<in> A\" and \"v \\<in> keys p\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  is_red A p\n\ngoal (1 subgoal):\n 1. (\\<And>f v.\n        \\<lbrakk>f \\<in> A; v \\<in> keys p; f \\<noteq> 0;\n         lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  f \\<in> A\n  v \\<in> keys p\n  f \\<noteq> 0\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red B p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red B p", "by (rule is_red_addsI, rule, fact+)"], ["proof (state)\nthis:\n  is_red B p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_is_red_empty: \"\\<not> is_red {} f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red {} f", "by (simp add: is_red_adds_iff)"], ["", "lemma red_single_mult_const:\n  assumes \"red_single p q f t\" and \"c \\<noteq> 0\"\n  shows \"red_single p q (monom_mult c 0 f) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p q (monom_mult c (0::'a) f) t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p q (monom_mult c (0::'a) f) t", "let ?s = \"t \\<oplus> lt f\""], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p q (monom_mult c (0::'a) f) t", "let ?f = \"monom_mult c 0 f\""], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p q (monom_mult c (0::'a) f) t", "from assms(1)"], ["proof (chain)\npicking this:\n  red_single p q f t", "have \"f \\<noteq> 0\" and \"lookup p ?s \\<noteq> 0\"\n    and \"q = p - monom_mult ((lookup p ?s) / lc f) t f\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&&\n    lookup p (t \\<oplus> lt f) \\<noteq> (0::'b) &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by (simp_all add: red_single_def)"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. red_single p q (monom_mult c (0::'a) f) t", "from this(1) assms(2)"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  c \\<noteq> (0::'b)", "have lt: \"lt ?f = lt f\" and lc: \"lc ?f = c * lc f\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt (monom_mult c (0::'a) f) = lt f &&&\n    lc (monom_mult c (0::'a) f) = c * lc f", "by (simp add: lt_monom_mult term_simps, simp)"], ["proof (state)\nthis:\n  lt (monom_mult c (0::'a) f) = lt f\n  lc (monom_mult c (0::'a) f) = c * lc f\n\ngoal (1 subgoal):\n 1. red_single p q (monom_mult c (0::'a) f) t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p q (monom_mult c (0::'a) f) t", "unfolding red_single_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult c (0::'a) f \\<noteq> 0 \\<and>\n    lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) \\<noteq>\n    (0::'b) \\<and>\n    q =\n    p -\n    monom_mult\n     (lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) /\n      lc (monom_mult c (0::'a) f))\n     t (monom_mult c (0::'a) f)", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. monom_mult c (0::'a) f \\<noteq> 0\n 2. lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) \\<noteq> (0::'b)\n 3. q =\n    p -\n    monom_mult\n     (lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) /\n      lc (monom_mult c (0::'a) f))\n     t (monom_mult c (0::'a) f)", "from \\<open>f \\<noteq> 0\\<close> assms(2)"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  c \\<noteq> (0::'b)", "show \"?f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. monom_mult c (0::'a) f \\<noteq> 0", "by (simp add: monom_mult_eq_zero_iff)"], ["proof (state)\nthis:\n  monom_mult c (0::'a) f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) \\<noteq> (0::'b)\n 2. q =\n    p -\n    monom_mult\n     (lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) /\n      lc (monom_mult c (0::'a) f))\n     t (monom_mult c (0::'a) f)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) \\<noteq> (0::'b)\n 2. q =\n    p -\n    monom_mult\n     (lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) /\n      lc (monom_mult c (0::'a) f))\n     t (monom_mult c (0::'a) f)", "from \\<open>lookup p ?s \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)", "show \"lookup p (t \\<oplus> lt ?f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup p (t \\<oplus> lt f) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) \\<noteq> (0::'b)", "by (simp add: lt)"], ["proof (state)\nthis:\n  lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. q =\n    p -\n    monom_mult\n     (lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) /\n      lc (monom_mult c (0::'a) f))\n     t (monom_mult c (0::'a) f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q =\n    p -\n    monom_mult\n     (lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) /\n      lc (monom_mult c (0::'a) f))\n     t (monom_mult c (0::'a) f)", "show \"q = p - monom_mult (lookup p (t \\<oplus> lt ?f) / lc ?f) t ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q =\n    p -\n    monom_mult\n     (lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) /\n      lc (monom_mult c (0::'a) f))\n     t (monom_mult c (0::'a) f)", "by (simp add: lt monom_mult_assoc lc assms(2), fact)"], ["proof (state)\nthis:\n  q =\n  p -\n  monom_mult\n   (lookup p (t \\<oplus> lt (monom_mult c (0::'a) f)) /\n    lc (monom_mult c (0::'a) f))\n   t (monom_mult c (0::'a) f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single p q (monom_mult c (0::'a) f) t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_rtrancl_plus_higher:\n  assumes \"(red F)\\<^sup>*\\<^sup>* p q\" and \"\\<And>u v. u \\<in> keys p \\<Longrightarrow> v \\<in> keys r \\<Longrightarrow> u \\<prec>\\<^sub>t v\"\n  shows \"(red F)\\<^sup>*\\<^sup>* (p + r) (q + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) (q + r)", "using assms(1)"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) (q + r)", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) (p + r)\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) (p + r)\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) (p + r)", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (p + r) (p + r)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)", "case (step y z)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p y\n  red F y z\n  (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)", "from step(1)"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* p y", "have \"y \\<preceq>\\<^sub>p p\""], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p y\n\ngoal (1 subgoal):\n 1. y \\<preceq>\\<^sub>p p", "by (rule red_rtrancl_ord)"], ["proof (state)\nthis:\n  y \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)", "hence \"lt y \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  y \\<preceq>\\<^sub>p p\n\ngoal (1 subgoal):\n 1. lt y \\<preceq>\\<^sub>t lt p", "by (rule ord_p_lt)"], ["proof (state)\nthis:\n  lt y \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)", "from step(2)"], ["proof (chain)\npicking this:\n  red F y z", "have \"red F (y + r) (z + r)\""], ["proof (prove)\nusing this:\n  red F y z\n\ngoal (1 subgoal):\n 1. red F (y + r) (z + r)", "proof (rule red_plus_keys_disjoint)"], ["proof (state)\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r = {}", "show \"keys y \\<inter> keys r = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r \\<noteq> {} \\<Longrightarrow> False", "assume \"keys y \\<inter> keys r \\<noteq> {}\""], ["proof (state)\nthis:\n  keys y \\<inter> keys r \\<noteq> {}\n\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  keys y \\<inter> keys r \\<noteq> {}", "obtain v where \"v \\<in> keys y\" and \"v \\<in> keys r\""], ["proof (prove)\nusing this:\n  keys y \\<inter> keys r \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys y; v \\<in> keys r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v \\<in> keys y\n  v \\<in> keys r\n\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r \\<noteq> {} \\<Longrightarrow> False", "from this(1)"], ["proof (chain)\npicking this:\n  v \\<in> keys y", "have \"v \\<preceq>\\<^sub>t lt y\" and \"y \\<noteq> 0\""], ["proof (prove)\nusing this:\n  v \\<in> keys y\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt y &&& y \\<noteq> 0", "using lt_max"], ["proof (prove)\nusing this:\n  v \\<in> keys y\n  lookup ?p ?v \\<noteq> (0::?'b) \\<Longrightarrow>\n  ?v \\<preceq>\\<^sub>t lt ?p\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t lt y &&& y \\<noteq> 0", "by (auto simp: in_keys_iff)"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t lt y\n  y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r \\<noteq> {} \\<Longrightarrow> False", "with \\<open>y \\<preceq>\\<^sub>p p\\<close>"], ["proof (chain)\npicking this:\n  y \\<preceq>\\<^sub>p p\n  v \\<preceq>\\<^sub>t lt y\n  y \\<noteq> 0", "have \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  y \\<preceq>\\<^sub>p p\n  v \\<preceq>\\<^sub>t lt y\n  y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "using ord_p_zero_min[of y]"], ["proof (prove)\nusing this:\n  y \\<preceq>\\<^sub>p p\n  v \\<preceq>\\<^sub>t lt y\n  y \\<noteq> 0\n  0 \\<preceq>\\<^sub>p y\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r \\<noteq> {} \\<Longrightarrow> False", "hence \"lt p \\<in> keys p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt p \\<in> keys p", "by (rule lt_in_keys)"], ["proof (state)\nthis:\n  lt p \\<in> keys p\n\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r \\<noteq> {} \\<Longrightarrow> False", "from this \\<open>v \\<in> keys r\\<close>"], ["proof (chain)\npicking this:\n  lt p \\<in> keys p\n  v \\<in> keys r", "have \"lt p \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lt p \\<in> keys p\n  v \\<in> keys r\n\ngoal (1 subgoal):\n 1. lt p \\<prec>\\<^sub>t v", "by (rule assms(2))"], ["proof (state)\nthis:\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r \\<noteq> {} \\<Longrightarrow> False", "with \\<open>lt y \\<preceq>\\<^sub>t lt p\\<close>"], ["proof (chain)\npicking this:\n  lt y \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t v", "have \"lt y \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lt y \\<preceq>\\<^sub>t lt p\n  lt p \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt y \\<prec>\\<^sub>t v", "by simp"], ["proof (state)\nthis:\n  lt y \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. keys y \\<inter> keys r \\<noteq> {} \\<Longrightarrow> False", "with \\<open>v \\<preceq>\\<^sub>t lt y\\<close>"], ["proof (chain)\npicking this:\n  v \\<preceq>\\<^sub>t lt y\n  lt y \\<prec>\\<^sub>t v", "show False"], ["proof (prove)\nusing this:\n  v \\<preceq>\\<^sub>t lt y\n  lt y \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  keys y \\<inter> keys r = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red F (y + r) (z + r)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\\<rbrakk>\n       \\<Longrightarrow> (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)", "with step(3)"], ["proof (chain)\npicking this:\n  (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\n  red F (y + r) (z + r)", "show ?case"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* (p + r) (y + r)\n  red F (y + r) (z + r)\n\ngoal (1 subgoal):\n 1. (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)", ".."], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* (p + r) (z + r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_mult_scalar_leading_monomial: \"(red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f)) (- p \\<odot> tail f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)", "case True"], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)", "by (simp add: True lc_def)"], ["proof (state)\nthis:\n  (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n   (- p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)", "proof (induct p rule: punit.poly_mapping_tail_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (red {f})\\<^sup>*\\<^sup>* (0 \\<odot> monomial (lc f) (lt f))\n     (- 0 \\<odot> tail f)\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (red {f})\\<^sup>*\\<^sup>* (0 \\<odot> monomial (lc f) (lt f))\n     (- 0 \\<odot> tail f)\n 2. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (0 \\<odot> monomial (lc f) (lt f))\n     (- 0 \\<odot> tail f)", "by simp"], ["proof (state)\nthis:\n  (red {f})\\<^sup>*\\<^sup>* (0 \\<odot> monomial (lc f) (lt f))\n   (- 0 \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "case (tail p)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n  (red {f})\\<^sup>*\\<^sup>* (punit.tail p \\<odot> monomial (lc f) (lt f))\n   (- punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "from False"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "have \"lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc f \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "from tail(1)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"punit.lc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. punit.lc p \\<noteq> (0::'b)", "by (rule punit.lc_not_0)"], ["proof (state)\nthis:\n  punit.lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "let ?t = \"punit.tail p \\<odot> monomial (lc f) (lt f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "let ?m = \"monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "from \\<open>lc f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lc f \\<noteq> (0::'b)", "have kt: \"keys ?t = (\\<lambda>t. t \\<oplus> lt f) ` keys (punit.tail p)\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. keys (punit.tail p \\<odot> monomial (lc f) (lt f)) =\n    (\\<lambda>t. t \\<oplus> lt f) ` keys (punit.tail p)", "by (rule keys_mult_scalar_monomial_right)"], ["proof (state)\nthis:\n  keys (punit.tail p \\<odot> monomial (lc f) (lt f)) =\n  (\\<lambda>t. t \\<oplus> lt f) ` keys (punit.tail p)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "have km: \"keys ?m = {punit.lt p \\<oplus> lt f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f))) =\n    {punit.lt p \\<oplus> lt f}", "by (simp add: keys_monom_mult[OF \\<open>punit.lc p \\<noteq> 0\\<close>] \\<open>lc f \\<noteq> 0\\<close>)"], ["proof (state)\nthis:\n  keys (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f))) =\n  {punit.lt p \\<oplus> lt f}\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "from tail(2)"], ["proof (chain)\npicking this:\n  (red {f})\\<^sup>*\\<^sup>* (punit.tail p \\<odot> monomial (lc f) (lt f))\n   (- punit.tail p \\<odot> tail f)", "have \"(red {f})\\<^sup>*\\<^sup>* (?t + ?m) (- punit.tail p \\<odot> tail f + ?m)\""], ["proof (prove)\nusing this:\n  (red {f})\\<^sup>*\\<^sup>* (punit.tail p \\<odot> monomial (lc f) (lt f))\n   (- punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>*\n     (punit.tail p \\<odot> monomial (lc f) (lt f) +\n      monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n     (- punit.tail p \\<odot> tail f +\n      monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))", "proof (rule red_rtrancl_plus_higher)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "assume \"u \\<in> keys ?t\" and \"v \\<in> keys ?m\""], ["proof (state)\nthis:\n  u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f))\n  v \\<in> keys\n           (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "from this(1)"], ["proof (chain)\npicking this:\n  u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f))", "obtain s where \"s \\<in> keys (punit.tail p)\" and u: \"u = s \\<oplus> lt f\""], ["proof (prove)\nusing this:\n  u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f))\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> keys (punit.tail p); u = s \\<oplus> lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding kt"], ["proof (prove)\nusing this:\n  u \\<in> (\\<lambda>t. t \\<oplus> lt f) ` keys (punit.tail p)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> keys (punit.tail p); u = s \\<oplus> lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  s \\<in> keys (punit.tail p)\n  u = s \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> keys (punit.tail p)", "have \"punit.tail p \\<noteq> 0\" and \"s \\<preceq> punit.lt (punit.tail p)\""], ["proof (prove)\nusing this:\n  s \\<in> keys (punit.tail p)\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 &&& s \\<preceq> punit.lt (punit.tail p)", "using punit.lt_max"], ["proof (prove)\nusing this:\n  s \\<in> keys (punit.tail p)\n  lookup ?p ?v \\<noteq> (0::?'b) \\<Longrightarrow> ?v \\<preceq> punit.lt ?p\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 &&& s \\<preceq> punit.lt (punit.tail p)", "by (auto simp: in_keys_iff)"], ["proof (state)\nthis:\n  punit.tail p \\<noteq> 0\n  s \\<preceq> punit.lt (punit.tail p)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "moreover"], ["proof (state)\nthis:\n  punit.tail p \\<noteq> 0\n  s \\<preceq> punit.lt (punit.tail p)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "from \\<open>punit.tail p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  punit.tail p \\<noteq> 0", "have \"punit.lt (punit.tail p) \\<prec> punit.lt p\""], ["proof (prove)\nusing this:\n  punit.tail p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. punit.lt (punit.tail p) \\<prec> punit.lt p", "by (rule punit.lt_tail)"], ["proof (state)\nthis:\n  punit.lt (punit.tail p) \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "ultimately"], ["proof (chain)\npicking this:\n  punit.tail p \\<noteq> 0\n  s \\<preceq> punit.lt (punit.tail p)\n  punit.lt (punit.tail p) \\<prec> punit.lt p", "have \"s \\<prec> punit.lt p\""], ["proof (prove)\nusing this:\n  punit.tail p \\<noteq> 0\n  s \\<preceq> punit.lt (punit.tail p)\n  punit.lt (punit.tail p) \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. s \\<prec> punit.lt p", "by simp"], ["proof (state)\nthis:\n  s \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "moreover"], ["proof (state)\nthis:\n  s \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "from \\<open>v \\<in> keys ?m\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> keys\n           (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))", "have \"v = punit.lt p \\<oplus> lt f\""], ["proof (prove)\nusing this:\n  v \\<in> keys\n           (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n\ngoal (1 subgoal):\n 1. v = punit.lt p \\<oplus> lt f", "by (simp only: km, simp)"], ["proof (state)\nthis:\n  v = punit.lt p \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (punit.tail p \\<odot> monomial (lc f) (lt f));\n        v \\<in> keys\n                 (monom_mult (punit.lc p) (punit.lt p)\n                   (monomial (lc f) (lt f)))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "ultimately"], ["proof (chain)\npicking this:\n  s \\<prec> punit.lt p\n  v = punit.lt p \\<oplus> lt f", "show \"u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  s \\<prec> punit.lt p\n  v = punit.lt p \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "by (simp add: u splus_mono_strict_left)"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (red {f})\\<^sup>*\\<^sup>*\n   (punit.tail p \\<odot> monomial (lc f) (lt f) +\n    monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n   (- punit.tail p \\<odot> tail f +\n    monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "hence *: \"(red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f)) (?m - punit.tail p \\<odot> tail f)\""], ["proof (prove)\nusing this:\n  (red {f})\\<^sup>*\\<^sup>*\n   (punit.tail p \\<odot> monomial (lc f) (lt f) +\n    monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n   (- punit.tail p \\<odot> tail f +\n    monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n      punit.tail p \\<odot> tail f)", "by (simp add: punit.leading_monomial_tail[symmetric, of p] mult_scalar_monomial[symmetric]\n            mult_scalar_distrib_right[symmetric] add.commute[of \"punit.tail p\"])"], ["proof (state)\nthis:\n  (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "have \"red {f} ?m (- (monomial (punit.lc p) (punit.lt p)) \\<odot> tail f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red {f} (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n     (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f)", "unfolding red_singleton"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex (red_single\n         (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n         (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f) f)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single\n     (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n     (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f) f ?x", "show \"red_single ?m (- (monomial (punit.lc p) (punit.lt p)) \\<odot> tail f) f (punit.lt p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single\n     (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n     (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f) f (punit.lt p)", "proof (simp add: red_single_def \\<open>f \\<noteq> 0\\<close> km lookup_monom_mult \\<open>lc f \\<noteq> 0\\<close> \\<open>punit.lc p \\<noteq> 0\\<close> term_simps,\n              simp add: monom_mult_dist_right_minus[symmetric] mult_scalar_monomial)"], ["proof (state)\ngoal (1 subgoal):\n 1. - monom_mult (punit.lc p) (punit.lt p) (tail f) =\n    monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f)", "have \"monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f) =\n              - monom_mult (punit.lc p) (punit.lt p) (f - monomial (lc f) (lt f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f) =\n    - monom_mult (punit.lc p) (punit.lt p) (f - monomial (lc f) (lt f))", "by (metis minus_diff_eq monom_mult_uminus_right)"], ["proof (state)\nthis:\n  monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f) =\n  - monom_mult (punit.lc p) (punit.lt p) (f - monomial (lc f) (lt f))\n\ngoal (1 subgoal):\n 1. - monom_mult (punit.lc p) (punit.lt p) (tail f) =\n    monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f)", "also"], ["proof (state)\nthis:\n  monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f) =\n  - monom_mult (punit.lc p) (punit.lt p) (f - monomial (lc f) (lt f))\n\ngoal (1 subgoal):\n 1. - monom_mult (punit.lc p) (punit.lt p) (tail f) =\n    monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f)", "have \"... = - monom_mult (punit.lc p) (punit.lt p) (tail f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - monom_mult (punit.lc p) (punit.lt p) (f - monomial (lc f) (lt f)) =\n    - monom_mult (punit.lc p) (punit.lt p) (tail f)", "by (simp only: tail_alt_2)"], ["proof (state)\nthis:\n  - monom_mult (punit.lc p) (punit.lt p) (f - monomial (lc f) (lt f)) =\n  - monom_mult (punit.lc p) (punit.lt p) (tail f)\n\ngoal (1 subgoal):\n 1. - monom_mult (punit.lc p) (punit.lt p) (tail f) =\n    monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f)", "finally"], ["proof (chain)\npicking this:\n  monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f) =\n  - monom_mult (punit.lc p) (punit.lt p) (tail f)", "show \"- monom_mult (punit.lc p) (punit.lt p) (tail f) =\n                      monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f)\""], ["proof (prove)\nusing this:\n  monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f) =\n  - monom_mult (punit.lc p) (punit.lt p) (tail f)\n\ngoal (1 subgoal):\n 1. - monom_mult (punit.lc p) (punit.lt p) (tail f) =\n    monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f)", "by simp"], ["proof (state)\nthis:\n  - monom_mult (punit.lc p) (punit.lt p) (tail f) =\n  monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f) - f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red_single (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n   (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f) f (punit.lt p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red {f} (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n   (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "hence \"red {f} (?m + (- punit.tail p \\<odot> tail f))\n                    (- (monomial (punit.lc p) (punit.lt p)) \\<odot> tail f + (- punit.tail p \\<odot> tail f))\""], ["proof (prove)\nusing this:\n  red {f} (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)))\n   (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. red {f}\n     (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) +\n      - punit.tail p \\<odot> tail f)\n     (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f +\n      - punit.tail p \\<odot> tail f)", "proof (rule red_plus_keys_disjoint)"], ["proof (state)\ngoal (1 subgoal):\n 1. keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "show \"keys ?m \\<inter> keys (- punit.tail p \\<odot> tail f) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "proof (cases \"punit.tail p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. punit.tail p = 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}\n 2. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "case True"], ["proof (state)\nthis:\n  punit.tail p = 0\n\ngoal (2 subgoals):\n 1. punit.tail p = 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}\n 2. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "by (simp add: True)"], ["proof (state)\nthis:\n  keys\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f))) \\<inter>\n  keys (- punit.tail p \\<odot> tail f) =\n  {}\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "case False"], ["proof (state)\nthis:\n  punit.tail p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "from tail(2)"], ["proof (chain)\npicking this:\n  (red {f})\\<^sup>*\\<^sup>* (punit.tail p \\<odot> monomial (lc f) (lt f))\n   (- punit.tail p \\<odot> tail f)", "have \"- punit.tail p \\<odot> tail f \\<preceq>\\<^sub>p ?t\""], ["proof (prove)\nusing this:\n  (red {f})\\<^sup>*\\<^sup>* (punit.tail p \\<odot> monomial (lc f) (lt f))\n   (- punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. - punit.tail p \\<odot> tail f \\<preceq>\\<^sub>p\n    punit.tail p \\<odot> monomial (lc f) (lt f)", "by (rule red_rtrancl_ord)"], ["proof (state)\nthis:\n  - punit.tail p \\<odot> tail f \\<preceq>\\<^sub>p\n  punit.tail p \\<odot> monomial (lc f) (lt f)\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "hence \"lt (- punit.tail p \\<odot> tail f) \\<preceq>\\<^sub>t lt ?t\""], ["proof (prove)\nusing this:\n  - punit.tail p \\<odot> tail f \\<preceq>\\<^sub>p\n  punit.tail p \\<odot> monomial (lc f) (lt f)\n\ngoal (1 subgoal):\n 1. lt (- punit.tail p \\<odot> tail f) \\<preceq>\\<^sub>t\n    lt (punit.tail p \\<odot> monomial (lc f) (lt f))", "by (rule ord_p_lt)"], ["proof (state)\nthis:\n  lt (- punit.tail p \\<odot> tail f) \\<preceq>\\<^sub>t\n  lt (punit.tail p \\<odot> monomial (lc f) (lt f))\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "also"], ["proof (state)\nthis:\n  lt (- punit.tail p \\<odot> tail f) \\<preceq>\\<^sub>t\n  lt (punit.tail p \\<odot> monomial (lc f) (lt f))\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "from \\<open>lc f \\<noteq> 0\\<close> False"], ["proof (chain)\npicking this:\n  lc f \\<noteq> (0::'b)\n  punit.tail p \\<noteq> 0", "have \"... = punit.lt (punit.tail p) \\<oplus> lt f\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n  punit.tail p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt (punit.tail p \\<odot> monomial (lc f) (lt f)) =\n    punit.lt (punit.tail p) \\<oplus> lt f", "by (rule lt_mult_scalar_monomial_right)"], ["proof (state)\nthis:\n  lt (punit.tail p \\<odot> monomial (lc f) (lt f)) =\n  punit.lt (punit.tail p) \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "also"], ["proof (state)\nthis:\n  lt (punit.tail p \\<odot> monomial (lc f) (lt f)) =\n  punit.lt (punit.tail p) \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "from punit.lt_tail[OF False]"], ["proof (chain)\npicking this:\n  punit.lt (punit.tail p) \\<prec> punit.lt p", "have \"... \\<prec>\\<^sub>t punit.lt p \\<oplus> lt f\""], ["proof (prove)\nusing this:\n  punit.lt (punit.tail p) \\<prec> punit.lt p\n\ngoal (1 subgoal):\n 1. punit.lt (punit.tail p) \\<oplus> lt f \\<prec>\\<^sub>t\n    punit.lt p \\<oplus> lt f", "by (rule splus_mono_strict_left)"], ["proof (state)\nthis:\n  punit.lt (punit.tail p) \\<oplus> lt f \\<prec>\\<^sub>t\n  punit.lt p \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "finally"], ["proof (chain)\npicking this:\n  lt (- punit.tail p \\<odot> tail f) \\<prec>\\<^sub>t\n  punit.lt p \\<oplus> lt f", "have \"punit.lt p \\<oplus> lt f \\<notin> keys (- punit.tail p \\<odot> tail f)\""], ["proof (prove)\nusing this:\n  lt (- punit.tail p \\<odot> tail f) \\<prec>\\<^sub>t\n  punit.lt p \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. punit.lt p \\<oplus> lt f \\<notin> keys (- punit.tail p \\<odot> tail f)", "using lt_gr_keys"], ["proof (prove)\nusing this:\n  lt (- punit.tail p \\<odot> tail f) \\<prec>\\<^sub>t\n  punit.lt p \\<oplus> lt f\n  \\<lbrakk>?u \\<in> keys ?p; ?v \\<prec>\\<^sub>t ?u\\<rbrakk>\n  \\<Longrightarrow> ?v \\<prec>\\<^sub>t lt ?p\n\ngoal (1 subgoal):\n 1. punit.lt p \\<oplus> lt f \\<notin> keys (- punit.tail p \\<odot> tail f)", "by blast"], ["proof (state)\nthis:\n  punit.lt p \\<oplus> lt f \\<notin> keys (- punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. punit.tail p \\<noteq> 0 \\<Longrightarrow>\n    keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "thus ?thesis"], ["proof (prove)\nusing this:\n  punit.lt p \\<oplus> lt f \\<notin> keys (- punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. keys\n     (monom_mult (punit.lc p) (punit.lt p)\n       (monomial (lc f) (lt f))) \\<inter>\n    keys (- punit.tail p \\<odot> tail f) =\n    {}", "by (simp add: km)"], ["proof (state)\nthis:\n  keys\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f))) \\<inter>\n  keys (- punit.tail p \\<odot> tail f) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  keys\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f))) \\<inter>\n  keys (- punit.tail p \\<odot> tail f) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  red {f}\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) +\n    - punit.tail p \\<odot> tail f)\n   (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f +\n    - punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "hence \"red {f} (?m - punit.tail p \\<odot> tail f)\n            (- (monomial (punit.lc p) (punit.lt p)) \\<odot> tail f - punit.tail p \\<odot> tail f)\""], ["proof (prove)\nusing this:\n  red {f}\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) +\n    - punit.tail p \\<odot> tail f)\n   (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f +\n    - punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. red {f}\n     (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n      punit.tail p \\<odot> tail f)\n     (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f -\n      punit.tail p \\<odot> tail f)", "by (simp add: term_simps)"], ["proof (state)\nthis:\n  red {f}\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n   (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f -\n    punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "also"], ["proof (state)\nthis:\n  red {f}\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n   (- monomial (punit.lc p) (punit.lt p) \\<odot> tail f -\n    punit.tail p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "have \"... = - p \\<odot> tail f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - monomial (punit.lc p) (punit.lt p) \\<odot> tail f -\n    punit.tail p \\<odot> tail f =\n    - p \\<odot> tail f", "using punit.leading_monomial_tail[symmetric, of p]"], ["proof (prove)\nusing this:\n  monomial (punit.lc p) (punit.lt p) + punit.tail p = p\n\ngoal (1 subgoal):\n 1. - monomial (punit.lc p) (punit.lt p) \\<odot> tail f -\n    punit.tail p \\<odot> tail f =\n    - p \\<odot> tail f", "by (metis (mono_tags, lifting) add_uminus_conv_diff minus_add_distrib mult_scalar_distrib_right\n          mult_scalar_minus_mult_left)"], ["proof (state)\nthis:\n  - monomial (punit.lc p) (punit.lt p) \\<odot> tail f -\n  punit.tail p \\<odot> tail f =\n  - p \\<odot> tail f\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "finally"], ["proof (chain)\npicking this:\n  red {f}\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n   (- p \\<odot> tail f)", "have \"red {f} (?m - punit.tail p \\<odot> tail f) (- p \\<odot> tail f)\""], ["proof (prove)\nusing this:\n  red {f}\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n   (- p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. red {f}\n     (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n      punit.tail p \\<odot> tail f)\n     (- p \\<odot> tail f)", "."], ["proof (state)\nthis:\n  red {f}\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n   (- p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>p \\<noteq> 0;\n        (red {f})\\<^sup>*\\<^sup>*\n         (punit.tail p \\<odot> monomial (lc f) (lt f))\n         (- punit.tail p \\<odot> tail f)\\<rbrakk>\n       \\<Longrightarrow> (red {f})\\<^sup>*\\<^sup>*\n                          (p \\<odot> monomial (lc f) (lt f))\n                          (- p \\<odot> tail f)", "with *"], ["proof (chain)\npicking this:\n  (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n  red {f}\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n   (- p \\<odot> tail f)", "show ?case"], ["proof (prove)\nusing this:\n  (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n  red {f}\n   (monom_mult (punit.lc p) (punit.lt p) (monomial (lc f) (lt f)) -\n    punit.tail p \\<odot> tail f)\n   (- p \\<odot> tail f)\n\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n     (- p \\<odot> tail f)", ".."], ["proof (state)\nthis:\n  (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n   (- p \\<odot> tail f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial (lc f) (lt f))\n   (- p \\<odot> tail f)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary red_mult_scalar_lt:\n  assumes \"f \\<noteq> 0\"\n  shows \"(red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial c (lt f)) (monom_mult (- c / lc f) 0 (p \\<odot> tail f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial c (lt f))\n     (monom_mult (- c / lc f) (0::'a) (p \\<odot> tail f))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial c (lt f))\n     (monom_mult (- c / lc f) (0::'a) (p \\<odot> tail f))", "from assms"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "have \"lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc f \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial c (lt f))\n     (monom_mult (- c / lc f) (0::'a) (p \\<odot> tail f))", "hence 1: \"p \\<odot> monomial c (lt f) = punit.monom_mult (c / lc f) 0 p \\<odot> monomial (lc f) (lt f)\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. p \\<odot> monomial c (lt f) =\n    local.punit.monom_mult (c / lc f) (0::'a) p \\<odot>\n    monomial (lc f) (lt f)", "by (simp add: punit.mult_scalar_monomial[symmetric] mult.commute\n        mult_scalar_assoc mult_scalar_monomial_monomial term_simps)"], ["proof (state)\nthis:\n  p \\<odot> monomial c (lt f) =\n  local.punit.monom_mult (c / lc f) (0::'a) p \\<odot> monomial (lc f) (lt f)\n\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial c (lt f))\n     (monom_mult (- c / lc f) (0::'a) (p \\<odot> tail f))", "have 2: \"monom_mult (- c / lc f) 0 (p \\<odot> tail f) = - punit.monom_mult (c / lc f) 0 p \\<odot> tail f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult (- c / lc f) (0::'a) (p \\<odot> tail f) =\n    - local.punit.monom_mult (c / lc f) (0::'a) p \\<odot> tail f", "by (simp add: times_monomial_left[symmetric] mult_scalar_assoc\n        monom_mult_uminus_left mult_scalar_monomial)"], ["proof (state)\nthis:\n  monom_mult (- c / lc f) (0::'a) (p \\<odot> tail f) =\n  - local.punit.monom_mult (c / lc f) (0::'a) p \\<odot> tail f\n\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial c (lt f))\n     (monom_mult (- c / lc f) (0::'a) (p \\<odot> tail f))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial c (lt f))\n     (monom_mult (- c / lc f) (0::'a) (p \\<odot> tail f))", "unfolding 1 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red {f})\\<^sup>*\\<^sup>*\n     (local.punit.monom_mult (c / lc f) (0::'a) p \\<odot>\n      monomial (lc f) (lt f))\n     (- local.punit.monom_mult (c / lc f) (0::'a) p \\<odot> tail f)", "by (fact red_mult_scalar_leading_monomial)"], ["proof (state)\nthis:\n  (red {f})\\<^sup>*\\<^sup>* (p \\<odot> monomial c (lt f))\n   (monom_mult (- c / lc f) (0::'a) (p \\<odot> tail f))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_monomial_iff: \"is_red F (monomial c v) \\<longleftrightarrow> (c \\<noteq> 0 \\<and> (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F (monomial c v) =\n    (c \\<noteq> (0::'b) \\<and>\n     (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v))", "by (simp add: is_red_adds_iff)"], ["", "lemma is_red_monomialI:\n  assumes \"c \\<noteq> 0\" and \"f \\<in> F\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t v\"\n  shows \"is_red F (monomial c v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F (monomial c v)", "unfolding is_red_monomial_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<and>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v)", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b)\n  f \\<in> F\n  f \\<noteq> 0\n  lt f adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<and>\n    (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v)", "by blast"], ["", "lemma is_red_monomialD:\n  assumes \"is_red F (monomial c v)\"\n  shows \"c \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b)", "using assms"], ["proof (prove)\nusing this:\n  is_red F (monomial c v)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b)", "unfolding is_red_monomial_iff"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b) \\<and>\n  (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b)", ".."], ["", "lemma is_red_monomialE:\n  assumes \"is_red F (monomial c v)\"\n  obtains f where \"f \\<in> F\" and \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_red F (monomial c v)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_red_monomial_iff"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b) \\<and>\n  (\\<exists>f\\<in>F. f \\<noteq> 0 \\<and> lt f adds\\<^sub>t v)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> F; f \\<noteq> 0; lt f adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma replace_lt_adds_stable_is_red:\n  assumes red: \"is_red F f\" and \"q \\<noteq> 0\" and \"lt q adds\\<^sub>t lt p\"\n  shows \"is_red (insert q (F - {p})) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "from red"], ["proof (chain)\npicking this:\n  is_red F f", "obtain g v where \"g \\<in> F\" and \"g \\<noteq> 0\" and \"v \\<in> keys f\" and \"lt g adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  is_red F f\n\ngoal (1 subgoal):\n 1. (\\<And>g v.\n        \\<lbrakk>g \\<in> F; g \\<noteq> 0; v \\<in> keys f;\n         lt g adds\\<^sub>t v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  g \\<in> F\n  g \\<noteq> 0\n  v \\<in> keys f\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "proof (cases \"g = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. g = p \\<Longrightarrow> is_red (insert q (F - {p})) f\n 2. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "case True"], ["proof (state)\nthis:\n  g = p\n\ngoal (2 subgoals):\n 1. g = p \\<Longrightarrow> is_red (insert q (F - {p})) f\n 2. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "proof (rule is_red_addsI)"], ["proof (state)\ngoal (4 subgoals):\n 1. ?f \\<in> insert q (F - {p})\n 2. ?f \\<noteq> 0\n 3. ?v \\<in> keys f\n 4. lt ?f adds\\<^sub>t ?v", "show \"q \\<in> insert q (F - {p})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> insert q (F - {p})", "by simp"], ["proof (state)\nthis:\n  q \\<in> insert q (F - {p})\n\ngoal (3 subgoals):\n 1. q \\<noteq> 0\n 2. ?v \\<in> keys f\n 3. lt q adds\\<^sub>t ?v", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. q \\<noteq> 0\n 2. ?v \\<in> keys f\n 3. lt q adds\\<^sub>t ?v", "have \"lt q adds\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt q adds\\<^sub>t lt p", "by fact"], ["proof (state)\nthis:\n  lt q adds\\<^sub>t lt p\n\ngoal (3 subgoals):\n 1. q \\<noteq> 0\n 2. ?v \\<in> keys f\n 3. lt q adds\\<^sub>t ?v", "also"], ["proof (state)\nthis:\n  lt q adds\\<^sub>t lt p\n\ngoal (3 subgoals):\n 1. q \\<noteq> 0\n 2. ?v \\<in> keys f\n 3. lt q adds\\<^sub>t ?v", "have \"... adds\\<^sub>t v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p adds\\<^sub>t v", "using \\<open>lt g adds\\<^sub>t v\\<close>"], ["proof (prove)\nusing this:\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p adds\\<^sub>t v", "unfolding True"], ["proof (prove)\nusing this:\n  lt p adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt p adds\\<^sub>t v", "."], ["proof (state)\nthis:\n  lt p adds\\<^sub>t v\n\ngoal (3 subgoals):\n 1. q \\<noteq> 0\n 2. ?v \\<in> keys f\n 3. lt q adds\\<^sub>t ?v", "finally"], ["proof (chain)\npicking this:\n  lt q adds\\<^sub>t v", "show \"lt q adds\\<^sub>t v\""], ["proof (prove)\nusing this:\n  lt q adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. lt q adds\\<^sub>t v", "."], ["proof (state)\nthis:\n  lt q adds\\<^sub>t v\n\ngoal (2 subgoals):\n 1. q \\<noteq> 0\n 2. v \\<in> keys f", "qed (fact+)"], ["proof (state)\nthis:\n  is_red (insert q (F - {p})) f\n\ngoal (1 subgoal):\n 1. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "case False"], ["proof (state)\nthis:\n  g \\<noteq> p\n\ngoal (1 subgoal):\n 1. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "with \\<open>g \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> F\n  g \\<noteq> p", "have \"g \\<in> insert q (F - {p})\""], ["proof (prove)\nusing this:\n  g \\<in> F\n  g \\<noteq> p\n\ngoal (1 subgoal):\n 1. g \\<in> insert q (F - {p})", "by blast"], ["proof (state)\nthis:\n  g \\<in> insert q (F - {p})\n\ngoal (1 subgoal):\n 1. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "from this \\<open>g \\<noteq> 0\\<close> \\<open>v \\<in> keys f\\<close> \\<open>lt g adds\\<^sub>t v\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> insert q (F - {p})\n  g \\<noteq> 0\n  v \\<in> keys f\n  lt g adds\\<^sub>t v", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> insert q (F - {p})\n  g \\<noteq> 0\n  v \\<in> keys f\n  lt g adds\\<^sub>t v\n\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "by (rule is_red_addsI)"], ["proof (state)\nthis:\n  is_red (insert q (F - {p})) f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red (insert q (F - {p})) f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conversion_property:\n  assumes \"is_red {p} f\" and \"red {r} p q\"\n  shows \"is_red {q} f \\<or> is_red {r} f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red {q} f \\<or> is_red {r} f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red {q} f \\<or> is_red {r} f", "let ?s = \"lp p - lp r\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_red {q} f \\<or> is_red {r} f", "from \\<open>is_red {p} f\\<close>"], ["proof (chain)\npicking this:\n  is_red {p} f", "obtain v where \"v \\<in> keys f\" and \"lt p adds\\<^sub>t v\" and \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_red {p} f\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> keys f; lt p adds\\<^sub>t v; p \\<noteq> 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE, simp)"], ["proof (state)\nthis:\n  v \\<in> keys f\n  lt p adds\\<^sub>t v\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_red {q} f \\<or> is_red {r} f", "from red_indE[OF \\<open>red {r} p q\\<close>]"], ["proof (chain)\npicking this:\n  (\\<exists>f\\<in>{r}.\n      f \\<noteq> 0 \\<and>\n      lt f adds\\<^sub>t lt p \\<and>\n      q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n  red {r} (tail p) (q - monomial (lc p) (lt p))", "have \"(r \\<noteq> 0 \\<and> lt r adds\\<^sub>t lt p \\<and> q = p - monom_mult (lc p / lc r) ?s r) \\<or>\n          red {r} (tail p) (q - monomial (lc p) (lt p))\""], ["proof (prove)\nusing this:\n  (\\<exists>f\\<in>{r}.\n      f \\<noteq> 0 \\<and>\n      lt f adds\\<^sub>t lt p \\<and>\n      q = p - monom_mult (lc p / lc f) (lp p - lp f) f) \\<or>\n  red {r} (tail p) (q - monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 \\<and>\n    lt r adds\\<^sub>t lt p \\<and>\n    q = p - monom_mult (lc p / lc r) (lp p - lp r) r \\<or>\n    red {r} (tail p) (q - monomial (lc p) (lt p))", "by simp"], ["proof (state)\nthis:\n  r \\<noteq> 0 \\<and>\n  lt r adds\\<^sub>t lt p \\<and>\n  q = p - monom_mult (lc p / lc r) (lp p - lp r) r \\<or>\n  red {r} (tail p) (q - monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. is_red {q} f \\<or> is_red {r} f", "thus ?thesis"], ["proof (prove)\nusing this:\n  r \\<noteq> 0 \\<and>\n  lt r adds\\<^sub>t lt p \\<and>\n  q = p - monom_mult (lc p / lc r) (lp p - lp r) r \\<or>\n  red {r} (tail p) (q - monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. is_red {q} f \\<or> is_red {r} f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<noteq> 0 \\<and>\n    lt r adds\\<^sub>t lt p \\<and>\n    q = p - monom_mult (lc p / lc r) (lp p - lp r) r \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f\n 2. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "assume \"r \\<noteq> 0 \\<and> lt r adds\\<^sub>t lt p \\<and> q = p - monom_mult (lc p / lc r) ?s r\""], ["proof (state)\nthis:\n  r \\<noteq> 0 \\<and>\n  lt r adds\\<^sub>t lt p \\<and>\n  q = p - monom_mult (lc p / lc r) (lp p - lp r) r\n\ngoal (2 subgoals):\n 1. r \\<noteq> 0 \\<and>\n    lt r adds\\<^sub>t lt p \\<and>\n    q = p - monom_mult (lc p / lc r) (lp p - lp r) r \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f\n 2. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "hence \"r \\<noteq> 0\" and \"lt r adds\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  r \\<noteq> 0 \\<and>\n  lt r adds\\<^sub>t lt p \\<and>\n  q = p - monom_mult (lc p / lc r) (lp p - lp r) r\n\ngoal (1 subgoal):\n 1. r \\<noteq> 0 &&& lt r adds\\<^sub>t lt p", "by simp_all"], ["proof (state)\nthis:\n  r \\<noteq> 0\n  lt r adds\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. r \\<noteq> 0 \\<and>\n    lt r adds\\<^sub>t lt p \\<and>\n    q = p - monom_mult (lc p / lc r) (lp p - lp r) r \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f\n 2. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red {q} f \\<or> is_red {r} f", "by (intro disjI2, rule is_red_singleton_trans, rule \\<open>is_red {p} f\\<close>, fact+)"], ["proof (state)\nthis:\n  is_red {q} f \\<or> is_red {r} f\n\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "assume \"red {r} (tail p) (q - monomial (lc p) (lt p))\" (is \"red _ ?p' ?q'\")"], ["proof (state)\nthis:\n  red {r} (tail p) (q - monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "with red_ord"], ["proof (chain)\npicking this:\n  red ?F ?p ?q \\<Longrightarrow> ?q \\<prec>\\<^sub>p ?p\n  red {r} (tail p) (q - monomial (lc p) (lt p))", "have \"?q' \\<prec>\\<^sub>p ?p'\""], ["proof (prove)\nusing this:\n  red ?F ?p ?q \\<Longrightarrow> ?q \\<prec>\\<^sub>p ?p\n  red {r} (tail p) (q - monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) \\<prec>\\<^sub>p tail p", "."], ["proof (state)\nthis:\n  q - monomial (lc p) (lt p) \\<prec>\\<^sub>p tail p\n\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "hence \"?p' \\<noteq> 0\"\n      and assm: \"(?q' = 0 \\<or> ((lt ?q') \\<prec>\\<^sub>t (lt ?p') \\<or> (lt ?q') = (lt ?p')))\""], ["proof (prove)\nusing this:\n  q - monomial (lc p) (lt p) \\<prec>\\<^sub>p tail p\n\ngoal (1 subgoal):\n 1. tail p \\<noteq> 0 &&&\n    q - monomial (lc p) (lt p) = 0 \\<or>\n    lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p)", "unfolding ord_strict_p_rec[of ?q' ?p']"], ["proof (prove)\nusing this:\n  tail p \\<noteq> 0 \\<and>\n  (q - monomial (lc p) (lt p) = 0 \\<or>\n   (let v1 = lt (q - monomial (lc p) (lt p)); v2 = lt (tail p)\n    in v1 \\<prec>\\<^sub>t v2 \\<or>\n       v1 = v2 \\<and>\n       lookup (q - monomial (lc p) (lt p)) v1 = lookup (tail p) v2 \\<and>\n       lower (q - monomial (lc p) (lt p)) v1 \\<prec>\\<^sub>p\n       lower (tail p) v2))\n\ngoal (1 subgoal):\n 1. tail p \\<noteq> 0 &&&\n    q - monomial (lc p) (lt p) = 0 \\<or>\n    lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p)", "by (auto simp add: Let_def lc_def)"], ["proof (state)\nthis:\n  tail p \\<noteq> 0\n  q - monomial (lc p) (lt p) = 0 \\<or>\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n  lt (q - monomial (lc p) (lt p)) = lt (tail p)\n\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "have \"lt ?p' \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (tail p) \\<prec>\\<^sub>t lt p", "by (rule lt_tail, fact)"], ["proof (state)\nthis:\n  lt (tail p) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "let ?m = \"monomial (lc p) (lt p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "from monomial_0D[of \"lt p\" \"lc p\"] lc_not_0[OF \\<open>p \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  monomial (lc p) (lt p) = 0 \\<Longrightarrow> lc p = (0::'b)\n  lc p \\<noteq> (0::'b)", "have \"?m \\<noteq> 0\""], ["proof (prove)\nusing this:\n  monomial (lc p) (lt p) = 0 \\<Longrightarrow> lc p = (0::'b)\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. monomial (lc p) (lt p) \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  monomial (lc p) (lt p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "have \"lt ?m = lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (monomial (lc p) (lt p)) = lt p", "by (rule lt_monomial, rule lc_not_0, fact)"], ["proof (state)\nthis:\n  lt (monomial (lc p) (lt p)) = lt p\n\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "have \"q \\<noteq> 0 \\<and> lt q = lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and> lt q = lt p", "proof (cases \"?q' = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. q - monomial (lc p) (lt p) \\<noteq> 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "case True"], ["proof (state)\nthis:\n  q - monomial (lc p) (lt p) = 0\n\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. q - monomial (lc p) (lt p) \\<noteq> 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "hence \"q = ?m\""], ["proof (prove)\nusing this:\n  q - monomial (lc p) (lt p) = 0\n\ngoal (1 subgoal):\n 1. q = monomial (lc p) (lt p)", "by simp"], ["proof (state)\nthis:\n  q = monomial (lc p) (lt p)\n\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. q - monomial (lc p) (lt p) \\<noteq> 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "with \\<open>?m \\<noteq> 0\\<close> \\<open>lt ?m = lt p\\<close>"], ["proof (chain)\npicking this:\n  monomial (lc p) (lt p) \\<noteq> 0\n  lt (monomial (lc p) (lt p)) = lt p\n  q = monomial (lc p) (lt p)", "show ?thesis"], ["proof (prove)\nusing this:\n  monomial (lc p) (lt p) \\<noteq> 0\n  lt (monomial (lc p) (lt p)) = lt p\n  q = monomial (lc p) (lt p)\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and> lt q = lt p", "by simp"], ["proof (state)\nthis:\n  q \\<noteq> 0 \\<and> lt q = lt p\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) \\<noteq> 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) \\<noteq> 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "case False"], ["proof (state)\nthis:\n  q - monomial (lc p) (lt p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) \\<noteq> 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "from assm"], ["proof (chain)\npicking this:\n  q - monomial (lc p) (lt p) = 0 \\<or>\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n  lt (q - monomial (lc p) (lt p)) = lt (tail p)", "show ?thesis"], ["proof (prove)\nusing this:\n  q - monomial (lc p) (lt p) = 0 \\<or>\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n  lt (q - monomial (lc p) (lt p)) = lt (tail p)\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and> lt q = lt p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p) \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "assume \"(lt ?q') \\<prec>\\<^sub>t (lt ?p') \\<or> (lt ?q') = (lt ?p')\""], ["proof (state)\nthis:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n  lt (q - monomial (lc p) (lt p)) = lt (tail p)\n\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p) \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "hence \"lt ?q' \\<preceq>\\<^sub>t lt ?p'\""], ["proof (prove)\nusing this:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n  lt (q - monomial (lc p) (lt p)) = lt (tail p)\n\ngoal (1 subgoal):\n 1. lt (q - monomial (lc p) (lt p)) \\<preceq>\\<^sub>t lt (tail p)", "by auto"], ["proof (state)\nthis:\n  lt (q - monomial (lc p) (lt p)) \\<preceq>\\<^sub>t lt (tail p)\n\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p) \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "also"], ["proof (state)\nthis:\n  lt (q - monomial (lc p) (lt p)) \\<preceq>\\<^sub>t lt (tail p)\n\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p) \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "have \"... \\<prec>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (tail p) \\<prec>\\<^sub>t lt p", "by fact"], ["proof (state)\nthis:\n  lt (tail p) \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p) \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "finally"], ["proof (chain)\npicking this:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt p", "have \"lt ?q' \\<prec>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt p", "."], ["proof (state)\nthis:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p) \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "hence \"lt ?q' \\<prec>\\<^sub>t lt ?m\""], ["proof (prove)\nusing this:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t\n    lt (monomial (lc p) (lt p))", "unfolding \\<open>lt ?m = lt p\\<close>"], ["proof (prove)\nusing this:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt p", "."], ["proof (state)\nthis:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t\n  lt (monomial (lc p) (lt p))\n\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p) \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "from lt_plus_eqI[OF this] \\<open>lt ?m = lt p\\<close>"], ["proof (chain)\npicking this:\n  lt (q - monomial (lc p) (lt p) + monomial (lc p) (lt p)) =\n  lt (monomial (lc p) (lt p))\n  lt (monomial (lc p) (lt p)) = lt p", "have \"lt q = lt p\""], ["proof (prove)\nusing this:\n  lt (q - monomial (lc p) (lt p) + monomial (lc p) (lt p)) =\n  lt (monomial (lc p) (lt p))\n  lt (monomial (lc p) (lt p)) = lt p\n\ngoal (1 subgoal):\n 1. lt q = lt p", "by simp"], ["proof (state)\nthis:\n  lt q = lt p\n\ngoal (2 subgoals):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p\n 2. lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t lt (tail p) \\<or>\n    lt (q - monomial (lc p) (lt p)) = lt (tail p) \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and> lt q = lt p", "proof (intro conjI, rule ccontr)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> q \\<noteq> 0 \\<Longrightarrow> False\n 2. lt q = lt p", "assume \"\\<not> q \\<noteq> 0\""], ["proof (state)\nthis:\n  \\<not> q \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<not> q \\<noteq> 0 \\<Longrightarrow> False\n 2. lt q = lt p", "hence \"q = 0\""], ["proof (prove)\nusing this:\n  \\<not> q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q = 0", "by simp"], ["proof (state)\nthis:\n  q = 0\n\ngoal (2 subgoals):\n 1. \\<not> q \\<noteq> 0 \\<Longrightarrow> False\n 2. lt q = lt p", "hence \"?q' = -?m\""], ["proof (prove)\nusing this:\n  q = 0\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) = - monomial (lc p) (lt p)", "by simp"], ["proof (state)\nthis:\n  q - monomial (lc p) (lt p) = - monomial (lc p) (lt p)\n\ngoal (2 subgoals):\n 1. \\<not> q \\<noteq> 0 \\<Longrightarrow> False\n 2. lt q = lt p", "hence \"lt ?q' = lt (-?m)\""], ["proof (prove)\nusing this:\n  q - monomial (lc p) (lt p) = - monomial (lc p) (lt p)\n\ngoal (1 subgoal):\n 1. lt (q - monomial (lc p) (lt p)) = lt (- monomial (lc p) (lt p))", "by simp"], ["proof (state)\nthis:\n  lt (q - monomial (lc p) (lt p)) = lt (- monomial (lc p) (lt p))\n\ngoal (2 subgoals):\n 1. \\<not> q \\<noteq> 0 \\<Longrightarrow> False\n 2. lt q = lt p", "also"], ["proof (state)\nthis:\n  lt (q - monomial (lc p) (lt p)) = lt (- monomial (lc p) (lt p))\n\ngoal (2 subgoals):\n 1. \\<not> q \\<noteq> 0 \\<Longrightarrow> False\n 2. lt q = lt p", "have \"... = lt ?m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (- monomial (lc p) (lt p)) = lt (monomial (lc p) (lt p))", "using lt_uminus"], ["proof (prove)\nusing this:\n  lt (- ?p) = lt ?p\n\ngoal (1 subgoal):\n 1. lt (- monomial (lc p) (lt p)) = lt (monomial (lc p) (lt p))", "."], ["proof (state)\nthis:\n  lt (- monomial (lc p) (lt p)) = lt (monomial (lc p) (lt p))\n\ngoal (2 subgoals):\n 1. \\<not> q \\<noteq> 0 \\<Longrightarrow> False\n 2. lt q = lt p", "finally"], ["proof (chain)\npicking this:\n  lt (q - monomial (lc p) (lt p)) = lt (monomial (lc p) (lt p))", "have \"lt ?q' = lt ?m\""], ["proof (prove)\nusing this:\n  lt (q - monomial (lc p) (lt p)) = lt (monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. lt (q - monomial (lc p) (lt p)) = lt (monomial (lc p) (lt p))", "."], ["proof (state)\nthis:\n  lt (q - monomial (lc p) (lt p)) = lt (monomial (lc p) (lt p))\n\ngoal (2 subgoals):\n 1. \\<not> q \\<noteq> 0 \\<Longrightarrow> False\n 2. lt q = lt p", "with \\<open>lt ?q' \\<prec>\\<^sub>t lt ?m\\<close>"], ["proof (chain)\npicking this:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t\n  lt (monomial (lc p) (lt p))\n  lt (q - monomial (lc p) (lt p)) = lt (monomial (lc p) (lt p))", "show False"], ["proof (prove)\nusing this:\n  lt (q - monomial (lc p) (lt p)) \\<prec>\\<^sub>t\n  lt (monomial (lc p) (lt p))\n  lt (q - monomial (lc p) (lt p)) = lt (monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. lt q = lt p", "qed (fact)"], ["proof (state)\nthis:\n  q \\<noteq> 0 \\<and> lt q = lt p\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "assume \"?q' = 0\""], ["proof (state)\nthis:\n  q - monomial (lc p) (lt p) = 0\n\ngoal (1 subgoal):\n 1. q - monomial (lc p) (lt p) = 0 \\<Longrightarrow>\n    q \\<noteq> 0 \\<and> lt q = lt p", "with False"], ["proof (chain)\npicking this:\n  q - monomial (lc p) (lt p) \\<noteq> 0\n  q - monomial (lc p) (lt p) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  q - monomial (lc p) (lt p) \\<noteq> 0\n  q - monomial (lc p) (lt p) = 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<and> lt q = lt p", ".."], ["proof (state)\nthis:\n  q \\<noteq> 0 \\<and> lt q = lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q \\<noteq> 0 \\<and> lt q = lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q \\<noteq> 0 \\<and> lt q = lt p\n\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "hence \"q \\<noteq> 0\" and \"lt q adds\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0 \\<and> lt q = lt p\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 &&& lt q adds\\<^sub>t lt p", "by (simp_all add: term_simps)"], ["proof (state)\nthis:\n  q \\<noteq> 0\n  lt q adds\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. red {r} (tail p) (q - monomial (lc p) (lt p)) \\<Longrightarrow>\n    is_red {q} f \\<or> is_red {r} f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red {q} f \\<or> is_red {r} f", "by (intro disjI1, rule is_red_singleton_trans, rule \\<open>is_red {p} f\\<close>, fact+)"], ["proof (state)\nthis:\n  is_red {q} f \\<or> is_red {r} f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red {q} f \\<or> is_red {r} f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma replace_red_stable_is_red:\n  assumes a1: \"is_red F f\" and a2: \"red (F - {p}) p q\"\n  shows \"is_red (insert q (F - {p})) f\" (is \"is_red ?F' f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "from a1"], ["proof (chain)\npicking this:\n  is_red F f", "obtain g where \"g \\<in> F\" and \"is_red {g} f\""], ["proof (prove)\nusing this:\n  is_red F f\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> F; is_red {g} f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_singletonI)"], ["proof (state)\nthis:\n  g \\<in> F\n  is_red {g} f\n\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "proof (cases \"g = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. g = p \\<Longrightarrow> is_red (insert q (F - {p})) f\n 2. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "case True"], ["proof (state)\nthis:\n  g = p\n\ngoal (2 subgoals):\n 1. g = p \\<Longrightarrow> is_red (insert q (F - {p})) f\n 2. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "from a2"], ["proof (chain)\npicking this:\n  red (F - {p}) p q", "obtain h where \"h \\<in> F - {p}\" and \"red {h} p q\""], ["proof (prove)\nusing this:\n  red (F - {p}) p q\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>h \\<in> F - {p}; red {h} p q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding red_def"], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>F - {p}. Ex (red_single p q f)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>h \\<in> F - {p};\n         \\<exists>f\\<in>{h}. Ex (red_single p q f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  h \\<in> F - {p}\n  red {h} p q\n\ngoal (2 subgoals):\n 1. g = p \\<Longrightarrow> is_red (insert q (F - {p})) f\n 2. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "from \\<open>is_red {g} f\\<close>"], ["proof (chain)\npicking this:\n  is_red {g} f", "have \"is_red {p} f\""], ["proof (prove)\nusing this:\n  is_red {g} f\n\ngoal (1 subgoal):\n 1. is_red {p} f", "unfolding True"], ["proof (prove)\nusing this:\n  is_red {p} f\n\ngoal (1 subgoal):\n 1. is_red {p} f", "."], ["proof (state)\nthis:\n  is_red {p} f\n\ngoal (2 subgoals):\n 1. g = p \\<Longrightarrow> is_red (insert q (F - {p})) f\n 2. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "have \"is_red {q} f \\<or> is_red {h} f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red {q} f \\<or> is_red {h} f", "by (rule conversion_property, fact+)"], ["proof (state)\nthis:\n  is_red {q} f \\<or> is_red {h} f\n\ngoal (2 subgoals):\n 1. g = p \\<Longrightarrow> is_red (insert q (F - {p})) f\n 2. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_red {q} f \\<or> is_red {h} f\n\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red {q} f \\<Longrightarrow> is_red (insert q (F - {p})) f\n 2. is_red {h} f \\<Longrightarrow> is_red (insert q (F - {p})) f", "assume \"is_red {q} f\""], ["proof (state)\nthis:\n  is_red {q} f\n\ngoal (2 subgoals):\n 1. is_red {q} f \\<Longrightarrow> is_red (insert q (F - {p})) f\n 2. is_red {h} f \\<Longrightarrow> is_red (insert q (F - {p})) f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "proof (rule is_red_singletonD)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red {?p} f\n 2. ?p \\<in> insert q (F - {p})", "show \"q \\<in> ?F'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> insert q (F - {p})", "by auto"], ["proof (state)\nthis:\n  q \\<in> insert q (F - {p})\n\ngoal (1 subgoal):\n 1. is_red {q} f", "qed fact"], ["proof (state)\nthis:\n  is_red (insert q (F - {p})) f\n\ngoal (1 subgoal):\n 1. is_red {h} f \\<Longrightarrow> is_red (insert q (F - {p})) f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red {h} f \\<Longrightarrow> is_red (insert q (F - {p})) f", "assume \"is_red {h} f\""], ["proof (state)\nthis:\n  is_red {h} f\n\ngoal (1 subgoal):\n 1. is_red {h} f \\<Longrightarrow> is_red (insert q (F - {p})) f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "proof (rule is_red_singletonD)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red {?p} f\n 2. ?p \\<in> insert q (F - {p})", "from \\<open>h \\<in> F - {p}\\<close>"], ["proof (chain)\npicking this:\n  h \\<in> F - {p}", "show \"h \\<in> ?F'\""], ["proof (prove)\nusing this:\n  h \\<in> F - {p}\n\ngoal (1 subgoal):\n 1. h \\<in> insert q (F - {p})", "by simp"], ["proof (state)\nthis:\n  h \\<in> insert q (F - {p})\n\ngoal (1 subgoal):\n 1. is_red {h} f", "qed fact"], ["proof (state)\nthis:\n  is_red (insert q (F - {p})) f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red (insert q (F - {p})) f\n\ngoal (1 subgoal):\n 1. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "case False"], ["proof (state)\nthis:\n  g \\<noteq> p\n\ngoal (1 subgoal):\n 1. g \\<noteq> p \\<Longrightarrow> is_red (insert q (F - {p})) f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (insert q (F - {p})) f", "proof (rule is_red_singletonD)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red {?p} f\n 2. ?p \\<in> insert q (F - {p})", "from \\<open>g \\<in> F\\<close> False"], ["proof (chain)\npicking this:\n  g \\<in> F\n  g \\<noteq> p", "show \"g \\<in> ?F'\""], ["proof (prove)\nusing this:\n  g \\<in> F\n  g \\<noteq> p\n\ngoal (1 subgoal):\n 1. g \\<in> insert q (F - {p})", "by blast"], ["proof (state)\nthis:\n  g \\<in> insert q (F - {p})\n\ngoal (1 subgoal):\n 1. is_red {g} f", "qed fact"], ["proof (state)\nthis:\n  is_red (insert q (F - {p})) f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red (insert q (F - {p})) f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_map_scale:\n  assumes \"is_red F (c \\<cdot> p)\"\n  shows \"is_red F p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red F p", "from assms"], ["proof (chain)\npicking this:\n  is_red F (c \\<cdot> p)", "obtain f u where \"f \\<in> F\" and \"u \\<in> keys (c \\<cdot> p)\" and \"f \\<noteq> 0\"\n    and a: \"lt f adds\\<^sub>t u\""], ["proof (prove)\nusing this:\n  is_red F (c \\<cdot> p)\n\ngoal (1 subgoal):\n 1. (\\<And>f u.\n        \\<lbrakk>f \\<in> F; u \\<in> keys (c \\<cdot> p); f \\<noteq> 0;\n         lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  f \\<in> F\n  u \\<in> keys (c \\<cdot> p)\n  f \\<noteq> 0\n  lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. is_red F p", "from this(2) keys_map_scale_subset"], ["proof (chain)\npicking this:\n  u \\<in> keys (c \\<cdot> p)\n  keys (?k \\<cdot> ?t) \\<subseteq> keys ?t", "have \"u \\<in> keys p\""], ["proof (prove)\nusing this:\n  u \\<in> keys (c \\<cdot> p)\n  keys (?k \\<cdot> ?t) \\<subseteq> keys ?t\n\ngoal (1 subgoal):\n 1. u \\<in> keys p", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. is_red F p", "with \\<open>f \\<in> F\\<close> \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> F\n  f \\<noteq> 0\n  u \\<in> keys p", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. is_red F p", "using a"], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n  u \\<in> keys p\n  lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. is_red F p", "by (rule is_red_addsI)"], ["proof (state)\nthis:\n  is_red F p\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary is_irred_map_scale: \"\\<not> is_red F p \\<Longrightarrow> \\<not> is_red F (c \\<cdot> p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red F p \\<Longrightarrow> \\<not> is_red F (c \\<cdot> p)", "by (auto dest: is_red_map_scale)"], ["", "lemma is_red_map_scale_iff: \"is_red F (c \\<cdot> p) \\<longleftrightarrow> (c \\<noteq> 0 \\<and> is_red F p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F (c \\<cdot> p) = (c \\<noteq> (0::'b) \\<and> is_red F p)", "proof (intro iffI conjI notI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>is_red F (c \\<cdot> p); c = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. is_red F (c \\<cdot> p) \\<Longrightarrow> is_red F p\n 3. c \\<noteq> (0::'b) \\<and> is_red F p \\<Longrightarrow>\n    is_red F (c \\<cdot> p)", "assume \"is_red F (c \\<cdot> p)\" and \"c = 0\""], ["proof (state)\nthis:\n  is_red F (c \\<cdot> p)\n  c = (0::'b)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_red F (c \\<cdot> p); c = (0::'b)\\<rbrakk>\n    \\<Longrightarrow> False\n 2. is_red F (c \\<cdot> p) \\<Longrightarrow> is_red F p\n 3. c \\<noteq> (0::'b) \\<and> is_red F p \\<Longrightarrow>\n    is_red F (c \\<cdot> p)", "thus False"], ["proof (prove)\nusing this:\n  is_red F (c \\<cdot> p)\n  c = (0::'b)\n\ngoal (1 subgoal):\n 1. False", "by (simp add: irred_0)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. is_red F (c \\<cdot> p) \\<Longrightarrow> is_red F p\n 2. c \\<noteq> (0::'b) \\<and> is_red F p \\<Longrightarrow>\n    is_red F (c \\<cdot> p)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. is_red F (c \\<cdot> p) \\<Longrightarrow> is_red F p\n 2. c \\<noteq> (0::'b) \\<and> is_red F p \\<Longrightarrow>\n    is_red F (c \\<cdot> p)", "assume \"is_red F (c \\<cdot> p)\""], ["proof (state)\nthis:\n  is_red F (c \\<cdot> p)\n\ngoal (2 subgoals):\n 1. is_red F (c \\<cdot> p) \\<Longrightarrow> is_red F p\n 2. c \\<noteq> (0::'b) \\<and> is_red F p \\<Longrightarrow>\n    is_red F (c \\<cdot> p)", "thus \"is_red F p\""], ["proof (prove)\nusing this:\n  is_red F (c \\<cdot> p)\n\ngoal (1 subgoal):\n 1. is_red F p", "by (rule is_red_map_scale)"], ["proof (state)\nthis:\n  is_red F p\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<and> is_red F p \\<Longrightarrow>\n    is_red F (c \\<cdot> p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<and> is_red F p \\<Longrightarrow>\n    is_red F (c \\<cdot> p)", "assume \"c \\<noteq> 0 \\<and> is_red F p\""], ["proof (state)\nthis:\n  c \\<noteq> (0::'b) \\<and> is_red F p\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<and> is_red F p \\<Longrightarrow>\n    is_red F (c \\<cdot> p)", "hence \"is_red F (inverse c \\<cdot> c \\<cdot> p)\""], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'b) \\<and> is_red F p\n\ngoal (1 subgoal):\n 1. is_red F (inverse c \\<cdot> c \\<cdot> p)", "by (simp add: map_scale_assoc)"], ["proof (state)\nthis:\n  is_red F (inverse c \\<cdot> c \\<cdot> p)\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'b) \\<and> is_red F p \\<Longrightarrow>\n    is_red F (c \\<cdot> p)", "thus \"is_red F (c \\<cdot> p)\""], ["proof (prove)\nusing this:\n  is_red F (inverse c \\<cdot> c \\<cdot> p)\n\ngoal (1 subgoal):\n 1. is_red F (c \\<cdot> p)", "by (rule is_red_map_scale)"], ["proof (state)\nthis:\n  is_red F (c \\<cdot> p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_red_uminus: \"is_red F (- p) \\<longleftrightarrow> is_red F p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F (- p) = is_red F p", "by (auto elim!: is_red_addsE simp: keys_uminus intro: is_red_addsI)"], ["", "lemma is_red_plus:\n  assumes \"is_red F (p + q)\"\n  shows \"is_red F p \\<or> is_red F q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "from assms"], ["proof (chain)\npicking this:\n  is_red F (p + q)", "obtain f u where \"f \\<in> F\" and \"u \\<in> keys (p + q)\" and \"f \\<noteq> 0\"\n    and a: \"lt f adds\\<^sub>t u\""], ["proof (prove)\nusing this:\n  is_red F (p + q)\n\ngoal (1 subgoal):\n 1. (\\<And>f u.\n        \\<lbrakk>f \\<in> F; u \\<in> keys (p + q); f \\<noteq> 0;\n         lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  f \\<in> F\n  u \\<in> keys (p + q)\n  f \\<noteq> 0\n  lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "from this(2)"], ["proof (chain)\npicking this:\n  u \\<in> keys (p + q)", "have \"u \\<in> keys p \\<union> keys q\""], ["proof (prove)\nusing this:\n  u \\<in> keys (p + q)\n\ngoal (1 subgoal):\n 1. u \\<in> keys p \\<union> keys q", "by (meson Poly_Mapping.keys_add subsetD)"], ["proof (state)\nthis:\n  u \\<in> keys p \\<union> keys q\n\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "thus ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> keys p \\<union> keys q\n\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u \\<in> keys p \\<Longrightarrow> is_red F p \\<or> is_red F q\n 2. u \\<in> keys q \\<Longrightarrow> is_red F p \\<or> is_red F q", "assume \"u \\<in> keys p\""], ["proof (state)\nthis:\n  u \\<in> keys p\n\ngoal (2 subgoals):\n 1. u \\<in> keys p \\<Longrightarrow> is_red F p \\<or> is_red F q\n 2. u \\<in> keys q \\<Longrightarrow> is_red F p \\<or> is_red F q", "with \\<open>f \\<in> F\\<close> \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> F\n  f \\<noteq> 0\n  u \\<in> keys p", "have \"is_red F p\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. is_red F p", "using a"], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n  u \\<in> keys p\n  lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. is_red F p", "by (rule is_red_addsI)"], ["proof (state)\nthis:\n  is_red F p\n\ngoal (2 subgoals):\n 1. u \\<in> keys p \\<Longrightarrow> is_red F p \\<or> is_red F q\n 2. u \\<in> keys q \\<Longrightarrow> is_red F p \\<or> is_red F q", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_red F p\n\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", ".."], ["proof (state)\nthis:\n  is_red F p \\<or> is_red F q\n\ngoal (1 subgoal):\n 1. u \\<in> keys q \\<Longrightarrow> is_red F p \\<or> is_red F q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> keys q \\<Longrightarrow> is_red F p \\<or> is_red F q", "assume \"u \\<in> keys q\""], ["proof (state)\nthis:\n  u \\<in> keys q\n\ngoal (1 subgoal):\n 1. u \\<in> keys q \\<Longrightarrow> is_red F p \\<or> is_red F q", "with \\<open>f \\<in> F\\<close> \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> F\n  f \\<noteq> 0\n  u \\<in> keys q", "have \"is_red F q\""], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n  u \\<in> keys q\n\ngoal (1 subgoal):\n 1. is_red F q", "using a"], ["proof (prove)\nusing this:\n  f \\<in> F\n  f \\<noteq> 0\n  u \\<in> keys q\n  lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. is_red F q", "by (rule is_red_addsI)"], ["proof (state)\nthis:\n  is_red F q\n\ngoal (1 subgoal):\n 1. u \\<in> keys q \\<Longrightarrow> is_red F p \\<or> is_red F q", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_red F q\n\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", ".."], ["proof (state)\nthis:\n  is_red F p \\<or> is_red F q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_red F p \\<or> is_red F q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_irred_plus: \"\\<not> is_red F p \\<Longrightarrow> \\<not> is_red F q \\<Longrightarrow> \\<not> is_red F (p + q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> is_red F p; \\<not> is_red F q\\<rbrakk>\n    \\<Longrightarrow> \\<not> is_red F (p + q)", "by (auto dest: is_red_plus)"], ["", "lemma is_red_minus:\n  assumes \"is_red F (p - q)\"\n  shows \"is_red F p \\<or> is_red F q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "from assms"], ["proof (chain)\npicking this:\n  is_red F (p - q)", "have \"is_red F (p + (- q))\""], ["proof (prove)\nusing this:\n  is_red F (p - q)\n\ngoal (1 subgoal):\n 1. is_red F (p + - q)", "by simp"], ["proof (state)\nthis:\n  is_red F (p + - q)\n\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "hence \"is_red F p \\<or> is_red F (- q)\""], ["proof (prove)\nusing this:\n  is_red F (p + - q)\n\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F (- q)", "by (rule is_red_plus)"], ["proof (state)\nthis:\n  is_red F p \\<or> is_red F (- q)\n\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_red F p \\<or> is_red F (- q)\n\ngoal (1 subgoal):\n 1. is_red F p \\<or> is_red F q", "by (simp only: is_red_uminus)"], ["proof (state)\nthis:\n  is_red F p \\<or> is_red F q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_irred_minus: \"\\<not> is_red F p \\<Longrightarrow> \\<not> is_red F q \\<Longrightarrow> \\<not> is_red F (p - q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> is_red F p; \\<not> is_red F q\\<rbrakk>\n    \\<Longrightarrow> \\<not> is_red F (p - q)", "by (auto dest: is_red_minus)"], ["", "end"], ["", "(* ordered_term *)"], ["", "subsection \\<open>Well-foundedness and Termination\\<close>"], ["", "context gd_term\nbegin"], ["", "lemma dgrad_set_le_red_single:\n  assumes \"dickson_grading d\" and \"red_single p q f t\"\n  shows \"dgrad_set_le d {t} (pp_of_term ` keys p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d {t} (pp_of_term ` keys p)", "proof (rule dgrad_set_leI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ta\\<in>keys p. d t \\<le> d (pp_of_term ta)", "have \"t adds t + lp f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t adds t + lp f", "by simp"], ["proof (state)\nthis:\n  t adds t + lp f\n\ngoal (1 subgoal):\n 1. \\<exists>ta\\<in>keys p. d t \\<le> d (pp_of_term ta)", "with assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  t adds t + lp f", "have \"d t \\<le> d (pp_of_term (t \\<oplus> lt f))\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  t adds t + lp f\n\ngoal (1 subgoal):\n 1. d t \\<le> d (pp_of_term (t \\<oplus> lt f))", "by (simp add: term_simps, rule dickson_grading_adds_imp_le)"], ["proof (state)\nthis:\n  d t \\<le> d (pp_of_term (t \\<oplus> lt f))\n\ngoal (1 subgoal):\n 1. \\<exists>ta\\<in>keys p. d t \\<le> d (pp_of_term ta)", "moreover"], ["proof (state)\nthis:\n  d t \\<le> d (pp_of_term (t \\<oplus> lt f))\n\ngoal (1 subgoal):\n 1. \\<exists>ta\\<in>keys p. d t \\<le> d (pp_of_term ta)", "from assms(2)"], ["proof (chain)\npicking this:\n  red_single p q f t", "have \"t \\<oplus> lt f \\<in> keys p\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys p", "by (simp add: in_keys_iff red_single_def)"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<exists>ta\\<in>keys p. d t \\<le> d (pp_of_term ta)", "ultimately"], ["proof (chain)\npicking this:\n  d t \\<le> d (pp_of_term (t \\<oplus> lt f))\n  t \\<oplus> lt f \\<in> keys p", "show \"\\<exists>v\\<in>keys p. d t \\<le> d (pp_of_term v)\""], ["proof (prove)\nusing this:\n  d t \\<le> d (pp_of_term (t \\<oplus> lt f))\n  t \\<oplus> lt f \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>keys p. d t \\<le> d (pp_of_term v)", ".."], ["proof (state)\nthis:\n  \\<exists>v\\<in>keys p. d t \\<le> d (pp_of_term v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_le_red_single:\n  assumes \"dickson_grading d\" and \"red_single p q f t\"\n  shows \"dgrad_p_set_le d {q} {f, p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} {f, p}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} {f, p}", "let ?f = \"monom_mult ((lookup p (t \\<oplus> lt f)) / lc f) t f\""], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} {f, p}", "from assms(2)"], ["proof (chain)\npicking this:\n  red_single p q f t", "have \"t \\<oplus> lt f \\<in> keys p\" and q: \"q = p - ?f\""], ["proof (prove)\nusing this:\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt f \\<in> keys p &&&\n    q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f", "by (simp_all add: red_single_def in_keys_iff)"], ["proof (state)\nthis:\n  t \\<oplus> lt f \\<in> keys p\n  q = p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} {f, p}", "have \"dgrad_p_set_le d {q} {p, ?f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q}\n     {p, monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}", "unfolding q"], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d\n     {p - monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n     {p, monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}", "by (fact dgrad_p_set_le_minus)"], ["proof (state)\nthis:\n  dgrad_p_set_le d {q}\n   {p, monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} {f, p}", "also"], ["proof (state)\nthis:\n  dgrad_p_set_le d {q}\n   {p, monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} {f, p}", "have \"dgrad_p_set_le d ... {f, p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {p, monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n     {f, p}", "proof (rule dgrad_p_set_leI_insert)"], ["proof (state)\ngoal (2 subgoals):\n 1. dgrad_p_set_le d {monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n     {f, p}\n 2. dgrad_p_set_le d {p} {f, p}", "from assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"dgrad_set_le d (pp_of_term ` keys ?f) (insert t (pp_of_term ` keys f))\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. dgrad_set_le d\n     (pp_of_term `\n      keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))\n     (insert t (pp_of_term ` keys f))", "by (rule dgrad_set_le_monom_mult)"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))\n   (insert t (pp_of_term ` keys f))\n\ngoal (2 subgoals):\n 1. dgrad_p_set_le d {monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n     {f, p}\n 2. dgrad_p_set_le d {p} {f, p}", "also"], ["proof (state)\nthis:\n  dgrad_set_le d\n   (pp_of_term ` keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))\n   (insert t (pp_of_term ` keys f))\n\ngoal (2 subgoals):\n 1. dgrad_p_set_le d {monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n     {f, p}\n 2. dgrad_p_set_le d {p} {f, p}", "have \"dgrad_set_le d ... (pp_of_term ` (keys f \\<union> keys p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_set_le d (insert t (pp_of_term ` keys f))\n     (pp_of_term ` (keys f \\<union> keys p))", "proof (rule dgrad_set_leI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s = t \\<or> s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n       \\<exists>t\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term t)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s = t \\<or> s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n       \\<exists>t\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term t)", "assume \"s = t \\<or> s \\<in> pp_of_term ` keys f\""], ["proof (state)\nthis:\n  s = t \\<or> s \\<in> pp_of_term ` keys f\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s = t \\<or> s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n       \\<exists>t\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term t)", "thus \"\\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\""], ["proof (prove)\nusing this:\n  s = t \\<or> s \\<in> pp_of_term ` keys f\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n 2. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "assume \"s = t\""], ["proof (state)\nthis:\n  s = t\n\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n 2. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  red_single p q f t", "have \"dgrad_set_le d {s} (pp_of_term ` keys p)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. dgrad_set_le d {s} (pp_of_term ` keys p)", "unfolding \\<open>s = t\\<close>"], ["proof (prove)\nusing this:\n  dickson_grading d\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. dgrad_set_le d {t} (pp_of_term ` keys p)", "by (rule dgrad_set_le_red_single)"], ["proof (state)\nthis:\n  dgrad_set_le d {s} (pp_of_term ` keys p)\n\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n 2. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "moreover"], ["proof (state)\nthis:\n  dgrad_set_le d {s} (pp_of_term ` keys p)\n\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n 2. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "have \"s \\<in> {s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {s}", ".."], ["proof (state)\nthis:\n  s \\<in> {s}\n\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n 2. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "ultimately"], ["proof (chain)\npicking this:\n  dgrad_set_le d {s} (pp_of_term ` keys p)\n  s \\<in> {s}", "obtain s0 where \"s0 \\<in> pp_of_term ` keys p\" and \"d s \\<le> d s0\""], ["proof (prove)\nusing this:\n  dgrad_set_le d {s} (pp_of_term ` keys p)\n  s \\<in> {s}\n\ngoal (1 subgoal):\n 1. (\\<And>s0.\n        \\<lbrakk>s0 \\<in> pp_of_term ` keys p; d s \\<le> d s0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_set_leE)"], ["proof (state)\nthis:\n  s0 \\<in> pp_of_term ` keys p\n  d s \\<le> d s0\n\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n 2. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "from this(1)"], ["proof (chain)\npicking this:\n  s0 \\<in> pp_of_term ` keys p", "obtain u where \"u \\<in> keys p\" and \"s0 = pp_of_term u\""], ["proof (prove)\nusing this:\n  s0 \\<in> pp_of_term ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys p; s0 = pp_of_term u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n  s0 = pp_of_term u\n\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n 2. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "from this(1)"], ["proof (chain)\npicking this:\n  u \\<in> keys p", "have \"u \\<in> keys f \\<union> keys p\""], ["proof (prove)\nusing this:\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. u \\<in> keys f \\<union> keys p", "by simp"], ["proof (state)\nthis:\n  u \\<in> keys f \\<union> keys p\n\ngoal (2 subgoals):\n 1. s = t \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n 2. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "with \\<open>d s \\<le> d s0\\<close>"], ["proof (chain)\npicking this:\n  d s \\<le> d s0\n  u \\<in> keys f \\<union> keys p", "show ?thesis"], ["proof (prove)\nusing this:\n  d s \\<le> d s0\n  u \\<in> keys f \\<union> keys p\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "unfolding \\<open>s0 = pp_of_term u\\<close>"], ["proof (prove)\nusing this:\n  d s \\<le> d (pp_of_term u)\n  u \\<in> keys f \\<union> keys p\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", ".."], ["proof (state)\nthis:\n  \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "assume \"s \\<in> pp_of_term ` keys f\""], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` keys f\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "hence \"s \\<in> pp_of_term ` (keys f \\<union> keys p)\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` keys f\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` (keys f \\<union> keys p)", "by blast"], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` (keys f \\<union> keys p)\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "then"], ["proof (chain)\npicking this:\n  s \\<in> pp_of_term ` (keys f \\<union> keys p)", "obtain u where \"u \\<in> keys f \\<union> keys p\" and \"s = pp_of_term u\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` (keys f \\<union> keys p)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys f \\<union> keys p; s = pp_of_term u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> keys f \\<union> keys p\n  s = pp_of_term u\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "note this(1)"], ["proof (state)\nthis:\n  u \\<in> keys f \\<union> keys p\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "moreover"], ["proof (state)\nthis:\n  u \\<in> keys f \\<union> keys p\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "have \"d s \\<le> d s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d s \\<le> d s", ".."], ["proof (state)\nthis:\n  d s \\<le> d s\n\ngoal (1 subgoal):\n 1. s \\<in> pp_of_term ` keys f \\<Longrightarrow>\n    \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> keys f \\<union> keys p\n  d s \\<le> d s", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> keys f \\<union> keys p\n  d s \\<le> d s\n\ngoal (1 subgoal):\n 1. \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)", "unfolding \\<open>s = pp_of_term u\\<close>"], ["proof (prove)\nusing this:\n  u \\<in> keys f \\<union> keys p\n  d (pp_of_term u) \\<le> d (pp_of_term u)\n\ngoal (1 subgoal):\n 1. \\<exists>ua\\<in>keys f \\<union> keys p.\n       d (pp_of_term u) \\<le> d (pp_of_term ua)", ".."], ["proof (state)\nthis:\n  \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>u\\<in>keys f \\<union> keys p. d s \\<le> d (pp_of_term u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_set_le d (insert t (pp_of_term ` keys f))\n   (pp_of_term ` (keys f \\<union> keys p))\n\ngoal (2 subgoals):\n 1. dgrad_p_set_le d {monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n     {f, p}\n 2. dgrad_p_set_le d {p} {f, p}", "finally"], ["proof (chain)\npicking this:\n  dgrad_set_le d\n   (pp_of_term ` keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))\n   (pp_of_term ` (keys f \\<union> keys p))", "show \"dgrad_p_set_le d {?f} {f, p}\""], ["proof (prove)\nusing this:\n  dgrad_set_le d\n   (pp_of_term ` keys (monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f))\n   (pp_of_term ` (keys f \\<union> keys p))\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n     {f, p}", "by (simp add: dgrad_p_set_le_def Keys_insert)"], ["proof (state)\nthis:\n  dgrad_p_set_le d {monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n   {f, p}\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {p} {f, p}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {p} {f, p}", "show \"dgrad_p_set_le d {p} {f, p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {p} {f, p}", "by (rule dgrad_p_set_le_subset, simp)"], ["proof (state)\nthis:\n  dgrad_p_set_le d {p} {f, p}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_p_set_le d {p, monom_mult (lookup p (t \\<oplus> lt f) / lc f) t f}\n   {f, p}\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} {f, p}", "finally"], ["proof (chain)\npicking this:\n  dgrad_p_set_le d {q} {f, p}", "show ?thesis"], ["proof (prove)\nusing this:\n  dgrad_p_set_le d {q} {f, p}\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} {f, p}", "."], ["proof (state)\nthis:\n  dgrad_p_set_le d {q} {f, p}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_le_red:\n  assumes \"dickson_grading d\" and \"red F p q\"\n  shows \"dgrad_p_set_le d {q} (insert p F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} (insert p F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} (insert p F)", "from assms(2)"], ["proof (chain)\npicking this:\n  red F p q", "obtain f t where \"f \\<in> F\" and \"red_single p q f t\""], ["proof (prove)\nusing this:\n  red F p q\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_setE)"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} (insert p F)", "from assms(1) this(2)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  red_single p q f t", "have \"dgrad_p_set_le d {q} {f, p}\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} {f, p}", "by (rule dgrad_p_set_le_red_single)"], ["proof (state)\nthis:\n  dgrad_p_set_le d {q} {f, p}\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} (insert p F)", "also"], ["proof (state)\nthis:\n  dgrad_p_set_le d {q} {f, p}\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} (insert p F)", "have \"dgrad_p_set_le d ... (insert p F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {f, p} (insert p F)", "by (rule dgrad_p_set_le_subset, auto intro: \\<open>f \\<in> F\\<close>)"], ["proof (state)\nthis:\n  dgrad_p_set_le d {f, p} (insert p F)\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} (insert p F)", "finally"], ["proof (chain)\npicking this:\n  dgrad_p_set_le d {q} (insert p F)", "show ?thesis"], ["proof (prove)\nusing this:\n  dgrad_p_set_le d {q} (insert p F)\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} (insert p F)", "."], ["proof (state)\nthis:\n  dgrad_p_set_le d {q} (insert p F)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary dgrad_p_set_le_red_rtrancl:\n  assumes \"dickson_grading d\" and \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"dgrad_p_set_le d {q} (insert p F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} (insert p F)", "using assms(2)"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {q} (insert p F)", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. dgrad_p_set_le d {p} (insert p F)\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        dgrad_p_set_le d {y} (insert p F)\\<rbrakk>\n       \\<Longrightarrow> dgrad_p_set_le d {z} (insert p F)", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. dgrad_p_set_le d {p} (insert p F)\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        dgrad_p_set_le d {y} (insert p F)\\<rbrakk>\n       \\<Longrightarrow> dgrad_p_set_le d {z} (insert p F)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {p} (insert p F)", "by (rule dgrad_p_set_le_subset, simp)"], ["proof (state)\nthis:\n  dgrad_p_set_le d {p} (insert p F)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        dgrad_p_set_le d {y} (insert p F)\\<rbrakk>\n       \\<Longrightarrow> dgrad_p_set_le d {z} (insert p F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        dgrad_p_set_le d {y} (insert p F)\\<rbrakk>\n       \\<Longrightarrow> dgrad_p_set_le d {z} (insert p F)", "case (step y z)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p y\n  red F y z\n  dgrad_p_set_le d {y} (insert p F)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        dgrad_p_set_le d {y} (insert p F)\\<rbrakk>\n       \\<Longrightarrow> dgrad_p_set_le d {z} (insert p F)", "from assms(1) step(2)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  red F y z", "have \"dgrad_p_set_le d {z} (insert y F)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  red F y z\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {z} (insert y F)", "by (rule dgrad_p_set_le_red)"], ["proof (state)\nthis:\n  dgrad_p_set_le d {z} (insert y F)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        dgrad_p_set_le d {y} (insert p F)\\<rbrakk>\n       \\<Longrightarrow> dgrad_p_set_le d {z} (insert p F)", "also"], ["proof (state)\nthis:\n  dgrad_p_set_le d {z} (insert y F)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        dgrad_p_set_le d {y} (insert p F)\\<rbrakk>\n       \\<Longrightarrow> dgrad_p_set_le d {z} (insert p F)", "have \"dgrad_p_set_le d ... (insert p F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (insert y F) (insert p F)", "proof (rule dgrad_p_set_leI_insert)"], ["proof (state)\ngoal (2 subgoals):\n 1. dgrad_p_set_le d F (insert p F)\n 2. dgrad_p_set_le d {y} (insert p F)", "show \"dgrad_p_set_le d F (insert p F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d F (insert p F)", "by (rule dgrad_p_set_le_subset, blast)"], ["proof (state)\nthis:\n  dgrad_p_set_le d F (insert p F)\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {y} (insert p F)", "qed fact"], ["proof (state)\nthis:\n  dgrad_p_set_le d (insert y F) (insert p F)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        dgrad_p_set_le d {y} (insert p F)\\<rbrakk>\n       \\<Longrightarrow> dgrad_p_set_le d {z} (insert p F)", "finally"], ["proof (chain)\npicking this:\n  dgrad_p_set_le d {z} (insert p F)", "show ?case"], ["proof (prove)\nusing this:\n  dgrad_p_set_le d {z} (insert p F)\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d {z} (insert p F)", "."], ["proof (state)\nthis:\n  dgrad_p_set_le d {z} (insert p F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_red_single_pp:\n  assumes \"dickson_grading d\" and \"p \\<in> dgrad_p_set d m\" and \"red_single p q f t\"\n  shows \"d t \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d t \\<le> m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d t \\<le> m", "from assms(1) assms(3)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  red_single p q f t", "have \"dgrad_set_le d {t} (pp_of_term ` keys p)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. dgrad_set_le d {t} (pp_of_term ` keys p)", "by (rule dgrad_set_le_red_single)"], ["proof (state)\nthis:\n  dgrad_set_le d {t} (pp_of_term ` keys p)\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "moreover"], ["proof (state)\nthis:\n  dgrad_set_le d {t} (pp_of_term ` keys p)\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "have \"t \\<in> {t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> {t}", ".."], ["proof (state)\nthis:\n  t \\<in> {t}\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "ultimately"], ["proof (chain)\npicking this:\n  dgrad_set_le d {t} (pp_of_term ` keys p)\n  t \\<in> {t}", "obtain s where \"s \\<in> pp_of_term ` keys p\" and \"d t \\<le> d s\""], ["proof (prove)\nusing this:\n  dgrad_set_le d {t} (pp_of_term ` keys p)\n  t \\<in> {t}\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> pp_of_term ` keys p; d t \\<le> d s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_set_leE)"], ["proof (state)\nthis:\n  s \\<in> pp_of_term ` keys p\n  d t \\<le> d s\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> pp_of_term ` keys p", "obtain u where \"u \\<in> keys p\" and \"s = pp_of_term u\""], ["proof (prove)\nusing this:\n  s \\<in> pp_of_term ` keys p\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> keys p; s = pp_of_term u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  u \\<in> keys p\n  s = pp_of_term u\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "from assms(2) this(1)"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m\n  u \\<in> keys p", "have \"d (pp_of_term u) \\<le> m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  u \\<in> keys p\n\ngoal (1 subgoal):\n 1. d (pp_of_term u) \\<le> m", "by (rule dgrad_p_setD)"], ["proof (state)\nthis:\n  d (pp_of_term u) \\<le> m\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "with \\<open>d t \\<le> d s\\<close>"], ["proof (chain)\npicking this:\n  d t \\<le> d s\n  d (pp_of_term u) \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  d t \\<le> d s\n  d (pp_of_term u) \\<le> m\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "unfolding \\<open>s = pp_of_term u\\<close>"], ["proof (prove)\nusing this:\n  d t \\<le> d (pp_of_term u)\n  d (pp_of_term u) \\<le> m\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "by (rule le_trans)"], ["proof (state)\nthis:\n  d t \\<le> m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_closed_red_single:\n  assumes \"dickson_grading d\" and \"p \\<in> dgrad_p_set d m\" and \"f \\<in> dgrad_p_set d m\"\n    and \"red_single p q f t\"\n  shows \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "from dgrad_p_set_le_red_single[OF assms(1, 4)]"], ["proof (chain)\npicking this:\n  dgrad_p_set_le d {q} {f, p}", "have \"{q} \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dgrad_p_set_le d {q} {f, p}\n\ngoal (1 subgoal):\n 1. {q} \\<subseteq> dgrad_p_set d m", "proof (rule dgrad_p_set_le_dgrad_p_set)"], ["proof (state)\ngoal (1 subgoal):\n 1. {f, p} \\<subseteq> dgrad_p_set d m", "from assms(2, 3)"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m\n  f \\<in> dgrad_p_set d m", "show \"{f, p} \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  f \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. {f, p} \\<subseteq> dgrad_p_set d m", "by simp"], ["proof (state)\nthis:\n  {f, p} \\<subseteq> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {q} \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "thus ?thesis"], ["proof (prove)\nusing this:\n  {q} \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "by simp"], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_closed_red:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\" and \"p \\<in> dgrad_p_set d m\" and \"red F p q\"\n  shows \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "from assms(4)"], ["proof (chain)\npicking this:\n  red F p q", "obtain f t where \"f \\<in> F\" and *: \"red_single p q f t\""], ["proof (prove)\nusing this:\n  red F p q\n\ngoal (1 subgoal):\n 1. (\\<And>f t.\n        \\<lbrakk>f \\<in> F; red_single p q f t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_setE)"], ["proof (state)\nthis:\n  f \\<in> F\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "from assms(2) this(1)"], ["proof (chain)\npicking this:\n  F \\<subseteq> dgrad_p_set d m\n  f \\<in> F", "have \"f \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  F \\<subseteq> dgrad_p_set d m\n  f \\<in> F\n\ngoal (1 subgoal):\n 1. f \\<in> dgrad_p_set d m", ".."], ["proof (state)\nthis:\n  f \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "from assms(1) assms(3) this *"], ["proof (chain)\npicking this:\n  dickson_grading d\n  p \\<in> dgrad_p_set d m\n  f \\<in> dgrad_p_set d m\n  red_single p q f t", "show ?thesis"], ["proof (prove)\nusing this:\n  dickson_grading d\n  p \\<in> dgrad_p_set d m\n  f \\<in> dgrad_p_set d m\n  red_single p q f t\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_red_single)"], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dgrad_p_set_closed_red_rtrancl:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\" and \"p \\<in> dgrad_p_set d m\" and \"(red F)\\<^sup>*\\<^sup>* p q\"\n  shows \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "using assms(4)"], ["proof (prove)\nusing this:\n  (red F)\\<^sup>*\\<^sup>* p q\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> dgrad_p_set d m\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<in> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> z \\<in> dgrad_p_set d m", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. p \\<in> dgrad_p_set d m\n 2. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<in> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> z \\<in> dgrad_p_set d m", "from assms(3)"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m", "."], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<in> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> z \\<in> dgrad_p_set d m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<in> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> z \\<in> dgrad_p_set d m", "case (step r q)"], ["proof (state)\nthis:\n  (red F)\\<^sup>*\\<^sup>* p r\n  red F r q\n  r \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(red F)\\<^sup>*\\<^sup>* p y; red F y z;\n        y \\<in> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> z \\<in> dgrad_p_set d m", "from assms(1) assms(2) step(3) step(2)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  F \\<subseteq> dgrad_p_set d m\n  r \\<in> dgrad_p_set d m\n  red F r q", "show \"q \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  F \\<subseteq> dgrad_p_set d m\n  r \\<in> dgrad_p_set d m\n  red F r q\n\ngoal (1 subgoal):\n 1. q \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_red)"], ["proof (state)\nthis:\n  q \\<in> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_rtrancl_repE:\n  assumes \"dickson_grading d\" and \"G \\<subseteq> dgrad_p_set d m\" and \"finite G\" and \"p \\<in> dgrad_p_set d m\"\n    and \"(red G)\\<^sup>*\\<^sup>* p r\"\n  obtains q where \"p = r + (\\<Sum>g\\<in>G. q g \\<odot> g)\" and \"\\<And>g. q g \\<in> punit.dgrad_p_set d m\"\n    and \"\\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>p = r + (\\<Sum>g\\<in>G. q g \\<odot> g);\n         \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n         \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(5)"], ["proof (prove)\nusing this:\n  (red G)\\<^sup>*\\<^sup>* p r\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>p = r + (\\<Sum>g\\<in>G. q g \\<odot> g);\n         \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n         \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct r arbitrary: thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>q.\n           \\<lbrakk>p = p + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case base"], ["proof (state)\nthis:\n  \\<lbrakk>p = p + (\\<Sum>g\\<in>G. ?q27 g \\<odot> g);\n   \\<And>g. ?q27 g \\<in> punit.dgrad_p_set d m;\n   \\<And>g. lt (?q27 g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>q.\n           \\<lbrakk>p = p + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule base)"], ["proof (state)\ngoal (3 subgoals):\n 1. p = p + (\\<Sum>g\\<in>G. ?q27 g \\<odot> g)\n 2. \\<And>g. ?q27 g \\<in> punit.dgrad_p_set d m\n 3. \\<And>g. lt (?q27 g \\<odot> g) \\<preceq>\\<^sub>t lt p", "show \"p = p + (\\<Sum>g\\<in>G. 0 \\<odot> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = p + sum ((\\<odot>) 0) G", "by simp"], ["proof (state)\nthis:\n  p = p + sum ((\\<odot>) 0) G\n\ngoal (2 subgoals):\n 1. \\<And>g. 0 \\<in> punit.dgrad_p_set d m\n 2. \\<And>g. lt (0 \\<odot> g) \\<preceq>\\<^sub>t lt p", "qed (simp_all add: punit.zero_in_dgrad_p_set min_term_min)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (step r' r)"], ["proof (state)\nthis:\n  (red G)\\<^sup>*\\<^sup>* p r'\n  red G r' r\n  (\\<And>q.\n      \\<lbrakk>p = r' + (\\<Sum>g\\<in>G. q g \\<odot> g);\n       \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n       \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n      \\<Longrightarrow> ?thesis27) \\<Longrightarrow>\n  ?thesis27\n  \\<lbrakk>p = r + (\\<Sum>g\\<in>G. ?q27 g \\<odot> g);\n   \\<And>g. ?q27 g \\<in> punit.dgrad_p_set d m;\n   \\<And>g. lt (?q27 g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from step.hyps(2)"], ["proof (chain)\npicking this:\n  red G r' r", "obtain g t where \"g \\<in> G\" and rs: \"red_single r' r g t\""], ["proof (prove)\nusing this:\n  red G r' r\n\ngoal (1 subgoal):\n 1. (\\<And>g t.\n        \\<lbrakk>g \\<in> G; red_single r' r g t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule red_setE)"], ["proof (state)\nthis:\n  g \\<in> G\n  red_single r' r g t\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from this(2)"], ["proof (chain)\npicking this:\n  red_single r' r g t", "have \"r' = r + monomial (lookup r' (t \\<oplus> lt g) / lc g) t \\<odot> g\""], ["proof (prove)\nusing this:\n  red_single r' r g t\n\ngoal (1 subgoal):\n 1. r' = r + monomial (lookup r' (t \\<oplus> lt g) / lc g) t \\<odot> g", "by (simp add: red_single_def mult_scalar_monomial)"], ["proof (state)\nthis:\n  r' = r + monomial (lookup r' (t \\<oplus> lt g) / lc g) t \\<odot> g\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  r' = r + monomial (lookup r' (t \\<oplus> lt g) / lc g) t \\<odot> g\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "define q0 where \"q0 = monomial (lookup r' (t \\<oplus> lt g) / lc g) t\""], ["proof (state)\nthis:\n  q0 = monomial (lookup r' (t \\<oplus> lt g) / lc g) t\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  r' = r + monomial (lookup r' (t \\<oplus> lt g) / lc g) t \\<odot> g\n  q0 = monomial (lookup r' (t \\<oplus> lt g) / lc g) t", "have r': \"r' = r + q0 \\<odot> g\""], ["proof (prove)\nusing this:\n  r' = r + monomial (lookup r' (t \\<oplus> lt g) / lc g) t \\<odot> g\n  q0 = monomial (lookup r' (t \\<oplus> lt g) / lc g) t\n\ngoal (1 subgoal):\n 1. r' = r + q0 \\<odot> g", "by simp"], ["proof (state)\nthis:\n  r' = r + q0 \\<odot> g\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "obtain q' where p: \"p = r' + (\\<Sum>g\\<in>G. q' g \\<odot> g)\" and 1: \"\\<And>g. q' g \\<in> punit.dgrad_p_set d m\"\n    and 2: \"\\<And>g. lt (q' g \\<odot> g) \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q'.\n        \\<lbrakk>p = r' + (\\<Sum>g\\<in>G. q' g \\<odot> g);\n         \\<And>g. q' g \\<in> punit.dgrad_p_set d m;\n         \\<And>g. lt (q' g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule step.hyps) blast"], ["proof (state)\nthis:\n  p = r' + (\\<Sum>g\\<in>G. q' g \\<odot> g)\n  q' ?g27 \\<in> punit.dgrad_p_set d m\n  lt (q' ?g27 \\<odot> ?g27) \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "define q where \"q = q'(g := q0 + q' g)\""], ["proof (state)\nthis:\n  q = q'(g := q0 + q' g)\n\ngoal (1 subgoal):\n 1. \\<And>y z thesis.\n       \\<lbrakk>(red G)\\<^sup>*\\<^sup>* p y; red G y z;\n        \\<And>thesis.\n           (\\<And>q.\n               \\<lbrakk>p = y + (\\<Sum>g\\<in>G. q g \\<odot> g);\n                \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n                \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>q.\n           \\<lbrakk>p = z + (\\<Sum>g\\<in>G. q g \\<odot> g);\n            \\<And>g. q g \\<in> punit.dgrad_p_set d m;\n            \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule step.prems)"], ["proof (state)\ngoal (3 subgoals):\n 1. p = r + (\\<Sum>g\\<in>G. ?q27 g \\<odot> g)\n 2. \\<And>g. ?q27 g \\<in> punit.dgrad_p_set d m\n 3. \\<And>g. lt (?q27 g \\<odot> g) \\<preceq>\\<^sub>t lt p", "from assms(3) \\<open>g \\<in> G\\<close>"], ["proof (chain)\npicking this:\n  finite G\n  g \\<in> G", "have \"p = (r + q0 \\<odot> g) + (q' g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g))\""], ["proof (prove)\nusing this:\n  finite G\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. p =\n    r + q0 \\<odot> g +\n    (q' g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g))", "by (simp add: p r' sum.remove)"], ["proof (state)\nthis:\n  p =\n  r + q0 \\<odot> g +\n  (q' g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g))\n\ngoal (3 subgoals):\n 1. p = r + (\\<Sum>g\\<in>G. ?q27 g \\<odot> g)\n 2. \\<And>g. ?q27 g \\<in> punit.dgrad_p_set d m\n 3. \\<And>g. lt (?q27 g \\<odot> g) \\<preceq>\\<^sub>t lt p", "also"], ["proof (state)\nthis:\n  p =\n  r + q0 \\<odot> g +\n  (q' g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g))\n\ngoal (3 subgoals):\n 1. p = r + (\\<Sum>g\\<in>G. ?q27 g \\<odot> g)\n 2. \\<And>g. ?q27 g \\<in> punit.dgrad_p_set d m\n 3. \\<And>g. lt (?q27 g \\<odot> g) \\<preceq>\\<^sub>t lt p", "have \"\\<dots> = r + (q g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r + q0 \\<odot> g +\n    (q' g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g)) =\n    r + (q g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g))", "by (simp add: q_def mult_scalar_distrib_right)"], ["proof (state)\nthis:\n  r + q0 \\<odot> g +\n  (q' g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g)) =\n  r + (q g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g))\n\ngoal (3 subgoals):\n 1. p = r + (\\<Sum>g\\<in>G. ?q27 g \\<odot> g)\n 2. \\<And>g. ?q27 g \\<in> punit.dgrad_p_set d m\n 3. \\<And>g. lt (?q27 g \\<odot> g) \\<preceq>\\<^sub>t lt p", "also"], ["proof (state)\nthis:\n  r + q0 \\<odot> g +\n  (q' g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g)) =\n  r + (q g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g))\n\ngoal (3 subgoals):\n 1. p = r + (\\<Sum>g\\<in>G. ?q27 g \\<odot> g)\n 2. \\<And>g. ?q27 g \\<in> punit.dgrad_p_set d m\n 3. \\<And>g. lt (?q27 g \\<odot> g) \\<preceq>\\<^sub>t lt p", "from refl"], ["proof (chain)\npicking this:\n  ?t = ?t", "have \"(\\<Sum>g\\<in>G - {g}. q' g \\<odot> g) = (\\<Sum>g\\<in>G - {g}. q g \\<odot> g)\""], ["proof (prove)\nusing this:\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g) =\n    (\\<Sum>g\\<in>G - {g}. q g \\<odot> g)", "by (rule sum.cong) (simp add: q_def)"], ["proof (state)\nthis:\n  (\\<Sum>g\\<in>G - {g}. q' g \\<odot> g) =\n  (\\<Sum>g\\<in>G - {g}. q g \\<odot> g)\n\ngoal (3 subgoals):\n 1. p = r + (\\<Sum>g\\<in>G. ?q27 g \\<odot> g)\n 2. \\<And>g. ?q27 g \\<in> punit.dgrad_p_set d m\n 3. \\<And>g. lt (?q27 g \\<odot> g) \\<preceq>\\<^sub>t lt p", "finally"], ["proof (chain)\npicking this:\n  p = r + (q g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q g \\<odot> g))", "show \"p = r + (\\<Sum>g\\<in>G. q g \\<odot> g)\""], ["proof (prove)\nusing this:\n  p = r + (q g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q g \\<odot> g))\n\ngoal (1 subgoal):\n 1. p = r + (\\<Sum>g\\<in>G. q g \\<odot> g)", "using assms(3) \\<open>g \\<in> G\\<close>"], ["proof (prove)\nusing this:\n  p = r + (q g \\<odot> g + (\\<Sum>g\\<in>G - {g}. q g \\<odot> g))\n  finite G\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. p = r + (\\<Sum>g\\<in>G. q g \\<odot> g)", "by (simp only: sum.remove)"], ["proof (state)\nthis:\n  p = r + (\\<Sum>g\\<in>G. q g \\<odot> g)\n\ngoal (2 subgoals):\n 1. \\<And>g. q g \\<in> punit.dgrad_p_set d m\n 2. \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g. q g \\<in> punit.dgrad_p_set d m\n 2. \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p", "fix g0"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g. q g \\<in> punit.dgrad_p_set d m\n 2. \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p", "have \"q g0 \\<in> punit.dgrad_p_set d m \\<and> lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "proof (cases \"g0 = g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. g0 = g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\n 2. g0 \\<noteq> g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "case True"], ["proof (state)\nthis:\n  g0 = g\n\ngoal (2 subgoals):\n 1. g0 = g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\n 2. g0 \\<noteq> g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "have eq: \"q g = q0 + q' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q g = q0 + q' g", "by (simp add: q_def)"], ["proof (state)\nthis:\n  q g = q0 + q' g\n\ngoal (2 subgoals):\n 1. g0 = g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\n 2. g0 \\<noteq> g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "unfolding True eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. q0 + q' g \\<in> punit.dgrad_p_set d m \\<and>\n    lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. q0 + q' g \\<in> punit.dgrad_p_set d m\n 2. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "from assms(1, 2, 4) step.hyps(1)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  G \\<subseteq> dgrad_p_set d m\n  p \\<in> dgrad_p_set d m\n  (red G)\\<^sup>*\\<^sup>* p r'", "have \"r' \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  G \\<subseteq> dgrad_p_set d m\n  p \\<in> dgrad_p_set d m\n  (red G)\\<^sup>*\\<^sup>* p r'\n\ngoal (1 subgoal):\n 1. r' \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_red_rtrancl)"], ["proof (state)\nthis:\n  r' \\<in> dgrad_p_set d m\n\ngoal (2 subgoals):\n 1. q0 + q' g \\<in> punit.dgrad_p_set d m\n 2. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "with assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  r' \\<in> dgrad_p_set d m", "have \"d t \\<le> m\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  r' \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "using rs"], ["proof (prove)\nusing this:\n  dickson_grading d\n  r' \\<in> dgrad_p_set d m\n  red_single r' r g t\n\ngoal (1 subgoal):\n 1. d t \\<le> m", "by (rule dgrad_p_set_red_single_pp)"], ["proof (state)\nthis:\n  d t \\<le> m\n\ngoal (2 subgoals):\n 1. q0 + q' g \\<in> punit.dgrad_p_set d m\n 2. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "hence \"q0 \\<in> punit.dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  d t \\<le> m\n\ngoal (1 subgoal):\n 1. q0 \\<in> punit.dgrad_p_set d m", "by (simp add: q0_def punit.dgrad_p_set_def dgrad_set_def)"], ["proof (state)\nthis:\n  q0 \\<in> punit.dgrad_p_set d m\n\ngoal (2 subgoals):\n 1. q0 + q' g \\<in> punit.dgrad_p_set d m\n 2. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "thus \"q0 + q' g \\<in> punit.dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  q0 \\<in> punit.dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. q0 + q' g \\<in> punit.dgrad_p_set d m", "by (intro punit.dgrad_p_set_closed_plus 1)"], ["proof (state)\nthis:\n  q0 + q' g \\<in> punit.dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "have \"lt (q0 \\<odot> g + q' g \\<odot> g) \\<preceq>\\<^sub>t ord_term_lin.max (lt (q0 \\<odot> g)) (lt (q' g \\<odot> g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (q0 \\<odot> g + q' g \\<odot> g) \\<preceq>\\<^sub>t\n    ord_term_lin.max (lt (q0 \\<odot> g)) (lt (q' g \\<odot> g))", "by (fact lt_plus_le_max)"], ["proof (state)\nthis:\n  lt (q0 \\<odot> g + q' g \\<odot> g) \\<preceq>\\<^sub>t\n  ord_term_lin.max (lt (q0 \\<odot> g)) (lt (q' g \\<odot> g))\n\ngoal (1 subgoal):\n 1. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "also"], ["proof (state)\nthis:\n  lt (q0 \\<odot> g + q' g \\<odot> g) \\<preceq>\\<^sub>t\n  ord_term_lin.max (lt (q0 \\<odot> g)) (lt (q' g \\<odot> g))\n\ngoal (1 subgoal):\n 1. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "have \"\\<dots> \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_term_lin.max (lt (q0 \\<odot> g))\n     (lt (q' g \\<odot> g)) \\<preceq>\\<^sub>t\n    lt p", "proof (intro ord_term_lin.max.boundedI 2)"], ["proof (state)\ngoal (1 subgoal):\n 1. lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p", "have \"lt (q0 \\<odot> g) \\<preceq>\\<^sub>t t \\<oplus> lt g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (q0 \\<odot> g) \\<preceq>\\<^sub>t t \\<oplus> lt g", "by (simp add: q0_def mult_scalar_monomial lt_monom_mult_le)"], ["proof (state)\nthis:\n  lt (q0 \\<odot> g) \\<preceq>\\<^sub>t t \\<oplus> lt g\n\ngoal (1 subgoal):\n 1. lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p", "also"], ["proof (state)\nthis:\n  lt (q0 \\<odot> g) \\<preceq>\\<^sub>t t \\<oplus> lt g\n\ngoal (1 subgoal):\n 1. lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p", "from rs"], ["proof (chain)\npicking this:\n  red_single r' r g t", "have \"\\<dots> \\<preceq>\\<^sub>t lt r'\""], ["proof (prove)\nusing this:\n  red_single r' r g t\n\ngoal (1 subgoal):\n 1. t \\<oplus> lt g \\<preceq>\\<^sub>t lt r'", "by (intro lt_max) (simp add: red_single_def)"], ["proof (state)\nthis:\n  t \\<oplus> lt g \\<preceq>\\<^sub>t lt r'\n\ngoal (1 subgoal):\n 1. lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p", "also"], ["proof (state)\nthis:\n  t \\<oplus> lt g \\<preceq>\\<^sub>t lt r'\n\ngoal (1 subgoal):\n 1. lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p", "from step.hyps(1)"], ["proof (chain)\npicking this:\n  (red G)\\<^sup>*\\<^sup>* p r'", "have \"\\<dots> \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  (red G)\\<^sup>*\\<^sup>* p r'\n\ngoal (1 subgoal):\n 1. lt r' \\<preceq>\\<^sub>t lt p", "by (intro ord_p_lt red_rtrancl_ord)"], ["proof (state)\nthis:\n  lt r' \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p", "finally"], ["proof (chain)\npicking this:\n  lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p", "show \"lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p", "."], ["proof (state)\nthis:\n  lt (q0 \\<odot> g) \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ord_term_lin.max (lt (q0 \\<odot> g))\n   (lt (q' g \\<odot> g)) \\<preceq>\\<^sub>t\n  lt p\n\ngoal (1 subgoal):\n 1. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "finally"], ["proof (chain)\npicking this:\n  lt (q0 \\<odot> g + q' g \\<odot> g) \\<preceq>\\<^sub>t lt p", "show \"lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  lt (q0 \\<odot> g + q' g \\<odot> g) \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p", "by (simp only: mult_scalar_distrib_right)"], ["proof (state)\nthis:\n  lt ((q0 + q' g) \\<odot> g) \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q g0 \\<in> punit.dgrad_p_set d m \\<and>\n  lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. g0 \\<noteq> g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g0 \\<noteq> g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "case False"], ["proof (state)\nthis:\n  g0 \\<noteq> g\n\ngoal (1 subgoal):\n 1. g0 \\<noteq> g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "hence \"q g0 = q' g0\""], ["proof (prove)\nusing this:\n  g0 \\<noteq> g\n\ngoal (1 subgoal):\n 1. q g0 = q' g0", "by (simp add: q_def)"], ["proof (state)\nthis:\n  q g0 = q' g0\n\ngoal (1 subgoal):\n 1. g0 \\<noteq> g \\<Longrightarrow>\n    q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "thus ?thesis"], ["proof (prove)\nusing this:\n  q g0 = q' g0\n\ngoal (1 subgoal):\n 1. q g0 \\<in> punit.dgrad_p_set d m \\<and>\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "by (simp add: 1 2)"], ["proof (state)\nthis:\n  q g0 \\<in> punit.dgrad_p_set d m \\<and>\n  lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q g0 \\<in> punit.dgrad_p_set d m \\<and>\n  lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\n\ngoal (2 subgoals):\n 1. \\<And>g. q g \\<in> punit.dgrad_p_set d m\n 2. \\<And>g. lt (q g \\<odot> g) \\<preceq>\\<^sub>t lt p", "thus \"q g0 \\<in> punit.dgrad_p_set d m\" and \"lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  q g0 \\<in> punit.dgrad_p_set d m \\<and>\n  lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. q g0 \\<in> punit.dgrad_p_set d m &&&\n    lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p", "by simp_all"], ["proof (state)\nthis:\n  q g0 \\<in> punit.dgrad_p_set d m\n  lt (q g0 \\<odot> g0) \\<preceq>\\<^sub>t lt p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_relation_order_red:\n  assumes \"dickson_grading d\"\n  shows \"Confluence.relation_order (red F) (\\<prec>\\<^sub>p) (dgrad_p_set d m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relation_order (red F) (\\<prec>\\<^sub>p) (dgrad_p_set d m)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<prec>\\<^sub>p y; y \\<prec>\\<^sub>p z\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^sub>p z\n 2. wfp_on (\\<prec>\\<^sub>p) (dgrad_p_set d m)\n 3. red F \\<le> (\\<prec>\\<^sub>p)\\<inverse>\\<inverse>", "show \"wfp_on (\\<prec>\\<^sub>p) (dgrad_p_set d m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfp_on (\\<prec>\\<^sub>p) (dgrad_p_set d m)", "proof (rule wfp_onI_min)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q; Q \\<subseteq> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>dgrad_p_set d m.\n                               y \\<prec>\\<^sub>p z \\<longrightarrow>\n                               y \\<notin> Q", "fix x::\"'t \\<Rightarrow>\\<^sub>0 'c\" and Q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q; Q \\<subseteq> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>dgrad_p_set d m.\n                               y \\<prec>\\<^sub>p z \\<longrightarrow>\n                               y \\<notin> Q", "assume \"x \\<in> Q\" and \"Q \\<subseteq> dgrad_p_set d m\""], ["proof (state)\nthis:\n  x \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q; Q \\<subseteq> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>dgrad_p_set d m.\n                               y \\<prec>\\<^sub>p z \\<longrightarrow>\n                               y \\<notin> Q", "with assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  x \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m", "obtain q where \"q \\<in> Q\" and *: \"\\<And>y. y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  x \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q;\n         \\<And>y.\n            y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ord_p_minimum_dgrad_p_set, auto)"], ["proof (state)\nthis:\n  q \\<in> Q\n  ?y27 \\<prec>\\<^sub>p q \\<Longrightarrow> ?y27 \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q; Q \\<subseteq> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>dgrad_p_set d m.\n                               y \\<prec>\\<^sub>p z \\<longrightarrow>\n                               y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  q \\<in> Q", "show \"\\<exists>z\\<in>Q. \\<forall>y\\<in>dgrad_p_set d m. y \\<prec>\\<^sub>p z \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\nusing this:\n  q \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>dgrad_p_set d m.\n          y \\<prec>\\<^sub>p z \\<longrightarrow> y \\<notin> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>dgrad_p_set d m.\n       y \\<prec>\\<^sub>p q \\<longrightarrow> y \\<notin> Q", "from *"], ["proof (chain)\npicking this:\n  ?y27 \\<prec>\\<^sub>p q \\<Longrightarrow> ?y27 \\<notin> Q", "show \"\\<forall>y\\<in>dgrad_p_set d m. y \\<prec>\\<^sub>p q \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\nusing this:\n  ?y27 \\<prec>\\<^sub>p q \\<Longrightarrow> ?y27 \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>dgrad_p_set d m.\n       y \\<prec>\\<^sub>p q \\<longrightarrow> y \\<notin> Q", "by auto"], ["proof (state)\nthis:\n  \\<forall>y\\<in>dgrad_p_set d m.\n     y \\<prec>\\<^sub>p q \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y\\<in>dgrad_p_set d m.\n        y \\<prec>\\<^sub>p z \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wfp_on (\\<prec>\\<^sub>p) (dgrad_p_set d m)\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<prec>\\<^sub>p y; y \\<prec>\\<^sub>p z\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^sub>p z\n 2. red F \\<le> (\\<prec>\\<^sub>p)\\<inverse>\\<inverse>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<prec>\\<^sub>p y; y \\<prec>\\<^sub>p z\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^sub>p z\n 2. red F \\<le> (\\<prec>\\<^sub>p)\\<inverse>\\<inverse>", "show \"red F \\<le> (\\<prec>\\<^sub>p)\\<inverse>\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red F \\<le> (\\<prec>\\<^sub>p)\\<inverse>\\<inverse>", "by (simp add: predicate2I red_ord)"], ["proof (state)\nthis:\n  red F \\<le> (\\<prec>\\<^sub>p)\\<inverse>\\<inverse>\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<prec>\\<^sub>p y; y \\<prec>\\<^sub>p z\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^sub>p z", "qed (fact ord_strict_p_transitive)"], ["", "lemma red_wf_dgrad_p_set_aux:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"wfp_on (red F)\\<inverse>\\<inverse> (dgrad_p_set d m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfp_on (red F)\\<inverse>\\<inverse> (dgrad_p_set d m)", "proof (rule wfp_onI_min)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q; Q \\<subseteq> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>dgrad_p_set d m.\n                               (red F)\\<inverse>\\<inverse> y\n                                z \\<longrightarrow>\n                               y \\<notin> Q", "fix x::\"'t \\<Rightarrow>\\<^sub>0 'b\" and Q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q; Q \\<subseteq> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>dgrad_p_set d m.\n                               (red F)\\<inverse>\\<inverse> y\n                                z \\<longrightarrow>\n                               y \\<notin> Q", "assume \"x \\<in> Q\" and \"Q \\<subseteq> dgrad_p_set d m\""], ["proof (state)\nthis:\n  x \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q; Q \\<subseteq> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>dgrad_p_set d m.\n                               (red F)\\<inverse>\\<inverse> y\n                                z \\<longrightarrow>\n                               y \\<notin> Q", "with assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  x \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m", "obtain q where \"q \\<in> Q\" and *: \"\\<And>y. y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  x \\<in> Q\n  Q \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> Q;\n         \\<And>y.\n            y \\<prec>\\<^sub>p q \\<Longrightarrow> y \\<notin> Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ord_p_minimum_dgrad_p_set, auto)"], ["proof (state)\nthis:\n  q \\<in> Q\n  ?y27 \\<prec>\\<^sub>p q \\<Longrightarrow> ?y27 \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       \\<lbrakk>x \\<in> Q; Q \\<subseteq> dgrad_p_set d m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y\\<in>dgrad_p_set d m.\n                               (red F)\\<inverse>\\<inverse> y\n                                z \\<longrightarrow>\n                               y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  q \\<in> Q", "show \"\\<exists>z\\<in>Q. \\<forall>y\\<in>dgrad_p_set d m. (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\nusing this:\n  q \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y\\<in>dgrad_p_set d m.\n          (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>dgrad_p_set d m.\n       (red F)\\<inverse>\\<inverse> y q \\<longrightarrow> y \\<notin> Q", "show \"\\<forall>y\\<in>dgrad_p_set d m. (red F)\\<inverse>\\<inverse> y q \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>dgrad_p_set d m.\n       (red F)\\<inverse>\\<inverse> y q \\<longrightarrow> y \\<notin> Q", "proof (intro ballI impI, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> dgrad_p_set d m; red F q y\\<rbrakk>\n       \\<Longrightarrow> y \\<notin> Q", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> dgrad_p_set d m; red F q y\\<rbrakk>\n       \\<Longrightarrow> y \\<notin> Q", "assume \"red F q y\""], ["proof (state)\nthis:\n  red F q y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> dgrad_p_set d m; red F q y\\<rbrakk>\n       \\<Longrightarrow> y \\<notin> Q", "hence \"y \\<prec>\\<^sub>p q\""], ["proof (prove)\nusing this:\n  red F q y\n\ngoal (1 subgoal):\n 1. y \\<prec>\\<^sub>p q", "by (rule red_ord)"], ["proof (state)\nthis:\n  y \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> dgrad_p_set d m; red F q y\\<rbrakk>\n       \\<Longrightarrow> y \\<notin> Q", "thus \"y \\<notin> Q\""], ["proof (prove)\nusing this:\n  y \\<prec>\\<^sub>p q\n\ngoal (1 subgoal):\n 1. y \\<notin> Q", "by (rule *)"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>y\\<in>dgrad_p_set d m.\n     (red F)\\<inverse>\\<inverse> y q \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y\\<in>dgrad_p_set d m.\n        (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma red_wf_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"wfP (red F)\\<inverse>\\<inverse>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (red F)\\<inverse>\\<inverse>", "proof (rule wfI_min[to_pred])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "fix x::\"'t \\<Rightarrow>\\<^sub>0 'b\" and Q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "assume \"x \\<in> Q\""], ["proof (state)\nthis:\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "from assms(2)"], ["proof (chain)\npicking this:\n  F \\<subseteq> dgrad_p_set d m", "obtain n where \"m \\<le> n\" and \"x \\<in> dgrad_p_set d n\" and \"F \\<subseteq> dgrad_p_set d n\""], ["proof (prove)\nusing this:\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>m \\<le> n; x \\<in> dgrad_p_set d n;\n         F \\<subseteq> dgrad_p_set d n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_p_set_insert)"], ["proof (state)\nthis:\n  m \\<le> n\n  x \\<in> dgrad_p_set d n\n  F \\<subseteq> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "let ?Q = \"Q \\<inter> dgrad_p_set d n\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "from assms(1) \\<open>F \\<subseteq> dgrad_p_set d n\\<close>"], ["proof (chain)\npicking this:\n  dickson_grading d\n  F \\<subseteq> dgrad_p_set d n", "have \"wfp_on (red F)\\<inverse>\\<inverse> (dgrad_p_set d n)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  F \\<subseteq> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. wfp_on (red F)\\<inverse>\\<inverse> (dgrad_p_set d n)", "by (rule red_wf_dgrad_p_set_aux)"], ["proof (state)\nthis:\n  wfp_on (red F)\\<inverse>\\<inverse> (dgrad_p_set d n)\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  wfp_on (red F)\\<inverse>\\<inverse> (dgrad_p_set d n)\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "from \\<open>x \\<in> Q\\<close> \\<open>x \\<in> dgrad_p_set d n\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> Q\n  x \\<in> dgrad_p_set d n", "have \"x \\<in> ?Q\""], ["proof (prove)\nusing this:\n  x \\<in> Q\n  x \\<in> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. x \\<in> Q \\<inter> dgrad_p_set d n", ".."], ["proof (state)\nthis:\n  x \\<in> Q \\<inter> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  x \\<in> Q \\<inter> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "have \"?Q \\<subseteq> dgrad_p_set d n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<inter> dgrad_p_set d n \\<subseteq> dgrad_p_set d n", "by simp"], ["proof (state)\nthis:\n  Q \\<inter> dgrad_p_set d n \\<subseteq> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "ultimately"], ["proof (chain)\npicking this:\n  wfp_on (red F)\\<inverse>\\<inverse> (dgrad_p_set d n)\n  x \\<in> Q \\<inter> dgrad_p_set d n\n  Q \\<inter> dgrad_p_set d n \\<subseteq> dgrad_p_set d n", "obtain z where \"z \\<in> ?Q\" and *: \"\\<And>y. (red F)\\<inverse>\\<inverse> y z \\<Longrightarrow> y \\<notin> ?Q\""], ["proof (prove)\nusing this:\n  wfp_on (red F)\\<inverse>\\<inverse> (dgrad_p_set d n)\n  x \\<in> Q \\<inter> dgrad_p_set d n\n  Q \\<inter> dgrad_p_set d n \\<subseteq> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> Q \\<inter> dgrad_p_set d n;\n         \\<And>y.\n            (red F)\\<inverse>\\<inverse> y z \\<Longrightarrow>\n            y \\<notin> Q \\<inter> dgrad_p_set d n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule wfp_onE_min) blast"], ["proof (state)\nthis:\n  z \\<in> Q \\<inter> dgrad_p_set d n\n  (red F)\\<inverse>\\<inverse> ?y27 z \\<Longrightarrow>\n  ?y27 \\<notin> Q \\<inter> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  z \\<in> Q \\<inter> dgrad_p_set d n", "have \"z \\<in> Q\" and \"z \\<in> dgrad_p_set d n\""], ["proof (prove)\nusing this:\n  z \\<in> Q \\<inter> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. z \\<in> Q &&& z \\<in> dgrad_p_set d n", "by simp_all"], ["proof (state)\nthis:\n  z \\<in> Q\n  z \\<in> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  z \\<in> Q", "show \"\\<exists>z\\<in>Q. \\<forall>y. (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\nusing this:\n  z \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "show \"\\<forall>y. (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. (red F)\\<inverse>\\<inverse> y z \\<Longrightarrow> y \\<notin> Q", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. (red F)\\<inverse>\\<inverse> y z \\<Longrightarrow> y \\<notin> Q", "assume \"(red F)\\<inverse>\\<inverse> y z\""], ["proof (state)\nthis:\n  (red F)\\<inverse>\\<inverse> y z\n\ngoal (1 subgoal):\n 1. \\<And>y. (red F)\\<inverse>\\<inverse> y z \\<Longrightarrow> y \\<notin> Q", "hence \"red F z y\""], ["proof (prove)\nusing this:\n  (red F)\\<inverse>\\<inverse> y z\n\ngoal (1 subgoal):\n 1. red F z y", "by simp"], ["proof (state)\nthis:\n  red F z y\n\ngoal (1 subgoal):\n 1. \\<And>y. (red F)\\<inverse>\\<inverse> y z \\<Longrightarrow> y \\<notin> Q", "with assms(1) \\<open>F \\<subseteq> dgrad_p_set d n\\<close> \\<open>z \\<in> dgrad_p_set d n\\<close>"], ["proof (chain)\npicking this:\n  dickson_grading d\n  F \\<subseteq> dgrad_p_set d n\n  z \\<in> dgrad_p_set d n\n  red F z y", "have \"y \\<in> dgrad_p_set d n\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  F \\<subseteq> dgrad_p_set d n\n  z \\<in> dgrad_p_set d n\n  red F z y\n\ngoal (1 subgoal):\n 1. y \\<in> dgrad_p_set d n", "by (rule dgrad_p_set_closed_red)"], ["proof (state)\nthis:\n  y \\<in> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. \\<And>y. (red F)\\<inverse>\\<inverse> y z \\<Longrightarrow> y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  y \\<in> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. \\<And>y. (red F)\\<inverse>\\<inverse> y z \\<Longrightarrow> y \\<notin> Q", "from \\<open>(red F)\\<inverse>\\<inverse> y z\\<close>"], ["proof (chain)\npicking this:\n  (red F)\\<inverse>\\<inverse> y z", "have \"y \\<notin> ?Q\""], ["proof (prove)\nusing this:\n  (red F)\\<inverse>\\<inverse> y z\n\ngoal (1 subgoal):\n 1. y \\<notin> Q \\<inter> dgrad_p_set d n", "by (rule *)"], ["proof (state)\nthis:\n  y \\<notin> Q \\<inter> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. \\<And>y. (red F)\\<inverse>\\<inverse> y z \\<Longrightarrow> y \\<notin> Q", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> dgrad_p_set d n\n  y \\<notin> Q \\<inter> dgrad_p_set d n", "show \"y \\<notin> Q\""], ["proof (prove)\nusing this:\n  y \\<in> dgrad_p_set d n\n  y \\<notin> Q \\<inter> dgrad_p_set d n\n\ngoal (1 subgoal):\n 1. y \\<notin> Q", "by blast"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>y. (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        (red F)\\<inverse>\\<inverse> y z \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas red_wf_finite = red_wf_dgrad_p_set[OF dickson_grading_dgrad_dummy dgrad_p_set_exhaust_expl]"], ["", "lemma cbelow_on_monom_mult:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\" and \"d t \\<le> m\" and \"c \\<noteq> 0\"\n    and \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z (\\<lambda>a b. red F a b \\<or> red F b a) p q\"\n  shows \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z) (\\<lambda>a b. red F a b \\<or> red F b a)\n          (monom_mult c t p) (monom_mult c t q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n     (monom_mult c t q)", "using assms(5)"], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n     (monom_mult c t q)", "proof (induct rule: cbelow_on_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<in> dgrad_p_set d m; p \\<prec>\\<^sub>p z\\<rbrakk>\n    \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                       (monom_mult c t z)\n                       (\\<lambda>a b. red F a b \\<or> red F b a)\n                       (monom_mult c t p) (monom_mult c t p)\n 2. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n         (monom_mult c t b)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monom_mult c t z)\n                          (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (monom_mult c t p) (monom_mult c t ca)", "case base"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n  p \\<prec>\\<^sub>p z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<in> dgrad_p_set d m; p \\<prec>\\<^sub>p z\\<rbrakk>\n    \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                       (monom_mult c t z)\n                       (\\<lambda>a b. red F a b \\<or> red F b a)\n                       (monom_mult c t p) (monom_mult c t p)\n 2. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n         (monom_mult c t b)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monom_mult c t z)\n                          (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (monom_mult c t p) (monom_mult c t ca)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n     (monom_mult c t p)", "unfolding cbelow_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. monom_mult c t p = monom_mult c t p \\<and>\n    monom_mult c t p \\<in> dgrad_p_set d m \\<and>\n    monom_mult c t p \\<prec>\\<^sub>p monom_mult c t z \\<or>\n    cbelow_on_1 (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n     (monom_mult c t p)", "proof (rule disjI1, intro conjI, fact refl)"], ["proof (state)\ngoal (2 subgoals):\n 1. monom_mult c t p \\<in> dgrad_p_set d m\n 2. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t z", "from assms(5)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q", "have \"p \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m", "by (rule cbelow_on_first_in)"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n\ngoal (2 subgoals):\n 1. monom_mult c t p \\<in> dgrad_p_set d m\n 2. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t z", "with assms(1) assms(3)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  d t \\<le> m\n  p \\<in> dgrad_p_set d m", "show \"monom_mult c t p \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  d t \\<le> m\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. monom_mult c t p \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_monom_mult)"], ["proof (state)\nthis:\n  monom_mult c t p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t z", "from assms(5)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q", "have \"p \\<prec>\\<^sub>p z\""], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p z", "by (rule cbelow_on_first_below)"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p z\n\ngoal (1 subgoal):\n 1. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t z", "from this assms(4)"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p z\n  c \\<noteq> (0::'b)", "show \"monom_mult c t p \\<prec>\\<^sub>p monom_mult c t z\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p z\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. monom_mult c t p \\<prec>\\<^sub>p monom_mult c t z", "by (rule ord_strict_p_monom_mult)"], ["proof (state)\nthis:\n  monom_mult c t p \\<prec>\\<^sub>p monom_mult c t z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n   (monom_mult c t p)\n\ngoal (1 subgoal):\n 1. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n         (monom_mult c t b)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monom_mult c t z)\n                          (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (monom_mult c t p) (monom_mult c t ca)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n         (monom_mult c t b)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monom_mult c t z)\n                          (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (monom_mult c t p) (monom_mult c t ca)", "case (step q' q)"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'\n  red F q' q \\<or> red F q q'\n  q \\<in> dgrad_p_set d m\n  q \\<prec>\\<^sub>p z\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n   (monom_mult c t q')\n\ngoal (1 subgoal):\n 1. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n         (monom_mult c t b)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monom_mult c t z)\n                          (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (monom_mult c t p) (monom_mult c t ca)", "let ?R = \"\\<lambda>a b. red F a b \\<or> red F b a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n         (monom_mult c t b)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monom_mult c t z)\n                          (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (monom_mult c t p) (monom_mult c t ca)", "from step(5)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n   (monom_mult c t q')", "show ?case"], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n   (monom_mult c t q')\n\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n     (monom_mult c t q)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. monom_mult c t q \\<in> dgrad_p_set d m\n 2. red F (monom_mult c t q') (monom_mult c t q) \\<or>\n    red F (monom_mult c t q) (monom_mult c t q')\n 3. monom_mult c t q \\<prec>\\<^sub>p monom_mult c t z", "from assms(1) assms(3) step(3)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  d t \\<le> m\n  q \\<in> dgrad_p_set d m", "show \"monom_mult c t q \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  d t \\<le> m\n  q \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. monom_mult c t q \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_monom_mult)"], ["proof (state)\nthis:\n  monom_mult c t q \\<in> dgrad_p_set d m\n\ngoal (2 subgoals):\n 1. red F (monom_mult c t q') (monom_mult c t q) \\<or>\n    red F (monom_mult c t q) (monom_mult c t q')\n 2. monom_mult c t q \\<prec>\\<^sub>p monom_mult c t z", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. red F (monom_mult c t q') (monom_mult c t q) \\<or>\n    red F (monom_mult c t q) (monom_mult c t q')\n 2. monom_mult c t q \\<prec>\\<^sub>p monom_mult c t z", "from step(2) red_monom_mult[OF _ assms(4)]"], ["proof (chain)\npicking this:\n  red F q' q \\<or> red F q q'\n  red ?F ?p ?q \\<Longrightarrow>\n  red ?F (monom_mult c ?s ?p) (monom_mult c ?s ?q)", "show \"?R (monom_mult c t q') (monom_mult c t q)\""], ["proof (prove)\nusing this:\n  red F q' q \\<or> red F q q'\n  red ?F ?p ?q \\<Longrightarrow>\n  red ?F (monom_mult c ?s ?p) (monom_mult c ?s ?q)\n\ngoal (1 subgoal):\n 1. red F (monom_mult c t q') (monom_mult c t q) \\<or>\n    red F (monom_mult c t q) (monom_mult c t q')", "by auto"], ["proof (state)\nthis:\n  red F (monom_mult c t q') (monom_mult c t q) \\<or>\n  red F (monom_mult c t q) (monom_mult c t q')\n\ngoal (1 subgoal):\n 1. monom_mult c t q \\<prec>\\<^sub>p monom_mult c t z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. monom_mult c t q \\<prec>\\<^sub>p monom_mult c t z", "from step(4) assms(4)"], ["proof (chain)\npicking this:\n  q \\<prec>\\<^sub>p z\n  c \\<noteq> (0::'b)", "show \"monom_mult c t q \\<prec>\\<^sub>p monom_mult c t z\""], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p z\n  c \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. monom_mult c t q \\<prec>\\<^sub>p monom_mult c t z", "by (rule ord_strict_p_monom_mult)"], ["proof (state)\nthis:\n  monom_mult c t q \\<prec>\\<^sub>p monom_mult c t z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monom_mult c t z)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (monom_mult c t p)\n   (monom_mult c t q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cbelow_on_monom_mult_monomial:\n  assumes \"c \\<noteq> 0\"\n    and \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c' v) (\\<lambda>a b. red F a b \\<or> red F b a) p q\"\n  shows \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c (t \\<oplus> v)) (\\<lambda>a b. red F a b \\<or> red F b a) p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n     (monomial c (t \\<oplus> v)) (\\<lambda>a b. red F a b \\<or> red F b a) p\n     q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n     (monomial c (t \\<oplus> v)) (\\<lambda>a b. red F a b \\<or> red F b a) p\n     q", "have *: \"f \\<prec>\\<^sub>p monomial c' v \\<Longrightarrow> f \\<prec>\\<^sub>p monomial c (t \\<oplus> v)\" for f"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<prec>\\<^sub>p monomial c' v \\<Longrightarrow>\n    f \\<prec>\\<^sub>p monomial c (t \\<oplus> v)", "proof (simp add: ord_strict_p_monomial_iff assms(1), elim conjE disjE, erule disjI1, rule disjI2)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<noteq> (0::'b); lt f \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> lt f \\<prec>\\<^sub>t t \\<oplus> v", "assume \"lt f \\<prec>\\<^sub>t v\""], ["proof (state)\nthis:\n  lt f \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<noteq> (0::'b); lt f \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> lt f \\<prec>\\<^sub>t t \\<oplus> v", "also"], ["proof (state)\nthis:\n  lt f \\<prec>\\<^sub>t v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<noteq> (0::'b); lt f \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> lt f \\<prec>\\<^sub>t t \\<oplus> v", "have \"... \\<preceq>\\<^sub>t t \\<oplus> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> v", "using local.zero_min"], ["proof (prove)\nusing this:\n  (0::'a) \\<preceq> ?t\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> v", "using splus_mono_left splus_zero"], ["proof (prove)\nusing this:\n  (0::'a) \\<preceq> ?t\n  ?s \\<preceq> ?t \\<Longrightarrow>\n  ?s \\<oplus> ?v \\<preceq>\\<^sub>t ?t \\<oplus> ?v\n  (0::'a) \\<oplus> ?v = ?v\n\ngoal (1 subgoal):\n 1. v \\<preceq>\\<^sub>t t \\<oplus> v", "by fastforce"], ["proof (state)\nthis:\n  v \\<preceq>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<noteq> (0::'b); lt f \\<prec>\\<^sub>t v\\<rbrakk>\n    \\<Longrightarrow> lt f \\<prec>\\<^sub>t t \\<oplus> v", "finally"], ["proof (chain)\npicking this:\n  lt f \\<prec>\\<^sub>t t \\<oplus> v", "show \"lt f \\<prec>\\<^sub>t t \\<oplus> v\""], ["proof (prove)\nusing this:\n  lt f \\<prec>\\<^sub>t t \\<oplus> v\n\ngoal (1 subgoal):\n 1. lt f \\<prec>\\<^sub>t t \\<oplus> v", "."], ["proof (state)\nthis:\n  lt f \\<prec>\\<^sub>t t \\<oplus> v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?f27 \\<prec>\\<^sub>p monomial c' v \\<Longrightarrow>\n  ?f27 \\<prec>\\<^sub>p monomial c (t \\<oplus> v)\n\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n     (monomial c (t \\<oplus> v)) (\\<lambda>a b. red F a b \\<or> red F b a) p\n     q", "from assms(2)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c' v)\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q", "show ?thesis"], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c' v)\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n     (monomial c (t \\<oplus> v)) (\\<lambda>a b. red F a b \\<or> red F b a) p\n     q", "proof (induct rule: cbelow_on_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<in> dgrad_p_set d m;\n     p \\<prec>\\<^sub>p monomial c' v\\<rbrakk>\n    \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                       (monomial c (t \\<oplus> v))\n                       (\\<lambda>a b. red F a b \\<or> red F b a) p p\n 2. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                 (monomial c' v) (\\<lambda>a b. red F a b \\<or> red F b a) p\n                 b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p monomial c' v;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n         (monomial c (t \\<oplus> v))\n         (\\<lambda>a b. red F a b \\<or> red F b a) p b\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monomial c (t \\<oplus> v))\n                          (\\<lambda>a b. red F a b \\<or> red F b a) p ca", "case base"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n  p \\<prec>\\<^sub>p monomial c' v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<in> dgrad_p_set d m;\n     p \\<prec>\\<^sub>p monomial c' v\\<rbrakk>\n    \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                       (monomial c (t \\<oplus> v))\n                       (\\<lambda>a b. red F a b \\<or> red F b a) p p\n 2. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                 (monomial c' v) (\\<lambda>a b. red F a b \\<or> red F b a) p\n                 b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p monomial c' v;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n         (monomial c (t \\<oplus> v))\n         (\\<lambda>a b. red F a b \\<or> red F b a) p b\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monomial c (t \\<oplus> v))\n                          (\\<lambda>a b. red F a b \\<or> red F b a) p ca", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n     (monomial c (t \\<oplus> v)) (\\<lambda>a b. red F a b \\<or> red F b a) p\n     p", "unfolding cbelow_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = p \\<and>\n    p \\<in> dgrad_p_set d m \\<and>\n    p \\<prec>\\<^sub>p monomial c (t \\<oplus> v) \\<or>\n    cbelow_on_1 (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n     (monomial c (t \\<oplus> v)) (\\<lambda>a b. red F a b \\<or> red F b a) p\n     p", "proof (rule disjI1, intro conjI, fact refl)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> dgrad_p_set d m\n 2. p \\<prec>\\<^sub>p monomial c (t \\<oplus> v)", "from assms(2)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c' v)\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q", "show \"p \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c' v)\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m", "by (rule cbelow_on_first_in)"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p monomial c (t \\<oplus> v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p monomial c (t \\<oplus> v)", "from assms(2)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c' v)\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q", "have \"p \\<prec>\\<^sub>p monomial c' v\""], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c' v)\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p monomial c' v", "by (rule cbelow_on_first_below)"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p monomial c' v\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p monomial c (t \\<oplus> v)", "thus \"p \\<prec>\\<^sub>p monomial c (t \\<oplus> v)\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p monomial c' v\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p monomial c (t \\<oplus> v)", "by (rule *)"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p monomial c (t \\<oplus> v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c (t \\<oplus> v))\n   (\\<lambda>a b. red F a b \\<or> red F b a) p p\n\ngoal (1 subgoal):\n 1. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                 (monomial c' v) (\\<lambda>a b. red F a b \\<or> red F b a) p\n                 b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p monomial c' v;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n         (monomial c (t \\<oplus> v))\n         (\\<lambda>a b. red F a b \\<or> red F b a) p b\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monomial c (t \\<oplus> v))\n                          (\\<lambda>a b. red F a b \\<or> red F b a) p ca", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                 (monomial c' v) (\\<lambda>a b. red F a b \\<or> red F b a) p\n                 b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p monomial c' v;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n         (monomial c (t \\<oplus> v))\n         (\\<lambda>a b. red F a b \\<or> red F b a) p b\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monomial c (t \\<oplus> v))\n                          (\\<lambda>a b. red F a b \\<or> red F b a) p ca", "case (step q' q)"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c' v)\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'\n  red F q' q \\<or> red F q q'\n  q \\<in> dgrad_p_set d m\n  q \\<prec>\\<^sub>p monomial c' v\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c (t \\<oplus> v))\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'\n\ngoal (1 subgoal):\n 1. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                 (monomial c' v) (\\<lambda>a b. red F a b \\<or> red F b a) p\n                 b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p monomial c' v;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n         (monomial c (t \\<oplus> v))\n         (\\<lambda>a b. red F a b \\<or> red F b a) p b\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monomial c (t \\<oplus> v))\n                          (\\<lambda>a b. red F a b \\<or> red F b a) p ca", "let ?R = \"\\<lambda>a b. red F a b \\<or> red F b a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b ca.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                 (monomial c' v) (\\<lambda>a b. red F a b \\<or> red F b a) p\n                 b;\n        red F b ca \\<or> red F ca b; ca \\<in> dgrad_p_set d m;\n        ca \\<prec>\\<^sub>p monomial c' v;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n         (monomial c (t \\<oplus> v))\n         (\\<lambda>a b. red F a b \\<or> red F b a) p b\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (monomial c (t \\<oplus> v))\n                          (\\<lambda>a b. red F a b \\<or> red F b a) p ca", "from step(5) step(3) step(2)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c (t \\<oplus> v))\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'\n  q \\<in> dgrad_p_set d m\n  red F q' q \\<or> red F q q'", "show ?case"], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c (t \\<oplus> v))\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'\n  q \\<in> dgrad_p_set d m\n  red F q' q \\<or> red F q q'\n\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n     (monomial c (t \\<oplus> v)) (\\<lambda>a b. red F a b \\<or> red F b a) p\n     q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p monomial c (t \\<oplus> v)", "from step(4)"], ["proof (chain)\npicking this:\n  q \\<prec>\\<^sub>p monomial c' v", "show \"q \\<prec>\\<^sub>p monomial c (t \\<oplus> v)\""], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p monomial c' v\n\ngoal (1 subgoal):\n 1. q \\<prec>\\<^sub>p monomial c (t \\<oplus> v)", "by (rule *)"], ["proof (state)\nthis:\n  q \\<prec>\\<^sub>p monomial c (t \\<oplus> v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c (t \\<oplus> v))\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (monomial c (t \\<oplus> v))\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cbelow_on_plus:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> dgrad_p_set d m\" and \"r \\<in> dgrad_p_set d m\"\n    and \"keys r \\<inter> keys z = {}\"\n    and \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z (\\<lambda>a b. red F a b \\<or> red F b a) p q\"\n  shows \"cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r) (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (q + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (q + r)", "using assms(5)"], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (q + r)", "proof (induct rule: cbelow_on_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<in> dgrad_p_set d m; p \\<prec>\\<^sub>p z\\<rbrakk>\n    \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n                       (\\<lambda>a b. red F a b \\<or> red F b a) (p + r)\n                       (p + r)\n 2. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "case base"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n  p \\<prec>\\<^sub>p z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<in> dgrad_p_set d m; p \\<prec>\\<^sub>p z\\<rbrakk>\n    \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n                       (\\<lambda>a b. red F a b \\<or> red F b a) (p + r)\n                       (p + r)\n 2. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (p + r)", "unfolding cbelow_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p + r = p + r \\<and>\n    p + r \\<in> dgrad_p_set d m \\<and> p + r \\<prec>\\<^sub>p z + r \\<or>\n    cbelow_on_1 (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (p + r)", "proof (rule disjI1, intro conjI, fact refl)"], ["proof (state)\ngoal (2 subgoals):\n 1. p + r \\<in> dgrad_p_set d m\n 2. p + r \\<prec>\\<^sub>p z + r", "from assms(5)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q", "have \"p \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal (1 subgoal):\n 1. p \\<in> dgrad_p_set d m", "by (rule cbelow_on_first_in)"], ["proof (state)\nthis:\n  p \\<in> dgrad_p_set d m\n\ngoal (2 subgoals):\n 1. p + r \\<in> dgrad_p_set d m\n 2. p + r \\<prec>\\<^sub>p z + r", "from this assms(3)"], ["proof (chain)\npicking this:\n  p \\<in> dgrad_p_set d m\n  r \\<in> dgrad_p_set d m", "show \"p + r \\<in> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  p \\<in> dgrad_p_set d m\n  r \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p + r \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_plus)"], ["proof (state)\nthis:\n  p + r \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. p + r \\<prec>\\<^sub>p z + r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p + r \\<prec>\\<^sub>p z + r", "from assms(5)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q", "have \"p \\<prec>\\<^sub>p z\""], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q\n\ngoal (1 subgoal):\n 1. p \\<prec>\\<^sub>p z", "by (rule cbelow_on_first_below)"], ["proof (state)\nthis:\n  p \\<prec>\\<^sub>p z\n\ngoal (1 subgoal):\n 1. p + r \\<prec>\\<^sub>p z + r", "from this assms(4)"], ["proof (chain)\npicking this:\n  p \\<prec>\\<^sub>p z\n  keys r \\<inter> keys z = {}", "show \"p + r \\<prec>\\<^sub>p z + r\""], ["proof (prove)\nusing this:\n  p \\<prec>\\<^sub>p z\n  keys r \\<inter> keys z = {}\n\ngoal (1 subgoal):\n 1. p + r \\<prec>\\<^sub>p z + r", "by (rule ord_strict_p_plus)"], ["proof (state)\nthis:\n  p + r \\<prec>\\<^sub>p z + r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (p + r)\n\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "case (step q' q)"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'\n  red F q' q \\<or> red F q q'\n  q \\<in> dgrad_p_set d m\n  q \\<prec>\\<^sub>p z\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (q' + r)\n\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "let ?RS = \"\\<lambda>a b. red F a b \\<or> red F b a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "let ?A = \"dgrad_p_set d m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "let ?R = \"red F\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "let ?ord = \"(\\<prec>\\<^sub>p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "from assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d", "have ro: \"relation_order ?R ?ord ?A\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. relation_order (red F) (\\<prec>\\<^sub>p) (dgrad_p_set d m)", "by (rule is_relation_order_red)"], ["proof (state)\nthis:\n  relation_order (red F) (\\<prec>\\<^sub>p) (dgrad_p_set d m)\n\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "have dw: \"relation.dw_closed ?R ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relation.dw_closed (red F) (dgrad_p_set d m)", "by (rule relation.dw_closedI, rule dgrad_p_set_closed_red, rule assms(1), rule assms(2))"], ["proof (state)\nthis:\n  relation.dw_closed (red F) (dgrad_p_set d m)\n\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "from step(2)"], ["proof (chain)\npicking this:\n  red F q' q \\<or> red F q q'", "have \"relation.cs (red F) (q' + r) (q + r)\""], ["proof (prove)\nusing this:\n  red F q' q \\<or> red F q q'\n\ngoal (1 subgoal):\n 1. relation.cs (red F) (q' + r) (q + r)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. red F q' q \\<Longrightarrow> relation.cs (red F) (q' + r) (q + r)\n 2. red F q q' \\<Longrightarrow> relation.cs (red F) (q' + r) (q + r)", "assume \"red F q q'\""], ["proof (state)\nthis:\n  red F q q'\n\ngoal (2 subgoals):\n 1. red F q' q \\<Longrightarrow> relation.cs (red F) (q' + r) (q + r)\n 2. red F q q' \\<Longrightarrow> relation.cs (red F) (q' + r) (q + r)", "hence \"relation.cs (red F) (q + r) (q' + r)\""], ["proof (prove)\nusing this:\n  red F q q'\n\ngoal (1 subgoal):\n 1. relation.cs (red F) (q + r) (q' + r)", "by (rule red_plus_cs)"], ["proof (state)\nthis:\n  relation.cs (red F) (q + r) (q' + r)\n\ngoal (2 subgoals):\n 1. red F q' q \\<Longrightarrow> relation.cs (red F) (q' + r) (q + r)\n 2. red F q q' \\<Longrightarrow> relation.cs (red F) (q' + r) (q + r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  relation.cs (red F) (q + r) (q' + r)\n\ngoal (1 subgoal):\n 1. relation.cs (red F) (q' + r) (q + r)", "by (rule relation.cs_sym)"], ["proof (state)\nthis:\n  relation.cs (red F) (q' + r) (q + r)\n\ngoal (1 subgoal):\n 1. red F q' q \\<Longrightarrow> relation.cs (red F) (q' + r) (q + r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. red F q' q \\<Longrightarrow> relation.cs (red F) (q' + r) (q + r)", "assume \"red F q' q\""], ["proof (state)\nthis:\n  red F q' q\n\ngoal (1 subgoal):\n 1. red F q' q \\<Longrightarrow> relation.cs (red F) (q' + r) (q + r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  red F q' q\n\ngoal (1 subgoal):\n 1. relation.cs (red F) (q' + r) (q + r)", "by (rule red_plus_cs)"], ["proof (state)\nthis:\n  relation.cs (red F) (q' + r) (q + r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  relation.cs (red F) (q' + r) (q + r)\n\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "with ro dw"], ["proof (chain)\npicking this:\n  relation_order (red F) (\\<prec>\\<^sub>p) (dgrad_p_set d m)\n  relation.dw_closed (red F) (dgrad_p_set d m)\n  relation.cs (red F) (q' + r) (q + r)", "have \"cbelow_on ?A ?ord (z + r) ?RS (q' + r) (q + r)\""], ["proof (prove)\nusing this:\n  relation_order (red F) (\\<prec>\\<^sub>p) (dgrad_p_set d m)\n  relation.dw_closed (red F) (dgrad_p_set d m)\n  relation.cs (red F) (q' + r) (q + r)\n\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (q' + r) (q + r)", "proof (rule relation_order.cs_implies_cbelow_on)"], ["proof (state)\ngoal (4 subgoals):\n 1. q' + r \\<in> dgrad_p_set d m\n 2. q + r \\<in> dgrad_p_set d m\n 3. q' + r \\<prec>\\<^sub>p z + r\n 4. q + r \\<prec>\\<^sub>p z + r", "from step(1)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'", "have \"q' \\<in> ?A\""], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'\n\ngoal (1 subgoal):\n 1. q' \\<in> dgrad_p_set d m", "by (rule cbelow_on_second_in)"], ["proof (state)\nthis:\n  q' \\<in> dgrad_p_set d m\n\ngoal (4 subgoals):\n 1. q' + r \\<in> dgrad_p_set d m\n 2. q + r \\<in> dgrad_p_set d m\n 3. q' + r \\<prec>\\<^sub>p z + r\n 4. q + r \\<prec>\\<^sub>p z + r", "from this assms(3)"], ["proof (chain)\npicking this:\n  q' \\<in> dgrad_p_set d m\n  r \\<in> dgrad_p_set d m", "show \"q' + r \\<in> ?A\""], ["proof (prove)\nusing this:\n  q' \\<in> dgrad_p_set d m\n  r \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. q' + r \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_plus)"], ["proof (state)\nthis:\n  q' + r \\<in> dgrad_p_set d m\n\ngoal (3 subgoals):\n 1. q + r \\<in> dgrad_p_set d m\n 2. q' + r \\<prec>\\<^sub>p z + r\n 3. q + r \\<prec>\\<^sub>p z + r", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. q + r \\<in> dgrad_p_set d m\n 2. q' + r \\<prec>\\<^sub>p z + r\n 3. q + r \\<prec>\\<^sub>p z + r", "from step(3) assms(3)"], ["proof (chain)\npicking this:\n  q \\<in> dgrad_p_set d m\n  r \\<in> dgrad_p_set d m", "show \"q + r \\<in> ?A\""], ["proof (prove)\nusing this:\n  q \\<in> dgrad_p_set d m\n  r \\<in> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. q + r \\<in> dgrad_p_set d m", "by (rule dgrad_p_set_closed_plus)"], ["proof (state)\nthis:\n  q + r \\<in> dgrad_p_set d m\n\ngoal (2 subgoals):\n 1. q' + r \\<prec>\\<^sub>p z + r\n 2. q + r \\<prec>\\<^sub>p z + r", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. q' + r \\<prec>\\<^sub>p z + r\n 2. q + r \\<prec>\\<^sub>p z + r", "from step(1)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'", "have \"q' \\<prec>\\<^sub>p z\""], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n   (\\<lambda>a b. red F a b \\<or> red F b a) p q'\n\ngoal (1 subgoal):\n 1. q' \\<prec>\\<^sub>p z", "by (rule cbelow_on_second_below)"], ["proof (state)\nthis:\n  q' \\<prec>\\<^sub>p z\n\ngoal (2 subgoals):\n 1. q' + r \\<prec>\\<^sub>p z + r\n 2. q + r \\<prec>\\<^sub>p z + r", "from this assms(4)"], ["proof (chain)\npicking this:\n  q' \\<prec>\\<^sub>p z\n  keys r \\<inter> keys z = {}", "show \"q' + r \\<prec>\\<^sub>p z + r\""], ["proof (prove)\nusing this:\n  q' \\<prec>\\<^sub>p z\n  keys r \\<inter> keys z = {}\n\ngoal (1 subgoal):\n 1. q' + r \\<prec>\\<^sub>p z + r", "by (rule ord_strict_p_plus)"], ["proof (state)\nthis:\n  q' + r \\<prec>\\<^sub>p z + r\n\ngoal (1 subgoal):\n 1. q + r \\<prec>\\<^sub>p z + r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q + r \\<prec>\\<^sub>p z + r", "from step(4) assms(4)"], ["proof (chain)\npicking this:\n  q \\<prec>\\<^sub>p z\n  keys r \\<inter> keys z = {}", "show \"q + r \\<prec>\\<^sub>p z + r\""], ["proof (prove)\nusing this:\n  q \\<prec>\\<^sub>p z\n  keys r \\<inter> keys z = {}\n\ngoal (1 subgoal):\n 1. q + r \\<prec>\\<^sub>p z + r", "by (rule ord_strict_p_plus)"], ["proof (state)\nthis:\n  q + r \\<prec>\\<^sub>p z + r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (q' + r) (q + r)\n\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) z\n                 (\\<lambda>a b. red F a b \\<or> red F b a) p b;\n        red F b c \\<or> red F c b; c \\<in> dgrad_p_set d m;\n        c \\<prec>\\<^sub>p z;\n        cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n         (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (b + r)\\<rbrakk>\n       \\<Longrightarrow> cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p)\n                          (z + r) (\\<lambda>a b. red F a b \\<or> red F b a)\n                          (p + r) (c + r)", "with step(5)"], ["proof (chain)\npicking this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (q' + r)\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (q' + r) (q + r)", "show ?case"], ["proof (prove)\nusing this:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (q' + r)\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (q' + r) (q + r)\n\ngoal (1 subgoal):\n 1. cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n     (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (q + r)", "by (rule cbelow_on_transitive)"], ["proof (state)\nthis:\n  cbelow_on (dgrad_p_set d m) (\\<prec>\\<^sub>p) (z + r)\n   (\\<lambda>a b. red F a b \\<or> red F b a) (p + r) (q + r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_full_pmdlI_lt_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"B \\<subseteq> dgrad_p_set d m\"\n  assumes \"\\<And>k. k \\<in> component_of_term ` Keys (B::('t \\<Rightarrow>\\<^sub>0 'b::field) set) \\<Longrightarrow>\n            (\\<exists>b\\<in>B. b \\<noteq> 0 \\<and> component_of_term (lt b) = k \\<and> lp b = 0)\"\n  shows \"is_full_pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_full_pmdl B", "proof (rule is_full_pmdlI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       component_of_term ` keys p\n       \\<subseteq> component_of_term ` Keys B \\<Longrightarrow>\n       p \\<in> pmdl B", "fix p::\"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       component_of_term ` keys p\n       \\<subseteq> component_of_term ` Keys B \\<Longrightarrow>\n       p \\<in> pmdl B", "from assms(1, 2)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  B \\<subseteq> dgrad_p_set d m", "have \"wfP (red B)\\<inverse>\\<inverse>\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  B \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. wfP (red B)\\<inverse>\\<inverse>", "by (rule red_wf_dgrad_p_set)"], ["proof (state)\nthis:\n  wfP (red B)\\<inverse>\\<inverse>\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       component_of_term ` keys p\n       \\<subseteq> component_of_term ` Keys B \\<Longrightarrow>\n       p \\<in> pmdl B", "moreover"], ["proof (state)\nthis:\n  wfP (red B)\\<inverse>\\<inverse>\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       component_of_term ` keys p\n       \\<subseteq> component_of_term ` Keys B \\<Longrightarrow>\n       p \\<in> pmdl B", "assume \"component_of_term ` keys p \\<subseteq> component_of_term ` Keys B\""], ["proof (state)\nthis:\n  component_of_term ` keys p \\<subseteq> component_of_term ` Keys B\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       component_of_term ` keys p\n       \\<subseteq> component_of_term ` Keys B \\<Longrightarrow>\n       p \\<in> pmdl B", "ultimately"], ["proof (chain)\npicking this:\n  wfP (red B)\\<inverse>\\<inverse>\n  component_of_term ` keys p \\<subseteq> component_of_term ` Keys B", "show \"p \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  wfP (red B)\\<inverse>\\<inverse>\n  component_of_term ` keys p \\<subseteq> component_of_term ` Keys B\n\ngoal (1 subgoal):\n 1. p \\<in> pmdl B", "proof (induct p)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(red B)\\<inverse>\\<inverse> y x;\n                    component_of_term ` keys y\n                    \\<subseteq> component_of_term ` Keys B\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> pmdl B;\n        component_of_term ` keys x\n        \\<subseteq> component_of_term ` Keys B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> pmdl B", "case (less p)"], ["proof (state)\nthis:\n  \\<lbrakk>(red B)\\<inverse>\\<inverse> ?y27 p;\n   component_of_term ` keys ?y27\n   \\<subseteq> component_of_term ` Keys B\\<rbrakk>\n  \\<Longrightarrow> ?y27 \\<in> pmdl B\n  component_of_term ` keys p \\<subseteq> component_of_term ` Keys B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(red B)\\<inverse>\\<inverse> y x;\n                    component_of_term ` keys y\n                    \\<subseteq> component_of_term ` Keys B\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> pmdl B;\n        component_of_term ` keys x\n        \\<subseteq> component_of_term ` Keys B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> pmdl B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> pmdl B", "proof (cases \"p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p \\<in> pmdl B\n 2. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "case True"], ["proof (state)\nthis:\n  p = 0\n\ngoal (2 subgoals):\n 1. p = 0 \\<Longrightarrow> p \\<in> pmdl B\n 2. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> pmdl B", "by (simp add: True pmdl.span_zero)"], ["proof (state)\nthis:\n  p \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "case False"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "hence \"lt p \\<in> keys p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lt p \\<in> keys p", "by (rule lt_in_keys)"], ["proof (state)\nthis:\n  lt p \\<in> keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "hence \"component_of_term (lt p) \\<in> component_of_term ` keys p\""], ["proof (prove)\nusing this:\n  lt p \\<in> keys p\n\ngoal (1 subgoal):\n 1. component_of_term (lt p) \\<in> component_of_term ` keys p", "by simp"], ["proof (state)\nthis:\n  component_of_term (lt p) \\<in> component_of_term ` keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "also"], ["proof (state)\nthis:\n  component_of_term (lt p) \\<in> component_of_term ` keys p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "have \"... \\<subseteq> component_of_term ` Keys B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` keys p \\<subseteq> component_of_term ` Keys B", "by fact"], ["proof (state)\nthis:\n  component_of_term ` keys p \\<subseteq> component_of_term ` Keys B\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "finally"], ["proof (chain)\npicking this:\n  component_of_term (lt p) \\<in> component_of_term ` Keys B", "have \"\\<exists>b\\<in>B. b \\<noteq> 0 \\<and> component_of_term (lt b) = component_of_term (lt p) \\<and> lp b = 0\""], ["proof (prove)\nusing this:\n  component_of_term (lt p) \\<in> component_of_term ` Keys B\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>B.\n       b \\<noteq> 0 \\<and>\n       component_of_term (lt b) = component_of_term (lt p) \\<and>\n       lp b = (0::'a)", "by (rule assms(3))"], ["proof (state)\nthis:\n  \\<exists>b\\<in>B.\n     b \\<noteq> 0 \\<and>\n     component_of_term (lt b) = component_of_term (lt p) \\<and>\n     lp b = (0::'a)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "then"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>B.\n     b \\<noteq> 0 \\<and>\n     component_of_term (lt b) = component_of_term (lt p) \\<and>\n     lp b = (0::'a)", "obtain b where \"b \\<in> B\" and \"b \\<noteq> 0\" and \"component_of_term (lt b) = component_of_term (lt p)\"\n        and \"lp b = 0\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>B.\n     b \\<noteq> 0 \\<and>\n     component_of_term (lt b) = component_of_term (lt p) \\<and>\n     lp b = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; b \\<noteq> 0;\n         component_of_term (lt b) = component_of_term (lt p);\n         lp b = (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b \\<in> B\n  b \\<noteq> 0\n  component_of_term (lt b) = component_of_term (lt p)\n  lp b = (0::'a)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "from this(3, 4)"], ["proof (chain)\npicking this:\n  component_of_term (lt b) = component_of_term (lt p)\n  lp b = (0::'a)", "have eq: \"lp p \\<oplus> lt b = lt p\""], ["proof (prove)\nusing this:\n  component_of_term (lt b) = component_of_term (lt p)\n  lp b = (0::'a)\n\ngoal (1 subgoal):\n 1. lp p \\<oplus> lt b = lt p", "by (simp add: splus_def term_of_pair_pair)"], ["proof (state)\nthis:\n  lp p \\<oplus> lt b = lt p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "define q where \"q = p - monom_mult (lookup p ((lp p) \\<oplus> lt b) / lc b) (lp p) b\""], ["proof (state)\nthis:\n  q = p - monom_mult (lookup p (lp p \\<oplus> lt b) / lc b) (lp p) b\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "have \"red_single p q b (lp p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p q b (lp p)", "by (auto simp: red_single_def \\<open>b \\<noteq> 0\\<close> q_def eq \\<open>lt p \\<in> keys p\\<close>)"], ["proof (state)\nthis:\n  red_single p q b (lp p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "with \\<open>b \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> B\n  red_single p q b (lp p)", "have \"red B p q\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  red_single p q b (lp p)\n\ngoal (1 subgoal):\n 1. red B p q", "by (rule red_setI)"], ["proof (state)\nthis:\n  red B p q\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "hence \"(red B)\\<inverse>\\<inverse> q p\""], ["proof (prove)\nusing this:\n  red B p q\n\ngoal (1 subgoal):\n 1. (red B)\\<inverse>\\<inverse> q p", ".."], ["proof (state)\nthis:\n  (red B)\\<inverse>\\<inverse> q p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "moreover"], ["proof (state)\nthis:\n  (red B)\\<inverse>\\<inverse> q p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "have \"component_of_term ` keys q \\<subseteq> component_of_term ` Keys B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_of_term ` keys q \\<subseteq> component_of_term ` Keys B", "proof (rule subset_trans)"], ["proof (state)\ngoal (2 subgoals):\n 1. component_of_term ` keys q \\<subseteq> ?B\n 2. ?B \\<subseteq> component_of_term ` Keys B", "from \\<open>red B p q\\<close>"], ["proof (chain)\npicking this:\n  red B p q", "show \"component_of_term ` keys q \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys B\""], ["proof (prove)\nusing this:\n  red B p q\n\ngoal (1 subgoal):\n 1. component_of_term ` keys q\n    \\<subseteq> component_of_term ` keys p \\<union>\n                component_of_term ` Keys B", "by (rule components_red_subset)"], ["proof (state)\nthis:\n  component_of_term ` keys q\n  \\<subseteq> component_of_term ` keys p \\<union> component_of_term ` Keys B\n\ngoal (1 subgoal):\n 1. component_of_term ` keys p \\<union> component_of_term ` Keys B\n    \\<subseteq> component_of_term ` Keys B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. component_of_term ` keys p \\<union> component_of_term ` Keys B\n    \\<subseteq> component_of_term ` Keys B", "from less(2)"], ["proof (chain)\npicking this:\n  component_of_term ` keys p \\<subseteq> component_of_term ` Keys B", "show \"component_of_term ` keys p \\<union> component_of_term ` Keys B \\<subseteq> component_of_term ` Keys B\""], ["proof (prove)\nusing this:\n  component_of_term ` keys p \\<subseteq> component_of_term ` Keys B\n\ngoal (1 subgoal):\n 1. component_of_term ` keys p \\<union> component_of_term ` Keys B\n    \\<subseteq> component_of_term ` Keys B", "by blast"], ["proof (state)\nthis:\n  component_of_term ` keys p \\<union> component_of_term ` Keys B\n  \\<subseteq> component_of_term ` Keys B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  component_of_term ` keys q \\<subseteq> component_of_term ` Keys B\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "ultimately"], ["proof (chain)\npicking this:\n  (red B)\\<inverse>\\<inverse> q p\n  component_of_term ` keys q \\<subseteq> component_of_term ` Keys B", "have \"q \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  (red B)\\<inverse>\\<inverse> q p\n  component_of_term ` keys q \\<subseteq> component_of_term ` Keys B\n\ngoal (1 subgoal):\n 1. q \\<in> pmdl B", "by (rule less.hyps)"], ["proof (state)\nthis:\n  q \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "have \"q + monom_mult (lookup p ((lp p) \\<oplus> lt b) / lc b) (lp p) b \\<in> pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q + monom_mult (lookup p (lp p \\<oplus> lt b) / lc b) (lp p) b\n    \\<in> pmdl B", "by (rule pmdl.span_add, fact, rule pmdl_closed_monom_mult, rule pmdl.span_base, fact)"], ["proof (state)\nthis:\n  q + monom_mult (lookup p (lp p \\<oplus> lt b) / lc b) (lp p) b\n  \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow> p \\<in> pmdl B", "thus ?thesis"], ["proof (prove)\nusing this:\n  q + monom_mult (lookup p (lp p \\<oplus> lt b) / lc b) (lp p) b\n  \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. p \\<in> pmdl B", "by (simp add: q_def)"], ["proof (state)\nthis:\n  p \\<in> pmdl B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in> pmdl B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in> pmdl B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas is_full_pmdlI_lt_finite = is_full_pmdlI_lt_dgrad_p_set[OF dickson_grading_dgrad_dummy dgrad_p_set_exhaust_expl]"], ["", "end"], ["", "(* gd_term *)"], ["", "subsection \\<open>Algorithms\\<close>"], ["", "subsubsection \\<open>Function \\<open>find_adds\\<close>\\<close>"], ["", "context ordered_term\nbegin"], ["", "primrec find_adds :: \"('t \\<Rightarrow>\\<^sub>0 'b) list \\<Rightarrow> 't \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::zero) option\" where\n  \"find_adds [] _ = None\"|\n  \"find_adds (f # fs) u = (if f \\<noteq> 0 \\<and> lt f adds\\<^sub>t u then Some f else find_adds fs u)\""], ["", "lemma find_adds_SomeD1:\n  assumes \"find_adds fs u = Some f\"\n  shows \"f \\<in> set fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> set fs", "using assms"], ["proof (prove)\nusing this:\n  find_adds fs u = Some f\n\ngoal (1 subgoal):\n 1. f \\<in> set fs", "by (induct fs, simp, simp split: if_splits)"], ["", "lemma find_adds_SomeD2:\n  assumes \"find_adds fs u = Some f\"\n  shows \"f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  find_adds fs u = Some f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by (induct fs, simp, simp split: if_splits)"], ["", "lemma find_adds_SomeD3:\n  assumes \"find_adds fs u = Some f\"\n  shows \"lt f adds\\<^sub>t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt f adds\\<^sub>t u", "using assms"], ["proof (prove)\nusing this:\n  find_adds fs u = Some f\n\ngoal (1 subgoal):\n 1. lt f adds\\<^sub>t u", "by (induct fs, simp, simp split: if_splits)"], ["", "lemma find_adds_NoneE:\n  assumes \"find_adds fs u = None\" and \"f \\<in> set fs\"\n  assumes \"f = 0 \\<Longrightarrow> thesis\" and \"f \\<noteq> 0 \\<Longrightarrow> \\<not> lt f adds\\<^sub>t u \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  find_adds fs u = None\n  f \\<in> set fs\n  f = 0 \\<Longrightarrow> thesis\n  \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "proof (induct fs arbitrary: thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>find_adds [] u = None; f \\<in> set [];\n        f = 0 \\<Longrightarrow> thesis;\n        \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a fs thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>find_adds fs u = None; f \\<in> set fs;\n                    f = 0 \\<Longrightarrow> thesis;\n                    \\<lbrakk>f \\<noteq> 0;\n                     \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n                    \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        find_adds (a # fs) u = None; f \\<in> set (a # fs);\n        f = 0 \\<Longrightarrow> thesis;\n        \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  find_adds [] u = None\n  f \\<in> set []\n  f = 0 \\<Longrightarrow> thesis\n  \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>find_adds [] u = None; f \\<in> set [];\n        f = 0 \\<Longrightarrow> thesis;\n        \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a fs thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>find_adds fs u = None; f \\<in> set fs;\n                    f = 0 \\<Longrightarrow> thesis;\n                    \\<lbrakk>f \\<noteq> 0;\n                     \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n                    \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        find_adds (a # fs) u = None; f \\<in> set (a # fs);\n        f = 0 \\<Longrightarrow> thesis;\n        \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Nil(2)"], ["proof (chain)\npicking this:\n  f \\<in> set []", "show ?case"], ["proof (prove)\nusing this:\n  f \\<in> set []\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a fs thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>find_adds fs u = None; f \\<in> set fs;\n                    f = 0 \\<Longrightarrow> thesis;\n                    \\<lbrakk>f \\<noteq> 0;\n                     \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n                    \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        find_adds (a # fs) u = None; f \\<in> set (a # fs);\n        f = 0 \\<Longrightarrow> thesis;\n        \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a fs thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>find_adds fs u = None; f \\<in> set fs;\n                    f = 0 \\<Longrightarrow> thesis;\n                    \\<lbrakk>f \\<noteq> 0;\n                     \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n                    \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        find_adds (a # fs) u = None; f \\<in> set (a # fs);\n        f = 0 \\<Longrightarrow> thesis;\n        \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons a fs)"], ["proof (state)\nthis:\n  \\<lbrakk>find_adds fs u = None; f \\<in> set fs;\n   f = 0 \\<Longrightarrow> ?thesis28;\n   \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n   \\<Longrightarrow> ?thesis28\\<rbrakk>\n  \\<Longrightarrow> ?thesis28\n  find_adds (a # fs) u = None\n  f \\<in> set (a # fs)\n  f = 0 \\<Longrightarrow> thesis\n  \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a fs thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>find_adds fs u = None; f \\<in> set fs;\n                    f = 0 \\<Longrightarrow> thesis;\n                    \\<lbrakk>f \\<noteq> 0;\n                     \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n                    \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        find_adds (a # fs) u = None; f \\<in> set (a # fs);\n        f = 0 \\<Longrightarrow> thesis;\n        \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons(2)"], ["proof (chain)\npicking this:\n  find_adds (a # fs) u = None", "have 1: \"a = 0 \\<or> \\<not> lt a adds\\<^sub>t u\" and 2: \"find_adds fs u = None\""], ["proof (prove)\nusing this:\n  find_adds (a # fs) u = None\n\ngoal (1 subgoal):\n 1. a = 0 \\<or> \\<not> lt a adds\\<^sub>t u &&& find_adds fs u = None", "by (simp_all split: if_splits)"], ["proof (state)\nthis:\n  a = 0 \\<or> \\<not> lt a adds\\<^sub>t u\n  find_adds fs u = None\n\ngoal (1 subgoal):\n 1. \\<And>a fs thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>find_adds fs u = None; f \\<in> set fs;\n                    f = 0 \\<Longrightarrow> thesis;\n                    \\<lbrakk>f \\<noteq> 0;\n                     \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n                    \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        find_adds (a # fs) u = None; f \\<in> set (a # fs);\n        f = 0 \\<Longrightarrow> thesis;\n        \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons(3)"], ["proof (chain)\npicking this:\n  f \\<in> set (a # fs)", "have \"f = a \\<or> f \\<in> set fs\""], ["proof (prove)\nusing this:\n  f \\<in> set (a # fs)\n\ngoal (1 subgoal):\n 1. f = a \\<or> f \\<in> set fs", "by simp"], ["proof (state)\nthis:\n  f = a \\<or> f \\<in> set fs\n\ngoal (1 subgoal):\n 1. \\<And>a fs thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>find_adds fs u = None; f \\<in> set fs;\n                    f = 0 \\<Longrightarrow> thesis;\n                    \\<lbrakk>f \\<noteq> 0;\n                     \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n                    \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        find_adds (a # fs) u = None; f \\<in> set (a # fs);\n        f = 0 \\<Longrightarrow> thesis;\n        \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  f = a \\<or> f \\<in> set fs\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f = a \\<Longrightarrow> thesis\n 2. f \\<in> set fs \\<Longrightarrow> thesis", "assume \"f = a\""], ["proof (state)\nthis:\n  f = a\n\ngoal (2 subgoals):\n 1. f = a \\<Longrightarrow> thesis\n 2. f \\<in> set fs \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"a = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow> thesis\n 2. a \\<noteq> 0 \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  a = 0\n\ngoal (2 subgoals):\n 1. a = 0 \\<Longrightarrow> thesis\n 2. a \\<noteq> 0 \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(4), simp add: \\<open>f = a\\<close> True)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow> thesis", "with 1"], ["proof (chain)\npicking this:\n  a = 0 \\<or> \\<not> lt a adds\\<^sub>t u\n  a \\<noteq> 0", "have *: \"\\<not> lt a adds\\<^sub>t u\""], ["proof (prove)\nusing this:\n  a = 0 \\<or> \\<not> lt a adds\\<^sub>t u\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> lt a adds\\<^sub>t u", "by simp"], ["proof (state)\nthis:\n  \\<not> lt a adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(5), simp_all add: \\<open>f = a\\<close> * False)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. f \\<in> set fs \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> set fs \\<Longrightarrow> thesis", "assume \"f \\<in> set fs\""], ["proof (state)\nthis:\n  f \\<in> set fs\n\ngoal (1 subgoal):\n 1. f \\<in> set fs \\<Longrightarrow> thesis", "with 2"], ["proof (chain)\npicking this:\n  find_adds fs u = None\n  f \\<in> set fs", "show ?thesis"], ["proof (prove)\nusing this:\n  find_adds fs u = None\n  f \\<in> set fs\n\ngoal (1 subgoal):\n 1. thesis", "proof (rule Cons(1))"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> thesis\n 2. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"f = 0\""], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> thesis\n 2. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = 0\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(4))"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"f \\<noteq> 0\" and \"\\<not> lt f adds\\<^sub>t u\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n  \\<not> lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t u\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  \\<not> lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. thesis", "by (rule Cons(5))"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_adds_SomeD_red_single:\n  assumes \"p \\<noteq> 0\" and \"find_adds fs (lt p) = Some f\"\n  shows \"red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) f (lp p - lp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "let ?f = \"monom_mult (lc p / lc f) (lp p - lp f) f\""], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "from assms(2)"], ["proof (chain)\npicking this:\n  find_adds fs (lt p) = Some f", "have \"f \\<noteq> 0\" and \"lt f adds\\<^sub>t lt p\""], ["proof (prove)\nusing this:\n  find_adds fs (lt p) = Some f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 &&& lt f adds\\<^sub>t lt p", "by (rule find_adds_SomeD2, rule find_adds_SomeD3)"], ["proof (state)\nthis:\n  f \\<noteq> 0\n  lt f adds\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "from this(2)"], ["proof (chain)\npicking this:\n  lt f adds\\<^sub>t lt p", "have eq: \"(lp p - lp f) \\<oplus> lt f = lt p\""], ["proof (prove)\nusing this:\n  lt f adds\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. (lp p - lp f) \\<oplus> lt f = lt p", "by (simp add: adds_minus_splus adds_term_def term_of_pair_pair)"], ["proof (state)\nthis:\n  (lp p - lp f) \\<oplus> lt f = lt p\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "from assms(1)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"lc p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc p \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "moreover"], ["proof (state)\nthis:\n  lc p \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "from \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "have \"lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc f \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "ultimately"], ["proof (chain)\npicking this:\n  lc p \\<noteq> (0::'b)\n  lc f \\<noteq> (0::'b)", "have \"lc p / lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc p \\<noteq> (0::'b)\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lc p / lc f \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  lc p / lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "hence \"lt ?f = (lp p - lp f) \\<oplus> lt f\""], ["proof (prove)\nusing this:\n  lc p / lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt (monom_mult (lc p / lc f) (lp p - lp f) f) =\n    (lp p - lp f) \\<oplus> lt f", "by (simp add: lt_monom_mult \\<open>f \\<noteq> 0\\<close>)"], ["proof (state)\nthis:\n  lt (monom_mult (lc p / lc f) (lp p - lp f) f) =\n  (lp p - lp f) \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "hence lt_f: \"lt ?f = lt p\""], ["proof (prove)\nusing this:\n  lt (monom_mult (lc p / lc f) (lp p - lp f) f) =\n  (lp p - lp f) \\<oplus> lt f\n\ngoal (1 subgoal):\n 1. lt (monom_mult (lc p / lc f) (lp p - lp f) f) = lt p", "by (simp only: eq)"], ["proof (state)\nthis:\n  lt (monom_mult (lc p / lc f) (lp p - lp f) f) = lt p\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "have \"lookup ?f (lt p) = lookup ?f ((lp p - lp f) \\<oplus> lt f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monom_mult (lc p / lc f) (lp p - lp f) f) (lt p) =\n    lookup (monom_mult (lc p / lc f) (lp p - lp f) f)\n     ((lp p - lp f) \\<oplus> lt f)", "by (simp only: eq)"], ["proof (state)\nthis:\n  lookup (monom_mult (lc p / lc f) (lp p - lp f) f) (lt p) =\n  lookup (monom_mult (lc p / lc f) (lp p - lp f) f)\n   ((lp p - lp f) \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "also"], ["proof (state)\nthis:\n  lookup (monom_mult (lc p / lc f) (lp p - lp f) f) (lt p) =\n  lookup (monom_mult (lc p / lc f) (lp p - lp f) f)\n   ((lp p - lp f) \\<oplus> lt f)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "have \"... = (lc p / lc f) * lookup f (lt f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (monom_mult (lc p / lc f) (lp p - lp f) f)\n     ((lp p - lp f) \\<oplus> lt f) =\n    lc p / lc f * lookup f (lt f)", "by (rule lookup_monom_mult_plus)"], ["proof (state)\nthis:\n  lookup (monom_mult (lc p / lc f) (lp p - lp f) f)\n   ((lp p - lp f) \\<oplus> lt f) =\n  lc p / lc f * lookup f (lt f)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "also"], ["proof (state)\nthis:\n  lookup (monom_mult (lc p / lc f) (lp p - lp f) f)\n   ((lp p - lp f) \\<oplus> lt f) =\n  lc p / lc f * lookup f (lt f)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "from \\<open>lc f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  lc f \\<noteq> (0::'b)", "have \"... = lookup p (lt p)\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lc p / lc f * lookup f (lt f) = lookup p (lt p)", "by (simp add: lc_def)"], ["proof (state)\nthis:\n  lc p / lc f * lookup f (lt f) = lookup p (lt p)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "finally"], ["proof (chain)\npicking this:\n  lookup (monom_mult (lc p / lc f) (lp p - lp f) f) (lt p) = lookup p (lt p)", "have lc_f: \"lookup ?f (lt p) = lookup p (lt p)\""], ["proof (prove)\nusing this:\n  lookup (monom_mult (lc p / lc f) (lp p - lp f) f) (lt p) = lookup p (lt p)\n\ngoal (1 subgoal):\n 1. lookup (monom_mult (lc p / lc f) (lp p - lp f) f) (lt p) =\n    lookup p (lt p)", "."], ["proof (state)\nthis:\n  lookup (monom_mult (lc p / lc f) (lp p - lp f) f) (lt p) = lookup p (lt p)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "have \"red_single p (p - ?f) f (lp p - lp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f\n     (lp p - lp f)", "by (auto simp: red_single_def eq lc_def \\<open>f \\<noteq> 0\\<close> lt_in_keys assms(1))"], ["proof (state)\nthis:\n  red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f\n   (lp p - lp f)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "moreover"], ["proof (state)\nthis:\n  red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f\n   (lp p - lp f)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "have \"p - ?f = tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - monom_mult (lc p / lc f) (lp p - lp f) f =\n    tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)", "by (rule poly_mapping_eqI,\n        simp add: tail_monom_mult[symmetric] lookup_minus lookup_tail_2 lt_f lc_f split: if_split)"], ["proof (state)\nthis:\n  p - monom_mult (lc p / lc f) (lp p - lp f) f =\n  tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "ultimately"], ["proof (chain)\npicking this:\n  red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f\n   (lp p - lp f)\n  p - monom_mult (lc p / lc f) (lp p - lp f) f =\n  tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)", "show ?thesis"], ["proof (prove)\nusing this:\n  red_single p (p - monom_mult (lc p / lc f) (lp p - lp f) f) f\n   (lp p - lp f)\n  p - monom_mult (lc p / lc f) (lp p - lp f) f =\n  tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "by simp"], ["proof (state)\nthis:\n  red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) f\n   (lp p - lp f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_adds_SomeD_red:\n  assumes \"p \\<noteq> 0\" and \"find_adds fs (lt p) = Some f\"\n  shows \"red (set fs) p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. red (set fs) p\n     (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))", "proof (rule red_setI)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?f \\<in> set fs\n 2. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     ?f ?t", "from assms(2)"], ["proof (chain)\npicking this:\n  find_adds fs (lt p) = Some f", "show \"f \\<in> set fs\""], ["proof (prove)\nusing this:\n  find_adds fs (lt p) = Some f\n\ngoal (1 subgoal):\n 1. f \\<in> set fs", "by (rule find_adds_SomeD1)"], ["proof (state)\nthis:\n  f \\<in> set fs\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f ?t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f ?t", "from assms"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  find_adds fs (lt p) = Some f", "show \"red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) f (lp p - lp f)\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  find_adds fs (lt p) = Some f\n\ngoal (1 subgoal):\n 1. red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     f (lp p - lp f)", "by (rule find_adds_SomeD_red_single)"], ["proof (state)\nthis:\n  red_single p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) f\n   (lp p - lp f)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ordered_term *)"], ["", "subsubsection \\<open>Function \\<open>trd\\<close>\\<close>"], ["", "context gd_term\nbegin"], ["", "definition trd_term :: \"('a \\<Rightarrow> nat) \\<Rightarrow> ((('t \\<Rightarrow>\\<^sub>0 'b::field) list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) \\<times> ('t \\<Rightarrow>\\<^sub>0 'b)) \\<times>\n                                        (('t \\<Rightarrow>\\<^sub>0 'b) list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) \\<times> ('t \\<Rightarrow>\\<^sub>0 'b))) set\"\n  where \"trd_term d = {(x, y). dgrad_p_set_le d (set (fst (snd x) # fst x)) (set (fst (snd y) # fst y)) \\<and> fst (snd x) \\<prec>\\<^sub>p fst (snd y)}\""], ["", "lemma trd_term_wf:\n  assumes \"dickson_grading d\"\n  shows \"wf (trd_term d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (trd_term d)", "proof (rule wfI_min)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "fix x :: \"('t \\<Rightarrow>\\<^sub>0 'b::field) list \\<times> ('t \\<Rightarrow>\\<^sub>0 'b) \\<times> ('t \\<Rightarrow>\\<^sub>0 'b)\" and Q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "assume \"x \\<in> Q\""], ["proof (state)\nthis:\n  x \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "let ?A = \"set (fst (snd x) # fst x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "have \"finite ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set (fst (snd x) # fst x))", ".."], ["proof (state)\nthis:\n  finite (set (fst (snd x) # fst x))\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "then"], ["proof (chain)\npicking this:\n  finite (set (fst (snd x) # fst x))", "obtain m where A: \"?A \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  finite (set (fst (snd x) # fst x))\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        set (fst (snd x) # fst x)\n        \\<subseteq> dgrad_p_set d m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule dgrad_p_set_exhaust)"], ["proof (state)\nthis:\n  set (fst (snd x) # fst x) \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "let ?B = \"dgrad_p_set d m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "let ?Q = \"{q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> ?B}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "note assms"], ["proof (state)\nthis:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "have \"fst (snd x) \\<in> fst ` snd ` ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd x)\n    \\<in> fst `\n          snd `\n          {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}", "by (rule, fact refl, rule, fact refl, simp only: mem_Collect_eq A \\<open>x \\<in> Q\\<close>)"], ["proof (state)\nthis:\n  fst (snd x)\n  \\<in> fst `\n        snd `\n        {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  fst (snd x)\n  \\<in> fst `\n        snd `\n        {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "have \"fst ` snd ` ?Q \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst `\n    snd ` {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n    \\<subseteq> dgrad_p_set d m", "by auto"], ["proof (state)\nthis:\n  fst `\n  snd ` {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n  \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "ultimately"], ["proof (chain)\npicking this:\n  dickson_grading d\n  fst (snd x)\n  \\<in> fst `\n        snd `\n        {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n  fst `\n  snd ` {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n  \\<subseteq> dgrad_p_set d m", "obtain z0 where \"z0 \\<in> fst ` snd ` ?Q\"\n    and *: \"\\<And>y. y \\<prec>\\<^sub>p z0 \\<Longrightarrow> y \\<notin> fst ` snd ` ?Q\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  fst (snd x)\n  \\<in> fst `\n        snd `\n        {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n  fst `\n  snd ` {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n  \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>z0.\n        \\<lbrakk>z0 \\<in> fst `\n                          snd `\n                          {q \\<in> Q.\n                           set (fst (snd q) # fst q)\n                           \\<subseteq> dgrad_p_set d m};\n         \\<And>y.\n            y \\<prec>\\<^sub>p z0 \\<Longrightarrow>\n            y \\<notin> fst `\n                       snd `\n                       {q \\<in> Q.\n                        set (fst (snd q) # fst q)\n                        \\<subseteq> dgrad_p_set d m}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ord_p_minimum_dgrad_p_set, blast)"], ["proof (state)\nthis:\n  z0 \\<in> fst `\n           snd `\n           {q \\<in> Q.\n            set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n  ?y30 \\<prec>\\<^sub>p z0 \\<Longrightarrow>\n  ?y30\n  \\<notin> fst `\n           snd `\n           {q \\<in> Q.\n            set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  z0 \\<in> fst `\n           snd `\n           {q \\<in> Q.\n            set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}", "obtain z where \"z \\<in> {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> ?B}\" and z0: \"z0 = fst (snd z)\""], ["proof (prove)\nusing this:\n  z0 \\<in> fst `\n           snd `\n           {q \\<in> Q.\n            set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> {q \\<in> Q.\n                          set (fst (snd q) # fst q)\n                          \\<subseteq> dgrad_p_set d m};\n         z0 = fst (snd z)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  z \\<in> {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n  z0 = fst (snd z)\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  z \\<in> {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}", "have \"z \\<in> Q\" and a: \"set (fst (snd z) # fst z) \\<subseteq> ?B\""], ["proof (prove)\nusing this:\n  z \\<in> {q \\<in> Q. set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n\ngoal (1 subgoal):\n 1. z \\<in> Q &&& set (fst (snd z) # fst z) \\<subseteq> dgrad_p_set d m", "by simp_all"], ["proof (state)\nthis:\n  z \\<in> Q\n  set (fst (snd z) # fst z) \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>x Q.\n       x \\<in> Q \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "from this(1)"], ["proof (chain)\npicking this:\n  z \\<in> Q", "show \"\\<exists>z\\<in>Q. \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\nusing this:\n  z \\<in> Q\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "show \"\\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. (y, z) \\<in> trd_term d \\<Longrightarrow> y \\<notin> Q", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. (y, z) \\<in> trd_term d \\<Longrightarrow> y \\<notin> Q", "assume \"(y, z) \\<in> trd_term d\""], ["proof (state)\nthis:\n  (y, z) \\<in> trd_term d\n\ngoal (1 subgoal):\n 1. \\<And>y. (y, z) \\<in> trd_term d \\<Longrightarrow> y \\<notin> Q", "hence b: \"dgrad_p_set_le d (set (fst (snd y) # fst y)) (set (fst (snd z) # fst z))\" and \"fst (snd y) \\<prec>\\<^sub>p z0\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> trd_term d\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (set (fst (snd y) # fst y))\n     (set (fst (snd z) # fst z)) &&&\n    fst (snd y) \\<prec>\\<^sub>p z0", "by (simp_all add: trd_term_def z0)"], ["proof (state)\nthis:\n  dgrad_p_set_le d (set (fst (snd y) # fst y)) (set (fst (snd z) # fst z))\n  fst (snd y) \\<prec>\\<^sub>p z0\n\ngoal (1 subgoal):\n 1. \\<And>y. (y, z) \\<in> trd_term d \\<Longrightarrow> y \\<notin> Q", "from this(2)"], ["proof (chain)\npicking this:\n  fst (snd y) \\<prec>\\<^sub>p z0", "have \"fst (snd y) \\<notin> fst ` snd ` ?Q\""], ["proof (prove)\nusing this:\n  fst (snd y) \\<prec>\\<^sub>p z0\n\ngoal (1 subgoal):\n 1. fst (snd y)\n    \\<notin> fst `\n             snd `\n             {q \\<in> Q.\n              set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}", "by (rule *)"], ["proof (state)\nthis:\n  fst (snd y)\n  \\<notin> fst `\n           snd `\n           {q \\<in> Q.\n            set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n\ngoal (1 subgoal):\n 1. \\<And>y. (y, z) \\<in> trd_term d \\<Longrightarrow> y \\<notin> Q", "hence \"y \\<notin> Q \\<or> \\<not> set (fst (snd y) # fst y) \\<subseteq> ?B\""], ["proof (prove)\nusing this:\n  fst (snd y)\n  \\<notin> fst `\n           snd `\n           {q \\<in> Q.\n            set (fst (snd q) # fst q) \\<subseteq> dgrad_p_set d m}\n\ngoal (1 subgoal):\n 1. y \\<notin> Q \\<or>\n    \\<not> set (fst (snd y) # fst y) \\<subseteq> dgrad_p_set d m", "by auto"], ["proof (state)\nthis:\n  y \\<notin> Q \\<or>\n  \\<not> set (fst (snd y) # fst y) \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>y. (y, z) \\<in> trd_term d \\<Longrightarrow> y \\<notin> Q", "moreover"], ["proof (state)\nthis:\n  y \\<notin> Q \\<or>\n  \\<not> set (fst (snd y) # fst y) \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>y. (y, z) \\<in> trd_term d \\<Longrightarrow> y \\<notin> Q", "from b a"], ["proof (chain)\npicking this:\n  dgrad_p_set_le d (set (fst (snd y) # fst y)) (set (fst (snd z) # fst z))\n  set (fst (snd z) # fst z) \\<subseteq> dgrad_p_set d m", "have \"set (fst (snd y) # fst y) \\<subseteq> ?B\""], ["proof (prove)\nusing this:\n  dgrad_p_set_le d (set (fst (snd y) # fst y)) (set (fst (snd z) # fst z))\n  set (fst (snd z) # fst z) \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. set (fst (snd y) # fst y) \\<subseteq> dgrad_p_set d m", "by (rule dgrad_p_set_le_dgrad_p_set)"], ["proof (state)\nthis:\n  set (fst (snd y) # fst y) \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. \\<And>y. (y, z) \\<in> trd_term d \\<Longrightarrow> y \\<notin> Q", "ultimately"], ["proof (chain)\npicking this:\n  y \\<notin> Q \\<or>\n  \\<not> set (fst (snd y) # fst y) \\<subseteq> dgrad_p_set d m\n  set (fst (snd y) # fst y) \\<subseteq> dgrad_p_set d m", "show \"y \\<notin> Q\""], ["proof (prove)\nusing this:\n  y \\<notin> Q \\<or>\n  \\<not> set (fst (snd y) # fst y) \\<subseteq> dgrad_p_set d m\n  set (fst (snd y) # fst y) \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. y \\<notin> Q", "by simp"], ["proof (state)\nthis:\n  y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y. (y, z) \\<in> trd_term d \\<longrightarrow> y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "function trd_aux :: \"('t \\<Rightarrow>\\<^sub>0 'b) list \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::field)\" where\n  \"trd_aux fs p r =\n    (if p = 0 then\n      r\n    else\n      case find_adds fs (lt p) of\n        None   \\<Rightarrow> trd_aux fs (tail p) (r + monomial (lc p) (lt p))\n      | Some f \\<Rightarrow> trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) r\n    )\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>fs p r. x = (fs, p, r) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>fs p r fsa pa ra.\n       (fs, p, r) = (fsa, pa, ra) \\<Longrightarrow>\n       (if p = 0 then r\n        else case find_adds fs (lt p) of\n             None \\<Rightarrow>\n               trd_aux_sumC (fs, tail p, r + monomial (lc p) (lt p))\n             | Some f \\<Rightarrow>\n                 trd_aux_sumC\n                  (fs,\n                   tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f),\n                   r)) =\n       (if pa = 0 then ra\n        else case find_adds fsa (lt pa) of\n             None \\<Rightarrow>\n               trd_aux_sumC (fsa, tail pa, ra + monomial (lc pa) (lt pa))\n             | Some f \\<Rightarrow>\n                 trd_aux_sumC\n                  (fsa,\n                   tail pa -\n                   monom_mult (lc pa / lc f) (lp pa - lp f) (tail f),\n                   ra))", "by auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All trd_aux_dom", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. All trd_aux_dom", "from ex_dgrad"], ["proof (chain)\npicking this:\n  \\<exists>d. dickson_grading d", "obtain d::\"'a \\<Rightarrow> nat\" where dg: \"dickson_grading d\""], ["proof (prove)\nusing this:\n  \\<exists>d. dickson_grading d\n\ngoal (1 subgoal):\n 1. (\\<And>d. dickson_grading d \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. All trd_aux_dom", "let ?R = \"trd_term d\""], ["proof (state)\ngoal (1 subgoal):\n 1. All trd_aux_dom", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. All trd_aux_dom", "proof (rule, rule trd_term_wf, fact)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>fs p r.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = None\\<rbrakk>\n       \\<Longrightarrow> ((fs, tail p, r + monomial (lc p) (lt p)), fs, p,\n                          r)\n                         \\<in> trd_term d\n 2. \\<And>fs p r x2.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n       \\<Longrightarrow> ((fs,\n                           tail p -\n                           monom_mult (lc p / lc x2) (lp p - lp x2)\n                            (tail x2),\n                           r),\n                          fs, p, r)\n                         \\<in> trd_term d", "fix fs and p r::\"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>fs p r.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = None\\<rbrakk>\n       \\<Longrightarrow> ((fs, tail p, r + monomial (lc p) (lt p)), fs, p,\n                          r)\n                         \\<in> trd_term d\n 2. \\<And>fs p r x2.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n       \\<Longrightarrow> ((fs,\n                           tail p -\n                           monom_mult (lc p / lc x2) (lp p - lp x2)\n                            (tail x2),\n                           r),\n                          fs, p, r)\n                         \\<in> trd_term d", "assume \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<And>fs p r.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = None\\<rbrakk>\n       \\<Longrightarrow> ((fs, tail p, r + monomial (lc p) (lt p)), fs, p,\n                          r)\n                         \\<in> trd_term d\n 2. \\<And>fs p r x2.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n       \\<Longrightarrow> ((fs,\n                           tail p -\n                           monom_mult (lc p / lc x2) (lp p - lp x2)\n                            (tail x2),\n                           r),\n                          fs, p, r)\n                         \\<in> trd_term d", "show \"((fs, tail p, r + monomial (lc p) (lt p)), fs, p, r) \\<in> trd_term d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((fs, tail p, r + monomial (lc p) (lt p)), fs, p, r) \\<in> trd_term d", "proof (simp add: trd_term_def, rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. dgrad_p_set_le d (insert (tail p) (set fs)) (insert p (set fs))\n 2. tail p \\<prec>\\<^sub>p p", "show \"dgrad_p_set_le d (insert (tail p) (set fs)) (insert p (set fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (insert (tail p) (set fs)) (insert p (set fs))", "proof (rule dgrad_p_set_leI_insert_keys, rule dgrad_p_set_le_subset, rule subset_insertI,\n            rule dgrad_set_le_subset, simp add: Keys_insert image_Un)"], ["proof (state)\ngoal (1 subgoal):\n 1. pp_of_term ` keys (tail p)\n    \\<subseteq> pp_of_term ` keys p \\<union> pp_of_term ` Keys (set fs)", "have \"keys (tail p) \\<subseteq> keys p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (tail p) \\<subseteq> keys p", "by (auto simp: keys_tail)"], ["proof (state)\nthis:\n  keys (tail p) \\<subseteq> keys p\n\ngoal (1 subgoal):\n 1. pp_of_term ` keys (tail p)\n    \\<subseteq> pp_of_term ` keys p \\<union> pp_of_term ` Keys (set fs)", "hence \"pp_of_term ` keys (tail p) \\<subseteq> pp_of_term ` keys p\""], ["proof (prove)\nusing this:\n  keys (tail p) \\<subseteq> keys p\n\ngoal (1 subgoal):\n 1. pp_of_term ` keys (tail p) \\<subseteq> pp_of_term ` keys p", "by (rule image_mono)"], ["proof (state)\nthis:\n  pp_of_term ` keys (tail p) \\<subseteq> pp_of_term ` keys p\n\ngoal (1 subgoal):\n 1. pp_of_term ` keys (tail p)\n    \\<subseteq> pp_of_term ` keys p \\<union> pp_of_term ` Keys (set fs)", "thus \"pp_of_term ` keys (tail p) \\<subseteq> pp_of_term ` keys p \\<union> pp_of_term ` Keys (set fs)\""], ["proof (prove)\nusing this:\n  pp_of_term ` keys (tail p) \\<subseteq> pp_of_term ` keys p\n\ngoal (1 subgoal):\n 1. pp_of_term ` keys (tail p)\n    \\<subseteq> pp_of_term ` keys p \\<union> pp_of_term ` Keys (set fs)", "by blast"], ["proof (state)\nthis:\n  pp_of_term ` keys (tail p)\n  \\<subseteq> pp_of_term ` keys p \\<union> pp_of_term ` Keys (set fs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dgrad_p_set_le d (insert (tail p) (set fs)) (insert p (set fs))\n\ngoal (1 subgoal):\n 1. tail p \\<prec>\\<^sub>p p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. tail p \\<prec>\\<^sub>p p", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "show \"tail p \\<prec>\\<^sub>p p\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. tail p \\<prec>\\<^sub>p p", "by (rule tail_ord_p)"], ["proof (state)\nthis:\n  tail p \\<prec>\\<^sub>p p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((fs, tail p, r + monomial (lc p) (lt p)), fs, p, r) \\<in> trd_term d\n\ngoal (1 subgoal):\n 1. \\<And>fs p r x2.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n       \\<Longrightarrow> ((fs,\n                           tail p -\n                           monom_mult (lc p / lc x2) (lp p - lp x2)\n                            (tail x2),\n                           r),\n                          fs, p, r)\n                         \\<in> trd_term d", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fs p r x2.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n       \\<Longrightarrow> ((fs,\n                           tail p -\n                           monom_mult (lc p / lc x2) (lp p - lp x2)\n                            (tail x2),\n                           r),\n                          fs, p, r)\n                         \\<in> trd_term d", "fix fs::\"('t \\<Rightarrow>\\<^sub>0 'b) list\" and p r f ::\"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fs p r x2.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n       \\<Longrightarrow> ((fs,\n                           tail p -\n                           monom_mult (lc p / lc x2) (lp p - lp x2)\n                            (tail x2),\n                           r),\n                          fs, p, r)\n                         \\<in> trd_term d", "assume \"p \\<noteq> 0\" and \"find_adds fs (lt p) = Some f\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n  find_adds fs (lt p) = Some f\n\ngoal (1 subgoal):\n 1. \\<And>fs p r x2.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n       \\<Longrightarrow> ((fs,\n                           tail p -\n                           monom_mult (lc p / lc x2) (lp p - lp x2)\n                            (tail x2),\n                           r),\n                          fs, p, r)\n                         \\<in> trd_term d", "hence \"red (set fs) p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\"\n      (is \"red _ p ?q\")"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  find_adds fs (lt p) = Some f\n\ngoal (1 subgoal):\n 1. red (set fs) p\n     (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))", "by (rule find_adds_SomeD_red)"], ["proof (state)\nthis:\n  red (set fs) p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n\ngoal (1 subgoal):\n 1. \\<And>fs p r x2.\n       \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n       \\<Longrightarrow> ((fs,\n                           tail p -\n                           monom_mult (lc p / lc x2) (lp p - lp x2)\n                            (tail x2),\n                           r),\n                          fs, p, r)\n                         \\<in> trd_term d", "show \"((fs, ?q, r), fs, p, r) \\<in> trd_term d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((fs, tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f), r), fs,\n     p, r)\n    \\<in> trd_term d", "by (simp add: trd_term_def, rule, rule dgrad_p_set_leI_insert, rule dgrad_p_set_le_subset, rule subset_insertI,\n            rule dgrad_p_set_le_red, fact dg, fact \\<open>red (set fs) p ?q\\<close>, rule red_ord, fact)"], ["proof (state)\nthis:\n  ((fs, tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f), r), fs, p,\n   r)\n  \\<in> trd_term d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  All trd_aux_dom\n\ngoal:\nNo subgoals!", "qed"], ["", "definition trd :: \"('t \\<Rightarrow>\\<^sub>0 'b::field) list \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b) \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b)\"\n  where \"trd fs p = trd_aux fs p 0\""], ["", "lemma trd_aux_red_rtrancl: \"(red (set fs))\\<^sup>*\\<^sup>* p (trd_aux fs p r - r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p (trd_aux fs p r - r)", "proof (induct fs p r rule: trd_aux.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fs p r.\n       \\<lbrakk>\\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = None\\<rbrakk>\n                \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* (tail p)\n                                   (trd_aux fs (tail p)\n                                     (r + monomial (lc p) (lt p)) -\n                                    (r + monomial (lc p) (lt p)));\n        \\<And>x2.\n           \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n           \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>*\n                              (tail p -\n                               monom_mult (lc p / lc x2) (lp p - lp x2)\n                                (tail x2))\n                              (trd_aux fs\n                                (tail p -\n                                 monom_mult (lc p / lc x2) (lp p - lp x2)\n                                  (tail x2))\n                                r -\n                               r)\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs p r - r)", "case (1 fs p r)"], ["proof (state)\nthis:\n  \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = None\\<rbrakk>\n  \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* (tail p)\n                     (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n                      (r + monomial (lc p) (lt p)))\n  \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some ?x2.35\\<rbrakk>\n  \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>*\n                     (tail p -\n                      monom_mult (lc p / lc ?x2.35) (lp p - lp ?x2.35)\n                       (tail ?x2.35))\n                     (trd_aux fs\n                       (tail p -\n                        monom_mult (lc p / lc ?x2.35) (lp p - lp ?x2.35)\n                         (tail ?x2.35))\n                       r -\n                      r)\n\ngoal (1 subgoal):\n 1. \\<And>fs p r.\n       \\<lbrakk>\\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = None\\<rbrakk>\n                \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* (tail p)\n                                   (trd_aux fs (tail p)\n                                     (r + monomial (lc p) (lt p)) -\n                                    (r + monomial (lc p) (lt p)));\n        \\<And>x2.\n           \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2\\<rbrakk>\n           \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>*\n                              (tail p -\n                               monom_mult (lc p / lc x2) (lp p - lp x2)\n                                (tail x2))\n                              (trd_aux fs\n                                (tail p -\n                                 monom_mult (lc p / lc x2) (lp p - lp x2)\n                                  (tail x2))\n                                r -\n                               r)\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs p r - r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p (trd_aux fs p r - r)", "proof (simp, split option.split, intro conjI impI allI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>find_adds fs (lt p) = None; p \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                       (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n                        r)\n 2. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "assume \"p \\<noteq> 0\" and \"find_adds fs (lt p) = None\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n  find_adds fs (lt p) = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>find_adds fs (lt p) = None; p \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                       (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n                        r)\n 2. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "hence \"(red (set fs))\\<^sup>*\\<^sup>* (tail p) (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) - (r + monomial (lc p) (lt p)))\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  find_adds fs (lt p) = None\n\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* (tail p)\n     (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n      (r + monomial (lc p) (lt p)))", "by (rule 1(1))"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>* (tail p)\n   (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n    (r + monomial (lc p) (lt p)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>find_adds fs (lt p) = None; p \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                       (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n                        r)\n 2. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "hence \"(red (set fs))\\<^sup>*\\<^sup>* (tail p + monomial (lc p) (lt p))\n              (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) - (r + monomial (lc p) (lt p)) + monomial (lc p ) (lt p))\""], ["proof (prove)\nusing this:\n  (red (set fs))\\<^sup>*\\<^sup>* (tail p)\n   (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n    (r + monomial (lc p) (lt p)))\n\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* (tail p + monomial (lc p) (lt p))\n     (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n      (r + monomial (lc p) (lt p)) +\n      monomial (lc p) (lt p))", "proof (rule red_rtrancl_plus_higher)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (tail p);\n        v \\<in> keys (monomial (lc p) (lt p))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (tail p);\n        v \\<in> keys (monomial (lc p) (lt p))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "assume \"u \\<in> keys (tail p)\""], ["proof (state)\nthis:\n  u \\<in> keys (tail p)\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (tail p);\n        v \\<in> keys (monomial (lc p) (lt p))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "assume \"v \\<in> keys (monomial (lc p) (lt p))\""], ["proof (state)\nthis:\n  v \\<in> keys (monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (tail p);\n        v \\<in> keys (monomial (lc p) (lt p))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "also"], ["proof (state)\nthis:\n  v \\<in> keys (monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (tail p);\n        v \\<in> keys (monomial (lc p) (lt p))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "have \"... \\<subseteq> {lt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (monomial (lc p) (lt p)) \\<subseteq> {lt p}", "by (simp add: keys_monomial)"], ["proof (state)\nthis:\n  keys (monomial (lc p) (lt p)) \\<subseteq> {lt p}\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (tail p);\n        v \\<in> keys (monomial (lc p) (lt p))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "finally"], ["proof (chain)\npicking this:\n  v \\<in> {lt p}", "have \"v = lt p\""], ["proof (prove)\nusing this:\n  v \\<in> {lt p}\n\ngoal (1 subgoal):\n 1. v = lt p", "by simp"], ["proof (state)\nthis:\n  v = lt p\n\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<lbrakk>u \\<in> keys (tail p);\n        v \\<in> keys (monomial (lc p) (lt p))\\<rbrakk>\n       \\<Longrightarrow> u \\<prec>\\<^sub>t v", "from \\<open>u \\<in> keys (tail p)\\<close>"], ["proof (chain)\npicking this:\n  u \\<in> keys (tail p)", "show \"u \\<prec>\\<^sub>t v\""], ["proof (prove)\nusing this:\n  u \\<in> keys (tail p)\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t v", "unfolding \\<open>v = lt p\\<close>"], ["proof (prove)\nusing this:\n  u \\<in> keys (tail p)\n\ngoal (1 subgoal):\n 1. u \\<prec>\\<^sub>t lt p", "by (rule keys_tail_less_lt)"], ["proof (state)\nthis:\n  u \\<prec>\\<^sub>t v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>* (tail p + monomial (lc p) (lt p))\n   (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n    (r + monomial (lc p) (lt p)) +\n    monomial (lc p) (lt p))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>find_adds fs (lt p) = None; p \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                       (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n                        r)\n 2. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "thus \"(red (set fs))\\<^sup>*\\<^sup>* p (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) - r)\""], ["proof (prove)\nusing this:\n  (red (set fs))\\<^sup>*\\<^sup>* (tail p + monomial (lc p) (lt p))\n   (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) -\n    (r + monomial (lc p) (lt p)) +\n    monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p\n     (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) - r)", "by (simp only: leading_monomial_tail[symmetric] add.commute[of _ \"monomial (lc p) (lt p)\"], simp)"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>* p\n   (trd_aux fs (tail p) (r + monomial (lc p) (lt p)) - r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "assume \"p \\<noteq> 0\" and \"find_adds fs (lt p) = Some f\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n  find_adds fs (lt p) = Some f\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "hence \"(red (set fs))\\<^sup>*\\<^sup>* (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n                    (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) r - r)\"\n      and *: \"red (set fs) p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  find_adds fs (lt p) = Some f\n\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>*\n     (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n       r -\n      r) &&&\n    red (set fs) p\n     (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))", "by (rule 1(2), rule find_adds_SomeD_red)"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>*\n   (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n   (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     r -\n    r)\n  red (set fs) p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "let ?q = \"tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "from *"], ["proof (chain)\npicking this:\n  red (set fs) p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))", "have \"(red (set fs))\\<^sup>*\\<^sup>* p ?q\""], ["proof (prove)\nusing this:\n  red (set fs) p (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p\n     (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))", ".."], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>* p\n   (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "moreover"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>* p\n   (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "have \"(red (set fs))\\<^sup>*\\<^sup>* ?q (trd_aux fs ?q r - r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>*\n     (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n       r -\n      r)", "by fact"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>*\n   (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n   (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     r -\n    r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (red (set fs))\\<^sup>*\\<^sup>* p\n                          (trd_aux fs\n                            (tail p -\n                             monom_mult (lc p / lc x2) (lp p - lp x2)\n                              (tail x2))\n                            r -\n                           r)", "ultimately"], ["proof (chain)\npicking this:\n  (red (set fs))\\<^sup>*\\<^sup>* p\n   (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n  (red (set fs))\\<^sup>*\\<^sup>*\n   (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n   (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     r -\n    r)", "show \"(red (set fs))\\<^sup>*\\<^sup>* p (trd_aux fs ?q r - r)\""], ["proof (prove)\nusing this:\n  (red (set fs))\\<^sup>*\\<^sup>* p\n   (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n  (red (set fs))\\<^sup>*\\<^sup>*\n   (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n   (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     r -\n    r)\n\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p\n     (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n       r -\n      r)", "by (rule rtranclp_trans)"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>* p\n   (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f))\n     r -\n    r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>* p (trd_aux fs p r - r)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary trd_red_rtrancl: \"(red (set fs))\\<^sup>*\\<^sup>* p (trd fs p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p (trd fs p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p (trd fs p)", "have \"(red (set fs))\\<^sup>*\\<^sup>* p (trd fs p - 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p (trd fs p - 0)", "unfolding trd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p (trd_aux fs p 0 - 0)", "by (rule trd_aux_red_rtrancl)"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>* p (trd fs p - 0)\n\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p (trd fs p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (red (set fs))\\<^sup>*\\<^sup>* p (trd fs p - 0)\n\ngoal (1 subgoal):\n 1. (red (set fs))\\<^sup>*\\<^sup>* p (trd fs p)", "by simp"], ["proof (state)\nthis:\n  (red (set fs))\\<^sup>*\\<^sup>* p (trd fs p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trd_aux_irred:\n  assumes \"\\<not> is_red (set fs) r\"\n  shows \"\\<not> is_red (set fs) (trd_aux fs p r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs) (trd_aux fs p r)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> is_red (set fs) r\n\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs) (trd_aux fs p r)", "proof (induct fs p r rule: trd_aux.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fs p r.\n       \\<lbrakk>\\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = None;\n                 \\<not> is_red (set fs)\n                         (r + monomial (lc p) (lt p))\\<rbrakk>\n                \\<Longrightarrow> \\<not> is_red (set fs)\n    (trd_aux fs (tail p) (r + monomial (lc p) (lt p)));\n        \\<And>x2.\n           \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2;\n            \\<not> is_red (set fs) r\\<rbrakk>\n           \\<Longrightarrow> \\<not> is_red (set fs)\n                                     (trd_aux fs\n (tail p - monom_mult (lc p / lc x2) (lp p - lp x2) (tail x2)) r);\n        \\<not> is_red (set fs) r\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_red (set fs) (trd_aux fs p r)", "case (1 fs p r)"], ["proof (state)\nthis:\n  \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = None;\n   \\<not> is_red (set fs) (r + monomial (lc p) (lt p))\\<rbrakk>\n  \\<Longrightarrow> \\<not> is_red (set fs)\n                            (trd_aux fs (tail p)\n                              (r + monomial (lc p) (lt p)))\n  \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some ?x2.35;\n   \\<not> is_red (set fs) r\\<rbrakk>\n  \\<Longrightarrow> \\<not> is_red (set fs)\n                            (trd_aux fs\n                              (tail p -\n                               monom_mult (lc p / lc ?x2.35)\n                                (lp p - lp ?x2.35) (tail ?x2.35))\n                              r)\n  \\<not> is_red (set fs) r\n\ngoal (1 subgoal):\n 1. \\<And>fs p r.\n       \\<lbrakk>\\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = None;\n                 \\<not> is_red (set fs)\n                         (r + monomial (lc p) (lt p))\\<rbrakk>\n                \\<Longrightarrow> \\<not> is_red (set fs)\n    (trd_aux fs (tail p) (r + monomial (lc p) (lt p)));\n        \\<And>x2.\n           \\<lbrakk>p \\<noteq> 0; find_adds fs (lt p) = Some x2;\n            \\<not> is_red (set fs) r\\<rbrakk>\n           \\<Longrightarrow> \\<not> is_red (set fs)\n                                     (trd_aux fs\n (tail p - monom_mult (lc p / lc x2) (lp p - lp x2) (tail x2)) r);\n        \\<not> is_red (set fs) r\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_red (set fs) (trd_aux fs p r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs) (trd_aux fs p r)", "proof (simp add: 1(3), split option.split, intro impI conjI allI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>find_adds fs (lt p) = None; p \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> is_red (set fs)\n                              (trd_aux fs (tail p)\n                                (r + monomial (lc p) (lt p)))\n 2. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_red (set fs)\n                                 (trd_aux fs\n                                   (tail p -\n                                    monom_mult (lc p / lc x2) (lp p - lp x2)\n                                     (tail x2))\n                                   r)", "assume \"p \\<noteq> 0\" and *: \"find_adds fs (lt p) = None\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n  find_adds fs (lt p) = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>find_adds fs (lt p) = None; p \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> is_red (set fs)\n                              (trd_aux fs (tail p)\n                                (r + monomial (lc p) (lt p)))\n 2. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_red (set fs)\n                                 (trd_aux fs\n                                   (tail p -\n                                    monom_mult (lc p / lc x2) (lp p - lp x2)\n                                     (tail x2))\n                                   r)", "thus \"\\<not> is_red (set fs) (trd_aux fs (tail p) (r + monomial (lc p) (lt p)))\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  find_adds fs (lt p) = None\n\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs)\n            (trd_aux fs (tail p) (r + monomial (lc p) (lt p)))", "proof (rule 1(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs) (r + monomial (lc p) (lt p))", "show \"\\<not> is_red (set fs) (r + monomial (lc p) (lt p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs) (r + monomial (lc p) (lt p))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. is_red (set fs) (r + monomial (lc p) (lt p)) \\<Longrightarrow> False", "assume \"is_red (set fs) (r + monomial (lc p) (lt p))\""], ["proof (state)\nthis:\n  is_red (set fs) (r + monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. is_red (set fs) (r + monomial (lc p) (lt p)) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_red (set fs) (r + monomial (lc p) (lt p))", "obtain f u where \"f \\<in> set fs\" and \"f \\<noteq> 0\" and \"u \\<in> keys (r + monomial (lc p) (lt p))\"\n          and \"lt f adds\\<^sub>t u\""], ["proof (prove)\nusing this:\n  is_red (set fs) (r + monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. (\\<And>f u.\n        \\<lbrakk>f \\<in> set fs; f \\<noteq> 0;\n         u \\<in> keys (r + monomial (lc p) (lt p));\n         lt f adds\\<^sub>t u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_addsE)"], ["proof (state)\nthis:\n  f \\<in> set fs\n  f \\<noteq> 0\n  u \\<in> keys (r + monomial (lc p) (lt p))\n  lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. is_red (set fs) (r + monomial (lc p) (lt p)) \\<Longrightarrow> False", "note this(3)"], ["proof (state)\nthis:\n  u \\<in> keys (r + monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. is_red (set fs) (r + monomial (lc p) (lt p)) \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  u \\<in> keys (r + monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. is_red (set fs) (r + monomial (lc p) (lt p)) \\<Longrightarrow> False", "have \"keys (r + monomial (lc p) (lt p)) \\<subseteq> keys r \\<union> keys (monomial (lc p) (lt p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (r + monomial (lc p) (lt p))\n    \\<subseteq> keys r \\<union> keys (monomial (lc p) (lt p))", "by (rule Poly_Mapping.keys_add)"], ["proof (state)\nthis:\n  keys (r + monomial (lc p) (lt p))\n  \\<subseteq> keys r \\<union> keys (monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. is_red (set fs) (r + monomial (lc p) (lt p)) \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  keys (r + monomial (lc p) (lt p))\n  \\<subseteq> keys r \\<union> keys (monomial (lc p) (lt p))\n\ngoal (1 subgoal):\n 1. is_red (set fs) (r + monomial (lc p) (lt p)) \\<Longrightarrow> False", "have \"... \\<subseteq> insert (lt p) (keys r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys r \\<union> keys (monomial (lc p) (lt p))\n    \\<subseteq> insert (lt p) (keys r)", "by auto"], ["proof (state)\nthis:\n  keys r \\<union> keys (monomial (lc p) (lt p))\n  \\<subseteq> insert (lt p) (keys r)\n\ngoal (1 subgoal):\n 1. is_red (set fs) (r + monomial (lc p) (lt p)) \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  u \\<in> insert (lt p) (keys r)", "show False"], ["proof (prove)\nusing this:\n  u \\<in> insert (lt p) (keys r)\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. u = lt p \\<Longrightarrow> False\n 2. u \\<in> keys r \\<Longrightarrow> False", "assume \"u = lt p\""], ["proof (state)\nthis:\n  u = lt p\n\ngoal (2 subgoals):\n 1. u = lt p \\<Longrightarrow> False\n 2. u \\<in> keys r \\<Longrightarrow> False", "from * \\<open>f \\<in> set fs\\<close>"], ["proof (chain)\npicking this:\n  find_adds fs (lt p) = None\n  f \\<in> set fs", "show ?thesis"], ["proof (prove)\nusing this:\n  find_adds fs (lt p) = None\n  f \\<in> set fs\n\ngoal (1 subgoal):\n 1. False", "proof (rule find_adds_NoneE)"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t lt p\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"f = 0\""], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t lt p\\<rbrakk>\n    \\<Longrightarrow> False", "with \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  f = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  f = 0\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t lt p\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t lt p\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> lt f adds\\<^sub>t lt p\""], ["proof (state)\nthis:\n  \\<not> lt f adds\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<noteq> 0; \\<not> lt f adds\\<^sub>t lt p\\<rbrakk>\n    \\<Longrightarrow> False", "from this \\<open>lt f adds\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  \\<not> lt f adds\\<^sub>t lt p\n  lt f adds\\<^sub>t u", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> lt f adds\\<^sub>t lt p\n  lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. False", "unfolding \\<open>u = lt p\\<close>"], ["proof (prove)\nusing this:\n  \\<not> lt f adds\\<^sub>t lt p\n  lt f adds\\<^sub>t lt p\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. u \\<in> keys r \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> keys r \\<Longrightarrow> False", "assume \"u \\<in> keys r\""], ["proof (state)\nthis:\n  u \\<in> keys r\n\ngoal (1 subgoal):\n 1. u \\<in> keys r \\<Longrightarrow> False", "from \\<open>f \\<in> set fs\\<close> \\<open>f \\<noteq> 0\\<close> this \\<open>lt f adds\\<^sub>t u\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> set fs\n  f \\<noteq> 0\n  u \\<in> keys r\n  lt f adds\\<^sub>t u", "have \"is_red (set fs) r\""], ["proof (prove)\nusing this:\n  f \\<in> set fs\n  f \\<noteq> 0\n  u \\<in> keys r\n  lt f adds\\<^sub>t u\n\ngoal (1 subgoal):\n 1. is_red (set fs) r", "by (rule is_red_addsI)"], ["proof (state)\nthis:\n  is_red (set fs) r\n\ngoal (1 subgoal):\n 1. u \\<in> keys r \\<Longrightarrow> False", "with 1(3)"], ["proof (chain)\npicking this:\n  \\<not> is_red (set fs) r\n  is_red (set fs) r", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> is_red (set fs) r\n  is_red (set fs) r\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> is_red (set fs) (r + monomial (lc p) (lt p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> is_red (set fs) (trd_aux fs (tail p) (r + monomial (lc p) (lt p)))\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_red (set fs)\n                                 (trd_aux fs\n                                   (tail p -\n                                    monom_mult (lc p / lc x2) (lp p - lp x2)\n                                     (tail x2))\n                                   r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_red (set fs)\n                                 (trd_aux fs\n                                   (tail p -\n                                    monom_mult (lc p / lc x2) (lp p - lp x2)\n                                     (tail x2))\n                                   r)", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_red (set fs)\n                                 (trd_aux fs\n                                   (tail p -\n                                    monom_mult (lc p / lc x2) (lp p - lp x2)\n                                     (tail x2))\n                                   r)", "assume \"p \\<noteq> 0\" and \"find_adds fs (lt p) = Some f\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n  find_adds fs (lt p) = Some f\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_adds fs (lt p) = Some x2; p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> is_red (set fs)\n                                 (trd_aux fs\n                                   (tail p -\n                                    monom_mult (lc p / lc x2) (lp p - lp x2)\n                                     (tail x2))\n                                   r)", "from this 1(3)"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  find_adds fs (lt p) = Some f\n  \\<not> is_red (set fs) r", "show \"\\<not> is_red (set fs) (trd_aux fs (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) r)\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  find_adds fs (lt p) = Some f\n  \\<not> is_red (set fs) r\n\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs)\n            (trd_aux fs\n              (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) r)", "by (rule 1(2))"], ["proof (state)\nthis:\n  \\<not> is_red (set fs)\n          (trd_aux fs\n            (tail p - monom_mult (lc p / lc f) (lp p - lp f) (tail f)) r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> is_red (set fs) (trd_aux fs p r)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary trd_irred: \"\\<not> is_red (set fs) (trd fs p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs) (trd fs p)", "unfolding trd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs) (trd_aux fs p 0)", "using irred_0"], ["proof (prove)\nusing this:\n  \\<not> is_red ?F 0\n\ngoal (1 subgoal):\n 1. \\<not> is_red (set fs) (trd_aux fs p 0)", "by (rule trd_aux_irred)"], ["", "lemma trd_in_pmdl: \"p - (trd fs p) \\<in> pmdl (set fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p - trd fs p \\<in> pmdl (set fs)", "using trd_red_rtrancl"], ["proof (prove)\nusing this:\n  (red (set ?fs))\\<^sup>*\\<^sup>* ?p (trd ?fs ?p)\n\ngoal (1 subgoal):\n 1. p - trd fs p \\<in> pmdl (set fs)", "by (rule red_rtranclp_diff_in_pmdl)"], ["", "lemma pmdl_closed_trd:\n  assumes \"p \\<in> pmdl B\" and \"set fs \\<subseteq> pmdl B\"\n  shows \"(trd fs p) \\<in> pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trd fs p \\<in> pmdl B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trd fs p \\<in> pmdl B", "from assms(2)"], ["proof (chain)\npicking this:\n  set fs \\<subseteq> pmdl B", "have \"pmdl (set fs) \\<subseteq> pmdl B\""], ["proof (prove)\nusing this:\n  set fs \\<subseteq> pmdl B\n\ngoal (1 subgoal):\n 1. pmdl (set fs) \\<subseteq> pmdl B", "by (rule pmdl.span_subset_spanI)"], ["proof (state)\nthis:\n  pmdl (set fs) \\<subseteq> pmdl B\n\ngoal (1 subgoal):\n 1. trd fs p \\<in> pmdl B", "with trd_in_pmdl"], ["proof (chain)\npicking this:\n  ?p - trd ?fs ?p \\<in> pmdl (set ?fs)\n  pmdl (set fs) \\<subseteq> pmdl B", "have \"p - trd fs p \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  ?p - trd ?fs ?p \\<in> pmdl (set ?fs)\n  pmdl (set fs) \\<subseteq> pmdl B\n\ngoal (1 subgoal):\n 1. p - trd fs p \\<in> pmdl B", ".."], ["proof (state)\nthis:\n  p - trd fs p \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. trd fs p \\<in> pmdl B", "with assms(1)"], ["proof (chain)\npicking this:\n  p \\<in> pmdl B\n  p - trd fs p \\<in> pmdl B", "have \"p - (p - trd fs p) \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  p \\<in> pmdl B\n  p - trd fs p \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. p - (p - trd fs p) \\<in> pmdl B", "by (rule pmdl.span_diff)"], ["proof (state)\nthis:\n  p - (p - trd fs p) \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. trd fs p \\<in> pmdl B", "thus ?thesis"], ["proof (prove)\nusing this:\n  p - (p - trd fs p) \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. trd fs p \\<in> pmdl B", "by simp"], ["proof (state)\nthis:\n  trd fs p \\<in> pmdl B\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* gd_term *)"], ["", "end"], ["", "(* theory *)"]]}