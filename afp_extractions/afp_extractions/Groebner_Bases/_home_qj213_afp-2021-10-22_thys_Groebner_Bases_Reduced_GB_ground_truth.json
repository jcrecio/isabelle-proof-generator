{"file_name": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases/Reduced_GB.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases", "problem_names": ["lemma (in gd_term) GB_image_monic: \"is_Groebner_basis (monic ` G) \\<longleftrightarrow> is_Groebner_basis G\"", "lemma reduced_GB_D1:\n  assumes \"is_reduced_GB G\"\n  shows \"is_Groebner_basis G\"", "lemma reduced_GB_D2:\n  assumes \"is_reduced_GB G\"\n  shows \"is_auto_reduced G\"", "lemma reduced_GB_D3:\n  assumes \"is_reduced_GB G\"\n  shows \"is_monic_set G\"", "lemma reduced_GB_D4:\n  assumes \"is_reduced_GB G\" and \"g \\<in> G\"\n  shows \"g \\<noteq> 0\"", "lemma reduced_GB_lc:\n  assumes major: \"is_reduced_GB G\" and \"g \\<in> G\"\n  shows \"lc g = 1\"", "lemma is_reduced_GB_subsetI:\n  assumes Ared: \"is_reduced_GB A\" and BGB: \"is_Groebner_basis B\" and Bmon: \"is_monic_set B\"\n    and *: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> B \\<Longrightarrow> a \\<noteq> 0 \\<Longrightarrow> b \\<noteq> 0 \\<Longrightarrow> a - b \\<noteq> 0 \\<Longrightarrow> lt (a - b) \\<in> keys b \\<Longrightarrow> lt (a - b) \\<prec>\\<^sub>t lt b \\<Longrightarrow> False\"\n    and id_eq: \"pmdl A = pmdl B\"\n  shows \"A \\<subseteq> B\"", "lemma is_reduced_GB_unique':\n  assumes Ared: \"is_reduced_GB A\" and Bred: \"is_reduced_GB B\" and id_eq: \"pmdl A = pmdl B\"\n  shows \"A \\<subseteq> B\"", "theorem is_reduced_GB_unique:\n  assumes Ared: \"is_reduced_GB A\" and Bred: \"is_reduced_GB B\" and id_eq: \"pmdl A = pmdl B\"\n  shows \"A = B\"", "lemma minimal_basis_is_reduced_GB:\n  assumes \"is_minimal_basis B\" and \"is_monic_set B\" and \"is_reduced_GB G\" and \"G \\<subseteq> B\"\n    and \"pmdl B = pmdl G\"\n  shows \"B = G\"", "lemma comp_min_basis_pmdl:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"pmdl (set (comp_min_basis xs)) = pmdl (set xs)\" (is \"pmdl (set ?ys) = _\")", "lemma comp_min_basis_GB:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"is_Groebner_basis (set (comp_min_basis xs))\" (is \"is_Groebner_basis (set ?ys)\")", "lemma comp_red_basis_pmdl:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"pmdl (set (comp_red_basis xs)) = pmdl (set xs)\"", "lemma comp_red_basis_GB:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"is_Groebner_basis (set (comp_red_basis xs))\"", "lemma comp_red_monic_basis_pmdl:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"pmdl (set (comp_red_monic_basis xs)) = pmdl (set xs)\"", "lemma comp_red_monic_basis_GB:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"is_Groebner_basis (set (comp_red_monic_basis xs))\"", "lemma comp_red_monic_basis_is_reduced_GB:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"is_reduced_GB (set (comp_red_monic_basis xs))\"", "lemma ex_finite_reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  obtains G where \"G \\<subseteq> dgrad_p_set d m\" and \"finite G\" and \"is_reduced_GB G\" and \"pmdl G = pmdl F\"", "theorem ex_unique_reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"\\<exists>!G. G \\<subseteq> dgrad_p_set d m \\<and> finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\"", "lemma finite_reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"finite (reduced_GB F)\"", "lemma reduced_GB_is_reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"is_reduced_GB (reduced_GB F)\"", "lemma reduced_GB_is_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"is_Groebner_basis (reduced_GB F)\"", "lemma reduced_GB_is_auto_reduced_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"is_auto_reduced (reduced_GB F)\"", "lemma reduced_GB_is_monic_set_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"is_monic_set (reduced_GB F)\"", "lemma reduced_GB_nonzero_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"0 \\<notin> reduced_GB F\"", "lemma reduced_GB_pmdl_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"pmdl (reduced_GB F) = pmdl F\"", "lemma reduced_GB_unique_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n    and \"is_reduced_GB G\" and \"pmdl G = pmdl F\"\n  shows \"reduced_GB F = G\"", "lemma reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"reduced_GB F \\<subseteq> dgrad_p_set d m\"", "lemma reduced_GB_unique:\n  assumes \"finite G\" and \"is_reduced_GB G\" and \"pmdl G = pmdl F\"\n  shows \"reduced_GB F = G\"", "lemma is_reduced_GB_empty: \"is_reduced_GB {}\"", "lemma is_reduced_GB_singleton: \"is_reduced_GB {f} \\<longleftrightarrow> lc f = 1\"", "lemma reduced_GB_empty: \"reduced_GB {} = {}\"", "lemma reduced_GB_singleton: \"reduced_GB {f} = (if f = 0 then {} else {monic f})\"", "lemma ex_unique_reduced_GB_finite: \"finite F \\<Longrightarrow> (\\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F)\"", "lemma finite_reduced_GB_finite: \"finite F \\<Longrightarrow> finite (reduced_GB F)\"", "lemma reduced_GB_is_reduced_GB_finite: \"finite F \\<Longrightarrow> is_reduced_GB (reduced_GB F)\"", "lemma reduced_GB_is_GB_finite: \"finite F \\<Longrightarrow> is_Groebner_basis (reduced_GB F)\"", "lemma reduced_GB_is_auto_reduced_finite: \"finite F \\<Longrightarrow> is_auto_reduced (reduced_GB F)\"", "lemma reduced_GB_is_monic_set_finite: \"finite F \\<Longrightarrow> is_monic_set (reduced_GB F)\"", "lemma reduced_GB_nonzero_finite: \"finite F \\<Longrightarrow> 0 \\<notin> reduced_GB F\"", "lemma reduced_GB_pmdl_finite: \"finite F \\<Longrightarrow> pmdl (reduced_GB F) = pmdl F\"", "lemma reduced_GB_unique_finite: \"finite F \\<Longrightarrow> is_reduced_GB G \\<Longrightarrow> pmdl G = pmdl F \\<Longrightarrow> reduced_GB F = G\"", "lemma ideal_eq_UNIV_iff_reduced_GB_eq_one_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> punit.dgrad_p_set d m\"\n  shows \"ideal F = UNIV \\<longleftrightarrow> punit.reduced_GB F = {1}\"", "lemmas ideal_eq_UNIV_iff_reduced_GB_eq_one_finite =\n  ideal_eq_UNIV_iff_reduced_GB_eq_one_dgrad_p_set[OF dickson_grading_dgrad_dummy punit.dgrad_p_set_exhaust_expl]", "lemmas ex_unique_reduced_GB =\n  ex_unique_reduced_GB_dgrad_p_set'[OF dickson_grading_zero _ subset_dgrad_p_set_zero]", "lemmas finite_reduced_GB =\n  finite_reduced_GB_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]", "lemmas reduced_GB_is_reduced_GB =\n  reduced_GB_is_reduced_GB_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]", "lemmas reduced_GB_is_GB =\n  reduced_GB_is_GB_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]", "lemmas reduced_GB_is_auto_reduced =\n  reduced_GB_is_auto_reduced_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]", "lemmas reduced_GB_is_monic_set =\n  reduced_GB_is_monic_set_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]", "lemmas reduced_GB_nonzero =\n  reduced_GB_nonzero_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]", "lemmas reduced_GB_pmdl =\n  reduced_GB_pmdl_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]", "lemmas reduced_GB_unique =\n  reduced_GB_unique_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], "translations": [["", "lemma (in gd_term) GB_image_monic: \"is_Groebner_basis (monic ` G) \\<longleftrightarrow> is_Groebner_basis G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis (monic ` G) = is_Groebner_basis G", "by (simp add: GB_alt_1)"], ["", "subsection \\<open>Definition and Uniqueness of Reduced Gr\\\"obner Bases\\<close>"], ["", "context ordered_term\nbegin"], ["", "definition is_reduced_GB :: \"('t \\<Rightarrow>\\<^sub>0 'b::field) set \\<Rightarrow> bool\" where\n  \"is_reduced_GB B \\<equiv> is_Groebner_basis B \\<and> is_auto_reduced B \\<and> is_monic_set B \\<and> 0 \\<notin> B\""], ["", "lemma reduced_GB_D1:\n  assumes \"is_reduced_GB G\"\n  shows \"is_Groebner_basis G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis G", "using assms"], ["proof (prove)\nusing this:\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. is_Groebner_basis G", "unfolding is_reduced_GB_def"], ["proof (prove)\nusing this:\n  is_Groebner_basis G \\<and>\n  is_auto_reduced G \\<and> is_monic_set G \\<and> 0 \\<notin> G\n\ngoal (1 subgoal):\n 1. is_Groebner_basis G", "by simp"], ["", "lemma reduced_GB_D2:\n  assumes \"is_reduced_GB G\"\n  shows \"is_auto_reduced G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_auto_reduced G", "using assms"], ["proof (prove)\nusing this:\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. is_auto_reduced G", "unfolding is_reduced_GB_def"], ["proof (prove)\nusing this:\n  is_Groebner_basis G \\<and>\n  is_auto_reduced G \\<and> is_monic_set G \\<and> 0 \\<notin> G\n\ngoal (1 subgoal):\n 1. is_auto_reduced G", "by simp"], ["", "lemma reduced_GB_D3:\n  assumes \"is_reduced_GB G\"\n  shows \"is_monic_set G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_monic_set G", "using assms"], ["proof (prove)\nusing this:\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. is_monic_set G", "unfolding is_reduced_GB_def"], ["proof (prove)\nusing this:\n  is_Groebner_basis G \\<and>\n  is_auto_reduced G \\<and> is_monic_set G \\<and> 0 \\<notin> G\n\ngoal (1 subgoal):\n 1. is_monic_set G", "by simp"], ["", "lemma reduced_GB_D4:\n  assumes \"is_reduced_GB G\" and \"g \\<in> G\"\n  shows \"g \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  is_reduced_GB G\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "unfolding is_reduced_GB_def"], ["proof (prove)\nusing this:\n  is_Groebner_basis G \\<and>\n  is_auto_reduced G \\<and> is_monic_set G \\<and> 0 \\<notin> G\n  g \\<in> G\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "by auto"], ["", "lemma reduced_GB_lc:\n  assumes major: \"is_reduced_GB G\" and \"g \\<in> G\"\n  shows \"lc g = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc g = (1::'b)", "by (rule is_monic_setD, rule reduced_GB_D3, fact major, fact \\<open>g \\<in> G\\<close>, rule reduced_GB_D4, fact major, fact \\<open>g \\<in> G\\<close>)"], ["", "end"], ["", "(* ordered_term *)"], ["", "context gd_term\nbegin"], ["", "lemma is_reduced_GB_subsetI:\n  assumes Ared: \"is_reduced_GB A\" and BGB: \"is_Groebner_basis B\" and Bmon: \"is_monic_set B\"\n    and *: \"\\<And>a b. a \\<in> A \\<Longrightarrow> b \\<in> B \\<Longrightarrow> a \\<noteq> 0 \\<Longrightarrow> b \\<noteq> 0 \\<Longrightarrow> a - b \\<noteq> 0 \\<Longrightarrow> lt (a - b) \\<in> keys b \\<Longrightarrow> lt (a - b) \\<prec>\\<^sub>t lt b \\<Longrightarrow> False\"\n    and id_eq: \"pmdl A = pmdl B\"\n  shows \"A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "have \"a \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0", "by (rule reduced_GB_D4, fact Ared, fact \\<open>a \\<in> A\\<close>)"], ["proof (state)\nthis:\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "have lca: \"lc a = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc a = (1::'b)", "by (rule reduced_GB_lc, fact Ared, fact \\<open>a \\<in> A\\<close>)"], ["proof (state)\nthis:\n  lc a = (1::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "have AGB: \"is_Groebner_basis A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis A", "by (rule reduced_GB_D1, fact Ared)"], ["proof (state)\nthis:\n  is_Groebner_basis A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "from \\<open>a \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> A", "have \"a \\<in> pmdl A\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> pmdl A", "by (rule pmdl.span_base)"], ["proof (state)\nthis:\n  a \\<in> pmdl A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "also"], ["proof (state)\nthis:\n  a \\<in> pmdl A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "have \"... = pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl A = pmdl B", "using id_eq"], ["proof (prove)\nusing this:\n  pmdl A = pmdl B\n\ngoal (1 subgoal):\n 1. pmdl A = pmdl B", "by simp"], ["proof (state)\nthis:\n  pmdl A = pmdl B\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "finally"], ["proof (chain)\npicking this:\n  a \\<in> pmdl B", "have \"a \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  a \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. a \\<in> pmdl B", "."], ["proof (state)\nthis:\n  a \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "from BGB this \\<open>a \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  is_Groebner_basis B\n  a \\<in> pmdl B\n  a \\<noteq> 0", "obtain b where \"b \\<in> B\" and \"b \\<noteq> 0\" and baddsa: \"lt b adds\\<^sub>t lt a\""], ["proof (prove)\nusing this:\n  is_Groebner_basis B\n  a \\<in> pmdl B\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> B; b \\<noteq> 0; lt b adds\\<^sub>t lt a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule GB_adds_lt)"], ["proof (state)\nthis:\n  b \\<in> B\n  b \\<noteq> 0\n  lt b adds\\<^sub>t lt a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "from Bmon this(1) this(2)"], ["proof (chain)\npicking this:\n  is_monic_set B\n  b \\<in> B\n  b \\<noteq> 0", "have lcb: \"lc b = 1\""], ["proof (prove)\nusing this:\n  is_monic_set B\n  b \\<in> B\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc b = (1::'b)", "by (rule is_monic_setD)"], ["proof (state)\nthis:\n  lc b = (1::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "from \\<open>b \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> B", "have \"b \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. b \\<in> pmdl B", "by (rule pmdl.span_base)"], ["proof (state)\nthis:\n  b \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "also"], ["proof (state)\nthis:\n  b \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "have \"... = pmdl A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl B = pmdl A", "using id_eq"], ["proof (prove)\nusing this:\n  pmdl A = pmdl B\n\ngoal (1 subgoal):\n 1. pmdl B = pmdl A", "by simp"], ["proof (state)\nthis:\n  pmdl B = pmdl A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "finally"], ["proof (chain)\npicking this:\n  b \\<in> pmdl A", "have \"b \\<in> pmdl A\""], ["proof (prove)\nusing this:\n  b \\<in> pmdl A\n\ngoal (1 subgoal):\n 1. b \\<in> pmdl A", "."], ["proof (state)\nthis:\n  b \\<in> pmdl A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "have lt_eq: \"lt b = lt a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt b = lt a", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lt b \\<noteq> lt a \\<Longrightarrow> False", "assume \"lt b \\<noteq> lt a\""], ["proof (state)\nthis:\n  lt b \\<noteq> lt a\n\ngoal (1 subgoal):\n 1. lt b \\<noteq> lt a \\<Longrightarrow> False", "from AGB \\<open>b \\<in> pmdl A\\<close> \\<open>b \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  is_Groebner_basis A\n  b \\<in> pmdl A\n  b \\<noteq> 0", "obtain a'\n      where \"a' \\<in> A\" and \"a' \\<noteq> 0\" and a'addsb: \"lt a' adds\\<^sub>t lt b\""], ["proof (prove)\nusing this:\n  is_Groebner_basis A\n  b \\<in> pmdl A\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>a' \\<in> A; a' \\<noteq> 0; lt a' adds\\<^sub>t lt b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule GB_adds_lt)"], ["proof (state)\nthis:\n  a' \\<in> A\n  a' \\<noteq> 0\n  lt a' adds\\<^sub>t lt b\n\ngoal (1 subgoal):\n 1. lt b \\<noteq> lt a \\<Longrightarrow> False", "have a'addsa: \"lt a' adds\\<^sub>t lt a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt a' adds\\<^sub>t lt a", "by (rule adds_term_trans, fact a'addsb, fact baddsa)"], ["proof (state)\nthis:\n  lt a' adds\\<^sub>t lt a\n\ngoal (1 subgoal):\n 1. lt b \\<noteq> lt a \\<Longrightarrow> False", "have \"lt a' \\<noteq> lt a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt a' \\<noteq> lt a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lt a' = lt a \\<Longrightarrow> False", "assume \"lt a' = lt a\""], ["proof (state)\nthis:\n  lt a' = lt a\n\ngoal (1 subgoal):\n 1. lt a' = lt a \\<Longrightarrow> False", "hence aaddsa': \"lt a adds\\<^sub>t lt a'\""], ["proof (prove)\nusing this:\n  lt a' = lt a\n\ngoal (1 subgoal):\n 1. lt a adds\\<^sub>t lt a'", "by (simp add: adds_term_refl)"], ["proof (state)\nthis:\n  lt a adds\\<^sub>t lt a'\n\ngoal (1 subgoal):\n 1. lt a' = lt a \\<Longrightarrow> False", "have \"lt a adds\\<^sub>t lt b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt a adds\\<^sub>t lt b", "by (rule adds_term_trans, fact aaddsa', fact a'addsb)"], ["proof (state)\nthis:\n  lt a adds\\<^sub>t lt b\n\ngoal (1 subgoal):\n 1. lt a' = lt a \\<Longrightarrow> False", "have \"lt a = lt b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt a = lt b", "by (rule adds_term_antisym, fact+)"], ["proof (state)\nthis:\n  lt a = lt b\n\ngoal (1 subgoal):\n 1. lt a' = lt a \\<Longrightarrow> False", "with \\<open>lt b \\<noteq> lt a\\<close>"], ["proof (chain)\npicking this:\n  lt b \\<noteq> lt a\n  lt a = lt b", "show False"], ["proof (prove)\nusing this:\n  lt b \\<noteq> lt a\n  lt a = lt b\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt a' \\<noteq> lt a\n\ngoal (1 subgoal):\n 1. lt b \\<noteq> lt a \\<Longrightarrow> False", "hence \"a' \\<noteq> a\""], ["proof (prove)\nusing this:\n  lt a' \\<noteq> lt a\n\ngoal (1 subgoal):\n 1. a' \\<noteq> a", "by auto"], ["proof (state)\nthis:\n  a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. lt b \\<noteq> lt a \\<Longrightarrow> False", "with \\<open>a' \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  a' \\<in> A\n  a' \\<noteq> a", "have \"a' \\<in> A - {a}\""], ["proof (prove)\nusing this:\n  a' \\<in> A\n  a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. a' \\<in> A - {a}", "by blast"], ["proof (state)\nthis:\n  a' \\<in> A - {a}\n\ngoal (1 subgoal):\n 1. lt b \\<noteq> lt a \\<Longrightarrow> False", "have is_red: \"is_red (A - {a}) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (A - {a}) a", "by (intro is_red_addsI, fact, fact, rule lt_in_keys, fact+)"], ["proof (state)\nthis:\n  is_red (A - {a}) a\n\ngoal (1 subgoal):\n 1. lt b \\<noteq> lt a \\<Longrightarrow> False", "have \"\\<not> is_red (A - {a}) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red (A - {a}) a", "by (rule is_auto_reducedD, rule reduced_GB_D2, fact Ared, fact+)"], ["proof (state)\nthis:\n  \\<not> is_red (A - {a}) a\n\ngoal (1 subgoal):\n 1. lt b \\<noteq> lt a \\<Longrightarrow> False", "from this is_red"], ["proof (chain)\npicking this:\n  \\<not> is_red (A - {a}) a\n  is_red (A - {a}) a", "show False"], ["proof (prove)\nusing this:\n  \\<not> is_red (A - {a}) a\n  is_red (A - {a}) a\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt b = lt a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "have \"a - b = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - b = 0", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "let ?c = \"a - b\""], ["proof (state)\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "assume \"?c \\<noteq> 0\""], ["proof (state)\nthis:\n  a - b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "have \"?c \\<in> pmdl A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - b \\<in> pmdl A", "by (rule pmdl.span_diff, fact+)"], ["proof (state)\nthis:\n  a - b \\<in> pmdl A\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  a - b \\<in> pmdl A\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "have \"... = pmdl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl A = pmdl B", "using id_eq"], ["proof (prove)\nusing this:\n  pmdl A = pmdl B\n\ngoal (1 subgoal):\n 1. pmdl A = pmdl B", "by simp"], ["proof (state)\nthis:\n  pmdl A = pmdl B\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  a - b \\<in> pmdl B", "have \"?c \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  a - b \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. a - b \\<in> pmdl B", "."], ["proof (state)\nthis:\n  a - b \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "from \\<open>b \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  b \\<noteq> 0", "have \"- b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. - b \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  - b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "have \"lt (-b) = lt a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (- b) = lt a", "unfolding lt_uminus"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt b = lt a", "by fact"], ["proof (state)\nthis:\n  lt (- b) = lt a\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "have \"lc (-b) = - lc a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (- b) = - lc a", "unfolding lc_uminus lca lcb"], ["proof (prove)\ngoal (1 subgoal):\n 1. - (1::'b) = - (1::'b)", ".."], ["proof (state)\nthis:\n  lc (- b) = - lc a\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "from \\<open>?c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  a - b \\<noteq> 0", "have \"a + (-b) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  a - b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a + - b \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  a + - b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "have \"lt ?c \\<in> keys ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (a - b) \\<in> keys (a - b)", "by (rule lt_in_keys, fact)"], ["proof (state)\nthis:\n  lt (a - b) \\<in> keys (a - b)\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "have \"keys ?c \\<subseteq> (keys a \\<union> keys b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (a - b) \\<subseteq> keys a \\<union> keys b", "by (fact keys_minus)"], ["proof (state)\nthis:\n  keys (a - b) \\<subseteq> keys a \\<union> keys b\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "with \\<open>lt ?c \\<in> keys ?c\\<close>"], ["proof (chain)\npicking this:\n  lt (a - b) \\<in> keys (a - b)\n  keys (a - b) \\<subseteq> keys a \\<union> keys b", "have \"lt ?c \\<in> keys a \\<or> lt ?c \\<in> keys b\""], ["proof (prove)\nusing this:\n  lt (a - b) \\<in> keys (a - b)\n  keys (a - b) \\<subseteq> keys a \\<union> keys b\n\ngoal (1 subgoal):\n 1. lt (a - b) \\<in> keys a \\<or> lt (a - b) \\<in> keys b", "by auto"], ["proof (state)\nthis:\n  lt (a - b) \\<in> keys a \\<or> lt (a - b) \\<in> keys b\n\ngoal (1 subgoal):\n 1. a - b \\<noteq> 0 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  lt (a - b) \\<in> keys a \\<or> lt (a - b) \\<in> keys b\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "assume \"lt ?c \\<in> keys a\""], ["proof (state)\nthis:\n  lt (a - b) \\<in> keys a\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "from AGB \\<open>?c \\<in> pmdl A\\<close> \\<open>?c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  is_Groebner_basis A\n  a - b \\<in> pmdl A\n  a - b \\<noteq> 0", "obtain a'\n        where \"a' \\<in> A\" and \"a' \\<noteq> 0\" and a'addsc: \"lt a' adds\\<^sub>t lt ?c\""], ["proof (prove)\nusing this:\n  is_Groebner_basis A\n  a - b \\<in> pmdl A\n  a - b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>a' \\<in> A; a' \\<noteq> 0;\n         lt a' adds\\<^sub>t lt (a - b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule GB_adds_lt)"], ["proof (state)\nthis:\n  a' \\<in> A\n  a' \\<noteq> 0\n  lt a' adds\\<^sub>t lt (a - b)\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "from a'addsc"], ["proof (chain)\npicking this:\n  lt a' adds\\<^sub>t lt (a - b)", "have \"lt a' \\<preceq>\\<^sub>t lt ?c\""], ["proof (prove)\nusing this:\n  lt a' adds\\<^sub>t lt (a - b)\n\ngoal (1 subgoal):\n 1. lt a' \\<preceq>\\<^sub>t lt (a - b)", "by (rule ord_adds_term)"], ["proof (state)\nthis:\n  lt a' \\<preceq>\\<^sub>t lt (a - b)\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lt a' \\<preceq>\\<^sub>t lt (a - b)\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "have \"... = lt (a + (- b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (a - b) = lt (a + - b)", "by simp"], ["proof (state)\nthis:\n  lt (a - b) = lt (a + - b)\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  lt (a - b) = lt (a + - b)\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "have \"... \\<prec>\\<^sub>t lt a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (a + - b) \\<prec>\\<^sub>t lt a", "by (rule lt_plus_lessI, fact+)"], ["proof (state)\nthis:\n  lt (a + - b) \\<prec>\\<^sub>t lt a\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  lt a' \\<prec>\\<^sub>t lt a", "have \"lt a' \\<prec>\\<^sub>t lt a\""], ["proof (prove)\nusing this:\n  lt a' \\<prec>\\<^sub>t lt a\n\ngoal (1 subgoal):\n 1. lt a' \\<prec>\\<^sub>t lt a", "."], ["proof (state)\nthis:\n  lt a' \\<prec>\\<^sub>t lt a\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "hence \"lt a' \\<noteq> lt a\""], ["proof (prove)\nusing this:\n  lt a' \\<prec>\\<^sub>t lt a\n\ngoal (1 subgoal):\n 1. lt a' \\<noteq> lt a", "by simp"], ["proof (state)\nthis:\n  lt a' \\<noteq> lt a\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "hence \"a' \\<noteq> a\""], ["proof (prove)\nusing this:\n  lt a' \\<noteq> lt a\n\ngoal (1 subgoal):\n 1. a' \\<noteq> a", "by auto"], ["proof (state)\nthis:\n  a' \\<noteq> a\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "with \\<open>a' \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  a' \\<in> A\n  a' \\<noteq> a", "have \"a' \\<in> A - {a}\""], ["proof (prove)\nusing this:\n  a' \\<in> A\n  a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. a' \\<in> A - {a}", "by blast"], ["proof (state)\nthis:\n  a' \\<in> A - {a}\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "have is_red: \"is_red (A - {a}) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (A - {a}) a", "by (intro is_red_addsI, fact, fact, fact+)"], ["proof (state)\nthis:\n  is_red (A - {a}) a\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "have \"\\<not> is_red (A - {a}) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red (A - {a}) a", "by (rule is_auto_reducedD, rule reduced_GB_D2, fact Ared, fact+)"], ["proof (state)\nthis:\n  \\<not> is_red (A - {a}) a\n\ngoal (2 subgoals):\n 1. lt (a - b) \\<in> keys a \\<Longrightarrow> False\n 2. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "from this is_red"], ["proof (chain)\npicking this:\n  \\<not> is_red (A - {a}) a\n  is_red (A - {a}) a", "show False"], ["proof (prove)\nusing this:\n  \\<not> is_red (A - {a}) a\n  is_red (A - {a}) a\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "assume \"lt ?c \\<in> keys b\""], ["proof (state)\nthis:\n  lt (a - b) \\<in> keys b\n\ngoal (1 subgoal):\n 1. lt (a - b) \\<in> keys b \\<Longrightarrow> False", "with \\<open>a \\<in> A\\<close> \\<open>b \\<in> B\\<close> \\<open>a \\<noteq> 0\\<close> \\<open>b \\<noteq> 0\\<close> \\<open>?c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> A\n  b \\<in> B\n  a \\<noteq> 0\n  b \\<noteq> 0\n  a - b \\<noteq> 0\n  lt (a - b) \\<in> keys b", "show False"], ["proof (prove)\nusing this:\n  a \\<in> A\n  b \\<in> B\n  a \\<noteq> 0\n  b \\<noteq> 0\n  a - b \\<noteq> 0\n  lt (a - b) \\<in> keys b\n\ngoal (1 subgoal):\n 1. False", "proof (rule *)"], ["proof (state)\ngoal (1 subgoal):\n 1. lt (a - b) \\<prec>\\<^sub>t lt b", "have \"lt ?c = lt ((- b) + a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (a - b) = lt (- b + a)", "by simp"], ["proof (state)\nthis:\n  lt (a - b) = lt (- b + a)\n\ngoal (1 subgoal):\n 1. lt (a - b) \\<prec>\\<^sub>t lt b", "also"], ["proof (state)\nthis:\n  lt (a - b) = lt (- b + a)\n\ngoal (1 subgoal):\n 1. lt (a - b) \\<prec>\\<^sub>t lt b", "have \"... \\<prec>\\<^sub>t lt (-b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (- b + a) \\<prec>\\<^sub>t lt (- b)", "proof (rule lt_plus_lessI)"], ["proof (state)\ngoal (3 subgoals):\n 1. - b + a \\<noteq> 0\n 2. lt a = lt (- b)\n 3. lc a = - lc (- b)", "from \\<open>?c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  a - b \\<noteq> 0", "show \"-b + a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  a - b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. - b + a \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  - b + a \\<noteq> 0\n\ngoal (2 subgoals):\n 1. lt a = lt (- b)\n 2. lc a = - lc (- b)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. lt a = lt (- b)\n 2. lc a = - lc (- b)", "from \\<open>lt (-b) = lt a\\<close>"], ["proof (chain)\npicking this:\n  lt (- b) = lt a", "show \"lt a = lt (-b)\""], ["proof (prove)\nusing this:\n  lt (- b) = lt a\n\ngoal (1 subgoal):\n 1. lt a = lt (- b)", "by simp"], ["proof (state)\nthis:\n  lt a = lt (- b)\n\ngoal (1 subgoal):\n 1. lc a = - lc (- b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lc a = - lc (- b)", "from \\<open>lc (-b) = - lc a\\<close>"], ["proof (chain)\npicking this:\n  lc (- b) = - lc a", "show \"lc a = - lc (-b)\""], ["proof (prove)\nusing this:\n  lc (- b) = - lc a\n\ngoal (1 subgoal):\n 1. lc a = - lc (- b)", "by simp"], ["proof (state)\nthis:\n  lc a = - lc (- b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (- b + a) \\<prec>\\<^sub>t lt (- b)\n\ngoal (1 subgoal):\n 1. lt (a - b) \\<prec>\\<^sub>t lt b", "finally"], ["proof (chain)\npicking this:\n  lt (a - b) \\<prec>\\<^sub>t lt (- b)", "show \"lt ?c \\<prec>\\<^sub>t lt b\""], ["proof (prove)\nusing this:\n  lt (a - b) \\<prec>\\<^sub>t lt (- b)\n\ngoal (1 subgoal):\n 1. lt (a - b) \\<prec>\\<^sub>t lt b", "unfolding lt_uminus"], ["proof (prove)\nusing this:\n  lt (a - b) \\<prec>\\<^sub>t lt b\n\ngoal (1 subgoal):\n 1. lt (a - b) \\<prec>\\<^sub>t lt b", "."], ["proof (state)\nthis:\n  lt (a - b) \\<prec>\\<^sub>t lt b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a - b = 0\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "hence \"a = b\""], ["proof (prove)\nusing this:\n  a - b = 0\n\ngoal (1 subgoal):\n 1. a = b", "by simp"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> B", "with \\<open>b \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> B\n  a = b", "show \"a \\<in> B\""], ["proof (prove)\nusing this:\n  b \\<in> B\n  a = b\n\ngoal (1 subgoal):\n 1. a \\<in> B", "by simp"], ["proof (state)\nthis:\n  a \\<in> B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_reduced_GB_unique':\n  assumes Ared: \"is_reduced_GB A\" and Bred: \"is_reduced_GB B\" and id_eq: \"pmdl A = pmdl B\"\n  shows \"A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "from Bred"], ["proof (chain)\npicking this:\n  is_reduced_GB B", "have BGB: \"is_Groebner_basis B\""], ["proof (prove)\nusing this:\n  is_reduced_GB B\n\ngoal (1 subgoal):\n 1. is_Groebner_basis B", "by (rule reduced_GB_D1)"], ["proof (state)\nthis:\n  is_Groebner_basis B\n\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "with assms(1)"], ["proof (chain)\npicking this:\n  is_reduced_GB A\n  is_Groebner_basis B", "show ?thesis"], ["proof (prove)\nusing this:\n  is_reduced_GB A\n  is_Groebner_basis B\n\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "proof (rule is_reduced_GB_subsetI)"], ["proof (state)\ngoal (3 subgoals):\n 1. is_monic_set B\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 3. pmdl A = pmdl B", "from Bred"], ["proof (chain)\npicking this:\n  is_reduced_GB B", "show \"is_monic_set B\""], ["proof (prove)\nusing this:\n  is_reduced_GB B\n\ngoal (1 subgoal):\n 1. is_monic_set B", "by (rule reduced_GB_D3)"], ["proof (state)\nthis:\n  is_monic_set B\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "fix a b :: \"'t \\<Rightarrow>\\<^sub>0 'b\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "let ?c = \"a - b\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "assume \"a \\<in> A\" and \"b \\<in> B\" and \"a \\<noteq> 0\" and \"b \\<noteq> 0\" and \"?c \\<noteq> 0\" and \"lt ?c \\<in> keys b\" and \"lt ?c \\<prec>\\<^sub>t lt b\""], ["proof (state)\nthis:\n  a \\<in> A\n  b \\<in> B\n  a \\<noteq> 0\n  b \\<noteq> 0\n  a - b \\<noteq> 0\n  lt (a - b) \\<in> keys b\n  lt (a - b) \\<prec>\\<^sub>t lt b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "from \\<open>a \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> A", "have \"a \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> pmdl B", "by (simp only: id_eq[symmetric], rule pmdl.span_base)"], ["proof (state)\nthis:\n  a \\<in> pmdl B\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "moreover"], ["proof (state)\nthis:\n  a \\<in> pmdl B\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "from \\<open>b \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> B", "have \"b \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. b \\<in> pmdl B", "by (rule pmdl.span_base)"], ["proof (state)\nthis:\n  b \\<in> pmdl B\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> pmdl B\n  b \\<in> pmdl B", "have \"?c \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  a \\<in> pmdl B\n  b \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. a - b \\<in> pmdl B", "by (rule pmdl.span_diff)"], ["proof (state)\nthis:\n  a - b \\<in> pmdl B\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "from BGB this \\<open>?c \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  is_Groebner_basis B\n  a - b \\<in> pmdl B\n  a - b \\<noteq> 0", "obtain b'\n      where \"b' \\<in> B\" and \"b' \\<noteq> 0\" and b'addsc: \"lt b' adds\\<^sub>t lt ?c\""], ["proof (prove)\nusing this:\n  is_Groebner_basis B\n  a - b \\<in> pmdl B\n  a - b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        \\<lbrakk>b' \\<in> B; b' \\<noteq> 0;\n         lt b' adds\\<^sub>t lt (a - b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule GB_adds_lt)"], ["proof (state)\nthis:\n  b' \\<in> B\n  b' \\<noteq> 0\n  lt b' adds\\<^sub>t lt (a - b)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "from b'addsc"], ["proof (chain)\npicking this:\n  lt b' adds\\<^sub>t lt (a - b)", "have \"lt b' \\<preceq>\\<^sub>t lt ?c\""], ["proof (prove)\nusing this:\n  lt b' adds\\<^sub>t lt (a - b)\n\ngoal (1 subgoal):\n 1. lt b' \\<preceq>\\<^sub>t lt (a - b)", "by (rule ord_adds_term)"], ["proof (state)\nthis:\n  lt b' \\<preceq>\\<^sub>t lt (a - b)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "also"], ["proof (state)\nthis:\n  lt b' \\<preceq>\\<^sub>t lt (a - b)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "have \"... \\<prec>\\<^sub>t lt b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (a - b) \\<prec>\\<^sub>t lt b", "by fact"], ["proof (state)\nthis:\n  lt (a - b) \\<prec>\\<^sub>t lt b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "finally"], ["proof (chain)\npicking this:\n  lt b' \\<prec>\\<^sub>t lt b", "have \"lt b' \\<prec>\\<^sub>t lt b\""], ["proof (prove)\nusing this:\n  lt b' \\<prec>\\<^sub>t lt b\n\ngoal (1 subgoal):\n 1. lt b' \\<prec>\\<^sub>t lt b", "unfolding lt_uminus"], ["proof (prove)\nusing this:\n  lt b' \\<prec>\\<^sub>t lt b\n\ngoal (1 subgoal):\n 1. lt b' \\<prec>\\<^sub>t lt b", "."], ["proof (state)\nthis:\n  lt b' \\<prec>\\<^sub>t lt b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "hence \"lt b' \\<noteq> lt b\""], ["proof (prove)\nusing this:\n  lt b' \\<prec>\\<^sub>t lt b\n\ngoal (1 subgoal):\n 1. lt b' \\<noteq> lt b", "by simp"], ["proof (state)\nthis:\n  lt b' \\<noteq> lt b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "hence \"b' \\<noteq> b\""], ["proof (prove)\nusing this:\n  lt b' \\<noteq> lt b\n\ngoal (1 subgoal):\n 1. b' \\<noteq> b", "by auto"], ["proof (state)\nthis:\n  b' \\<noteq> b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "with \\<open>b' \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  b' \\<in> B\n  b' \\<noteq> b", "have \"b' \\<in> B - {b}\""], ["proof (prove)\nusing this:\n  b' \\<in> B\n  b' \\<noteq> b\n\ngoal (1 subgoal):\n 1. b' \\<in> B - {b}", "by blast"], ["proof (state)\nthis:\n  b' \\<in> B - {b}\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "have is_red: \"is_red (B - {b}) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_red (B - {b}) b", "by (intro is_red_addsI, fact, fact, fact+)"], ["proof (state)\nthis:\n  is_red (B - {b}) b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "have \"\\<not> is_red (B - {b}) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_red (B - {b}) b", "by (rule is_auto_reducedD, rule reduced_GB_D2, fact Bred, fact+)"], ["proof (state)\nthis:\n  \\<not> is_red (B - {b}) b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> A; b \\<in> B; a \\<noteq> 0; b \\<noteq> 0;\n        a - b \\<noteq> 0; lt (a - b) \\<in> keys b;\n        lt (a - b) \\<prec>\\<^sub>t lt b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. pmdl A = pmdl B", "from this is_red"], ["proof (chain)\npicking this:\n  \\<not> is_red (B - {b}) b\n  is_red (B - {b}) b", "show False"], ["proof (prove)\nusing this:\n  \\<not> is_red (B - {b}) b\n  is_red (B - {b}) b\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. pmdl A = pmdl B", "qed fact"], ["proof (state)\nthis:\n  A \\<subseteq> B\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem is_reduced_GB_unique:\n  assumes Ared: \"is_reduced_GB A\" and Bred: \"is_reduced_GB B\" and id_eq: \"pmdl A = pmdl B\"\n  shows \"A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. A \\<subseteq> B\n 2. B \\<subseteq> A", "from assms"], ["proof (chain)\npicking this:\n  is_reduced_GB A\n  is_reduced_GB B\n  pmdl A = pmdl B", "show \"A \\<subseteq> B\""], ["proof (prove)\nusing this:\n  is_reduced_GB A\n  is_reduced_GB B\n  pmdl A = pmdl B\n\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "by (rule is_reduced_GB_unique')"], ["proof (state)\nthis:\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. B \\<subseteq> A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. B \\<subseteq> A", "from Bred Ared id_eq[symmetric]"], ["proof (chain)\npicking this:\n  is_reduced_GB B\n  is_reduced_GB A\n  pmdl B = pmdl A", "show \"B \\<subseteq> A\""], ["proof (prove)\nusing this:\n  is_reduced_GB B\n  is_reduced_GB A\n  pmdl B = pmdl A\n\ngoal (1 subgoal):\n 1. B \\<subseteq> A", "by (rule is_reduced_GB_unique')"], ["proof (state)\nthis:\n  B \\<subseteq> A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Computing Reduced Gr\\\"obner Bases by Auto-Reduction\\<close>"], ["", "subsubsection \\<open>Minimal Bases\\<close>"], ["", "lemma minimal_basis_is_reduced_GB:\n  assumes \"is_minimal_basis B\" and \"is_monic_set B\" and \"is_reduced_GB G\" and \"G \\<subseteq> B\"\n    and \"pmdl B = pmdl G\"\n  shows \"B = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B = G", "using _ assms(3) assms(5)"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  is_reduced_GB G\n  pmdl B = pmdl G\n\ngoal (1 subgoal):\n 1. B = G", "proof (rule is_reduced_GB_unique)"], ["proof (state)\ngoal (1 subgoal):\n 1. is_reduced_GB B", "from assms(3)"], ["proof (chain)\npicking this:\n  is_reduced_GB G", "have \"is_Groebner_basis G\""], ["proof (prove)\nusing this:\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. is_Groebner_basis G", "by (rule reduced_GB_D1)"], ["proof (state)\nthis:\n  is_Groebner_basis G\n\ngoal (1 subgoal):\n 1. is_reduced_GB B", "show \"is_reduced_GB B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_reduced_GB B", "unfolding is_reduced_GB_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis B \\<and>\n    is_auto_reduced B \\<and> is_monic_set B \\<and> 0 \\<notin> B", "proof (intro conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. is_Groebner_basis B\n 2. is_auto_reduced B\n 3. is_monic_set B\n 4. 0 \\<notin> B", "show \"0 \\<notin> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> B", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<in> B \\<Longrightarrow> False", "assume \"0 \\<in> B\""], ["proof (state)\nthis:\n  0 \\<in> B\n\ngoal (1 subgoal):\n 1. 0 \\<in> B \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  is_minimal_basis B\n  0 \\<in> B", "have \"0 \\<noteq> (0::'t \\<Rightarrow>\\<^sub>0 'b)\""], ["proof (prove)\nusing this:\n  is_minimal_basis B\n  0 \\<in> B\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> 0", "by (rule is_minimal_basisD1)"], ["proof (state)\nthis:\n  0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 \\<in> B \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<notin> B\n\ngoal (3 subgoals):\n 1. is_Groebner_basis B\n 2. is_auto_reduced B\n 3. is_monic_set B", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. is_Groebner_basis B\n 2. is_auto_reduced B\n 3. is_monic_set B", "from \\<open>is_Groebner_basis G\\<close> assms(4) assms(5)"], ["proof (chain)\npicking this:\n  is_Groebner_basis G\n  G \\<subseteq> B\n  pmdl B = pmdl G", "show \"is_Groebner_basis B\""], ["proof (prove)\nusing this:\n  is_Groebner_basis G\n  G \\<subseteq> B\n  pmdl B = pmdl G\n\ngoal (1 subgoal):\n 1. is_Groebner_basis B", "by (rule GB_subset)"], ["proof (state)\nthis:\n  is_Groebner_basis B\n\ngoal (2 subgoals):\n 1. is_auto_reduced B\n 2. is_monic_set B", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. is_auto_reduced B\n 2. is_monic_set B", "show \"is_auto_reduced B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_auto_reduced B", "unfolding is_auto_reduced_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>B. \\<not> is_red (B - {b}) b", "proof (intro ballI notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"b \\<in> B\""], ["proof (state)\nthis:\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  is_minimal_basis B\n  b \\<in> B", "have \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_minimal_basis B\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0", "by (rule is_minimal_basisD1)"], ["proof (state)\nthis:\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"is_red (B - {b}) b\""], ["proof (state)\nthis:\n  is_red (B - {b}) b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_red (B - {b}) b", "obtain f where \"f \\<in> B - {b}\" and \"is_red {f} b\""], ["proof (prove)\nusing this:\n  is_red (B - {b}) b\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> B - {b}; is_red {f} b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule is_red_singletonI)"], ["proof (state)\nthis:\n  f \\<in> B - {b}\n  is_red {f} b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from this(1)"], ["proof (chain)\npicking this:\n  f \\<in> B - {b}", "have \"f \\<in> B\" and \"f \\<noteq> b\""], ["proof (prove)\nusing this:\n  f \\<in> B - {b}\n\ngoal (1 subgoal):\n 1. f \\<in> B &&& f \\<noteq> b", "by simp_all"], ["proof (state)\nthis:\n  f \\<in> B\n  f \\<noteq> b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from assms(1) \\<open>f \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  is_minimal_basis B\n  f \\<in> B", "have \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_minimal_basis B\n  f \\<in> B\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by (rule is_minimal_basisD1)"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>f \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> B", "have \"f \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  f \\<in> B\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl B", "by (rule pmdl.span_base)"], ["proof (state)\nthis:\n  f \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"f \\<in> pmdl G\""], ["proof (prove)\nusing this:\n  f \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl G", "by (simp only: assms(5))"], ["proof (state)\nthis:\n  f \\<in> pmdl G\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>is_Groebner_basis G\\<close> this \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  is_Groebner_basis G\n  f \\<in> pmdl G\n  f \\<noteq> 0", "obtain g where \"g \\<in> G\" and \"g \\<noteq> 0\" and \"lt g adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  is_Groebner_basis G\n  f \\<in> pmdl G\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> G; g \\<noteq> 0; lt g adds\\<^sub>t lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule GB_adds_lt)"], ["proof (state)\nthis:\n  g \\<in> G\n  g \\<noteq> 0\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>g \\<in> G\\<close> \\<open>G \\<subseteq> B\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> G\n  G \\<subseteq> B", "have \"g \\<in> B\""], ["proof (prove)\nusing this:\n  g \\<in> G\n  G \\<subseteq> B\n\ngoal (1 subgoal):\n 1. g \\<in> B", ".."], ["proof (state)\nthis:\n  g \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "have \"g = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = f", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<noteq> f \\<Longrightarrow> False", "assume \"g \\<noteq> f\""], ["proof (state)\nthis:\n  g \\<noteq> f\n\ngoal (1 subgoal):\n 1. g \\<noteq> f \\<Longrightarrow> False", "with assms(1) \\<open>g \\<in> B\\<close> \\<open>f \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  is_minimal_basis B\n  g \\<in> B\n  f \\<in> B\n  g \\<noteq> f", "have \"\\<not> lt g adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  is_minimal_basis B\n  g \\<in> B\n  f \\<in> B\n  g \\<noteq> f\n\ngoal (1 subgoal):\n 1. \\<not> lt g adds\\<^sub>t lt f", "by (rule is_minimal_basisD2)"], ["proof (state)\nthis:\n  \\<not> lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. g \\<noteq> f \\<Longrightarrow> False", "from this \\<open>lt g adds\\<^sub>t lt f\\<close>"], ["proof (chain)\npicking this:\n  \\<not> lt g adds\\<^sub>t lt f\n  lt g adds\\<^sub>t lt f", "show False"], ["proof (prove)\nusing this:\n  \\<not> lt g adds\\<^sub>t lt f\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g = f\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>g \\<in> G\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> G\n  g = f", "have \"f \\<in> G\""], ["proof (prove)\nusing this:\n  g \\<in> G\n  g = f\n\ngoal (1 subgoal):\n 1. f \\<in> G", "by simp"], ["proof (state)\nthis:\n  f \\<in> G\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>f \\<in> B - {b}\\<close> \\<open>is_red {f} b\\<close>"], ["proof (chain)\npicking this:\n  f \\<in> B - {b}\n  is_red {f} b\n  f \\<in> G", "have red: \"is_red (G - {b}) b\""], ["proof (prove)\nusing this:\n  f \\<in> B - {b}\n  is_red {f} b\n  f \\<in> G\n\ngoal (1 subgoal):\n 1. is_red (G - {b}) b", "by (meson Diff_iff is_red_singletonD)"], ["proof (state)\nthis:\n  is_red (G - {b}) b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>b \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> B", "have \"b \\<in> pmdl B\""], ["proof (prove)\nusing this:\n  b \\<in> B\n\ngoal (1 subgoal):\n 1. b \\<in> pmdl B", "by (rule pmdl.span_base)"], ["proof (state)\nthis:\n  b \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"b \\<in> pmdl G\""], ["proof (prove)\nusing this:\n  b \\<in> pmdl B\n\ngoal (1 subgoal):\n 1. b \\<in> pmdl G", "by (simp only: assms(5))"], ["proof (state)\nthis:\n  b \\<in> pmdl G\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>is_Groebner_basis G\\<close> this \\<open>b \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  is_Groebner_basis G\n  b \\<in> pmdl G\n  b \\<noteq> 0", "obtain g' where \"g' \\<in> G\" and \"g' \\<noteq> 0\" and \"lt g' adds\\<^sub>t lt b\""], ["proof (prove)\nusing this:\n  is_Groebner_basis G\n  b \\<in> pmdl G\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<lbrakk>g' \\<in> G; g' \\<noteq> 0; lt g' adds\\<^sub>t lt b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule GB_adds_lt)"], ["proof (state)\nthis:\n  g' \\<in> G\n  g' \\<noteq> 0\n  lt g' adds\\<^sub>t lt b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>g' \\<in> G\\<close> \\<open>G \\<subseteq> B\\<close>"], ["proof (chain)\npicking this:\n  g' \\<in> G\n  G \\<subseteq> B", "have \"g' \\<in> B\""], ["proof (prove)\nusing this:\n  g' \\<in> G\n  G \\<subseteq> B\n\ngoal (1 subgoal):\n 1. g' \\<in> B", ".."], ["proof (state)\nthis:\n  g' \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "have \"g' = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' = b", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. g' \\<noteq> b \\<Longrightarrow> False", "assume \"g' \\<noteq> b\""], ["proof (state)\nthis:\n  g' \\<noteq> b\n\ngoal (1 subgoal):\n 1. g' \\<noteq> b \\<Longrightarrow> False", "with assms(1) \\<open>g' \\<in> B\\<close> \\<open>b \\<in> B\\<close>"], ["proof (chain)\npicking this:\n  is_minimal_basis B\n  g' \\<in> B\n  b \\<in> B\n  g' \\<noteq> b", "have \"\\<not> lt g' adds\\<^sub>t lt b\""], ["proof (prove)\nusing this:\n  is_minimal_basis B\n  g' \\<in> B\n  b \\<in> B\n  g' \\<noteq> b\n\ngoal (1 subgoal):\n 1. \\<not> lt g' adds\\<^sub>t lt b", "by (rule is_minimal_basisD2)"], ["proof (state)\nthis:\n  \\<not> lt g' adds\\<^sub>t lt b\n\ngoal (1 subgoal):\n 1. g' \\<noteq> b \\<Longrightarrow> False", "from this \\<open>lt g' adds\\<^sub>t lt b\\<close>"], ["proof (chain)\npicking this:\n  \\<not> lt g' adds\\<^sub>t lt b\n  lt g' adds\\<^sub>t lt b", "show False"], ["proof (prove)\nusing this:\n  \\<not> lt g' adds\\<^sub>t lt b\n  lt g' adds\\<^sub>t lt b\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g' = b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>g' \\<in> G\\<close>"], ["proof (chain)\npicking this:\n  g' \\<in> G\n  g' = b", "have \"b \\<in> G\""], ["proof (prove)\nusing this:\n  g' \\<in> G\n  g' = b\n\ngoal (1 subgoal):\n 1. b \\<in> G", "by simp"], ["proof (state)\nthis:\n  b \\<in> G\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from assms(3)"], ["proof (chain)\npicking this:\n  is_reduced_GB G", "have \"is_auto_reduced G\""], ["proof (prove)\nusing this:\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. is_auto_reduced G", "by (rule reduced_GB_D2)"], ["proof (state)\nthis:\n  is_auto_reduced G\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from this \\<open>b \\<in> G\\<close>"], ["proof (chain)\npicking this:\n  is_auto_reduced G\n  b \\<in> G", "have \"\\<not> is_red (G - {b}) b\""], ["proof (prove)\nusing this:\n  is_auto_reduced G\n  b \\<in> G\n\ngoal (1 subgoal):\n 1. \\<not> is_red (G - {b}) b", "by (rule is_auto_reducedD)"], ["proof (state)\nthis:\n  \\<not> is_red (G - {b}) b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> B; is_red (B - {b}) b\\<rbrakk>\n       \\<Longrightarrow> False", "from this red"], ["proof (chain)\npicking this:\n  \\<not> is_red (G - {b}) b\n  is_red (G - {b}) b", "show False"], ["proof (prove)\nusing this:\n  \\<not> is_red (G - {b}) b\n  is_red (G - {b}) b\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_auto_reduced B\n\ngoal (1 subgoal):\n 1. is_monic_set B", "qed fact"], ["proof (state)\nthis:\n  is_reduced_GB B\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Computing Minimal Bases\\<close>"], ["", "lemma comp_min_basis_pmdl:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"pmdl (set (comp_min_basis xs)) = pmdl (set xs)\" (is \"pmdl (set ?ys) = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set (comp_min_basis xs)) = pmdl (set xs)", "using finite_set"], ["proof (prove)\nusing this:\n  finite (set ?xs)\n\ngoal (1 subgoal):\n 1. pmdl (set (comp_min_basis xs)) = pmdl (set xs)", "proof (rule pmdl_eqI_adds_lt_finite)"], ["proof (state)\ngoal (2 subgoals):\n 1. pmdl (set (comp_min_basis xs)) \\<subseteq> pmdl (set xs)\n 2. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "from comp_min_basis_subset"], ["proof (chain)\npicking this:\n  set (comp_min_basis ?xs) \\<subseteq> set ?xs", "show *: \"pmdl (set ?ys) \\<subseteq> pmdl (set xs)\""], ["proof (prove)\nusing this:\n  set (comp_min_basis ?xs) \\<subseteq> set ?xs\n\ngoal (1 subgoal):\n 1. pmdl (set (comp_min_basis xs)) \\<subseteq> pmdl (set xs)", "by (rule pmdl.span_mono)"], ["proof (state)\nthis:\n  pmdl (set (comp_min_basis xs)) \\<subseteq> pmdl (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "assume \"f \\<in> pmdl (set xs)\" and \"f \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<in> pmdl (set xs)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "with assms"], ["proof (chain)\npicking this:\n  is_Groebner_basis (set xs)\n  f \\<in> pmdl (set xs)\n  f \\<noteq> 0", "obtain g where \"g \\<in> set xs\" and \"g \\<noteq> 0\" and 1: \"lt g adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  is_Groebner_basis (set xs)\n  f \\<in> pmdl (set xs)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set xs; g \\<noteq> 0;\n         lt g adds\\<^sub>t lt f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule GB_adds_lt)"], ["proof (state)\nthis:\n  g \\<in> set xs\n  g \\<noteq> 0\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "from this(1, 2)"], ["proof (chain)\npicking this:\n  g \\<in> set xs\n  g \\<noteq> 0", "obtain g' where \"g' \\<in> set ?ys\" and 2: \"lt g' adds\\<^sub>t lt g\""], ["proof (prove)\nusing this:\n  g \\<in> set xs\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<lbrakk>g' \\<in> set (comp_min_basis xs);\n         lt g' adds\\<^sub>t lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule comp_min_basis_adds)"], ["proof (state)\nthis:\n  g' \\<in> set (comp_min_basis xs)\n  lt g' adds\\<^sub>t lt g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "note this(1)"], ["proof (state)\nthis:\n  g' \\<in> set (comp_min_basis xs)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "moreover"], ["proof (state)\nthis:\n  g' \\<in> set (comp_min_basis xs)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "from this"], ["proof (chain)\npicking this:\n  g' \\<in> set (comp_min_basis xs)", "have \"g' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g' \\<in> set (comp_min_basis xs)\n\ngoal (1 subgoal):\n 1. g' \\<noteq> 0", "by (rule comp_min_basis_nonzero)"], ["proof (state)\nthis:\n  g' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "moreover"], ["proof (state)\nthis:\n  g' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "from 2 1"], ["proof (chain)\npicking this:\n  lt g' adds\\<^sub>t lt g\n  lt g adds\\<^sub>t lt f", "have \"lt g' adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  lt g' adds\\<^sub>t lt g\n  lt g adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. lt g' adds\\<^sub>t lt f", "by (rule adds_term_trans)"], ["proof (state)\nthis:\n  lt g' adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set xs); f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>g\\<in>set (comp_min_basis xs).\n                            g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "ultimately"], ["proof (chain)\npicking this:\n  g' \\<in> set (comp_min_basis xs)\n  g' \\<noteq> 0\n  lt g' adds\\<^sub>t lt f", "show \"\\<exists>g\\<in>set ?ys. g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f\""], ["proof (prove)\nusing this:\n  g' \\<in> set (comp_min_basis xs)\n  g' \\<noteq> 0\n  lt g' adds\\<^sub>t lt f\n\ngoal (1 subgoal):\n 1. \\<exists>g\\<in>set (comp_min_basis xs).\n       g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f", "by blast"], ["proof (state)\nthis:\n  \\<exists>g\\<in>set (comp_min_basis xs).\n     g \\<noteq> 0 \\<and> lt g adds\\<^sub>t lt f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comp_min_basis_GB:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"is_Groebner_basis (set (comp_min_basis xs))\" (is \"is_Groebner_basis (set ?ys)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis (set (comp_min_basis xs))", "unfolding GB_alt_2_finite[OF finite_set]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>pmdl (set (comp_min_basis xs)).\n       f \\<noteq> 0 \\<longrightarrow> is_red (set (comp_min_basis xs)) f", "proof (intro ballI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_min_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_min_basis xs)) f", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_min_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_min_basis xs)) f", "assume \"f \\<in> pmdl (set ?ys)\""], ["proof (state)\nthis:\n  f \\<in> pmdl (set (comp_min_basis xs))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_min_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_min_basis xs)) f", "also"], ["proof (state)\nthis:\n  f \\<in> pmdl (set (comp_min_basis xs))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_min_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_min_basis xs)) f", "from assms"], ["proof (chain)\npicking this:\n  is_Groebner_basis (set xs)", "have \"\\<dots> = pmdl (set xs)\""], ["proof (prove)\nusing this:\n  is_Groebner_basis (set xs)\n\ngoal (1 subgoal):\n 1. pmdl (set (comp_min_basis xs)) = pmdl (set xs)", "by (rule comp_min_basis_pmdl)"], ["proof (state)\nthis:\n  pmdl (set (comp_min_basis xs)) = pmdl (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_min_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_min_basis xs)) f", "finally"], ["proof (chain)\npicking this:\n  f \\<in> pmdl (set xs)", "have \"f \\<in> pmdl (set xs)\""], ["proof (prove)\nusing this:\n  f \\<in> pmdl (set xs)\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl (set xs)", "."], ["proof (state)\nthis:\n  f \\<in> pmdl (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_min_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_min_basis xs)) f", "moreover"], ["proof (state)\nthis:\n  f \\<in> pmdl (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_min_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_min_basis xs)) f", "assume \"f \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_min_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_min_basis xs)) f", "ultimately"], ["proof (chain)\npicking this:\n  f \\<in> pmdl (set xs)\n  f \\<noteq> 0", "have \"is_red (set xs) f\""], ["proof (prove)\nusing this:\n  f \\<in> pmdl (set xs)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_red (set xs) f", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> pmdl (set xs)\n  f \\<noteq> 0\n  is_Groebner_basis (set xs)\n\ngoal (1 subgoal):\n 1. is_red (set xs) f", "unfolding GB_alt_2_finite[OF finite_set]"], ["proof (prove)\nusing this:\n  f \\<in> pmdl (set xs)\n  f \\<noteq> 0\n  \\<forall>f\\<in>pmdl (set xs).\n     f \\<noteq> 0 \\<longrightarrow> is_red (set xs) f\n\ngoal (1 subgoal):\n 1. is_red (set xs) f", "by blast"], ["proof (state)\nthis:\n  is_red (set xs) f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_min_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_min_basis xs)) f", "thus \"is_red (set ?ys) f\""], ["proof (prove)\nusing this:\n  is_red (set xs) f\n\ngoal (1 subgoal):\n 1. is_red (set (comp_min_basis xs)) f", "by (rule comp_min_basis_is_red)"], ["proof (state)\nthis:\n  is_red (set (comp_min_basis xs)) f\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Computing Reduced Bases\\<close>"], ["", "lemma comp_red_basis_pmdl:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"pmdl (set (comp_red_basis xs)) = pmdl (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set (comp_red_basis xs)) = pmdl (set xs)", "proof (rule, fact pmdl_comp_red_basis_subset, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pmdl (set xs) \\<Longrightarrow>\n       x \\<in> pmdl (set (comp_red_basis xs))", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pmdl (set xs) \\<Longrightarrow>\n       x \\<in> pmdl (set (comp_red_basis xs))", "assume \"f \\<in> pmdl (set xs)\""], ["proof (state)\nthis:\n  f \\<in> pmdl (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pmdl (set xs) \\<Longrightarrow>\n       x \\<in> pmdl (set (comp_red_basis xs))", "show \"f \\<in> pmdl (set (comp_red_basis xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> pmdl (set (comp_red_basis xs))", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> f \\<in> pmdl (set (comp_red_basis xs))\n 2. f \\<noteq> 0 \\<Longrightarrow> f \\<in> pmdl (set (comp_red_basis xs))", "case True"], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> f \\<in> pmdl (set (comp_red_basis xs))\n 2. f \\<noteq> 0 \\<Longrightarrow> f \\<in> pmdl (set (comp_red_basis xs))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> pmdl (set (comp_red_basis xs))", "unfolding True"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> pmdl (set (comp_red_basis xs))", "by (rule pmdl.span_zero)"], ["proof (state)\nthis:\n  f \\<in> pmdl (set (comp_red_basis xs))\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<in> pmdl (set (comp_red_basis xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<in> pmdl (set (comp_red_basis xs))", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<in> pmdl (set (comp_red_basis xs))", "let ?xs = \"comp_red_basis xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<in> pmdl (set (comp_red_basis xs))", "have \"(red (set ?xs))\\<^sup>*\\<^sup>* f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (red (set (comp_red_basis xs)))\\<^sup>*\\<^sup>* f 0", "proof (rule is_red_implies_0_red_finite, fact finite_set, fact pmdl_comp_red_basis_subset)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> pmdl (set xs); q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_red_basis xs)) q\n 2. f \\<in> pmdl (set xs)", "fix q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> pmdl (set xs); q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_red_basis xs)) q\n 2. f \\<in> pmdl (set xs)", "assume \"q \\<noteq> 0\" and \"q \\<in> pmdl (set xs)\""], ["proof (state)\nthis:\n  q \\<noteq> 0\n  q \\<in> pmdl (set xs)\n\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> pmdl (set xs); q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_red_basis xs)) q\n 2. f \\<in> pmdl (set xs)", "with assms"], ["proof (chain)\npicking this:\n  is_Groebner_basis (set xs)\n  q \\<noteq> 0\n  q \\<in> pmdl (set xs)", "have \"is_red (set xs) q\""], ["proof (prove)\nusing this:\n  is_Groebner_basis (set xs)\n  q \\<noteq> 0\n  q \\<in> pmdl (set xs)\n\ngoal (1 subgoal):\n 1. is_red (set xs) q", "by (rule GB_imp_reducibility)"], ["proof (state)\nthis:\n  is_red (set xs) q\n\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>q \\<in> pmdl (set xs); q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_red_basis xs)) q\n 2. f \\<in> pmdl (set xs)", "thus \"is_red (set (comp_red_basis xs)) q\""], ["proof (prove)\nusing this:\n  is_red (set xs) q\n\ngoal (1 subgoal):\n 1. is_red (set (comp_red_basis xs)) q", "unfolding comp_red_basis_is_red"], ["proof (prove)\nusing this:\n  is_red (set xs) q\n\ngoal (1 subgoal):\n 1. is_red (set xs) q", "."], ["proof (state)\nthis:\n  is_red (set (comp_red_basis xs)) q\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl (set xs)", "qed fact"], ["proof (state)\nthis:\n  (red (set (comp_red_basis xs)))\\<^sup>*\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow> f \\<in> pmdl (set (comp_red_basis xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (red (set (comp_red_basis xs)))\\<^sup>*\\<^sup>* f 0\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl (set (comp_red_basis xs))", "by (rule red_rtranclp_0_in_pmdl)"], ["proof (state)\nthis:\n  f \\<in> pmdl (set (comp_red_basis xs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> pmdl (set (comp_red_basis xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comp_red_basis_GB:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"is_Groebner_basis (set (comp_red_basis xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis (set (comp_red_basis xs))", "unfolding GB_alt_2_finite[OF finite_set]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>pmdl (set (comp_red_basis xs)).\n       f \\<noteq> 0 \\<longrightarrow> is_red (set (comp_red_basis xs)) f", "proof (intro ballI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_red_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_red_basis xs)) f", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_red_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_red_basis xs)) f", "assume fin: \"f \\<in> pmdl (set (comp_red_basis xs))\""], ["proof (state)\nthis:\n  f \\<in> pmdl (set (comp_red_basis xs))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_red_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_red_basis xs)) f", "hence \"f \\<in> pmdl (set xs)\""], ["proof (prove)\nusing this:\n  f \\<in> pmdl (set (comp_red_basis xs))\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl (set xs)", "unfolding comp_red_basis_pmdl[OF assms]"], ["proof (prove)\nusing this:\n  f \\<in> pmdl (set xs)\n\ngoal (1 subgoal):\n 1. f \\<in> pmdl (set xs)", "."], ["proof (state)\nthis:\n  f \\<in> pmdl (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_red_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_red_basis xs)) f", "assume \"f \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> pmdl (set (comp_red_basis xs));\n        f \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> is_red (set (comp_red_basis xs)) f", "from assms \\<open>f \\<noteq> 0\\<close> \\<open>f \\<in> pmdl (set xs)\\<close>"], ["proof (chain)\npicking this:\n  is_Groebner_basis (set xs)\n  f \\<noteq> 0\n  f \\<in> pmdl (set xs)", "show \"is_red (set (comp_red_basis xs)) f\""], ["proof (prove)\nusing this:\n  is_Groebner_basis (set xs)\n  f \\<noteq> 0\n  f \\<in> pmdl (set xs)\n\ngoal (1 subgoal):\n 1. is_red (set (comp_red_basis xs)) f", "by (simp add: comp_red_basis_is_red GB_alt_2_finite)"], ["proof (state)\nthis:\n  is_red (set (comp_red_basis xs)) f\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Computing Reduced Gr\\\"obner Bases\\<close>"], ["", "lemma comp_red_monic_basis_pmdl:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"pmdl (set (comp_red_monic_basis xs)) = pmdl (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set (comp_red_monic_basis xs)) = pmdl (set xs)", "unfolding set_comp_red_monic_basis pmdl_image_monic comp_red_basis_pmdl[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set xs) = pmdl (set xs)", ".."], ["", "lemma comp_red_monic_basis_GB:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"is_Groebner_basis (set (comp_red_monic_basis xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis (set (comp_red_monic_basis xs))", "unfolding set_comp_red_monic_basis GB_image_monic"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis (set (comp_red_basis xs))", "using assms"], ["proof (prove)\nusing this:\n  is_Groebner_basis (set xs)\n\ngoal (1 subgoal):\n 1. is_Groebner_basis (set (comp_red_basis xs))", "by (rule comp_red_basis_GB)"], ["", "lemma comp_red_monic_basis_is_reduced_GB:\n  assumes \"is_Groebner_basis (set xs)\"\n  shows \"is_reduced_GB (set (comp_red_monic_basis xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_reduced_GB (set (comp_red_monic_basis xs))", "unfolding is_reduced_GB_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis (set (comp_red_monic_basis xs)) \\<and>\n    is_auto_reduced (set (comp_red_monic_basis xs)) \\<and>\n    is_monic_set (set (comp_red_monic_basis xs)) \\<and>\n    0 \\<notin> set (comp_red_monic_basis xs)", "proof (intro conjI, rule comp_red_monic_basis_GB, fact assms,\n       rule comp_red_monic_basis_is_auto_reduced, rule comp_red_monic_basis_is_monic_set, intro notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<in> set (comp_red_monic_basis xs) \\<Longrightarrow> False", "assume \"0 \\<in> set (comp_red_monic_basis xs)\""], ["proof (state)\nthis:\n  0 \\<in> set (comp_red_monic_basis xs)\n\ngoal (1 subgoal):\n 1. 0 \\<in> set (comp_red_monic_basis xs) \\<Longrightarrow> False", "hence \"0 \\<noteq> (0::'t \\<Rightarrow>\\<^sub>0 'b)\""], ["proof (prove)\nusing this:\n  0 \\<in> set (comp_red_monic_basis xs)\n\ngoal (1 subgoal):\n 1. 0 \\<noteq> 0", "by (rule comp_red_monic_basis_nonzero)"], ["proof (state)\nthis:\n  0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 \\<in> set (comp_red_monic_basis xs) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ex_finite_reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  obtains G where \"G \\<subseteq> dgrad_p_set d m\" and \"finite G\" and \"is_reduced_GB G\" and \"pmdl G = pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<subseteq> dgrad_p_set d m; finite G; is_reduced_GB G;\n         pmdl G = pmdl F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<subseteq> dgrad_p_set d m; finite G; is_reduced_GB G;\n         pmdl G = pmdl F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m", "obtain G0 where G0_sub: \"G0 \\<subseteq> dgrad_p_set d m\" and fin: \"finite G0\"\n    and gb: \"is_Groebner_basis G0\" and pid: \"pmdl G0 = pmdl F\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>G0.\n        \\<lbrakk>G0 \\<subseteq> dgrad_p_set d m; finite G0;\n         is_Groebner_basis G0; pmdl G0 = pmdl F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ex_finite_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  G0 \\<subseteq> dgrad_p_set d m\n  finite G0\n  is_Groebner_basis G0\n  pmdl G0 = pmdl F\n\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<subseteq> dgrad_p_set d m; finite G; is_reduced_GB G;\n         pmdl G = pmdl F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from fin"], ["proof (chain)\npicking this:\n  finite G0", "obtain xs where set: \"G0 = set xs\""], ["proof (prove)\nusing this:\n  finite G0\n\ngoal (1 subgoal):\n 1. (\\<And>xs. G0 = set xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using finite_list"], ["proof (prove)\nusing this:\n  finite G0\n  finite ?A \\<Longrightarrow> \\<exists>xs. set xs = ?A\n\ngoal (1 subgoal):\n 1. (\\<And>xs. G0 = set xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  G0 = set xs\n\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<subseteq> dgrad_p_set d m; finite G; is_reduced_GB G;\n         pmdl G = pmdl F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?G = \"set (comp_red_monic_basis xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<subseteq> dgrad_p_set d m; finite G; is_reduced_GB G;\n         pmdl G = pmdl F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. ?G41 \\<subseteq> dgrad_p_set d m\n 2. finite ?G41\n 3. is_reduced_GB ?G41\n 4. pmdl ?G41 = pmdl F", "from assms(1)"], ["proof (chain)\npicking this:\n  dickson_grading d", "have \"dgrad_p_set_le d (set (comp_red_monic_basis xs)) G0\""], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (set (comp_red_monic_basis xs)) G0", "unfolding set"], ["proof (prove)\nusing this:\n  dickson_grading d\n\ngoal (1 subgoal):\n 1. dgrad_p_set_le d (set (comp_red_monic_basis xs)) (set xs)", "by (rule comp_red_monic_basis_dgrad_p_set_le)"], ["proof (state)\nthis:\n  dgrad_p_set_le d (set (comp_red_monic_basis xs)) G0\n\ngoal (4 subgoals):\n 1. ?G41 \\<subseteq> dgrad_p_set d m\n 2. finite ?G41\n 3. is_reduced_GB ?G41\n 4. pmdl ?G41 = pmdl F", "from this G0_sub"], ["proof (chain)\npicking this:\n  dgrad_p_set_le d (set (comp_red_monic_basis xs)) G0\n  G0 \\<subseteq> dgrad_p_set d m", "show \"set (comp_red_monic_basis xs) \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\nusing this:\n  dgrad_p_set_le d (set (comp_red_monic_basis xs)) G0\n  G0 \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. set (comp_red_monic_basis xs) \\<subseteq> dgrad_p_set d m", "by (rule dgrad_p_set_le_dgrad_p_set)"], ["proof (state)\nthis:\n  set (comp_red_monic_basis xs) \\<subseteq> dgrad_p_set d m\n\ngoal (3 subgoals):\n 1. finite (set (comp_red_monic_basis xs))\n 2. is_reduced_GB (set (comp_red_monic_basis xs))\n 3. pmdl (set (comp_red_monic_basis xs)) = pmdl F", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (set (comp_red_monic_basis xs))\n 2. is_reduced_GB (set (comp_red_monic_basis xs))\n 3. pmdl (set (comp_red_monic_basis xs)) = pmdl F", "from gb"], ["proof (chain)\npicking this:\n  is_Groebner_basis G0", "show rgb: \"is_reduced_GB ?G\""], ["proof (prove)\nusing this:\n  is_Groebner_basis G0\n\ngoal (1 subgoal):\n 1. is_reduced_GB (set (comp_red_monic_basis xs))", "unfolding set"], ["proof (prove)\nusing this:\n  is_Groebner_basis (set xs)\n\ngoal (1 subgoal):\n 1. is_reduced_GB (set (comp_red_monic_basis xs))", "by (rule comp_red_monic_basis_is_reduced_GB)"], ["proof (state)\nthis:\n  is_reduced_GB (set (comp_red_monic_basis xs))\n\ngoal (2 subgoals):\n 1. finite (set (comp_red_monic_basis xs))\n 2. pmdl (set (comp_red_monic_basis xs)) = pmdl F", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (set (comp_red_monic_basis xs))\n 2. pmdl (set (comp_red_monic_basis xs)) = pmdl F", "from gb"], ["proof (chain)\npicking this:\n  is_Groebner_basis G0", "show \"pmdl ?G = pmdl F\""], ["proof (prove)\nusing this:\n  is_Groebner_basis G0\n\ngoal (1 subgoal):\n 1. pmdl (set (comp_red_monic_basis xs)) = pmdl F", "unfolding set pid[symmetric]"], ["proof (prove)\nusing this:\n  is_Groebner_basis (set xs)\n\ngoal (1 subgoal):\n 1. pmdl (set (comp_red_monic_basis xs)) = pmdl (set xs)", "by (rule comp_red_monic_basis_pmdl)"], ["proof (state)\nthis:\n  pmdl (set (comp_red_monic_basis xs)) = pmdl F\n\ngoal (1 subgoal):\n 1. finite (set (comp_red_monic_basis xs))", "qed (fact finite_set)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem ex_unique_reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"\\<exists>!G. G \\<subseteq> dgrad_p_set d m \\<and> finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!G.\n       G \\<subseteq> dgrad_p_set d m \\<and>\n       finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>!G.\n       G \\<subseteq> dgrad_p_set d m \\<and>\n       finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m", "obtain G where \"G \\<subseteq> dgrad_p_set d m\" and \"finite G\"\n    and \"is_reduced_GB G\" and G: \"pmdl G = pmdl F\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<subseteq> dgrad_p_set d m; finite G; is_reduced_GB G;\n         pmdl G = pmdl F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ex_finite_reduced_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  G \\<subseteq> dgrad_p_set d m\n  finite G\n  is_reduced_GB G\n  pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. \\<exists>!G.\n       G \\<subseteq> dgrad_p_set d m \\<and>\n       finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "hence \"G \\<subseteq> dgrad_p_set d m \\<and> finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\""], ["proof (prove)\nusing this:\n  G \\<subseteq> dgrad_p_set d m\n  finite G\n  is_reduced_GB G\n  pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. G \\<subseteq> dgrad_p_set d m \\<and>\n    finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "by simp"], ["proof (state)\nthis:\n  G \\<subseteq> dgrad_p_set d m \\<and>\n  finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. \\<exists>!G.\n       G \\<subseteq> dgrad_p_set d m \\<and>\n       finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "thus ?thesis"], ["proof (prove)\nusing this:\n  G \\<subseteq> dgrad_p_set d m \\<and>\n  finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. \\<exists>!G.\n       G \\<subseteq> dgrad_p_set d m \\<and>\n       finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "proof (rule ex1I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       Ga \\<subseteq> dgrad_p_set d m \\<and>\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "fix G'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       Ga \\<subseteq> dgrad_p_set d m \\<and>\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "assume \"G' \\<subseteq> dgrad_p_set d m \\<and> finite G' \\<and> is_reduced_GB G' \\<and> pmdl G' = pmdl F\""], ["proof (state)\nthis:\n  G' \\<subseteq> dgrad_p_set d m \\<and>\n  finite G' \\<and> is_reduced_GB G' \\<and> pmdl G' = pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       Ga \\<subseteq> dgrad_p_set d m \\<and>\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "hence \"is_reduced_GB G'\" and G': \"pmdl G' = pmdl F\""], ["proof (prove)\nusing this:\n  G' \\<subseteq> dgrad_p_set d m \\<and>\n  finite G' \\<and> is_reduced_GB G' \\<and> pmdl G' = pmdl F\n\ngoal (1 subgoal):\n 1. is_reduced_GB G' &&& pmdl G' = pmdl F", "by simp_all"], ["proof (state)\nthis:\n  is_reduced_GB G'\n  pmdl G' = pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       Ga \\<subseteq> dgrad_p_set d m \\<and>\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "note this(1) \\<open>is_reduced_GB G\\<close>"], ["proof (state)\nthis:\n  is_reduced_GB G'\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       Ga \\<subseteq> dgrad_p_set d m \\<and>\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "moreover"], ["proof (state)\nthis:\n  is_reduced_GB G'\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       Ga \\<subseteq> dgrad_p_set d m \\<and>\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "have \"pmdl G' = pmdl G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl G' = pmdl G", "by (simp only: G G')"], ["proof (state)\nthis:\n  pmdl G' = pmdl G\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       Ga \\<subseteq> dgrad_p_set d m \\<and>\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "ultimately"], ["proof (chain)\npicking this:\n  is_reduced_GB G'\n  is_reduced_GB G\n  pmdl G' = pmdl G", "show \"G' = G\""], ["proof (prove)\nusing this:\n  is_reduced_GB G'\n  is_reduced_GB G\n  pmdl G' = pmdl G\n\ngoal (1 subgoal):\n 1. G' = G", "by (rule is_reduced_GB_unique)"], ["proof (state)\nthis:\n  G' = G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!G.\n     G \\<subseteq> dgrad_p_set d m \\<and>\n     finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary ex_unique_reduced_GB_dgrad_p_set':\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"\\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m", "obtain G where \"G \\<subseteq> dgrad_p_set d m\" and \"finite G\"\n    and \"is_reduced_GB G\" and G: \"pmdl G = pmdl F\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<subseteq> dgrad_p_set d m; finite G; is_reduced_GB G;\n         pmdl G = pmdl F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ex_finite_reduced_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  G \\<subseteq> dgrad_p_set d m\n  finite G\n  is_reduced_GB G\n  pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. \\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "hence \"finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\""], ["proof (prove)\nusing this:\n  G \\<subseteq> dgrad_p_set d m\n  finite G\n  is_reduced_GB G\n  pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "by simp"], ["proof (state)\nthis:\n  finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. \\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. \\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "proof (rule ex1I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "fix G'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "assume \"finite G' \\<and> is_reduced_GB G' \\<and> pmdl G' = pmdl F\""], ["proof (state)\nthis:\n  finite G' \\<and> is_reduced_GB G' \\<and> pmdl G' = pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "hence \"is_reduced_GB G'\" and G': \"pmdl G' = pmdl F\""], ["proof (prove)\nusing this:\n  finite G' \\<and> is_reduced_GB G' \\<and> pmdl G' = pmdl F\n\ngoal (1 subgoal):\n 1. is_reduced_GB G' &&& pmdl G' = pmdl F", "by simp_all"], ["proof (state)\nthis:\n  is_reduced_GB G'\n  pmdl G' = pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "note this(1) \\<open>is_reduced_GB G\\<close>"], ["proof (state)\nthis:\n  is_reduced_GB G'\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "moreover"], ["proof (state)\nthis:\n  is_reduced_GB G'\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "have \"pmdl G' = pmdl G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl G' = pmdl G", "by (simp only: G G')"], ["proof (state)\nthis:\n  pmdl G' = pmdl G\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "ultimately"], ["proof (chain)\npicking this:\n  is_reduced_GB G'\n  is_reduced_GB G\n  pmdl G' = pmdl G", "show \"G' = G\""], ["proof (prove)\nusing this:\n  is_reduced_GB G'\n  is_reduced_GB G\n  pmdl G' = pmdl G\n\ngoal (1 subgoal):\n 1. G' = G", "by (rule is_reduced_GB_unique)"], ["proof (state)\nthis:\n  G' = G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\n\ngoal:\nNo subgoals!", "qed"], ["", "definition reduced_GB :: \"('t \\<Rightarrow>\\<^sub>0 'b) set \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::field) set\"\n  where \"reduced_GB B = (THE G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl B)\""], ["", "text \\<open>@{const reduced_GB} returns the unique reduced Gr\\\"obner basis of the given set, provided its\n  Dickson grading is bounded. Combining @{const comp_red_monic_basis} with any function for computing\n  Gr\\\"obner bases, e.\\,g. \\<open>gb\\<close> from theory \"Buchberger\", makes @{const reduced_GB} computable.\\<close>"], ["", "lemma finite_reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"finite (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (reduced_GB F)", "unfolding reduced_GB_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (THE G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F)", "by (rule the1I2, rule ex_unique_reduced_GB_dgrad_p_set', fact, fact, fact, elim conjE)"], ["", "lemma reduced_GB_is_reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"is_reduced_GB (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_reduced_GB (reduced_GB F)", "unfolding reduced_GB_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_reduced_GB\n     (THE G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F)", "by (rule the1I2, rule ex_unique_reduced_GB_dgrad_p_set', fact, fact, fact, elim conjE)"], ["", "lemma reduced_GB_is_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"is_Groebner_basis (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Groebner_basis (reduced_GB F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_Groebner_basis (reduced_GB F)", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m", "have \"is_reduced_GB (reduced_GB F)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. is_reduced_GB (reduced_GB F)", "by (rule reduced_GB_is_reduced_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  is_reduced_GB (reduced_GB F)\n\ngoal (1 subgoal):\n 1. is_Groebner_basis (reduced_GB F)", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_reduced_GB (reduced_GB F)\n\ngoal (1 subgoal):\n 1. is_Groebner_basis (reduced_GB F)", "unfolding is_reduced_GB_def"], ["proof (prove)\nusing this:\n  is_Groebner_basis (reduced_GB F) \\<and>\n  is_auto_reduced (reduced_GB F) \\<and>\n  is_monic_set (reduced_GB F) \\<and> 0 \\<notin> reduced_GB F\n\ngoal (1 subgoal):\n 1. is_Groebner_basis (reduced_GB F)", ".."], ["proof (state)\nthis:\n  is_Groebner_basis (reduced_GB F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduced_GB_is_auto_reduced_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"is_auto_reduced (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_auto_reduced (reduced_GB F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_auto_reduced (reduced_GB F)", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m", "have \"is_reduced_GB (reduced_GB F)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. is_reduced_GB (reduced_GB F)", "by (rule reduced_GB_is_reduced_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  is_reduced_GB (reduced_GB F)\n\ngoal (1 subgoal):\n 1. is_auto_reduced (reduced_GB F)", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_reduced_GB (reduced_GB F)\n\ngoal (1 subgoal):\n 1. is_auto_reduced (reduced_GB F)", "unfolding is_reduced_GB_def"], ["proof (prove)\nusing this:\n  is_Groebner_basis (reduced_GB F) \\<and>\n  is_auto_reduced (reduced_GB F) \\<and>\n  is_monic_set (reduced_GB F) \\<and> 0 \\<notin> reduced_GB F\n\ngoal (1 subgoal):\n 1. is_auto_reduced (reduced_GB F)", "by simp"], ["proof (state)\nthis:\n  is_auto_reduced (reduced_GB F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduced_GB_is_monic_set_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"is_monic_set (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_monic_set (reduced_GB F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_monic_set (reduced_GB F)", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m", "have \"is_reduced_GB (reduced_GB F)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. is_reduced_GB (reduced_GB F)", "by (rule reduced_GB_is_reduced_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  is_reduced_GB (reduced_GB F)\n\ngoal (1 subgoal):\n 1. is_monic_set (reduced_GB F)", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_reduced_GB (reduced_GB F)\n\ngoal (1 subgoal):\n 1. is_monic_set (reduced_GB F)", "unfolding is_reduced_GB_def"], ["proof (prove)\nusing this:\n  is_Groebner_basis (reduced_GB F) \\<and>\n  is_auto_reduced (reduced_GB F) \\<and>\n  is_monic_set (reduced_GB F) \\<and> 0 \\<notin> reduced_GB F\n\ngoal (1 subgoal):\n 1. is_monic_set (reduced_GB F)", "by simp"], ["proof (state)\nthis:\n  is_monic_set (reduced_GB F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduced_GB_nonzero_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"0 \\<notin> reduced_GB F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> reduced_GB F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<notin> reduced_GB F", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m", "have \"is_reduced_GB (reduced_GB F)\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. is_reduced_GB (reduced_GB F)", "by (rule reduced_GB_is_reduced_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  is_reduced_GB (reduced_GB F)\n\ngoal (1 subgoal):\n 1. 0 \\<notin> reduced_GB F", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_reduced_GB (reduced_GB F)\n\ngoal (1 subgoal):\n 1. 0 \\<notin> reduced_GB F", "unfolding is_reduced_GB_def"], ["proof (prove)\nusing this:\n  is_Groebner_basis (reduced_GB F) \\<and>\n  is_auto_reduced (reduced_GB F) \\<and>\n  is_monic_set (reduced_GB F) \\<and> 0 \\<notin> reduced_GB F\n\ngoal (1 subgoal):\n 1. 0 \\<notin> reduced_GB F", "by simp"], ["proof (state)\nthis:\n  0 \\<notin> reduced_GB F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduced_GB_pmdl_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"pmdl (reduced_GB F) = pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (reduced_GB F) = pmdl F", "unfolding reduced_GB_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (THE G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F) =\n    pmdl F", "by (rule the1I2, rule ex_unique_reduced_GB_dgrad_p_set', fact, fact, fact, elim conjE)"], ["", "lemma reduced_GB_unique_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n    and \"is_reduced_GB G\" and \"pmdl G = pmdl F\"\n  shows \"reduced_GB F = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_GB F = G", "by (rule is_reduced_GB_unique, rule reduced_GB_is_reduced_GB_dgrad_p_set, fact+,\n      simp only: reduced_GB_pmdl_dgrad_p_set[OF assms(1, 2, 3)] assms(5))"], ["", "lemma reduced_GB_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"finite (component_of_term ` Keys F)\" and \"F \\<subseteq> dgrad_p_set d m\"\n  shows \"reduced_GB F \\<subseteq> dgrad_p_set d m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> dgrad_p_set d m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> dgrad_p_set d m", "from assms"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m", "obtain G where G: \"G \\<subseteq> dgrad_p_set d m\" and \"is_reduced_GB G\" and \"pmdl G = pmdl F\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. (\\<And>G.\n        \\<lbrakk>G \\<subseteq> dgrad_p_set d m; is_reduced_GB G;\n         pmdl G = pmdl F\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule ex_finite_reduced_GB_dgrad_p_set)"], ["proof (state)\nthis:\n  G \\<subseteq> dgrad_p_set d m\n  is_reduced_GB G\n  pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> dgrad_p_set d m", "from assms this(2, 3)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n  is_reduced_GB G\n  pmdl G = pmdl F", "have \"reduced_GB F = G\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (component_of_term ` Keys F)\n  F \\<subseteq> dgrad_p_set d m\n  is_reduced_GB G\n  pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. reduced_GB F = G", "by (rule reduced_GB_unique_dgrad_p_set)"], ["proof (state)\nthis:\n  reduced_GB F = G\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> dgrad_p_set d m", "with G"], ["proof (chain)\npicking this:\n  G \\<subseteq> dgrad_p_set d m\n  reduced_GB F = G", "show ?thesis"], ["proof (prove)\nusing this:\n  G \\<subseteq> dgrad_p_set d m\n  reduced_GB F = G\n\ngoal (1 subgoal):\n 1. reduced_GB F \\<subseteq> dgrad_p_set d m", "by simp"], ["proof (state)\nthis:\n  reduced_GB F \\<subseteq> dgrad_p_set d m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduced_GB_unique:\n  assumes \"finite G\" and \"is_reduced_GB G\" and \"pmdl G = pmdl F\"\n  shows \"reduced_GB F = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_GB F = G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. reduced_GB F = G", "from assms"], ["proof (chain)\npicking this:\n  finite G\n  is_reduced_GB G\n  pmdl G = pmdl F", "have \"finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\""], ["proof (prove)\nusing this:\n  finite G\n  is_reduced_GB G\n  pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "by simp"], ["proof (state)\nthis:\n  finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. reduced_GB F = G", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. reduced_GB F = G", "unfolding reduced_GB_def"], ["proof (prove)\nusing this:\n  finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F\n\ngoal (1 subgoal):\n 1. (THE G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F) = G", "proof (rule the_equality)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "fix G'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "assume \"finite G' \\<and> is_reduced_GB G' \\<and> pmdl G' = pmdl F\""], ["proof (state)\nthis:\n  finite G' \\<and> is_reduced_GB G' \\<and> pmdl G' = pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "hence \"is_reduced_GB G'\" and eq: \"pmdl G' = pmdl F\""], ["proof (prove)\nusing this:\n  finite G' \\<and> is_reduced_GB G' \\<and> pmdl G' = pmdl F\n\ngoal (1 subgoal):\n 1. is_reduced_GB G' &&& pmdl G' = pmdl F", "by simp_all"], ["proof (state)\nthis:\n  is_reduced_GB G'\n  pmdl G' = pmdl F\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "note this(1)"], ["proof (state)\nthis:\n  is_reduced_GB G'\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "moreover"], ["proof (state)\nthis:\n  is_reduced_GB G'\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "note assms(2)"], ["proof (state)\nthis:\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "moreover"], ["proof (state)\nthis:\n  is_reduced_GB G\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "have \"pmdl G' = pmdl G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl G' = pmdl G", "by (simp only: assms(3) eq)"], ["proof (state)\nthis:\n  pmdl G' = pmdl G\n\ngoal (1 subgoal):\n 1. \\<And>Ga.\n       finite Ga \\<and>\n       is_reduced_GB Ga \\<and> pmdl Ga = pmdl F \\<Longrightarrow>\n       Ga = G", "ultimately"], ["proof (chain)\npicking this:\n  is_reduced_GB G'\n  is_reduced_GB G\n  pmdl G' = pmdl G", "show \"G' = G\""], ["proof (prove)\nusing this:\n  is_reduced_GB G'\n  is_reduced_GB G\n  pmdl G' = pmdl G\n\ngoal (1 subgoal):\n 1. G' = G", "by (rule is_reduced_GB_unique)"], ["proof (state)\nthis:\n  G' = G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  reduced_GB F = G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_reduced_GB_empty: \"is_reduced_GB {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_reduced_GB {}", "by (simp add: is_reduced_GB_def is_Groebner_basis_empty is_monic_set_def is_auto_reduced_def)"], ["", "lemma is_reduced_GB_singleton: \"is_reduced_GB {f} \\<longleftrightarrow> lc f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_reduced_GB {f} = (lc f = (1::'b))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. is_reduced_GB {f} \\<Longrightarrow> lc f = (1::'b)\n 2. lc f = (1::'b) \\<Longrightarrow> is_reduced_GB {f}", "assume \"is_reduced_GB {f}\""], ["proof (state)\nthis:\n  is_reduced_GB {f}\n\ngoal (2 subgoals):\n 1. is_reduced_GB {f} \\<Longrightarrow> lc f = (1::'b)\n 2. lc f = (1::'b) \\<Longrightarrow> is_reduced_GB {f}", "hence \"is_monic_set {f}\" and \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_reduced_GB {f}\n\ngoal (1 subgoal):\n 1. is_monic_set {f} &&& f \\<noteq> 0", "by (rule reduced_GB_D3, rule reduced_GB_D4) simp"], ["proof (state)\nthis:\n  is_monic_set {f}\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. is_reduced_GB {f} \\<Longrightarrow> lc f = (1::'b)\n 2. lc f = (1::'b) \\<Longrightarrow> is_reduced_GB {f}", "from this(1) _ this(2)"], ["proof (chain)\npicking this:\n  is_monic_set {f}\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  f \\<noteq> 0", "show \"lc f = 1\""], ["proof (prove)\nusing this:\n  is_monic_set {f}\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc f = (1::'b)", "by (rule is_monic_setD) simp"], ["proof (state)\nthis:\n  lc f = (1::'b)\n\ngoal (1 subgoal):\n 1. lc f = (1::'b) \\<Longrightarrow> is_reduced_GB {f}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lc f = (1::'b) \\<Longrightarrow> is_reduced_GB {f}", "assume \"lc f = 1\""], ["proof (state)\nthis:\n  lc f = (1::'b)\n\ngoal (1 subgoal):\n 1. lc f = (1::'b) \\<Longrightarrow> is_reduced_GB {f}", "moreover"], ["proof (state)\nthis:\n  lc f = (1::'b)\n\ngoal (1 subgoal):\n 1. lc f = (1::'b) \\<Longrightarrow> is_reduced_GB {f}", "from this"], ["proof (chain)\npicking this:\n  lc f = (1::'b)", "have \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lc f = (1::'b)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc f = (1::'b) \\<Longrightarrow> is_reduced_GB {f}", "ultimately"], ["proof (chain)\npicking this:\n  lc f = (1::'b)\n  f \\<noteq> 0", "show \"is_reduced_GB {f}\""], ["proof (prove)\nusing this:\n  lc f = (1::'b)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. is_reduced_GB {f}", "by (simp add: is_reduced_GB_def is_Groebner_basis_singleton is_monic_set_def is_auto_reduced_def\n        not_is_red_empty)"], ["proof (state)\nthis:\n  is_reduced_GB {f}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduced_GB_empty: \"reduced_GB {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_GB {} = {}", "using finite.emptyI is_reduced_GB_empty refl"], ["proof (prove)\nusing this:\n  finite {}\n  is_reduced_GB {}\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. reduced_GB {} = {}", "by (rule reduced_GB_unique)"], ["", "lemma reduced_GB_singleton: \"reduced_GB {f} = (if f = 0 then {} else {monic f})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_GB {f} = (if f = 0 then {} else {monic f})", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})", "case True"], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})", "from finite.emptyI is_reduced_GB_empty"], ["proof (chain)\npicking this:\n  finite {}\n  is_reduced_GB {}", "have \"reduced_GB {f} = {}\""], ["proof (prove)\nusing this:\n  finite {}\n  is_reduced_GB {}\n\ngoal (1 subgoal):\n 1. reduced_GB {f} = {}", "by (rule reduced_GB_unique) (simp add: True flip: pmdl.span_Diff_zero[of \"{0}\"])"], ["proof (state)\nthis:\n  reduced_GB {f} = {}\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})", "with True"], ["proof (chain)\npicking this:\n  f = 0\n  reduced_GB {f} = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  f = 0\n  reduced_GB {f} = {}\n\ngoal (1 subgoal):\n 1. reduced_GB {f} = (if f = 0 then {} else {monic f})", "by simp"], ["proof (state)\nthis:\n  reduced_GB {f} = (if f = 0 then {} else {monic f})\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})", "have \"reduced_GB {f} = {monic f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_GB {f} = {monic f}", "proof (rule reduced_GB_unique)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite {monic f}\n 2. is_reduced_GB {monic f}\n 3. pmdl {monic f} = pmdl {f}", "from False"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "have \"lc f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lc f \\<noteq> (0::'b)", "by (rule lc_not_0)"], ["proof (state)\nthis:\n  lc f \\<noteq> (0::'b)\n\ngoal (3 subgoals):\n 1. finite {monic f}\n 2. is_reduced_GB {monic f}\n 3. pmdl {monic f} = pmdl {f}", "thus \"is_reduced_GB {monic f}\""], ["proof (prove)\nusing this:\n  lc f \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. is_reduced_GB {monic f}", "by (simp add: is_reduced_GB_singleton monic_def)"], ["proof (state)\nthis:\n  is_reduced_GB {monic f}\n\ngoal (2 subgoals):\n 1. finite {monic f}\n 2. pmdl {monic f} = pmdl {f}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {monic f}\n 2. pmdl {monic f} = pmdl {f}", "have \"pmdl {monic f} = pmdl (monic ` {f})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl {monic f} = pmdl (monic ` {f})", "by simp"], ["proof (state)\nthis:\n  pmdl {monic f} = pmdl (monic ` {f})\n\ngoal (2 subgoals):\n 1. finite {monic f}\n 2. pmdl {monic f} = pmdl {f}", "also"], ["proof (state)\nthis:\n  pmdl {monic f} = pmdl (monic ` {f})\n\ngoal (2 subgoals):\n 1. finite {monic f}\n 2. pmdl {monic f} = pmdl {f}", "have \"\\<dots> = pmdl {f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (monic ` {f}) = pmdl {f}", "by (fact pmdl_image_monic)"], ["proof (state)\nthis:\n  pmdl (monic ` {f}) = pmdl {f}\n\ngoal (2 subgoals):\n 1. finite {monic f}\n 2. pmdl {monic f} = pmdl {f}", "finally"], ["proof (chain)\npicking this:\n  pmdl {monic f} = pmdl {f}", "show \"pmdl {monic f} = pmdl {f}\""], ["proof (prove)\nusing this:\n  pmdl {monic f} = pmdl {f}\n\ngoal (1 subgoal):\n 1. pmdl {monic f} = pmdl {f}", "."], ["proof (state)\nthis:\n  pmdl {monic f} = pmdl {f}\n\ngoal (1 subgoal):\n 1. finite {monic f}", "qed simp"], ["proof (state)\nthis:\n  reduced_GB {f} = {monic f}\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    reduced_GB {f} = (if f = 0 then {} else {monic f})", "with False"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  reduced_GB {f} = {monic f}", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  reduced_GB {f} = {monic f}\n\ngoal (1 subgoal):\n 1. reduced_GB {f} = (if f = 0 then {} else {monic f})", "by simp"], ["proof (state)\nthis:\n  reduced_GB {f} = (if f = 0 then {} else {monic f})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ex_unique_reduced_GB_finite: \"finite F \\<Longrightarrow> (\\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F \\<Longrightarrow>\n    \\<exists>!G. finite G \\<and> is_reduced_GB G \\<and> pmdl G = pmdl F", "by (rule ex_unique_reduced_GB_dgrad_p_set', rule dickson_grading_dgrad_dummy,\n      erule finite_imp_finite_component_Keys, erule dgrad_p_set_exhaust_expl)"], ["", "lemma finite_reduced_GB_finite: \"finite F \\<Longrightarrow> finite (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F \\<Longrightarrow> finite (reduced_GB F)", "by (rule finite_reduced_GB_dgrad_p_set, rule dickson_grading_dgrad_dummy,\n      erule finite_imp_finite_component_Keys, erule dgrad_p_set_exhaust_expl)"], ["", "lemma reduced_GB_is_reduced_GB_finite: \"finite F \\<Longrightarrow> is_reduced_GB (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F \\<Longrightarrow> is_reduced_GB (reduced_GB F)", "by (rule reduced_GB_is_reduced_GB_dgrad_p_set, rule dickson_grading_dgrad_dummy,\n      erule finite_imp_finite_component_Keys, erule dgrad_p_set_exhaust_expl)"], ["", "lemma reduced_GB_is_GB_finite: \"finite F \\<Longrightarrow> is_Groebner_basis (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F \\<Longrightarrow> is_Groebner_basis (reduced_GB F)", "by (rule reduced_GB_is_GB_dgrad_p_set, rule dickson_grading_dgrad_dummy,\n      erule finite_imp_finite_component_Keys, erule dgrad_p_set_exhaust_expl)"], ["", "lemma reduced_GB_is_auto_reduced_finite: \"finite F \\<Longrightarrow> is_auto_reduced (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F \\<Longrightarrow> is_auto_reduced (reduced_GB F)", "by (rule reduced_GB_is_auto_reduced_dgrad_p_set, rule dickson_grading_dgrad_dummy,\n      erule finite_imp_finite_component_Keys, erule dgrad_p_set_exhaust_expl)"], ["", "lemma reduced_GB_is_monic_set_finite: \"finite F \\<Longrightarrow> is_monic_set (reduced_GB F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F \\<Longrightarrow> is_monic_set (reduced_GB F)", "by (rule reduced_GB_is_monic_set_dgrad_p_set, rule dickson_grading_dgrad_dummy,\n      erule finite_imp_finite_component_Keys, erule dgrad_p_set_exhaust_expl)"], ["", "lemma reduced_GB_nonzero_finite: \"finite F \\<Longrightarrow> 0 \\<notin> reduced_GB F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F \\<Longrightarrow> 0 \\<notin> reduced_GB F", "by (rule reduced_GB_nonzero_dgrad_p_set, rule dickson_grading_dgrad_dummy,\n      erule finite_imp_finite_component_Keys, erule dgrad_p_set_exhaust_expl)"], ["", "lemma reduced_GB_pmdl_finite: \"finite F \\<Longrightarrow> pmdl (reduced_GB F) = pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F \\<Longrightarrow> pmdl (reduced_GB F) = pmdl F", "by (rule reduced_GB_pmdl_dgrad_p_set, rule dickson_grading_dgrad_dummy,\n      erule finite_imp_finite_component_Keys, erule dgrad_p_set_exhaust_expl)"], ["", "lemma reduced_GB_unique_finite: \"finite F \\<Longrightarrow> is_reduced_GB G \\<Longrightarrow> pmdl G = pmdl F \\<Longrightarrow> reduced_GB F = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; is_reduced_GB G; pmdl G = pmdl F\\<rbrakk>\n    \\<Longrightarrow> reduced_GB F = G", "by (rule reduced_GB_unique_dgrad_p_set, rule dickson_grading_dgrad_dummy,\n      erule finite_imp_finite_component_Keys, erule dgrad_p_set_exhaust_expl)"], ["", "end"], ["", "(* gd_term *)"], ["", "subsubsection \\<open>Properties of the Reduced Gr\\\"obner Basis of an Ideal\\<close>"], ["", "context gd_powerprod\nbegin"], ["", "lemma ideal_eq_UNIV_iff_reduced_GB_eq_one_dgrad_p_set:\n  assumes \"dickson_grading d\" and \"F \\<subseteq> punit.dgrad_p_set d m\"\n  shows \"ideal F = UNIV \\<longleftrightarrow> punit.reduced_GB F = {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ideal F = UNIV) = (punit.reduced_GB F = {1})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ideal F = UNIV) = (punit.reduced_GB F = {1})", "have fin: \"finite (local.punit.component_of_term ` Keys F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (local.punit.component_of_term ` Keys F)", "by simp"], ["proof (state)\nthis:\n  finite (local.punit.component_of_term ` Keys F)\n\ngoal (1 subgoal):\n 1. (ideal F = UNIV) = (punit.reduced_GB F = {1})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ideal F = UNIV) = (punit.reduced_GB F = {1})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ideal F = UNIV \\<Longrightarrow> punit.reduced_GB F = {1}\n 2. punit.reduced_GB F = {1} \\<Longrightarrow> ideal F = UNIV", "assume \"ideal F = UNIV\""], ["proof (state)\nthis:\n  ideal F = UNIV\n\ngoal (2 subgoals):\n 1. ideal F = UNIV \\<Longrightarrow> punit.reduced_GB F = {1}\n 2. punit.reduced_GB F = {1} \\<Longrightarrow> ideal F = UNIV", "from assms(1) fin assms(2)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (local.punit.component_of_term ` Keys F)\n  F \\<subseteq> punit.dgrad_p_set d m", "show \"punit.reduced_GB F = {1}\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (local.punit.component_of_term ` Keys F)\n  F \\<subseteq> punit.dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {1}", "proof (rule punit.reduced_GB_unique_dgrad_p_set)"], ["proof (state)\ngoal (2 subgoals):\n 1. punit.is_reduced_GB {1}\n 2. local.punit.pmdl {1} = local.punit.pmdl F", "show \"punit.is_reduced_GB {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.is_reduced_GB {1}", "unfolding punit.is_reduced_GB_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.is_Groebner_basis {1} \\<and>\n    punit.is_auto_reduced {1} \\<and>\n    punit.is_monic_set {1} \\<and> 0 \\<notin> {1}", "proof (intro conjI, fact punit.is_Groebner_basis_singleton)"], ["proof (state)\ngoal (3 subgoals):\n 1. punit.is_auto_reduced {1}\n 2. punit.is_monic_set {1}\n 3. 0 \\<notin> {1}", "show \"punit.is_auto_reduced {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.is_auto_reduced {1}", "unfolding punit.is_auto_reduced_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>{1}. \\<not> punit.is_red ({1} - {b}) b", "by (rule ballI, simp add: remove_def punit.not_is_red_empty)"], ["proof (state)\nthis:\n  punit.is_auto_reduced {1}\n\ngoal (2 subgoals):\n 1. punit.is_monic_set {1}\n 2. 0 \\<notin> {1}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. punit.is_monic_set {1}\n 2. 0 \\<notin> {1}", "show \"punit.is_monic_set {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. punit.is_monic_set {1}", "by (rule punit.is_monic_setI, simp del: single_one add: single_one[symmetric])"], ["proof (state)\nthis:\n  punit.is_monic_set {1}\n\ngoal (1 subgoal):\n 1. 0 \\<notin> {1}", "qed simp"], ["proof (state)\nthis:\n  punit.is_reduced_GB {1}\n\ngoal (1 subgoal):\n 1. local.punit.pmdl {1} = local.punit.pmdl F", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. local.punit.pmdl {1} = local.punit.pmdl F", "have \"punit.pmdl {1} = ideal {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.punit.pmdl {1} = ideal {1}", "by simp"], ["proof (state)\nthis:\n  local.punit.pmdl {1} = ideal {1}\n\ngoal (1 subgoal):\n 1. local.punit.pmdl {1} = local.punit.pmdl F", "also"], ["proof (state)\nthis:\n  local.punit.pmdl {1} = ideal {1}\n\ngoal (1 subgoal):\n 1. local.punit.pmdl {1} = local.punit.pmdl F", "have \"... = ideal F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal {1} = ideal F", "proof (simp only: \\<open>ideal F = UNIV\\<close> ideal_eq_UNIV_iff_contains_one)"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 \\<in> ideal {1}", "have \"1 \\<in> {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'c) \\<in> {1::'c}", ".."], ["proof (state)\nthis:\n  (1::?'c3) \\<in> {1::?'c3}\n\ngoal (1 subgoal):\n 1. 1 \\<in> ideal {1}", "with module_times"], ["proof (chain)\npicking this:\n  module (*)\n  (1::?'c3) \\<in> {1::?'c3}", "show \"1 \\<in> ideal {1}\""], ["proof (prove)\nusing this:\n  module (*)\n  (1::?'c3) \\<in> {1::?'c3}\n\ngoal (1 subgoal):\n 1. (1::'c) \\<in> ideal {1::'c}", "by (rule module.span_base)"], ["proof (state)\nthis:\n  (1::?'c4) \\<in> ideal {1::?'c4}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ideal {1} = ideal F\n\ngoal (1 subgoal):\n 1. local.punit.pmdl {1} = local.punit.pmdl F", "also"], ["proof (state)\nthis:\n  ideal {1} = ideal F\n\ngoal (1 subgoal):\n 1. local.punit.pmdl {1} = local.punit.pmdl F", "have \"... = punit.pmdl F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ideal F = local.punit.pmdl F", "by simp"], ["proof (state)\nthis:\n  ideal F = local.punit.pmdl F\n\ngoal (1 subgoal):\n 1. local.punit.pmdl {1} = local.punit.pmdl F", "finally"], ["proof (chain)\npicking this:\n  local.punit.pmdl {1} = local.punit.pmdl F", "show \"punit.pmdl {1} = punit.pmdl F\""], ["proof (prove)\nusing this:\n  local.punit.pmdl {1} = local.punit.pmdl F\n\ngoal (1 subgoal):\n 1. local.punit.pmdl {1} = local.punit.pmdl F", "."], ["proof (state)\nthis:\n  local.punit.pmdl {1} = local.punit.pmdl F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  punit.reduced_GB F = {1}\n\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {1} \\<Longrightarrow> ideal F = UNIV", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {1} \\<Longrightarrow> ideal F = UNIV", "assume \"punit.reduced_GB F = {1}\""], ["proof (state)\nthis:\n  punit.reduced_GB F = {1}\n\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {1} \\<Longrightarrow> ideal F = UNIV", "hence \"1 \\<in> punit.reduced_GB F\""], ["proof (prove)\nusing this:\n  punit.reduced_GB F = {1}\n\ngoal (1 subgoal):\n 1. 1 \\<in> punit.reduced_GB F", "by simp"], ["proof (state)\nthis:\n  1 \\<in> punit.reduced_GB F\n\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {1} \\<Longrightarrow> ideal F = UNIV", "hence \"1 \\<in> punit.pmdl (punit.reduced_GB F)\""], ["proof (prove)\nusing this:\n  1 \\<in> punit.reduced_GB F\n\ngoal (1 subgoal):\n 1. 1 \\<in> local.punit.pmdl (punit.reduced_GB F)", "by (rule punit.pmdl.span_base)"], ["proof (state)\nthis:\n  1 \\<in> local.punit.pmdl (punit.reduced_GB F)\n\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {1} \\<Longrightarrow> ideal F = UNIV", "also"], ["proof (state)\nthis:\n  1 \\<in> local.punit.pmdl (punit.reduced_GB F)\n\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {1} \\<Longrightarrow> ideal F = UNIV", "from assms(1) fin assms(2)"], ["proof (chain)\npicking this:\n  dickson_grading d\n  finite (local.punit.component_of_term ` Keys F)\n  F \\<subseteq> punit.dgrad_p_set d m", "have \"... = punit.pmdl F\""], ["proof (prove)\nusing this:\n  dickson_grading d\n  finite (local.punit.component_of_term ` Keys F)\n  F \\<subseteq> punit.dgrad_p_set d m\n\ngoal (1 subgoal):\n 1. local.punit.pmdl (punit.reduced_GB F) = local.punit.pmdl F", "by (rule punit.reduced_GB_pmdl_dgrad_p_set)"], ["proof (state)\nthis:\n  local.punit.pmdl (punit.reduced_GB F) = local.punit.pmdl F\n\ngoal (1 subgoal):\n 1. punit.reduced_GB F = {1} \\<Longrightarrow> ideal F = UNIV", "finally"], ["proof (chain)\npicking this:\n  1 \\<in> local.punit.pmdl F", "show \"ideal F = UNIV\""], ["proof (prove)\nusing this:\n  1 \\<in> local.punit.pmdl F\n\ngoal (1 subgoal):\n 1. ideal F = UNIV", "by (simp add: ideal_eq_UNIV_iff_contains_one)"], ["proof (state)\nthis:\n  ideal F = UNIV\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ideal F = UNIV) = (punit.reduced_GB F = {1})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas ideal_eq_UNIV_iff_reduced_GB_eq_one_finite =\n  ideal_eq_UNIV_iff_reduced_GB_eq_one_dgrad_p_set[OF dickson_grading_dgrad_dummy punit.dgrad_p_set_exhaust_expl]"], ["", "end"], ["", "(* gd_powerprod *)"], ["", "subsubsection \\<open>Context @{locale od_term}\\<close>"], ["", "context od_term\nbegin"], ["", "lemmas ex_unique_reduced_GB =\n  ex_unique_reduced_GB_dgrad_p_set'[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], ["", "lemmas finite_reduced_GB =\n  finite_reduced_GB_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], ["", "lemmas reduced_GB_is_reduced_GB =\n  reduced_GB_is_reduced_GB_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], ["", "lemmas reduced_GB_is_GB =\n  reduced_GB_is_GB_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], ["", "lemmas reduced_GB_is_auto_reduced =\n  reduced_GB_is_auto_reduced_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], ["", "lemmas reduced_GB_is_monic_set =\n  reduced_GB_is_monic_set_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], ["", "lemmas reduced_GB_nonzero =\n  reduced_GB_nonzero_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], ["", "lemmas reduced_GB_pmdl =\n  reduced_GB_pmdl_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], ["", "lemmas reduced_GB_unique =\n  reduced_GB_unique_dgrad_p_set[OF dickson_grading_zero _ subset_dgrad_p_set_zero]"], ["", "end"], ["", "(* od_term *)"], ["", "end"], ["", "(* theory *)"]]}