{"file_name": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases/Macaulay_Matrix.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Groebner_Bases", "problem_names": ["lemma vec_of_list_alt: \"vec_of_list xs = vec (length xs) (nth xs)\"", "lemma vec_cong:\n  assumes \"n = m\" and \"\\<And>i. i < m \\<Longrightarrow> f i = g i\"\n  shows \"vec n f = vec m g\"", "lemma scalar_prod_comm:\n  assumes \"dim_vec v = dim_vec w\"\n  shows \"v \\<bullet> w = w \\<bullet> (v::'a::comm_semiring_0 vec)\"", "lemma vec_scalar_mult_fun: \"vec n (\\<lambda>x. c * f x) = c \\<cdot>\\<^sub>v vec n f\"", "lemma dim_resize_vec[simp]: \"dim_vec (resize_vec n v) = n\"", "lemma resize_vec_carrier: \"resize_vec n v \\<in> carrier_vec n\"", "lemma resize_vec_dim[simp]: \"resize_vec (dim_vec v) v = v\"", "lemma resize_vec_index:\n  assumes \"i < n\"\n  shows \"resize_vec n v $ i = v $ i\"", "lemma mult_mat_vec_resize:\n  \"v \\<^sub>v* A = (resize_vec (dim_row A) v) \\<^sub>v* A\"", "lemma assoc_mult_vec_mat:\n  assumes \"v \\<in> carrier_vec n1\" and \"A \\<in> carrier_mat n1 n2\" and \"B \\<in> carrier_mat n2 n3\"\n  shows \"v \\<^sub>v* (A * B) = (v \\<^sub>v* A) \\<^sub>v* B\"", "lemma mult_vec_mat_transpose:\n  assumes \"dim_vec v = dim_row A\"\n  shows \"v \\<^sub>v* A = (transpose_mat A) *\\<^sub>v (v::'a::comm_semiring_0 vec)\"", "lemma length_nzrows: \"length (nzrows A) \\<le> dim_row A\"", "lemma set_nzrows: \"set (nzrows A) = set (rows A) - {0\\<^sub>v (dim_col A)}\"", "lemma nzrows_nth_not_zero:\n  assumes \"i < length (nzrows A)\"\n  shows \"nzrows A ! i \\<noteq> 0\\<^sub>v (dim_col A)\"", "lemma row_spaceI:\n  assumes \"x = v \\<^sub>v* A\"\n  shows \"x \\<in> row_space A\"", "lemma row_spaceE:\n  assumes \"x \\<in> row_space A\"\n  obtains v where \"v \\<in> carrier_vec (dim_row A)\" and \"x = v \\<^sub>v* A\"", "lemma row_space_alt: \"row_space A = range (\\<lambda>v. mult_vec_mat v A)\"", "lemma row_space_mult:\n  assumes \"A \\<in> carrier_mat nr nc\" and \"B \\<in> carrier_mat nr nr\"\n  shows \"row_space (B * A) \\<subseteq> row_space A\"", "lemma row_space_mult_unit:\n  assumes \"P \\<in> Units (ring_mat TYPE('a::semiring_1) (dim_row A) b)\"\n  shows \"row_space (P * A) = row_space A\"", "lemma row_eq_zero_iff_pivot_fun:\n  assumes \"pivot_fun A f (dim_col A)\" and \"i < dim_row (A::'a::zero_neq_one mat)\"\n  shows \"(row A i = 0\\<^sub>v (dim_col A)) \\<longleftrightarrow> (f i = dim_col A)\"", "lemma row_not_zero_iff_pivot_fun:\n  assumes \"pivot_fun A f (dim_col A)\" and \"i < dim_row (A::'a::zero_neq_one mat)\"\n  shows \"(row A i \\<noteq> 0\\<^sub>v (dim_col A)) \\<longleftrightarrow> (f i < dim_col A)\"", "lemma pivot_fun_stabilizes:\n  assumes \"pivot_fun A f nc\" and \"i1 \\<le> i2\" and \"i2 < dim_row A\" and \"nc \\<le> f i1\"\n  shows \"f i2 = nc\"", "lemma pivot_fun_mono_strict:\n  assumes \"pivot_fun A f nc\" and \"i1 < i2\" and \"i2 < dim_row A\" and \"f i1 < nc\"\n  shows \"f i1 < f i2\"", "lemma pivot_fun_mono:\n  assumes \"pivot_fun A f nc\" and \"i1 \\<le> i2\" and \"i2 < dim_row A\"\n  shows \"f i1 \\<le> f i2\"", "lemma row_echelon_carrier:\n  assumes \"A \\<in> carrier_mat nr nc\"\n  shows \"row_echelon A \\<in> carrier_mat nr nc\"", "lemma dim_row_echelon[simp]:\n  shows \"dim_row (row_echelon A) = dim_row A\" and \"dim_col (row_echelon A) = dim_col A\"", "lemma row_echelon_transform:\n  obtains P where \"P \\<in> Units (ring_mat TYPE('a::field) (dim_row A) b)\" and \"row_echelon A = P * A\"", "lemma row_space_row_echelon[simp]: \"row_space (row_echelon A) = row_space A\"", "lemma row_echelon_pivot_fun:\n  obtains f where \"pivot_fun (row_echelon A) f (dim_col (row_echelon A))\"", "lemma distinct_nzrows_row_echelon: \"distinct (nzrows (row_echelon A))\"", "lemma dim_poly_to_row: \"dim_vec (poly_to_row ts p) = length ts\"", "lemma poly_to_row_index:\n  assumes \"i < length ts\"\n  shows \"poly_to_row ts p $ i = lookup p (ts ! i)\"", "lemma poly_to_row_scalar_mult:\n  assumes \"keys p \\<subseteq> set ts\"\n  shows \"row_to_poly ts (c \\<cdot>\\<^sub>v (poly_to_row ts p)) = c \\<cdot> p\"", "lemma poly_to_row_to_poly:\n  assumes \"keys p \\<subseteq> set ts\"\n  shows \"row_to_poly ts (poly_to_row ts p) = (p::'t \\<Rightarrow>\\<^sub>0 'b::semiring_1)\"", "lemma lookup_list_to_poly: \"lookup (list_to_poly ts cs) = list_to_fun ts cs\"", "lemma list_to_fun_Nil [simp]: \"list_to_fun [] cs = 0\"", "lemma list_to_poly_Nil [simp]: \"list_to_poly [] cs = 0\"", "lemma row_to_poly_Nil [simp]: \"row_to_poly [] r = 0\"", "lemma lookup_row_to_poly:\n  assumes \"distinct ts\" and \"dim_vec r = length ts\" and \"i < length ts\"\n  shows \"lookup (row_to_poly ts r) (ts ! i) = r $ i\"", "lemma keys_row_to_poly: \"keys (row_to_poly ts r) \\<subseteq> set ts\"", "lemma lookup_row_to_poly_not_zeroE:\n  assumes \"lookup (row_to_poly ts r) t \\<noteq> 0\"\n  obtains i where \"i < length ts\" and \"t = ts ! i\"", "lemma row_to_poly_zero [simp]: \"row_to_poly ts (0\\<^sub>v (length ts)) = (0::'t \\<Rightarrow>\\<^sub>0 'b::zero)\"", "lemma row_to_poly_zeroD:\n  assumes \"distinct ts\" and \"dim_vec r = length ts\" and \"row_to_poly ts r = 0\"\n  shows \"r = 0\\<^sub>v (length ts)\"", "lemma row_to_poly_inj:\n  assumes \"distinct ts\" and \"dim_vec r1 = length ts\" and \"dim_vec r2 = length ts\"\n    and \"row_to_poly ts r1 = row_to_poly ts r2\"\n  shows \"r1 = r2\"", "lemma row_to_poly_vec_plus:\n  assumes \"distinct ts\" and \"length ts = n\"\n  shows \"row_to_poly ts (vec n (f1 + f2)) = row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)\"", "lemma row_to_poly_vec_sum:\n  assumes \"distinct ts\" and \"length ts = n\"\n  shows \"row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) = ((\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))::'t \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add)\"", "lemma row_to_poly_smult:\n  assumes \"distinct ts\" and \"dim_vec r = length ts\"\n  shows \"row_to_poly ts (c \\<cdot>\\<^sub>v r) = c \\<cdot> (row_to_poly ts r)\"", "lemma poly_to_row_Nil [simp]: \"poly_to_row [] p = vec 0 f\"", "lemma polys_to_mat_Nil [simp]: \"polys_to_mat ts [] = mat 0 (length ts) f\"", "lemma dim_row_polys_to_mat[simp]: \"dim_row (polys_to_mat ts ps) = length ps\"", "lemma dim_col_polys_to_mat[simp]: \"dim_col (polys_to_mat ts ps) = length ts\"", "lemma polys_to_mat_index:\n  assumes \"i < length ps\" and \"j < length ts\"\n  shows \"(polys_to_mat ts ps) $$ (i, j) = lookup (ps ! i) (ts ! j)\"", "lemma row_polys_to_mat:\n  assumes \"i < length ps\"\n  shows \"row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)\"", "lemma col_polys_to_mat:\n  assumes \"j < length ts\"\n  shows \"col (polys_to_mat ts ps) j = vec_of_list (map (\\<lambda>p. lookup p (ts ! j)) ps)\"", "lemma length_mat_to_polys[simp]: \"length (mat_to_polys ts A) = dim_row A\"", "lemma mat_to_polys_nth:\n  assumes \"i < dim_row A\"\n  shows \"(mat_to_polys ts A) ! i = row_to_poly ts (row A i)\"", "lemma Keys_mat_to_polys: \"Keys (set (mat_to_polys ts A)) \\<subseteq> set ts\"", "lemma polys_to_mat_to_polys:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"mat_to_polys ts (polys_to_mat ts ps) = (ps::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1) list)\"", "lemma mat_to_polys_to_mat:\n  assumes \"distinct ts\" and \"length ts = dim_col A\"\n  shows \"(polys_to_mat ts (mat_to_polys ts A)) = A\"", "lemma row_to_poly_vec_times:\n  assumes \"distinct ts\" and \"length ts = dim_col A\"\n  shows \"row_to_poly ts (v \\<^sub>v* A) = ((\\<Sum>i=0..<dim_row A. (v $ i) \\<cdot> (row_to_poly ts (row A i)))::'t \\<Rightarrow>\\<^sub>0 'b::comm_semiring_0)\"", "lemma vec_times_polys_to_mat:\n  assumes \"Keys (set ps) \\<subseteq> set ts\" and \"v \\<in> carrier_vec (length ps)\"\n  shows \"row_to_poly ts (v \\<^sub>v* (polys_to_mat ts ps)) = (\\<Sum>(c, p)\\<leftarrow>zip (list_of_vec v) ps. c \\<cdot> p)\"\n    (is \"?l = ?r\")", "lemma row_space_subset_phull:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"row_to_poly ts ` row_space (polys_to_mat ts ps) \\<subseteq> phull (set ps)\"\n    (is \"?r \\<subseteq> ?h\")", "lemma phull_subset_row_space:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"phull (set ps) \\<subseteq> row_to_poly ts ` row_space (polys_to_mat ts ps)\"\n    (is \"?h \\<subseteq> ?r\")", "lemma row_space_eq_phull:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"row_to_poly ts ` row_space (polys_to_mat ts ps) = phull (set ps)\"", "lemma row_space_row_echelon_eq_phull:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"row_to_poly ts ` row_space (row_echelon (polys_to_mat ts ps)) = phull (set ps)\"", "lemma phull_row_echelon:\n  assumes \"Keys (set ps) \\<subseteq> set ts\" and \"distinct ts\"\n  shows \"phull (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) = phull (set ps)\"", "lemma pmdl_row_echelon:\n  assumes \"Keys (set ps) \\<subseteq> set ts\" and \"distinct ts\"\n  shows \"pmdl (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) = pmdl (set ps)\"\n    (is \"?l = ?r\")", "lemma lt_row_to_poly_pivot_fun:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i < dim_row A\" and \"f i < dim_col A\"\n  shows \"lt ((mat_to_polys (pps_to_list S) A) ! i) = (pps_to_list S) ! (f i)\"", "lemma lc_row_to_poly_pivot_fun:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i < dim_row A\" and \"f i < dim_col A\"\n  shows \"lc ((mat_to_polys (pps_to_list S) A) ! i) = 1\"", "lemma lt_row_to_poly_pivot_fun_less:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i1 < i2\" and \"i2 < dim_row A\" and \"f i1 < dim_col A\" and \"f i2 < dim_col A\"\n  shows \"(pps_to_list S) ! (f i2) \\<prec>\\<^sub>t (pps_to_list S) ! (f i1)\"", "lemma lt_row_to_poly_pivot_fun_eqD:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i1 < dim_row A\" and \"i2 < dim_row A\" and \"f i1 < dim_col A\" and \"f i2 < dim_col A\"\n    and \"(pps_to_list S) ! (f i1) = (pps_to_list S) ! (f i2)\"\n  shows \"i1 = i2\"", "lemma lt_row_to_poly_pivot_in_keysD:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i1 < dim_row A\" and \"i2 < dim_row A\" and \"f i1 < dim_col A\"\n    and \"(pps_to_list S) ! (f i1) \\<in> keys ((mat_to_polys (pps_to_list S) A) ! i2)\"\n  shows \"i1 = i2\"", "lemma lt_row_space_pivot_fun:\n  assumes \"card S = dim_col (A::'b::{comm_semiring_0,semiring_1_no_zero_divisors} mat)\"\n    and \"pivot_fun A f (dim_col A)\" and \"p \\<in> row_to_poly (pps_to_list S) ` row_space A\" and \"p \\<noteq> 0\"\n  shows \"lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))\"", "lemma dim_Macaulay_mat[simp]:\n  \"dim_row (Macaulay_mat ps) = length ps\"\n  \"dim_col (Macaulay_mat ps) = card (Keys (set ps))\"", "lemma Macaulay_list_Nil [simp]: \"Macaulay_list [] = ([]::('t \\<Rightarrow>\\<^sub>0 'b::field) list)\" (is \"?l = _\")", "lemma set_Macaulay_list:\n  \"set (Macaulay_list ps) =\n      set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))) - {0}\"", "lemma Keys_Macaulay_list: \"Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)\"", "lemma in_Macaulay_listE:\n  assumes \"p \\<in> set (Macaulay_list ps)\"\n    and \"pivot_fun (row_echelon (Macaulay_mat ps)) f (dim_col (row_echelon (Macaulay_mat ps)))\"\n  obtains i where \"i < dim_row (row_echelon (Macaulay_mat ps))\"\n    and \"p = (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))) ! i\"\n    and \"f i < dim_col (row_echelon (Macaulay_mat ps))\"", "lemma phull_Macaulay_list: \"phull (set (Macaulay_list ps)) = phull (set ps)\"", "lemma pmdl_Macaulay_list: \"pmdl (set (Macaulay_list ps)) = pmdl (set ps)\"", "lemma Macaulay_list_is_monic_set: \"is_monic_set (set (Macaulay_list ps))\"", "lemma Macaulay_list_not_zero: \"0 \\<notin> set (Macaulay_list ps)\"", "lemma Macaulay_list_distinct_lt:\n  assumes \"x \\<in> set (Macaulay_list ps)\" and \"y \\<in> set (Macaulay_list ps)\"\n    and \"x \\<noteq> y\"\n  shows \"lt x \\<noteq> lt y\"", "lemma Macaulay_list_lt:\n  assumes \"p \\<in> phull (set ps)\" and \"p \\<noteq> 0\"\n  obtains g where \"g \\<in> set (Macaulay_list ps)\" and \"g \\<noteq> 0\" and \"lt p = lt g\""], "translations": [["", "lemma vec_of_list_alt: \"vec_of_list xs = vec (length xs) (nth xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list xs = vec (length xs) ((!) xs)", "by (transfer, rule refl)"], ["", "lemma vec_cong:\n  assumes \"n = m\" and \"\\<And>i. i < m \\<Longrightarrow> f i = g i\"\n  shows \"vec n f = vec m g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec n f = vec m g", "using assms"], ["proof (prove)\nusing this:\n  n = m\n  ?i < m \\<Longrightarrow> f ?i = g ?i\n\ngoal (1 subgoal):\n 1. vec n f = vec m g", "by auto"], ["", "lemma scalar_prod_comm:\n  assumes \"dim_vec v = dim_vec w\"\n  shows \"v \\<bullet> w = w \\<bullet> (v::'a::comm_semiring_0 vec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> w = w \\<bullet> v", "by (simp add: scalar_prod_def assms, rule sum.cong, rule refl, simp only: ac_simps)"], ["", "lemma vec_scalar_mult_fun: \"vec n (\\<lambda>x. c * f x) = c \\<cdot>\\<^sub>v vec n f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec n (\\<lambda>x. c * f x) = c \\<cdot>\\<^sub>v vec n f", "by (simp add: smult_vec_def, rule vec_cong, rule refl, simp)"], ["", "definition mult_vec_mat :: \"'a vec \\<Rightarrow> 'a :: semiring_0 mat \\<Rightarrow> 'a vec\" (infixl \"\\<^sub>v*\" 70)\n  where \"v \\<^sub>v* A \\<equiv> vec (dim_col A) (\\<lambda>j. v \\<bullet> col A j)\""], ["", "definition resize_vec :: \"nat \\<Rightarrow> 'a vec \\<Rightarrow> 'a vec\"\n  where \"resize_vec n v = vec n (vec_index v)\""], ["", "lemma dim_resize_vec[simp]: \"dim_vec (resize_vec n v) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (resize_vec n v) = n", "by (simp add: resize_vec_def)"], ["", "lemma resize_vec_carrier: \"resize_vec n v \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resize_vec n v \\<in> carrier_vec n", "by (simp add: carrier_dim_vec)"], ["", "lemma resize_vec_dim[simp]: \"resize_vec (dim_vec v) v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resize_vec (dim_vec v) v = v", "by (simp add: resize_vec_def eq_vecI)"], ["", "lemma resize_vec_index:\n  assumes \"i < n\"\n  shows \"resize_vec n v $ i = v $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. resize_vec n v $ i = v $ i", "using assms"], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. resize_vec n v $ i = v $ i", "by (simp add: resize_vec_def)"], ["", "lemma mult_mat_vec_resize:\n  \"v \\<^sub>v* A = (resize_vec (dim_row A) v) \\<^sub>v* A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<^sub>v* A = resize_vec (dim_row A) v \\<^sub>v* A", "by (simp add: mult_vec_mat_def scalar_prod_def, rule arg_cong2[of _ _ _ _ vec], rule, rule,\n      rule sum.cong, rule, simp add: resize_vec_index)"], ["", "lemma assoc_mult_vec_mat:\n  assumes \"v \\<in> carrier_vec n1\" and \"A \\<in> carrier_mat n1 n2\" and \"B \\<in> carrier_mat n2 n3\"\n  shows \"v \\<^sub>v* (A * B) = (v \\<^sub>v* A) \\<^sub>v* B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<^sub>v* (A * B) = v \\<^sub>v* A \\<^sub>v* B", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec n1\n  A \\<in> carrier_mat n1 n2\n  B \\<in> carrier_mat n2 n3\n\ngoal (1 subgoal):\n 1. v \\<^sub>v* (A * B) = v \\<^sub>v* A \\<^sub>v* B", "by (intro eq_vecI, auto simp add: mult_vec_mat_def mult_mat_vec_def assoc_scalar_prod)"], ["", "lemma mult_vec_mat_transpose:\n  assumes \"dim_vec v = dim_row A\"\n  shows \"v \\<^sub>v* A = (transpose_mat A) *\\<^sub>v (v::'a::comm_semiring_0 vec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<^sub>v* A = A\\<^sup>T *\\<^sub>v v", "proof (simp add: mult_vec_mat_def mult_mat_vec_def, rule vec_cong, rule refl, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_col A \\<Longrightarrow>\n       v \\<bullet> col A i = col A i \\<bullet> v", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_col A \\<Longrightarrow>\n       v \\<bullet> col A i = col A i \\<bullet> v", "show \"v \\<bullet> col A j = col A j \\<bullet> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> col A j = col A j \\<bullet> v", "by (rule scalar_prod_comm, simp add: assms)"], ["proof (state)\nthis:\n  v \\<bullet> col A j = col A j \\<bullet> v\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>More about Matrices\\<close>"], ["", "definition nzrows :: \"'a::zero mat \\<Rightarrow> 'a vec list\"\n  where \"nzrows A = filter (\\<lambda>r. r \\<noteq> 0\\<^sub>v (dim_col A)) (rows A)\""], ["", "definition row_space :: \"'a mat \\<Rightarrow> 'a::semiring_0 vec set\"\n  where \"row_space A = (\\<lambda>v. mult_vec_mat v A) ` (carrier_vec (dim_row A))\""], ["", "definition row_echelon :: \"'a mat \\<Rightarrow> 'a::field mat\"\n  where \"row_echelon A = fst (gauss_jordan A (1\\<^sub>m (dim_row A)))\""], ["", "subsubsection \\<open>@{const nzrows}\\<close>"], ["", "lemma length_nzrows: \"length (nzrows A) \\<le> dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nzrows A) \\<le> dim_row A", "by (simp add: nzrows_def length_rows[symmetric] del: length_rows)"], ["", "lemma set_nzrows: \"set (nzrows A) = set (rows A) - {0\\<^sub>v (dim_col A)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (nzrows A) = set (rows A) - {0\\<^sub>v (dim_col A)}", "by (auto simp add: nzrows_def)"], ["", "lemma nzrows_nth_not_zero:\n  assumes \"i < length (nzrows A)\"\n  shows \"nzrows A ! i \\<noteq> 0\\<^sub>v (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nzrows A ! i \\<noteq> 0\\<^sub>v (dim_col A)", "using assms"], ["proof (prove)\nusing this:\n  i < length (nzrows A)\n\ngoal (1 subgoal):\n 1. nzrows A ! i \\<noteq> 0\\<^sub>v (dim_col A)", "unfolding nzrows_def"], ["proof (prove)\nusing this:\n  i < length\n       (filter (\\<lambda>r. r \\<noteq> 0\\<^sub>v (dim_col A)) (rows A))\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>r. r \\<noteq> 0\\<^sub>v (dim_col A)) (rows A) !\n    i \\<noteq>\n    0\\<^sub>v (dim_col A)", "using nth_mem"], ["proof (prove)\nusing this:\n  i < length\n       (filter (\\<lambda>r. r \\<noteq> 0\\<^sub>v (dim_col A)) (rows A))\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>r. r \\<noteq> 0\\<^sub>v (dim_col A)) (rows A) !\n    i \\<noteq>\n    0\\<^sub>v (dim_col A)", "by force"], ["", "subsubsection \\<open>@{const row_space}\\<close>"], ["", "lemma row_spaceI:\n  assumes \"x = v \\<^sub>v* A\"\n  shows \"x \\<in> row_space A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> row_space A", "unfolding row_space_def assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<^sub>v* A\n    \\<in> (\\<lambda>v. v \\<^sub>v* A) ` carrier_vec (dim_row A)", "by (rule, fact mult_mat_vec_resize, fact resize_vec_carrier)"], ["", "lemma row_spaceE:\n  assumes \"x \\<in> row_space A\"\n  obtains v where \"v \\<in> carrier_vec (dim_row A)\" and \"x = v \\<^sub>v* A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> carrier_vec (dim_row A); x = v \\<^sub>v* A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> row_space A\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> carrier_vec (dim_row A); x = v \\<^sub>v* A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding row_space_def"], ["proof (prove)\nusing this:\n  x \\<in> (\\<lambda>v. v \\<^sub>v* A) ` carrier_vec (dim_row A)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> carrier_vec (dim_row A); x = v \\<^sub>v* A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma row_space_alt: \"row_space A = range (\\<lambda>v. mult_vec_mat v A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space A = range (\\<lambda>v. v \\<^sub>v* A)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. row_space A \\<subseteq> range (\\<lambda>v. v \\<^sub>v* A)\n 2. range (\\<lambda>v. v \\<^sub>v* A) \\<subseteq> row_space A", "show \"row_space A \\<subseteq> range (\\<lambda>v. v \\<^sub>v* A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space A \\<subseteq> range (\\<lambda>v. v \\<^sub>v* A)", "unfolding row_space_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v. v \\<^sub>v* A) ` carrier_vec (dim_row A)\n    \\<subseteq> range (\\<lambda>v. v \\<^sub>v* A)", "by auto"], ["proof (state)\nthis:\n  row_space A \\<subseteq> range (\\<lambda>v. v \\<^sub>v* A)\n\ngoal (1 subgoal):\n 1. range (\\<lambda>v. v \\<^sub>v* A) \\<subseteq> row_space A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. range (\\<lambda>v. v \\<^sub>v* A) \\<subseteq> row_space A", "show \"range (\\<lambda>v. v \\<^sub>v* A) \\<subseteq> row_space A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (\\<lambda>v. v \\<^sub>v* A) \\<subseteq> row_space A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range (\\<lambda>v. v \\<^sub>v* A) \\<Longrightarrow>\n       x \\<in> row_space A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range (\\<lambda>v. v \\<^sub>v* A) \\<Longrightarrow>\n       x \\<in> row_space A", "assume \"x \\<in> range (\\<lambda>v. v \\<^sub>v* A)\""], ["proof (state)\nthis:\n  x \\<in> range (\\<lambda>v. v \\<^sub>v* A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range (\\<lambda>v. v \\<^sub>v* A) \\<Longrightarrow>\n       x \\<in> row_space A", "then"], ["proof (chain)\npicking this:\n  x \\<in> range (\\<lambda>v. v \\<^sub>v* A)", "obtain v where \"x = v \\<^sub>v* A\""], ["proof (prove)\nusing this:\n  x \\<in> range (\\<lambda>v. v \\<^sub>v* A)\n\ngoal (1 subgoal):\n 1. (\\<And>v. x = v \\<^sub>v* A \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  x = v \\<^sub>v* A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range (\\<lambda>v. v \\<^sub>v* A) \\<Longrightarrow>\n       x \\<in> row_space A", "thus \"x \\<in> row_space A\""], ["proof (prove)\nusing this:\n  x = v \\<^sub>v* A\n\ngoal (1 subgoal):\n 1. x \\<in> row_space A", "by (rule row_spaceI)"], ["proof (state)\nthis:\n  x \\<in> row_space A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  range (\\<lambda>v. v \\<^sub>v* A) \\<subseteq> row_space A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_space_mult:\n  assumes \"A \\<in> carrier_mat nr nc\" and \"B \\<in> carrier_mat nr nr\"\n  shows \"row_space (B * A) \\<subseteq> row_space A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space (B * A) \\<subseteq> row_space A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> row_space (B * A) \\<Longrightarrow> x \\<in> row_space A", "from assms(2) assms(1)"], ["proof (chain)\npicking this:\n  B \\<in> carrier_mat nr nr\n  A \\<in> carrier_mat nr nc", "have \"B * A \\<in> carrier_mat nr nc\""], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat nr nr\n  A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. B * A \\<in> carrier_mat nr nc", "by (rule mult_carrier_mat)"], ["proof (state)\nthis:\n  B * A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> row_space (B * A) \\<Longrightarrow> x \\<in> row_space A", "hence \"nr = dim_row (B * A)\""], ["proof (prove)\nusing this:\n  B * A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. nr = dim_row (B * A)", "by blast"], ["proof (state)\nthis:\n  nr = dim_row (B * A)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> row_space (B * A) \\<Longrightarrow> x \\<in> row_space A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> row_space (B * A) \\<Longrightarrow> x \\<in> row_space A", "assume \"x \\<in> row_space (B * A)\""], ["proof (state)\nthis:\n  x \\<in> row_space (B * A)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> row_space (B * A) \\<Longrightarrow> x \\<in> row_space A", "then"], ["proof (chain)\npicking this:\n  x \\<in> row_space (B * A)", "obtain v where \"v \\<in> carrier_vec nr\" and x: \"x = v \\<^sub>v* (B * A)\""], ["proof (prove)\nusing this:\n  x \\<in> row_space (B * A)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> carrier_vec nr; x = v \\<^sub>v* (B * A)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding \\<open>nr = dim_row (B * A)\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> row_space (B * A)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> carrier_vec (dim_row (B * A));\n         x = v \\<^sub>v* (B * A)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule row_spaceE)"], ["proof (state)\nthis:\n  v \\<in> carrier_vec nr\n  x = v \\<^sub>v* (B * A)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> row_space (B * A) \\<Longrightarrow> x \\<in> row_space A", "from this(1) assms(2) assms(1)"], ["proof (chain)\npicking this:\n  v \\<in> carrier_vec nr\n  B \\<in> carrier_mat nr nr\n  A \\<in> carrier_mat nr nc", "have \"x = (v \\<^sub>v* B) \\<^sub>v* A\""], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec nr\n  B \\<in> carrier_mat nr nr\n  A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. x = v \\<^sub>v* B \\<^sub>v* A", "unfolding x"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec nr\n  B \\<in> carrier_mat nr nr\n  A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. v \\<^sub>v* (B * A) = v \\<^sub>v* B \\<^sub>v* A", "by (rule assoc_mult_vec_mat)"], ["proof (state)\nthis:\n  x = v \\<^sub>v* B \\<^sub>v* A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> row_space (B * A) \\<Longrightarrow> x \\<in> row_space A", "thus \"x \\<in> row_space A\""], ["proof (prove)\nusing this:\n  x = v \\<^sub>v* B \\<^sub>v* A\n\ngoal (1 subgoal):\n 1. x \\<in> row_space A", "by (rule row_spaceI)"], ["proof (state)\nthis:\n  x \\<in> row_space A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_space_mult_unit:\n  assumes \"P \\<in> Units (ring_mat TYPE('a::semiring_1) (dim_row A) b)\"\n  shows \"row_space (P * A) = row_space A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space (P * A) = row_space A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. row_space (P * A) = row_space A", "have A: \"A \\<in> carrier_mat (dim_row A) (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat (dim_row A) (dim_col A)", "by simp"], ["proof (state)\nthis:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (1 subgoal):\n 1. row_space (P * A) = row_space A", "from assms"], ["proof (chain)\npicking this:\n  P \\<in> Units (ring_mat TYPE('a) (dim_row A) b)", "have P: \"P \\<in> carrier (ring_mat TYPE('a) (dim_row A) b)\" and\n    *: \"\\<exists>Q\\<in>(carrier (ring_mat TYPE('a) (dim_row A) b)).\n            Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P = \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>\""], ["proof (prove)\nusing this:\n  P \\<in> Units (ring_mat TYPE('a) (dim_row A) b)\n\ngoal (1 subgoal):\n 1. P \\<in> carrier (ring_mat TYPE('a) (dim_row A) b) &&&\n    \\<exists>Q\\<in>carrier (ring_mat TYPE('a) (dim_row A) b).\n       Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P =\n       \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>", "unfolding Units_def"], ["proof (prove)\nusing this:\n  P \\<in> {y \\<in> carrier (ring_mat TYPE('a) (dim_row A) b).\n           \\<exists>x\\<in>carrier (ring_mat TYPE('a) (dim_row A) b).\n              x \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> y =\n              \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> \\<and>\n              y \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> x =\n              \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>}\n\ngoal (1 subgoal):\n 1. P \\<in> carrier (ring_mat TYPE('a) (dim_row A) b) &&&\n    \\<exists>Q\\<in>carrier (ring_mat TYPE('a) (dim_row A) b).\n       Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P =\n       \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>", "by auto"], ["proof (state)\nthis:\n  P \\<in> carrier (ring_mat TYPE('a) (dim_row A) b)\n  \\<exists>Q\\<in>carrier (ring_mat TYPE('a) (dim_row A) b).\n     Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P =\n     \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>\n\ngoal (1 subgoal):\n 1. row_space (P * A) = row_space A", "from P"], ["proof (chain)\npicking this:\n  P \\<in> carrier (ring_mat TYPE('a) (dim_row A) b)", "have P_in: \"P \\<in> carrier_mat (dim_row A) (dim_row A)\""], ["proof (prove)\nusing this:\n  P \\<in> carrier (ring_mat TYPE('a) (dim_row A) b)\n\ngoal (1 subgoal):\n 1. P \\<in> carrier_mat (dim_row A) (dim_row A)", "by (simp add: ring_mat_def)"], ["proof (state)\nthis:\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n\ngoal (1 subgoal):\n 1. row_space (P * A) = row_space A", "from *"], ["proof (chain)\npicking this:\n  \\<exists>Q\\<in>carrier (ring_mat TYPE('a) (dim_row A) b).\n     Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P =\n     \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>", "obtain Q where \"Q \\<in> carrier (ring_mat TYPE('a) (dim_row A) b)\"\n    and \"Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P = \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<exists>Q\\<in>carrier (ring_mat TYPE('a) (dim_row A) b).\n     Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P =\n     \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        \\<lbrakk>Q \\<in> carrier (ring_mat TYPE('a) (dim_row A) b);\n         Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P =\n         \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  Q \\<in> carrier (ring_mat TYPE('a) (dim_row A) b)\n  Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P =\n  \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>\n\ngoal (1 subgoal):\n 1. row_space (P * A) = row_space A", "hence Q_in: \"Q \\<in> carrier_mat (dim_row A) (dim_row A)\" and QP: \"Q * P = 1\\<^sub>m (dim_row A)\""], ["proof (prove)\nusing this:\n  Q \\<in> carrier (ring_mat TYPE('a) (dim_row A) b)\n  Q \\<otimes>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub> P =\n  \\<one>\\<^bsub>ring_mat TYPE('a) (dim_row A) b\\<^esub>\n\ngoal (1 subgoal):\n 1. Q \\<in> carrier_mat (dim_row A) (dim_row A) &&&\n    Q * P = 1\\<^sub>m (dim_row A)", "by (simp_all add: ring_mat_def)"], ["proof (state)\nthis:\n  Q \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q * P = 1\\<^sub>m (dim_row A)\n\ngoal (1 subgoal):\n 1. row_space (P * A) = row_space A", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space (P * A) = row_space A", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. row_space (P * A) \\<subseteq> row_space A\n 2. row_space A \\<subseteq> row_space (P * A)", "from A P_in"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n  P \\<in> carrier_mat (dim_row A) (dim_row A)", "show \"row_space (P * A) \\<subseteq> row_space A\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n\ngoal (1 subgoal):\n 1. row_space (P * A) \\<subseteq> row_space A", "by (rule row_space_mult)"], ["proof (state)\nthis:\n  row_space (P * A) \\<subseteq> row_space A\n\ngoal (1 subgoal):\n 1. row_space A \\<subseteq> row_space (P * A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. row_space A \\<subseteq> row_space (P * A)", "from A P_in Q_in"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_row A) (dim_row A)", "have \"Q * (P * A) = (Q * P) * A\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_row A) (dim_row A)\n\ngoal (1 subgoal):\n 1. Q * (P * A) = Q * P * A", "by (simp only: assoc_mult_mat)"], ["proof (state)\nthis:\n  Q * (P * A) = Q * P * A\n\ngoal (1 subgoal):\n 1. row_space A \\<subseteq> row_space (P * A)", "also"], ["proof (state)\nthis:\n  Q * (P * A) = Q * P * A\n\ngoal (1 subgoal):\n 1. row_space A \\<subseteq> row_space (P * A)", "from A"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)", "have \"... = A\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (1 subgoal):\n 1. Q * P * A = A", "by (simp add: QP)"], ["proof (state)\nthis:\n  Q * P * A = A\n\ngoal (1 subgoal):\n 1. row_space A \\<subseteq> row_space (P * A)", "finally"], ["proof (chain)\npicking this:\n  Q * (P * A) = A", "have eq: \"row_space A = row_space (Q * (P * A))\""], ["proof (prove)\nusing this:\n  Q * (P * A) = A\n\ngoal (1 subgoal):\n 1. row_space A = row_space (Q * (P * A))", "by simp"], ["proof (state)\nthis:\n  row_space A = row_space (Q * (P * A))\n\ngoal (1 subgoal):\n 1. row_space A \\<subseteq> row_space (P * A)", "show \"row_space A \\<subseteq> row_space (P * A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space A \\<subseteq> row_space (P * A)", "unfolding eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space (Q * (P * A)) \\<subseteq> row_space (P * A)", "by (rule row_space_mult, rule mult_carrier_mat, fact+)"], ["proof (state)\nthis:\n  row_space A \\<subseteq> row_space (P * A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row_space (P * A) = row_space A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>@{const row_echelon}\\<close>"], ["", "lemma row_eq_zero_iff_pivot_fun:\n  assumes \"pivot_fun A f (dim_col A)\" and \"i < dim_row (A::'a::zero_neq_one mat)\"\n  shows \"(row A i = 0\\<^sub>v (dim_col A)) \\<longleftrightarrow> (f i = dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (row A i = 0\\<^sub>v (dim_col A)) = (f i = dim_col A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (row A i = 0\\<^sub>v (dim_col A)) = (f i = dim_col A)", "have *: \"dim_row A = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A = dim_row A", ".."], ["proof (state)\nthis:\n  dim_row A = dim_row A\n\ngoal (1 subgoal):\n 1. (row A i = 0\\<^sub>v (dim_col A)) = (f i = dim_col A)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (row A i = 0\\<^sub>v (dim_col A)) = (f i = dim_col A)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. row A i = 0\\<^sub>v (dim_col A) \\<Longrightarrow> f i = dim_col A\n 2. f i = dim_col A \\<Longrightarrow> row A i = 0\\<^sub>v (dim_col A)", "assume a: \"row A i = 0\\<^sub>v (dim_col A)\""], ["proof (state)\nthis:\n  row A i = 0\\<^sub>v (dim_col A)\n\ngoal (2 subgoals):\n 1. row A i = 0\\<^sub>v (dim_col A) \\<Longrightarrow> f i = dim_col A\n 2. f i = dim_col A \\<Longrightarrow> row A i = 0\\<^sub>v (dim_col A)", "show \"f i = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i = dim_col A", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. f i \\<noteq> dim_col A \\<Longrightarrow> False", "assume \"f i \\<noteq> dim_col A\""], ["proof (state)\nthis:\n  f i \\<noteq> dim_col A\n\ngoal (1 subgoal):\n 1. f i \\<noteq> dim_col A \\<Longrightarrow> False", "with pivot_funD(1)[OF * assms]"], ["proof (chain)\npicking this:\n  f i \\<le> dim_col A\n  f i \\<noteq> dim_col A", "have **: \"f i < dim_col A\""], ["proof (prove)\nusing this:\n  f i \\<le> dim_col A\n  f i \\<noteq> dim_col A\n\ngoal (1 subgoal):\n 1. f i < dim_col A", "by simp"], ["proof (state)\nthis:\n  f i < dim_col A\n\ngoal (1 subgoal):\n 1. f i \\<noteq> dim_col A \\<Longrightarrow> False", "with * assms"], ["proof (chain)\npicking this:\n  dim_row A = dim_row A\n  pivot_fun A f (dim_col A)\n  i < dim_row A\n  f i < dim_col A", "have \"A $$ (i, f i) = 1\""], ["proof (prove)\nusing this:\n  dim_row A = dim_row A\n  pivot_fun A f (dim_col A)\n  i < dim_row A\n  f i < dim_col A\n\ngoal (1 subgoal):\n 1. A $$ (i, f i) = (1::'a)", "by (rule pivot_funD)"], ["proof (state)\nthis:\n  A $$ (i, f i) = (1::'a)\n\ngoal (1 subgoal):\n 1. f i \\<noteq> dim_col A \\<Longrightarrow> False", "with ** assms(2)"], ["proof (chain)\npicking this:\n  f i < dim_col A\n  i < dim_row A\n  A $$ (i, f i) = (1::'a)", "have \"row A i $ (f i) = 1\""], ["proof (prove)\nusing this:\n  f i < dim_col A\n  i < dim_row A\n  A $$ (i, f i) = (1::'a)\n\ngoal (1 subgoal):\n 1. row A i $ f i = (1::'a)", "by simp"], ["proof (state)\nthis:\n  row A i $ f i = (1::'a)\n\ngoal (1 subgoal):\n 1. f i \\<noteq> dim_col A \\<Longrightarrow> False", "hence \"(1::'a) = (0\\<^sub>v (dim_col A)) $ (f i)\""], ["proof (prove)\nusing this:\n  row A i $ f i = (1::'a)\n\ngoal (1 subgoal):\n 1. (1::'a) = 0\\<^sub>v (dim_col A) $ f i", "by (simp only: a)"], ["proof (state)\nthis:\n  (1::'a) = 0\\<^sub>v (dim_col A) $ f i\n\ngoal (1 subgoal):\n 1. f i \\<noteq> dim_col A \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (1::'a) = 0\\<^sub>v (dim_col A) $ f i\n\ngoal (1 subgoal):\n 1. f i \\<noteq> dim_col A \\<Longrightarrow> False", "have \"... = (0::'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>v (dim_col A) $ f i = (0::'a)", "using **"], ["proof (prove)\nusing this:\n  f i < dim_col A\n\ngoal (1 subgoal):\n 1. 0\\<^sub>v (dim_col A) $ f i = (0::'a)", "by simp"], ["proof (state)\nthis:\n  0\\<^sub>v (dim_col A) $ f i = (0::'a)\n\ngoal (1 subgoal):\n 1. f i \\<noteq> dim_col A \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (1::'a) = (0::'a)", "show False"], ["proof (prove)\nusing this:\n  (1::'a) = (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f i = dim_col A\n\ngoal (1 subgoal):\n 1. f i = dim_col A \\<Longrightarrow> row A i = 0\\<^sub>v (dim_col A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f i = dim_col A \\<Longrightarrow> row A i = 0\\<^sub>v (dim_col A)", "assume a: \"f i = dim_col A\""], ["proof (state)\nthis:\n  f i = dim_col A\n\ngoal (1 subgoal):\n 1. f i = dim_col A \\<Longrightarrow> row A i = 0\\<^sub>v (dim_col A)", "show \"row A i = 0\\<^sub>v (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row A i = 0\\<^sub>v (dim_col A)", "proof (rule, simp_all add: assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia. ia < dim_col A \\<Longrightarrow> A $$ (i, ia) = (0::'a)", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia. ia < dim_col A \\<Longrightarrow> A $$ (i, ia) = (0::'a)", "assume \"j < dim_col A\""], ["proof (state)\nthis:\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>ia. ia < dim_col A \\<Longrightarrow> A $$ (i, ia) = (0::'a)", "hence \"j < f i\""], ["proof (prove)\nusing this:\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. j < f i", "by (simp only: a)"], ["proof (state)\nthis:\n  j < f i\n\ngoal (1 subgoal):\n 1. \\<And>ia. ia < dim_col A \\<Longrightarrow> A $$ (i, ia) = (0::'a)", "with * assms"], ["proof (chain)\npicking this:\n  dim_row A = dim_row A\n  pivot_fun A f (dim_col A)\n  i < dim_row A\n  j < f i", "show \"A $$ (i, j) = 0\""], ["proof (prove)\nusing this:\n  dim_row A = dim_row A\n  pivot_fun A f (dim_col A)\n  i < dim_row A\n  j < f i\n\ngoal (1 subgoal):\n 1. A $$ (i, j) = (0::'a)", "by (rule pivot_funD)"], ["proof (state)\nthis:\n  A $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row A i = 0\\<^sub>v (dim_col A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (row A i = 0\\<^sub>v (dim_col A)) = (f i = dim_col A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_not_zero_iff_pivot_fun:\n  assumes \"pivot_fun A f (dim_col A)\" and \"i < dim_row (A::'a::zero_neq_one mat)\"\n  shows \"(row A i \\<noteq> 0\\<^sub>v (dim_col A)) \\<longleftrightarrow> (f i < dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (row A i \\<noteq> 0\\<^sub>v (dim_col A)) = (f i < dim_col A)", "proof (simp only: row_eq_zero_iff_pivot_fun[OF assms])"], ["proof (state)\ngoal (1 subgoal):\n 1. (f i \\<noteq> dim_col A) = (f i < dim_col A)", "have \"f i \\<le> dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i \\<le> dim_col A", "by (rule pivot_funD[where ?f = f], rule refl, fact+)"], ["proof (state)\nthis:\n  f i \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. (f i \\<noteq> dim_col A) = (f i < dim_col A)", "thus \"(f i \\<noteq> dim_col A) = (f i < dim_col A)\""], ["proof (prove)\nusing this:\n  f i \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. (f i \\<noteq> dim_col A) = (f i < dim_col A)", "by auto"], ["proof (state)\nthis:\n  (f i \\<noteq> dim_col A) = (f i < dim_col A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pivot_fun_stabilizes:\n  assumes \"pivot_fun A f nc\" and \"i1 \\<le> i2\" and \"i2 < dim_row A\" and \"nc \\<le> f i1\"\n  shows \"f i2 = nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i2 = nc", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f i2 = nc", "from assms(2)"], ["proof (chain)\npicking this:\n  i1 \\<le> i2", "have \"i2 = i1 + (i2 - i1)\""], ["proof (prove)\nusing this:\n  i1 \\<le> i2\n\ngoal (1 subgoal):\n 1. i2 = i1 + (i2 - i1)", "by simp"], ["proof (state)\nthis:\n  i2 = i1 + (i2 - i1)\n\ngoal (1 subgoal):\n 1. f i2 = nc", "then"], ["proof (chain)\npicking this:\n  i2 = i1 + (i2 - i1)", "obtain k where \"i2 = i1 + k\""], ["proof (prove)\nusing this:\n  i2 = i1 + (i2 - i1)\n\ngoal (1 subgoal):\n 1. (\\<And>k. i2 = i1 + k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  i2 = i1 + k\n\ngoal (1 subgoal):\n 1. f i2 = nc", "from assms(3) assms(4)"], ["proof (chain)\npicking this:\n  i2 < dim_row A\n  nc \\<le> f i1", "show ?thesis"], ["proof (prove)\nusing this:\n  i2 < dim_row A\n  nc \\<le> f i1\n\ngoal (1 subgoal):\n 1. f i2 = nc", "unfolding \\<open>i2 = i1 + k\\<close>"], ["proof (prove)\nusing this:\n  i1 + k < dim_row A\n  nc \\<le> f i1\n\ngoal (1 subgoal):\n 1. f (i1 + k) = nc", "proof (induct k arbitrary: i1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>i1 + 0 < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + 0) = nc\n 2. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "case 0"], ["proof (state)\nthis:\n  i1 + 0 < dim_row A\n  nc \\<le> f i1\n\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>i1 + 0 < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + 0) = nc\n 2. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "from this(1)"], ["proof (chain)\npicking this:\n  i1 + 0 < dim_row A", "have \"i1 < dim_row A\""], ["proof (prove)\nusing this:\n  i1 + 0 < dim_row A\n\ngoal (1 subgoal):\n 1. i1 < dim_row A", "by simp"], ["proof (state)\nthis:\n  i1 < dim_row A\n\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>i1 + 0 < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + 0) = nc\n 2. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "from _ assms(1) this"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  pivot_fun A f nc\n  i1 < dim_row A", "have \"f i1 \\<le> nc\""], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  pivot_fun A f nc\n  i1 < dim_row A\n\ngoal (1 subgoal):\n 1. f i1 \\<le> nc", "by (rule pivot_funD, intro refl)"], ["proof (state)\nthis:\n  f i1 \\<le> nc\n\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>i1 + 0 < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + 0) = nc\n 2. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "with \\<open>nc \\<le> f i1\\<close>"], ["proof (chain)\npicking this:\n  nc \\<le> f i1\n  f i1 \\<le> nc", "show ?case"], ["proof (prove)\nusing this:\n  nc \\<le> f i1\n  f i1 \\<le> nc\n\ngoal (1 subgoal):\n 1. f (i1 + 0) = nc", "by simp"], ["proof (state)\nthis:\n  f (i1 + 0) = nc\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>?i1.0 + k < dim_row A; nc \\<le> f ?i1.0\\<rbrakk>\n  \\<Longrightarrow> f (?i1.0 + k) = nc\n  i1 + Suc k < dim_row A\n  nc \\<le> f i1\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "from Suc(2)"], ["proof (chain)\npicking this:\n  i1 + Suc k < dim_row A", "have \"Suc (i1 + k) < dim_row A\""], ["proof (prove)\nusing this:\n  i1 + Suc k < dim_row A\n\ngoal (1 subgoal):\n 1. Suc (i1 + k) < dim_row A", "by simp"], ["proof (state)\nthis:\n  Suc (i1 + k) < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "hence \"Suc i1 + k < dim_row A\""], ["proof (prove)\nusing this:\n  Suc (i1 + k) < dim_row A\n\ngoal (1 subgoal):\n 1. Suc i1 + k < dim_row A", "by simp"], ["proof (state)\nthis:\n  Suc i1 + k < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "hence \"Suc i1 < dim_row A\""], ["proof (prove)\nusing this:\n  Suc i1 + k < dim_row A\n\ngoal (1 subgoal):\n 1. Suc i1 < dim_row A", "by simp"], ["proof (state)\nthis:\n  Suc i1 < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "hence \"i1 < dim_row A\""], ["proof (prove)\nusing this:\n  Suc i1 < dim_row A\n\ngoal (1 subgoal):\n 1. i1 < dim_row A", "by simp"], ["proof (state)\nthis:\n  i1 < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "have \"nc \\<le> f (Suc i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nc \\<le> f (Suc i1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nc \\<le> f (Suc i1)", "have \"f i1 < f (Suc i1) \\<or> f (Suc i1) = nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i1 < f (Suc i1) \\<or> f (Suc i1) = nc", "by (rule pivot_funD, rule refl, fact+)"], ["proof (state)\nthis:\n  f i1 < f (Suc i1) \\<or> f (Suc i1) = nc\n\ngoal (1 subgoal):\n 1. nc \\<le> f (Suc i1)", "with Suc(3)"], ["proof (chain)\npicking this:\n  nc \\<le> f i1\n  f i1 < f (Suc i1) \\<or> f (Suc i1) = nc", "show ?thesis"], ["proof (prove)\nusing this:\n  nc \\<le> f i1\n  f i1 < f (Suc i1) \\<or> f (Suc i1) = nc\n\ngoal (1 subgoal):\n 1. nc \\<le> f (Suc i1)", "by auto"], ["proof (state)\nthis:\n  nc \\<le> f (Suc i1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nc \\<le> f (Suc i1)\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "with \\<open>Suc i1 + k < dim_row A\\<close>"], ["proof (chain)\npicking this:\n  Suc i1 + k < dim_row A\n  nc \\<le> f (Suc i1)", "have \"f (Suc i1 + k) = nc\""], ["proof (prove)\nusing this:\n  Suc i1 + k < dim_row A\n  nc \\<le> f (Suc i1)\n\ngoal (1 subgoal):\n 1. f (Suc i1 + k) = nc", "by (rule Suc(1))"], ["proof (state)\nthis:\n  f (Suc i1 + k) = nc\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>i1 + k < dim_row A; nc \\<le> f i1\\<rbrakk>\n                   \\<Longrightarrow> f (i1 + k) = nc;\n        i1 + Suc k < dim_row A; nc \\<le> f i1\\<rbrakk>\n       \\<Longrightarrow> f (i1 + Suc k) = nc", "thus ?case"], ["proof (prove)\nusing this:\n  f (Suc i1 + k) = nc\n\ngoal (1 subgoal):\n 1. f (i1 + Suc k) = nc", "by simp"], ["proof (state)\nthis:\n  f (i1 + Suc k) = nc\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f i2 = nc\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pivot_fun_mono_strict:\n  assumes \"pivot_fun A f nc\" and \"i1 < i2\" and \"i2 < dim_row A\" and \"f i1 < nc\"\n  shows \"f i1 < f i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i1 < f i2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f i1 < f i2", "from assms(2)"], ["proof (chain)\npicking this:\n  i1 < i2", "have \"i2 - i1 \\<noteq> 0\" and \"i2 = i1 + (i2 - i1)\""], ["proof (prove)\nusing this:\n  i1 < i2\n\ngoal (1 subgoal):\n 1. i2 - i1 \\<noteq> 0 &&& i2 = i1 + (i2 - i1)", "by simp_all"], ["proof (state)\nthis:\n  i2 - i1 \\<noteq> 0\n  i2 = i1 + (i2 - i1)\n\ngoal (1 subgoal):\n 1. f i1 < f i2", "then"], ["proof (chain)\npicking this:\n  i2 - i1 \\<noteq> 0\n  i2 = i1 + (i2 - i1)", "obtain k where \"k \\<noteq> 0\" and \"i2 = i1 + k\""], ["proof (prove)\nusing this:\n  i2 - i1 \\<noteq> 0\n  i2 = i1 + (i2 - i1)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k \\<noteq> 0; i2 = i1 + k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  k \\<noteq> 0\n  i2 = i1 + k\n\ngoal (1 subgoal):\n 1. f i1 < f i2", "from this(1) assms(3) assms(4)"], ["proof (chain)\npicking this:\n  k \\<noteq> 0\n  i2 < dim_row A\n  f i1 < nc", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n  i2 < dim_row A\n  f i1 < nc\n\ngoal (1 subgoal):\n 1. f i1 < f i2", "unfolding \\<open>i2 = i1 + k\\<close>"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n  i1 + k < dim_row A\n  f i1 < nc\n\ngoal (1 subgoal):\n 1. f i1 < f (i1 + k)", "proof (induct k arbitrary: i1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>0 \\<noteq> 0; i1 + 0 < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + 0)\n 2. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "case 0"], ["proof (state)\nthis:\n  0 \\<noteq> 0\n  i1 + 0 < dim_row A\n  f i1 < nc\n\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>0 \\<noteq> 0; i1 + 0 < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + 0)\n 2. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "thus ?case"], ["proof (prove)\nusing this:\n  0 \\<noteq> 0\n  i1 + 0 < dim_row A\n  f i1 < nc\n\ngoal (1 subgoal):\n 1. f i1 < f (i1 + 0)", "by simp"], ["proof (state)\nthis:\n  f i1 < f (i1 + 0)\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>k \\<noteq> 0; ?i1.0 + k < dim_row A; f ?i1.0 < nc\\<rbrakk>\n  \\<Longrightarrow> f ?i1.0 < f (?i1.0 + k)\n  Suc k \\<noteq> 0\n  i1 + Suc k < dim_row A\n  f i1 < nc\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "from Suc(3)"], ["proof (chain)\npicking this:\n  i1 + Suc k < dim_row A", "have \"Suc (i1 + k) < dim_row A\""], ["proof (prove)\nusing this:\n  i1 + Suc k < dim_row A\n\ngoal (1 subgoal):\n 1. Suc (i1 + k) < dim_row A", "by simp"], ["proof (state)\nthis:\n  Suc (i1 + k) < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "hence \"Suc i1 + k < dim_row A\""], ["proof (prove)\nusing this:\n  Suc (i1 + k) < dim_row A\n\ngoal (1 subgoal):\n 1. Suc i1 + k < dim_row A", "by simp"], ["proof (state)\nthis:\n  Suc i1 + k < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "hence \"Suc i1 < dim_row A\""], ["proof (prove)\nusing this:\n  Suc i1 + k < dim_row A\n\ngoal (1 subgoal):\n 1. Suc i1 < dim_row A", "by simp"], ["proof (state)\nthis:\n  Suc i1 < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "hence \"i1 < dim_row A\""], ["proof (prove)\nusing this:\n  Suc i1 < dim_row A\n\ngoal (1 subgoal):\n 1. i1 < dim_row A", "by simp"], ["proof (state)\nthis:\n  i1 < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "have *: \"f i1 < f (Suc i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i1 < f (Suc i1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f i1 < f (Suc i1)", "have \"f i1 < f (Suc i1) \\<or> f (Suc i1) = nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i1 < f (Suc i1) \\<or> f (Suc i1) = nc", "by (rule pivot_funD, rule refl, fact+)"], ["proof (state)\nthis:\n  f i1 < f (Suc i1) \\<or> f (Suc i1) = nc\n\ngoal (1 subgoal):\n 1. f i1 < f (Suc i1)", "with Suc(4)"], ["proof (chain)\npicking this:\n  f i1 < nc\n  f i1 < f (Suc i1) \\<or> f (Suc i1) = nc", "show ?thesis"], ["proof (prove)\nusing this:\n  f i1 < nc\n  f i1 < f (Suc i1) \\<or> f (Suc i1) = nc\n\ngoal (1 subgoal):\n 1. f i1 < f (Suc i1)", "by auto"], ["proof (state)\nthis:\n  f i1 < f (Suc i1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f i1 < f (Suc i1)\n\ngoal (1 subgoal):\n 1. \\<And>k i1.\n       \\<lbrakk>\\<And>i1.\n                   \\<lbrakk>k \\<noteq> 0; i1 + k < dim_row A;\n                    f i1 < nc\\<rbrakk>\n                   \\<Longrightarrow> f i1 < f (i1 + k);\n        Suc k \\<noteq> 0; i1 + Suc k < dim_row A; f i1 < nc\\<rbrakk>\n       \\<Longrightarrow> f i1 < f (i1 + Suc k)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. f i1 < f (i1 + Suc k)", "proof (simp, cases \"k = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))\n 2. k \\<noteq> 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))", "case True"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))\n 2. k \\<noteq> 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))", "show \"f i1 < f (Suc (i1 + k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i1 < f (Suc (i1 + k))", "by (simp add: True *)"], ["proof (state)\nthis:\n  f i1 < f (Suc (i1 + k))\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))", "case False"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))", "have \"f (Suc i1) \\<le> f (Suc i1 + k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc i1) \\<le> f (Suc i1 + k)", "proof (cases \"f (Suc i1) < nc\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)\n 2. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "case True"], ["proof (state)\nthis:\n  f (Suc i1) < nc\n\ngoal (2 subgoals):\n 1. f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)\n 2. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "from False \\<open>Suc i1 + k < dim_row A\\<close> True"], ["proof (chain)\npicking this:\n  k \\<noteq> 0\n  Suc i1 + k < dim_row A\n  f (Suc i1) < nc", "have \"f (Suc i1) < f (Suc i1 + k)\""], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n  Suc i1 + k < dim_row A\n  f (Suc i1) < nc\n\ngoal (1 subgoal):\n 1. f (Suc i1) < f (Suc i1 + k)", "by (rule Suc(1))"], ["proof (state)\nthis:\n  f (Suc i1) < f (Suc i1 + k)\n\ngoal (2 subgoals):\n 1. f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)\n 2. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f (Suc i1) < f (Suc i1 + k)\n\ngoal (1 subgoal):\n 1. f (Suc i1) \\<le> f (Suc i1 + k)", "by simp"], ["proof (state)\nthis:\n  f (Suc i1) \\<le> f (Suc i1 + k)\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "case False"], ["proof (state)\nthis:\n  \\<not> f (Suc i1) < nc\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "hence \"nc \\<le> f (Suc i1)\""], ["proof (prove)\nusing this:\n  \\<not> f (Suc i1) < nc\n\ngoal (1 subgoal):\n 1. nc \\<le> f (Suc i1)", "by simp"], ["proof (state)\nthis:\n  nc \\<le> f (Suc i1)\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "from assms(1) _ \\<open>Suc i1 + k < dim_row A\\<close> this"], ["proof (chain)\npicking this:\n  pivot_fun A f nc\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  Suc i1 + k < dim_row A\n  nc \\<le> f (Suc i1)", "have \"f (Suc i1 + k) = nc\""], ["proof (prove)\nusing this:\n  pivot_fun A f nc\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  Suc i1 + k < dim_row A\n  nc \\<le> f (Suc i1)\n\ngoal (1 subgoal):\n 1. f (Suc i1 + k) = nc", "by (rule pivot_fun_stabilizes[where ?f=f], simp)"], ["proof (state)\nthis:\n  f (Suc i1 + k) = nc\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "moreover"], ["proof (state)\nthis:\n  f (Suc i1 + k) = nc\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "have \"f (Suc i1) = nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc i1) = nc", "by (rule pivot_fun_stabilizes[where ?f=f], fact, rule le_refl, fact+)"], ["proof (state)\nthis:\n  f (Suc i1) = nc\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i1) < nc \\<Longrightarrow> f (Suc i1) \\<le> f (Suc i1 + k)", "ultimately"], ["proof (chain)\npicking this:\n  f (Suc i1 + k) = nc\n  f (Suc i1) = nc", "show ?thesis"], ["proof (prove)\nusing this:\n  f (Suc i1 + k) = nc\n  f (Suc i1) = nc\n\ngoal (1 subgoal):\n 1. f (Suc i1) \\<le> f (Suc i1 + k)", "by simp"], ["proof (state)\nthis:\n  f (Suc i1) \\<le> f (Suc i1 + k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f (Suc i1) \\<le> f (Suc i1 + k)\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))", "also"], ["proof (state)\nthis:\n  f (Suc i1) \\<le> f (Suc i1 + k)\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))", "have \"... = f (i1 + Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc i1 + k) = f (i1 + Suc k)", "by simp"], ["proof (state)\nthis:\n  f (Suc i1 + k) = f (i1 + Suc k)\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))", "finally"], ["proof (chain)\npicking this:\n  f (Suc i1) \\<le> f (i1 + Suc k)", "have \"f (Suc i1) \\<le> f (i1 + Suc k)\""], ["proof (prove)\nusing this:\n  f (Suc i1) \\<le> f (i1 + Suc k)\n\ngoal (1 subgoal):\n 1. f (Suc i1) \\<le> f (i1 + Suc k)", "."], ["proof (state)\nthis:\n  f (Suc i1) \\<le> f (i1 + Suc k)\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> f i1 < f (Suc (i1 + k))", "with *"], ["proof (chain)\npicking this:\n  f i1 < f (Suc i1)\n  f (Suc i1) \\<le> f (i1 + Suc k)", "show \"f i1 < f (Suc (i1 + k))\""], ["proof (prove)\nusing this:\n  f i1 < f (Suc i1)\n  f (Suc i1) \\<le> f (i1 + Suc k)\n\ngoal (1 subgoal):\n 1. f i1 < f (Suc (i1 + k))", "by simp"], ["proof (state)\nthis:\n  f i1 < f (Suc (i1 + k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f i1 < f (i1 + Suc k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f i1 < f i2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pivot_fun_mono:\n  assumes \"pivot_fun A f nc\" and \"i1 \\<le> i2\" and \"i2 < dim_row A\"\n  shows \"f i1 \\<le> f i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i1 \\<le> f i2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f i1 \\<le> f i2", "from assms(2)"], ["proof (chain)\npicking this:\n  i1 \\<le> i2", "have \"i1 < i2 \\<or> i1 = i2\""], ["proof (prove)\nusing this:\n  i1 \\<le> i2\n\ngoal (1 subgoal):\n 1. i1 < i2 \\<or> i1 = i2", "by auto"], ["proof (state)\nthis:\n  i1 < i2 \\<or> i1 = i2\n\ngoal (1 subgoal):\n 1. f i1 \\<le> f i2", "thus ?thesis"], ["proof (prove)\nusing this:\n  i1 < i2 \\<or> i1 = i2\n\ngoal (1 subgoal):\n 1. f i1 \\<le> f i2", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> f i1 \\<le> f i2\n 2. i1 = i2 \\<Longrightarrow> f i1 \\<le> f i2", "assume \"i1 < i2\""], ["proof (state)\nthis:\n  i1 < i2\n\ngoal (2 subgoals):\n 1. i1 < i2 \\<Longrightarrow> f i1 \\<le> f i2\n 2. i1 = i2 \\<Longrightarrow> f i1 \\<le> f i2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f i1 \\<le> f i2", "proof (cases \"f i1 < nc\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2\n 2. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "case True"], ["proof (state)\nthis:\n  f i1 < nc\n\ngoal (2 subgoals):\n 1. f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2\n 2. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "from assms(1) \\<open>i1 < i2\\<close> assms(3) this"], ["proof (chain)\npicking this:\n  pivot_fun A f nc\n  i1 < i2\n  i2 < dim_row A\n  f i1 < nc", "have \"f i1 < f i2\""], ["proof (prove)\nusing this:\n  pivot_fun A f nc\n  i1 < i2\n  i2 < dim_row A\n  f i1 < nc\n\ngoal (1 subgoal):\n 1. f i1 < f i2", "by (rule pivot_fun_mono_strict)"], ["proof (state)\nthis:\n  f i1 < f i2\n\ngoal (2 subgoals):\n 1. f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2\n 2. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "thus ?thesis"], ["proof (prove)\nusing this:\n  f i1 < f i2\n\ngoal (1 subgoal):\n 1. f i1 \\<le> f i2", "by simp"], ["proof (state)\nthis:\n  f i1 \\<le> f i2\n\ngoal (1 subgoal):\n 1. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "case False"], ["proof (state)\nthis:\n  \\<not> f i1 < nc\n\ngoal (1 subgoal):\n 1. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "hence \"nc \\<le> f i1\""], ["proof (prove)\nusing this:\n  \\<not> f i1 < nc\n\ngoal (1 subgoal):\n 1. nc \\<le> f i1", "by simp"], ["proof (state)\nthis:\n  nc \\<le> f i1\n\ngoal (1 subgoal):\n 1. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "from assms(1) _ _ this"], ["proof (chain)\npicking this:\n  pivot_fun A f nc\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  nc \\<le> f i1", "have \"f i1 = nc\""], ["proof (prove)\nusing this:\n  pivot_fun A f nc\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  nc \\<le> f i1\n\ngoal (1 subgoal):\n 1. f i1 = nc", "proof (rule pivot_fun_stabilizes[where ?f=f], simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 < dim_row A", "from assms(2) assms(3)"], ["proof (chain)\npicking this:\n  i1 \\<le> i2\n  i2 < dim_row A", "show \"i1 < dim_row A\""], ["proof (prove)\nusing this:\n  i1 \\<le> i2\n  i2 < dim_row A\n\ngoal (1 subgoal):\n 1. i1 < dim_row A", "by (rule le_less_trans)"], ["proof (state)\nthis:\n  i1 < dim_row A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f i1 = nc\n\ngoal (1 subgoal):\n 1. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "moreover"], ["proof (state)\nthis:\n  f i1 = nc\n\ngoal (1 subgoal):\n 1. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "have \"f i2 = nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i2 = nc", "by (rule pivot_fun_stabilizes[where ?f=f], fact+)"], ["proof (state)\nthis:\n  f i2 = nc\n\ngoal (1 subgoal):\n 1. \\<not> f i1 < nc \\<Longrightarrow> f i1 \\<le> f i2", "ultimately"], ["proof (chain)\npicking this:\n  f i1 = nc\n  f i2 = nc", "show ?thesis"], ["proof (prove)\nusing this:\n  f i1 = nc\n  f i2 = nc\n\ngoal (1 subgoal):\n 1. f i1 \\<le> f i2", "by simp"], ["proof (state)\nthis:\n  f i1 \\<le> f i2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f i1 \\<le> f i2\n\ngoal (1 subgoal):\n 1. i1 = i2 \\<Longrightarrow> f i1 \\<le> f i2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 = i2 \\<Longrightarrow> f i1 \\<le> f i2", "assume \"i1 = i2\""], ["proof (state)\nthis:\n  i1 = i2\n\ngoal (1 subgoal):\n 1. i1 = i2 \\<Longrightarrow> f i1 \\<le> f i2", "thus ?thesis"], ["proof (prove)\nusing this:\n  i1 = i2\n\ngoal (1 subgoal):\n 1. f i1 \\<le> f i2", "by simp"], ["proof (state)\nthis:\n  f i1 \\<le> f i2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f i1 \\<le> f i2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_echelon_carrier:\n  assumes \"A \\<in> carrier_mat nr nc\"\n  shows \"row_echelon A \\<in> carrier_mat nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "from assms"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat nr nc", "have \"dim_row A = nr\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. dim_row A = nr", "by simp"], ["proof (state)\nthis:\n  dim_row A = nr\n\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "let ?B = \"1\\<^sub>m (dim_row A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "note assms"], ["proof (state)\nthis:\n  A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "moreover"], ["proof (state)\nthis:\n  A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "have \"?B \\<in> carrier_mat nr nr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m (dim_row A) \\<in> carrier_mat nr nr", "by (simp add: \\<open>dim_row A = nr\\<close>)"], ["proof (state)\nthis:\n  1\\<^sub>m (dim_row A) \\<in> carrier_mat nr nr\n\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "moreover"], ["proof (state)\nthis:\n  1\\<^sub>m (dim_row A) \\<in> carrier_mat nr nr\n\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "from surj_pair"], ["proof (chain)\npicking this:\n  \\<exists>x y. ?p = (x, y)", "obtain A' B' where *: \"gauss_jordan A ?B = (A', B')\""], ["proof (prove)\nusing this:\n  \\<exists>x y. ?p = (x, y)\n\ngoal (1 subgoal):\n 1. (\\<And>A' B'.\n        gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B')\n\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "ultimately"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat nr nc\n  1\\<^sub>m (dim_row A) \\<in> carrier_mat nr nr\n  gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B')", "have \"A' \\<in> carrier_mat nr nc\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr nc\n  1\\<^sub>m (dim_row A) \\<in> carrier_mat nr nr\n  gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B')\n\ngoal (1 subgoal):\n 1. A' \\<in> carrier_mat nr nc", "by (rule gauss_jordan_carrier)"], ["proof (state)\nthis:\n  A' \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "thus ?thesis"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat nr nc", "by (simp add: row_echelon_def *)"], ["proof (state)\nthis:\n  row_echelon A \\<in> carrier_mat nr nc\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dim_row_echelon[simp]:\n  shows \"dim_row (row_echelon A) = dim_row A\" and \"dim_col (row_echelon A) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (row_echelon A) = dim_row A &&&\n    dim_col (row_echelon A) = dim_col A", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. dim_row (row_echelon A) = dim_row A\n 2. dim_col (row_echelon A) = dim_col A", "have \"A \\<in> carrier_mat (dim_row A) (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat (dim_row A) (dim_col A)", "by simp"], ["proof (state)\nthis:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (2 subgoals):\n 1. dim_row (row_echelon A) = dim_row A\n 2. dim_col (row_echelon A) = dim_col A", "hence \"row_echelon A \\<in> carrier_mat (dim_row A) (dim_col A)\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (1 subgoal):\n 1. row_echelon A \\<in> carrier_mat (dim_row A) (dim_col A)", "by (rule row_echelon_carrier)"], ["proof (state)\nthis:\n  row_echelon A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (2 subgoals):\n 1. dim_row (row_echelon A) = dim_row A\n 2. dim_col (row_echelon A) = dim_col A", "thus \"dim_row (row_echelon A) = dim_row A\" and \"dim_col (row_echelon A) = dim_col A\""], ["proof (prove)\nusing this:\n  row_echelon A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (1 subgoal):\n 1. dim_row (row_echelon A) = dim_row A &&&\n    dim_col (row_echelon A) = dim_col A", "by simp_all"], ["proof (state)\nthis:\n  dim_row (row_echelon A) = dim_row A\n  dim_col (row_echelon A) = dim_col A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_echelon_transform:\n  obtains P where \"P \\<in> Units (ring_mat TYPE('a::field) (dim_row A) b)\" and \"row_echelon A = P * A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?B = \"1\\<^sub>m (dim_row A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"A \\<in> carrier_mat (dim_row A) (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat (dim_row A) (dim_col A)", "by simp"], ["proof (state)\nthis:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?B \\<in> carrier_mat (dim_row A) (dim_row A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m (dim_row A) \\<in> carrier_mat (dim_row A) (dim_row A)", "by simp"], ["proof (state)\nthis:\n  1\\<^sub>m (dim_row A) \\<in> carrier_mat (dim_row A) (dim_row A)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  1\\<^sub>m (dim_row A) \\<in> carrier_mat (dim_row A) (dim_row A)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from surj_pair"], ["proof (chain)\npicking this:\n  \\<exists>x y. ?p = (x, y)", "obtain A' B' where *: \"gauss_jordan A ?B = (A', B')\""], ["proof (prove)\nusing this:\n  \\<exists>x y. ?p = (x, y)\n\ngoal (1 subgoal):\n 1. (\\<And>A' B'.\n        gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B')\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n  1\\<^sub>m (dim_row A) \\<in> carrier_mat (dim_row A) (dim_row A)\n  gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B')", "have \"\\<exists>P\\<in>Units (ring_mat TYPE('a) (dim_row A) b). A' = P * A \\<and> B' = P * ?B\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n  1\\<^sub>m (dim_row A) \\<in> carrier_mat (dim_row A) (dim_row A)\n  gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B')\n\ngoal (1 subgoal):\n 1. \\<exists>P\\<in>Units (ring_mat TYPE('a) (dim_row A) b).\n       A' = P * A \\<and> B' = P * 1\\<^sub>m (dim_row A)", "by (rule gauss_jordan_transform)"], ["proof (state)\nthis:\n  \\<exists>P\\<in>Units (ring_mat TYPE('a) (dim_row A) b).\n     A' = P * A \\<and> B' = P * 1\\<^sub>m (dim_row A)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>P\\<in>Units (ring_mat TYPE('a) (dim_row A) b).\n     A' = P * A \\<and> B' = P * 1\\<^sub>m (dim_row A)", "obtain P where \"P \\<in> Units (ring_mat TYPE('a) (dim_row A) b)\" and **: \"A' = P * A \\<and> B' = P * ?B\""], ["proof (prove)\nusing this:\n  \\<exists>P\\<in>Units (ring_mat TYPE('a) (dim_row A) b).\n     A' = P * A \\<and> B' = P * 1\\<^sub>m (dim_row A)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         A' = P * A \\<and> B' = P * 1\\<^sub>m (dim_row A)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  P \\<in> Units (ring_mat TYPE('a) (dim_row A) b)\n  A' = P * A \\<and> B' = P * 1\\<^sub>m (dim_row A)\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) b);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this(1)"], ["proof (chain)\npicking this:\n  P \\<in> Units (ring_mat TYPE('a) (dim_row A) b)", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<in> Units (ring_mat TYPE('a) (dim_row A) b)\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. row_echelon A = P * A", "from **"], ["proof (chain)\npicking this:\n  A' = P * A \\<and> B' = P * 1\\<^sub>m (dim_row A)", "have \"A' = P * A\""], ["proof (prove)\nusing this:\n  A' = P * A \\<and> B' = P * 1\\<^sub>m (dim_row A)\n\ngoal (1 subgoal):\n 1. A' = P * A", ".."], ["proof (state)\nthis:\n  A' = P * A\n\ngoal (1 subgoal):\n 1. row_echelon A = P * A", "thus \"row_echelon A = P * A\""], ["proof (prove)\nusing this:\n  A' = P * A\n\ngoal (1 subgoal):\n 1. row_echelon A = P * A", "by (simp add: row_echelon_def *)"], ["proof (state)\nthis:\n  row_echelon A = P * A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_space_row_echelon[simp]: \"row_space (row_echelon A) = row_space A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_space (row_echelon A) = row_space A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. row_space (row_echelon A) = row_space A", "obtain P where *: \"P \\<in> Units (ring_mat TYPE('a::field) (dim_row A) Nil)\" and **: \"row_echelon A = P * A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        \\<lbrakk>P \\<in> Units (ring_mat TYPE('a) (dim_row A) []);\n         row_echelon A = P * A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule row_echelon_transform)"], ["proof (state)\nthis:\n  P \\<in> Units (ring_mat TYPE('a) (dim_row A) [])\n  row_echelon A = P * A\n\ngoal (1 subgoal):\n 1. row_space (row_echelon A) = row_space A", "from *"], ["proof (chain)\npicking this:\n  P \\<in> Units (ring_mat TYPE('a) (dim_row A) [])", "have \"row_space (P * A) = row_space A\""], ["proof (prove)\nusing this:\n  P \\<in> Units (ring_mat TYPE('a) (dim_row A) [])\n\ngoal (1 subgoal):\n 1. row_space (P * A) = row_space A", "by (rule row_space_mult_unit)"], ["proof (state)\nthis:\n  row_space (P * A) = row_space A\n\ngoal (1 subgoal):\n 1. row_space (row_echelon A) = row_space A", "thus ?thesis"], ["proof (prove)\nusing this:\n  row_space (P * A) = row_space A\n\ngoal (1 subgoal):\n 1. row_space (row_echelon A) = row_space A", "by (simp only: **)"], ["proof (state)\nthis:\n  row_space (row_echelon A) = row_space A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_echelon_pivot_fun:\n  obtains f where \"pivot_fun (row_echelon A) f (dim_col (row_echelon A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "let ?B = \"1\\<^sub>m (dim_row A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"A \\<in> carrier_mat (dim_row A) (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat (dim_row A) (dim_col A)", "by simp"], ["proof (state)\nthis:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "from surj_pair"], ["proof (chain)\npicking this:\n  \\<exists>x y. ?p = (x, y)", "obtain A' B' where *: \"gauss_jordan A ?B = (A', B')\""], ["proof (prove)\nusing this:\n  \\<exists>x y. ?p = (x, y)\n\ngoal (1 subgoal):\n 1. (\\<And>A' B'.\n        gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B')\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n  gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B')", "have \"row_echelon_form A'\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n  gauss_jordan A (1\\<^sub>m (dim_row A)) = (A', B')\n\ngoal (1 subgoal):\n 1. row_echelon_form A'", "by (rule gauss_jordan_row_echelon)"], ["proof (state)\nthis:\n  row_echelon_form A'\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  row_echelon_form A'", "obtain f where \"pivot_fun A' f (dim_col A')\""], ["proof (prove)\nusing this:\n  row_echelon_form A'\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun A' f (dim_col A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding row_echelon_form_def"], ["proof (prove)\nusing this:\n  \\<exists>f. pivot_fun A' f (dim_col A')\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun A' f (dim_col A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  pivot_fun A' f (dim_col A')\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "hence \"pivot_fun (row_echelon A) f (dim_col (row_echelon A))\""], ["proof (prove)\nusing this:\n  pivot_fun A' f (dim_col A')\n\ngoal (1 subgoal):\n 1. pivot_fun (row_echelon A) f (dim_col (row_echelon A))", "by (simp add: row_echelon_def *)"], ["proof (state)\nthis:\n  pivot_fun (row_echelon A) f (dim_col (row_echelon A))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  pivot_fun (row_echelon A) f (dim_col (row_echelon A))\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma distinct_nzrows_row_echelon: \"distinct (nzrows (row_echelon A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (nzrows (row_echelon A))", "unfolding nzrows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (filter (\\<lambda>r. r \\<noteq> 0\\<^sub>v (dim_col (row_echelon A)))\n       (rows (row_echelon A)))", "proof (rule distinct_filterI, simp del: dim_row_echelon)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < j; j < dim_row (row_echelon A);\n        row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A));\n        row (row_echelon A) j \\<noteq>\n        0\\<^sub>v (dim_col (row_echelon A))\\<rbrakk>\n       \\<Longrightarrow> row (row_echelon A) i \\<noteq>\n                         row (row_echelon A) j", "let ?B = \"row_echelon A\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < j; j < dim_row (row_echelon A);\n        row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A));\n        row (row_echelon A) j \\<noteq>\n        0\\<^sub>v (dim_col (row_echelon A))\\<rbrakk>\n       \\<Longrightarrow> row (row_echelon A) i \\<noteq>\n                         row (row_echelon A) j", "fix i j::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < j; j < dim_row (row_echelon A);\n        row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A));\n        row (row_echelon A) j \\<noteq>\n        0\\<^sub>v (dim_col (row_echelon A))\\<rbrakk>\n       \\<Longrightarrow> row (row_echelon A) i \\<noteq>\n                         row (row_echelon A) j", "assume \"i < j\" and \"j < dim_row ?B\""], ["proof (state)\nthis:\n  i < j\n  j < dim_row (row_echelon A)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < j; j < dim_row (row_echelon A);\n        row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A));\n        row (row_echelon A) j \\<noteq>\n        0\\<^sub>v (dim_col (row_echelon A))\\<rbrakk>\n       \\<Longrightarrow> row (row_echelon A) i \\<noteq>\n                         row (row_echelon A) j", "hence \"i \\<noteq> j\" and \"i < dim_row ?B\""], ["proof (prove)\nusing this:\n  i < j\n  j < dim_row (row_echelon A)\n\ngoal (1 subgoal):\n 1. i \\<noteq> j &&& i < dim_row (row_echelon A)", "by simp_all"], ["proof (state)\nthis:\n  i \\<noteq> j\n  i < dim_row (row_echelon A)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < j; j < dim_row (row_echelon A);\n        row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A));\n        row (row_echelon A) j \\<noteq>\n        0\\<^sub>v (dim_col (row_echelon A))\\<rbrakk>\n       \\<Longrightarrow> row (row_echelon A) i \\<noteq>\n                         row (row_echelon A) j", "assume ri: \"row ?B i \\<noteq> 0\\<^sub>v (dim_col ?B)\" and rj: \"row ?B j \\<noteq> 0\\<^sub>v (dim_col ?B)\""], ["proof (state)\nthis:\n  row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A))\n  row (row_echelon A) j \\<noteq> 0\\<^sub>v (dim_col (row_echelon A))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < j; j < dim_row (row_echelon A);\n        row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A));\n        row (row_echelon A) j \\<noteq>\n        0\\<^sub>v (dim_col (row_echelon A))\\<rbrakk>\n       \\<Longrightarrow> row (row_echelon A) i \\<noteq>\n                         row (row_echelon A) j", "obtain f where pf: \"pivot_fun ?B f (dim_col ?B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon A) f\n         (dim_col (row_echelon A)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (fact row_echelon_pivot_fun)"], ["proof (state)\nthis:\n  pivot_fun (row_echelon A) f (dim_col (row_echelon A))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < j; j < dim_row (row_echelon A);\n        row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A));\n        row (row_echelon A) j \\<noteq>\n        0\\<^sub>v (dim_col (row_echelon A))\\<rbrakk>\n       \\<Longrightarrow> row (row_echelon A) i \\<noteq>\n                         row (row_echelon A) j", "from rj"], ["proof (chain)\npicking this:\n  row (row_echelon A) j \\<noteq> 0\\<^sub>v (dim_col (row_echelon A))", "have \"f j < dim_col ?B\""], ["proof (prove)\nusing this:\n  row (row_echelon A) j \\<noteq> 0\\<^sub>v (dim_col (row_echelon A))\n\ngoal (1 subgoal):\n 1. f j < dim_col (row_echelon A)", "by (simp only: row_not_zero_iff_pivot_fun[OF pf \\<open>j < dim_row ?B\\<close>])"], ["proof (state)\nthis:\n  f j < dim_col (row_echelon A)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < j; j < dim_row (row_echelon A);\n        row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A));\n        row (row_echelon A) j \\<noteq>\n        0\\<^sub>v (dim_col (row_echelon A))\\<rbrakk>\n       \\<Longrightarrow> row (row_echelon A) i \\<noteq>\n                         row (row_echelon A) j", "from _ pf \\<open>j < dim_row ?B\\<close> this \\<open>i < dim_row ?B\\<close> \\<open>i \\<noteq> j\\<close>"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  pivot_fun (row_echelon A) f (dim_col (row_echelon A))\n  j < dim_row (row_echelon A)\n  f j < dim_col (row_echelon A)\n  i < dim_row (row_echelon A)\n  i \\<noteq> j", "have *: \"?B $$ (i, f j) = 0\""], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  pivot_fun (row_echelon A) f (dim_col (row_echelon A))\n  j < dim_row (row_echelon A)\n  f j < dim_col (row_echelon A)\n  i < dim_row (row_echelon A)\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. row_echelon A $$ (i, f j) = (0::'a)", "by (rule pivot_funD(5), intro refl)"], ["proof (state)\nthis:\n  row_echelon A $$ (i, f j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < j; j < dim_row (row_echelon A);\n        row (row_echelon A) i \\<noteq> 0\\<^sub>v (dim_col (row_echelon A));\n        row (row_echelon A) j \\<noteq>\n        0\\<^sub>v (dim_col (row_echelon A))\\<rbrakk>\n       \\<Longrightarrow> row (row_echelon A) i \\<noteq>\n                         row (row_echelon A) j", "show \"row ?B i \\<noteq> row ?B j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (row_echelon A) i \\<noteq> row (row_echelon A) j", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. row (row_echelon A) i = row (row_echelon A) j \\<Longrightarrow> False", "assume \"row ?B i = row ?B j\""], ["proof (state)\nthis:\n  row (row_echelon A) i = row (row_echelon A) j\n\ngoal (1 subgoal):\n 1. row (row_echelon A) i = row (row_echelon A) j \\<Longrightarrow> False", "hence \"row ?B i $ (f j) = row ?B j $ (f j)\""], ["proof (prove)\nusing this:\n  row (row_echelon A) i = row (row_echelon A) j\n\ngoal (1 subgoal):\n 1. row (row_echelon A) i $ f j = row (row_echelon A) j $ f j", "by simp"], ["proof (state)\nthis:\n  row (row_echelon A) i $ f j = row (row_echelon A) j $ f j\n\ngoal (1 subgoal):\n 1. row (row_echelon A) i = row (row_echelon A) j \\<Longrightarrow> False", "with \\<open>i < dim_row ?B\\<close> \\<open>j < dim_row ?B\\<close> \\<open>f j < dim_col ?B\\<close>"], ["proof (chain)\npicking this:\n  i < dim_row (row_echelon A)\n  j < dim_row (row_echelon A)\n  f j < dim_col (row_echelon A)\n  row (row_echelon A) i $ f j = row (row_echelon A) j $ f j", "have \"?B $$ (i, f j) = ?B $$ (j, f j)\""], ["proof (prove)\nusing this:\n  i < dim_row (row_echelon A)\n  j < dim_row (row_echelon A)\n  f j < dim_col (row_echelon A)\n  row (row_echelon A) i $ f j = row (row_echelon A) j $ f j\n\ngoal (1 subgoal):\n 1. row_echelon A $$ (i, f j) = row_echelon A $$ (j, f j)", "by simp"], ["proof (state)\nthis:\n  row_echelon A $$ (i, f j) = row_echelon A $$ (j, f j)\n\ngoal (1 subgoal):\n 1. row (row_echelon A) i = row (row_echelon A) j \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  row_echelon A $$ (i, f j) = row_echelon A $$ (j, f j)\n\ngoal (1 subgoal):\n 1. row (row_echelon A) i = row (row_echelon A) j \\<Longrightarrow> False", "from _ pf \\<open>j < dim_row ?B\\<close> \\<open>f j < dim_col ?B\\<close>"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  pivot_fun (row_echelon A) f (dim_col (row_echelon A))\n  j < dim_row (row_echelon A)\n  f j < dim_col (row_echelon A)", "have \"... = 1\""], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  pivot_fun (row_echelon A) f (dim_col (row_echelon A))\n  j < dim_row (row_echelon A)\n  f j < dim_col (row_echelon A)\n\ngoal (1 subgoal):\n 1. row_echelon A $$ (j, f j) = (1::'a)", "by (rule pivot_funD, intro refl)"], ["proof (state)\nthis:\n  row_echelon A $$ (j, f j) = (1::'a)\n\ngoal (1 subgoal):\n 1. row (row_echelon A) i = row (row_echelon A) j \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  row_echelon A $$ (i, f j) = (1::'a)", "show False"], ["proof (prove)\nusing this:\n  row_echelon A $$ (i, f j) = (1::'a)\n\ngoal (1 subgoal):\n 1. False", "by (simp add: *)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row (row_echelon A) i \\<noteq> row (row_echelon A) j\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Converting Between Polynomials and Macaulay Matrices\\<close>"], ["", "definition poly_to_row :: \"'a list \\<Rightarrow> ('a \\<Rightarrow>\\<^sub>0 'b::zero) \\<Rightarrow> 'b vec\" where\n  \"poly_to_row ts p = vec_of_list (map (lookup p) ts)\""], ["", "definition polys_to_mat :: \"'a list \\<Rightarrow> ('a \\<Rightarrow>\\<^sub>0 'b::zero) list \\<Rightarrow> 'b mat\" where\n  \"polys_to_mat ts ps = mat_of_rows (length ts) (map (poly_to_row ts) ps)\""], ["", "definition list_to_fun :: \"'a list \\<Rightarrow> ('b::zero) list \\<Rightarrow> 'a \\<Rightarrow> 'b\" where\n  \"list_to_fun ts cs t = (case map_of (zip ts cs) t of Some c \\<Rightarrow> c | None \\<Rightarrow> 0)\""], ["", "definition list_to_poly :: \"'a list \\<Rightarrow> 'b list \\<Rightarrow> ('a \\<Rightarrow>\\<^sub>0 'b::zero)\" where\n  \"list_to_poly ts cs = Abs_poly_mapping (list_to_fun ts cs)\""], ["", "definition row_to_poly :: \"'a list \\<Rightarrow> 'b vec \\<Rightarrow> ('a \\<Rightarrow>\\<^sub>0 'b::zero)\" where\n  \"row_to_poly ts r = list_to_poly ts (list_of_vec r)\""], ["", "definition mat_to_polys :: \"'a list \\<Rightarrow> 'b mat \\<Rightarrow> ('a \\<Rightarrow>\\<^sub>0 'b::zero) list\" where\n  \"mat_to_polys ts A = map (row_to_poly ts) (rows A)\""], ["", "lemma dim_poly_to_row: \"dim_vec (poly_to_row ts p) = length ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (poly_to_row ts p) = length ts", "by (simp add: poly_to_row_def)"], ["", "lemma poly_to_row_index:\n  assumes \"i < length ts\"\n  shows \"poly_to_row ts p $ i = lookup p (ts ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_to_row ts p $ i = lookup p (ts ! i)", "by (simp add: poly_to_row_def vec_of_list_index assms)"], ["", "context term_powerprod\nbegin"], ["", "lemma poly_to_row_scalar_mult:\n  assumes \"keys p \\<subseteq> set ts\"\n  shows \"row_to_poly ts (c \\<cdot>\\<^sub>v (poly_to_row ts p)) = c \\<cdot> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (c \\<cdot>\\<^sub>v poly_to_row ts p) = c \\<cdot> p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. row_to_poly ts (c \\<cdot>\\<^sub>v poly_to_row ts p) = c \\<cdot> p", "have eq: \"(vec (length ts) (\\<lambda>i. c * poly_to_row ts p $ i)) =\n        (vec (length ts) (\\<lambda>i. c * lookup p (ts ! i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (length ts) (\\<lambda>i. c * poly_to_row ts p $ i) =\n    vec (length ts) (\\<lambda>i. c * lookup p (ts ! i))", "by (rule vec_cong, rule, simp only: poly_to_row_index)"], ["proof (state)\nthis:\n  vec (length ts) (\\<lambda>i. c * poly_to_row ts p $ i) =\n  vec (length ts) (\\<lambda>i. c * lookup p (ts ! i))\n\ngoal (1 subgoal):\n 1. row_to_poly ts (c \\<cdot>\\<^sub>v poly_to_row ts p) = c \\<cdot> p", "have *: \"list_to_fun ts (list_of_vec (c \\<cdot>\\<^sub>v (poly_to_row ts p))) = (\\<lambda>t. c * lookup p t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_fun ts (list_of_vec (c \\<cdot>\\<^sub>v poly_to_row ts p)) =\n    (\\<lambda>t. c * lookup p t)", "proof (rule, simp add: list_to_fun_def smult_vec_def dim_poly_to_row eq,\n        simp add: map_upt[of \"\\<lambda>x. c * lookup p x\"] map_of_zip_map, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. t \\<notin> set ts \\<Longrightarrow> c * lookup p t = (0::'c)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t. t \\<notin> set ts \\<Longrightarrow> c * lookup p t = (0::'c)", "assume \"t \\<notin> set ts\""], ["proof (state)\nthis:\n  t \\<notin> set ts\n\ngoal (1 subgoal):\n 1. \\<And>t. t \\<notin> set ts \\<Longrightarrow> c * lookup p t = (0::'c)", "with assms(1)"], ["proof (chain)\npicking this:\n  keys p \\<subseteq> set ts\n  t \\<notin> set ts", "have \"t \\<notin> keys p\""], ["proof (prove)\nusing this:\n  keys p \\<subseteq> set ts\n  t \\<notin> set ts\n\ngoal (1 subgoal):\n 1. t \\<notin> keys p", "by auto"], ["proof (state)\nthis:\n  t \\<notin> keys p\n\ngoal (1 subgoal):\n 1. \\<And>t. t \\<notin> set ts \\<Longrightarrow> c * lookup p t = (0::'c)", "thus \"c * lookup p t = 0\""], ["proof (prove)\nusing this:\n  t \\<notin> keys p\n\ngoal (1 subgoal):\n 1. c * lookup p t = (0::'c)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  c * lookup p t = (0::'c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_to_fun ts (list_of_vec (c \\<cdot>\\<^sub>v poly_to_row ts p)) =\n  (\\<lambda>t. c * lookup p t)\n\ngoal (1 subgoal):\n 1. row_to_poly ts (c \\<cdot>\\<^sub>v poly_to_row ts p) = c \\<cdot> p", "have **: \"lookup (Abs_poly_mapping (list_to_fun ts (list_of_vec (c \\<cdot>\\<^sub>v (poly_to_row ts p))))) =\n            (\\<lambda>t. c * lookup p t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup\n     (Abs_poly_mapping\n       (list_to_fun ts\n         (list_of_vec (c \\<cdot>\\<^sub>v poly_to_row ts p)))) =\n    (\\<lambda>t. c * lookup p t)", "proof (simp only: *, rule Abs_poly_mapping_inverse, simp, rule finite_subset, rule, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. c * lookup p x \\<noteq> (0::'c) \\<Longrightarrow> x \\<in> ?B3\n 2. finite ?B3", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. c * lookup p x \\<noteq> (0::'c) \\<Longrightarrow> x \\<in> ?B3\n 2. finite ?B3", "assume \"c * lookup p t \\<noteq> 0\""], ["proof (state)\nthis:\n  c * lookup p t \\<noteq> (0::'c)\n\ngoal (2 subgoals):\n 1. \\<And>x. c * lookup p x \\<noteq> (0::'c) \\<Longrightarrow> x \\<in> ?B3\n 2. finite ?B3", "hence \"lookup p t \\<noteq> 0\""], ["proof (prove)\nusing this:\n  c * lookup p t \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. lookup p t \\<noteq> (0::'c)", "using mult_not_zero"], ["proof (prove)\nusing this:\n  c * lookup p t \\<noteq> (0::'c)\n  ?a * ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  ?a \\<noteq> (0::?'a) \\<and> ?b \\<noteq> (0::?'a)\n\ngoal (1 subgoal):\n 1. lookup p t \\<noteq> (0::'c)", "by blast"], ["proof (state)\nthis:\n  lookup p t \\<noteq> (0::'c)\n\ngoal (2 subgoals):\n 1. \\<And>x. c * lookup p x \\<noteq> (0::'c) \\<Longrightarrow> x \\<in> ?B3\n 2. finite ?B3", "thus \"t \\<in> keys p\""], ["proof (prove)\nusing this:\n  lookup p t \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. t \\<in> keys p", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. finite (keys p)", "qed (fact finite_keys)"], ["proof (state)\nthis:\n  lookup\n   (Abs_poly_mapping\n     (list_to_fun ts (list_of_vec (c \\<cdot>\\<^sub>v poly_to_row ts p)))) =\n  (\\<lambda>t. c * lookup p t)\n\ngoal (1 subgoal):\n 1. row_to_poly ts (c \\<cdot>\\<^sub>v poly_to_row ts p) = c \\<cdot> p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (c \\<cdot>\\<^sub>v poly_to_row ts p) = c \\<cdot> p", "unfolding row_to_poly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_poly ts (list_of_vec (c \\<cdot>\\<^sub>v poly_to_row ts p)) =\n    c \\<cdot> p", "by (rule poly_mapping_eqI) (simp only: list_to_poly_def ** lookup_map_scale)"], ["proof (state)\nthis:\n  row_to_poly ts (c \\<cdot>\\<^sub>v poly_to_row ts p) = c \\<cdot> p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma poly_to_row_to_poly:\n  assumes \"keys p \\<subseteq> set ts\"\n  shows \"row_to_poly ts (poly_to_row ts p) = (p::'t \\<Rightarrow>\\<^sub>0 'b::semiring_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (poly_to_row ts p) = p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. row_to_poly ts (poly_to_row ts p) = p", "have \"1 \\<cdot>\\<^sub>v (poly_to_row ts p) = poly_to_row ts p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'b) \\<cdot>\\<^sub>v poly_to_row ts p = poly_to_row ts p", "by simp"], ["proof (state)\nthis:\n  (1::'b) \\<cdot>\\<^sub>v poly_to_row ts p = poly_to_row ts p\n\ngoal (1 subgoal):\n 1. row_to_poly ts (poly_to_row ts p) = p", "thus ?thesis"], ["proof (prove)\nusing this:\n  (1::'b) \\<cdot>\\<^sub>v poly_to_row ts p = poly_to_row ts p\n\ngoal (1 subgoal):\n 1. row_to_poly ts (poly_to_row ts p) = p", "using poly_to_row_scalar_mult[OF assms, of 1]"], ["proof (prove)\nusing this:\n  (1::'b) \\<cdot>\\<^sub>v poly_to_row ts p = poly_to_row ts p\n  row_to_poly ts ((1::'b) \\<cdot>\\<^sub>v poly_to_row ts p) =\n  (1::'b) \\<cdot> p\n\ngoal (1 subgoal):\n 1. row_to_poly ts (poly_to_row ts p) = p", "by simp"], ["proof (state)\nthis:\n  row_to_poly ts (poly_to_row ts p) = p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_list_to_poly: \"lookup (list_to_poly ts cs) = list_to_fun ts cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (list_to_poly ts cs) = list_to_fun ts cs", "unfolding list_to_poly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (Abs_poly_mapping (list_to_fun ts cs)) = list_to_fun ts cs", "proof (rule Abs_poly_mapping_inverse, rule, rule finite_subset)"], ["proof (state)\ngoal (2 subgoals):\n 1. {x. list_to_fun ts cs x \\<noteq> (0::'c)} \\<subseteq> ?B4\n 2. finite ?B4", "show \"{x. list_to_fun ts cs x \\<noteq> 0} \\<subseteq> set ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. list_to_fun ts cs x \\<noteq> (0::'c)} \\<subseteq> set ts", "proof (rule, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       list_to_fun ts cs x \\<noteq> (0::'c) \\<Longrightarrow> x \\<in> set ts", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       list_to_fun ts cs x \\<noteq> (0::'c) \\<Longrightarrow> x \\<in> set ts", "assume \"list_to_fun ts cs t \\<noteq> 0\""], ["proof (state)\nthis:\n  list_to_fun ts cs t \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       list_to_fun ts cs x \\<noteq> (0::'c) \\<Longrightarrow> x \\<in> set ts", "then"], ["proof (chain)\npicking this:\n  list_to_fun ts cs t \\<noteq> (0::'c)", "obtain c where \"map_of (zip ts cs) t = Some c\""], ["proof (prove)\nusing this:\n  list_to_fun ts cs t \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        map_of (zip ts cs) t = Some c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding list_to_fun_def"], ["proof (prove)\nusing this:\n  (case map_of (zip ts cs) t of None \\<Rightarrow> 0::'c\n   | Some c \\<Rightarrow> c) \\<noteq>\n  (0::'c)\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        map_of (zip ts cs) t = Some c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  map_of (zip ts cs) t = Some c\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       list_to_fun ts cs x \\<noteq> (0::'c) \\<Longrightarrow> x \\<in> set ts", "thus \"t \\<in> set ts\""], ["proof (prove)\nusing this:\n  map_of (zip ts cs) t = Some c\n\ngoal (1 subgoal):\n 1. t \\<in> set ts", "by (meson in_set_zipE map_of_SomeD)"], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x. list_to_fun ts cs x \\<noteq> (0::'c)} \\<subseteq> set ts\n\ngoal (1 subgoal):\n 1. finite (set ts)", "qed simp"], ["", "lemma list_to_fun_Nil [simp]: \"list_to_fun [] cs = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_fun [] cs = 0", "by (simp only: zero_fun_def, rule, simp add: list_to_fun_def)"], ["", "lemma list_to_poly_Nil [simp]: \"list_to_poly [] cs = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_poly [] cs = 0", "by (rule poly_mapping_eqI, simp add: lookup_list_to_poly)"], ["", "lemma row_to_poly_Nil [simp]: \"row_to_poly [] r = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly [] r = 0", "by (simp only: row_to_poly_def, fact list_to_poly_Nil)"], ["", "lemma lookup_row_to_poly:\n  assumes \"distinct ts\" and \"dim_vec r = length ts\" and \"i < length ts\"\n  shows \"lookup (row_to_poly ts r) (ts ! i) = r $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts r) (ts ! i) = r $ i", "proof (simp only: row_to_poly_def lookup_list_to_poly)"], ["proof (state)\ngoal (1 subgoal):\n 1. list_to_fun ts (list_of_vec r) (ts ! i) = r $ i", "from assms(2) assms(3)"], ["proof (chain)\npicking this:\n  dim_vec r = length ts\n  i < length ts", "have \"i < dim_vec r\""], ["proof (prove)\nusing this:\n  dim_vec r = length ts\n  i < length ts\n\ngoal (1 subgoal):\n 1. i < dim_vec r", "by simp"], ["proof (state)\nthis:\n  i < dim_vec r\n\ngoal (1 subgoal):\n 1. list_to_fun ts (list_of_vec r) (ts ! i) = r $ i", "have \"map_of (zip ts (list_of_vec r)) (ts ! i) = Some ((list_of_vec r) ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (zip ts (list_of_vec r)) (ts ! i) = Some (list_of_vec r ! i)", "by (rule map_of_zip_nth, simp_all only: length_list_of_vec assms(2), fact, fact)"], ["proof (state)\nthis:\n  map_of (zip ts (list_of_vec r)) (ts ! i) = Some (list_of_vec r ! i)\n\ngoal (1 subgoal):\n 1. list_to_fun ts (list_of_vec r) (ts ! i) = r $ i", "also"], ["proof (state)\nthis:\n  map_of (zip ts (list_of_vec r)) (ts ! i) = Some (list_of_vec r ! i)\n\ngoal (1 subgoal):\n 1. list_to_fun ts (list_of_vec r) (ts ! i) = r $ i", "have \"... = Some (r $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (list_of_vec r ! i) = Some (r $ i)", "by (simp only: list_of_vec_index)"], ["proof (state)\nthis:\n  Some (list_of_vec r ! i) = Some (r $ i)\n\ngoal (1 subgoal):\n 1. list_to_fun ts (list_of_vec r) (ts ! i) = r $ i", "finally"], ["proof (chain)\npicking this:\n  map_of (zip ts (list_of_vec r)) (ts ! i) = Some (r $ i)", "show \"list_to_fun ts (list_of_vec r) (ts ! i) = r $ i\""], ["proof (prove)\nusing this:\n  map_of (zip ts (list_of_vec r)) (ts ! i) = Some (r $ i)\n\ngoal (1 subgoal):\n 1. list_to_fun ts (list_of_vec r) (ts ! i) = r $ i", "by (simp add: list_to_fun_def)"], ["proof (state)\nthis:\n  list_to_fun ts (list_of_vec r) (ts ! i) = r $ i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma keys_row_to_poly: \"keys (row_to_poly ts r) \\<subseteq> set ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (row_to_poly ts r) \\<subseteq> set ts", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (row_to_poly ts r) \\<Longrightarrow> x \\<in> set ts", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (row_to_poly ts r) \\<Longrightarrow> x \\<in> set ts", "assume \"t \\<in> keys (row_to_poly ts r)\""], ["proof (state)\nthis:\n  t \\<in> keys (row_to_poly ts r)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (row_to_poly ts r) \\<Longrightarrow> x \\<in> set ts", "hence \"lookup (row_to_poly ts r) t \\<noteq> 0\""], ["proof (prove)\nusing this:\n  t \\<in> keys (row_to_poly ts r)\n\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts r) t \\<noteq> (0::'c)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup (row_to_poly ts r) t \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> keys (row_to_poly ts r) \\<Longrightarrow> x \\<in> set ts", "thus \"t \\<in> set ts\""], ["proof (prove)\nusing this:\n  lookup (row_to_poly ts r) t \\<noteq> (0::'c)\n\ngoal (1 subgoal):\n 1. t \\<in> set ts", "proof (simp add: row_to_poly_def lookup_list_to_poly list_to_fun_def del: lookup_not_eq_zero_eq_in_keys\n              split: option.splits)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>map_of (zip ts (list_of_vec r)) t = Some x2;\n        x2 \\<noteq> (0::'c)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set ts", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>map_of (zip ts (list_of_vec r)) t = Some x2;\n        x2 \\<noteq> (0::'c)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set ts", "assume \"map_of (zip ts (list_of_vec r)) t = Some c\""], ["proof (state)\nthis:\n  map_of (zip ts (list_of_vec r)) t = Some c\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>map_of (zip ts (list_of_vec r)) t = Some x2;\n        x2 \\<noteq> (0::'c)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set ts", "thus \"t \\<in> set ts\""], ["proof (prove)\nusing this:\n  map_of (zip ts (list_of_vec r)) t = Some c\n\ngoal (1 subgoal):\n 1. t \\<in> set ts", "by (meson in_set_zipE map_of_SomeD)"], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_row_to_poly_not_zeroE:\n  assumes \"lookup (row_to_poly ts r) t \\<noteq> 0\"\n  obtains i where \"i < length ts\" and \"t = ts ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ts; t = ts ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ts; t = ts ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  lookup (row_to_poly ts r) t \\<noteq> (0::'b)", "have \"t \\<in> keys (row_to_poly ts r)\""], ["proof (prove)\nusing this:\n  lookup (row_to_poly ts r) t \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. t \\<in> keys (row_to_poly ts r)", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  t \\<in> keys (row_to_poly ts r)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ts; t = ts ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"t \\<in> set ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set ts", "by (rule, fact, fact keys_row_to_poly)"], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ts; t = ts ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  t \\<in> set ts", "obtain i where \"i < length ts\" and \"t = ts ! i\""], ["proof (prove)\nusing this:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ts; t = ts ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  i < length ts\n  t = ts ! i\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ts; t = ts ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  i < length ts\n  t = ts ! i\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_to_poly_zero [simp]: \"row_to_poly ts (0\\<^sub>v (length ts)) = (0::'t \\<Rightarrow>\\<^sub>0 'b::zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (0\\<^sub>v (length ts)) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. row_to_poly ts (0\\<^sub>v (length ts)) = 0", "have eq: \"map (\\<lambda>_. 0::'b) [0..<length ts] = map (\\<lambda>_. 0) ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>_. 0::'b) [0..<length ts] = map (\\<lambda>_. 0::'b) ts", "by (simp add: map_replicate_const)"], ["proof (state)\nthis:\n  map (\\<lambda>_. 0::'b) [0..<length ts] = map (\\<lambda>_. 0::'b) ts\n\ngoal (1 subgoal):\n 1. row_to_poly ts (0\\<^sub>v (length ts)) = 0", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (0\\<^sub>v (length ts)) = 0", "by (simp add: row_to_poly_def zero_vec_def, rule poly_mapping_eqI,\n      simp add: lookup_list_to_poly list_to_fun_def eq map_of_zip_map)"], ["proof (state)\nthis:\n  row_to_poly ts (0\\<^sub>v (length ts)) = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_to_poly_zeroD:\n  assumes \"distinct ts\" and \"dim_vec r = length ts\" and \"row_to_poly ts r = 0\"\n  shows \"r = 0\\<^sub>v (length ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = 0\\<^sub>v (length ts)", "proof (rule, simp_all add: assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r $ i = (0::'c)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r $ i = (0::'c)", "assume \"i < length ts\""], ["proof (state)\nthis:\n  i < length ts\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r $ i = (0::'c)", "from assms(3)"], ["proof (chain)\npicking this:\n  row_to_poly ts r = 0", "have \"0 = lookup (row_to_poly ts r) (ts ! i)\""], ["proof (prove)\nusing this:\n  row_to_poly ts r = 0\n\ngoal (1 subgoal):\n 1. (0::'c) = lookup (row_to_poly ts r) (ts ! i)", "by simp"], ["proof (state)\nthis:\n  (0::'c) = lookup (row_to_poly ts r) (ts ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r $ i = (0::'c)", "also"], ["proof (state)\nthis:\n  (0::'c) = lookup (row_to_poly ts r) (ts ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r $ i = (0::'c)", "from assms(1) assms(2) \\<open>i < length ts\\<close>"], ["proof (chain)\npicking this:\n  distinct ts\n  dim_vec r = length ts\n  i < length ts", "have \"... = r $ i\""], ["proof (prove)\nusing this:\n  distinct ts\n  dim_vec r = length ts\n  i < length ts\n\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts r) (ts ! i) = r $ i", "by (rule lookup_row_to_poly)"], ["proof (state)\nthis:\n  lookup (row_to_poly ts r) (ts ! i) = r $ i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r $ i = (0::'c)", "finally"], ["proof (chain)\npicking this:\n  (0::'c) = r $ i", "show \"r $ i = 0\""], ["proof (prove)\nusing this:\n  (0::'c) = r $ i\n\ngoal (1 subgoal):\n 1. r $ i = (0::'c)", "by simp"], ["proof (state)\nthis:\n  r $ i = (0::'c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_to_poly_inj:\n  assumes \"distinct ts\" and \"dim_vec r1 = length ts\" and \"dim_vec r2 = length ts\"\n    and \"row_to_poly ts r1 = row_to_poly ts r2\"\n  shows \"r1 = r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r1 = r2", "proof (rule, simp_all add: assms(2) assms(3))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r1 $ i = r2 $ i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r1 $ i = r2 $ i", "assume \"i < length ts\""], ["proof (state)\nthis:\n  i < length ts\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r1 $ i = r2 $ i", "have \"r1 $ i = lookup (row_to_poly ts r1) (ts ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r1 $ i = lookup (row_to_poly ts r1) (ts ! i)", "by (simp only: lookup_row_to_poly[OF assms(1) assms(2) \\<open>i < length ts\\<close>])"], ["proof (state)\nthis:\n  r1 $ i = lookup (row_to_poly ts r1) (ts ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r1 $ i = r2 $ i", "also"], ["proof (state)\nthis:\n  r1 $ i = lookup (row_to_poly ts r1) (ts ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r1 $ i = r2 $ i", "from assms(4)"], ["proof (chain)\npicking this:\n  row_to_poly ts r1 = row_to_poly ts r2", "have \"... = lookup (row_to_poly ts r2) (ts ! i)\""], ["proof (prove)\nusing this:\n  row_to_poly ts r1 = row_to_poly ts r2\n\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts r1) (ts ! i) =\n    lookup (row_to_poly ts r2) (ts ! i)", "by simp"], ["proof (state)\nthis:\n  lookup (row_to_poly ts r1) (ts ! i) = lookup (row_to_poly ts r2) (ts ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r1 $ i = r2 $ i", "also"], ["proof (state)\nthis:\n  lookup (row_to_poly ts r1) (ts ! i) = lookup (row_to_poly ts r2) (ts ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r1 $ i = r2 $ i", "from assms(1) assms(3) \\<open>i < length ts\\<close>"], ["proof (chain)\npicking this:\n  distinct ts\n  dim_vec r2 = length ts\n  i < length ts", "have \"... = r2 $ i\""], ["proof (prove)\nusing this:\n  distinct ts\n  dim_vec r2 = length ts\n  i < length ts\n\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts r2) (ts ! i) = r2 $ i", "by (rule lookup_row_to_poly)"], ["proof (state)\nthis:\n  lookup (row_to_poly ts r2) (ts ! i) = r2 $ i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < length ts \\<Longrightarrow> r1 $ i = r2 $ i", "finally"], ["proof (chain)\npicking this:\n  r1 $ i = r2 $ i", "show \"r1 $ i = r2 $ i\""], ["proof (prove)\nusing this:\n  r1 $ i = r2 $ i\n\ngoal (1 subgoal):\n 1. r1 $ i = r2 $ i", "."], ["proof (state)\nthis:\n  r1 $ i = r2 $ i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_to_poly_vec_plus:\n  assumes \"distinct ts\" and \"length ts = n\"\n  shows \"row_to_poly ts (vec n (f1 + f2)) = row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (f1 + f2)) =\n    row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)", "proof (rule poly_mapping_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       lookup (row_to_poly ts (vec n (f1 + f2))) k =\n       lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) k", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       lookup (row_to_poly ts (vec n (f1 + f2))) k =\n       lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) k", "show \"lookup (row_to_poly ts (vec n (f1 + f2))) t =\n         lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t\"\n    (is \"lookup ?l t = lookup (?r1 + ?r2) t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "proof (cases \"t \\<in> set ts\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "case True"], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "then"], ["proof (chain)\npicking this:\n  t \\<in> set ts", "obtain j where j: \"j < length ts\" and t: \"t = ts ! j\""], ["proof (prove)\nusing this:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length ts; t = ts ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  j < length ts\n  t = ts ! j\n\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "have d1: \"dim_vec (vec n f1) = length ts\" and d2: \"dim_vec (vec n f2) = length ts\"\n      and da: \"dim_vec (vec n (f1 + f2)) = length ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec n f1) = length ts &&&\n    dim_vec (vec n f2) = length ts &&& dim_vec (vec n (f1 + f2)) = length ts", "by (simp_all add: assms(2))"], ["proof (state)\nthis:\n  dim_vec (vec n f1) = length ts\n  dim_vec (vec n f2) = length ts\n  dim_vec (vec n (f1 + f2)) = length ts\n\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "from j"], ["proof (chain)\npicking this:\n  j < length ts", "have j': \"j < n\""], ["proof (prove)\nusing this:\n  j < length ts\n\ngoal (1 subgoal):\n 1. j < n", "by (simp only: assms(2))"], ["proof (state)\nthis:\n  j < n\n\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "by (simp only: t lookup_add lookup_row_to_poly[OF assms(1) d1 j]\n              lookup_row_to_poly[OF assms(1) d2 j] lookup_row_to_poly[OF assms(1) da j] index_vec[OF j'],\n             simp only: plus_fun_def)"], ["proof (state)\nthis:\n  lookup (row_to_poly ts (vec n (f1 + f2))) t =\n  lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t\n\ngoal (1 subgoal):\n 1. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "case False"], ["proof (state)\nthis:\n  t \\<notin> set ts\n\ngoal (1 subgoal):\n 1. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "with keys_row_to_poly[of ts \"vec n (f1 + f2)\"] keys_row_to_poly[of ts \"vec n f1\"]\n      keys_row_to_poly[of ts \"vec n f2\"]"], ["proof (chain)\npicking this:\n  keys (row_to_poly ts (vec n (f1 + f2))) \\<subseteq> set ts\n  keys (row_to_poly ts (vec n f1)) \\<subseteq> set ts\n  keys (row_to_poly ts (vec n f2)) \\<subseteq> set ts\n  t \\<notin> set ts", "have \"t \\<notin> keys ?l\" and \"t \\<notin> keys ?r1\" and \"t \\<notin> keys ?r2\""], ["proof (prove)\nusing this:\n  keys (row_to_poly ts (vec n (f1 + f2))) \\<subseteq> set ts\n  keys (row_to_poly ts (vec n f1)) \\<subseteq> set ts\n  keys (row_to_poly ts (vec n f2)) \\<subseteq> set ts\n  t \\<notin> set ts\n\ngoal (1 subgoal):\n 1. t \\<notin> keys (row_to_poly ts (vec n (f1 + f2))) &&&\n    t \\<notin> keys (row_to_poly ts (vec n f1)) &&&\n    t \\<notin> keys (row_to_poly ts (vec n f2))", "by auto"], ["proof (state)\nthis:\n  t \\<notin> keys (row_to_poly ts (vec n (f1 + f2)))\n  t \\<notin> keys (row_to_poly ts (vec n f1))\n  t \\<notin> keys (row_to_poly ts (vec n f2))\n\ngoal (1 subgoal):\n 1. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "from this(2) this(3)"], ["proof (chain)\npicking this:\n  t \\<notin> keys (row_to_poly ts (vec n f1))\n  t \\<notin> keys (row_to_poly ts (vec n f2))", "have \"t \\<notin> keys (?r1 + ?r2)\""], ["proof (prove)\nusing this:\n  t \\<notin> keys (row_to_poly ts (vec n f1))\n  t \\<notin> keys (row_to_poly ts (vec n f2))\n\ngoal (1 subgoal):\n 1. t \\<notin> keys (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2))", "by (meson Poly_Mapping.keys_add UnE in_mono)"], ["proof (state)\nthis:\n  t \\<notin> keys (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2))\n\ngoal (1 subgoal):\n 1. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "with \\<open>t \\<notin> keys ?l\\<close>"], ["proof (chain)\npicking this:\n  t \\<notin> keys (row_to_poly ts (vec n (f1 + f2)))\n  t \\<notin> keys (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2))", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<notin> keys (row_to_poly ts (vec n (f1 + f2)))\n  t \\<notin> keys (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2))\n\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts (vec n (f1 + f2))) t =\n    lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup (row_to_poly ts (vec n (f1 + f2))) t =\n  lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (row_to_poly ts (vec n (f1 + f2))) t =\n  lookup (row_to_poly ts (vec n f1) + row_to_poly ts (vec n f2)) t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_to_poly_vec_sum:\n  assumes \"distinct ts\" and \"length ts = n\"\n  shows \"row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) = ((\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))::'t \\<Rightarrow>\\<^sub>0 'b::comm_monoid_add)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))", "proof (cases \"finite I\")"], ["proof (state)\ngoal (2 subgoals):\n 1. finite I \\<Longrightarrow>\n    row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))\n 2. infinite I \\<Longrightarrow>\n    row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))", "case True"], ["proof (state)\nthis:\n  finite I\n\ngoal (2 subgoals):\n 1. finite I \\<Longrightarrow>\n    row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))\n 2. infinite I \\<Longrightarrow>\n    row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite I\n\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))", "proof (induct I)"], ["proof (state)\ngoal (2 subgoals):\n 1. row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>{}. f i j)) =\n    (\\<Sum>i\\<in>{}. row_to_poly ts (vec n (f i)))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>{}. f i j)) =\n    (\\<Sum>i\\<in>{}. row_to_poly ts (vec n (f i)))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>{}. f i j)) =\n    (\\<Sum>i\\<in>{}. row_to_poly ts (vec n (f i)))", "by (simp add: zero_vec_def[symmetric] assms(2)[symmetric])"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>{}. f i j)) =\n  (\\<Sum>i\\<in>{}. row_to_poly ts (vec n (f i)))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "case (insert x I)"], ["proof (state)\nthis:\n  finite I\n  x \\<notin> I\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n  (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "have \"row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>insert x I. f i j)) = row_to_poly ts (vec n (\\<lambda>j. f x j + (\\<Sum>i\\<in>I. f i j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>insert x I. f i j)) =\n    row_to_poly ts (vec n (\\<lambda>j. f x j + (\\<Sum>i\\<in>I. f i j)))", "by (simp add: insert(1) insert(2))"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>insert x I. f i j)) =\n  row_to_poly ts (vec n (\\<lambda>j. f x j + (\\<Sum>i\\<in>I. f i j)))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "also"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>insert x I. f i j)) =\n  row_to_poly ts (vec n (\\<lambda>j. f x j + (\\<Sum>i\\<in>I. f i j)))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "have \"... = row_to_poly ts (vec n (f x + (\\<lambda>j. (\\<Sum>i\\<in>I. f i j))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (\\<lambda>j. f x j + (\\<Sum>i\\<in>I. f i j))) =\n    row_to_poly ts (vec n (f x + (\\<lambda>j. \\<Sum>i\\<in>I. f i j)))", "by (simp only: plus_fun_def)"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (\\<lambda>j. f x j + (\\<Sum>i\\<in>I. f i j))) =\n  row_to_poly ts (vec n (f x + (\\<lambda>j. \\<Sum>i\\<in>I. f i j)))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "also"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (\\<lambda>j. f x j + (\\<Sum>i\\<in>I. f i j))) =\n  row_to_poly ts (vec n (f x + (\\<lambda>j. \\<Sum>i\\<in>I. f i j)))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "from assms"], ["proof (chain)\npicking this:\n  distinct ts\n  length ts = n", "have \"... = row_to_poly ts (vec n (f x)) + row_to_poly ts (vec n (\\<lambda>j. (\\<Sum>i\\<in>I. f i j)))\""], ["proof (prove)\nusing this:\n  distinct ts\n  length ts = n\n\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (f x + (\\<lambda>j. \\<Sum>i\\<in>I. f i j))) =\n    row_to_poly ts (vec n (f x)) +\n    row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j))", "by (rule row_to_poly_vec_plus)"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (f x + (\\<lambda>j. \\<Sum>i\\<in>I. f i j))) =\n  row_to_poly ts (vec n (f x)) +\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "also"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (f x + (\\<lambda>j. \\<Sum>i\\<in>I. f i j))) =\n  row_to_poly ts (vec n (f x)) +\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "have \"... = row_to_poly ts (vec n (f x)) + (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (f x)) +\n    row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    row_to_poly ts (vec n (f x)) +\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))", "by (simp only: insert(3))"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (f x)) +\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n  row_to_poly ts (vec n (f x)) +\n  (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "also"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (f x)) +\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n  row_to_poly ts (vec n (f x)) +\n  (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "have \"... = (\\<Sum>i\\<in>insert x I. row_to_poly ts (vec n (f i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (f x)) +\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i))) =\n    (\\<Sum>i\\<in>insert x I. row_to_poly ts (vec n (f i)))", "by (simp add: insert(1) insert(2))"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (f x)) +\n  (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i))) =\n  (\\<Sum>i\\<in>insert x I. row_to_poly ts (vec n (f i)))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>F. f i j)) =\n        (\\<Sum>i\\<in>F. row_to_poly ts (vec n (f i)))\\<rbrakk>\n       \\<Longrightarrow> row_to_poly ts\n                          (vec n\n                            (\\<lambda>j. \\<Sum>i\\<in>insert x F. f i j)) =\n                         (\\<Sum>i\\<in>insert x F.\n                            row_to_poly ts (vec n (f i)))", "finally"], ["proof (chain)\npicking this:\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>insert x I. f i j)) =\n  (\\<Sum>i\\<in>insert x I. row_to_poly ts (vec n (f i)))", "show ?case"], ["proof (prove)\nusing this:\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>insert x I. f i j)) =\n  (\\<Sum>i\\<in>insert x I. row_to_poly ts (vec n (f i)))\n\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>insert x I. f i j)) =\n    (\\<Sum>i\\<in>insert x I. row_to_poly ts (vec n (f i)))", "."], ["proof (state)\nthis:\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>insert x I. f i j)) =\n  (\\<Sum>i\\<in>insert x I. row_to_poly ts (vec n (f i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n  (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))\n\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow>\n    row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow>\n    row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))", "case False"], ["proof (state)\nthis:\n  infinite I\n\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow>\n    row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  infinite I\n\ngoal (1 subgoal):\n 1. row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n    (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))", "by (simp add: zero_vec_def[symmetric] assms(2)[symmetric])"], ["proof (state)\nthis:\n  row_to_poly ts (vec n (\\<lambda>j. \\<Sum>i\\<in>I. f i j)) =\n  (\\<Sum>i\\<in>I. row_to_poly ts (vec n (f i)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_to_poly_smult:\n  assumes \"distinct ts\" and \"dim_vec r = length ts\"\n  shows \"row_to_poly ts (c \\<cdot>\\<^sub>v r) = c \\<cdot> (row_to_poly ts r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (c \\<cdot>\\<^sub>v r) = c \\<cdot> row_to_poly ts r", "proof (rule poly_mapping_eqI, simp only: lookup_map_scale)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) k =\n       c * lookup (row_to_poly ts r) k", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) k =\n       c * lookup (row_to_poly ts r) k", "show \"lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t = c * lookup (row_to_poly ts r) t\" (is \"lookup ?l t = c * lookup ?r t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "proof (cases \"t \\<in> set ts\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "case True"], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "then"], ["proof (chain)\npicking this:\n  t \\<in> set ts", "obtain j where j: \"j < length ts\" and t: \"t = ts ! j\""], ["proof (prove)\nusing this:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length ts; t = ts ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  j < length ts\n  t = ts ! j\n\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "from assms(2)"], ["proof (chain)\npicking this:\n  dim_vec r = length ts", "have dm: \"dim_vec (c \\<cdot>\\<^sub>v r) = length ts\""], ["proof (prove)\nusing this:\n  dim_vec r = length ts\n\ngoal (1 subgoal):\n 1. dim_vec (c \\<cdot>\\<^sub>v r) = length ts", "by simp"], ["proof (state)\nthis:\n  dim_vec (c \\<cdot>\\<^sub>v r) = length ts\n\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "from j"], ["proof (chain)\npicking this:\n  j < length ts", "have j': \"j < dim_vec r\""], ["proof (prove)\nusing this:\n  j < length ts\n\ngoal (1 subgoal):\n 1. j < dim_vec r", "by (simp only: assms(2))"], ["proof (state)\nthis:\n  j < dim_vec r\n\ngoal (2 subgoals):\n 1. t \\<in> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t\n 2. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "by (simp add: t lookup_row_to_poly[OF assms j] lookup_row_to_poly[OF assms(1) dm j] index_smult_vec(1)[OF j'])"], ["proof (state)\nthis:\n  lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n  c * lookup (row_to_poly ts r) t\n\ngoal (1 subgoal):\n 1. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "case False"], ["proof (state)\nthis:\n  t \\<notin> set ts\n\ngoal (1 subgoal):\n 1. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "with keys_row_to_poly[of ts \"c \\<cdot>\\<^sub>v r\"] keys_row_to_poly[of ts r]"], ["proof (chain)\npicking this:\n  keys (row_to_poly ts (c \\<cdot>\\<^sub>v r)) \\<subseteq> set ts\n  keys (row_to_poly ts r) \\<subseteq> set ts\n  t \\<notin> set ts", "have\n      \"t \\<notin> keys ?l\" and \"t \\<notin> keys ?r\""], ["proof (prove)\nusing this:\n  keys (row_to_poly ts (c \\<cdot>\\<^sub>v r)) \\<subseteq> set ts\n  keys (row_to_poly ts r) \\<subseteq> set ts\n  t \\<notin> set ts\n\ngoal (1 subgoal):\n 1. t \\<notin> keys (row_to_poly ts (c \\<cdot>\\<^sub>v r)) &&&\n    t \\<notin> keys (row_to_poly ts r)", "by auto"], ["proof (state)\nthis:\n  t \\<notin> keys (row_to_poly ts (c \\<cdot>\\<^sub>v r))\n  t \\<notin> keys (row_to_poly ts r)\n\ngoal (1 subgoal):\n 1. t \\<notin> set ts \\<Longrightarrow>\n    lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "thus ?thesis"], ["proof (prove)\nusing this:\n  t \\<notin> keys (row_to_poly ts (c \\<cdot>\\<^sub>v r))\n  t \\<notin> keys (row_to_poly ts r)\n\ngoal (1 subgoal):\n 1. lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n    c * lookup (row_to_poly ts r) t", "by (simp add: in_keys_iff)"], ["proof (state)\nthis:\n  lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n  c * lookup (row_to_poly ts r) t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lookup (row_to_poly ts (c \\<cdot>\\<^sub>v r)) t =\n  c * lookup (row_to_poly ts r) t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma poly_to_row_Nil [simp]: \"poly_to_row [] p = vec 0 f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_to_row [] p = vec 0 f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. poly_to_row [] p = vec 0 f", "have \"dim_vec (poly_to_row [] p) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (poly_to_row [] p) = 0", "by (simp add: dim_poly_to_row)"], ["proof (state)\nthis:\n  dim_vec (poly_to_row [] p) = 0\n\ngoal (1 subgoal):\n 1. poly_to_row [] p = vec 0 f", "thus ?thesis"], ["proof (prove)\nusing this:\n  dim_vec (poly_to_row [] p) = 0\n\ngoal (1 subgoal):\n 1. poly_to_row [] p = vec 0 f", "by auto"], ["proof (state)\nthis:\n  poly_to_row [] p = vec 0 f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma polys_to_mat_Nil [simp]: \"polys_to_mat ts [] = mat 0 (length ts) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polys_to_mat ts [] = mat 0 (length ts) f", "by (simp add: polys_to_mat_def mat_eq_iff)"], ["", "lemma dim_row_polys_to_mat[simp]: \"dim_row (polys_to_mat ts ps) = length ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (polys_to_mat ts ps) = length ps", "by (simp add: polys_to_mat_def)"], ["", "lemma dim_col_polys_to_mat[simp]: \"dim_col (polys_to_mat ts ps) = length ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (polys_to_mat ts ps) = length ts", "by (simp add: polys_to_mat_def)"], ["", "lemma polys_to_mat_index:\n  assumes \"i < length ps\" and \"j < length ts\"\n  shows \"(polys_to_mat ts ps) $$ (i, j) = lookup (ps ! i) (ts ! j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polys_to_mat ts ps $$ (i, j) = lookup (ps ! i) (ts ! j)", "by (simp add: polys_to_mat_def index_mat(1)[OF assms] mat_of_rows_def nth_map[OF assms(1)],\n      rule poly_to_row_index, fact)"], ["", "lemma row_polys_to_mat:\n  assumes \"i < length ps\"\n  shows \"row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)", "have \"row (polys_to_mat ts ps) i = (map (poly_to_row ts) ps) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (polys_to_mat ts ps) i = map (poly_to_row ts) ps ! i", "unfolding polys_to_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. row (mat_of_rows (length ts) (map (poly_to_row ts) ps)) i =\n    map (poly_to_row ts) ps ! i", "proof (rule mat_of_rows_row)"], ["proof (state)\ngoal (2 subgoals):\n 1. i < length (map (poly_to_row ts) ps)\n 2. map (poly_to_row ts) ps ! i \\<in> carrier_vec (length ts)", "from assms"], ["proof (chain)\npicking this:\n  i < length ps", "show \"i < length (map (poly_to_row ts) ps)\""], ["proof (prove)\nusing this:\n  i < length ps\n\ngoal (1 subgoal):\n 1. i < length (map (poly_to_row ts) ps)", "by simp"], ["proof (state)\nthis:\n  i < length (map (poly_to_row ts) ps)\n\ngoal (1 subgoal):\n 1. map (poly_to_row ts) ps ! i \\<in> carrier_vec (length ts)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. map (poly_to_row ts) ps ! i \\<in> carrier_vec (length ts)", "show \"map (poly_to_row ts) ps ! i \\<in> carrier_vec (length ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (poly_to_row ts) ps ! i \\<in> carrier_vec (length ts)", "unfolding nth_map[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_to_row ts (ps ! i) \\<in> carrier_vec (length ts)", "by (rule carrier_vecI, fact dim_poly_to_row)"], ["proof (state)\nthis:\n  map (poly_to_row ts) ps ! i \\<in> carrier_vec (length ts)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row (polys_to_mat ts ps) i = map (poly_to_row ts) ps ! i\n\ngoal (1 subgoal):\n 1. row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)", "also"], ["proof (state)\nthis:\n  row (polys_to_mat ts ps) i = map (poly_to_row ts) ps ! i\n\ngoal (1 subgoal):\n 1. row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)", "from assms"], ["proof (chain)\npicking this:\n  i < length ps", "have \"... = poly_to_row ts (ps ! i)\""], ["proof (prove)\nusing this:\n  i < length ps\n\ngoal (1 subgoal):\n 1. map (poly_to_row ts) ps ! i = poly_to_row ts (ps ! i)", "by (rule nth_map)"], ["proof (state)\nthis:\n  map (poly_to_row ts) ps ! i = poly_to_row ts (ps ! i)\n\ngoal (1 subgoal):\n 1. row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)", "finally"], ["proof (chain)\npicking this:\n  row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)", "show ?thesis"], ["proof (prove)\nusing this:\n  row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)\n\ngoal (1 subgoal):\n 1. row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)", "."], ["proof (state)\nthis:\n  row (polys_to_mat ts ps) i = poly_to_row ts (ps ! i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma col_polys_to_mat:\n  assumes \"j < length ts\"\n  shows \"col (polys_to_mat ts ps) j = vec_of_list (map (\\<lambda>p. lookup p (ts ! j)) ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (polys_to_mat ts ps) j =\n    vec_of_list (map (\\<lambda>p. lookup p (ts ! j)) ps)", "by (simp add: vec_of_list_alt col_def, rule vec_cong, rule refl, simp add: polys_to_mat_index assms)"], ["", "lemma length_mat_to_polys[simp]: \"length (mat_to_polys ts A) = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (mat_to_polys ts A) = dim_row A", "by (simp add: mat_to_polys_def mat_to_list_def)"], ["", "lemma mat_to_polys_nth:\n  assumes \"i < dim_row A\"\n  shows \"(mat_to_polys ts A) ! i = row_to_poly ts (row A i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_to_polys ts A ! i = row_to_poly ts (row A i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mat_to_polys ts A ! i = row_to_poly ts (row A i)", "from assms"], ["proof (chain)\npicking this:\n  i < dim_row A", "have \"i < length (rows A)\""], ["proof (prove)\nusing this:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. i < length (rows A)", "by (simp only: length_rows)"], ["proof (state)\nthis:\n  i < length (rows A)\n\ngoal (1 subgoal):\n 1. mat_to_polys ts A ! i = row_to_poly ts (row A i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i < length (rows A)\n\ngoal (1 subgoal):\n 1. mat_to_polys ts A ! i = row_to_poly ts (row A i)", "by (simp add: mat_to_polys_def)"], ["proof (state)\nthis:\n  mat_to_polys ts A ! i = row_to_poly ts (row A i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Keys_mat_to_polys: \"Keys (set (mat_to_polys ts A)) \\<subseteq> set ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (mat_to_polys ts A)) \\<subseteq> set ts", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "assume \"t \\<in> Keys (set (mat_to_polys ts A))\""], ["proof (state)\nthis:\n  t \\<in> Keys (set (mat_to_polys ts A))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "then"], ["proof (chain)\npicking this:\n  t \\<in> Keys (set (mat_to_polys ts A))", "obtain p where \"p \\<in> set (mat_to_polys ts A)\" and t: \"t \\<in> keys p\""], ["proof (prove)\nusing this:\n  t \\<in> Keys (set (mat_to_polys ts A))\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> set (mat_to_polys ts A); t \\<in> keys p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_KeysE)"], ["proof (state)\nthis:\n  p \\<in> set (mat_to_polys ts A)\n  t \\<in> keys p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "from this(1)"], ["proof (chain)\npicking this:\n  p \\<in> set (mat_to_polys ts A)", "obtain i where \"i < length (mat_to_polys ts A)\" and p: \"p = (mat_to_polys ts A) ! i\""], ["proof (prove)\nusing this:\n  p \\<in> set (mat_to_polys ts A)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length (mat_to_polys ts A);\n         p = mat_to_polys ts A ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  i < length (mat_to_polys ts A)\n  p = mat_to_polys ts A ! i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "from this(1)"], ["proof (chain)\npicking this:\n  i < length (mat_to_polys ts A)", "have \"i < dim_row A\""], ["proof (prove)\nusing this:\n  i < length (mat_to_polys ts A)\n\ngoal (1 subgoal):\n 1. i < dim_row A", "by simp"], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "with p"], ["proof (chain)\npicking this:\n  p = mat_to_polys ts A ! i\n  i < dim_row A", "have \"p = row_to_poly ts (row A i)\""], ["proof (prove)\nusing this:\n  p = mat_to_polys ts A ! i\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. p = row_to_poly ts (row A i)", "by (simp only: mat_to_polys_nth)"], ["proof (state)\nthis:\n  p = row_to_poly ts (row A i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "with t"], ["proof (chain)\npicking this:\n  t \\<in> keys p\n  p = row_to_poly ts (row A i)", "have \"t \\<in> keys (row_to_poly ts (row A i))\""], ["proof (prove)\nusing this:\n  t \\<in> keys p\n  p = row_to_poly ts (row A i)\n\ngoal (1 subgoal):\n 1. t \\<in> keys (row_to_poly ts (row A i))", "by simp"], ["proof (state)\nthis:\n  t \\<in> keys (row_to_poly ts (row A i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "also"], ["proof (state)\nthis:\n  t \\<in> keys (row_to_poly ts (row A i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "have \"... \\<subseteq> set ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (row_to_poly ts (row A i)) \\<subseteq> set ts", "by (fact keys_row_to_poly)"], ["proof (state)\nthis:\n  keys (row_to_poly ts (row A i)) \\<subseteq> set ts\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Keys (set (mat_to_polys ts A)) \\<Longrightarrow>\n       x \\<in> set ts", "finally"], ["proof (chain)\npicking this:\n  t \\<in> set ts", "show \"t \\<in> set ts\""], ["proof (prove)\nusing this:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. t \\<in> set ts", "."], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma polys_to_mat_to_polys:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"mat_to_polys ts (polys_to_mat ts ps) = (ps::('t \\<Rightarrow>\\<^sub>0 'b::semiring_1) list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_to_polys ts (polys_to_mat ts ps) = ps", "unfolding mat_to_polys_def mat_to_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (row_to_poly ts) (rows (polys_to_mat ts ps)) = ps", "proof (rule nth_equalityI, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length ps \\<Longrightarrow>\n       row_to_poly ts (row (polys_to_mat ts ps) i) = ps ! i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length ps \\<Longrightarrow>\n       row_to_poly ts (row (polys_to_mat ts ps) i) = ps ! i", "assume \"i < length ps\""], ["proof (state)\nthis:\n  i < length ps\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length ps \\<Longrightarrow>\n       row_to_poly ts (row (polys_to_mat ts ps) i) = ps ! i", "have *: \"keys (ps ! i) \\<subseteq> set ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. keys (ps ! i) \\<subseteq> set ts", "using \\<open>i < length ps\\<close> assms keys_subset_Keys nth_mem"], ["proof (prove)\nusing this:\n  i < length ps\n  Keys (set ps) \\<subseteq> set ts\n  ?f \\<in> ?F \\<Longrightarrow> keys ?f \\<subseteq> Keys ?F\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. keys (ps ! i) \\<subseteq> set ts", "by blast"], ["proof (state)\nthis:\n  keys (ps ! i) \\<subseteq> set ts\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length ps \\<Longrightarrow>\n       row_to_poly ts (row (polys_to_mat ts ps) i) = ps ! i", "show \"row_to_poly ts (row (polys_to_mat ts ps) i) = ps ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (row (polys_to_mat ts ps) i) = ps ! i", "by (simp only: row_polys_to_mat[OF \\<open>i < length ps\\<close>] poly_to_row_to_poly[OF *])"], ["proof (state)\nthis:\n  row_to_poly ts (row (polys_to_mat ts ps) i) = ps ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_to_polys_to_mat:\n  assumes \"distinct ts\" and \"length ts = dim_col A\"\n  shows \"(polys_to_mat ts (mat_to_polys ts A)) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polys_to_mat ts (mat_to_polys ts A) = A", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> polys_to_mat ts (mat_to_polys ts A) $$ (i, j) =\n                         A $$ (i, j)\n 2. dim_row (polys_to_mat ts (mat_to_polys ts A)) = dim_row A\n 3. dim_col (polys_to_mat ts (mat_to_polys ts A)) = dim_col A", "fix i j"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> polys_to_mat ts (mat_to_polys ts A) $$ (i, j) =\n                         A $$ (i, j)\n 2. dim_row (polys_to_mat ts (mat_to_polys ts A)) = dim_row A\n 3. dim_col (polys_to_mat ts (mat_to_polys ts A)) = dim_col A", "assume i: \"i < dim_row A\" and j: \"j < dim_col A\""], ["proof (state)\nthis:\n  i < dim_row A\n  j < dim_col A\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> polys_to_mat ts (mat_to_polys ts A) $$ (i, j) =\n                         A $$ (i, j)\n 2. dim_row (polys_to_mat ts (mat_to_polys ts A)) = dim_row A\n 3. dim_col (polys_to_mat ts (mat_to_polys ts A)) = dim_col A", "hence i': \"i < length (mat_to_polys ts A)\" and j': \"j < length ts\""], ["proof (prove)\nusing this:\n  i < dim_row A\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. i < length (mat_to_polys ts A) &&& j < length ts", "by (simp, simp only: assms(2))"], ["proof (state)\nthis:\n  i < length (mat_to_polys ts A)\n  j < length ts\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> polys_to_mat ts (mat_to_polys ts A) $$ (i, j) =\n                         A $$ (i, j)\n 2. dim_row (polys_to_mat ts (mat_to_polys ts A)) = dim_row A\n 3. dim_col (polys_to_mat ts (mat_to_polys ts A)) = dim_col A", "have r: \"dim_vec (row A i) = length ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (row A i) = length ts", "by (simp add: assms(2))"], ["proof (state)\nthis:\n  dim_vec (row A i) = length ts\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> polys_to_mat ts (mat_to_polys ts A) $$ (i, j) =\n                         A $$ (i, j)\n 2. dim_row (polys_to_mat ts (mat_to_polys ts A)) = dim_row A\n 3. dim_col (polys_to_mat ts (mat_to_polys ts A)) = dim_col A", "show \"polys_to_mat ts (mat_to_polys ts A) $$ (i, j) = A $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. polys_to_mat ts (mat_to_polys ts A) $$ (i, j) = A $$ (i, j)", "by (simp only: polys_to_mat_index[OF i' j'] mat_to_polys_nth[OF \\<open>i < dim_row A\\<close>]\n        lookup_row_to_poly[OF assms(1) r j'] index_row(1)[OF i j])"], ["proof (state)\nthis:\n  polys_to_mat ts (mat_to_polys ts A) $$ (i, j) = A $$ (i, j)\n\ngoal (2 subgoals):\n 1. dim_row (polys_to_mat ts (mat_to_polys ts A)) = dim_row A\n 2. dim_col (polys_to_mat ts (mat_to_polys ts A)) = dim_col A", "qed (simp_all add: assms)"], ["", "subsection \\<open>Properties of Macaulay Matrices\\<close>"], ["", "lemma row_to_poly_vec_times:\n  assumes \"distinct ts\" and \"length ts = dim_col A\"\n  shows \"row_to_poly ts (v \\<^sub>v* A) = ((\\<Sum>i=0..<dim_row A. (v $ i) \\<cdot> (row_to_poly ts (row A i)))::'t \\<Rightarrow>\\<^sub>0 'b::comm_semiring_0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (v \\<^sub>v* A) =\n    (\\<Sum>i = 0..<dim_row A. v $ i \\<cdot> row_to_poly ts (row A i))", "proof (simp add: mult_vec_mat_def scalar_prod_def row_to_poly_vec_sum[OF assms], rule sum.cong, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_row A} \\<Longrightarrow>\n       row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ x * col A j $ x)) =\n       v $ x \\<cdot> row_to_poly ts (row A x)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_row A} \\<Longrightarrow>\n       row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ x * col A j $ x)) =\n       v $ x \\<cdot> row_to_poly ts (row A x)", "assume \"i \\<in> {0..<dim_row A}\""], ["proof (state)\nthis:\n  i \\<in> {0..<dim_row A}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_row A} \\<Longrightarrow>\n       row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ x * col A j $ x)) =\n       v $ x \\<cdot> row_to_poly ts (row A x)", "hence \"i < dim_row A\""], ["proof (prove)\nusing this:\n  i \\<in> {0..<dim_row A}\n\ngoal (1 subgoal):\n 1. i < dim_row A", "by simp"], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_row A} \\<Longrightarrow>\n       row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ x * col A j $ x)) =\n       v $ x \\<cdot> row_to_poly ts (row A x)", "have \"dim_vec (row A i) = length ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (row A i) = length ts", "by (simp add: assms(2))"], ["proof (state)\nthis:\n  dim_vec (row A i) = length ts\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_row A} \\<Longrightarrow>\n       row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ x * col A j $ x)) =\n       v $ x \\<cdot> row_to_poly ts (row A x)", "have *: \"vec (dim_col A) (\\<lambda>j. col A j $ i) = vec (dim_col A) (\\<lambda>j. A $$ (i, j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_col A) (\\<lambda>j. col A j $ i) =\n    vec (dim_col A) (\\<lambda>j. A $$ (i, j))", "by (rule vec_cong, rule refl, simp add: \\<open>i < dim_row A\\<close>)"], ["proof (state)\nthis:\n  vec (dim_col A) (\\<lambda>j. col A j $ i) =\n  vec (dim_col A) (\\<lambda>j. A $$ (i, j))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_row A} \\<Longrightarrow>\n       row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ x * col A j $ x)) =\n       v $ x \\<cdot> row_to_poly ts (row A x)", "have \"vec (dim_col A) (\\<lambda>j. v $ i * col A j $ i) = v $ i \\<cdot>\\<^sub>v vec (dim_col A) (\\<lambda>j. col A j $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_col A) (\\<lambda>j. v $ i * col A j $ i) =\n    v $ i \\<cdot>\\<^sub>v vec (dim_col A) (\\<lambda>j. col A j $ i)", "by (simp only: vec_scalar_mult_fun)"], ["proof (state)\nthis:\n  vec (dim_col A) (\\<lambda>j. v $ i * col A j $ i) =\n  v $ i \\<cdot>\\<^sub>v vec (dim_col A) (\\<lambda>j. col A j $ i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_row A} \\<Longrightarrow>\n       row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ x * col A j $ x)) =\n       v $ x \\<cdot> row_to_poly ts (row A x)", "also"], ["proof (state)\nthis:\n  vec (dim_col A) (\\<lambda>j. v $ i * col A j $ i) =\n  v $ i \\<cdot>\\<^sub>v vec (dim_col A) (\\<lambda>j. col A j $ i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_row A} \\<Longrightarrow>\n       row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ x * col A j $ x)) =\n       v $ x \\<cdot> row_to_poly ts (row A x)", "have \"... = v $ i \\<cdot>\\<^sub>v (row A i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v $ i \\<cdot>\\<^sub>v vec (dim_col A) (\\<lambda>j. col A j $ i) =\n    v $ i \\<cdot>\\<^sub>v row A i", "by (simp only: * row_def[symmetric])"], ["proof (state)\nthis:\n  v $ i \\<cdot>\\<^sub>v vec (dim_col A) (\\<lambda>j. col A j $ i) =\n  v $ i \\<cdot>\\<^sub>v row A i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_row A} \\<Longrightarrow>\n       row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ x * col A j $ x)) =\n       v $ x \\<cdot> row_to_poly ts (row A x)", "finally"], ["proof (chain)\npicking this:\n  vec (dim_col A) (\\<lambda>j. v $ i * col A j $ i) =\n  v $ i \\<cdot>\\<^sub>v row A i", "show \"row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ i * col A j $ i)) =\n                  (v $ i) \\<cdot> (row_to_poly ts (row A i))\""], ["proof (prove)\nusing this:\n  vec (dim_col A) (\\<lambda>j. v $ i * col A j $ i) =\n  v $ i \\<cdot>\\<^sub>v row A i\n\ngoal (1 subgoal):\n 1. row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ i * col A j $ i)) =\n    v $ i \\<cdot> row_to_poly ts (row A i)", "by (simp add: row_to_poly_smult[OF assms(1) \\<open>dim_vec (row A i) = length ts\\<close>])"], ["proof (state)\nthis:\n  row_to_poly ts (vec (dim_col A) (\\<lambda>j. v $ i * col A j $ i)) =\n  v $ i \\<cdot> row_to_poly ts (row A i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_times_polys_to_mat:\n  assumes \"Keys (set ps) \\<subseteq> set ts\" and \"v \\<in> carrier_vec (length ps)\"\n  shows \"row_to_poly ts (v \\<^sub>v* (polys_to_mat ts ps)) = (\\<Sum>(c, p)\\<leftarrow>zip (list_of_vec v) ps. c \\<cdot> p)\"\n    (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (v \\<^sub>v* polys_to_mat ts ps) =\n    sum_list (map2 (\\<cdot>) (list_of_vec v) ps)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. row_to_poly ts (v \\<^sub>v* polys_to_mat ts ps) =\n    sum_list (map2 (\\<cdot>) (list_of_vec v) ps)", "from assms"], ["proof (chain)\npicking this:\n  Keys (set ps) \\<subseteq> set ts\n  v \\<in> carrier_vec (length ps)", "have *: \"dim_vec v = length ps\""], ["proof (prove)\nusing this:\n  Keys (set ps) \\<subseteq> set ts\n  v \\<in> carrier_vec (length ps)\n\ngoal (1 subgoal):\n 1. dim_vec v = length ps", "by (simp only: carrier_dim_vec)"], ["proof (state)\nthis:\n  dim_vec v = length ps\n\ngoal (1 subgoal):\n 1. row_to_poly ts (v \\<^sub>v* polys_to_mat ts ps) =\n    sum_list (map2 (\\<cdot>) (list_of_vec v) ps)", "have eq: \"map (\\<lambda>i. v \\<bullet> col (polys_to_mat ts ps) i) [0..<length ts] =\n            map (\\<lambda>s. v \\<bullet> (vec_of_list (map (\\<lambda>p. lookup p s) ps))) ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>i. v \\<bullet> col (polys_to_mat ts ps) i)\n     [0..<length ts] =\n    map (\\<lambda>s.\n            v \\<bullet> vec_of_list (map (\\<lambda>p. lookup p s) ps))\n     ts", "proof (rule nth_equalityI, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length ts \\<Longrightarrow>\n       v \\<bullet> col (polys_to_mat ts ps) i =\n       v \\<bullet> map_vec (\\<lambda>p. lookup p (ts ! i)) (vec_of_list ps)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length ts \\<Longrightarrow>\n       v \\<bullet> col (polys_to_mat ts ps) i =\n       v \\<bullet> map_vec (\\<lambda>p. lookup p (ts ! i)) (vec_of_list ps)", "assume \"i < length ts\""], ["proof (state)\nthis:\n  i < length ts\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length ts \\<Longrightarrow>\n       v \\<bullet> col (polys_to_mat ts ps) i =\n       v \\<bullet> map_vec (\\<lambda>p. lookup p (ts ! i)) (vec_of_list ps)", "hence \"col (polys_to_mat ts ps) i = vec_of_list (map (\\<lambda>p. lookup p (ts ! i)) ps)\""], ["proof (prove)\nusing this:\n  i < length ts\n\ngoal (1 subgoal):\n 1. col (polys_to_mat ts ps) i =\n    vec_of_list (map (\\<lambda>p. lookup p (ts ! i)) ps)", "by (rule col_polys_to_mat)"], ["proof (state)\nthis:\n  col (polys_to_mat ts ps) i =\n  vec_of_list (map (\\<lambda>p. lookup p (ts ! i)) ps)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length ts \\<Longrightarrow>\n       v \\<bullet> col (polys_to_mat ts ps) i =\n       v \\<bullet> map_vec (\\<lambda>p. lookup p (ts ! i)) (vec_of_list ps)", "thus \"v \\<bullet> col (polys_to_mat ts ps) i = v \\<bullet> map_vec (\\<lambda>p. lookup p (ts ! i)) (vec_of_list ps)\""], ["proof (prove)\nusing this:\n  col (polys_to_mat ts ps) i =\n  vec_of_list (map (\\<lambda>p. lookup p (ts ! i)) ps)\n\ngoal (1 subgoal):\n 1. v \\<bullet> col (polys_to_mat ts ps) i =\n    v \\<bullet> map_vec (\\<lambda>p. lookup p (ts ! i)) (vec_of_list ps)", "by simp"], ["proof (state)\nthis:\n  v \\<bullet> col (polys_to_mat ts ps) i =\n  v \\<bullet> map_vec (\\<lambda>p. lookup p (ts ! i)) (vec_of_list ps)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map (\\<lambda>i. v \\<bullet> col (polys_to_mat ts ps) i) [0..<length ts] =\n  map (\\<lambda>s.\n          v \\<bullet> vec_of_list (map (\\<lambda>p. lookup p s) ps))\n   ts\n\ngoal (1 subgoal):\n 1. row_to_poly ts (v \\<^sub>v* polys_to_mat ts ps) =\n    sum_list (map2 (\\<cdot>) (list_of_vec v) ps)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts (v \\<^sub>v* polys_to_mat ts ps) =\n    sum_list (map2 (\\<cdot>) (list_of_vec v) ps)", "proof (rule poly_mapping_eqI, simp add: mult_vec_mat_def row_to_poly_def lookup_list_to_poly\n      eq list_to_fun_def map_of_zip_map lookup_sum_list o_def, intro conjI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<in> set ts \\<Longrightarrow>\n       v \\<bullet> map_vec (\\<lambda>p. lookup p k) (vec_of_list ps) =\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k)\n 2. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<in> set ts \\<Longrightarrow>\n       v \\<bullet> map_vec (\\<lambda>p. lookup p k) (vec_of_list ps) =\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k)\n 2. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "assume \"t \\<in> set ts\""], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<in> set ts \\<Longrightarrow>\n       v \\<bullet> map_vec (\\<lambda>p. lookup p k) (vec_of_list ps) =\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k)\n 2. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "have \"v \\<bullet> vec_of_list (map (\\<lambda>p. lookup p t) ps) =\n          (\\<Sum>(c, p)\\<leftarrow>zip (list_of_vec v) ps. lookup (c \\<cdot> p) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> vec_of_list (map (\\<lambda>p. lookup p t) ps) =\n    sum_list\n     (map2 (\\<lambda>c p. lookup (c \\<cdot> p) t) (list_of_vec v) ps)", "proof (simp add: scalar_prod_def vec_of_list_index)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n    sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)", "have \"(\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n            (\\<Sum>i = 0..<length ps. (list_of_vec v) ! i * lookup (ps ! i) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n    (\\<Sum>i = 0..<length ps. list_of_vec v ! i * lookup (ps ! i) t)", "by (rule sum.cong, rule refl, simp add: *)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n  (\\<Sum>i = 0..<length ps. list_of_vec v ! i * lookup (ps ! i) t)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n    sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n  (\\<Sum>i = 0..<length ps. list_of_vec v ! i * lookup (ps ! i) t)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n    sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)", "have \"... = (\\<Sum>(c, p)\\<leftarrow>zip (list_of_vec v) ps. c * lookup p t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length ps. list_of_vec v ! i * lookup (ps ! i) t) =\n    sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)", "by (simp only: sum_set_upt_eq_sum_list, rule sum_list_upt_zip, simp only: length_list_of_vec *)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length ps. list_of_vec v ! i * lookup (ps ! i) t) =\n  sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n    sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n  sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)", "show \"(\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n                    (\\<Sum>(c, p)\\<leftarrow>zip (list_of_vec v) ps. c * lookup p t)\""], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n  sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n    sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)", "."], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length ps. v $ i * lookup (ps ! i) t) =\n  sum_list (map2 (\\<lambda>c p. c * lookup p t) (list_of_vec v) ps)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<bullet> vec_of_list (map (\\<lambda>p. lookup p t) ps) =\n  sum_list (map2 (\\<lambda>c p. lookup (c \\<cdot> p) t) (list_of_vec v) ps)\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       k \\<in> set ts \\<Longrightarrow>\n       v \\<bullet> map_vec (\\<lambda>p. lookup p k) (vec_of_list ps) =\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k)\n 2. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "thus \"v \\<bullet> map_vec (\\<lambda>p. lookup p t) (vec_of_list ps) =\n          (\\<Sum>x\\<leftarrow>zip (list_of_vec v) ps. lookup (case x of (c, x) \\<Rightarrow> c \\<cdot> x) t)\""], ["proof (prove)\nusing this:\n  v \\<bullet> vec_of_list (map (\\<lambda>p. lookup p t) ps) =\n  sum_list (map2 (\\<lambda>c p. lookup (c \\<cdot> p) t) (list_of_vec v) ps)\n\ngoal (1 subgoal):\n 1. v \\<bullet> map_vec (\\<lambda>p. lookup p t) (vec_of_list ps) =\n    (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                         ps. lookup\n                              (case x of (c, x) \\<Rightarrow> c \\<cdot> x)\n                              t)", "by (metis (mono_tags, lifting) case_prod_conv cond_case_prod_eta vec_of_list_map)"], ["proof (state)\nthis:\n  v \\<bullet> map_vec (\\<lambda>p. lookup p t) (vec_of_list ps) =\n  (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                       ps. lookup\n                            (case x of (c, x) \\<Rightarrow> c \\<cdot> x) t)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "assume \"t \\<notin> set ts\""], ["proof (state)\nthis:\n  t \\<notin> set ts\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "with assms(1)"], ["proof (chain)\npicking this:\n  Keys (set ps) \\<subseteq> set ts\n  t \\<notin> set ts", "have \"t \\<notin> Keys (set ps)\""], ["proof (prove)\nusing this:\n  Keys (set ps) \\<subseteq> set ts\n  t \\<notin> set ts\n\ngoal (1 subgoal):\n 1. t \\<notin> Keys (set ps)", "by auto"], ["proof (state)\nthis:\n  t \\<notin> Keys (set ps)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "have \"(\\<Sum>(c, p)\\<leftarrow>zip (list_of_vec v) ps. lookup (c \\<cdot> p) t) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list\n     (map2 (\\<lambda>c p. lookup (c \\<cdot> p) t) (list_of_vec v) ps) =\n    (0::'c)", "proof (rule sum_list_zeroI, rule, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. case x of (c, p) \\<Rightarrow> c * lookup p t) `\n               set (zip (list_of_vec v) ps) \\<Longrightarrow>\n       x = (0::'c)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. case x of (c, p) \\<Rightarrow> c * lookup p t) `\n               set (zip (list_of_vec v) ps) \\<Longrightarrow>\n       x = (0::'c)", "assume \"x \\<in> (\\<lambda>(c, p). c * lookup p t) ` set (zip (list_of_vec v) ps)\""], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>(c, p). c * lookup p t) ` set (zip (list_of_vec v) ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. case x of (c, p) \\<Rightarrow> c * lookup p t) `\n               set (zip (list_of_vec v) ps) \\<Longrightarrow>\n       x = (0::'c)", "then"], ["proof (chain)\npicking this:\n  x \\<in> (\\<lambda>(c, p). c * lookup p t) ` set (zip (list_of_vec v) ps)", "obtain c p where cp: \"(c, p) \\<in> set (zip (list_of_vec v) ps)\"\n        and x: \"x = c * lookup p t\""], ["proof (prove)\nusing this:\n  x \\<in> (\\<lambda>(c, p). c * lookup p t) ` set (zip (list_of_vec v) ps)\n\ngoal (1 subgoal):\n 1. (\\<And>c p.\n        \\<lbrakk>(c, p) \\<in> set (zip (list_of_vec v) ps);\n         x = c * lookup p t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (c, p) \\<in> set (zip (list_of_vec v) ps)\n  x = c * lookup p t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. case x of (c, p) \\<Rightarrow> c * lookup p t) `\n               set (zip (list_of_vec v) ps) \\<Longrightarrow>\n       x = (0::'c)", "from cp"], ["proof (chain)\npicking this:\n  (c, p) \\<in> set (zip (list_of_vec v) ps)", "have \"p \\<in> set ps\""], ["proof (prove)\nusing this:\n  (c, p) \\<in> set (zip (list_of_vec v) ps)\n\ngoal (1 subgoal):\n 1. p \\<in> set ps", "by (rule set_zip_rightD)"], ["proof (state)\nthis:\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. case x of (c, p) \\<Rightarrow> c * lookup p t) `\n               set (zip (list_of_vec v) ps) \\<Longrightarrow>\n       x = (0::'c)", "with \\<open>t \\<notin> Keys (set ps)\\<close>"], ["proof (chain)\npicking this:\n  t \\<notin> Keys (set ps)\n  p \\<in> set ps", "have \"t \\<notin> keys p\""], ["proof (prove)\nusing this:\n  t \\<notin> Keys (set ps)\n  p \\<in> set ps\n\ngoal (1 subgoal):\n 1. t \\<notin> keys p", "by (auto intro: in_KeysI)"], ["proof (state)\nthis:\n  t \\<notin> keys p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. case x of (c, p) \\<Rightarrow> c * lookup p t) `\n               set (zip (list_of_vec v) ps) \\<Longrightarrow>\n       x = (0::'c)", "thus \"x = 0\""], ["proof (prove)\nusing this:\n  t \\<notin> keys p\n\ngoal (1 subgoal):\n 1. x = (0::'c)", "by (simp add: x in_keys_iff)"], ["proof (state)\nthis:\n  x = (0::'c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum_list\n   (map2 (\\<lambda>c p. lookup (c \\<cdot> p) t) (list_of_vec v) ps) =\n  (0::'c)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<notin> set ts \\<Longrightarrow>\n       (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                            ps. lookup\n                                 (case x of\n                                  (x, xa) \\<Rightarrow> x \\<cdot> xa)\n                                 k) =\n       (0::'c)", "thus \"(\\<Sum>x\\<leftarrow>zip (list_of_vec v) ps. lookup (case x of (c, x) \\<Rightarrow> c \\<cdot> x) t) = 0\""], ["proof (prove)\nusing this:\n  sum_list\n   (map2 (\\<lambda>c p. lookup (c \\<cdot> p) t) (list_of_vec v) ps) =\n  (0::'c)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                         ps. lookup\n                              (case x of (c, x) \\<Rightarrow> c \\<cdot> x)\n                              t) =\n    (0::'c)", "by (metis (mono_tags, lifting) case_prod_conv cond_case_prod_eta)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>zip (list_of_vec v)\n                       ps. lookup\n                            (case x of (c, x) \\<Rightarrow> c \\<cdot> x)\n                            t) =\n  (0::'c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row_to_poly ts (v \\<^sub>v* polys_to_mat ts ps) =\n  sum_list (map2 (\\<cdot>) (list_of_vec v) ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_space_subset_phull:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"row_to_poly ts ` row_space (polys_to_mat ts ps) \\<subseteq> phull (set ps)\"\n    (is \"?r \\<subseteq> ?h\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts ` row_space (polys_to_mat ts ps)\n    \\<subseteq> phull (set ps)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_to_poly ts `\n               row_space (polys_to_mat ts ps) \\<Longrightarrow>\n       x \\<in> phull (set ps)", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_to_poly ts `\n               row_space (polys_to_mat ts ps) \\<Longrightarrow>\n       x \\<in> phull (set ps)", "assume \"q \\<in> ?r\""], ["proof (state)\nthis:\n  q \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_to_poly ts `\n               row_space (polys_to_mat ts ps) \\<Longrightarrow>\n       x \\<in> phull (set ps)", "then"], ["proof (chain)\npicking this:\n  q \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)", "obtain x where x1: \"x \\<in> row_space (polys_to_mat ts ps)\"\n    and q1: \"q = row_to_poly ts x\""], ["proof (prove)\nusing this:\n  q \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> row_space (polys_to_mat ts ps);\n         q = row_to_poly ts x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  x \\<in> row_space (polys_to_mat ts ps)\n  q = row_to_poly ts x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_to_poly ts `\n               row_space (polys_to_mat ts ps) \\<Longrightarrow>\n       x \\<in> phull (set ps)", "from x1"], ["proof (chain)\npicking this:\n  x \\<in> row_space (polys_to_mat ts ps)", "obtain v where v: \"v \\<in> carrier_vec (dim_row (polys_to_mat ts ps))\" and x: \"x = v \\<^sub>v* polys_to_mat ts ps\""], ["proof (prove)\nusing this:\n  x \\<in> row_space (polys_to_mat ts ps)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> carrier_vec (dim_row (polys_to_mat ts ps));\n         x = v \\<^sub>v* polys_to_mat ts ps\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule row_spaceE)"], ["proof (state)\nthis:\n  v \\<in> carrier_vec (dim_row (polys_to_mat ts ps))\n  x = v \\<^sub>v* polys_to_mat ts ps\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_to_poly ts `\n               row_space (polys_to_mat ts ps) \\<Longrightarrow>\n       x \\<in> phull (set ps)", "from v"], ["proof (chain)\npicking this:\n  v \\<in> carrier_vec (dim_row (polys_to_mat ts ps))", "have \"v \\<in> carrier_vec (length ps)\""], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec (dim_row (polys_to_mat ts ps))\n\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec (length ps)", "by (simp only: dim_row_polys_to_mat)"], ["proof (state)\nthis:\n  v \\<in> carrier_vec (length ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_to_poly ts `\n               row_space (polys_to_mat ts ps) \\<Longrightarrow>\n       x \\<in> phull (set ps)", "thm vec_times_polys_to_mat"], ["proof (state)\nthis:\n  v \\<in> carrier_vec (length ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_to_poly ts `\n               row_space (polys_to_mat ts ps) \\<Longrightarrow>\n       x \\<in> phull (set ps)", "with x q1"], ["proof (chain)\npicking this:\n  x = v \\<^sub>v* polys_to_mat ts ps\n  q = row_to_poly ts x\n  v \\<in> carrier_vec (length ps)", "have q: \"q = (\\<Sum>(c, p)\\<leftarrow>zip (list_of_vec v) ps. c \\<cdot> p)\""], ["proof (prove)\nusing this:\n  x = v \\<^sub>v* polys_to_mat ts ps\n  q = row_to_poly ts x\n  v \\<in> carrier_vec (length ps)\n\ngoal (1 subgoal):\n 1. q = sum_list (map2 (\\<cdot>) (list_of_vec v) ps)", "by (simp add: vec_times_polys_to_mat[OF assms])"], ["proof (state)\nthis:\n  q = sum_list (map2 (\\<cdot>) (list_of_vec v) ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> row_to_poly ts `\n               row_space (polys_to_mat ts ps) \\<Longrightarrow>\n       x \\<in> phull (set ps)", "show \"q \\<in> ?h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> phull (set ps)", "unfolding q"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map2 (\\<cdot>) (list_of_vec v) ps) \\<in> phull (set ps)", "by (rule phull.span_listI)"], ["proof (state)\nthis:\n  q \\<in> phull (set ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phull_subset_row_space:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"phull (set ps) \\<subseteq> row_to_poly ts ` row_space (polys_to_mat ts ps)\"\n    (is \"?h \\<subseteq> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. phull (set ps)\n    \\<subseteq> row_to_poly ts ` row_space (polys_to_mat ts ps)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (set ps) \\<Longrightarrow>\n       x \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (set ps) \\<Longrightarrow>\n       x \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)", "assume \"q \\<in> ?h\""], ["proof (state)\nthis:\n  q \\<in> phull (set ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (set ps) \\<Longrightarrow>\n       x \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)", "then"], ["proof (chain)\npicking this:\n  q \\<in> phull (set ps)", "obtain cs where l: \"length cs = length ps\" and q: \"q = (\\<Sum>(c, p)\\<leftarrow>zip cs ps. c \\<cdot> p)\""], ["proof (prove)\nusing this:\n  q \\<in> phull (set ps)\n\ngoal (1 subgoal):\n 1. (\\<And>cs.\n        \\<lbrakk>length cs = length ps;\n         q = sum_list (map2 (\\<cdot>) cs ps)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule phull.span_listE)"], ["proof (state)\nthis:\n  length cs = length ps\n  q = sum_list (map2 (\\<cdot>) cs ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (set ps) \\<Longrightarrow>\n       x \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)", "let ?v = \"vec_of_list cs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (set ps) \\<Longrightarrow>\n       x \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)", "from l"], ["proof (chain)\npicking this:\n  length cs = length ps", "have *: \"?v \\<in> carrier_vec (length ps)\""], ["proof (prove)\nusing this:\n  length cs = length ps\n\ngoal (1 subgoal):\n 1. vec_of_list cs \\<in> carrier_vec (length ps)", "by (simp only: carrier_dim_vec dim_vec_of_list)"], ["proof (state)\nthis:\n  vec_of_list cs \\<in> carrier_vec (length ps)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (set ps) \\<Longrightarrow>\n       x \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)", "let ?q = \"?v \\<^sub>v* polys_to_mat ts ps\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> phull (set ps) \\<Longrightarrow>\n       x \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)", "show \"q \\<in> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. q = row_to_poly ts ?x\n 2. ?x \\<in> row_space (polys_to_mat ts ps)", "show \"q = row_to_poly ts ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = row_to_poly ts (vec_of_list cs \\<^sub>v* polys_to_mat ts ps)", "by (simp add: vec_times_polys_to_mat[OF assms *] q list_vec)"], ["proof (state)\nthis:\n  q = row_to_poly ts (vec_of_list cs \\<^sub>v* polys_to_mat ts ps)\n\ngoal (1 subgoal):\n 1. vec_of_list cs \\<^sub>v* polys_to_mat ts ps\n    \\<in> row_space (polys_to_mat ts ps)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. vec_of_list cs \\<^sub>v* polys_to_mat ts ps\n    \\<in> row_space (polys_to_mat ts ps)", "show \"?q \\<in> row_space (polys_to_mat ts ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list cs \\<^sub>v* polys_to_mat ts ps\n    \\<in> row_space (polys_to_mat ts ps)", "by (rule row_spaceI, rule)"], ["proof (state)\nthis:\n  vec_of_list cs \\<^sub>v* polys_to_mat ts ps\n  \\<in> row_space (polys_to_mat ts ps)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q \\<in> row_to_poly ts ` row_space (polys_to_mat ts ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_space_eq_phull:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"row_to_poly ts ` row_space (polys_to_mat ts ps) = phull (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts ` row_space (polys_to_mat ts ps) = phull (set ps)", "by (rule, rule row_space_subset_phull, fact, rule phull_subset_row_space, fact)"], ["", "lemma row_space_row_echelon_eq_phull:\n  assumes \"Keys (set ps) \\<subseteq> set ts\"\n  shows \"row_to_poly ts ` row_space (row_echelon (polys_to_mat ts ps)) = phull (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly ts ` row_space (row_echelon (polys_to_mat ts ps)) =\n    phull (set ps)", "by (simp add: row_space_eq_phull[OF assms])"], ["", "lemma phull_row_echelon:\n  assumes \"Keys (set ps) \\<subseteq> set ts\" and \"distinct ts\"\n  shows \"phull (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) = phull (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) =\n    phull (set ps)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. phull (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) =\n    phull (set ps)", "have len_ts: \"length ts = dim_col (row_echelon (polys_to_mat ts ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ts = dim_col (row_echelon (polys_to_mat ts ps))", "by simp"], ["proof (state)\nthis:\n  length ts = dim_col (row_echelon (polys_to_mat ts ps))\n\ngoal (1 subgoal):\n 1. phull (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) =\n    phull (set ps)", "have *: \"Keys (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) \\<subseteq> set ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))\n    \\<subseteq> set ts", "by (fact Keys_mat_to_polys)"], ["proof (state)\nthis:\n  Keys (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))\n  \\<subseteq> set ts\n\ngoal (1 subgoal):\n 1. phull (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) =\n    phull (set ps)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. phull (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) =\n    phull (set ps)", "by (simp only: row_space_eq_phull[OF *, symmetric] mat_to_polys_to_mat[OF assms(2) len_ts],\n        rule row_space_row_echelon_eq_phull, fact)"], ["proof (state)\nthis:\n  phull (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) =\n  phull (set ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pmdl_row_echelon:\n  assumes \"Keys (set ps) \\<subseteq> set ts\" and \"distinct ts\"\n  shows \"pmdl (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) = pmdl (set ps)\"\n    (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps)))) =\n    pmdl (set ps)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. pmdl (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))\n    \\<subseteq> pmdl (set ps)\n 2. pmdl (set ps)\n    \\<subseteq> pmdl\n                 (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))", "show \"?l \\<subseteq> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))\n    \\<subseteq> pmdl (set ps)", "by (rule pmdl.span_subset_spanI, rule subset_trans, rule phull.span_superset,\n      simp only: phull_row_echelon[OF assms] phull_subset_module)"], ["proof (state)\nthis:\n  pmdl (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))\n  \\<subseteq> pmdl (set ps)\n\ngoal (1 subgoal):\n 1. pmdl (set ps)\n    \\<subseteq> pmdl\n                 (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pmdl (set ps)\n    \\<subseteq> pmdl\n                 (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))", "show \"?r \\<subseteq> ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set ps)\n    \\<subseteq> pmdl\n                 (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))", "by (rule pmdl.span_subset_spanI, rule subset_trans, rule phull.span_superset,\n        simp only: phull_row_echelon[OF assms, symmetric] phull_subset_module)"], ["proof (state)\nthis:\n  pmdl (set ps)\n  \\<subseteq> pmdl\n               (set (mat_to_polys ts (row_echelon (polys_to_mat ts ps))))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* term_powerprod *)"], ["", "context ordered_term\nbegin"], ["", "lemma lt_row_to_poly_pivot_fun:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i < dim_row A\" and \"f i < dim_col A\"\n  shows \"lt ((mat_to_polys (pps_to_list S) A) ! i) = (pps_to_list S) ! (f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (mat_to_polys (pps_to_list S) A ! i) = pps_to_list S ! f i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt (mat_to_polys (pps_to_list S) A ! i) = pps_to_list S ! f i", "let ?ts = \"pps_to_list S\""], ["proof (state)\ngoal (1 subgoal):\n 1. lt (mat_to_polys (pps_to_list S) A ! i) = pps_to_list S ! f i", "have len_ts: \"length ?ts = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (pps_to_list S) = dim_col A", "by (simp add: length_pps_to_list assms(1))"], ["proof (state)\nthis:\n  length (pps_to_list S) = dim_col A\n\ngoal (1 subgoal):\n 1. lt (mat_to_polys (pps_to_list S) A ! i) = pps_to_list S ! f i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (mat_to_polys (pps_to_list S) A ! i) = pps_to_list S ! f i", "proof (simp add: mat_to_polys_nth[OF assms(3)], rule lt_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. lookup (row_to_poly (pps_to_list S) (row A i))\n     (pps_to_list S ! f i) \\<noteq>\n    (0::'b)\n 2. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "have \"lookup (row_to_poly ?ts (row A i)) (?ts ! f i) = (row A i) $ (f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n    row A i $ f i", "by (rule lookup_row_to_poly, fact distinct_pps_to_list, simp_all add: len_ts assms(4))"], ["proof (state)\nthis:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n  row A i $ f i\n\ngoal (2 subgoals):\n 1. lookup (row_to_poly (pps_to_list S) (row A i))\n     (pps_to_list S ! f i) \\<noteq>\n    (0::'b)\n 2. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "also"], ["proof (state)\nthis:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n  row A i $ f i\n\ngoal (2 subgoals):\n 1. lookup (row_to_poly (pps_to_list S) (row A i))\n     (pps_to_list S ! f i) \\<noteq>\n    (0::'b)\n 2. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "have \"... = A $$ (i, f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row A i $ f i = A $$ (i, f i)", "using assms(3) assms(4)"], ["proof (prove)\nusing this:\n  i < dim_row A\n  f i < dim_col A\n\ngoal (1 subgoal):\n 1. row A i $ f i = A $$ (i, f i)", "by simp"], ["proof (state)\nthis:\n  row A i $ f i = A $$ (i, f i)\n\ngoal (2 subgoals):\n 1. lookup (row_to_poly (pps_to_list S) (row A i))\n     (pps_to_list S ! f i) \\<noteq>\n    (0::'b)\n 2. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "also"], ["proof (state)\nthis:\n  row A i $ f i = A $$ (i, f i)\n\ngoal (2 subgoals):\n 1. lookup (row_to_poly (pps_to_list S) (row A i))\n     (pps_to_list S ! f i) \\<noteq>\n    (0::'b)\n 2. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "have \"... = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (i, f i) = (1::'b)", "by (rule pivot_funD, rule refl, fact+)"], ["proof (state)\nthis:\n  A $$ (i, f i) = (1::'b)\n\ngoal (2 subgoals):\n 1. lookup (row_to_poly (pps_to_list S) (row A i))\n     (pps_to_list S ! f i) \\<noteq>\n    (0::'b)\n 2. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "finally"], ["proof (chain)\npicking this:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n  (1::'b)", "show \"lookup (row_to_poly ?ts (row A i)) (?ts ! f i) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n  (1::'b)\n\ngoal (1 subgoal):\n 1. lookup (row_to_poly (pps_to_list S) (row A i))\n     (pps_to_list S ! f i) \\<noteq>\n    (0::'b)", "by simp"], ["proof (state)\nthis:\n  lookup (row_to_poly (pps_to_list S) (row A i))\n   (pps_to_list S ! f i) \\<noteq>\n  (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "assume a: \"lookup (row_to_poly ?ts (row A i)) u \\<noteq> 0\""], ["proof (state)\nthis:\n  lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "then"], ["proof (chain)\npicking this:\n  lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq> (0::'b)", "obtain j where j: \"j < length ?ts\" and u: \"u = ?ts ! j\""], ["proof (prove)\nusing this:\n  lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length (pps_to_list S); u = pps_to_list S ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lookup_row_to_poly_not_zeroE)"], ["proof (state)\nthis:\n  j < length (pps_to_list S)\n  u = pps_to_list S ! j\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "from j"], ["proof (chain)\npicking this:\n  j < length (pps_to_list S)", "have \"j < card S\" and \"j < dim_col A\""], ["proof (prove)\nusing this:\n  j < length (pps_to_list S)\n\ngoal (1 subgoal):\n 1. j < card S &&& j < dim_col A", "by (simp only: length_pps_to_list, simp only: len_ts)"], ["proof (state)\nthis:\n  j < card S\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "from a"], ["proof (chain)\npicking this:\n  lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq> (0::'b)", "have \"0 \\<noteq> lookup (row_to_poly ?ts (row A i)) (?ts ! j)\""], ["proof (prove)\nusing this:\n  lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. (0::'b) \\<noteq>\n    lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! j)", "by (simp add: u)"], ["proof (state)\nthis:\n  (0::'b) \\<noteq>\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! j)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "also"], ["proof (state)\nthis:\n  (0::'b) \\<noteq>\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! j)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "have \"lookup (row_to_poly ?ts (row A i)) (?ts ! j) = (row A i) $ j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! j) =\n    row A i $ j", "by (rule lookup_row_to_poly, fact distinct_pps_to_list, simp add: len_ts, fact)"], ["proof (state)\nthis:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! j) =\n  row A i $ j\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "finally"], ["proof (chain)\npicking this:\n  (0::'b) \\<noteq> row A i $ j", "have \"A $$ (i, j) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (0::'b) \\<noteq> row A i $ j\n\ngoal (1 subgoal):\n 1. A $$ (i, j) \\<noteq> (0::'b)", "using assms(3) \\<open>j < dim_col A\\<close>"], ["proof (prove)\nusing this:\n  (0::'b) \\<noteq> row A i $ j\n  i < dim_row A\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. A $$ (i, j) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  A $$ (i, j) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       lookup (row_to_poly (pps_to_list S) (row A i)) u \\<noteq>\n       (0::'b) \\<Longrightarrow>\n       u \\<preceq>\\<^sub>t pps_to_list S ! f i", "from _ \\<open>j < card S\\<close>"], ["proof (chain)\npicking this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  j < card S", "show \"u \\<preceq>\\<^sub>t ?ts ! f i\""], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  j < card S\n\ngoal (1 subgoal):\n 1. u \\<preceq>\\<^sub>t pps_to_list S ! f i", "unfolding u"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  j < card S\n\ngoal (1 subgoal):\n 1. pps_to_list S ! j \\<preceq>\\<^sub>t pps_to_list S ! f i", "proof (rule pps_to_list_nth_leI)"], ["proof (state)\ngoal (1 subgoal):\n 1. f i \\<le> j", "show \"f i \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f i \\<le> j", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f i \\<le> j \\<Longrightarrow> False", "assume \"\\<not> f i \\<le> j\""], ["proof (state)\nthis:\n  \\<not> f i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<not> f i \\<le> j \\<Longrightarrow> False", "hence \"j < f i\""], ["proof (prove)\nusing this:\n  \\<not> f i \\<le> j\n\ngoal (1 subgoal):\n 1. j < f i", "by simp"], ["proof (state)\nthis:\n  j < f i\n\ngoal (1 subgoal):\n 1. \\<not> f i \\<le> j \\<Longrightarrow> False", "have \"A $$ (i, j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (i, j) = (0::'b)", "by (rule pivot_funD, rule refl, fact+)"], ["proof (state)\nthis:\n  A $$ (i, j) = (0::'b)\n\ngoal (1 subgoal):\n 1. \\<not> f i \\<le> j \\<Longrightarrow> False", "with \\<open>A $$ (i, j) \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  A $$ (i, j) \\<noteq> (0::'b)\n  A $$ (i, j) = (0::'b)", "show False"], ["proof (prove)\nusing this:\n  A $$ (i, j) \\<noteq> (0::'b)\n  A $$ (i, j) = (0::'b)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f i \\<le> j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<preceq>\\<^sub>t pps_to_list S ! f i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (mat_to_polys (pps_to_list S) A ! i) = pps_to_list S ! f i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lc_row_to_poly_pivot_fun:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i < dim_row A\" and \"f i < dim_col A\"\n  shows \"lc ((mat_to_polys (pps_to_list S) A) ! i) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)", "let ?ts = \"pps_to_list S\""], ["proof (state)\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)", "have len_ts: \"length ?ts = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (pps_to_list S) = dim_col A", "by (simp only: length_pps_to_list assms(1))"], ["proof (state)\nthis:\n  length (pps_to_list S) = dim_col A\n\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)", "have \"lookup (row_to_poly ?ts (row A i)) (?ts ! f i) = (row A i) $ (f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n    row A i $ f i", "by (rule lookup_row_to_poly, fact distinct_pps_to_list, simp_all add: len_ts assms(4))"], ["proof (state)\nthis:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n  row A i $ f i\n\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)", "also"], ["proof (state)\nthis:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n  row A i $ f i\n\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)", "have \"... = A $$ (i, f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row A i $ f i = A $$ (i, f i)", "using assms(3) assms(4)"], ["proof (prove)\nusing this:\n  i < dim_row A\n  f i < dim_col A\n\ngoal (1 subgoal):\n 1. row A i $ f i = A $$ (i, f i)", "by simp"], ["proof (state)\nthis:\n  row A i $ f i = A $$ (i, f i)\n\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)", "finally"], ["proof (chain)\npicking this:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n  A $$ (i, f i)", "have eq: \"lookup (row_to_poly ?ts (row A i)) (?ts ! f i) = A $$ (i, f i)\""], ["proof (prove)\nusing this:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n  A $$ (i, f i)\n\ngoal (1 subgoal):\n 1. lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n    A $$ (i, f i)", "."], ["proof (state)\nthis:\n  lookup (row_to_poly (pps_to_list S) (row A i)) (pps_to_list S ! f i) =\n  A $$ (i, f i)\n\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)", "by (simp only: lc_def lt_row_to_poly_pivot_fun[OF assms], simp only: mat_to_polys_nth[OF assms(3)] eq,\n        rule pivot_funD, rule refl, fact+)"], ["proof (state)\nthis:\n  lc (mat_to_polys (pps_to_list S) A ! i) = (1::'b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_row_to_poly_pivot_fun_less:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i1 < i2\" and \"i2 < dim_row A\" and \"f i1 < dim_col A\" and \"f i2 < dim_col A\"\n  shows \"(pps_to_list S) ! (f i2) \\<prec>\\<^sub>t (pps_to_list S) ! (f i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1", "let ?ts = \"pps_to_list S\""], ["proof (state)\ngoal (1 subgoal):\n 1. pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1", "have len_ts: \"length ?ts = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (pps_to_list S) = dim_col A", "by (simp add: length_pps_to_list assms(1))"], ["proof (state)\nthis:\n  length (pps_to_list S) = dim_col A\n\ngoal (1 subgoal):\n 1. pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1", "from assms(3) assms(4)"], ["proof (chain)\npicking this:\n  i1 < i2\n  i2 < dim_row A", "have \"i1 < dim_row A\""], ["proof (prove)\nusing this:\n  i1 < i2\n  i2 < dim_row A\n\ngoal (1 subgoal):\n 1. i1 < dim_row A", "by simp"], ["proof (state)\nthis:\n  i1 < dim_row A\n\ngoal (1 subgoal):\n 1. pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1", "by (rule pps_to_list_nth_lessI, rule pivot_fun_mono_strict[where ?f=f], fact, fact, fact, fact,\n        simp only: assms(1) assms(6))"], ["proof (state)\nthis:\n  pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_row_to_poly_pivot_fun_eqD:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i1 < dim_row A\" and \"i2 < dim_row A\" and \"f i1 < dim_col A\" and \"f i2 < dim_col A\"\n    and \"(pps_to_list S) ! (f i1) = (pps_to_list S) ! (f i2)\"\n  shows \"i1 = i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 = i2", "proof (rule linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?x < ?y \\<Longrightarrow> i1 = i2\n 2. ?x = ?y \\<Longrightarrow> i1 = i2\n 3. ?y < ?x \\<Longrightarrow> i1 = i2", "assume \"i1 < i2\""], ["proof (state)\nthis:\n  i1 < i2\n\ngoal (3 subgoals):\n 1. ?x < ?y \\<Longrightarrow> i1 = i2\n 2. ?x = ?y \\<Longrightarrow> i1 = i2\n 3. ?y < ?x \\<Longrightarrow> i1 = i2", "from assms(1) assms(2) this assms(4) assms(5) assms(6)"], ["proof (chain)\npicking this:\n  card S = dim_col A\n  pivot_fun A f (dim_col A)\n  i1 < i2\n  i2 < dim_row A\n  f i1 < dim_col A\n  f i2 < dim_col A", "have\n    \"(pps_to_list S) ! (f i2) \\<prec>\\<^sub>t (pps_to_list S) ! (f i1)\""], ["proof (prove)\nusing this:\n  card S = dim_col A\n  pivot_fun A f (dim_col A)\n  i1 < i2\n  i2 < dim_row A\n  f i1 < dim_col A\n  f i2 < dim_col A\n\ngoal (1 subgoal):\n 1. pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1", "by (rule lt_row_to_poly_pivot_fun_less)"], ["proof (state)\nthis:\n  pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1\n\ngoal (3 subgoals):\n 1. ?x < ?y \\<Longrightarrow> i1 = i2\n 2. ?x = ?y \\<Longrightarrow> i1 = i2\n 3. ?y < ?x \\<Longrightarrow> i1 = i2", "with assms(7)"], ["proof (chain)\npicking this:\n  pps_to_list S ! f i1 = pps_to_list S ! f i2\n  pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1", "show ?thesis"], ["proof (prove)\nusing this:\n  pps_to_list S ! f i1 = pps_to_list S ! f i2\n  pps_to_list S ! f i2 \\<prec>\\<^sub>t pps_to_list S ! f i1\n\ngoal (1 subgoal):\n 1. i1 = i2", "by auto"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal (2 subgoals):\n 1. i1 = i2 \\<Longrightarrow> i1 = i2\n 2. i2 < i1 \\<Longrightarrow> i1 = i2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. i1 = i2 \\<Longrightarrow> i1 = i2\n 2. i2 < i1 \\<Longrightarrow> i1 = i2", "assume \"i2 < i1\""], ["proof (state)\nthis:\n  i2 < i1\n\ngoal (2 subgoals):\n 1. i1 = i2 \\<Longrightarrow> i1 = i2\n 2. i2 < i1 \\<Longrightarrow> i1 = i2", "from assms(1) assms(2) this assms(3) assms(6) assms(5)"], ["proof (chain)\npicking this:\n  card S = dim_col A\n  pivot_fun A f (dim_col A)\n  i2 < i1\n  i1 < dim_row A\n  f i2 < dim_col A\n  f i1 < dim_col A", "have\n    \"(pps_to_list S) ! (f i1) \\<prec>\\<^sub>t (pps_to_list S) ! (f i2)\""], ["proof (prove)\nusing this:\n  card S = dim_col A\n  pivot_fun A f (dim_col A)\n  i2 < i1\n  i1 < dim_row A\n  f i2 < dim_col A\n  f i1 < dim_col A\n\ngoal (1 subgoal):\n 1. pps_to_list S ! f i1 \\<prec>\\<^sub>t pps_to_list S ! f i2", "by (rule lt_row_to_poly_pivot_fun_less)"], ["proof (state)\nthis:\n  pps_to_list S ! f i1 \\<prec>\\<^sub>t pps_to_list S ! f i2\n\ngoal (2 subgoals):\n 1. i1 = i2 \\<Longrightarrow> i1 = i2\n 2. i2 < i1 \\<Longrightarrow> i1 = i2", "with assms(7)"], ["proof (chain)\npicking this:\n  pps_to_list S ! f i1 = pps_to_list S ! f i2\n  pps_to_list S ! f i1 \\<prec>\\<^sub>t pps_to_list S ! f i2", "show ?thesis"], ["proof (prove)\nusing this:\n  pps_to_list S ! f i1 = pps_to_list S ! f i2\n  pps_to_list S ! f i1 \\<prec>\\<^sub>t pps_to_list S ! f i2\n\ngoal (1 subgoal):\n 1. i1 = i2", "by auto"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal (1 subgoal):\n 1. i1 = i2 \\<Longrightarrow> i1 = i2", "qed"], ["", "lemma lt_row_to_poly_pivot_in_keysD:\n  assumes \"card S = dim_col (A::'b::semiring_1 mat)\" and \"pivot_fun A f (dim_col A)\"\n    and \"i1 < dim_row A\" and \"i2 < dim_row A\" and \"f i1 < dim_col A\"\n    and \"(pps_to_list S) ! (f i1) \\<in> keys ((mat_to_polys (pps_to_list S) A) ! i2)\"\n  shows \"i1 = i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 = i2", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "assume \"i1 \\<noteq> i2\""], ["proof (state)\nthis:\n  i1 \\<noteq> i2\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "hence \"i2 \\<noteq> i1\""], ["proof (prove)\nusing this:\n  i1 \\<noteq> i2\n\ngoal (1 subgoal):\n 1. i2 \\<noteq> i1", "by simp"], ["proof (state)\nthis:\n  i2 \\<noteq> i1\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "let ?ts = \"pps_to_list S\""], ["proof (state)\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "have len_ts: \"length ?ts = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (pps_to_list S) = dim_col A", "by (simp only: length_pps_to_list assms(1))"], ["proof (state)\nthis:\n  length (pps_to_list S) = dim_col A\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "from assms(6)"], ["proof (chain)\npicking this:\n  pps_to_list S ! f i1 \\<in> keys (mat_to_polys (pps_to_list S) A ! i2)", "have \"0 \\<noteq> lookup (row_to_poly ?ts (row A i2)) (?ts ! (f i1))\""], ["proof (prove)\nusing this:\n  pps_to_list S ! f i1 \\<in> keys (mat_to_polys (pps_to_list S) A ! i2)\n\ngoal (1 subgoal):\n 1. (0::'b) \\<noteq>\n    lookup (row_to_poly (pps_to_list S) (row A i2)) (pps_to_list S ! f i1)", "by (auto simp: mat_to_polys_nth[OF assms(4)])"], ["proof (state)\nthis:\n  (0::'b) \\<noteq>\n  lookup (row_to_poly (pps_to_list S) (row A i2)) (pps_to_list S ! f i1)\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (0::'b) \\<noteq>\n  lookup (row_to_poly (pps_to_list S) (row A i2)) (pps_to_list S ! f i1)\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "have \"lookup (row_to_poly ?ts (row A i2)) (?ts ! (f i1)) = (row A i2) $ (f i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (row_to_poly (pps_to_list S) (row A i2)) (pps_to_list S ! f i1) =\n    row A i2 $ f i1", "by (rule lookup_row_to_poly, fact distinct_pps_to_list, simp_all add: len_ts assms(5))"], ["proof (state)\nthis:\n  lookup (row_to_poly (pps_to_list S) (row A i2)) (pps_to_list S ! f i1) =\n  row A i2 $ f i1\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (0::'b) \\<noteq> row A i2 $ f i1", "have \"A $$ (i2, f i1) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (0::'b) \\<noteq> row A i2 $ f i1\n\ngoal (1 subgoal):\n 1. A $$ (i2, f i1) \\<noteq> (0::'b)", "using assms(4) assms(5)"], ["proof (prove)\nusing this:\n  (0::'b) \\<noteq> row A i2 $ f i1\n  i2 < dim_row A\n  f i1 < dim_col A\n\ngoal (1 subgoal):\n 1. A $$ (i2, f i1) \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  A $$ (i2, f i1) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  A $$ (i2, f i1) \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "have \"A $$ (i2, f i1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (i2, f i1) = (0::'b)", "by (rule pivot_funD(5), rule refl, fact+)"], ["proof (state)\nthis:\n  A $$ (i2, f i1) = (0::'b)\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  A $$ (i2, f i1) \\<noteq> (0::'b)\n  A $$ (i2, f i1) = (0::'b)", "show False"], ["proof (prove)\nusing this:\n  A $$ (i2, f i1) \\<noteq> (0::'b)\n  A $$ (i2, f i1) = (0::'b)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lt_row_space_pivot_fun:\n  assumes \"card S = dim_col (A::'b::{comm_semiring_0,semiring_1_no_zero_divisors} mat)\"\n    and \"pivot_fun A f (dim_col A)\" and \"p \\<in> row_to_poly (pps_to_list S) ` row_space A\" and \"p \\<noteq> 0\"\n  shows \"lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "let ?ts = \"pps_to_list S\""], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "let ?I = \"{0..<dim_row A}\""], ["proof (state)\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "have len_ts: \"length ?ts = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (pps_to_list S) = dim_col A", "by (simp add: length_pps_to_list assms(1))"], ["proof (state)\nthis:\n  length (pps_to_list S) = dim_col A\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "from assms(3)"], ["proof (chain)\npicking this:\n  p \\<in> row_to_poly (pps_to_list S) ` row_space A", "obtain x where \"x \\<in> row_space A\" and p: \"p = row_to_poly ?ts x\""], ["proof (prove)\nusing this:\n  p \\<in> row_to_poly (pps_to_list S) ` row_space A\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> row_space A;\n         p = row_to_poly (pps_to_list S) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  x \\<in> row_space A\n  p = row_to_poly (pps_to_list S) x\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "from this(1)"], ["proof (chain)\npicking this:\n  x \\<in> row_space A", "obtain v where \"v \\<in> carrier_vec (dim_row A)\" and x: \"x = v \\<^sub>v* A\""], ["proof (prove)\nusing this:\n  x \\<in> row_space A\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> carrier_vec (dim_row A); x = v \\<^sub>v* A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule row_spaceE)"], ["proof (state)\nthis:\n  v \\<in> carrier_vec (dim_row A)\n  x = v \\<^sub>v* A\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "have p': \"p = (\\<Sum>i\\<in>?I. (v $ i) \\<cdot> (row_to_poly ?ts (row A i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p =\n    (\\<Sum>i = 0..<dim_row A.\n        v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))", "unfolding p x"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_to_poly (pps_to_list S) (v \\<^sub>v* A) =\n    (\\<Sum>i = 0..<dim_row A.\n        v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))", "by (rule row_to_poly_vec_times, fact distinct_pps_to_list, fact len_ts)"], ["proof (state)\nthis:\n  p =\n  (\\<Sum>i = 0..<dim_row A.\n      v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "have \"lt (\\<Sum>i = 0..<dim_row A. (v $ i) \\<cdot> (row_to_poly ?ts (row A i)))\n          \\<in> lt_set ((\\<lambda>i. (v $ i) \\<cdot> (row_to_poly ?ts (row A i))) ` {0..<dim_row A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (\\<Sum>i = 0..<dim_row A.\n           v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n    \\<in> lt_set\n           ((\\<lambda>i.\n                v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n            {0..<dim_row A})", "proof (rule lt_sum_distinct_in_lt_set, rule, simp add: p'[symmetric] \\<open>p \\<noteq> 0\\<close>)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "fix i1 i2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "let ?p1 = \"(v $ i1) \\<cdot> (row_to_poly ?ts (row A i1))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "let ?p2 = \"(v $ i2) \\<cdot> (row_to_poly ?ts (row A i2))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "assume \"i1 \\<in> ?I\" and \"i2 \\<in> ?I\""], ["proof (state)\nthis:\n  i1 \\<in> {0..<dim_row A}\n  i2 \\<in> {0..<dim_row A}\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "hence \"i1 < dim_row A\" and \"i2 < dim_row A\""], ["proof (prove)\nusing this:\n  i1 \\<in> {0..<dim_row A}\n  i2 \\<in> {0..<dim_row A}\n\ngoal (1 subgoal):\n 1. i1 < dim_row A &&& i2 < dim_row A", "by simp_all"], ["proof (state)\nthis:\n  i1 < dim_row A\n  i2 < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "assume \"?p1 \\<noteq> 0\""], ["proof (state)\nthis:\n  v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "hence \"v $ i1 \\<noteq> 0\" and \"row_to_poly ?ts (row A i1) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. v $ i1 \\<noteq> (0::'b) &&&\n    row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  v $ i1 \\<noteq> (0::'b)\n  row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "hence \"row A i1 \\<noteq> 0\\<^sub>v (length ?ts)\""], ["proof (prove)\nusing this:\n  v $ i1 \\<noteq> (0::'b)\n  row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. row A i1 \\<noteq> 0\\<^sub>v (length (pps_to_list S))", "by auto"], ["proof (state)\nthis:\n  row A i1 \\<noteq> 0\\<^sub>v (length (pps_to_list S))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "hence \"f i1 < dim_col A\""], ["proof (prove)\nusing this:\n  row A i1 \\<noteq> 0\\<^sub>v (length (pps_to_list S))\n\ngoal (1 subgoal):\n 1. f i1 < dim_col A", "by (simp add: len_ts row_not_zero_iff_pivot_fun[OF assms(2) \\<open>i1 < dim_row A\\<close>])"], ["proof (state)\nthis:\n  f i1 < dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "have \"lt ?p1 = lt (row_to_poly ?ts (row A i1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n    lt (row_to_poly (pps_to_list S) (row A i1))", "by (rule lt_map_scale, fact)"], ["proof (state)\nthis:\n  lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n  lt (row_to_poly (pps_to_list S) (row A i1))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "also"], ["proof (state)\nthis:\n  lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n  lt (row_to_poly (pps_to_list S) (row A i1))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "have \"... = lt ((mat_to_polys ?ts A) ! i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (row_to_poly (pps_to_list S) (row A i1)) =\n    lt (mat_to_polys (pps_to_list S) A ! i1)", "by (simp only: mat_to_polys_nth[OF \\<open>i1 < dim_row A\\<close>])"], ["proof (state)\nthis:\n  lt (row_to_poly (pps_to_list S) (row A i1)) =\n  lt (mat_to_polys (pps_to_list S) A ! i1)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "also"], ["proof (state)\nthis:\n  lt (row_to_poly (pps_to_list S) (row A i1)) =\n  lt (mat_to_polys (pps_to_list S) A ! i1)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "have \"... = ?ts ! (f i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (mat_to_polys (pps_to_list S) A ! i1) = pps_to_list S ! f i1", "by (rule lt_row_to_poly_pivot_fun, fact+)"], ["proof (state)\nthis:\n  lt (mat_to_polys (pps_to_list S) A ! i1) = pps_to_list S ! f i1\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "finally"], ["proof (chain)\npicking this:\n  lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n  pps_to_list S ! f i1", "have lt1: \"lt ?p1 = ?ts ! (f i1)\""], ["proof (prove)\nusing this:\n  lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n  pps_to_list S ! f i1\n\ngoal (1 subgoal):\n 1. lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n    pps_to_list S ! f i1", "."], ["proof (state)\nthis:\n  lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n  pps_to_list S ! f i1\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "assume \"?p2 \\<noteq> 0\""], ["proof (state)\nthis:\n  v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "hence \"v $ i2 \\<noteq> 0\" and \"row_to_poly ?ts (row A i2) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. v $ i2 \\<noteq> (0::'b) &&&\n    row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  v $ i2 \\<noteq> (0::'b)\n  row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "hence \"row A i2 \\<noteq> 0\\<^sub>v (length ?ts)\""], ["proof (prove)\nusing this:\n  v $ i2 \\<noteq> (0::'b)\n  row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. row A i2 \\<noteq> 0\\<^sub>v (length (pps_to_list S))", "by auto"], ["proof (state)\nthis:\n  row A i2 \\<noteq> 0\\<^sub>v (length (pps_to_list S))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "hence \"f i2 < dim_col A\""], ["proof (prove)\nusing this:\n  row A i2 \\<noteq> 0\\<^sub>v (length (pps_to_list S))\n\ngoal (1 subgoal):\n 1. f i2 < dim_col A", "by (simp add: len_ts row_not_zero_iff_pivot_fun[OF assms(2) \\<open>i2 < dim_row A\\<close>])"], ["proof (state)\nthis:\n  f i2 < dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "have \"lt ?p2 = lt (row_to_poly ?ts (row A i2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2)) =\n    lt (row_to_poly (pps_to_list S) (row A i2))", "by (rule lt_map_scale, fact)"], ["proof (state)\nthis:\n  lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2)) =\n  lt (row_to_poly (pps_to_list S) (row A i2))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "also"], ["proof (state)\nthis:\n  lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2)) =\n  lt (row_to_poly (pps_to_list S) (row A i2))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "have \"... = lt ((mat_to_polys ?ts A) ! i2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (row_to_poly (pps_to_list S) (row A i2)) =\n    lt (mat_to_polys (pps_to_list S) A ! i2)", "by (simp only: mat_to_polys_nth[OF \\<open>i2 < dim_row A\\<close>])"], ["proof (state)\nthis:\n  lt (row_to_poly (pps_to_list S) (row A i2)) =\n  lt (mat_to_polys (pps_to_list S) A ! i2)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "also"], ["proof (state)\nthis:\n  lt (row_to_poly (pps_to_list S) (row A i2)) =\n  lt (mat_to_polys (pps_to_list S) A ! i2)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "have \"... = ?ts ! (f i2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (mat_to_polys (pps_to_list S) A ! i2) = pps_to_list S ! f i2", "by (rule lt_row_to_poly_pivot_fun, fact+)"], ["proof (state)\nthis:\n  lt (mat_to_polys (pps_to_list S) A ! i2) = pps_to_list S ! f i2\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "finally"], ["proof (chain)\npicking this:\n  lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2)) =\n  pps_to_list S ! f i2", "have lt2: \"lt ?p2 = ?ts ! (f i2)\""], ["proof (prove)\nusing this:\n  lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2)) =\n  pps_to_list S ! f i2\n\ngoal (1 subgoal):\n 1. lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2)) =\n    pps_to_list S ! f i2", "."], ["proof (state)\nthis:\n  lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2)) =\n  pps_to_list S ! f i2\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "assume \"lt ?p1 = lt ?p2\""], ["proof (state)\nthis:\n  lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n  lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> {0..<dim_row A}; i2 \\<in> {0..<dim_row A};\n        v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1) \\<noteq> 0;\n        v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2) \\<noteq> 0;\n        lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n        lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\\<rbrakk>\n       \\<Longrightarrow> i1 = i2", "with assms(1) assms(2) \\<open>i1 < dim_row A\\<close> \\<open>i2 < dim_row A\\<close> \\<open>f i1 < dim_col A\\<close> \\<open>f i2 < dim_col A\\<close>"], ["proof (chain)\npicking this:\n  card S = dim_col A\n  pivot_fun A f (dim_col A)\n  i1 < dim_row A\n  i2 < dim_row A\n  f i1 < dim_col A\n  f i2 < dim_col A\n  lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n  lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))", "show \"i1 = i2\""], ["proof (prove)\nusing this:\n  card S = dim_col A\n  pivot_fun A f (dim_col A)\n  i1 < dim_row A\n  i2 < dim_row A\n  f i1 < dim_col A\n  f i2 < dim_col A\n  lt (v $ i1 \\<cdot> row_to_poly (pps_to_list S) (row A i1)) =\n  lt (v $ i2 \\<cdot> row_to_poly (pps_to_list S) (row A i2))\n\ngoal (1 subgoal):\n 1. i1 = i2", "unfolding lt1 lt2"], ["proof (prove)\nusing this:\n  card S = dim_col A\n  pivot_fun A f (dim_col A)\n  i1 < dim_row A\n  i2 < dim_row A\n  f i1 < dim_col A\n  f i2 < dim_col A\n  pps_to_list S ! f i1 = pps_to_list S ! f i2\n\ngoal (1 subgoal):\n 1. i1 = i2", "by (rule lt_row_to_poly_pivot_fun_eqD)"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt (\\<Sum>i = 0..<dim_row A.\n         v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n  \\<in> lt_set\n         ((\\<lambda>i.\n              v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n          {0..<dim_row A})\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "also"], ["proof (state)\nthis:\n  lt (\\<Sum>i = 0..<dim_row A.\n         v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n  \\<in> lt_set\n         ((\\<lambda>i.\n              v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n          {0..<dim_row A})\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "have \"... \\<subseteq> lt_set ((\\<lambda>i. row_to_poly ?ts (row A i)) ` {0..<dim_row A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt_set\n     ((\\<lambda>i. v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n      {0..<dim_row A})\n    \\<subseteq> lt_set\n                 ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                  {0..<dim_row A})", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "assume \"s \\<in> lt_set ((\\<lambda>i. (v $ i) \\<cdot> (row_to_poly ?ts (row A i))) ` {0..<dim_row A})\""], ["proof (state)\nthis:\n  s \\<in> lt_set\n           ((\\<lambda>i.\n                v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n            {0..<dim_row A})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "then"], ["proof (chain)\npicking this:\n  s \\<in> lt_set\n           ((\\<lambda>i.\n                v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n            {0..<dim_row A})", "obtain f\n      where \"f \\<in> (\\<lambda>i. (v $ i) \\<cdot> (row_to_poly ?ts (row A i))) ` {0..<dim_row A}\"\n        and \"f \\<noteq> 0\" and \"lt f = s\""], ["proof (prove)\nusing this:\n  s \\<in> lt_set\n           ((\\<lambda>i.\n                v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n            {0..<dim_row A})\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in> (\\<lambda>i.\n                             v $ i \\<cdot>\n                             row_to_poly (pps_to_list S) (row A i)) `\n                         {0..<dim_row A};\n         f \\<noteq> 0; lt f = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lt_setE)"], ["proof (state)\nthis:\n  f \\<in> (\\<lambda>i.\n              v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n          {0..<dim_row A}\n  f \\<noteq> 0\n  lt f = s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "from this(1)"], ["proof (chain)\npicking this:\n  f \\<in> (\\<lambda>i.\n              v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n          {0..<dim_row A}", "obtain i where \"i \\<in> {0..<dim_row A}\"\n      and f: \"f = (v $ i) \\<cdot> (row_to_poly ?ts (row A i))\""], ["proof (prove)\nusing this:\n  f \\<in> (\\<lambda>i.\n              v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n          {0..<dim_row A}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<in> {0..<dim_row A};\n         f = v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  i \\<in> {0..<dim_row A}\n  f = v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "from this(2) \\<open>f \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  f = v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)\n  f \\<noteq> 0", "have \"v $ i \\<noteq> 0\" and **: \"row_to_poly ?ts (row A i) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f = v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. v $ i \\<noteq> (0::'b) &&&\n    row_to_poly (pps_to_list S) (row A i) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  v $ i \\<noteq> (0::'b)\n  row_to_poly (pps_to_list S) (row A i) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "from \\<open>lt f = s\\<close>"], ["proof (chain)\npicking this:\n  lt f = s", "have \"s = lt ((v $ i) \\<cdot> (row_to_poly ?ts (row A i)))\""], ["proof (prove)\nusing this:\n  lt f = s\n\ngoal (1 subgoal):\n 1. s = lt (v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))", "by (simp only: f)"], ["proof (state)\nthis:\n  s = lt (v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "also"], ["proof (state)\nthis:\n  s = lt (v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "from \\<open>v $ i \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  v $ i \\<noteq> (0::'b)", "have \"... = lt (row_to_poly ?ts (row A i))\""], ["proof (prove)\nusing this:\n  v $ i \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. lt (v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) =\n    lt (row_to_poly (pps_to_list S) (row A i))", "by (rule lt_map_scale)"], ["proof (state)\nthis:\n  lt (v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) =\n  lt (row_to_poly (pps_to_list S) (row A i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "finally"], ["proof (chain)\npicking this:\n  s = lt (row_to_poly (pps_to_list S) (row A i))", "have s: \"s = lt (row_to_poly ?ts (row A i))\""], ["proof (prove)\nusing this:\n  s = lt (row_to_poly (pps_to_list S) (row A i))\n\ngoal (1 subgoal):\n 1. s = lt (row_to_poly (pps_to_list S) (row A i))", "."], ["proof (state)\nthis:\n  s = lt (row_to_poly (pps_to_list S) (row A i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> lt_set\n                ((\\<lambda>i.\n                     v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A}) \\<Longrightarrow>\n       x \\<in> lt_set\n                ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                 {0..<dim_row A})", "show \"s \\<in> lt_set ((\\<lambda>i. row_to_poly ?ts (row A i)) ` {0..<dim_row A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> lt_set\n             ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n              {0..<dim_row A})", "unfolding s"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt (row_to_poly (pps_to_list S) (row A i))\n    \\<in> lt_set\n           ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n            {0..<dim_row A})", "by (rule lt_setI, rule, rule refl, fact+)"], ["proof (state)\nthis:\n  s \\<in> lt_set\n           ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n            {0..<dim_row A})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt_set\n   ((\\<lambda>i. v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n    {0..<dim_row A})\n  \\<subseteq> lt_set\n               ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                {0..<dim_row A})\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "also"], ["proof (state)\nthis:\n  lt_set\n   ((\\<lambda>i. v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i)) `\n    {0..<dim_row A})\n  \\<subseteq> lt_set\n               ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n                {0..<dim_row A})\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "have \"... = lt_set ((\\<lambda>r. row_to_poly ?ts r) ` (row A ` {0..<dim_row A}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt_set\n     ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) `\n      {0..<dim_row A}) =\n    lt_set (row_to_poly (pps_to_list S) ` row A ` {0..<dim_row A})", "by (simp only: image_comp o_def)"], ["proof (state)\nthis:\n  lt_set\n   ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) ` {0..<dim_row A}) =\n  lt_set (row_to_poly (pps_to_list S) ` row A ` {0..<dim_row A})\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "also"], ["proof (state)\nthis:\n  lt_set\n   ((\\<lambda>i. row_to_poly (pps_to_list S) (row A i)) ` {0..<dim_row A}) =\n  lt_set (row_to_poly (pps_to_list S) ` row A ` {0..<dim_row A})\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "have \"... = lt_set (set (map (\\<lambda>r. row_to_poly ?ts r) (map (row A) [0..<dim_row A])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt_set (row_to_poly (pps_to_list S) ` row A ` {0..<dim_row A}) =\n    lt_set\n     (set (map (row_to_poly (pps_to_list S)) (map (row A) [0..<dim_row A])))", "by (metis image_set set_upt)"], ["proof (state)\nthis:\n  lt_set (row_to_poly (pps_to_list S) ` row A ` {0..<dim_row A}) =\n  lt_set\n   (set (map (row_to_poly (pps_to_list S)) (map (row A) [0..<dim_row A])))\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "also"], ["proof (state)\nthis:\n  lt_set (row_to_poly (pps_to_list S) ` row A ` {0..<dim_row A}) =\n  lt_set\n   (set (map (row_to_poly (pps_to_list S)) (map (row A) [0..<dim_row A])))\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "have \"... = lt_set (set (mat_to_polys ?ts A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt_set\n     (set (map (row_to_poly (pps_to_list S))\n            (map (row A) [0..<dim_row A]))) =\n    lt_set (set (mat_to_polys (pps_to_list S) A))", "by (simp only: mat_to_polys_def rows_def)"], ["proof (state)\nthis:\n  lt_set\n   (set (map (row_to_poly (pps_to_list S)) (map (row A) [0..<dim_row A]))) =\n  lt_set (set (mat_to_polys (pps_to_list S) A))\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "finally"], ["proof (chain)\npicking this:\n  lt (\\<Sum>i = 0..<dim_row A.\n         v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n  \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "show ?thesis"], ["proof (prove)\nusing this:\n  lt (\\<Sum>i = 0..<dim_row A.\n         v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n  \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))\n\ngoal (1 subgoal):\n 1. lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "unfolding p'"], ["proof (prove)\nusing this:\n  lt (\\<Sum>i = 0..<dim_row A.\n         v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n  \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))\n\ngoal (1 subgoal):\n 1. lt (\\<Sum>i = 0..<dim_row A.\n           v $ i \\<cdot> row_to_poly (pps_to_list S) (row A i))\n    \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))", "."], ["proof (state)\nthis:\n  lt p \\<in> lt_set (set (mat_to_polys (pps_to_list S) A))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Functions \\<open>Macaulay_mat\\<close> and \\<open>Macaulay_list\\<close>\\<close>"], ["", "definition Macaulay_mat :: \"('t \\<Rightarrow>\\<^sub>0 'b) list \\<Rightarrow> 'b::field mat\"\n  where \"Macaulay_mat ps = polys_to_mat (Keys_to_list ps) ps\""], ["", "definition Macaulay_list :: \"('t \\<Rightarrow>\\<^sub>0 'b) list \\<Rightarrow> ('t \\<Rightarrow>\\<^sub>0 'b::field) list\"\n  where \"Macaulay_list ps =\n               filter (\\<lambda>p. p \\<noteq> 0) (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)))\""], ["", "lemma dim_Macaulay_mat[simp]:\n  \"dim_row (Macaulay_mat ps) = length ps\"\n  \"dim_col (Macaulay_mat ps) = card (Keys (set ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (Macaulay_mat ps) = length ps &&&\n    dim_col (Macaulay_mat ps) = card (Keys (set ps))", "by (simp_all add: Macaulay_mat_def length_Keys_to_list)"], ["", "lemma Macaulay_list_Nil [simp]: \"Macaulay_list [] = ([]::('t \\<Rightarrow>\\<^sub>0 'b::field) list)\" (is \"?l = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Macaulay_list [] = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Macaulay_list [] = []", "have \"length ?l \\<le> length (mat_to_polys (Keys_to_list ([]::('t \\<Rightarrow>\\<^sub>0 'b) list))\n                    (row_echelon (Macaulay_mat ([]::('t \\<Rightarrow>\\<^sub>0 'b) list))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (Macaulay_list [])\n    \\<le> length\n           (mat_to_polys (Keys_to_list []) (row_echelon (Macaulay_mat [])))", "unfolding Macaulay_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (filter (\\<lambda>p. p \\<noteq> 0)\n       (mat_to_polys (Keys_to_list []) (row_echelon (Macaulay_mat []))))\n    \\<le> length\n           (mat_to_polys (Keys_to_list []) (row_echelon (Macaulay_mat [])))", "by (fact length_filter_le)"], ["proof (state)\nthis:\n  length (Macaulay_list [])\n  \\<le> length\n         (mat_to_polys (Keys_to_list []) (row_echelon (Macaulay_mat [])))\n\ngoal (1 subgoal):\n 1. Macaulay_list [] = []", "also"], ["proof (state)\nthis:\n  length (Macaulay_list [])\n  \\<le> length\n         (mat_to_polys (Keys_to_list []) (row_echelon (Macaulay_mat [])))\n\ngoal (1 subgoal):\n 1. Macaulay_list [] = []", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (mat_to_polys (Keys_to_list []) (row_echelon (Macaulay_mat []))) =\n    0", "by simp"], ["proof (state)\nthis:\n  length (mat_to_polys (Keys_to_list []) (row_echelon (Macaulay_mat []))) =\n  0\n\ngoal (1 subgoal):\n 1. Macaulay_list [] = []", "finally"], ["proof (chain)\npicking this:\n  length (Macaulay_list []) \\<le> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  length (Macaulay_list []) \\<le> 0\n\ngoal (1 subgoal):\n 1. Macaulay_list [] = []", "by simp"], ["proof (state)\nthis:\n  Macaulay_list [] = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_Macaulay_list:\n  \"set (Macaulay_list ps) =\n      set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))) - {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Macaulay_list ps) =\n    set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))) -\n    {0}", "by (auto simp add: Macaulay_list_def)"], ["", "lemma Keys_Macaulay_list: \"Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)", "have \"Keys (set (Macaulay_list ps)) \\<subseteq> set (Keys_to_list ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_list ps)) \\<subseteq> set (Keys_to_list ps)", "by (simp only: set_Macaulay_list Keys_minus_zero, fact Keys_mat_to_polys)"], ["proof (state)\nthis:\n  Keys (set (Macaulay_list ps)) \\<subseteq> set (Keys_to_list ps)\n\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)", "also"], ["proof (state)\nthis:\n  Keys (set (Macaulay_list ps)) \\<subseteq> set (Keys_to_list ps)\n\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)", "have \"... = Keys (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (Keys_to_list ps) = Keys (set ps)", "by (fact set_Keys_to_list)"], ["proof (state)\nthis:\n  set (Keys_to_list ps) = Keys (set ps)\n\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)", "finally"], ["proof (chain)\npicking this:\n  Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)", "show ?thesis"], ["proof (prove)\nusing this:\n  Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)\n\ngoal (1 subgoal):\n 1. Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)", "."], ["proof (state)\nthis:\n  Keys (set (Macaulay_list ps)) \\<subseteq> Keys (set ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_Macaulay_listE:\n  assumes \"p \\<in> set (Macaulay_list ps)\"\n    and \"pivot_fun (row_echelon (Macaulay_mat ps)) f (dim_col (row_echelon (Macaulay_mat ps)))\"\n  obtains i where \"i < dim_row (row_echelon (Macaulay_mat ps))\"\n    and \"p = (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))) ! i\"\n    and \"f i < dim_col (row_echelon (Macaulay_mat ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         f i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         f i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?ts = \"Keys_to_list ps\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         f i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?A = \"Macaulay_mat ps\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         f i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?E = \"row_echelon ?A\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         f i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1)"], ["proof (chain)\npicking this:\n  p \\<in> set (Macaulay_list ps)", "have \"p \\<in> set (mat_to_polys ?ts ?E) - {0}\""], ["proof (prove)\nusing this:\n  p \\<in> set (Macaulay_list ps)\n\ngoal (1 subgoal):\n 1. p \\<in> set (mat_to_polys (Keys_to_list ps)\n                  (row_echelon (Macaulay_mat ps))) -\n            {0}", "by (simp add: set_Macaulay_list)"], ["proof (state)\nthis:\n  p \\<in> set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps))) -\n          {0}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         f i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"p \\<in> set (mat_to_polys ?ts ?E)\" and \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<in> set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps))) -\n          {0}\n\ngoal (1 subgoal):\n 1. p \\<in> set (mat_to_polys (Keys_to_list ps)\n                  (row_echelon (Macaulay_mat ps))) &&&\n    p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<in> set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps)))\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         f i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this(1)"], ["proof (chain)\npicking this:\n  p \\<in> set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps)))", "obtain i where \"i < length (mat_to_polys ?ts ?E)\" and p: \"p = (mat_to_polys ?ts ?E) ! i\""], ["proof (prove)\nusing this:\n  p \\<in> set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length\n                      (mat_to_polys (Keys_to_list ps)\n                        (row_echelon (Macaulay_mat ps)));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) !\n         i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  i < length\n       (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)))\n  p = mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         f i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this(1)"], ["proof (chain)\npicking this:\n  i < length\n       (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)))", "have \"i < dim_row ?E\" and \"i < dim_row ?A\""], ["proof (prove)\nusing this:\n  i < length\n       (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. i < dim_row (row_echelon (Macaulay_mat ps)) &&&\n    i < dim_row (Macaulay_mat ps)", "by simp_all"], ["proof (state)\nthis:\n  i < dim_row (row_echelon (Macaulay_mat ps))\n  i < dim_row (Macaulay_mat ps)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         f i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from this(1) p"], ["proof (chain)\npicking this:\n  i < dim_row (row_echelon (Macaulay_mat ps))\n  p = mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  i < dim_row (row_echelon (Macaulay_mat ps))\n  p = mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. f i < dim_col (row_echelon (Macaulay_mat ps))", "from \\<open>p \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have \"0 \\<noteq> (mat_to_polys ?ts ?E) ! i\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 \\<noteq>\n    mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i", "by (simp only: p)"], ["proof (state)\nthis:\n  0 \\<noteq>\n  mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i\n\ngoal (1 subgoal):\n 1. f i < dim_col (row_echelon (Macaulay_mat ps))", "also"], ["proof (state)\nthis:\n  0 \\<noteq>\n  mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i\n\ngoal (1 subgoal):\n 1. f i < dim_col (row_echelon (Macaulay_mat ps))", "have \"(mat_to_polys ?ts ?E) ! i = row_to_poly ?ts (row ?E i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i =\n    row_to_poly (Keys_to_list ps) (row (row_echelon (Macaulay_mat ps)) i)", "by (simp only: Macaulay_list_def mat_to_polys_nth[OF \\<open>i < dim_row ?E\\<close>])"], ["proof (state)\nthis:\n  mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i =\n  row_to_poly (Keys_to_list ps) (row (row_echelon (Macaulay_mat ps)) i)\n\ngoal (1 subgoal):\n 1. f i < dim_col (row_echelon (Macaulay_mat ps))", "finally"], ["proof (chain)\npicking this:\n  0 \\<noteq>\n  row_to_poly (Keys_to_list ps) (row (row_echelon (Macaulay_mat ps)) i)", "have *: \"row_to_poly ?ts (row ?E i) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 \\<noteq>\n  row_to_poly (Keys_to_list ps) (row (row_echelon (Macaulay_mat ps)) i)\n\ngoal (1 subgoal):\n 1. row_to_poly (Keys_to_list ps)\n     (row (row_echelon (Macaulay_mat ps)) i) \\<noteq>\n    0", "by simp"], ["proof (state)\nthis:\n  row_to_poly (Keys_to_list ps)\n   (row (row_echelon (Macaulay_mat ps)) i) \\<noteq>\n  0\n\ngoal (1 subgoal):\n 1. f i < dim_col (row_echelon (Macaulay_mat ps))", "have \"row ?E i \\<noteq> 0\\<^sub>v (length ?ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (row_echelon (Macaulay_mat ps)) i \\<noteq>\n    0\\<^sub>v (length (Keys_to_list ps))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. row (row_echelon (Macaulay_mat ps)) i =\n    0\\<^sub>v (length (Keys_to_list ps)) \\<Longrightarrow>\n    False", "assume \"row ?E i = 0\\<^sub>v (length ?ts)\""], ["proof (state)\nthis:\n  row (row_echelon (Macaulay_mat ps)) i =\n  0\\<^sub>v (length (Keys_to_list ps))\n\ngoal (1 subgoal):\n 1. row (row_echelon (Macaulay_mat ps)) i =\n    0\\<^sub>v (length (Keys_to_list ps)) \\<Longrightarrow>\n    False", "with *"], ["proof (chain)\npicking this:\n  row_to_poly (Keys_to_list ps)\n   (row (row_echelon (Macaulay_mat ps)) i) \\<noteq>\n  0\n  row (row_echelon (Macaulay_mat ps)) i =\n  0\\<^sub>v (length (Keys_to_list ps))", "show False"], ["proof (prove)\nusing this:\n  row_to_poly (Keys_to_list ps)\n   (row (row_echelon (Macaulay_mat ps)) i) \\<noteq>\n  0\n  row (row_echelon (Macaulay_mat ps)) i =\n  0\\<^sub>v (length (Keys_to_list ps))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row (row_echelon (Macaulay_mat ps)) i \\<noteq>\n  0\\<^sub>v (length (Keys_to_list ps))\n\ngoal (1 subgoal):\n 1. f i < dim_col (row_echelon (Macaulay_mat ps))", "hence \"row ?E i \\<noteq> 0\\<^sub>v (dim_col ?E)\""], ["proof (prove)\nusing this:\n  row (row_echelon (Macaulay_mat ps)) i \\<noteq>\n  0\\<^sub>v (length (Keys_to_list ps))\n\ngoal (1 subgoal):\n 1. row (row_echelon (Macaulay_mat ps)) i \\<noteq>\n    0\\<^sub>v (dim_col (row_echelon (Macaulay_mat ps)))", "by (simp add: length_Keys_to_list)"], ["proof (state)\nthis:\n  row (row_echelon (Macaulay_mat ps)) i \\<noteq>\n  0\\<^sub>v (dim_col (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. f i < dim_col (row_echelon (Macaulay_mat ps))", "thus \"f i < dim_col ?E\""], ["proof (prove)\nusing this:\n  row (row_echelon (Macaulay_mat ps)) i \\<noteq>\n  0\\<^sub>v (dim_col (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. f i < dim_col (row_echelon (Macaulay_mat ps))", "by (simp only: row_not_zero_iff_pivot_fun[OF assms(2) \\<open>i < dim_row ?E\\<close>])"], ["proof (state)\nthis:\n  f i < dim_col (row_echelon (Macaulay_mat ps))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma phull_Macaulay_list: \"phull (set (Macaulay_list ps)) = phull (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull (set (Macaulay_list ps)) = phull (set ps)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. phull (set (Macaulay_list ps)) = phull (set ps)", "have *: \"Keys (set ps) \\<subseteq> set (Keys_to_list ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set ps) \\<subseteq> set (Keys_to_list ps)", "by (simp add: set_Keys_to_list)"], ["proof (state)\nthis:\n  Keys (set ps) \\<subseteq> set (Keys_to_list ps)\n\ngoal (1 subgoal):\n 1. phull (set (Macaulay_list ps)) = phull (set ps)", "have \"phull (set (Macaulay_list ps)) =\n          phull (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull (set (Macaulay_list ps)) =\n    phull\n     (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))))", "by (simp only: set_Macaulay_list phull.span_Diff_zero)"], ["proof (state)\nthis:\n  phull (set (Macaulay_list ps)) =\n  phull\n   (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))))\n\ngoal (1 subgoal):\n 1. phull (set (Macaulay_list ps)) = phull (set ps)", "also"], ["proof (state)\nthis:\n  phull (set (Macaulay_list ps)) =\n  phull\n   (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))))\n\ngoal (1 subgoal):\n 1. phull (set (Macaulay_list ps)) = phull (set ps)", "have \"... = phull (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. phull\n     (set (mat_to_polys (Keys_to_list ps)\n            (row_echelon (Macaulay_mat ps)))) =\n    phull (set ps)", "by (simp only: Macaulay_mat_def phull_row_echelon[OF * distinct_Keys_to_list])"], ["proof (state)\nthis:\n  phull\n   (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)))) =\n  phull (set ps)\n\ngoal (1 subgoal):\n 1. phull (set (Macaulay_list ps)) = phull (set ps)", "finally"], ["proof (chain)\npicking this:\n  phull (set (Macaulay_list ps)) = phull (set ps)", "show ?thesis"], ["proof (prove)\nusing this:\n  phull (set (Macaulay_list ps)) = phull (set ps)\n\ngoal (1 subgoal):\n 1. phull (set (Macaulay_list ps)) = phull (set ps)", "."], ["proof (state)\nthis:\n  phull (set (Macaulay_list ps)) = phull (set ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pmdl_Macaulay_list: \"pmdl (set (Macaulay_list ps)) = pmdl (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set (Macaulay_list ps)) = pmdl (set ps)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pmdl (set (Macaulay_list ps)) = pmdl (set ps)", "have *: \"Keys (set ps) \\<subseteq> set (Keys_to_list ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set ps) \\<subseteq> set (Keys_to_list ps)", "by (simp add: set_Keys_to_list)"], ["proof (state)\nthis:\n  Keys (set ps) \\<subseteq> set (Keys_to_list ps)\n\ngoal (1 subgoal):\n 1. pmdl (set (Macaulay_list ps)) = pmdl (set ps)", "have \"pmdl (set (Macaulay_list ps)) =\n          pmdl (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl (set (Macaulay_list ps)) =\n    pmdl\n     (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))))", "by (simp only: set_Macaulay_list pmdl.span_Diff_zero)"], ["proof (state)\nthis:\n  pmdl (set (Macaulay_list ps)) =\n  pmdl\n   (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))))\n\ngoal (1 subgoal):\n 1. pmdl (set (Macaulay_list ps)) = pmdl (set ps)", "also"], ["proof (state)\nthis:\n  pmdl (set (Macaulay_list ps)) =\n  pmdl\n   (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps))))\n\ngoal (1 subgoal):\n 1. pmdl (set (Macaulay_list ps)) = pmdl (set ps)", "have \"... = pmdl (set ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pmdl\n     (set (mat_to_polys (Keys_to_list ps)\n            (row_echelon (Macaulay_mat ps)))) =\n    pmdl (set ps)", "by (simp only: Macaulay_mat_def pmdl_row_echelon[OF * distinct_Keys_to_list])"], ["proof (state)\nthis:\n  pmdl\n   (set (mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)))) =\n  pmdl (set ps)\n\ngoal (1 subgoal):\n 1. pmdl (set (Macaulay_list ps)) = pmdl (set ps)", "finally"], ["proof (chain)\npicking this:\n  pmdl (set (Macaulay_list ps)) = pmdl (set ps)", "show ?thesis"], ["proof (prove)\nusing this:\n  pmdl (set (Macaulay_list ps)) = pmdl (set ps)\n\ngoal (1 subgoal):\n 1. pmdl (set (Macaulay_list ps)) = pmdl (set ps)", "."], ["proof (state)\nthis:\n  pmdl (set (Macaulay_list ps)) = pmdl (set ps)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Macaulay_list_is_monic_set: \"is_monic_set (set (Macaulay_list ps))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_monic_set (set (Macaulay_list ps))", "proof (rule is_monic_setI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> set (Macaulay_list ps); b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> lc b = (1::'b)", "let ?ts = \"Keys_to_list ps\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> set (Macaulay_list ps); b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> lc b = (1::'b)", "let ?E = \"row_echelon (Macaulay_mat ps)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> set (Macaulay_list ps); b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> lc b = (1::'b)", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> set (Macaulay_list ps); b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> lc b = (1::'b)", "assume \"p \\<in> set (Macaulay_list ps)\""], ["proof (state)\nthis:\n  p \\<in> set (Macaulay_list ps)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> set (Macaulay_list ps); b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> lc b = (1::'b)", "obtain h where \"pivot_fun ?E h (dim_col ?E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        pivot_fun (row_echelon (Macaulay_mat ps)) h\n         (dim_col (row_echelon (Macaulay_mat ps))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule row_echelon_pivot_fun)"], ["proof (state)\nthis:\n  pivot_fun (row_echelon (Macaulay_mat ps)) h\n   (dim_col (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> set (Macaulay_list ps); b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> lc b = (1::'b)", "with \\<open>p \\<in> set (Macaulay_list ps)\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> set (Macaulay_list ps)\n  pivot_fun (row_echelon (Macaulay_mat ps)) h\n   (dim_col (row_echelon (Macaulay_mat ps)))", "obtain i where \"i < dim_row ?E\"\n    and p: \"p = (mat_to_polys ?ts ?E) ! i\" and \"h i < dim_col ?E\""], ["proof (prove)\nusing this:\n  p \\<in> set (Macaulay_list ps)\n  pivot_fun (row_echelon (Macaulay_mat ps)) h\n   (dim_col (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < dim_row (row_echelon (Macaulay_mat ps));\n         p =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i;\n         h i < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_Macaulay_listE)"], ["proof (state)\nthis:\n  i < dim_row (row_echelon (Macaulay_mat ps))\n  p = mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i\n  h i < dim_col (row_echelon (Macaulay_mat ps))\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>b \\<in> set (Macaulay_list ps); b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> lc b = (1::'b)", "show \"lc p = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lc p = (1::'b)", "unfolding p Keys_to_list_eq_pps_to_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. lc (mat_to_polys (pps_to_list (Keys (set ps)))\n         (row_echelon (Macaulay_mat ps)) !\n        i) =\n    (1::'b)", "by (rule lc_row_to_poly_pivot_fun, simp, fact+)"], ["proof (state)\nthis:\n  lc p = (1::'b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Macaulay_list_not_zero: \"0 \\<notin> set (Macaulay_list ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<notin> set (Macaulay_list ps)", "by (simp add: Macaulay_list_def)"], ["", "lemma Macaulay_list_distinct_lt:\n  assumes \"x \\<in> set (Macaulay_list ps)\" and \"y \\<in> set (Macaulay_list ps)\"\n    and \"x \\<noteq> y\"\n  shows \"lt x \\<noteq> lt y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt x \\<noteq> lt y", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "let ?S = \"Keys (set ps)\""], ["proof (state)\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "let ?ts = \"Keys_to_list ps\""], ["proof (state)\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "let ?E = \"row_echelon (Macaulay_mat ps)\""], ["proof (state)\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "assume \"lt x = lt y\""], ["proof (state)\nthis:\n  lt x = lt y\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "obtain h where pf: \"pivot_fun ?E h (dim_col ?E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        pivot_fun (row_echelon (Macaulay_mat ps)) h\n         (dim_col (row_echelon (Macaulay_mat ps))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule row_echelon_pivot_fun)"], ["proof (state)\nthis:\n  pivot_fun (row_echelon (Macaulay_mat ps)) h\n   (dim_col (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  x \\<in> set (Macaulay_list ps)\n  pivot_fun (row_echelon (Macaulay_mat ps)) h\n   (dim_col (row_echelon (Macaulay_mat ps)))", "obtain i1 where \"i1 < dim_row ?E\"\n    and x: \"x = (mat_to_polys ?ts ?E) ! i1\" and \"h i1 < dim_col ?E\""], ["proof (prove)\nusing this:\n  x \\<in> set (Macaulay_list ps)\n  pivot_fun (row_echelon (Macaulay_mat ps)) h\n   (dim_col (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. (\\<And>i1.\n        \\<lbrakk>i1 < dim_row (row_echelon (Macaulay_mat ps));\n         x =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) !\n         i1;\n         h i1 < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_Macaulay_listE)"], ["proof (state)\nthis:\n  i1 < dim_row (row_echelon (Macaulay_mat ps))\n  x = mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i1\n  h i1 < dim_col (row_echelon (Macaulay_mat ps))\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "from assms(2) pf"], ["proof (chain)\npicking this:\n  y \\<in> set (Macaulay_list ps)\n  pivot_fun (row_echelon (Macaulay_mat ps)) h\n   (dim_col (row_echelon (Macaulay_mat ps)))", "obtain i2 where \"i2 < dim_row ?E\"\n    and y: \"y = (mat_to_polys ?ts ?E) ! i2\" and \"h i2 < dim_col ?E\""], ["proof (prove)\nusing this:\n  y \\<in> set (Macaulay_list ps)\n  pivot_fun (row_echelon (Macaulay_mat ps)) h\n   (dim_col (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. (\\<And>i2.\n        \\<lbrakk>i2 < dim_row (row_echelon (Macaulay_mat ps));\n         y =\n         mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) !\n         i2;\n         h i2 < dim_col (row_echelon (Macaulay_mat ps))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule in_Macaulay_listE)"], ["proof (state)\nthis:\n  i2 < dim_row (row_echelon (Macaulay_mat ps))\n  y = mat_to_polys (Keys_to_list ps) (row_echelon (Macaulay_mat ps)) ! i2\n  h i2 < dim_col (row_echelon (Macaulay_mat ps))\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "have \"lt x = ?ts ! (h i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt x = Keys_to_list ps ! h i1", "by (simp only: x Keys_to_list_eq_pps_to_list, rule lt_row_to_poly_pivot_fun, simp, fact+)"], ["proof (state)\nthis:\n  lt x = Keys_to_list ps ! h i1\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  lt x = Keys_to_list ps ! h i1\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "have \"lt y = ?ts ! (h i2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt y = Keys_to_list ps ! h i2", "by (simp only: y Keys_to_list_eq_pps_to_list, rule lt_row_to_poly_pivot_fun, simp, fact+)"], ["proof (state)\nthis:\n  lt y = Keys_to_list ps ! h i2\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  lt x = Keys_to_list ps ! h i1\n  lt y = Keys_to_list ps ! h i2", "have \"?ts ! (h i1) = ?ts ! (h i2)\""], ["proof (prove)\nusing this:\n  lt x = Keys_to_list ps ! h i1\n  lt y = Keys_to_list ps ! h i2\n\ngoal (1 subgoal):\n 1. Keys_to_list ps ! h i1 = Keys_to_list ps ! h i2", "by (simp only: \\<open>lt x = lt y\\<close>)"], ["proof (state)\nthis:\n  Keys_to_list ps ! h i1 = Keys_to_list ps ! h i2\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "hence \"pps_to_list (Keys (set ps)) ! h i1 = pps_to_list (Keys (set ps)) ! h i2\""], ["proof (prove)\nusing this:\n  Keys_to_list ps ! h i1 = Keys_to_list ps ! h i2\n\ngoal (1 subgoal):\n 1. pps_to_list (Keys (set ps)) ! h i1 = pps_to_list (Keys (set ps)) ! h i2", "by (simp only: Keys_to_list_eq_pps_to_list)"], ["proof (state)\nthis:\n  pps_to_list (Keys (set ps)) ! h i1 = pps_to_list (Keys (set ps)) ! h i2\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "have \"i1 = i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 = i2", "proof (rule lt_row_to_poly_pivot_fun_eqD)"], ["proof (state)\ngoal (7 subgoals):\n 1. card ?S = dim_col ?A\n 2. pivot_fun ?A ?f (dim_col ?A)\n 3. i1 < dim_row ?A\n 4. i2 < dim_row ?A\n 5. ?f i1 < dim_col ?A\n 6. ?f i2 < dim_col ?A\n 7. pps_to_list ?S ! ?f i1 = pps_to_list ?S ! ?f i2", "show \"card ?S = dim_col ?E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (Keys (set ps)) = dim_col (row_echelon (Macaulay_mat ps))", "by simp"], ["proof (state)\nthis:\n  card (Keys (set ps)) = dim_col (row_echelon (Macaulay_mat ps))\n\ngoal (6 subgoals):\n 1. pivot_fun (row_echelon (Macaulay_mat ps)) ?f\n     (dim_col (row_echelon (Macaulay_mat ps)))\n 2. i1 < dim_row (row_echelon (Macaulay_mat ps))\n 3. i2 < dim_row (row_echelon (Macaulay_mat ps))\n 4. ?f i1 < dim_col (row_echelon (Macaulay_mat ps))\n 5. ?f i2 < dim_col (row_echelon (Macaulay_mat ps))\n 6. pps_to_list (Keys (set ps)) ! ?f i1 =\n    pps_to_list (Keys (set ps)) ! ?f i2", "qed fact+"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "hence \"x = y\""], ["proof (prove)\nusing this:\n  i1 = i2\n\ngoal (1 subgoal):\n 1. x = y", "by (simp only: x y)"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. lt x = lt y \\<Longrightarrow> False", "with \\<open>x \\<noteq> y\\<close>"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  x = y", "show False"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  x = y\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Macaulay_list_lt:\n  assumes \"p \\<in> phull (set ps)\" and \"p \\<noteq> 0\"\n  obtains g where \"g \\<in> set (Macaulay_list ps)\" and \"g \\<noteq> 0\" and \"lt p = lt g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?S = \"Keys (set ps)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?ts = \"Keys_to_list ps\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?E = \"row_echelon (Macaulay_mat ps)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?gs = \"mat_to_polys ?ts ?E\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"finite ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Keys (set ps))", "by (rule finite_Keys, rule)"], ["proof (state)\nthis:\n  finite (Keys (set ps))\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?S \\<subseteq> set ?ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Keys (set ps) \\<subseteq> set (Keys_to_list ps)", "by (simp only: set_Keys_to_list)"], ["proof (state)\nthis:\n  Keys (set ps) \\<subseteq> set (Keys_to_list ps)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms(1) \\<open>?S \\<subseteq> set ?ts\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> phull (set ps)\n  Keys (set ps) \\<subseteq> set (Keys_to_list ps)", "have \"p \\<in> row_to_poly ?ts ` row_space ?E\""], ["proof (prove)\nusing this:\n  p \\<in> phull (set ps)\n  Keys (set ps) \\<subseteq> set (Keys_to_list ps)\n\ngoal (1 subgoal):\n 1. p \\<in> row_to_poly (Keys_to_list ps) `\n            row_space (row_echelon (Macaulay_mat ps))", "by (simp only: Macaulay_mat_def row_space_row_echelon_eq_phull[symmetric])"], ["proof (state)\nthis:\n  p \\<in> row_to_poly (Keys_to_list ps) `\n          row_space (row_echelon (Macaulay_mat ps))\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"p \\<in> row_to_poly (pps_to_list ?S) ` row_space ?E\""], ["proof (prove)\nusing this:\n  p \\<in> row_to_poly (Keys_to_list ps) `\n          row_space (row_echelon (Macaulay_mat ps))\n\ngoal (1 subgoal):\n 1. p \\<in> row_to_poly (pps_to_list (Keys (set ps))) `\n            row_space (row_echelon (Macaulay_mat ps))", "by (simp only: Keys_to_list_eq_pps_to_list)"], ["proof (state)\nthis:\n  p \\<in> row_to_poly (pps_to_list (Keys (set ps))) `\n          row_space (row_echelon (Macaulay_mat ps))\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain f where \"pivot_fun ?E f (dim_col ?E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        pivot_fun (row_echelon (Macaulay_mat ps)) f\n         (dim_col (row_echelon (Macaulay_mat ps))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule row_echelon_pivot_fun)"], ["proof (state)\nthis:\n  pivot_fun (row_echelon (Macaulay_mat ps)) f\n   (dim_col (row_echelon (Macaulay_mat ps)))\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"lt p \\<in> lt_set (set ?gs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p\n    \\<in> lt_set\n           (set (mat_to_polys (Keys_to_list ps)\n                  (row_echelon (Macaulay_mat ps))))", "unfolding Keys_to_list_eq_pps_to_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. lt p\n    \\<in> lt_set\n           (set (mat_to_polys (pps_to_list (Keys (set ps)))\n                  (row_echelon (Macaulay_mat ps))))", "by (rule lt_row_space_pivot_fun, simp, fact+)"], ["proof (state)\nthis:\n  lt p\n  \\<in> lt_set\n         (set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps))))\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  lt p\n  \\<in> lt_set\n         (set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps))))", "obtain g where \"g \\<in> set ?gs\" and \"g \\<noteq> 0\" and \"lt g = lt p\""], ["proof (prove)\nusing this:\n  lt p\n  \\<in> lt_set\n         (set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps))))\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (mat_to_polys (Keys_to_list ps)\n                               (row_echelon (Macaulay_mat ps)));\n         g \\<noteq> 0; lt g = lt p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule lt_setE)"], ["proof (state)\nthis:\n  g \\<in> set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps)))\n  g \\<noteq> 0\n  lt g = lt p\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> set (Macaulay_list ps); g \\<noteq> 0;\n         lt p = lt g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. ?g30 \\<in> set (Macaulay_list ps)\n 2. ?g30 \\<noteq> 0\n 3. lt p = lt ?g30", "from \\<open>g \\<in> set ?gs\\<close> \\<open>g \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps)))\n  g \\<noteq> 0", "show \"g \\<in> set (Macaulay_list ps)\""], ["proof (prove)\nusing this:\n  g \\<in> set (mat_to_polys (Keys_to_list ps)\n                (row_echelon (Macaulay_mat ps)))\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. g \\<in> set (Macaulay_list ps)", "by (simp add: set_Macaulay_list)"], ["proof (state)\nthis:\n  g \\<in> set (Macaulay_list ps)\n\ngoal (2 subgoals):\n 1. g \\<noteq> 0\n 2. lt p = lt g", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. g \\<noteq> 0\n 2. lt p = lt g", "from \\<open>lt g = lt p\\<close>"], ["proof (chain)\npicking this:\n  lt g = lt p", "show \"lt p = lt g\""], ["proof (prove)\nusing this:\n  lt g = lt p\n\ngoal (1 subgoal):\n 1. lt p = lt g", "by simp"], ["proof (state)\nthis:\n  lt p = lt g\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "qed fact"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* ordered_term *)"], ["", "end"], ["", "(* theory *)"]]}