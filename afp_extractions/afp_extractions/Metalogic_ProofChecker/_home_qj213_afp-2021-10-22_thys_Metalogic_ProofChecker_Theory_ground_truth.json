{"file_name": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker/Theory.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker", "problem_names": ["lemma typ_ok_sig_imp_wf_type: \"typ_ok_sig \\<Sigma> T \\<Longrightarrow> wf_type \\<Sigma> T\"", "lemma wf_type_imp_typ_ok_sig: \"wf_type \\<Sigma> T \\<Longrightarrow> typ_ok_sig \\<Sigma> T\"", "lemma term_ok'_imp_wf_term: \"term_ok' \\<Sigma> t \\<Longrightarrow> wf_term \\<Sigma> t\"", "lemma wf_term_imp_term_ok': \"wf_term \\<Sigma> t \\<Longrightarrow> term_ok' \\<Sigma> t\"", "lemma acyclic_empty[simp]: \"acyclic {}\"", "lemma \"wf_sig (Map.empty, Map.empty, empty_osig)\"", "lemma \n  term_ok_imp_typ_ok_pre:\n  \"is_std_sig \\<Sigma> \\<Longrightarrow> wf_term \\<Sigma> t \\<Longrightarrow> list_all (typ_ok_sig \\<Sigma>) Ts\n  \\<Longrightarrow> typ_of1 Ts t = Some ty \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\"", "lemma theory_full_exhaust: \"(\\<And>cto tao sorts axioms. \n    \\<Theta> = ((cto, tao, sorts), axioms) \\<Longrightarrow> P)\n  \\<Longrightarrow> P\"", "lemmas eq_axs_def = eq_reflexive_ax_def eq_symmetric_ax_def eq_transitive_ax_def eq_intr_ax_def \n  eq_elim_ax_def eq_combination_ax_def eq_abstract_rule_ax_def", "lemma typ_of_eq_ax: \"typ_of (eq_reflexive_ax) = Some propT\" \n    \"typ_of (eq_symmetric_ax) = Some propT\" \n    \"typ_of (eq_transitive_ax) = Some propT\" \n    \"typ_of (eq_intr_ax) = Some propT\" \n    \"typ_of (eq_elim_ax) = Some propT\"\n    \"typ_of (eq_combination_ax) = Some propT\" \n    \"typ_of (eq_abstract_rule_ax) = Some propT\"", "lemma term_ok_eq_ax:\n  assumes \"is_std_sig (sig \\<Theta>)\"\n  shows \"term_ok \\<Theta> (eq_reflexive_ax)\" \n    \"term_ok \\<Theta> (eq_symmetric_ax)\" \n    \"term_ok \\<Theta> (eq_transitive_ax)\" \n    \"term_ok \\<Theta> (eq_intr_ax)\" \n    \"term_ok \\<Theta> (eq_elim_ax)\"\n    \"term_ok \\<Theta> (eq_combination_ax)\"\n    \"term_ok \\<Theta> (eq_abstract_rule_ax)\"", "lemma wf_theory_imp_is_std_sig: \"wf_theory \\<Theta> \\<Longrightarrow> is_std_sig (sig \\<Theta>)\"", "lemma wf_theory_imp_wf_sig: \"wf_theory \\<Theta> \\<Longrightarrow> wf_sig (sig \\<Theta>)\"", "lemma \n  term_ok_imp_typ_ok:\n  \"wf_theory thy \\<Longrightarrow> term_ok thy t \\<Longrightarrow> typ_of t = Some ty \\<Longrightarrow> typ_ok thy ty\"", "lemma axioms_terms_ok: \"wf_theory thy \\<Longrightarrow> A\\<in>axioms thy \\<Longrightarrow> term_ok thy A\"", "lemma axioms_typ_of_propT: \"wf_theory thy \\<Longrightarrow> A\\<in>axioms thy \\<Longrightarrow> typ_of A = Some propT\"", "lemma propT_ok[simp]: \"wf_theory \\<Theta> \\<Longrightarrow> typ_ok \\<Theta> propT\"", "lemma term_ok_mk_eqD: \"term_ok \\<Theta> (mk_eq s t) \\<Longrightarrow> term_ok \\<Theta> s \\<and> term_ok \\<Theta> t\"", "lemma term_ok_app_eqD: \"term_ok \\<Theta> (s $ t) \\<Longrightarrow> term_ok \\<Theta> s \\<and> term_ok \\<Theta> t\"", "lemma wf_type_Type_imp_mgd: \n  \"wf_sig \\<Sigma> \\<Longrightarrow> wf_type \\<Sigma> (Ty n Ts) \\<Longrightarrow> tcsigs (osig \\<Sigma>) n \\<noteq> None\"", "lemma term_ok_eta_expand:\n  assumes \"wf_theory \\<Theta>\" \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\" \"typ_ok \\<Theta> \\<tau>\"\n  shows \"term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\"", "lemma term_ok'_incr_bv: \"term_ok' \\<Sigma> t \\<Longrightarrow> term_ok' \\<Sigma> (incr_bv inc lev t)\"", "lemma term_ok'_subst_bv2: \"term_ok' \\<Sigma> s \\<Longrightarrow> term_ok' \\<Sigma> u \\<Longrightarrow> term_ok' \\<Sigma> (subst_bv2 s lev u)\"", "lemma term_ok'_subst_bv: \"term_ok' \\<Sigma> (Abs T t) \\<Longrightarrow> term_ok' \\<Sigma> (subst_bv (Fv x T) t)\"", "lemma term_ok_subst_bv: \"term_ok \\<Theta> (Abs T t) \\<Longrightarrow> term_ok \\<Theta> (subst_bv (Fv x T) t)\"", "lemma term_ok_subst_bv2_0: \"term_ok \\<Theta> (Abs T t) \\<Longrightarrow> term_ok \\<Theta> (subst_bv2 t 0 (Fv x T))\"", "lemma has_sort_empty[simp]:\n  assumes \"wf_sig \\<Sigma>\" \"wf_type \\<Sigma> T\"\n  shows \"has_sort (osig \\<Sigma>) T full_sort\"", "lemma typ_Fv_of_full_sort[simp]:\n  \"wf_theory \\<Theta> \\<Longrightarrow> term_ok \\<Theta> (Fv v T) \\<Longrightarrow> has_sort (osig (sig \\<Theta>)) T full_sort\""], "translations": [["", "lemma typ_ok_sig_imp_wf_type: \"typ_ok_sig \\<Sigma> T \\<Longrightarrow> wf_type \\<Sigma> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> T \\<Longrightarrow> wf_type \\<Sigma> T", "by (induction T) (auto split: option.splits intro: wf_type.intros simp add: list_all_iff)"], ["", "lemma wf_type_imp_typ_ok_sig: \"wf_type \\<Sigma> T \\<Longrightarrow> typ_ok_sig \\<Sigma> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_type \\<Sigma> T \\<Longrightarrow> typ_ok_sig \\<Sigma> T", "by (induction \\<Sigma> T rule: wf_type.induct) (simp_all split: option.splits add: list_all_iff)"], ["", "corollary wf_type_iff_typ_ok_sig[iff]: \"wf_type \\<Sigma> T = typ_ok_sig \\<Sigma> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_type \\<Sigma> T = typ_ok_sig \\<Sigma> T", "using wf_type_imp_typ_ok_sig typ_ok_sig_imp_wf_type"], ["proof (prove)\nusing this:\n  wf_type ?\\<Sigma> ?T \\<Longrightarrow> typ_ok_sig ?\\<Sigma> ?T\n  typ_ok_sig ?\\<Sigma> ?T \\<Longrightarrow> wf_type ?\\<Sigma> ?T\n\ngoal (1 subgoal):\n 1. wf_type \\<Sigma> T = typ_ok_sig \\<Sigma> T", "by blast"], ["", "fun term_ok' :: \"signature \\<Rightarrow> term \\<Rightarrow> bool\" where\n  \"term_ok' \\<Sigma> (Fv _ T) = typ_ok_sig \\<Sigma> T\"\n| \"term_ok' \\<Sigma> (Bv _) = True\"\n| \"term_ok' \\<Sigma> (Ct s T) = (case const_type \\<Sigma> s of\n    None \\<Rightarrow> False\n  | Some ty \\<Rightarrow> typ_ok_sig \\<Sigma> T \\<and> tinstT T ty)\"\n| \"term_ok' \\<Sigma> (t $ u) \\<longleftrightarrow> term_ok' \\<Sigma> t \\<and> term_ok' \\<Sigma> u\" \n| \"term_ok' \\<Sigma> (Abs T t) \\<longleftrightarrow> typ_ok_sig \\<Sigma> T \\<and> term_ok' \\<Sigma> t\""], ["", "lemma term_ok'_imp_wf_term: \"term_ok' \\<Sigma> t \\<Longrightarrow> wf_term \\<Sigma> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok' \\<Sigma> t \\<Longrightarrow> wf_term \\<Sigma> t", "by (induction t) (auto intro: wf_term.intros split: option.splits)"], ["", "lemma wf_term_imp_term_ok': \"wf_term \\<Sigma> t \\<Longrightarrow> term_ok' \\<Sigma> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_term \\<Sigma> t \\<Longrightarrow> term_ok' \\<Sigma> t", "by (induction \\<Sigma> t rule: wf_term.induct) (auto split: option.splits)"], ["", "corollary wf_term_iff_term_ok'[iff]: \"wf_term \\<Sigma> t = term_ok' \\<Sigma> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_term \\<Sigma> t = term_ok' \\<Sigma> t", "using term_ok'_imp_wf_term wf_term_imp_term_ok'"], ["proof (prove)\nusing this:\n  term_ok' ?\\<Sigma> ?t \\<Longrightarrow> wf_term ?\\<Sigma> ?t\n  wf_term ?\\<Sigma> ?t \\<Longrightarrow> term_ok' ?\\<Sigma> ?t\n\ngoal (1 subgoal):\n 1. wf_term \\<Sigma> t = term_ok' \\<Sigma> t", "by blast"], ["", "lemma acyclic_empty[simp]: \"acyclic {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acyclic {}", "unfolding acyclic_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (x, x) \\<notin> {}\\<^sup>+", "by simp"], ["", "lemma \"wf_sig (Map.empty, Map.empty, empty_osig)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_sig (Map.empty, Map.empty, empty_osig)", "by (simp add: coregular_tcsigs_def complete_tcsigs_def consistent_length_tcsigs_def \n      all_normalized_and_ex_tcsigs_def)"], ["", "lemma \n  term_ok_imp_typ_ok_pre:\n  \"is_std_sig \\<Sigma> \\<Longrightarrow> wf_term \\<Sigma> t \\<Longrightarrow> list_all (typ_ok_sig \\<Sigma>) Ts\n  \\<Longrightarrow> typ_of1 Ts t = Some ty \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> t;\n     list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts t = Some ty\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "proof (induction Ts t arbitrary: ty rule: typ_of1.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>Ts i ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Bv i);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Bv i) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 4. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n                    list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n                    typ_of1 (T # Ts) body = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (Abs T body);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 5. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "case (2 Ts i)"], ["proof (state)\nthis:\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (Bv i)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (Bv i) = Some ty\n\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>Ts i ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Bv i);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Bv i) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 4. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n                    list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n                    typ_of1 (T # Ts) body = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (Abs T body);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 5. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "then"], ["proof (chain)\npicking this:\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (Bv i)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (Bv i) = Some ty", "show ?case"], ["proof (prove)\nusing this:\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (Bv i)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (Bv i) = Some ty\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> ty", "by (auto simp add: bind_eq_Some_conv list_all_length split: option.splits if_splits)"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> ty\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n                    list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n                    typ_of1 (T # Ts) body = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (Abs T body);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 4. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n                    list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n                    typ_of1 (T # Ts) body = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (Abs T body);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 4. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "case (4 Ts T body)"], ["proof (state)\nthis:\n  \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n   list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n   typ_of1 (T # Ts) body = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (Abs T body)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (Abs T body) = Some ty\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n                    list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n                    typ_of1 (T # Ts) body = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (Abs T body);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 4. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "obtain bodyT where bodyT: \"typ_of1 (T#Ts) body = Some bodyT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bodyT.\n        typ_of1 (T # Ts) body = Some bodyT \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \"4.prems\""], ["proof (prove)\nusing this:\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (Abs T body)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (Abs T body) = Some ty\n\ngoal (1 subgoal):\n 1. (\\<And>bodyT.\n        typ_of1 (T # Ts) body = Some bodyT \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  typ_of1 (T # Ts) body = Some bodyT\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n                    list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n                    typ_of1 (T # Ts) body = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (Abs T body);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 4. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "hence ty: \"ty = T \\<rightarrow> bodyT\""], ["proof (prove)\nusing this:\n  typ_of1 (T # Ts) body = Some bodyT\n\ngoal (1 subgoal):\n 1. ty = T \\<rightarrow> bodyT", "using 4"], ["proof (prove)\nusing this:\n  typ_of1 (T # Ts) body = Some bodyT\n  \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n   list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n   typ_of1 (T # Ts) body = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (Abs T body)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (Abs T body) = Some ty\n\ngoal (1 subgoal):\n 1. ty = T \\<rightarrow> bodyT", "by simp"], ["proof (state)\nthis:\n  ty = T \\<rightarrow> bodyT\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n                    list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n                    typ_of1 (T # Ts) body = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (Abs T body);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 4. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "have \"typ_ok_sig \\<Sigma> bodyT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> bodyT", "using 4 bodyT"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n   list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n   typ_of1 (T # Ts) body = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (Abs T body)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (Abs T body) = Some ty\n  typ_of1 (T # Ts) body = Some bodyT\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> bodyT", "by simp"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> bodyT\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n                    list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n                    typ_of1 (T # Ts) body = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (Abs T body);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 4. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "thus ?case"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> bodyT\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> ty", "using ty 4"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> bodyT\n  ty = T \\<rightarrow> bodyT\n  \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> body;\n   list_all (typ_ok_sig \\<Sigma>) (T # Ts);\n   typ_of1 (T # Ts) body = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (Abs T body)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (Abs T body) = Some ty\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> ty", "by (cases \\<Sigma>) auto"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> ty\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "case (5 Ts f u T)"], ["proof (state)\nthis:\n  \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n   list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts u = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  \\<lbrakk>typ_of1 Ts u = Some ?a; is_std_sig \\<Sigma>; wf_term \\<Sigma> f;\n   list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts f = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (f $ u)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (f $ u) = Some T\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n   list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts u = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  \\<lbrakk>typ_of1 Ts u = Some ?a; is_std_sig \\<Sigma>; wf_term \\<Sigma> f;\n   list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts f = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (f $ u)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (f $ u) = Some T", "obtain U where \"typ_of1 Ts u = Some U\""], ["proof (prove)\nusing this:\n  \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n   list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts u = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  \\<lbrakk>typ_of1 Ts u = Some ?a; is_std_sig \\<Sigma>; wf_term \\<Sigma> f;\n   list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts f = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (f $ u)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (f $ u) = Some T\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        typ_of1 Ts u = Some U \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using typ_of1_split_App"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n   list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts u = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  \\<lbrakk>typ_of1 Ts u = Some ?a; is_std_sig \\<Sigma>; wf_term \\<Sigma> f;\n   list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts f = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (f $ u)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  typ_of1 Ts (f $ u) = Some T\n  typ_of1 ?Ts (?t $ ?u) = Some ?ty \\<Longrightarrow>\n  \\<exists>uty.\n     typ_of1 ?Ts ?t = Some (uty \\<rightarrow> ?ty) \\<and>\n     typ_of1 ?Ts ?u = Some uty\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        typ_of1 Ts u = Some U \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  typ_of1 Ts u = Some U\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "moreover"], ["proof (state)\nthis:\n  typ_of1 Ts u = Some U\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "hence \"typ_of1 Ts f = Some (U \\<rightarrow> T)\""], ["proof (prove)\nusing this:\n  typ_of1 Ts u = Some U\n\ngoal (1 subgoal):\n 1. typ_of1 Ts f = Some (U \\<rightarrow> T)", "using \"5.prems\"(4)"], ["proof (prove)\nusing this:\n  typ_of1 Ts u = Some U\n  typ_of1 Ts (f $ u) = Some T\n\ngoal (1 subgoal):\n 1. typ_of1 Ts f = Some (U \\<rightarrow> T)", "by (meson typ_of1_arg_typ)"], ["proof (state)\nthis:\n  typ_of1 Ts f = Some (U \\<rightarrow> T)\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "ultimately"], ["proof (chain)\npicking this:\n  typ_of1 Ts u = Some U\n  typ_of1 Ts f = Some (U \\<rightarrow> T)", "have \"typ_ok_sig \\<Sigma> (U \\<rightarrow> T)\""], ["proof (prove)\nusing this:\n  typ_of1 Ts u = Some U\n  typ_of1 Ts f = Some (U \\<rightarrow> T)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (U \\<rightarrow> T)", "using \"5.IH\"(2) \"5.prems\"(1) \"5.prems\"(2) \"5.prems\"(3) term_ok'.simps(4)"], ["proof (prove)\nusing this:\n  typ_of1 Ts u = Some U\n  typ_of1 Ts f = Some (U \\<rightarrow> T)\n  \\<lbrakk>typ_of1 Ts u = Some ?a; is_std_sig \\<Sigma>; wf_term \\<Sigma> f;\n   list_all (typ_ok_sig \\<Sigma>) Ts; typ_of1 Ts f = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> ?ty\n  is_std_sig \\<Sigma>\n  wf_term \\<Sigma> (f $ u)\n  list_all (typ_ok_sig \\<Sigma>) Ts\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (U \\<rightarrow> T)", "by blast"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (U \\<rightarrow> T)\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 3. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> u;\n                    list_all (typ_ok_sig \\<Sigma>) Ts;\n                    typ_of1 Ts u = Some ty\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; is_std_sig \\<Sigma>;\n            wf_term \\<Sigma> t; list_all (typ_ok_sig \\<Sigma>) Ts;\n            typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_ok_sig \\<Sigma> ty;\n        is_std_sig \\<Sigma>; wf_term \\<Sigma> (t $ u);\n        list_all (typ_ok_sig \\<Sigma>) Ts;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "then"], ["proof (chain)\npicking this:\n  typ_ok_sig \\<Sigma> (U \\<rightarrow> T)", "show ?case"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> (U \\<rightarrow> T)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> T", "by (auto simp add: bind_eq_Some_conv split: option.splits if_splits)"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> T\n\ngoal (2 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Ct uv_ T);\n        list_all (typ_ok_sig \\<Sigma>) uu_;\n        typ_of1 uu_ (Ct uv_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty\n 2. \\<And>uw_ ux_ T ty.\n       \\<lbrakk>is_std_sig \\<Sigma>; wf_term \\<Sigma> (Fv ux_ T);\n        list_all (typ_ok_sig \\<Sigma>) uw_;\n        typ_of1 uw_ (Fv ux_ T) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> ty", "qed (auto simp add: bind_eq_Some_conv split: option.splits if_splits)"], ["", "(* This might now be doable with just prod rules *)"], ["", "lemma theory_full_exhaust: \"(\\<And>cto tao sorts axioms. \n    \\<Theta> = ((cto, tao, sorts), axioms) \\<Longrightarrow> P)\n  \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cto tao sorts axioms.\n        \\<Theta> = ((cto, tao, sorts), axioms) \\<Longrightarrow>\n        P) \\<Longrightarrow>\n    P", "apply (cases \\<Theta>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>cto tao sorts axioms.\n                   \\<Theta> = ((cto, tao, sorts), axioms) \\<Longrightarrow>\n                   P;\n        \\<Theta> = (a, b)\\<rbrakk>\n       \\<Longrightarrow> P", "subgoal for \\<Sigma> axioms"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>cto tao sorts axioms.\n                \\<Theta> = ((cto, tao, sorts), axioms) \\<Longrightarrow> P;\n     \\<Theta> = (\\<Sigma>, axioms)\\<rbrakk>\n    \\<Longrightarrow> P", "apply (cases \\<Sigma>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>\\<And>cto tao sorts axioms.\n                   \\<Theta> = ((cto, tao, sorts), axioms) \\<Longrightarrow>\n                   P;\n        \\<Theta> = (\\<Sigma>, axioms); \\<Sigma> = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> P", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition [simp]: \"typ_ok \\<Theta> T \\<equiv> wf_type (sig \\<Theta>) T\""], ["", "definition [simp]: \"term_ok \\<Theta> t \\<equiv> wt_term (sig \\<Theta>) t\""], ["", "corollary typ_of_subst_bv_no_change: \"typ_of t \\<noteq> None \\<Longrightarrow> subst_bv u t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of t \\<noteq> None \\<Longrightarrow> subst_bv u t = t", "using closed_subst_bv_no_change typ_of_imp_closed"], ["proof (prove)\nusing this:\n  is_closed ?t \\<Longrightarrow> subst_bv ?u ?t = ?t\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n\ngoal (1 subgoal):\n 1. typ_of t \\<noteq> None \\<Longrightarrow> subst_bv u t = t", "by auto"], ["", "corollary term_ok_subst_bv_no_change: \"term_ok \\<Theta> t \\<Longrightarrow> subst_bv u t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> t \\<Longrightarrow> subst_bv u t = t", "using typ_of_subst_bv_no_change wt_term_def"], ["proof (prove)\nusing this:\n  typ_of ?t \\<noteq> None \\<Longrightarrow> subst_bv ?u ?t = ?t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> t \\<Longrightarrow> subst_bv u t = t", "by auto"], ["", "lemmas eq_axs_def = eq_reflexive_ax_def eq_symmetric_ax_def eq_transitive_ax_def eq_intr_ax_def \n  eq_elim_ax_def eq_combination_ax_def eq_abstract_rule_ax_def"], ["", "bundle eq_axs_simp\nbegin"], ["", "declare eq_axs_def[simp]"], ["", "declare mk_all_list_def[simp] add_vars'_def[simp] bind_eq_Some_conv[simp] bind_fv_def[simp]"], ["", "end"], ["", "lemma typ_of_eq_ax: \"typ_of (eq_reflexive_ax) = Some propT\" \n    \"typ_of (eq_symmetric_ax) = Some propT\" \n    \"typ_of (eq_transitive_ax) = Some propT\" \n    \"typ_of (eq_intr_ax) = Some propT\" \n    \"typ_of (eq_elim_ax) = Some propT\"\n    \"typ_of (eq_combination_ax) = Some propT\" \n    \"typ_of (eq_abstract_rule_ax) = Some propT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (typ_of eq_reflexive_ax = Some propT &&&\n     typ_of eq_symmetric_ax = Some propT &&&\n     typ_of eq_transitive_ax = Some propT) &&&\n    (typ_of eq_intr_ax = Some propT &&& typ_of eq_elim_ax = Some propT) &&&\n    typ_of eq_combination_ax = Some propT &&&\n    typ_of eq_abstract_rule_ax = Some propT", "by (auto simp add: typ_of_def eq_axs_def mk_all_list_def add_vars'_def bind_eq_Some_conv bind_fv_def)"], ["", "lemma term_ok_eq_ax:\n  assumes \"is_std_sig (sig \\<Theta>)\"\n  shows \"term_ok \\<Theta> (eq_reflexive_ax)\" \n    \"term_ok \\<Theta> (eq_symmetric_ax)\" \n    \"term_ok \\<Theta> (eq_transitive_ax)\" \n    \"term_ok \\<Theta> (eq_intr_ax)\" \n    \"term_ok \\<Theta> (eq_elim_ax)\"\n    \"term_ok \\<Theta> (eq_combination_ax)\"\n    \"term_ok \\<Theta> (eq_abstract_rule_ax)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (term_ok \\<Theta> eq_reflexive_ax &&&\n     term_ok \\<Theta> eq_symmetric_ax &&&\n     term_ok \\<Theta> eq_transitive_ax) &&&\n    (term_ok \\<Theta> eq_intr_ax &&& term_ok \\<Theta> eq_elim_ax) &&&\n    term_ok \\<Theta> eq_combination_ax &&&\n    term_ok \\<Theta> eq_abstract_rule_ax", "using assms"], ["proof (prove)\nusing this:\n  is_std_sig (sig \\<Theta>)\n\ngoal (1 subgoal):\n 1. (term_ok \\<Theta> eq_reflexive_ax &&&\n     term_ok \\<Theta> eq_symmetric_ax &&&\n     term_ok \\<Theta> eq_transitive_ax) &&&\n    (term_ok \\<Theta> eq_intr_ax &&& term_ok \\<Theta> eq_elim_ax) &&&\n    term_ok \\<Theta> eq_combination_ax &&&\n    term_ok \\<Theta> eq_abstract_rule_ax", "by (all \\<open>cases \\<Theta> rule: theory_full_exhaust\\<close>) \n   (auto simp add: wt_term_def typ_of_def tinstT_def eq_axs_def bind_eq_Some_conv\n      bind_fv_def sort_ex_def normalize_sort_def mk_all_list_def add_vars'_def wf_sort_def)"], ["", "lemma wf_theory_imp_is_std_sig: \"wf_theory \\<Theta> \\<Longrightarrow> is_std_sig (sig \\<Theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_theory \\<Theta> \\<Longrightarrow> is_std_sig (sig \\<Theta>)", "by (cases \\<Theta> rule: theory_full_exhaust) simp"], ["", "lemma wf_theory_imp_wf_sig: \"wf_theory \\<Theta> \\<Longrightarrow> wf_sig (sig \\<Theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_theory \\<Theta> \\<Longrightarrow> wf_sig (sig \\<Theta>)", "by (cases \\<Theta> rule: theory_full_exhaust) simp"], ["", "lemma \n  term_ok_imp_typ_ok:\n  \"wf_theory thy \\<Longrightarrow> term_ok thy t \\<Longrightarrow> typ_of t = Some ty \\<Longrightarrow> typ_ok thy ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_theory thy; term_ok thy t; typ_of t = Some ty\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy ty", "apply (cases thy)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>wf_theory thy; term_ok thy t; typ_of t = Some ty;\n        thy = (a, b)\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy ty", "using term_ok_imp_typ_ok_pre term_ok_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_std_sig ?\\<Sigma>; wf_term ?\\<Sigma> ?t;\n   list_all (typ_ok_sig ?\\<Sigma>) ?Ts; typ_of1 ?Ts ?t = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig ?\\<Sigma> ?ty\n  term_ok ?\\<Theta> ?t \\<equiv> wt_term (sig ?\\<Theta>) ?t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>wf_theory thy; term_ok thy t; typ_of t = Some ty;\n        thy = (a, b)\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy ty", "by (metis list.pred_inject(1) wt_term_def wf_theory_imp_is_std_sig typ_of_def typ_ok_def wf_type_iff_typ_ok_sig)"], ["", "lemma axioms_terms_ok: \"wf_theory thy \\<Longrightarrow> A\\<in>axioms thy \\<Longrightarrow> term_ok thy A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_theory thy; A \\<in> axioms thy\\<rbrakk>\n    \\<Longrightarrow> term_ok thy A", "using wt_term_def"], ["proof (prove)\nusing this:\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_theory thy; A \\<in> axioms thy\\<rbrakk>\n    \\<Longrightarrow> term_ok thy A", "by (cases thy rule: theory_full_exhaust) simp"], ["", "lemma axioms_typ_of_propT: \"wf_theory thy \\<Longrightarrow> A\\<in>axioms thy \\<Longrightarrow> typ_of A = Some propT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_theory thy; A \\<in> axioms thy\\<rbrakk>\n    \\<Longrightarrow> typ_of A = Some propT", "using has_typ_iff_typ_of"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>\\<tau> ?t : ?ty = (typ_of ?t = Some ?ty)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_theory thy; A \\<in> axioms thy\\<rbrakk>\n    \\<Longrightarrow> typ_of A = Some propT", "by (cases thy rule: theory_full_exhaust) simp"], ["", "lemma propT_ok[simp]: \"wf_theory \\<Theta> \\<Longrightarrow> typ_ok \\<Theta> propT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_theory \\<Theta> \\<Longrightarrow> typ_ok \\<Theta> propT", "using term_ok_imp_typ_ok wf_theory.elims(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory ?thy; term_ok ?thy ?t; typ_of ?t = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok ?thy ?ty\n  \\<lbrakk>wf_theory ?x;\n   \\<And>\\<Sigma> axs.\n      \\<lbrakk>?x = (\\<Sigma>, axs);\n       (\\<forall>p\\<in>axs.\n           wt_term \\<Sigma> p \\<and>\n           \\<turnstile>\\<^sub>\\<tau> p : propT) \\<and>\n       is_std_sig \\<Sigma> \\<and>\n       wf_sig \\<Sigma> \\<and> eq_axs \\<subseteq> axs\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. wf_theory \\<Theta> \\<Longrightarrow> typ_ok \\<Theta> propT", "by (metis sig.simps term_ok_eq_ax(4) typ_of_eq_ax(4))"], ["", "lemma term_ok_mk_eqD: \"term_ok \\<Theta> (mk_eq s t) \\<Longrightarrow> term_ok \\<Theta> s \\<and> term_ok \\<Theta> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (mk_eq s t) \\<Longrightarrow>\n    term_ok \\<Theta> s \\<and> term_ok \\<Theta> t", "using term_ok'.simps(4) wt_term_def typ_of_def"], ["proof (prove)\nusing this:\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (mk_eq s t) \\<Longrightarrow>\n    term_ok \\<Theta> s \\<and> term_ok \\<Theta> t", "by (auto simp add: bind_eq_Some_conv)"], ["", "lemma term_ok_app_eqD: \"term_ok \\<Theta> (s $ t) \\<Longrightarrow> term_ok \\<Theta> s \\<and> term_ok \\<Theta> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (s $ t) \\<Longrightarrow>\n    term_ok \\<Theta> s \\<and> term_ok \\<Theta> t", "using term_ok'.simps(4) wt_term_def typ_of_def"], ["proof (prove)\nusing this:\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (s $ t) \\<Longrightarrow>\n    term_ok \\<Theta> s \\<and> term_ok \\<Theta> t", "by (auto simp add: bind_eq_Some_conv)"], ["", "lemma wf_type_Type_imp_mgd: \n  \"wf_sig \\<Sigma> \\<Longrightarrow> wf_type \\<Sigma> (Ty n Ts) \\<Longrightarrow> tcsigs (osig \\<Sigma>) n \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_sig \\<Sigma>; wf_type \\<Sigma> (Ty n Ts)\\<rbrakk>\n    \\<Longrightarrow> tcsigs (osig \\<Sigma>) n \\<noteq> None", "by (cases \\<Sigma>) (auto split: option.splits)"], ["", "lemma term_ok_eta_expand:\n  assumes \"wf_theory \\<Theta>\" \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\" \"typ_ok \\<Theta> \\<tau>\"\n  shows \"term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))", "using assms typ_of_eta_expand"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>\n  typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>') \\<Longrightarrow>\n  typ_of (Abs ?\\<tau> (?f $ Bv 0)) = Some (?\\<tau> \\<rightarrow> ?\\<tau>')\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))", "by (auto simp add: wt_term_def)"], ["", "lemma term_ok'_incr_bv: \"term_ok' \\<Sigma> t \\<Longrightarrow> term_ok' \\<Sigma> (incr_bv inc lev t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok' \\<Sigma> t \\<Longrightarrow>\n    term_ok' \\<Sigma> (incr_bv inc lev t)", "by (induction inc lev t rule: incr_bv.induct) auto"], ["", "lemma term_ok'_subst_bv2: \"term_ok' \\<Sigma> s \\<Longrightarrow> term_ok' \\<Sigma> u \\<Longrightarrow> term_ok' \\<Sigma> (subst_bv2 s lev u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>term_ok' \\<Sigma> s; term_ok' \\<Sigma> u\\<rbrakk>\n    \\<Longrightarrow> term_ok' \\<Sigma> (subst_bv2 s lev u)", "by (induction s lev u rule: subst_bv2.induct) (auto simp add: term_ok'_incr_bv)"], ["", "lemma term_ok'_subst_bv: \"term_ok' \\<Sigma> (Abs T t) \\<Longrightarrow> term_ok' \\<Sigma> (subst_bv (Fv x T) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok' \\<Sigma> (Abs T t) \\<Longrightarrow>\n    term_ok' \\<Sigma> (subst_bv (Fv x T) t)", "by (simp add: substn_subst_0' term_ok'_subst_bv2)"], ["", "lemma term_ok_subst_bv: \"term_ok \\<Theta> (Abs T t) \\<Longrightarrow> term_ok \\<Theta> (subst_bv (Fv x T) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs T t) \\<Longrightarrow>\n    term_ok \\<Theta> (subst_bv (Fv x T) t)", "apply (simp add: term_ok'_subst_bv wt_term_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok_sig (sig \\<Theta>) T \\<and>\n    term_ok' (sig \\<Theta>) t \\<and>\n    (\\<exists>Ta. typ_of (Abs T t) = Some Ta) \\<Longrightarrow>\n    \\<exists>Ta. typ_of (subst_bv (Fv x T) t) = Some Ta", "using subst_bv_def typ_of1_subst_bv_gen' typ_of_Abs_body_typ' typ_of_def"], ["proof (prove)\nusing this:\n  subst_bv ?u ?t \\<equiv> subst_bv1 ?t 0 ?u\n  \\<lbrakk>typ_of1 (?uty # ?Ts) ?t = Some ?tty;\n   typ_of1 ?Ts ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (subst_bv1 ?t 0 ?u) = Some ?tty\n  typ_of1 ?Ts (Abs ?T ?t) = Some ?ty \\<Longrightarrow>\n  \\<exists>rty.\n     ?ty = ?T \\<rightarrow> rty \\<and> typ_of1 (?T # ?Ts) ?t = Some rty\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. typ_ok_sig (sig \\<Theta>) T \\<and>\n    term_ok' (sig \\<Theta>) t \\<and>\n    (\\<exists>Ta. typ_of (Abs T t) = Some Ta) \\<Longrightarrow>\n    \\<exists>Ta. typ_of (subst_bv (Fv x T) t) = Some Ta", "by fastforce"], ["", "lemma term_ok_subst_bv2_0: \"term_ok \\<Theta> (Abs T t) \\<Longrightarrow> term_ok \\<Theta> (subst_bv2 t 0 (Fv x T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs T t) \\<Longrightarrow>\n    term_ok \\<Theta> (subst_bv2 t 0 (Fv x T))", "apply (clarsimp simp add: term_ok'_subst_bv2 wt_term_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ta.\n       \\<lbrakk>typ_ok_sig (sig \\<Theta>) T; term_ok' (sig \\<Theta>) t;\n        typ_of (Abs T t) = Some Ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ta.\n                            typ_of (subst_bv2 t 0 (Fv x T)) = Some Ta", "using substn_subst_0' typ_of1_subst_bv_gen' typ_of_Abs_body_typ' typ_of_def\n    wt_term_def term_ok_subst_bv"], ["proof (prove)\nusing this:\n  subst_bv ?s ?t = subst_bv2 ?t 0 ?s\n  \\<lbrakk>typ_of1 (?uty # ?Ts) ?t = Some ?tty;\n   typ_of1 ?Ts ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (subst_bv1 ?t 0 ?u) = Some ?tty\n  typ_of1 ?Ts (Abs ?T ?t) = Some ?ty \\<Longrightarrow>\n  \\<exists>rty.\n     ?ty = ?T \\<rightarrow> rty \\<and> typ_of1 (?T # ?Ts) ?t = Some rty\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  term_ok ?\\<Theta> (Abs ?T ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> (subst_bv (Fv ?x ?T) ?t)\n\ngoal (1 subgoal):\n 1. \\<And>Ta.\n       \\<lbrakk>typ_ok_sig (sig \\<Theta>) T; term_ok' (sig \\<Theta>) t;\n        typ_of (Abs T t) = Some Ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Ta.\n                            typ_of (subst_bv2 t 0 (Fv x T)) = Some Ta", "by auto"], ["", "lemma has_sort_empty[simp]:\n  assumes \"wf_sig \\<Sigma>\" \"wf_type \\<Sigma> T\"\n  shows \"has_sort (osig \\<Sigma>) T full_sort\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has_sort (osig \\<Sigma>) T full_sort", "proof(cases T)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       T = Ty x11 x12 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort\n 2. \\<And>x21 x22.\n       T = Tv x21 x22 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort", "case (Ty n Ts)"], ["proof (state)\nthis:\n  T = Ty n Ts\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       T = Ty x11 x12 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort\n 2. \\<And>x21 x22.\n       T = Tv x21 x22 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort", "obtain cl tcs where cltcs: \"osig \\<Sigma> = (cl, tcs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cl tcs.\n        osig \\<Sigma> = (cl, tcs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  osig \\<Sigma> = (cl, tcs)\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       T = Ty x11 x12 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort\n 2. \\<And>x21 x22.\n       T = Tv x21 x22 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort", "obtain mgd where mgd: \"tcsigs (osig \\<Sigma>) n = Some mgd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>mgd.\n        tcsigs (osig \\<Sigma>) n = Some mgd \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using wf_type_Type_imp_mgd assms Ty"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_sig ?\\<Sigma>; wf_type ?\\<Sigma> (Ty ?n ?Ts)\\<rbrakk>\n  \\<Longrightarrow> tcsigs (osig ?\\<Sigma>) ?n \\<noteq> None\n  wf_sig \\<Sigma>\n  wf_type \\<Sigma> T\n  T = Ty n Ts\n\ngoal (1 subgoal):\n 1. (\\<And>mgd.\n        tcsigs (osig \\<Sigma>) n = Some mgd \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  tcsigs (osig \\<Sigma>) n = Some mgd\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       T = Ty x11 x12 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort\n 2. \\<And>x21 x22.\n       T = Tv x21 x22 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. has_sort (osig \\<Sigma>) T full_sort", "using mgd cltcs"], ["proof (prove)\nusing this:\n  tcsigs (osig \\<Sigma>) n = Some mgd\n  osig \\<Sigma> = (cl, tcs)\n\ngoal (1 subgoal):\n 1. has_sort (osig \\<Sigma>) T full_sort", "by (auto simp add: Ty intro!: has_sort_Ty)"], ["proof (state)\nthis:\n  has_sort (osig \\<Sigma>) T full_sort\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       T = Tv x21 x22 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       T = Tv x21 x22 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort", "case (Tv v S)"], ["proof (state)\nthis:\n  T = Tv v S\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       T = Tv x21 x22 \\<Longrightarrow> has_sort (osig \\<Sigma>) T full_sort", "then"], ["proof (chain)\npicking this:\n  T = Tv v S", "show ?thesis"], ["proof (prove)\nusing this:\n  T = Tv v S\n\ngoal (1 subgoal):\n 1. has_sort (osig \\<Sigma>) T full_sort", "by (cases \"osig \\<Sigma>\") (auto simp add: sort_leq_def split: prod.splits)"], ["proof (state)\nthis:\n  has_sort (osig \\<Sigma>) T full_sort\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typ_Fv_of_full_sort[simp]:\n  \"wf_theory \\<Theta> \\<Longrightarrow> term_ok \\<Theta> (Fv v T) \\<Longrightarrow> has_sort (osig (sig \\<Theta>)) T full_sort\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_theory \\<Theta>; term_ok \\<Theta> (Fv v T)\\<rbrakk>\n    \\<Longrightarrow> has_sort (osig (sig \\<Theta>)) T full_sort", "by (simp add: wt_term_def wf_theory_imp_wf_sig)"], ["", "end"]]}