{"file_name": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker/Term.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker", "problem_names": ["lemma tvsT_tsubstT: \"tvsT (tsubstT \\<sigma> \\<rho>) = \\<Union> {tvsT (\\<rho> a s) | a s. (a, s) \\<in> tvsT \\<sigma>}\"", "lemma tsubstT_cong: \n  \"(\\<forall>(v,S) \\<in> tvsT \\<sigma>. \\<rho>1 v = \\<rho>2 v) \\<Longrightarrow> tsubstT \\<sigma> \\<rho>1 = tsubstT \\<sigma> \\<rho>2\"", "lemma tsubstT_ith: \"i < length Ts \\<Longrightarrow>  map (\\<lambda>T . tsubstT T \\<rho>) Ts ! i = tsubstT (Ts ! i) \\<rho>\"", "lemma tsubstT_fun_typ_dist: \"tsubstT (T \\<rightarrow> T1) \\<rho> = tsubstT T \\<rho> \\<rightarrow> tsubstT T1 \\<rho>\"", "lemma finite_SortsT[simp]: \"finite (SortsT T)\"", "lemma finite_Sorts[simp]: \"finite (Sorts t)\"", "lemma finite_Types[simp]: \"finite (Types t)\"", "lemma finite_tvsT[simp]: \"finite (tvsT T)\"", "lemma no_tvsT_imp_tsubsT_unchanged: \"tvsT T = {} \\<Longrightarrow> tsubstT T \\<rho> = T\"", "lemma finite_fv[simp]: \"finite (fv t)\"", "lemma finite_tvs[simp]: \"finite (tvs t)\"", "lemma finite_FV: \"finite S \\<Longrightarrow> finite (FV S)\"", "lemma finite_tvs_Set: \"finite S \\<Longrightarrow> finite (tvs_Set S)\"", "lemma finite_tvsT_Set: \"finite S \\<Longrightarrow> finite (tvsT_Set S)\"", "lemma no_tvs_imp_tsubst_unchanged: \"tvs t = {} \\<Longrightarrow> tsubst t \\<rho> = t\"", "lemma no_fv_imp_subst_unchanged: \"fv t = {} \\<Longrightarrow> subst t \\<rho> = t\"", "lemma has_typ1_weaken_Ts: \"has_typ1 Ts t rT \\<Longrightarrow> has_typ1 (Ts@[T]) t rT\"", "lemma has_typ1_imp_typ_of1: \"has_typ1 Ts t ty \\<Longrightarrow> typ_of1 Ts t = Some ty\"", "lemma typ_of1_imp_has_typ1: \"typ_of1 Ts t = Some ty \\<Longrightarrow> has_typ1 Ts t ty\"", "lemma typ_of1_weaken_Ts: \"typ_of1 Ts t = Some ty \\<Longrightarrow> typ_of1 (Ts@[T]) t = Some ty\"", "lemma typ_of1_weaken:\n  assumes \"typ_of1 Ts t = Some T\"\n  shows \"typ_of1 (Ts@Ts') t = Some T\"", "lemma has_typ1_tsubst: \n  \"has_typ1 Ts t T \\<Longrightarrow> has_typ1 (map (\\<lambda>T. tsubstT T \\<rho>) Ts) (tsubst t \\<rho>) (tsubstT T \\<rho>)\"", "lemma typ_of_def: \"typ_of t \\<equiv> typ_of1 [] t\"", "lemma loose_bvar1_imp_loose_bvar: \"loose_bvar1 t n \\<Longrightarrow> loose_bvar t n\"", "lemma not_loose_bvar_imp_not_loose_bvar1: \"\\<not> loose_bvar t n \\<Longrightarrow> \\<not> loose_bvar1 t n\"", "lemma loose_bvar_iff_exist_loose_bvar1: \"loose_bvar t lev \\<longleftrightarrow> (\\<exists>lev'\\<ge>lev. loose_bvar1 t lev')\"", "lemma loose_bvar_Suc: \"loose_bvar t (Suc k) \\<Longrightarrow> loose_bvar t k\"", "lemma loose_bvar_leq: \"k\\<ge>p \\<Longrightarrow> loose_bvar t k \\<Longrightarrow> loose_bvar t p\"", "lemma has_typ1_imp_no_loose_bvar: \"has_typ1 Ts t ty \\<Longrightarrow> \\<not> loose_bvar t (length Ts)\"", "lemma exists_subterm_iff_exists_subterm': \"exists_subterm P t \\<longleftrightarrow> exists_subterm' P t\"", "lemma \"exists_subterm (\\<lambda>t. t=Fv idx T) t \\<longleftrightarrow> (idx, T) \\<in> fv t\"", "lemma occs_Fv_eq_elem_fv: \"occs (Fv v S) t \\<longleftrightarrow> (v, S) \\<in> fv t\"", "lemma bind_fv2_unchanged: \n  \"\\<not>loose_bvar tm lev \\<Longrightarrow> bind_fv2 v lev tm = tm \\<Longrightarrow> v \\<notin> fv tm\"", "lemma bind_fv2_unchanged': \n  \"\\<not>loose_bvar tm lev \\<Longrightarrow> bind_fv2 v lev tm = tm \\<Longrightarrow> \\<not> occs (case_prod Fv v) tm\"", "lemma bind_fv2_changed: \n  \"bind_fv2 v lev tm \\<noteq> tm \\<Longrightarrow> v \\<in> fv tm\"", "lemma bind_fv2_changed': \n  \"bind_fv2 v lev tm \\<noteq> tm \\<Longrightarrow> occs (case_prod Fv v) tm\"", "lemma has_typ1_arg_typ: \"has_typ1 Ts (t $ u) R \\<Longrightarrow> has_typ1 Ts u U \\<Longrightarrow> has_typ1 Ts t (U \\<rightarrow> R)\"", "lemma has_typ1_fun_typ: \"has_typ1 Ts (t $ u) R \\<Longrightarrow> has_typ1 Ts t (U \\<rightarrow> R) \\<Longrightarrow> has_typ1 Ts u U\"", "lemma typ_of1_arg_typ: \n  \"typ_of1 Ts (t $ u) = Some R \\<Longrightarrow> typ_of1 Ts u = Some U \\<Longrightarrow> typ_of1 Ts t = Some (U \\<rightarrow> R)\"", "lemma typ_of1_fun_typ: \n  \"typ_of1 Ts (t $ u) = Some R \\<Longrightarrow> typ_of1 Ts t = Some (U \\<rightarrow> R) \\<Longrightarrow> typ_of1 Ts u = Some U\"", "lemma typ_of_eta_expand: \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow> typ_of (Abs \\<tau> (f $ Bv 0)) = Some (\\<tau> \\<rightarrow> \\<tau>')\"", "lemma bind_fv2_preserves_type:\n  assumes \"typ_of1 Ts t = Some ty\" \n  shows \"typ_of1 (Ts@[T]) (bind_fv2 (v, T) (length Ts) t) = Some ty\"", "lemma typ_of_Abs_bind_fv:\n  assumes \"typ_of A = Some ty\"\n  shows \"typ_of (Abs bT (bind_fv (v, bT) A)) = Some (bT \\<rightarrow> ty)\"", "lemma typ_of_mk_all:\n  assumes \"typ_of A = Some propT\" \n  shows \"typ_of (mk_all x ty A) = Some propT\"", "lemma lift_def: \"lift t n = incr_bv 1 n t\"", "lemma incr_bv_0[simp]: \"incr_bv 0 lev t = t\"", "lemma loose_bvar_incr_bvar: \"loose_bvar t lev \\<longleftrightarrow> loose_bvar (incr_bv inc lev t) (lev+inc)\"", "lemma no_loose_bvar_no_incr[simp]: \"\\<not> loose_bvar t lev \\<Longrightarrow> incr_bv inc lev t = t\"", "lemma is_close_no_incr_boundvars[simp]: \"is_closed t \\<Longrightarrow> incr_boundvars inc t = t\"", "lemma fv_incr_bv [simp]: \"fv (incr_bv inc lev t) = fv t\"", "lemma fv_incr_boundvars [simp]: \"fv (incr_boundvars inc t) = fv t\"", "lemma loose_bvar_decr: \"\\<not> loose_bvar t k \\<Longrightarrow> \\<not> loose_bvar (decr k t) k\"", "lemma loose_bvar_decr_unchanged[simp]: \"\\<not> loose_bvar t k \\<Longrightarrow> decr k t = t\"", "lemma is_closed_decr_unchanged[simp]: \"is_closed t \\<Longrightarrow> decr 0 t = t\"", "lemma incr_bv_combine: \"incr_bv m k (incr_bv n k s) = incr_bv (m+n) k s\"", "lemma substn_subst_n : \"subst_bv1 t n s = subst_bv2 t n (incr_bv n 0 s)\"", "theorem substn_subst_0: \"subst_bv1 t 0 s = subst_bv2 t 0 s\"", "lemma subst_bv2_eq [simp]: \"subst_bv2 (Bv k) k u = u\"", "lemma subst_bv2_gt [simp]: \"i < j \\<Longrightarrow> subst_bv2 (Bv j) i u = Bv (j - 1)\"", "lemma subst_bv2_subst_lt [simp]: \"j < i \\<Longrightarrow> subst_bv2 (Bv j) i u = Bv j\"", "lemma lift_lift:\n    \"i < k + 1 \\<Longrightarrow> lift (lift t i) (Suc k) = lift (lift t k) i\"", "lemma lift_subst [simp]:\n    \"j < i + 1 \\<Longrightarrow> lift (subst_bv2 t j s) i = subst_bv2 (lift t (i + 1)) j (lift s i)\"", "lemma lift_subst_bv2_subst_lt:\n    \"i < j + 1 \\<Longrightarrow> lift (subst_bv2 t j s) i = subst_bv2 (lift t i) (j + 1) (lift s i)\"", "lemma subst_bv2_lift [simp]:\n    \"subst_bv2 (lift t k) k s = t\"", "lemma subst_bv2_subst_bv2:\n    \"i < j + 1 \\<Longrightarrow> subst_bv2 (subst_bv2 t (Suc j) (lift v i)) i (subst_bv2 u j v) \n    = subst_bv2 (subst_bv2 t i u) j v\"", "lemma subst_bv_def: \"subst_bv u t \\<equiv> subst_bv1 t 0 u\"", "lemma subst_bvs_App[simp]: \"subst_bvs args (s$t) = subst_bvs args s $ subst_bvs args t\"", "lemma subst_bv1_special_case_subst_bvs1: \"subst_bvs1 t lev [x] = subst_bv1 t lev x\"", "lemma no_loose_bvar_imp_no_subst_bv1: \"\\<not>loose_bvar t lev \\<Longrightarrow> subst_bv1 t lev u = t\"", "lemma no_loose_bvar_imp_no_subst_bvs1: \"\\<not>loose_bvar t lev \\<Longrightarrow> subst_bvs1 t lev us = t\"", "lemma subst_bvs1_step:             \n  assumes \"\\<not> loose_bvar t lev\"\n  shows \"subst_bvs1 t lev (args@[u]) = subst_bv1 (subst_bvs1 t lev args) lev u\"", "lemma is_variable_imp_incr_bv_unchanged: \"incr_bv inc lev (Fv v T) = (Fv v T)\"", "lemma is_variable_imp_incr_boundvars_unchganged: \"incr_boundvars inc (Fv v T) = (Fv v T)\"", "lemma loose_bvar_subst_bv1: \n  \"\\<not> loose_bvar (subst_bv1 t lev u) lev \\<Longrightarrow> \\<not> loose_bvar t (Suc lev)\"", "lemma is_closed_subst_bv: \"is_closed (subst_bv u t) \\<Longrightarrow> \\<not> loose_bvar t 1\"", "lemma subst_bv1_bind_fv2: \n  assumes \"\\<not> loose_bvar t lev\" \n  shows \"subst_bv1 (bind_fv2 (v, T) lev t) lev (Fv v T) = t\"", "lemma betapply_Abs_fv:\n  assumes \"is_closed t\"\n  shows \"betapply (Abs_fv v T t) (Fv v T) = t\"", "lemma typ_of1_imp_no_loose_bvar: \"typ_of1 Ts t = Some ty \\<Longrightarrow> \\<not> loose_bvar t (length Ts)\"", "lemma typ_of1_subst_bv:\n  assumes \"typ_of1 (Ts@[uty]) f = Some fty\"\n    and \"typ_of u = Some uty\"\n  shows \"typ_of1 Ts (subst_bv1 f (length Ts) u) = Some fty\"", "lemma typ_of1_split_App:\n  \"typ_of1 Ts (t $ u) = Some ty \\<Longrightarrow> (\\<exists>uty . typ_of1 Ts t = Some (uty \\<rightarrow> ty) \\<and> typ_of1 Ts u = Some uty)\"", "lemma typ_of1_incr_bv:\n  assumes \"typ_of1 Ts t = Some ty\" \n    and \"lev \\<le> length Ts\"\n  shows \"typ_of1 (take lev Ts @ Ts' @ drop lev Ts) (incr_bv (length Ts') lev t) = Some ty\"", "lemma typ_of1_subst_bv_gen:\n  assumes \"typ_of1 (Ts'@[uty]@Ts) t = Some tty\" and \"typ_of1 Ts u = Some uty\"\n  shows \"typ_of1 (Ts' @ Ts) (subst_bv1 t (length Ts') u) = Some tty\"", "lemma typ_of1_subst_bv_gen_depre:\n  assumes \"typ_of1 (Ts'@Ts) f = Some (fty)\"\n    and \"typ_of1 (Ts) u = Some uty\"\n    and \"last Ts' = uty\" and \"Ts' \\<noteq> []\"\n  shows \"typ_of1 (butlast Ts' @ Ts) (subst_bv1 f (length Ts'-1) u) = Some fty\"", "lemma typ_of_betapply: \n  assumes \"typ_of1 Ts (Abs uty t) = Some (uty \\<rightarrow> tty)\"\n  assumes \"typ_of1 Ts u = Some uty\"\n  shows \"typ_of1 Ts ((Abs uty t) \\<bullet> u) = Some tty\"", "lemma no_Bv_Type_param_irrelevant_typ_of:\n  \"\\<not>exists_subterm (\\<lambda>x . case x of Bv _ \\<Rightarrow> True | _ \\<Rightarrow> False) t \n  \\<Longrightarrow> typ_of1 Ts t = typ_of1 Ts' t\"", "lemma typ_of1_drop_extra_bounds:\n  \"\\<not>loose_bvar t (length Ts) \n  \\<Longrightarrow> typ_of1 (Ts@rest) t = typ_of1 Ts t\"", "lemma typ_of_betaply:\n  assumes \"typ_of t = Some (uty \\<rightarrow> tty)\" \"typ_of u = Some uty\"\n  shows \"typ_of (t \\<bullet> u) = Some tty\"", "lemma \"\\<not> loose_bvar t lev \\<Longrightarrow> decr lev t = t\"", "lemma decr_incr_bv1: \"decr lev (incr_bv 1 lev t) = t\"", "lemma depth_decr: \"depth (decr lev t) = depth t\"", "lemma loose_bvar1_decr: \"lev > 0 \\<Longrightarrow> \\<not> loose_bvar1 t (Suc lev) \\<Longrightarrow> \\<not> loose_bvar1 (decr lev t) lev\"", "lemma loose_bvar1_decr':\n  \"\\<not> loose_bvar1 t (Suc lev) \\<Longrightarrow> \\<not> loose_bvar1 t lev \\<Longrightarrow> \\<not> loose_bvar1 (decr lev t) lev\"", "lemma eta_reducible_Abs1: \"\\<not> eta_reducible (Abs T (t $ Bv 0)) \\<Longrightarrow> \\<not> eta_reducible t\"", "lemma eta_reducible_Abs2: \n  assumes \"\\<not> (\\<exists>f. t=f $ Bv 0)\" \"\\<not> eta_reducible (Abs T t)\" \n  shows \"\\<not> eta_reducible t\"", "lemma eta_reducible_Abs: \"\\<not> eta_reducible (Abs T t) \\<Longrightarrow> \\<not> eta_reducible t\"", "lemma loose_bvar1_decr'': \"loose_bvar1 t lev \\<Longrightarrow> lev < lev'\\<Longrightarrow> loose_bvar1 (decr lev' t) lev\"", "lemma loose_bvar1_decr''': \"loose_bvar1 t (Suc lev) \\<Longrightarrow> lev' \\<le> lev \\<Longrightarrow> loose_bvar1 (decr lev' t) lev\"", "lemma loose_bvar1_decr'''': \"\\<not> loose_bvar1 t lev' \\<Longrightarrow> lev' \\<le> lev  \\<Longrightarrow> \\<not> loose_bvar1 t (Suc lev) \n  \\<Longrightarrow> \\<not> loose_bvar1 (decr lev' t) lev\"", "lemma not_eta_reducible_decr: \n  \"\\<not> eta_reducible t \\<Longrightarrow> \\<not> loose_bvar1 t lev \\<Longrightarrow> \\<not> eta_reducible (decr lev t) \"", "lemma eta_norm_reduces_depth: \"eta_norm_dom t \\<Longrightarrow> depth (eta_norm t) <= depth t\"", "lemma loose_bvar1_eta_norm: \"loose_bvar1 t lev \\<Longrightarrow> loose_bvar1 (eta_norm t) lev\"", "lemma loose_bvar1_eta_norm': \"\\<not> loose_bvar1 t lev \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm t) lev\"", "lemma not_eta_reducible_eta_norm: \"\\<not> eta_reducible (eta_norm t)\"", "lemma not_eta_reducible_imp_eta_norm_no_change: \"\\<not> eta_reducible t \\<Longrightarrow> eta_norm t = t\"", "lemma eta_norm_collapse: \"eta_norm (eta_norm t) = eta_norm t\"", "lemma typ_of1_decr: \"typ_of1 (Ts@[T]@Ts') t = Some ty \\<Longrightarrow> \\<not> loose_bvar1 t (length Ts) \n  \\<Longrightarrow> typ_of1 (Ts@Ts') (decr (length Ts) t) = Some ty\"", "lemma typ_of1_decr_gen: \"typ_of1 (Ts@[T]@Ts') t = tyo \\<Longrightarrow> \\<not> loose_bvar1 t (length Ts)\n  \\<Longrightarrow> typ_of1 (Ts@Ts') (decr (length Ts) t) = tyo\"", "lemma typ_of1_decr_gen': \"typ_of1 (Ts@Ts') (decr (length Ts) t) = tyo\\<Longrightarrow> \\<not> loose_bvar1 t (length Ts)\n  \\<Longrightarrow> typ_of1 (Ts@[T]@Ts') t = tyo\"", "lemma typ_of1_eta_norm: \"typ_of1 Ts t = Some ty \\<Longrightarrow> typ_of1 Ts (eta_norm t) = Some ty\"", "lemma typ_of_Abs_body_typ: \"typ_of1 Ts (Abs T t) = Some ty \\<Longrightarrow> \\<exists>rty. ty = (T \\<rightarrow> rty)\"", "lemma typ_of_Abs_body_typ': \"typ_of1 Ts (Abs T t) = Some ty \n  \\<Longrightarrow> \\<exists>rty. ty = (T \\<rightarrow> rty) \\<and> typ_of1 (T#Ts) t = Some rty\"", "lemma typ_of_beta_redex_arg: \"typ_of (Abs T s $ t) \\<noteq> None \\<Longrightarrow> typ_of t = Some T\"", "lemma [partial_function_mono]: \"option.mono_body\n          (\\<lambda>beta_norm. map_option (Abs T) (beta_norm t))\"", "lemma [partial_function_mono]: \"option.mono_body\n          (\\<lambda>beta_norm.\n              case beta_norm x of None \\<Rightarrow> None\n              | Some (Ct list typ) \\<Rightarrow>\n                  map_option (($) (Ct list typ)) (beta_norm u)\n              | Some (Fv p typ) \\<Rightarrow>\n                  map_option (($) (Fv p typ)) (beta_norm u)\n              | Some (Bv n) \\<Rightarrow>\n                  map_option (($) (Bv n)) (beta_norm u)\n              | Some (Abs T body) \\<Rightarrow>\n                  beta_norm (subst_bv u body)\n              | Some (term1 $ term2) \\<Rightarrow>\n                  map_option (($) (term1 $ term2)) (beta_norm u))\"", "lemma not_beta_reducible_imp_beta_norm_unchanged: \"\\<not> beta_reducible t \\<Longrightarrow> beta_norm t = Some t\"", "lemma not_beta_reducible_decr: \"\\<not> beta_reducible t \\<Longrightarrow> \\<not> beta_reducible (decr n t)\"", "lemma \"\\<not> beta_reducible t \\<Longrightarrow> eta_norm t = t' \\<Longrightarrow> \\<not> beta_reducible t'\"", "lemma fv_occs: \"(x,\\<tau>) \\<in> fv t \\<Longrightarrow> occs (Fv x \\<tau>) t\"", "lemma fv_iff_occs: \"(x,\\<tau>) \\<in> fv t \\<longleftrightarrow> occs (Fv x \\<tau>) t\"", "lemma \"list_comb (h,t) = list_comb' h t\"", "lemma fst_strip_comb_imp_eq_head_of: \"fst (strip_comb_imp (t,ts)) = head_of t\"", "lemma not_is_app_imp_strip_com_imp_unchanged: \"\\<not> is_app t \\<Longrightarrow> strip_comb_imp (t,ts) = (t,ts)\"", "lemma list_comb_fuse: \"list_comb (list_comb (t,ts), ss) = list_comb (t,ts@ss)\"", "lemma \"map_atyps id ty = ty\"", "lemma \"map_aterms id t = t\"", "lemma map_types_id[simp]: \"map_types id t = t\"", "lemma map_types_id'[simp]: \"map_types (\\<lambda>a . a) t = t\"", "lemma add_tvarsT'_tvsT_pre[simp]: \"set (add_tvarsT' T acc) = set acc \\<union> tvsT T\"", "lemma add_tvars'_tvs_pre[simp]: \"set (add_tvars' t acc) = set acc \\<union> tvs t\"", "lemma \"add_tvarsT T acc = acc \\<union> tvsT T\"", "lemma add_vars'_fv_pre: \"set (add_vars' t acc) = set acc \\<union> fv t\"", "lemma strip_all_vars_strip_all_multiple_vars: \n  \"n\\<ge>length (strip_all_vars t) \\<Longrightarrow> strip_all_multiple_vars n t = strip_all_vars t\"", "lemma \"n\\<ge>length (strip_all_vars t) \\<Longrightarrow> strip_all_multiple_body n t = strip_all_body t\"", "lemma length_strip_all_multiple_vars: \"length (strip_all_multiple_vars n t) \\<le> n\"", "lemma prefix_strip_all_multiple_vars: \"prefix (strip_all_multiple_vars n t) (strip_all_vars t)\"", "lemma mk_all_list_empty[simp]: \"mk_all_list [] t = t\"", "lemma strip_all_single_var_is_all: \"strip_all_single_var t \\<noteq> None \\<longleftrightarrow> is_all t\"", "lemma \"is_all t \\<Longrightarrow> hd (strip_all_vars t) = the (strip_all_single_var t)\"", "lemma strip_all_body_single_simp[simp]: \"strip_all_body (strip_all_single_body t) = strip_all_body t\"", "lemma strip_all_body_single_simp'[simp]: \"strip_all_single_body (strip_all_body t) = strip_all_body t\"", "lemma strip_all_vars_step: \n  \"strip_all_single_var t = Some T \\<Longrightarrow> T # strip_all_vars (strip_all_single_body t) = strip_all_vars t\"", "lemma is_all_iff_strip_all_vars_not_empty: \"is_all t \\<longleftrightarrow> strip_all_vars t \\<noteq> []\"", "lemma strip_all_vars_bind_fv: \n  \"strip_all_vars (bind_fv2 v lev t) = (strip_all_vars t)\"", "lemma strip_all_vars_mk_all[simp]: \"strip_all_vars (mk_all s ty t) = ty # strip_all_vars t\"", "lemma strip_all_vars_mk_all_list:\n  \"\\<not>is_all t \\<Longrightarrow> strip_all_vars (mk_all_list l t) = rev (map snd l)\"", "lemma subst_bv_no_loose_unchanged:\n  assumes \"\\<And>x . x \\<ge> lev \\<Longrightarrow> \\<not> loose_bvar1 t x\"\n  assumes \"is_variable v\"\n  shows \"(subst_bv1 t lev v) = t\"", "lemma bind_fv2_no_occs_unchanged:\n  assumes \"\\<not> occs (case_prod Fv v) t\"\n  shows \"(bind_fv2 v lev t) = t\"", "lemma bind_fv2_subst_bv1_cancel:\n  assumes \"\\<And>x . x > lev \\<Longrightarrow> \\<not> loose_bvar1 t x\"\n  assumes \"\\<not> occs (case_prod Fv v)  t\"\n  shows \"bind_fv2 v lev (subst_bv1 t lev (case_prod Fv v)) = t\"", "lemma bind_fv_subst_bv_cancel:\n  assumes \"\\<And>x . x > 0 \\<Longrightarrow> \\<not> loose_bvar1 t x\"\n  assumes \"\\<not> occs (case_prod Fv v) t\"\n  shows \"bind_fv v (subst_bv (case_prod Fv v) t) = t\"", "lemma not_loose_bvar_imp_not_loose_bvar1_all_greater: \"\\<not> loose_bvar t lev \\<Longrightarrow> x>lev \\<Longrightarrow> \\<not> loose_bvar1 t x\"", "lemma mk_all'_subst_bv_strip_all_single_body_cancel:\n  assumes \"strip_all_single_var t = Some T\"\n  assumes \"is_closed t\"\n  assumes \"(name, T) \\<notin> fv t\"\n  shows \"mk_all name T (subst_bv (Fv name T) (strip_all_single_body t) ) = t\"", "lemma not_is_all_imp_strip_all_body_unchanged: \"\\<not> is_all t \\<Longrightarrow> strip_all_body t = t\"", "lemma no_loose_bvar_imp_no_subst_bvs: \"is_closed t \\<Longrightarrow> subst_bvs [] t = t\"", "lemma \"is_closed (Abs T t) \\<Longrightarrow> \\<not> loose_bvar t 1\"", "lemma bind_fv2_Fv_fv[simp]: \"fv (bind_fv2 (x, \\<tau>) lev t) = fv t - {(x,\\<tau>)}\"", "lemma mk_all_list_fv_unchanged: \"fv (mk_all_list l B) = fv B - set l\""], "translations": [["", "lemma tvsT_tsubstT: \"tvsT (tsubstT \\<sigma> \\<rho>) = \\<Union> {tvsT (\\<rho> a s) | a s. (a, s) \\<in> tvsT \\<sigma>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tvsT (tsubstT \\<sigma> \\<rho>) =\n    \\<Union> {tvsT (\\<rho> a s) |a s. (a, s) \\<in> tvsT \\<sigma>}", "by (induction \\<sigma>) fastforce+"], ["", "lemma tsubstT_cong: \n  \"(\\<forall>(v,S) \\<in> tvsT \\<sigma>. \\<rho>1 v = \\<rho>2 v) \\<Longrightarrow> tsubstT \\<sigma> \\<rho>1 = tsubstT \\<sigma> \\<rho>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(v, S)\\<in>tvsT \\<sigma>.\n       \\<rho>1 v = \\<rho>2 v \\<Longrightarrow>\n    tsubstT \\<sigma> \\<rho>1 = tsubstT \\<sigma> \\<rho>2", "by (induction \\<sigma>) fastforce+"], ["", "lemma tsubstT_ith: \"i < length Ts \\<Longrightarrow>  map (\\<lambda>T . tsubstT T \\<rho>) Ts ! i = tsubstT (Ts ! i) \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length Ts \\<Longrightarrow>\n    map (\\<lambda>T. tsubstT T \\<rho>) Ts ! i = tsubstT (Ts ! i) \\<rho>", "by simp"], ["", "lemma tsubstT_fun_typ_dist: \"tsubstT (T \\<rightarrow> T1) \\<rho> = tsubstT T \\<rho> \\<rightarrow> tsubstT T1 \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsubstT (T \\<rightarrow> T1) \\<rho> =\n    tsubstT T \\<rho> \\<rightarrow> tsubstT T1 \\<rho>", "by simp"], ["", "fun subst :: \"term \\<Rightarrow> (variable \\<Rightarrow> typ \\<Rightarrow> term) \\<Rightarrow> term\" where\n  \"subst (Ct s T) \\<rho> = Ct s T\"\n| \"subst (Fv v T) \\<rho> = \\<rho> v T\"\n| \"subst (Bv i) _ = Bv i\"\n| \"subst (Abs T t) \\<rho> = Abs T (subst t \\<rho>)\"\n| \"subst (t $ u) \\<rho> = subst t \\<rho> $ subst u \\<rho>\""], ["", "definition \"tinst t1 t2 \\<equiv> \\<exists>\\<rho>. tsubst t2 \\<rho> = t1\""], ["", "definition \"inst t1 t2 \\<equiv> \\<exists>\\<rho>. subst t2 \\<rho> = t1\""], ["", "fun SortsT :: \"typ \\<Rightarrow> sort set\" where\n  \"SortsT (Tv _ S) = {S}\"\n| \"SortsT (Ty _ Ts) = (\\<Union>T\\<in>set Ts . SortsT T)\""], ["", "fun Sorts :: \"term \\<Rightarrow> sort set\" where\n  \"Sorts (Ct _ T) = SortsT T\"\n| \"Sorts (Fv _ T) = SortsT T\"\n| \"Sorts (Bv _) = {}\"\n| \"Sorts (Abs T t) = SortsT T \\<union> Sorts t\"\n| \"Sorts (t $ u) = Sorts t \\<union> Sorts u\""], ["", "fun Types :: \"term \\<Rightarrow> typ set\" where\n  \"Types (Ct _ T) = {T}\"\n| \"Types (Fv _ T) = {T}\"\n| \"Types (Bv _) = {}\"\n| \"Types (Abs T t) =  insert T (Types t)\"\n| \"Types (t $ u) = Types t \\<union> Types u\""], ["", "abbreviation \"tvs_Set S \\<equiv> \\<Union>s\\<in>S . tvs s\""], ["", "abbreviation \"tvsT_Set S \\<equiv> \\<Union>s\\<in>S . tvsT s\""], ["", "(* All those sets are finite *)"], ["", "lemma finite_SortsT[simp]: \"finite (SortsT T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (SortsT T)", "by (induction T) auto"], ["", "lemma finite_Sorts[simp]: \"finite (Sorts t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Sorts t)", "by (induction t) auto"], ["", "lemma finite_Types[simp]: \"finite (Types t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (Types t)", "by (induction t) auto"], ["", "lemma finite_tvsT[simp]: \"finite (tvsT T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (tvsT T)", "by (induction T) auto"], ["", "lemma no_tvsT_imp_tsubsT_unchanged: \"tvsT T = {} \\<Longrightarrow> tsubstT T \\<rho> = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tvsT T = {} \\<Longrightarrow> tsubstT T \\<rho> = T", "by (induction T) (auto simp add: map_idI)"], ["", "lemma finite_fv[simp]: \"finite (fv t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fv t)", "by (induction t) auto"], ["", "lemma finite_tvs[simp]: \"finite (tvs t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (tvs t)", "by (induction t) auto"], ["", "lemma finite_FV: \"finite S \\<Longrightarrow> finite (FV S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> finite (FV S)", "by (induction S rule: finite_induct) auto"], ["", "lemma finite_tvs_Set: \"finite S \\<Longrightarrow> finite (tvs_Set S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> finite (tvs_Set S)", "by (induction S rule: finite_induct) auto"], ["", "lemma finite_tvsT_Set: \"finite S \\<Longrightarrow> finite (tvsT_Set S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> finite (tvsT_Set S)", "by (induction S rule: finite_induct) auto"], ["", "lemma no_tvs_imp_tsubst_unchanged: \"tvs t = {} \\<Longrightarrow> tsubst t \\<rho> = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tvs t = {} \\<Longrightarrow> tsubst t \\<rho> = t", "by (induction t) (auto simp add: map_idI no_tvsT_imp_tsubsT_unchanged)"], ["", "lemma no_fv_imp_subst_unchanged: \"fv t = {} \\<Longrightarrow> subst t \\<rho> = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv t = {} \\<Longrightarrow> subst t \\<rho> = t", "by (induction t) (auto simp add: map_idI)"], ["", "text\\<open>Functional(also executable) version of @{term has_typ}\\<close>"], ["", "fun typ_of1 :: \"typ list \\<Rightarrow> term \\<Rightarrow> typ option\" where\n  \"typ_of1 _ ( Ct _ T) = Some T\"\n| \"typ_of1 Ts (Bv i) = (if i < length Ts then Some (nth Ts i) else None)\"\n| \"typ_of1 _ (Fv _ T) = Some T\"\n| \"typ_of1 Ts (Abs T body) = Option.bind (typ_of1 (T#Ts) body) (\\<lambda>x. Some (T \\<rightarrow> x))\"\n| \"typ_of1 Ts (t $ u) = Option.bind (typ_of1 Ts u) (\\<lambda>U. Option.bind (typ_of1 Ts t) (\\<lambda>T. \n    case T of\n          Ty fun [T1,T2] \\<Rightarrow> if fun = STR ''fun'' then\n            if T1=U then Some T2 else None\n            else None\n        | _ \\<Rightarrow> None\n    ))\""], ["", "text\\<open>For historic reasons a lot of proofs/definitions are still in terms of @{term typ_of1} instead of\n@{term has_typ1}\\<close>"], ["", "lemma has_typ1_weaken_Ts: \"has_typ1 Ts t rT \\<Longrightarrow> has_typ1 (Ts@[T]) t rT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ts \\<turnstile>\\<^sub>\\<tau> t : rT \\<Longrightarrow>\n    Ts @ [T] \\<turnstile>\\<^sub>\\<tau> t : rT", "proof (induction arbitrary: rule: has_typ1.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ Ta. uu_ @ [T] \\<turnstile>\\<^sub>\\<tau> Ct uv_ Ta : Ta\n 2. \\<And>i Ts.\n       i < length Ts \\<Longrightarrow>\n       Ts @ [T] \\<turnstile>\\<^sub>\\<tau> Bv i : Ts ! i\n 3. \\<And>uw_ ux_ Ta. uw_ @ [T] \\<turnstile>\\<^sub>\\<tau> Fv ux_ Ta : Ta\n 4. \\<And>Ta Ts t T'.\n       \\<lbrakk>Ta # Ts \\<turnstile>\\<^sub>\\<tau> t : T';\n        (Ta # Ts) @ [T] \\<turnstile>\\<^sub>\\<tau> t : T'\\<rbrakk>\n       \\<Longrightarrow> Ts @\n                         [T] \\<turnstile>\\<^sub>\\<tau> Abs Ta\n                  t : Ta \\<rightarrow> T'\n 5. \\<And>Ts u U t Ta.\n       \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> u : U;\n        Ts @ [T] \\<turnstile>\\<^sub>\\<tau> u : U;\n        Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> Ta;\n        Ts @ [T] \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> Ta\\<rbrakk>\n       \\<Longrightarrow> Ts @ [T] \\<turnstile>\\<^sub>\\<tau> t $ u : Ta", "case (2 i Ts)"], ["proof (state)\nthis:\n  i < length Ts\n\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ Ta. uu_ @ [T] \\<turnstile>\\<^sub>\\<tau> Ct uv_ Ta : Ta\n 2. \\<And>i Ts.\n       i < length Ts \\<Longrightarrow>\n       Ts @ [T] \\<turnstile>\\<^sub>\\<tau> Bv i : Ts ! i\n 3. \\<And>uw_ ux_ Ta. uw_ @ [T] \\<turnstile>\\<^sub>\\<tau> Fv ux_ Ta : Ta\n 4. \\<And>Ta Ts t T'.\n       \\<lbrakk>Ta # Ts \\<turnstile>\\<^sub>\\<tau> t : T';\n        (Ta # Ts) @ [T] \\<turnstile>\\<^sub>\\<tau> t : T'\\<rbrakk>\n       \\<Longrightarrow> Ts @\n                         [T] \\<turnstile>\\<^sub>\\<tau> Abs Ta\n                  t : Ta \\<rightarrow> T'\n 5. \\<And>Ts u U t Ta.\n       \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> u : U;\n        Ts @ [T] \\<turnstile>\\<^sub>\\<tau> u : U;\n        Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> Ta;\n        Ts @ [T] \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> Ta\\<rbrakk>\n       \\<Longrightarrow> Ts @ [T] \\<turnstile>\\<^sub>\\<tau> t $ u : Ta", "hence \"has_typ1 (Ts @ [T]) (Bv i) ((Ts@[T]) ! i)\""], ["proof (prove)\nusing this:\n  i < length Ts\n\ngoal (1 subgoal):\n 1. Ts @ [T] \\<turnstile>\\<^sub>\\<tau> Bv i : (Ts @ [T]) ! i", "by (auto intro: has_typ1.intros(2))"], ["proof (state)\nthis:\n  Ts @ [T] \\<turnstile>\\<^sub>\\<tau> Bv i : (Ts @ [T]) ! i\n\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ Ta. uu_ @ [T] \\<turnstile>\\<^sub>\\<tau> Ct uv_ Ta : Ta\n 2. \\<And>i Ts.\n       i < length Ts \\<Longrightarrow>\n       Ts @ [T] \\<turnstile>\\<^sub>\\<tau> Bv i : Ts ! i\n 3. \\<And>uw_ ux_ Ta. uw_ @ [T] \\<turnstile>\\<^sub>\\<tau> Fv ux_ Ta : Ta\n 4. \\<And>Ta Ts t T'.\n       \\<lbrakk>Ta # Ts \\<turnstile>\\<^sub>\\<tau> t : T';\n        (Ta # Ts) @ [T] \\<turnstile>\\<^sub>\\<tau> t : T'\\<rbrakk>\n       \\<Longrightarrow> Ts @\n                         [T] \\<turnstile>\\<^sub>\\<tau> Abs Ta\n                  t : Ta \\<rightarrow> T'\n 5. \\<And>Ts u U t Ta.\n       \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> u : U;\n        Ts @ [T] \\<turnstile>\\<^sub>\\<tau> u : U;\n        Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> Ta;\n        Ts @ [T] \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> Ta\\<rbrakk>\n       \\<Longrightarrow> Ts @ [T] \\<turnstile>\\<^sub>\\<tau> t $ u : Ta", "then"], ["proof (chain)\npicking this:\n  Ts @ [T] \\<turnstile>\\<^sub>\\<tau> Bv i : (Ts @ [T]) ! i", "show ?case"], ["proof (prove)\nusing this:\n  Ts @ [T] \\<turnstile>\\<^sub>\\<tau> Bv i : (Ts @ [T]) ! i\n\ngoal (1 subgoal):\n 1. Ts @ [T] \\<turnstile>\\<^sub>\\<tau> Bv i : Ts ! i", "by (simp add: \"2.hyps\" nth_append)"], ["proof (state)\nthis:\n  Ts @ [T] \\<turnstile>\\<^sub>\\<tau> Bv i : Ts ! i\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ Ta. uu_ @ [T] \\<turnstile>\\<^sub>\\<tau> Ct uv_ Ta : Ta\n 2. \\<And>uw_ ux_ Ta. uw_ @ [T] \\<turnstile>\\<^sub>\\<tau> Fv ux_ Ta : Ta\n 3. \\<And>Ta Ts t T'.\n       \\<lbrakk>Ta # Ts \\<turnstile>\\<^sub>\\<tau> t : T';\n        (Ta # Ts) @ [T] \\<turnstile>\\<^sub>\\<tau> t : T'\\<rbrakk>\n       \\<Longrightarrow> Ts @\n                         [T] \\<turnstile>\\<^sub>\\<tau> Abs Ta\n                  t : Ta \\<rightarrow> T'\n 4. \\<And>Ts u U t Ta.\n       \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> u : U;\n        Ts @ [T] \\<turnstile>\\<^sub>\\<tau> u : U;\n        Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> Ta;\n        Ts @ [T] \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> Ta\\<rbrakk>\n       \\<Longrightarrow> Ts @ [T] \\<turnstile>\\<^sub>\\<tau> t $ u : Ta", "qed (auto intro: has_typ1.intros)"], ["", "thm less_Suc_eq nth_butlast"], ["", "lemma has_typ1_imp_typ_of1: \"has_typ1 Ts t ty \\<Longrightarrow> typ_of1 Ts t = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ts \\<turnstile>\\<^sub>\\<tau> t : ty \\<Longrightarrow>\n    typ_of1 Ts t = Some ty", "by (induction rule: has_typ1.induct) auto"], ["", "lemma typ_of1_imp_has_typ1: \"typ_of1 Ts t = Some ty \\<Longrightarrow> has_typ1 Ts t ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts t = Some ty \\<Longrightarrow>\n    Ts \\<turnstile>\\<^sub>\\<tau> t : ty", "proof (induction t arbitrary: Ts ty)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Ct x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Ct x1 x2 : ty\n 2. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Fv x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Fv x1 x2 : ty\n 3. \\<And>x Ts ty.\n       typ_of1 Ts (Bv x) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Bv x : ty\n 4. \\<And>x1 t Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t : ty;\n        typ_of1 Ts (Abs x1 t) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> Abs x1 t : ty\n 5. \\<And>t1 t2 Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t1 = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t1 : ty;\n        \\<And>Ts ty.\n           typ_of1 Ts t2 = Some ty \\<Longrightarrow>\n           Ts \\<turnstile>\\<^sub>\\<tau> t2 : ty;\n        typ_of1 Ts (t1 $ t2) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> t1 $ t2 : ty", "case (App t u)"], ["proof (state)\nthis:\n  typ_of1 ?Ts t = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> t : ?ty\n  typ_of1 ?Ts u = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> u : ?ty\n  typ_of1 Ts (t $ u) = Some ty\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Ct x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Ct x1 x2 : ty\n 2. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Fv x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Fv x1 x2 : ty\n 3. \\<And>x Ts ty.\n       typ_of1 Ts (Bv x) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Bv x : ty\n 4. \\<And>x1 t Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t : ty;\n        typ_of1 Ts (Abs x1 t) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> Abs x1 t : ty\n 5. \\<And>t1 t2 Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t1 = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t1 : ty;\n        \\<And>Ts ty.\n           typ_of1 Ts t2 = Some ty \\<Longrightarrow>\n           Ts \\<turnstile>\\<^sub>\\<tau> t2 : ty;\n        typ_of1 Ts (t1 $ t2) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> t1 $ t2 : ty", "from this"], ["proof (chain)\npicking this:\n  typ_of1 ?Ts t = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> t : ?ty\n  typ_of1 ?Ts u = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> u : ?ty\n  typ_of1 Ts (t $ u) = Some ty", "obtain U where U: \"typ_of1 Ts u = Some U\""], ["proof (prove)\nusing this:\n  typ_of1 ?Ts t = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> t : ?ty\n  typ_of1 ?Ts u = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> u : ?ty\n  typ_of1 Ts (t $ u) = Some ty\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        typ_of1 Ts u = Some U \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  typ_of1 Ts u = Some U\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Ct x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Ct x1 x2 : ty\n 2. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Fv x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Fv x1 x2 : ty\n 3. \\<And>x Ts ty.\n       typ_of1 Ts (Bv x) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Bv x : ty\n 4. \\<And>x1 t Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t : ty;\n        typ_of1 Ts (Abs x1 t) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> Abs x1 t : ty\n 5. \\<And>t1 t2 Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t1 = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t1 : ty;\n        \\<And>Ts ty.\n           typ_of1 Ts t2 = Some ty \\<Longrightarrow>\n           Ts \\<turnstile>\\<^sub>\\<tau> t2 : ty;\n        typ_of1 Ts (t1 $ t2) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> t1 $ t2 : ty", "from this App"], ["proof (chain)\npicking this:\n  typ_of1 Ts u = Some U\n  typ_of1 ?Ts t = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> t : ?ty\n  typ_of1 ?Ts u = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> u : ?ty\n  typ_of1 Ts (t $ u) = Some ty", "obtain T where T: \"typ_of1 Ts t = Some T\""], ["proof (prove)\nusing this:\n  typ_of1 Ts u = Some U\n  typ_of1 ?Ts t = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> t : ?ty\n  typ_of1 ?Ts u = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> u : ?ty\n  typ_of1 Ts (t $ u) = Some ty\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        typ_of1 Ts t = Some T \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  typ_of1 Ts t = Some T\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Ct x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Ct x1 x2 : ty\n 2. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Fv x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Fv x1 x2 : ty\n 3. \\<And>x Ts ty.\n       typ_of1 Ts (Bv x) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Bv x : ty\n 4. \\<And>x1 t Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t : ty;\n        typ_of1 Ts (Abs x1 t) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> Abs x1 t : ty\n 5. \\<And>t1 t2 Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t1 = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t1 : ty;\n        \\<And>Ts ty.\n           typ_of1 Ts t2 = Some ty \\<Longrightarrow>\n           Ts \\<turnstile>\\<^sub>\\<tau> t2 : ty;\n        typ_of1 Ts (t1 $ t2) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> t1 $ t2 : ty", "from U T App"], ["proof (chain)\npicking this:\n  typ_of1 Ts u = Some U\n  typ_of1 Ts t = Some T\n  typ_of1 ?Ts t = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> t : ?ty\n  typ_of1 ?Ts u = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> u : ?ty\n  typ_of1 Ts (t $ u) = Some ty", "obtain T2 where \"T = Ty STR ''fun'' [U, T2]\""], ["proof (prove)\nusing this:\n  typ_of1 Ts u = Some U\n  typ_of1 Ts t = Some T\n  typ_of1 ?Ts t = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> t : ?ty\n  typ_of1 ?Ts u = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> u : ?ty\n  typ_of1 Ts (t $ u) = Some ty\n\ngoal (1 subgoal):\n 1. (\\<And>T2.\n        T = U \\<rightarrow> T2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: bind_eq_Some_conv intro!: has_typ1.intros \n        split: if_splits typ.splits list.splits)"], ["proof (state)\nthis:\n  T = U \\<rightarrow> T2\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Ct x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Ct x1 x2 : ty\n 2. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Fv x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Fv x1 x2 : ty\n 3. \\<And>x Ts ty.\n       typ_of1 Ts (Bv x) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Bv x : ty\n 4. \\<And>x1 t Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t : ty;\n        typ_of1 Ts (Abs x1 t) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> Abs x1 t : ty\n 5. \\<And>t1 t2 Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t1 = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t1 : ty;\n        \\<And>Ts ty.\n           typ_of1 Ts t2 = Some ty \\<Longrightarrow>\n           Ts \\<turnstile>\\<^sub>\\<tau> t2 : ty;\n        typ_of1 Ts (t1 $ t2) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> t1 $ t2 : ty", "from this U T"], ["proof (chain)\npicking this:\n  T = U \\<rightarrow> T2\n  typ_of1 Ts u = Some U\n  typ_of1 Ts t = Some T", "show ?case"], ["proof (prove)\nusing this:\n  T = U \\<rightarrow> T2\n  typ_of1 Ts u = Some U\n  typ_of1 Ts t = Some T\n\ngoal (1 subgoal):\n 1. Ts \\<turnstile>\\<^sub>\\<tau> t $ u : ty", "using App"], ["proof (prove)\nusing this:\n  T = U \\<rightarrow> T2\n  typ_of1 Ts u = Some U\n  typ_of1 Ts t = Some T\n  typ_of1 ?Ts t = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> t : ?ty\n  typ_of1 ?Ts u = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> u : ?ty\n  typ_of1 Ts (t $ u) = Some ty\n\ngoal (1 subgoal):\n 1. Ts \\<turnstile>\\<^sub>\\<tau> t $ u : ty", "by (auto intro!: has_typ1.intros(5))"], ["proof (state)\nthis:\n  Ts \\<turnstile>\\<^sub>\\<tau> t $ u : ty\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Ct x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Ct x1 x2 : ty\n 2. \\<And>x1 x2 Ts ty.\n       typ_of1 Ts (Fv x1 x2) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Fv x1 x2 : ty\n 3. \\<And>x Ts ty.\n       typ_of1 Ts (Bv x) = Some ty \\<Longrightarrow>\n       Ts \\<turnstile>\\<^sub>\\<tau> Bv x : ty\n 4. \\<And>x1 t Ts ty.\n       \\<lbrakk>\\<And>Ts ty.\n                   typ_of1 Ts t = Some ty \\<Longrightarrow>\n                   Ts \\<turnstile>\\<^sub>\\<tau> t : ty;\n        typ_of1 Ts (Abs x1 t) = Some ty\\<rbrakk>\n       \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> Abs x1 t : ty", "qed (auto simp add: bind_eq_Some_conv intro!: has_typ1.intros split: if_splits)"], ["", "corollary has_typ1_iff_typ_of1[iff]: \"has_typ1 Ts t ty \\<longleftrightarrow> typ_of1 Ts t = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ts \\<turnstile>\\<^sub>\\<tau> t : ty = (typ_of1 Ts t = Some ty)", "using has_typ1_imp_typ_of1 typ_of1_imp_has_typ1"], ["proof (prove)\nusing this:\n  ?Ts \\<turnstile>\\<^sub>\\<tau> ?t : ?ty \\<Longrightarrow>\n  typ_of1 ?Ts ?t = Some ?ty\n  typ_of1 ?Ts ?t = Some ?ty \\<Longrightarrow>\n  ?Ts \\<turnstile>\\<^sub>\\<tau> ?t : ?ty\n\ngoal (1 subgoal):\n 1. Ts \\<turnstile>\\<^sub>\\<tau> t : ty = (typ_of1 Ts t = Some ty)", "by blast"], ["", "corollary has_typ_iff_typ_of[iff]: \"has_typ t ty \\<longleftrightarrow> typ_of t = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>\\<tau> t : ty = (typ_of t = Some ty)", "by (force simp add: has_typ_def typ_of_def)"], ["", "corollary typ_of_imp_has_typ: \"typ_of t = Some ty \\<Longrightarrow> has_typ t ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of t = Some ty \\<Longrightarrow> \\<turnstile>\\<^sub>\\<tau> t : ty", "by simp"], ["", "lemma typ_of1_weaken_Ts: \"typ_of1 Ts t = Some ty \\<Longrightarrow> typ_of1 (Ts@[T]) t = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts t = Some ty \\<Longrightarrow> typ_of1 (Ts @ [T]) t = Some ty", "using has_typ1_weaken_Ts"], ["proof (prove)\nusing this:\n  ?Ts \\<turnstile>\\<^sub>\\<tau> ?t : ?rT \\<Longrightarrow>\n  ?Ts @ [?T] \\<turnstile>\\<^sub>\\<tau> ?t : ?rT\n\ngoal (1 subgoal):\n 1. typ_of1 Ts t = Some ty \\<Longrightarrow> typ_of1 (Ts @ [T]) t = Some ty", "by simp"], ["", "lemma typ_of1_weaken:\n  assumes \"typ_of1 Ts t = Some T\"\n  shows \"typ_of1 (Ts@Ts') t = Some T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 (Ts @ Ts') t = Some T", "using assms"], ["proof (prove)\nusing this:\n  typ_of1 Ts t = Some T\n\ngoal (1 subgoal):\n 1. typ_of1 (Ts @ Ts') t = Some T", "by (induction Ts t arbitrary: Ts' T rule: typ_of1.induct)\n    (auto split: if_splits simp add: nth_append bind_eq_Some_conv)"], ["", "(* Instantiation of type variables produces instantiated types *)"], ["", "lemma has_typ1_tsubst: \n  \"has_typ1 Ts t T \\<Longrightarrow> has_typ1 (map (\\<lambda>T. tsubstT T \\<rho>) Ts) (tsubst t \\<rho>) (tsubstT T \\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ts \\<turnstile>\\<^sub>\\<tau> t : T \\<Longrightarrow>\n    map (\\<lambda>T. tsubstT T \\<rho>)\n     Ts \\<turnstile>\\<^sub>\\<tau> tsubst t \\<rho> : tsubstT T \\<rho>", "proof (induction rule: has_typ1.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ T.\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        uu_ \\<turnstile>\\<^sub>\\<tau> tsubst (Ct uv_ T)\n \\<rho> : tsubstT T \\<rho>\n 2. \\<And>i Ts.\n       i < length Ts \\<Longrightarrow>\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Bv i)\n\\<rho> : tsubstT (Ts ! i) \\<rho>\n 3. \\<And>uw_ ux_ T.\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        uw_ \\<turnstile>\\<^sub>\\<tau> tsubst (Fv ux_ T)\n \\<rho> : tsubstT T \\<rho>\n 4. \\<And>T Ts t T'.\n       \\<lbrakk>T # Ts \\<turnstile>\\<^sub>\\<tau> t : T';\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         (T #\n          Ts) \\<turnstile>\\<^sub>\\<tau> tsubst t\n   \\<rho> : tsubstT T' \\<rho>\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>T. tsubstT T \\<rho>)\n                          Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Abs T t)\n                  \\<rho> : tsubstT (T \\<rightarrow> T') \\<rho>\n 5. \\<And>Ts u U t T.\n       \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> u : U;\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         Ts \\<turnstile>\\<^sub>\\<tau> tsubst u \\<rho> : tsubstT U \\<rho>;\n        Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> T;\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         Ts \\<turnstile>\\<^sub>\\<tau> tsubst t\n \\<rho> : tsubstT (U \\<rightarrow> T) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>T. tsubstT T \\<rho>)\n                          Ts \\<turnstile>\\<^sub>\\<tau> tsubst (t $ u)\n                  \\<rho> : tsubstT T \\<rho>", "case (2 i Ts)"], ["proof (state)\nthis:\n  i < length Ts\n\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ T.\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        uu_ \\<turnstile>\\<^sub>\\<tau> tsubst (Ct uv_ T)\n \\<rho> : tsubstT T \\<rho>\n 2. \\<And>i Ts.\n       i < length Ts \\<Longrightarrow>\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Bv i)\n\\<rho> : tsubstT (Ts ! i) \\<rho>\n 3. \\<And>uw_ ux_ T.\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        uw_ \\<turnstile>\\<^sub>\\<tau> tsubst (Fv ux_ T)\n \\<rho> : tsubstT T \\<rho>\n 4. \\<And>T Ts t T'.\n       \\<lbrakk>T # Ts \\<turnstile>\\<^sub>\\<tau> t : T';\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         (T #\n          Ts) \\<turnstile>\\<^sub>\\<tau> tsubst t\n   \\<rho> : tsubstT T' \\<rho>\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>T. tsubstT T \\<rho>)\n                          Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Abs T t)\n                  \\<rho> : tsubstT (T \\<rightarrow> T') \\<rho>\n 5. \\<And>Ts u U t T.\n       \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> u : U;\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         Ts \\<turnstile>\\<^sub>\\<tau> tsubst u \\<rho> : tsubstT U \\<rho>;\n        Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> T;\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         Ts \\<turnstile>\\<^sub>\\<tau> tsubst t\n \\<rho> : tsubstT (U \\<rightarrow> T) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>T. tsubstT T \\<rho>)\n                          Ts \\<turnstile>\\<^sub>\\<tau> tsubst (t $ u)\n                  \\<rho> : tsubstT T \\<rho>", "(* tsubst_ith must be applied reversed, in this direction it can cause simplifier to loop *)"], ["proof (state)\nthis:\n  i < length Ts\n\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ T.\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        uu_ \\<turnstile>\\<^sub>\\<tau> tsubst (Ct uv_ T)\n \\<rho> : tsubstT T \\<rho>\n 2. \\<And>i Ts.\n       i < length Ts \\<Longrightarrow>\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Bv i)\n\\<rho> : tsubstT (Ts ! i) \\<rho>\n 3. \\<And>uw_ ux_ T.\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        uw_ \\<turnstile>\\<^sub>\\<tau> tsubst (Fv ux_ T)\n \\<rho> : tsubstT T \\<rho>\n 4. \\<And>T Ts t T'.\n       \\<lbrakk>T # Ts \\<turnstile>\\<^sub>\\<tau> t : T';\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         (T #\n          Ts) \\<turnstile>\\<^sub>\\<tau> tsubst t\n   \\<rho> : tsubstT T' \\<rho>\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>T. tsubstT T \\<rho>)\n                          Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Abs T t)\n                  \\<rho> : tsubstT (T \\<rightarrow> T') \\<rho>\n 5. \\<And>Ts u U t T.\n       \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> u : U;\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         Ts \\<turnstile>\\<^sub>\\<tau> tsubst u \\<rho> : tsubstT U \\<rho>;\n        Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> T;\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         Ts \\<turnstile>\\<^sub>\\<tau> tsubst t\n \\<rho> : tsubstT (U \\<rightarrow> T) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>T. tsubstT T \\<rho>)\n                          Ts \\<turnstile>\\<^sub>\\<tau> tsubst (t $ u)\n                  \\<rho> : tsubstT T \\<rho>", "then"], ["proof (chain)\npicking this:\n  i < length Ts", "show ?case"], ["proof (prove)\nusing this:\n  i < length Ts\n\ngoal (1 subgoal):\n 1. map (\\<lambda>T. tsubstT T \\<rho>)\n     Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Bv i)\n                                   \\<rho> : tsubstT (Ts ! i) \\<rho>", "using tsubstT_ith"], ["proof (prove)\nusing this:\n  i < length Ts\n  ?i < length ?Ts \\<Longrightarrow>\n  map (\\<lambda>T. tsubstT T ?\\<rho>) ?Ts ! ?i = tsubstT (?Ts ! ?i) ?\\<rho>\n\ngoal (1 subgoal):\n 1. map (\\<lambda>T. tsubstT T \\<rho>)\n     Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Bv i)\n                                   \\<rho> : tsubstT (Ts ! i) \\<rho>", "by (metis has_typ1.intros(2) length_map tsubst.simps(3))"], ["proof (state)\nthis:\n  map (\\<lambda>T. tsubstT T \\<rho>)\n   Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Bv i)\n                                 \\<rho> : tsubstT (Ts ! i) \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T.\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        uu_ \\<turnstile>\\<^sub>\\<tau> tsubst (Ct uv_ T)\n \\<rho> : tsubstT T \\<rho>\n 2. \\<And>uw_ ux_ T.\n       map (\\<lambda>T. tsubstT T \\<rho>)\n        uw_ \\<turnstile>\\<^sub>\\<tau> tsubst (Fv ux_ T)\n \\<rho> : tsubstT T \\<rho>\n 3. \\<And>T Ts t T'.\n       \\<lbrakk>T # Ts \\<turnstile>\\<^sub>\\<tau> t : T';\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         (T #\n          Ts) \\<turnstile>\\<^sub>\\<tau> tsubst t\n   \\<rho> : tsubstT T' \\<rho>\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>T. tsubstT T \\<rho>)\n                          Ts \\<turnstile>\\<^sub>\\<tau> tsubst (Abs T t)\n                  \\<rho> : tsubstT (T \\<rightarrow> T') \\<rho>\n 4. \\<And>Ts u U t T.\n       \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> u : U;\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         Ts \\<turnstile>\\<^sub>\\<tau> tsubst u \\<rho> : tsubstT U \\<rho>;\n        Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> T;\n        map (\\<lambda>T. tsubstT T \\<rho>)\n         Ts \\<turnstile>\\<^sub>\\<tau> tsubst t\n \\<rho> : tsubstT (U \\<rightarrow> T) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>T. tsubstT T \\<rho>)\n                          Ts \\<turnstile>\\<^sub>\\<tau> tsubst (t $ u)\n                  \\<rho> : tsubstT T \\<rho>", "qed (auto simp add: tsubstT_fun_typ_dist intro: has_typ1.intros)"], ["", "corollary has_typ1_unique: \n  assumes \"has_typ1 \\<tau>s t \\<tau>1\" and \"has_typ1 \\<tau>s t \\<tau>2\" shows \"\\<tau>1 = \\<tau>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>1 = \\<tau>2", "using assms"], ["proof (prove)\nusing this:\n  \\<tau>s \\<turnstile>\\<^sub>\\<tau> t : \\<tau>1\n  \\<tau>s \\<turnstile>\\<^sub>\\<tau> t : \\<tau>2\n\ngoal (1 subgoal):\n 1. \\<tau>1 = \\<tau>2", "by (metis has_typ1_imp_typ_of1 option.inject)"], ["", "hide_fact typ_of_def"], ["", "lemma typ_of_def: \"typ_of t \\<equiv> typ_of1 [] t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of t \\<equiv> typ_of1 [] t", "by (smt has_typ1_iff_typ_of1 has_typ_def has_typ_iff_typ_of not_None_eq)"], ["", "text\\<open>Loose bound variables\\<close>"], ["", "fun loose_bvar :: \"term \\<Rightarrow> nat \\<Rightarrow> bool\" where\n  \"loose_bvar (Bv i) k \\<longleftrightarrow> i \\<ge> k\"\n| \"loose_bvar (t $ u) k \\<longleftrightarrow> loose_bvar t k \\<or> loose_bvar u k\"\n| \"loose_bvar (Abs _ t) k = loose_bvar t (k+1)\"\n| \"loose_bvar _ _ = False\""], ["", "fun loose_bvar1 :: \"term \\<Rightarrow> nat \\<Rightarrow> bool\" where\n  \"loose_bvar1 (Bv i) k \\<longleftrightarrow> i = k\"\n| \"loose_bvar1 (t $ u) k \\<longleftrightarrow> loose_bvar1 t k \\<or> loose_bvar1 u k\"\n| \"loose_bvar1 (Abs _ t) k = loose_bvar1 t (k+1)\"\n| \"loose_bvar1 _ _ = False\""], ["", "lemma loose_bvar1_imp_loose_bvar: \"loose_bvar1 t n \\<Longrightarrow> loose_bvar t n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. loose_bvar1 t n \\<Longrightarrow> loose_bvar t n", "by (induction t arbitrary: n) auto"], ["", "lemma not_loose_bvar_imp_not_loose_bvar1: \"\\<not> loose_bvar t n \\<Longrightarrow> \\<not> loose_bvar1 t n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t n \\<Longrightarrow> \\<not> loose_bvar1 t n", "by (induction t arbitrary: n) auto"], ["", "lemma loose_bvar_iff_exist_loose_bvar1: \"loose_bvar t lev \\<longleftrightarrow> (\\<exists>lev'\\<ge>lev. loose_bvar1 t lev')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. loose_bvar t lev = (\\<exists>lev'\\<ge>lev. loose_bvar1 t lev')", "by (induction t arbitrary: lev) (auto dest: Suc_le_D)"], ["", "definition \"is_open t \\<equiv> loose_bvar t 0\""], ["", "abbreviation \"is_closed t \\<equiv> \\<not> is_open t\""], ["", "definition \"is_dependent t \\<equiv> loose_bvar1 t 0\""], ["", "lemma loose_bvar_Suc: \"loose_bvar t (Suc k) \\<Longrightarrow> loose_bvar t k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. loose_bvar t (Suc k) \\<Longrightarrow> loose_bvar t k", "by (induction t arbitrary: k) auto"], ["", "lemma loose_bvar_leq: \"k\\<ge>p \\<Longrightarrow> loose_bvar t k \\<Longrightarrow> loose_bvar t p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<le> k; loose_bvar t k\\<rbrakk>\n    \\<Longrightarrow> loose_bvar t p", "by (induction rule: inc_induct) (use loose_bvar_Suc in auto)"], ["", "lemma has_typ1_imp_no_loose_bvar: \"has_typ1 Ts t ty \\<Longrightarrow> \\<not> loose_bvar t (length Ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ts \\<turnstile>\\<^sub>\\<tau> t : ty \\<Longrightarrow>\n    \\<not> loose_bvar t (length Ts)", "by (induction rule: has_typ1.induct) auto"], ["", "corollary has_typ_imp_closed: \"has_typ t ty \\<Longrightarrow> \\<not> is_open t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>\\<tau> t : ty \\<Longrightarrow> is_closed t", "unfolding is_open_def has_typ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<turnstile>\\<^sub>\\<tau> t : ty \\<Longrightarrow>\n    \\<not> loose_bvar t 0", "using has_typ1_imp_no_loose_bvar"], ["proof (prove)\nusing this:\n  ?Ts \\<turnstile>\\<^sub>\\<tau> ?t : ?ty \\<Longrightarrow>\n  \\<not> loose_bvar ?t (length ?Ts)\n\ngoal (1 subgoal):\n 1. [] \\<turnstile>\\<^sub>\\<tau> t : ty \\<Longrightarrow>\n    \\<not> loose_bvar t 0", "by fastforce"], ["", "corollary typ_of_imp_closed: \"typ_of t = Some ty \\<Longrightarrow> \\<not> is_open t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of t = Some ty \\<Longrightarrow> is_closed t", "by (simp add: has_typ_imp_closed)"], ["", "text\\<open>Subterms\\<close>"], ["", "(* probably ugly for proofs... *)"], ["", "fun exists_subterm :: \"(term \\<Rightarrow> bool) \\<Rightarrow> term \\<Rightarrow> bool\" where\n  \"exists_subterm P t \\<longleftrightarrow> P t \\<or> (case t of\n      (t $ u) \\<Rightarrow> exists_subterm P t \\<or> exists_subterm P u\n    | Abs ty body \\<Rightarrow> exists_subterm P body\n    | _ \\<Rightarrow> False)\""], ["", "(* Is this better? *)"], ["", "fun exists_subterm' :: \"(term \\<Rightarrow> bool) \\<Rightarrow> term \\<Rightarrow> bool\" where\n  \"exists_subterm' P (t $ u) \\<longleftrightarrow> P (t $ u) \\<or> exists_subterm' P t \\<or> exists_subterm' P u\"\n| \"exists_subterm' P (Abs ty body) \\<longleftrightarrow> P (Abs ty body) \\<or> exists_subterm' P body\"\n| \"exists_subterm' P t \\<longleftrightarrow>  P t\""], ["", "lemma exists_subterm_iff_exists_subterm': \"exists_subterm P t \\<longleftrightarrow> exists_subterm' P t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exists_subterm P t = exists_subterm' P t", "by (induction t) auto"], ["", "lemma \"exists_subterm (\\<lambda>t. t=Fv idx T) t \\<longleftrightarrow> (idx, T) \\<in> fv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exists_subterm (\\<lambda>t. t = Fv idx T) t = ((idx, T) \\<in> fv t)", "by (induction t) auto"], ["", "(* Fairly old, however still needed for some proofs about \"subterms\" *)\n(* Must have no loose bounds in t, from Logic.ML*)"], ["", "abbreviation \"occs t u \\<equiv> exists_subterm (\\<lambda>s. t = s) u\""], ["", "lemma occs_Fv_eq_elem_fv: \"occs (Fv v S) t \\<longleftrightarrow> (v, S) \\<in> fv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. occs (Fv v S) t = ((v, S) \\<in> fv t)", "by (induction t) auto"], ["", "lemma bind_fv2_unchanged: \n  \"\\<not>loose_bvar tm lev \\<Longrightarrow> bind_fv2 v lev tm = tm \\<Longrightarrow> v \\<notin> fv tm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> loose_bvar tm lev; bind_fv2 v lev tm = tm\\<rbrakk>\n    \\<Longrightarrow> v \\<notin> fv tm", "by (induction v lev tm rule: bind_fv2.induct) auto"], ["", "lemma bind_fv2_unchanged': \n  \"\\<not>loose_bvar tm lev \\<Longrightarrow> bind_fv2 v lev tm = tm \\<Longrightarrow> \\<not> occs (case_prod Fv v) tm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> loose_bvar tm lev; bind_fv2 v lev tm = tm\\<rbrakk>\n    \\<Longrightarrow> \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                              tm", "by (induction v lev tm rule: bind_fv2.induct) auto"], ["", "lemma bind_fv2_changed: \n  \"bind_fv2 v lev tm \\<noteq> tm \\<Longrightarrow> v \\<in> fv tm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 v lev tm \\<noteq> tm \\<Longrightarrow> v \\<in> fv tm", "by (induction v lev tm rule: bind_fv2.induct) (auto split: if_splits)"], ["", "lemma bind_fv2_changed': \n  \"bind_fv2 v lev tm \\<noteq> tm \\<Longrightarrow> occs (case_prod Fv v) tm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 v lev tm \\<noteq> tm \\<Longrightarrow>\n    occs (case v of (x, xa) \\<Rightarrow> Fv x xa) tm", "by (induction v lev tm rule: bind_fv2.induct) (auto split: if_splits)"], ["", "corollary bind_fv_changed: \"bind_fv v tm \\<noteq> tm \\<Longrightarrow> v \\<in> fv tm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv v tm \\<noteq> tm \\<Longrightarrow> v \\<in> fv tm", "unfolding is_open_def bind_fv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 v 0 tm \\<noteq> tm \\<Longrightarrow> v \\<in> fv tm", "using bind_fv2_changed"], ["proof (prove)\nusing this:\n  bind_fv2 ?v ?lev ?tm \\<noteq> ?tm \\<Longrightarrow> ?v \\<in> fv ?tm\n\ngoal (1 subgoal):\n 1. bind_fv2 v 0 tm \\<noteq> tm \\<Longrightarrow> v \\<in> fv tm", "by simp"], ["", "corollary bind_fv_changed': \"bind_fv v tm \\<noteq> tm \\<Longrightarrow> occs (case_prod Fv v) tm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv v tm \\<noteq> tm \\<Longrightarrow>\n    occs (case v of (x, xa) \\<Rightarrow> Fv x xa) tm", "unfolding is_open_def bind_fv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 v 0 tm \\<noteq> tm \\<Longrightarrow>\n    occs (case v of (x, xa) \\<Rightarrow> Fv x xa) tm", "using bind_fv2_changed'"], ["proof (prove)\nusing this:\n  bind_fv2 ?v ?lev ?tm \\<noteq> ?tm \\<Longrightarrow>\n  occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa) ?tm\n\ngoal (1 subgoal):\n 1. bind_fv2 v 0 tm \\<noteq> tm \\<Longrightarrow>\n    occs (case v of (x, xa) \\<Rightarrow> Fv x xa) tm", "by simp"], ["", "corollary bind_fv_unchanged: \"(x,\\<tau>) \\<notin> fv t \\<Longrightarrow> bind_fv (x,\\<tau>) t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, \\<tau>) \\<notin> fv t \\<Longrightarrow> bind_fv (x, \\<tau>) t = t", "using bind_fv_changed"], ["proof (prove)\nusing this:\n  bind_fv ?v ?tm \\<noteq> ?tm \\<Longrightarrow> ?v \\<in> fv ?tm\n\ngoal (1 subgoal):\n 1. (x, \\<tau>) \\<notin> fv t \\<Longrightarrow> bind_fv (x, \\<tau>) t = t", "by auto"], ["", "inductive_cases has_typ1_app_elim: \"has_typ1 Ts (t $ u) R\""], ["", "lemma has_typ1_arg_typ: \"has_typ1 Ts (t $ u) R \\<Longrightarrow> has_typ1 Ts u U \\<Longrightarrow> has_typ1 Ts t (U \\<rightarrow> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> t $ u : R;\n     Ts \\<turnstile>\\<^sub>\\<tau> u : U\\<rbrakk>\n    \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> R", "using has_typ1_app_elim"], ["proof (prove)\nusing this:\n  \\<lbrakk>?Ts \\<turnstile>\\<^sub>\\<tau> ?t $ ?u : ?R;\n   \\<And>U.\n      \\<lbrakk>typ_of1 ?Ts ?u = Some U;\n       typ_of1 ?Ts ?t = Some (U \\<rightarrow> ?R)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> t $ u : R;\n     Ts \\<turnstile>\\<^sub>\\<tau> u : U\\<rbrakk>\n    \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> R", "by (metis has_typ1_imp_typ_of1 option.inject typ_of1_imp_has_typ1)"], ["", "lemma has_typ1_fun_typ: \"has_typ1 Ts (t $ u) R \\<Longrightarrow> has_typ1 Ts t (U \\<rightarrow> R) \\<Longrightarrow> has_typ1 Ts u U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ts \\<turnstile>\\<^sub>\\<tau> t $ u : R;\n     Ts \\<turnstile>\\<^sub>\\<tau> t : U \\<rightarrow> R\\<rbrakk>\n    \\<Longrightarrow> Ts \\<turnstile>\\<^sub>\\<tau> u : U", "by (cases rule: has_typ1_app_elim[of Ts t u R \"has_typ1 Ts u U\"]) (use has_typ1_unique in auto)"], ["", "lemma typ_of1_arg_typ: \n  \"typ_of1 Ts (t $ u) = Some R \\<Longrightarrow> typ_of1 Ts u = Some U \\<Longrightarrow> typ_of1 Ts t = Some (U \\<rightarrow> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 Ts (t $ u) = Some R; typ_of1 Ts u = Some U\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts t = Some (U \\<rightarrow> R)", "using has_typ1_iff_typ_of1 has_typ1_arg_typ"], ["proof (prove)\nusing this:\n  ?Ts \\<turnstile>\\<^sub>\\<tau> ?t : ?ty = (typ_of1 ?Ts ?t = Some ?ty)\n  \\<lbrakk>?Ts \\<turnstile>\\<^sub>\\<tau> ?t $ ?u : ?R;\n   ?Ts \\<turnstile>\\<^sub>\\<tau> ?u : ?U\\<rbrakk>\n  \\<Longrightarrow> ?Ts \\<turnstile>\\<^sub>\\<tau> ?t : ?U \\<rightarrow> ?R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 Ts (t $ u) = Some R; typ_of1 Ts u = Some U\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts t = Some (U \\<rightarrow> R)", "by simp"], ["", "corollary typ_of_arg: \"typ_of (t$u) = Some R \\<Longrightarrow> typ_of u = Some T \\<Longrightarrow> typ_of t = Some (T \\<rightarrow> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of (t $ u) = Some R; typ_of u = Some T\\<rbrakk>\n    \\<Longrightarrow> typ_of t = Some (T \\<rightarrow> R)", "by (metis typ_of1_arg_typ typ_of_def)"], ["", "lemma typ_of1_fun_typ: \n  \"typ_of1 Ts (t $ u) = Some R \\<Longrightarrow> typ_of1 Ts t = Some (U \\<rightarrow> R) \\<Longrightarrow> typ_of1 Ts u = Some U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 Ts (t $ u) = Some R;\n     typ_of1 Ts t = Some (U \\<rightarrow> R)\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts u = Some U", "using has_typ1_iff_typ_of1 has_typ1_fun_typ"], ["proof (prove)\nusing this:\n  ?Ts \\<turnstile>\\<^sub>\\<tau> ?t : ?ty = (typ_of1 ?Ts ?t = Some ?ty)\n  \\<lbrakk>?Ts \\<turnstile>\\<^sub>\\<tau> ?t $ ?u : ?R;\n   ?Ts \\<turnstile>\\<^sub>\\<tau> ?t : ?U \\<rightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?Ts \\<turnstile>\\<^sub>\\<tau> ?u : ?U\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 Ts (t $ u) = Some R;\n     typ_of1 Ts t = Some (U \\<rightarrow> R)\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts u = Some U", "by blast"], ["", "corollary typ_of_fun: \"typ_of (t$u) = Some R \\<Longrightarrow> typ_of t = Some (U \\<rightarrow> R) \\<Longrightarrow> typ_of u = Some U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of (t $ u) = Some R;\n     typ_of t = Some (U \\<rightarrow> R)\\<rbrakk>\n    \\<Longrightarrow> typ_of u = Some U", "by (metis typ_of1_fun_typ typ_of_def)"], ["", "lemma typ_of_eta_expand: \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow> typ_of (Abs \\<tau> (f $ Bv 0)) = Some (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n    typ_of (Abs \\<tau> (f $ Bv 0)) = Some (\\<tau> \\<rightarrow> \\<tau>')", "using typ_of1_weaken"], ["proof (prove)\nusing this:\n  typ_of1 ?Ts ?t = Some ?T \\<Longrightarrow>\n  typ_of1 (?Ts @ ?Ts') ?t = Some ?T\n\ngoal (1 subgoal):\n 1. typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n    typ_of (Abs \\<tau> (f $ Bv 0)) = Some (\\<tau> \\<rightarrow> \\<tau>')", "by (fastforce simp add: bind_eq_Some_conv typ_of_def)"], ["", "lemma bind_fv2_preserves_type:\n  assumes \"typ_of1 Ts t = Some ty\" \n  shows \"typ_of1 (Ts@[T]) (bind_fv2 (v, T) (length Ts) t) = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 (Ts @ [T]) (bind_fv2 (v, T) (length Ts) t) = Some ty", "using assms"], ["proof (prove)\nusing this:\n  typ_of1 Ts t = Some ty\n\ngoal (1 subgoal):\n 1. typ_of1 (Ts @ [T]) (bind_fv2 (v, T) (length Ts) t) = Some ty", "by (induction \"(v, T)\" \"length Ts\" t arbitrary: T Ts ty rule: bind_fv2.induct)\n    (force simp add: bind_eq_Some_conv nth_append split: if_splits)+"], ["", "lemma typ_of_Abs_bind_fv:\n  assumes \"typ_of A = Some ty\"\n  shows \"typ_of (Abs bT (bind_fv (v, bT) A)) = Some (bT \\<rightarrow> ty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs_fv v bT A) = Some (bT \\<rightarrow> ty)", "using bind_fv2_preserves_type bind_fv_def assms typ_of_def"], ["proof (prove)\nusing this:\n  typ_of1 ?Ts ?t = Some ?ty \\<Longrightarrow>\n  typ_of1 (?Ts @ [?T]) (bind_fv2 (?v, ?T) (length ?Ts) ?t) = Some ?ty\n  bind_fv ?vT ?t = bind_fv2 ?vT 0 ?t\n  typ_of A = Some ty\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. typ_of (Abs_fv v bT A) = Some (bT \\<rightarrow> ty)", "by fastforce"], ["", "corollary typ_of_Abs_fv:\n  assumes \"typ_of A = Some ty\"\n  shows \"typ_of (Abs_fv v bT A) = Some (bT \\<rightarrow> ty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs_fv v bT A) = Some (bT \\<rightarrow> ty)", "using assms typ_of_Abs_bind_fv typ_of_def"], ["proof (prove)\nusing this:\n  typ_of A = Some ty\n  typ_of ?A = Some ?ty \\<Longrightarrow>\n  typ_of (Abs_fv ?v ?bT ?A) = Some (?bT \\<rightarrow> ?ty)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. typ_of (Abs_fv v bT A) = Some (bT \\<rightarrow> ty)", "by simp"], ["", "lemma typ_of_mk_all:\n  assumes \"typ_of A = Some propT\" \n  shows \"typ_of (mk_all x ty A) = Some propT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (mk_all x ty A) = Some propT", "using typ_of_Abs_bind_fv[OF assms, of ty]"], ["proof (prove)\nusing this:\n  typ_of (Abs_fv ?v ty A) = Some (ty \\<rightarrow> propT)\n\ngoal (1 subgoal):\n 1. typ_of (mk_all x ty A) = Some propT", "by (auto simp add: typ_of_def)"], ["", "fun incr_bv :: \"nat \\<Rightarrow> nat \\<Rightarrow> term \\<Rightarrow> term\" where\n  \"incr_bv inc n (Bv i) = (if i \\<ge> n then Bv (i+inc) else Bv i)\"\n| \"incr_bv inc n (Abs T body) = Abs T (incr_bv inc (n+1) body)\"\n| \"incr_bv inc n (App f t) = App (incr_bv inc n f) (incr_bv inc n t)\"\n| \"incr_bv _   _ u = u\""], ["", "(* Bridging *)"], ["", "lemma lift_def: \"lift t n = incr_bv 1 n t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift t n = incr_bv 1 n t", "by (induction t n rule: lift.induct) auto"], ["", "declare lift.simps[simp del]"], ["", "declare lift_def[simp]"], ["", "definition \"incr_boundvars inc t = incr_bv inc 0 t\""], ["", "fun decr :: \"nat \\<Rightarrow> term \\<Rightarrow> term\" where\n  \"decr lev (Bv i) = (if i \\<ge> lev then Bv (i - 1) else Bv i)\"\n| \"decr lev (Abs T t) = Abs T (decr (lev + 1) t)\"\n| \"decr lev (t $ u) = (decr lev t $ decr lev u)\"\n| \"decr _ t = t\""], ["", "lemma incr_bv_0[simp]: \"incr_bv 0 lev t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. incr_bv 0 lev t = t", "by (induction t arbitrary: lev) auto"], ["", "lemma loose_bvar_incr_bvar: \"loose_bvar t lev \\<longleftrightarrow> loose_bvar (incr_bv inc lev t) (lev+inc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. loose_bvar t lev = loose_bvar (incr_bv inc lev t) (lev + inc)", "by (induction t arbitrary: inc lev) force+"], ["", "lemma no_loose_bvar_no_incr[simp]: \"\\<not> loose_bvar t lev \\<Longrightarrow> incr_bv inc lev t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t lev \\<Longrightarrow> incr_bv inc lev t = t", "by (induction t arbitrary: inc lev) auto"], ["", "lemma is_close_no_incr_boundvars[simp]: \"is_closed t \\<Longrightarrow> incr_boundvars inc t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed t \\<Longrightarrow> incr_boundvars inc t = t", "using no_loose_bvar_no_incr"], ["proof (prove)\nusing this:\n  \\<not> loose_bvar ?t ?lev \\<Longrightarrow> incr_bv ?inc ?lev ?t = ?t\n\ngoal (1 subgoal):\n 1. is_closed t \\<Longrightarrow> incr_boundvars inc t = t", "by (simp add: incr_boundvars_def is_open_def)"], ["", "lemma fv_incr_bv [simp]: \"fv (incr_bv inc lev t) = fv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (incr_bv inc lev t) = fv t", "by (induction inc lev t rule: incr_bv.induct) auto"], ["", "lemma fv_incr_boundvars [simp]: \"fv (incr_boundvars inc t) = fv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (incr_boundvars inc t) = fv t", "by (simp add: incr_boundvars_def)"], ["", "lemma loose_bvar_decr: \"\\<not> loose_bvar t k \\<Longrightarrow> \\<not> loose_bvar (decr k t) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t k \\<Longrightarrow> \\<not> loose_bvar (decr k t) k", "by (induction t k rule: loose_bvar.induct) auto"], ["", "lemma loose_bvar_decr_unchanged[simp]: \"\\<not> loose_bvar t k \\<Longrightarrow> decr k t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t k \\<Longrightarrow> decr k t = t", "by (induction t k rule: loose_bvar.induct) auto"], ["", "lemma is_closed_decr_unchanged[simp]: \"is_closed t \\<Longrightarrow> decr 0 t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed t \\<Longrightarrow> decr 0 t = t", "by (simp add: is_open_def)"], ["", "fun subst_bv1 :: \"term \\<Rightarrow> nat \\<Rightarrow> term \\<Rightarrow> term\" where\n  \"subst_bv1 (Bv i) lev u = (if i < lev then Bv i\n    else if i = lev then (incr_boundvars lev u)\n    else (Bv (i - 1)))\"\n| \"subst_bv1 (Abs T body) lev u = Abs T (subst_bv1 body (lev + 1) u)\"\n| \"subst_bv1 (f $ t) lev u = subst_bv1 f lev u $ subst_bv1 t lev u\"\n| \"subst_bv1 t _ _ = t\""], ["", "lemma incr_bv_combine: \"incr_bv m k (incr_bv n k s) = incr_bv (m+n) k s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. incr_bv m k (incr_bv n k s) = incr_bv (m + n) k s", "by (induction s arbitrary: k) auto"], ["", "lemma substn_subst_n : \"subst_bv1 t n s = subst_bv2 t n (incr_bv n 0 s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv1 t n s = subst_bv2 t n (incr_bv n 0 s)", "by (induct t arbitrary: n) (auto simp add: incr_boundvars_def incr_bv_combine)"], ["", "theorem substn_subst_0: \"subst_bv1 t 0 s = subst_bv2 t 0 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv1 t 0 s = subst_bv2 t 0 s", "by (simp add: substn_subst_n)"], ["", "corollary substn_subst_0': \"subst_bv s t = subst_bv2 t 0 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv s t = subst_bv2 t 0 s", "using subst_bv_def substn_subst_0"], ["proof (prove)\nusing this:\n  subst_bv ?u ?t = subst_bv2 ?t 0 ?u\n  subst_bv1 ?t 0 ?s = subst_bv2 ?t 0 ?s\n\ngoal (1 subgoal):\n 1. subst_bv s t = subst_bv2 t 0 s", "by simp"], ["", "lemma subst_bv2_eq [simp]: \"subst_bv2 (Bv k) k u = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv2 (Bv k) k u = u", "by (simp add:)"], ["", "lemma subst_bv2_gt [simp]: \"i < j \\<Longrightarrow> subst_bv2 (Bv j) i u = Bv (j - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow> subst_bv2 (Bv j) i u = Bv (j - 1)", "by (simp add:)"], ["", "lemma subst_bv2_subst_lt [simp]: \"j < i \\<Longrightarrow> subst_bv2 (Bv j) i u = Bv j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> subst_bv2 (Bv j) i u = Bv j", "by (simp add:)"], ["", "lemma lift_lift:\n    \"i < k + 1 \\<Longrightarrow> lift (lift t i) (Suc k) = lift (lift t k) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < k + 1 \\<Longrightarrow> lift (lift t i) (Suc k) = lift (lift t k) i", "by (induct t arbitrary: i k) auto"], ["", "lemma lift_subst [simp]:\n    \"j < i + 1 \\<Longrightarrow> lift (subst_bv2 t j s) i = subst_bv2 (lift t (i + 1)) j (lift s i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < i + 1 \\<Longrightarrow>\n    lift (subst_bv2 t j s) i = subst_bv2 (lift t (i + 1)) j (lift s i)", "proof (induction t arbitrary: i j s)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 i j s.\n       j < i + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Ct x1 x2) j s) i =\n       subst_bv2 (lift (Ct x1 x2) (i + 1)) j (lift s i)\n 2. \\<And>x1 x2 i j s.\n       j < i + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Fv x1 x2) j s) i =\n       subst_bv2 (lift (Fv x1 x2) (i + 1)) j (lift s i)\n 3. \\<And>x i j s.\n       j < i + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Bv x) j s) i =\n       subst_bv2 (lift (Bv x) (i + 1)) j (lift s i)\n 4. \\<And>x1 t i j s.\n       \\<lbrakk>\\<And>i j s.\n                   j < i + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t j s) i =\n                   subst_bv2 (lift t (i + 1)) j (lift s i);\n        j < i + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (Abs x1 t) j s) i =\n                         subst_bv2 (lift (Abs x1 t) (i + 1)) j (lift s i)\n 5. \\<And>t1 t2 i j s.\n       \\<lbrakk>\\<And>i j s.\n                   j < i + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t1 j s) i =\n                   subst_bv2 (lift t1 (i + 1)) j (lift s i);\n        \\<And>i j s.\n           j < i + 1 \\<Longrightarrow>\n           lift (subst_bv2 t2 j s) i =\n           subst_bv2 (lift t2 (i + 1)) j (lift s i);\n        j < i + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (t1 $ t2) j s) i =\n                         subst_bv2 (lift (t1 $ t2) (i + 1)) j (lift s i)", "case (Abs T t)"], ["proof (state)\nthis:\n  ?j < ?i + 1 \\<Longrightarrow>\n  lift (subst_bv2 t ?j ?s) ?i = subst_bv2 (lift t (?i + 1)) ?j (lift ?s ?i)\n  j < i + 1\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 i j s.\n       j < i + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Ct x1 x2) j s) i =\n       subst_bv2 (lift (Ct x1 x2) (i + 1)) j (lift s i)\n 2. \\<And>x1 x2 i j s.\n       j < i + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Fv x1 x2) j s) i =\n       subst_bv2 (lift (Fv x1 x2) (i + 1)) j (lift s i)\n 3. \\<And>x i j s.\n       j < i + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Bv x) j s) i =\n       subst_bv2 (lift (Bv x) (i + 1)) j (lift s i)\n 4. \\<And>x1 t i j s.\n       \\<lbrakk>\\<And>i j s.\n                   j < i + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t j s) i =\n                   subst_bv2 (lift t (i + 1)) j (lift s i);\n        j < i + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (Abs x1 t) j s) i =\n                         subst_bv2 (lift (Abs x1 t) (i + 1)) j (lift s i)\n 5. \\<And>t1 t2 i j s.\n       \\<lbrakk>\\<And>i j s.\n                   j < i + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t1 j s) i =\n                   subst_bv2 (lift t1 (i + 1)) j (lift s i);\n        \\<And>i j s.\n           j < i + 1 \\<Longrightarrow>\n           lift (subst_bv2 t2 j s) i =\n           subst_bv2 (lift t2 (i + 1)) j (lift s i);\n        j < i + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (t1 $ t2) j s) i =\n                         subst_bv2 (lift (t1 $ t2) (i + 1)) j (lift s i)", "then"], ["proof (chain)\npicking this:\n  ?j < ?i + 1 \\<Longrightarrow>\n  lift (subst_bv2 t ?j ?s) ?i = subst_bv2 (lift t (?i + 1)) ?j (lift ?s ?i)\n  j < i + 1", "show ?case"], ["proof (prove)\nusing this:\n  ?j < ?i + 1 \\<Longrightarrow>\n  lift (subst_bv2 t ?j ?s) ?i = subst_bv2 (lift t (?i + 1)) ?j (lift ?s ?i)\n  j < i + 1\n\ngoal (1 subgoal):\n 1. lift (subst_bv2 (Abs T t) j s) i =\n    subst_bv2 (lift (Abs T t) (i + 1)) j (lift s i)", "by (simp_all add: diff_Suc lift_lift split: nat.split) \n      (metis One_nat_def Suc_eq_plus1 lift_def lift_lift zero_less_Suc)"], ["proof (state)\nthis:\n  lift (subst_bv2 (Abs T t) j s) i =\n  subst_bv2 (lift (Abs T t) (i + 1)) j (lift s i)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 i j s.\n       j < i + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Ct x1 x2) j s) i =\n       subst_bv2 (lift (Ct x1 x2) (i + 1)) j (lift s i)\n 2. \\<And>x1 x2 i j s.\n       j < i + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Fv x1 x2) j s) i =\n       subst_bv2 (lift (Fv x1 x2) (i + 1)) j (lift s i)\n 3. \\<And>x i j s.\n       j < i + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Bv x) j s) i =\n       subst_bv2 (lift (Bv x) (i + 1)) j (lift s i)\n 4. \\<And>t1 t2 i j s.\n       \\<lbrakk>\\<And>i j s.\n                   j < i + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t1 j s) i =\n                   subst_bv2 (lift t1 (i + 1)) j (lift s i);\n        \\<And>i j s.\n           j < i + 1 \\<Longrightarrow>\n           lift (subst_bv2 t2 j s) i =\n           subst_bv2 (lift t2 (i + 1)) j (lift s i);\n        j < i + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (t1 $ t2) j s) i =\n                         subst_bv2 (lift (t1 $ t2) (i + 1)) j (lift s i)", "qed (simp_all add: diff_Suc lift_lift split: nat.split)"], ["", "lemma lift_subst_bv2_subst_lt:\n    \"i < j + 1 \\<Longrightarrow> lift (subst_bv2 t j s) i = subst_bv2 (lift t i) (j + 1) (lift s i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j + 1 \\<Longrightarrow>\n    lift (subst_bv2 t j s) i = subst_bv2 (lift t i) (j + 1) (lift s i)", "proof (induction t arbitrary: i j s)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 i j s.\n       i < j + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Ct x1 x2) j s) i =\n       subst_bv2 (lift (Ct x1 x2) i) (j + 1) (lift s i)\n 2. \\<And>x1 x2 i j s.\n       i < j + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Fv x1 x2) j s) i =\n       subst_bv2 (lift (Fv x1 x2) i) (j + 1) (lift s i)\n 3. \\<And>x i j s.\n       i < j + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Bv x) j s) i =\n       subst_bv2 (lift (Bv x) i) (j + 1) (lift s i)\n 4. \\<And>x1 t i j s.\n       \\<lbrakk>\\<And>i j s.\n                   i < j + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t j s) i =\n                   subst_bv2 (lift t i) (j + 1) (lift s i);\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (Abs x1 t) j s) i =\n                         subst_bv2 (lift (Abs x1 t) i) (j + 1) (lift s i)\n 5. \\<And>t1 t2 i j s.\n       \\<lbrakk>\\<And>i j s.\n                   i < j + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t1 j s) i =\n                   subst_bv2 (lift t1 i) (j + 1) (lift s i);\n        \\<And>i j s.\n           i < j + 1 \\<Longrightarrow>\n           lift (subst_bv2 t2 j s) i =\n           subst_bv2 (lift t2 i) (j + 1) (lift s i);\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (t1 $ t2) j s) i =\n                         subst_bv2 (lift (t1 $ t2) i) (j + 1) (lift s i)", "case (Abs x1 t)"], ["proof (state)\nthis:\n  ?i < ?j + 1 \\<Longrightarrow>\n  lift (subst_bv2 t ?j ?s) ?i = subst_bv2 (lift t ?i) (?j + 1) (lift ?s ?i)\n  i < j + 1\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 i j s.\n       i < j + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Ct x1 x2) j s) i =\n       subst_bv2 (lift (Ct x1 x2) i) (j + 1) (lift s i)\n 2. \\<And>x1 x2 i j s.\n       i < j + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Fv x1 x2) j s) i =\n       subst_bv2 (lift (Fv x1 x2) i) (j + 1) (lift s i)\n 3. \\<And>x i j s.\n       i < j + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Bv x) j s) i =\n       subst_bv2 (lift (Bv x) i) (j + 1) (lift s i)\n 4. \\<And>x1 t i j s.\n       \\<lbrakk>\\<And>i j s.\n                   i < j + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t j s) i =\n                   subst_bv2 (lift t i) (j + 1) (lift s i);\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (Abs x1 t) j s) i =\n                         subst_bv2 (lift (Abs x1 t) i) (j + 1) (lift s i)\n 5. \\<And>t1 t2 i j s.\n       \\<lbrakk>\\<And>i j s.\n                   i < j + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t1 j s) i =\n                   subst_bv2 (lift t1 i) (j + 1) (lift s i);\n        \\<And>i j s.\n           i < j + 1 \\<Longrightarrow>\n           lift (subst_bv2 t2 j s) i =\n           subst_bv2 (lift t2 i) (j + 1) (lift s i);\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (t1 $ t2) j s) i =\n                         subst_bv2 (lift (t1 $ t2) i) (j + 1) (lift s i)", "then"], ["proof (chain)\npicking this:\n  ?i < ?j + 1 \\<Longrightarrow>\n  lift (subst_bv2 t ?j ?s) ?i = subst_bv2 (lift t ?i) (?j + 1) (lift ?s ?i)\n  i < j + 1", "show ?case"], ["proof (prove)\nusing this:\n  ?i < ?j + 1 \\<Longrightarrow>\n  lift (subst_bv2 t ?j ?s) ?i = subst_bv2 (lift t ?i) (?j + 1) (lift ?s ?i)\n  i < j + 1\n\ngoal (1 subgoal):\n 1. lift (subst_bv2 (Abs x1 t) j s) i =\n    subst_bv2 (lift (Abs x1 t) i) (j + 1) (lift s i)", "using lift_lift"], ["proof (prove)\nusing this:\n  ?i < ?j + 1 \\<Longrightarrow>\n  lift (subst_bv2 t ?j ?s) ?i = subst_bv2 (lift t ?i) (?j + 1) (lift ?s ?i)\n  i < j + 1\n  ?i < ?k + 1 \\<Longrightarrow>\n  lift (lift ?t ?i) (Suc ?k) = lift (lift ?t ?k) ?i\n\ngoal (1 subgoal):\n 1. lift (subst_bv2 (Abs x1 t) j s) i =\n    subst_bv2 (lift (Abs x1 t) i) (j + 1) (lift s i)", "by force"], ["proof (state)\nthis:\n  lift (subst_bv2 (Abs x1 t) j s) i =\n  subst_bv2 (lift (Abs x1 t) i) (j + 1) (lift s i)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 i j s.\n       i < j + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Ct x1 x2) j s) i =\n       subst_bv2 (lift (Ct x1 x2) i) (j + 1) (lift s i)\n 2. \\<And>x1 x2 i j s.\n       i < j + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Fv x1 x2) j s) i =\n       subst_bv2 (lift (Fv x1 x2) i) (j + 1) (lift s i)\n 3. \\<And>x i j s.\n       i < j + 1 \\<Longrightarrow>\n       lift (subst_bv2 (Bv x) j s) i =\n       subst_bv2 (lift (Bv x) i) (j + 1) (lift s i)\n 4. \\<And>t1 t2 i j s.\n       \\<lbrakk>\\<And>i j s.\n                   i < j + 1 \\<Longrightarrow>\n                   lift (subst_bv2 t1 j s) i =\n                   subst_bv2 (lift t1 i) (j + 1) (lift s i);\n        \\<And>i j s.\n           i < j + 1 \\<Longrightarrow>\n           lift (subst_bv2 t2 j s) i =\n           subst_bv2 (lift t2 i) (j + 1) (lift s i);\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> lift (subst_bv2 (t1 $ t2) j s) i =\n                         subst_bv2 (lift (t1 $ t2) i) (j + 1) (lift s i)", "qed (auto simp add: lift_lift)"], ["", "lemma subst_bv2_lift [simp]:\n    \"subst_bv2 (lift t k) k s = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv2 (lift t k) k s = t", "by (induct t arbitrary: k s) simp_all"], ["", "lemma subst_bv2_subst_bv2:\n    \"i < j + 1 \\<Longrightarrow> subst_bv2 (subst_bv2 t (Suc j) (lift v i)) i (subst_bv2 u j v) \n    = subst_bv2 (subst_bv2 t i u) j v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j + 1 \\<Longrightarrow>\n    subst_bv2 (subst_bv2 t (Suc j) (lift v i)) i (subst_bv2 u j v) =\n    subst_bv2 (subst_bv2 t i u) j v", "proof(induction t arbitrary: i j u v)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 i j u v.\n       i < j + 1 \\<Longrightarrow>\n       subst_bv2 (subst_bv2 (Ct x1 x2) (Suc j) (lift v i)) i\n        (subst_bv2 u j v) =\n       subst_bv2 (subst_bv2 (Ct x1 x2) i u) j v\n 2. \\<And>x1 x2 i j u v.\n       i < j + 1 \\<Longrightarrow>\n       subst_bv2 (subst_bv2 (Fv x1 x2) (Suc j) (lift v i)) i\n        (subst_bv2 u j v) =\n       subst_bv2 (subst_bv2 (Fv x1 x2) i u) j v\n 3. \\<And>x i j u v.\n       i < j + 1 \\<Longrightarrow>\n       subst_bv2 (subst_bv2 (Bv x) (Suc j) (lift v i)) i (subst_bv2 u j v) =\n       subst_bv2 (subst_bv2 (Bv x) i u) j v\n 4. \\<And>x1 t i j u v.\n       \\<lbrakk>\\<And>i j u v.\n                   i < j + 1 \\<Longrightarrow>\n                   subst_bv2 (subst_bv2 t (Suc j) (lift v i)) i\n                    (subst_bv2 u j v) =\n                   subst_bv2 (subst_bv2 t i u) j v;\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> subst_bv2 (subst_bv2 (Abs x1 t) (Suc j) (lift v i))\n                          i (subst_bv2 u j v) =\n                         subst_bv2 (subst_bv2 (Abs x1 t) i u) j v\n 5. \\<And>t1 t2 i j u v.\n       \\<lbrakk>\\<And>i j u v.\n                   i < j + 1 \\<Longrightarrow>\n                   subst_bv2 (subst_bv2 t1 (Suc j) (lift v i)) i\n                    (subst_bv2 u j v) =\n                   subst_bv2 (subst_bv2 t1 i u) j v;\n        \\<And>i j u v.\n           i < j + 1 \\<Longrightarrow>\n           subst_bv2 (subst_bv2 t2 (Suc j) (lift v i)) i (subst_bv2 u j v) =\n           subst_bv2 (subst_bv2 t2 i u) j v;\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> subst_bv2 (subst_bv2 (t1 $ t2) (Suc j) (lift v i))\n                          i (subst_bv2 u j v) =\n                         subst_bv2 (subst_bv2 (t1 $ t2) i u) j v", "case (Abs s T t)"], ["proof (state)\nthis:\n  ?i < ?j + 1 \\<Longrightarrow>\n  subst_bv2 (subst_bv2 T (Suc ?j) (lift ?v ?i)) ?i (subst_bv2 ?u ?j ?v) =\n  subst_bv2 (subst_bv2 T ?i ?u) ?j ?v\n  t < j + 1\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 i j u v.\n       i < j + 1 \\<Longrightarrow>\n       subst_bv2 (subst_bv2 (Ct x1 x2) (Suc j) (lift v i)) i\n        (subst_bv2 u j v) =\n       subst_bv2 (subst_bv2 (Ct x1 x2) i u) j v\n 2. \\<And>x1 x2 i j u v.\n       i < j + 1 \\<Longrightarrow>\n       subst_bv2 (subst_bv2 (Fv x1 x2) (Suc j) (lift v i)) i\n        (subst_bv2 u j v) =\n       subst_bv2 (subst_bv2 (Fv x1 x2) i u) j v\n 3. \\<And>x i j u v.\n       i < j + 1 \\<Longrightarrow>\n       subst_bv2 (subst_bv2 (Bv x) (Suc j) (lift v i)) i (subst_bv2 u j v) =\n       subst_bv2 (subst_bv2 (Bv x) i u) j v\n 4. \\<And>x1 t i j u v.\n       \\<lbrakk>\\<And>i j u v.\n                   i < j + 1 \\<Longrightarrow>\n                   subst_bv2 (subst_bv2 t (Suc j) (lift v i)) i\n                    (subst_bv2 u j v) =\n                   subst_bv2 (subst_bv2 t i u) j v;\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> subst_bv2 (subst_bv2 (Abs x1 t) (Suc j) (lift v i))\n                          i (subst_bv2 u j v) =\n                         subst_bv2 (subst_bv2 (Abs x1 t) i u) j v\n 5. \\<And>t1 t2 i j u v.\n       \\<lbrakk>\\<And>i j u v.\n                   i < j + 1 \\<Longrightarrow>\n                   subst_bv2 (subst_bv2 t1 (Suc j) (lift v i)) i\n                    (subst_bv2 u j v) =\n                   subst_bv2 (subst_bv2 t1 i u) j v;\n        \\<And>i j u v.\n           i < j + 1 \\<Longrightarrow>\n           subst_bv2 (subst_bv2 t2 (Suc j) (lift v i)) i (subst_bv2 u j v) =\n           subst_bv2 (subst_bv2 t2 i u) j v;\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> subst_bv2 (subst_bv2 (t1 $ t2) (Suc j) (lift v i))\n                          i (subst_bv2 u j v) =\n                         subst_bv2 (subst_bv2 (t1 $ t2) i u) j v", "then"], ["proof (chain)\npicking this:\n  ?i < ?j + 1 \\<Longrightarrow>\n  subst_bv2 (subst_bv2 T (Suc ?j) (lift ?v ?i)) ?i (subst_bv2 ?u ?j ?v) =\n  subst_bv2 (subst_bv2 T ?i ?u) ?j ?v\n  t < j + 1", "show ?case"], ["proof (prove)\nusing this:\n  ?i < ?j + 1 \\<Longrightarrow>\n  subst_bv2 (subst_bv2 T (Suc ?j) (lift ?v ?i)) ?i (subst_bv2 ?u ?j ?v) =\n  subst_bv2 (subst_bv2 T ?i ?u) ?j ?v\n  t < j + 1\n\ngoal (1 subgoal):\n 1. subst_bv2 (subst_bv2 (Abs s T) (Suc j) (lift v t)) t (subst_bv2 u j v) =\n    subst_bv2 (subst_bv2 (Abs s T) t u) j v", "by (smt Suc_mono add.commute lift_lift lift_subst_bv2_subst_lt plus_1_eq_Suc subst_bv2.simps(2) zero_less_Suc)"], ["proof (state)\nthis:\n  subst_bv2 (subst_bv2 (Abs s T) (Suc j) (lift v t)) t (subst_bv2 u j v) =\n  subst_bv2 (subst_bv2 (Abs s T) t u) j v\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 i j u v.\n       i < j + 1 \\<Longrightarrow>\n       subst_bv2 (subst_bv2 (Ct x1 x2) (Suc j) (lift v i)) i\n        (subst_bv2 u j v) =\n       subst_bv2 (subst_bv2 (Ct x1 x2) i u) j v\n 2. \\<And>x1 x2 i j u v.\n       i < j + 1 \\<Longrightarrow>\n       subst_bv2 (subst_bv2 (Fv x1 x2) (Suc j) (lift v i)) i\n        (subst_bv2 u j v) =\n       subst_bv2 (subst_bv2 (Fv x1 x2) i u) j v\n 3. \\<And>x i j u v.\n       i < j + 1 \\<Longrightarrow>\n       subst_bv2 (subst_bv2 (Bv x) (Suc j) (lift v i)) i (subst_bv2 u j v) =\n       subst_bv2 (subst_bv2 (Bv x) i u) j v\n 4. \\<And>t1 t2 i j u v.\n       \\<lbrakk>\\<And>i j u v.\n                   i < j + 1 \\<Longrightarrow>\n                   subst_bv2 (subst_bv2 t1 (Suc j) (lift v i)) i\n                    (subst_bv2 u j v) =\n                   subst_bv2 (subst_bv2 t1 i u) j v;\n        \\<And>i j u v.\n           i < j + 1 \\<Longrightarrow>\n           subst_bv2 (subst_bv2 t2 (Suc j) (lift v i)) i (subst_bv2 u j v) =\n           subst_bv2 (subst_bv2 t2 i u) j v;\n        i < j + 1\\<rbrakk>\n       \\<Longrightarrow> subst_bv2 (subst_bv2 (t1 $ t2) (Suc j) (lift v i))\n                          i (subst_bv2 u j v) =\n                         subst_bv2 (subst_bv2 (t1 $ t2) i u) j v", "qed (use subst_bv2_lift in \\<open>auto simp add: diff_Suc lift_lift [symmetric] lift_subst_bv2_subst_lt split: nat.split\\<close>)"], ["", "(* Bridging *)"], ["", "hide_fact (open) subst_bv_def"], ["", "lemma subst_bv_def: \"subst_bv u t \\<equiv> subst_bv1 t 0 u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv u t \\<equiv> subst_bv1 t 0 u", "by (simp add: substn_subst_0' substn_subst_n)"], ["", "(* Probably not necessary *)"], ["", "fun subst_bvs1 :: \"term \\<Rightarrow> nat \\<Rightarrow> term list \\<Rightarrow> term\" where\n  \"subst_bvs1 (Bv n) lev args = (if n < lev \n    then Bv n \n    else if n - lev < length args \n      then incr_boundvars lev (nth args (n-lev)) \n      else Bv (n - length args))\"\n| \"subst_bvs1 (Abs T body) lev args = Abs T (subst_bvs1 body (lev+1) args)\"\n| \"subst_bvs1 (f $ t) lev args = subst_bvs1 f lev args $ subst_bvs1 t lev args\"\n| \"subst_bvs1 t _ _ = t\""], ["", "definition \"subst_bvs args t \\<equiv> subst_bvs1 t 0 args\""], ["", "lemma subst_bvs_App[simp]: \"subst_bvs args (s$t) = subst_bvs args s $ subst_bvs args t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bvs args (s $ t) = subst_bvs args s $ subst_bvs args t", "by (auto simp add: subst_bvs_def)"], ["", "lemma subst_bv1_special_case_subst_bvs1: \"subst_bvs1 t lev [x] = subst_bv1 t lev x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bvs1 t lev [x] = subst_bv1 t lev x", "by (induction t lev \"[x]\" arbitrary: x rule: subst_bvs1.induct) auto"], ["", "lemma no_loose_bvar_imp_no_subst_bv1: \"\\<not>loose_bvar t lev \\<Longrightarrow> subst_bv1 t lev u = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t lev \\<Longrightarrow> subst_bv1 t lev u = t", "by (induction t arbitrary: lev) auto"], ["", "lemma no_loose_bvar_imp_no_subst_bvs1: \"\\<not>loose_bvar t lev \\<Longrightarrow> subst_bvs1 t lev us = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t lev \\<Longrightarrow> subst_bvs1 t lev us = t", "by (induction t arbitrary: lev) auto"], ["", "(* The precondition in the following lemmas makes them fairly useless *)"], ["", "lemma subst_bvs1_step:             \n  assumes \"\\<not> loose_bvar t lev\"\n  shows \"subst_bvs1 t lev (args@[u]) = subst_bv1 (subst_bvs1 t lev args) lev u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bvs1 t lev (args @ [u]) = subst_bv1 (subst_bvs1 t lev args) lev u", "using assms"], ["proof (prove)\nusing this:\n  \\<not> loose_bvar t lev\n\ngoal (1 subgoal):\n 1. subst_bvs1 t lev (args @ [u]) = subst_bv1 (subst_bvs1 t lev args) lev u", "by (induction t arbitrary: lev args u) auto"], ["", "corollary closed_subst_bv_no_change: \"is_closed t \\<Longrightarrow> subst_bv u t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed t \\<Longrightarrow> subst_bv u t = t", "unfolding is_open_def subst_bv_def no_loose_bvar_imp_no_subst_bv1"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t 0 \\<Longrightarrow> t = t", "by simp"], ["", "lemma is_variable_imp_incr_bv_unchanged: \"incr_bv inc lev (Fv v T) = (Fv v T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. incr_bv inc lev (Fv v T) = Fv v T", "by simp"], ["", "lemma is_variable_imp_incr_boundvars_unchganged: \"incr_boundvars inc (Fv v T) = (Fv v T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. incr_boundvars inc (Fv v T) = Fv v T", "using is_variable_imp_incr_bv_unchanged incr_boundvars_def"], ["proof (prove)\nusing this:\n  incr_bv ?inc ?lev (Fv ?v ?T) = Fv ?v ?T\n  incr_boundvars ?inc ?t = incr_bv ?inc 0 ?t\n\ngoal (1 subgoal):\n 1. incr_boundvars inc (Fv v T) = Fv v T", "by simp"], ["", "lemma loose_bvar_subst_bv1: \n  \"\\<not> loose_bvar (subst_bv1 t lev u) lev \\<Longrightarrow> \\<not> loose_bvar t (Suc lev)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar (subst_bv1 t lev u) lev \\<Longrightarrow>\n    \\<not> loose_bvar t (Suc lev)", "by (induction t lev u rule: subst_bv1.induct) auto"], ["", "lemma is_closed_subst_bv: \"is_closed (subst_bv u t) \\<Longrightarrow> \\<not> loose_bvar t 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed (subst_bv u t) \\<Longrightarrow> \\<not> loose_bvar t 1", "by (simp add: is_open_def loose_bvar_subst_bv1 subst_bv_def)"], ["", "lemma subst_bv1_bind_fv2: \n  assumes \"\\<not> loose_bvar t lev\" \n  shows \"subst_bv1 (bind_fv2 (v, T) lev t) lev (Fv v T) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv1 (bind_fv2 (v, T) lev t) lev (Fv v T) = t", "using assms"], ["proof (prove)\nusing this:\n  \\<not> loose_bvar t lev\n\ngoal (1 subgoal):\n 1. subst_bv1 (bind_fv2 (v, T) lev t) lev (Fv v T) = t", "by (induction t arbitrary: lev) (use is_variable_imp_incr_boundvars_unchganged in auto)"], ["", "corollary subst_bv_bind_fv: \n  assumes \"is_closed t\"\n  shows \"subst_bv (Fv v T) (bind_fv (v, T) t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv (Fv v T) (bind_fv (v, T) t) = t", "unfolding bind_fv_def subst_bv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv1 (bind_fv2 (v, T) 0 t) 0 (Fv v T) = t", "using assms subst_bv1_bind_fv2 is_open_def"], ["proof (prove)\nusing this:\n  is_closed t\n  \\<not> loose_bvar ?t ?lev \\<Longrightarrow>\n  subst_bv1 (bind_fv2 (?v, ?T) ?lev ?t) ?lev (Fv ?v ?T) = ?t\n  is_open ?t \\<equiv> loose_bvar ?t 0\n\ngoal (1 subgoal):\n 1. subst_bv1 (bind_fv2 (v, T) 0 t) 0 (Fv v T) = t", "by blast"], ["", "fun betapply :: \"term \\<Rightarrow> term \\<Rightarrow> term\" (infixl \"\\<bullet>\" 52) where\n  \"betapply (Abs _ t) u = subst_bv u t\"\n| \"betapply t u = t $ u\""], ["", "lemma betapply_Abs_fv:\n  assumes \"is_closed t\"\n  shows \"betapply (Abs_fv v T t) (Fv v T) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fv v T t \\<bullet> Fv v T = t", "using assms subst_bv_bind_fv"], ["proof (prove)\nusing this:\n  is_closed t\n  is_closed ?t \\<Longrightarrow>\n  subst_bv (Fv ?v ?T) (bind_fv (?v, ?T) ?t) = ?t\n\ngoal (1 subgoal):\n 1. Abs_fv v T t \\<bullet> Fv v T = t", "by simp"], ["", "lemma typ_of1_imp_no_loose_bvar: \"typ_of1 Ts t = Some ty \\<Longrightarrow> \\<not> loose_bvar t (length Ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts t = Some ty \\<Longrightarrow> \\<not> loose_bvar t (length Ts)", "by (simp add: has_typ1_imp_no_loose_bvar)"], ["", "lemma typ_of1_subst_bv:\n  assumes \"typ_of1 (Ts@[uty]) f = Some fty\"\n    and \"typ_of u = Some uty\"\n  shows \"typ_of1 Ts (subst_bv1 f (length Ts) u) = Some fty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts (subst_bv1 f (length Ts) u) = Some fty", "using assms"], ["proof (prove)\nusing this:\n  typ_of1 (Ts @ [uty]) f = Some fty\n  typ_of u = Some uty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (subst_bv1 f (length Ts) u) = Some fty", "proof (induction f \"length Ts\" u arbitrary: uty fty Ts rule: subst_bv1.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i u Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Bv i) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Bv i) (length Ts) u) =\n                         Some fty\n 2. \\<And>T body u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts + 1 = length Tsa;\n                    typ_of1 (Tsa @ [uty]) body = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 body (length Tsa) u) =\n                                     Some fty;\n        typ_of1 (Ts @ [uty]) (Abs T body) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Abs T body) (length Ts) u) =\n                         Some fty\n 3. \\<And>f t u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts = length Tsa;\n                    typ_of1 (Tsa @ [uty]) f = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 f (length Tsa) u) =\n                                     Some fty;\n        \\<And>Tsa uty fty.\n           \\<lbrakk>length Ts = length Tsa;\n            typ_of1 (Tsa @ [uty]) t = Some fty; typ_of u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Tsa (subst_bv1 t (length Tsa) u) =\n                             Some fty;\n        typ_of1 (Ts @ [uty]) (f $ t) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (f $ t) (length Ts) u) =\n                         Some fty\n 4. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Ct v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Ct v va) (length Ts) uv_) =\n                         Some fty\n 5. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Fv v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Fv v va) (length Ts) uv_) =\n                         Some fty", "case (1 i arg)"], ["proof (state)\nthis:\n  typ_of1 (Ts @ [uty]) (Bv i) = Some fty\n  typ_of arg = Some uty\n\ngoal (5 subgoals):\n 1. \\<And>i u Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Bv i) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Bv i) (length Ts) u) =\n                         Some fty\n 2. \\<And>T body u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts + 1 = length Tsa;\n                    typ_of1 (Tsa @ [uty]) body = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 body (length Tsa) u) =\n                                     Some fty;\n        typ_of1 (Ts @ [uty]) (Abs T body) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Abs T body) (length Ts) u) =\n                         Some fty\n 3. \\<And>f t u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts = length Tsa;\n                    typ_of1 (Tsa @ [uty]) f = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 f (length Tsa) u) =\n                                     Some fty;\n        \\<And>Tsa uty fty.\n           \\<lbrakk>length Ts = length Tsa;\n            typ_of1 (Tsa @ [uty]) t = Some fty; typ_of u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Tsa (subst_bv1 t (length Tsa) u) =\n                             Some fty;\n        typ_of1 (Ts @ [uty]) (f $ t) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (f $ t) (length Ts) u) =\n                         Some fty\n 4. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Ct v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Ct v va) (length Ts) uv_) =\n                         Some fty\n 5. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Fv v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Fv v va) (length Ts) uv_) =\n                         Some fty", "then"], ["proof (chain)\npicking this:\n  typ_of1 (Ts @ [uty]) (Bv i) = Some fty\n  typ_of arg = Some uty", "show ?case"], ["proof (prove)\nusing this:\n  typ_of1 (Ts @ [uty]) (Bv i) = Some fty\n  typ_of arg = Some uty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (subst_bv1 (Bv i) (length Ts) arg) = Some fty", "using no_loose_bvar_no_incr typ_of1_imp_no_loose_bvar typ_of1_weaken"], ["proof (prove)\nusing this:\n  typ_of1 (Ts @ [uty]) (Bv i) = Some fty\n  typ_of arg = Some uty\n  \\<not> loose_bvar ?t ?lev \\<Longrightarrow> incr_bv ?inc ?lev ?t = ?t\n  typ_of1 ?Ts ?t = Some ?ty \\<Longrightarrow>\n  \\<not> loose_bvar ?t (length ?Ts)\n  typ_of1 ?Ts ?t = Some ?T \\<Longrightarrow>\n  typ_of1 (?Ts @ ?Ts') ?t = Some ?T\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (subst_bv1 (Bv i) (length Ts) arg) = Some fty", "by (force simp add: bind_eq_Some_conv incr_boundvars_def nth_append typ_of_def\n        split: if_splits)"], ["proof (state)\nthis:\n  typ_of1 Ts (subst_bv1 (Bv i) (length Ts) arg) = Some fty\n\ngoal (4 subgoals):\n 1. \\<And>T body u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts + 1 = length Tsa;\n                    typ_of1 (Tsa @ [uty]) body = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 body (length Tsa) u) =\n                                     Some fty;\n        typ_of1 (Ts @ [uty]) (Abs T body) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Abs T body) (length Ts) u) =\n                         Some fty\n 2. \\<And>f t u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts = length Tsa;\n                    typ_of1 (Tsa @ [uty]) f = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 f (length Tsa) u) =\n                                     Some fty;\n        \\<And>Tsa uty fty.\n           \\<lbrakk>length Ts = length Tsa;\n            typ_of1 (Tsa @ [uty]) t = Some fty; typ_of u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Tsa (subst_bv1 t (length Tsa) u) =\n                             Some fty;\n        typ_of1 (Ts @ [uty]) (f $ t) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (f $ t) (length Ts) u) =\n                         Some fty\n 3. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Ct v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Ct v va) (length Ts) uv_) =\n                         Some fty\n 4. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Fv v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Fv v va) (length Ts) uv_) =\n                         Some fty", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>T body u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts + 1 = length Tsa;\n                    typ_of1 (Tsa @ [uty]) body = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 body (length Tsa) u) =\n                                     Some fty;\n        typ_of1 (Ts @ [uty]) (Abs T body) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Abs T body) (length Ts) u) =\n                         Some fty\n 2. \\<And>f t u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts = length Tsa;\n                    typ_of1 (Tsa @ [uty]) f = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 f (length Tsa) u) =\n                                     Some fty;\n        \\<And>Tsa uty fty.\n           \\<lbrakk>length Ts = length Tsa;\n            typ_of1 (Tsa @ [uty]) t = Some fty; typ_of u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Tsa (subst_bv1 t (length Tsa) u) =\n                             Some fty;\n        typ_of1 (Ts @ [uty]) (f $ t) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (f $ t) (length Ts) u) =\n                         Some fty\n 3. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Ct v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Ct v va) (length Ts) uv_) =\n                         Some fty\n 4. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Fv v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Fv v va) (length Ts) uv_) =\n                         Some fty", "case (2 a T body arg)"], ["proof (state)\nthis:\n  \\<lbrakk>length arg + 1 = length ?Ts;\n   typ_of1 (?Ts @ [?uty]) T = Some ?fty; typ_of body = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (subst_bv1 T (length ?Ts) body) = Some ?fty\n  typ_of1 (arg @ [uty]) (Abs a T) = Some fty\n  typ_of body = Some uty\n\ngoal (4 subgoals):\n 1. \\<And>T body u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts + 1 = length Tsa;\n                    typ_of1 (Tsa @ [uty]) body = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 body (length Tsa) u) =\n                                     Some fty;\n        typ_of1 (Ts @ [uty]) (Abs T body) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Abs T body) (length Ts) u) =\n                         Some fty\n 2. \\<And>f t u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts = length Tsa;\n                    typ_of1 (Tsa @ [uty]) f = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 f (length Tsa) u) =\n                                     Some fty;\n        \\<And>Tsa uty fty.\n           \\<lbrakk>length Ts = length Tsa;\n            typ_of1 (Tsa @ [uty]) t = Some fty; typ_of u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Tsa (subst_bv1 t (length Tsa) u) =\n                             Some fty;\n        typ_of1 (Ts @ [uty]) (f $ t) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (f $ t) (length Ts) u) =\n                         Some fty\n 3. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Ct v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Ct v va) (length Ts) uv_) =\n                         Some fty\n 4. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Fv v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Fv v va) (length Ts) uv_) =\n                         Some fty", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length arg + 1 = length ?Ts;\n   typ_of1 (?Ts @ [?uty]) T = Some ?fty; typ_of body = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (subst_bv1 T (length ?Ts) body) = Some ?fty\n  typ_of1 (arg @ [uty]) (Abs a T) = Some fty\n  typ_of body = Some uty", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length arg + 1 = length ?Ts;\n   typ_of1 (?Ts @ [?uty]) T = Some ?fty; typ_of body = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (subst_bv1 T (length ?Ts) body) = Some ?fty\n  typ_of1 (arg @ [uty]) (Abs a T) = Some fty\n  typ_of body = Some uty\n\ngoal (1 subgoal):\n 1. typ_of1 arg (subst_bv1 (Abs a T) (length arg) body) = Some fty", "by (simp add: bind_eq_Some_conv typ_of_def) (smt append_Cons bind_eq_Some_conv length_Cons)"], ["proof (state)\nthis:\n  typ_of1 arg (subst_bv1 (Abs a T) (length arg) body) = Some fty\n\ngoal (3 subgoals):\n 1. \\<And>f t u Ts uty fty.\n       \\<lbrakk>\\<And>Tsa uty fty.\n                   \\<lbrakk>length Ts = length Tsa;\n                    typ_of1 (Tsa @ [uty]) f = Some fty;\n                    typ_of u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 Tsa\n(subst_bv1 f (length Tsa) u) =\n                                     Some fty;\n        \\<And>Tsa uty fty.\n           \\<lbrakk>length Ts = length Tsa;\n            typ_of1 (Tsa @ [uty]) t = Some fty; typ_of u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Tsa (subst_bv1 t (length Tsa) u) =\n                             Some fty;\n        typ_of1 (Ts @ [uty]) (f $ t) = Some fty;\n        typ_of u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (f $ t) (length Ts) u) =\n                         Some fty\n 2. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Ct v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Ct v va) (length Ts) uv_) =\n                         Some fty\n 3. \\<And>v va uv_ Ts uty fty.\n       \\<lbrakk>typ_of1 (Ts @ [uty]) (Fv v va) = Some fty;\n        typ_of uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (subst_bv1 (Fv v va) (length Ts) uv_) =\n                         Some fty", "qed (auto simp add: bind_eq_Some_conv)"], ["", "lemma typ_of1_split_App:\n  \"typ_of1 Ts (t $ u) = Some ty \\<Longrightarrow> (\\<exists>uty . typ_of1 Ts t = Some (uty \\<rightarrow> ty) \\<and> typ_of1 Ts u = Some uty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts (t $ u) = Some ty \\<Longrightarrow>\n    \\<exists>uty.\n       typ_of1 Ts t = Some (uty \\<rightarrow> ty) \\<and>\n       typ_of1 Ts u = Some uty", "by (metis (no_types, lifting) bind.bind_lzero the_default.elims typ_of1.simps(5) typ_of1_arg_typ)"], ["", "corollary typ_of1_split_App_obtains:\n  assumes \"typ_of1 Ts (t $ u) = Some ty\" \n  obtains uty where \"typ_of1 Ts t = Some (uty \\<rightarrow> ty)\" \"typ_of1 Ts u = Some uty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>uty.\n        \\<lbrakk>typ_of1 Ts t = Some (uty \\<rightarrow> ty);\n         typ_of1 Ts u = Some uty\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using typ_of1_split_App assms"], ["proof (prove)\nusing this:\n  typ_of1 ?Ts (?t $ ?u) = Some ?ty \\<Longrightarrow>\n  \\<exists>uty.\n     typ_of1 ?Ts ?t = Some (uty \\<rightarrow> ?ty) \\<and>\n     typ_of1 ?Ts ?u = Some uty\n  typ_of1 Ts (t $ u) = Some ty\n\ngoal (1 subgoal):\n 1. (\\<And>uty.\n        \\<lbrakk>typ_of1 Ts t = Some (uty \\<rightarrow> ty);\n         typ_of1 Ts u = Some uty\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma typ_of1_incr_bv:\n  assumes \"typ_of1 Ts t = Some ty\" \n    and \"lev \\<le> length Ts\"\n  shows \"typ_of1 (take lev Ts @ Ts' @ drop lev Ts) (incr_bv (length Ts') lev t) = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 (take lev Ts @ Ts' @ drop lev Ts) (incr_bv (length Ts') lev t) =\n    Some ty", "using assms"], ["proof (prove)\nusing this:\n  typ_of1 Ts t = Some ty\n  lev \\<le> length Ts\n\ngoal (1 subgoal):\n 1. typ_of1 (take lev Ts @ Ts' @ drop lev Ts) (incr_bv (length Ts') lev t) =\n    Some ty", "by (induction t arbitrary: ty Ts Ts' lev) \n    (fastforce simp add: nth_append bind_eq_Some_conv min_def split: if_splits)+"], ["", "corollary typ_of1_incr_bv_lev0:\n  assumes \"typ_of1 Ts t = Some ty\" \n  shows \"typ_of1 (Ts' @ Ts) (incr_bv (length Ts') 0 t) = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 (Ts' @ Ts) (incr_bv (length Ts') 0 t) = Some ty", "using assms typ_of1_incr_bv[where lev=0]"], ["proof (prove)\nusing this:\n  typ_of1 Ts t = Some ty\n  \\<lbrakk>typ_of1 ?Ts ?t = Some ?ty; 0 \\<le> length ?Ts\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (take 0 ?Ts @ ?Ts' @ drop 0 ?Ts)\n                     (incr_bv (length ?Ts') 0 ?t) =\n                    Some ?ty\n\ngoal (1 subgoal):\n 1. typ_of1 (Ts' @ Ts) (incr_bv (length Ts') 0 t) = Some ty", "by simp"], ["", "lemma typ_of1_subst_bv_gen:\n  assumes \"typ_of1 (Ts'@[uty]@Ts) t = Some tty\" and \"typ_of1 Ts u = Some uty\"\n  shows \"typ_of1 (Ts' @ Ts) (subst_bv1 t (length Ts') u) = Some tty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 (Ts' @ Ts) (subst_bv1 t (length Ts') u) = Some tty", "using assms"], ["proof (prove)\nusing this:\n  typ_of1 (Ts' @ [uty] @ Ts) t = Some tty\n  typ_of1 Ts u = Some uty\n\ngoal (1 subgoal):\n 1. typ_of1 (Ts' @ Ts) (subst_bv1 t (length Ts') u) = Some tty", "proof (induction t \"length Ts'\" u arbitrary: tty uty Ts Ts' rule: subst_bv1.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i u Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Bv i) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Bv i) (length Ts') u) =\n                         Some tty\n 2. \\<And>T body u Ts' tty uty Ts.\n       \\<lbrakk>\\<And>Ts'a tty uty Ts.\n                   \\<lbrakk>length Ts' + 1 = length Ts'a;\n                    typ_of1 (Ts'a @ [uty] @ Ts) body = Some tty;\n                    typ_of1 Ts u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n(subst_bv1 body (length Ts'a) u) =\n                                     Some tty;\n        typ_of1 (Ts' @ [uty] @ Ts) (Abs T body) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Abs T body) (length Ts') u) =\n                         Some tty\n 3. \\<And>f t u Ts' tty uty Ts.\n       \\<lbrakk>\\<And>Ts'a tty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ [uty] @ Ts) f = Some tty;\n                    typ_of1 Ts u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n(subst_bv1 f (length Ts'a) u) =\n                                     Some tty;\n        \\<And>Ts'a tty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ [uty] @ Ts) t = Some tty;\n            typ_of1 Ts u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a) u) =\n                             Some tty;\n        typ_of1 (Ts' @ [uty] @ Ts) (f $ t) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts') u) =\n                         Some tty\n 4. \\<And>v va uv_ Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Ct v va) = Some tty;\n        typ_of1 Ts uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts') uv_) =\n                         Some tty\n 5. \\<And>v va uv_ Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Fv v va) = Some tty;\n        typ_of1 Ts uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts') uv_) =\n                         Some tty", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i u Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Bv i) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Bv i) (length Ts') u) =\n                         Some tty\n 2. \\<And>T body u Ts' tty uty Ts.\n       \\<lbrakk>\\<And>Ts'a tty uty Ts.\n                   \\<lbrakk>length Ts' + 1 = length Ts'a;\n                    typ_of1 (Ts'a @ [uty] @ Ts) body = Some tty;\n                    typ_of1 Ts u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n(subst_bv1 body (length Ts'a) u) =\n                                     Some tty;\n        typ_of1 (Ts' @ [uty] @ Ts) (Abs T body) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Abs T body) (length Ts') u) =\n                         Some tty\n 3. \\<And>f t u Ts' tty uty Ts.\n       \\<lbrakk>\\<And>Ts'a tty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ [uty] @ Ts) f = Some tty;\n                    typ_of1 Ts u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n(subst_bv1 f (length Ts'a) u) =\n                                     Some tty;\n        \\<And>Ts'a tty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ [uty] @ Ts) t = Some tty;\n            typ_of1 Ts u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a) u) =\n                             Some tty;\n        typ_of1 (Ts' @ [uty] @ Ts) (f $ t) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts') u) =\n                         Some tty\n 4. \\<And>v va uv_ Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Ct v va) = Some tty;\n        typ_of1 Ts uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts') uv_) =\n                         Some tty\n 5. \\<And>v va uv_ Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Fv v va) = Some tty;\n        typ_of1 Ts uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts') uv_) =\n                         Some tty", "case (2 a T body arg)"], ["proof (state)\nthis:\n  \\<lbrakk>length arg + 1 = length ?Ts';\n   typ_of1 (?Ts' @ [?uty] @ ?Ts) T = Some ?tty;\n   typ_of1 ?Ts body = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts' @ ?Ts) (subst_bv1 T (length ?Ts') body) =\n                    Some ?tty\n  typ_of1 (arg @ [uty] @ Ts) (Abs a T) = Some tty\n  typ_of1 Ts body = Some uty\n\ngoal (5 subgoals):\n 1. \\<And>i u Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Bv i) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Bv i) (length Ts') u) =\n                         Some tty\n 2. \\<And>T body u Ts' tty uty Ts.\n       \\<lbrakk>\\<And>Ts'a tty uty Ts.\n                   \\<lbrakk>length Ts' + 1 = length Ts'a;\n                    typ_of1 (Ts'a @ [uty] @ Ts) body = Some tty;\n                    typ_of1 Ts u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n(subst_bv1 body (length Ts'a) u) =\n                                     Some tty;\n        typ_of1 (Ts' @ [uty] @ Ts) (Abs T body) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Abs T body) (length Ts') u) =\n                         Some tty\n 3. \\<And>f t u Ts' tty uty Ts.\n       \\<lbrakk>\\<And>Ts'a tty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ [uty] @ Ts) f = Some tty;\n                    typ_of1 Ts u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n(subst_bv1 f (length Ts'a) u) =\n                                     Some tty;\n        \\<And>Ts'a tty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ [uty] @ Ts) t = Some tty;\n            typ_of1 Ts u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a) u) =\n                             Some tty;\n        typ_of1 (Ts' @ [uty] @ Ts) (f $ t) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts') u) =\n                         Some tty\n 4. \\<And>v va uv_ Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Ct v va) = Some tty;\n        typ_of1 Ts uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts') uv_) =\n                         Some tty\n 5. \\<And>v va uv_ Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Fv v va) = Some tty;\n        typ_of1 Ts uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts') uv_) =\n                         Some tty", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length arg + 1 = length ?Ts';\n   typ_of1 (?Ts' @ [?uty] @ ?Ts) T = Some ?tty;\n   typ_of1 ?Ts body = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts' @ ?Ts) (subst_bv1 T (length ?Ts') body) =\n                    Some ?tty\n  typ_of1 (arg @ [uty] @ Ts) (Abs a T) = Some tty\n  typ_of1 Ts body = Some uty", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length arg + 1 = length ?Ts';\n   typ_of1 (?Ts' @ [?uty] @ ?Ts) T = Some ?tty;\n   typ_of1 ?Ts body = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts' @ ?Ts) (subst_bv1 T (length ?Ts') body) =\n                    Some ?tty\n  typ_of1 (arg @ [uty] @ Ts) (Abs a T) = Some tty\n  typ_of1 Ts body = Some uty\n\ngoal (1 subgoal):\n 1. typ_of1 (arg @ Ts) (subst_bv1 (Abs a T) (length arg) body) = Some tty", "by (simp add: bind_eq_Some_conv) (metis append_Cons length_Cons)"], ["proof (state)\nthis:\n  typ_of1 (arg @ Ts) (subst_bv1 (Abs a T) (length arg) body) = Some tty\n\ngoal (4 subgoals):\n 1. \\<And>i u Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Bv i) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Bv i) (length Ts') u) =\n                         Some tty\n 2. \\<And>f t u Ts' tty uty Ts.\n       \\<lbrakk>\\<And>Ts'a tty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ [uty] @ Ts) f = Some tty;\n                    typ_of1 Ts u = Some uty\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n(subst_bv1 f (length Ts'a) u) =\n                                     Some tty;\n        \\<And>Ts'a tty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ [uty] @ Ts) t = Some tty;\n            typ_of1 Ts u = Some uty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a) u) =\n                             Some tty;\n        typ_of1 (Ts' @ [uty] @ Ts) (f $ t) = Some tty;\n        typ_of1 Ts u = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts') u) =\n                         Some tty\n 3. \\<And>v va uv_ Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Ct v va) = Some tty;\n        typ_of1 Ts uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts') uv_) =\n                         Some tty\n 4. \\<And>v va uv_ Ts' tty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ [uty] @ Ts) (Fv v va) = Some tty;\n        typ_of1 Ts uv_ = Some uty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts') uv_) =\n                         Some tty", "qed (auto simp add: bind_eq_Some_conv nth_append incr_boundvars_def \n    typ_of1_incr_bv_lev0 split: if_splits)"], ["", "(* This is the correct version, the other one inserts \"at the wrong side of the bounds\" *)"], ["", "lemma typ_of1_subst_bv_gen_depre:\n  assumes \"typ_of1 (Ts'@Ts) f = Some (fty)\"\n    and \"typ_of1 (Ts) u = Some uty\"\n    and \"last Ts' = uty\" and \"Ts' \\<noteq> []\"\n  shows \"typ_of1 (butlast Ts' @ Ts) (subst_bv1 f (length Ts'-1) u) = Some fty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 (butlast Ts' @ Ts) (subst_bv1 f (length Ts' - 1) u) = Some fty", "using assms"], ["proof (prove)\nusing this:\n  typ_of1 (Ts' @ Ts) f = Some fty\n  typ_of1 Ts u = Some uty\n  last Ts' = uty\n  Ts' \\<noteq> []\n\ngoal (1 subgoal):\n 1. typ_of1 (butlast Ts' @ Ts) (subst_bv1 f (length Ts' - 1) u) = Some fty", "proof (induction f \"length Ts'\" u arbitrary: fty uty Ts Ts' rule: subst_bv1.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i u Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Bv i) = Some fty;\n        typ_of1 Ts u = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Bv i) (length Ts' - 1) u) =\n                         Some fty\n 2. \\<And>T body u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' + 1 = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) body = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 body (length Ts'a - 1) u) =\n                                     Some fty;\n        typ_of1 (Ts' @ Ts) (Abs T body) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Abs T body) (length Ts' - 1) u) =\n                         Some fty\n 3. \\<And>f t u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) f = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 f (length Ts'a - 1) u) =\n                                     Some fty;\n        \\<And>Ts'a fty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ Ts) t = Some fty; typ_of1 Ts u = Some uty;\n            last Ts'a = uty; Ts'a \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a - 1) u) =\n                             Some fty;\n        typ_of1 (Ts' @ Ts) (f $ t) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts' - 1) u) =\n                         Some fty\n 4. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 5. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "case (1 i arg)"], ["proof (state)\nthis:\n  typ_of1 (Ts' @ Ts) (Bv i) = Some fty\n  typ_of1 Ts arg = Some uty\n  last Ts' = uty\n  Ts' \\<noteq> []\n\ngoal (5 subgoals):\n 1. \\<And>i u Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Bv i) = Some fty;\n        typ_of1 Ts u = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Bv i) (length Ts' - 1) u) =\n                         Some fty\n 2. \\<And>T body u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' + 1 = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) body = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 body (length Ts'a - 1) u) =\n                                     Some fty;\n        typ_of1 (Ts' @ Ts) (Abs T body) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Abs T body) (length Ts' - 1) u) =\n                         Some fty\n 3. \\<And>f t u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) f = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 f (length Ts'a - 1) u) =\n                                     Some fty;\n        \\<And>Ts'a fty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ Ts) t = Some fty; typ_of1 Ts u = Some uty;\n            last Ts'a = uty; Ts'a \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a - 1) u) =\n                             Some fty;\n        typ_of1 (Ts' @ Ts) (f $ t) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts' - 1) u) =\n                         Some fty\n 4. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 5. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "from 1"], ["proof (chain)\npicking this:\n  typ_of1 (Ts' @ Ts) (Bv i) = Some fty\n  typ_of1 Ts arg = Some uty\n  last Ts' = uty\n  Ts' \\<noteq> []", "consider (LT) \"(length Ts' - 1) < i\" | (EQ) \"(length Ts' - 1) = i\" | (GT) \"(length Ts' - 1) > i\""], ["proof (prove)\nusing this:\n  typ_of1 (Ts' @ Ts) (Bv i) = Some fty\n  typ_of1 Ts arg = Some uty\n  last Ts' = uty\n  Ts' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length Ts' - 1 < i \\<Longrightarrow> thesis;\n     length Ts' - 1 = i \\<Longrightarrow> thesis;\n     i < length Ts' - 1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using linorder_neqE_nat"], ["proof (prove)\nusing this:\n  typ_of1 (Ts' @ Ts) (Bv i) = Some fty\n  typ_of1 Ts arg = Some uty\n  last Ts' = uty\n  Ts' \\<noteq> []\n  \\<lbrakk>?x \\<noteq> ?y; ?x < ?y \\<Longrightarrow> ?R;\n   ?y < ?x \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length Ts' - 1 < i \\<Longrightarrow> thesis;\n     length Ts' - 1 = i \\<Longrightarrow> thesis;\n     i < length Ts' - 1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>length Ts' - 1 < i \\<Longrightarrow> ?thesis;\n   length Ts' - 1 = i \\<Longrightarrow> ?thesis;\n   i < length Ts' - 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (5 subgoals):\n 1. \\<And>i u Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Bv i) = Some fty;\n        typ_of1 Ts u = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Bv i) (length Ts' - 1) u) =\n                         Some fty\n 2. \\<And>T body u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' + 1 = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) body = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 body (length Ts'a - 1) u) =\n                                     Some fty;\n        typ_of1 (Ts' @ Ts) (Abs T body) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Abs T body) (length Ts' - 1) u) =\n                         Some fty\n 3. \\<And>f t u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) f = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 f (length Ts'a - 1) u) =\n                                     Some fty;\n        \\<And>Ts'a fty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ Ts) t = Some fty; typ_of1 Ts u = Some uty;\n            last Ts'a = uty; Ts'a \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a - 1) u) =\n                             Some fty;\n        typ_of1 (Ts' @ Ts) (f $ t) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts' - 1) u) =\n                         Some fty\n 4. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 5. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length Ts' - 1 < i \\<Longrightarrow> ?thesis;\n   length Ts' - 1 = i \\<Longrightarrow> ?thesis;\n   i < length Ts' - 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length Ts' - 1 < i \\<Longrightarrow> ?thesis;\n   length Ts' - 1 = i \\<Longrightarrow> ?thesis;\n   i < length Ts' - 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. typ_of1 (butlast Ts' @ Ts) (subst_bv1 (Bv i) (length Ts' - 1) arg) =\n    Some fty", "by cases (metis \"1.prems\" append_assoc append_butlast_last_id length_butlast typ_of1_subst_bv_gen)+"], ["proof (state)\nthis:\n  typ_of1 (butlast Ts' @ Ts) (subst_bv1 (Bv i) (length Ts' - 1) arg) =\n  Some fty\n\ngoal (4 subgoals):\n 1. \\<And>T body u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' + 1 = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) body = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 body (length Ts'a - 1) u) =\n                                     Some fty;\n        typ_of1 (Ts' @ Ts) (Abs T body) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Abs T body) (length Ts' - 1) u) =\n                         Some fty\n 2. \\<And>f t u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) f = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 f (length Ts'a - 1) u) =\n                                     Some fty;\n        \\<And>Ts'a fty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ Ts) t = Some fty; typ_of1 Ts u = Some uty;\n            last Ts'a = uty; Ts'a \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a - 1) u) =\n                             Some fty;\n        typ_of1 (Ts' @ Ts) (f $ t) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts' - 1) u) =\n                         Some fty\n 3. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 4. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>T body u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' + 1 = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) body = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 body (length Ts'a - 1) u) =\n                                     Some fty;\n        typ_of1 (Ts' @ Ts) (Abs T body) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Abs T body) (length Ts' - 1) u) =\n                         Some fty\n 2. \\<And>f t u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) f = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 f (length Ts'a - 1) u) =\n                                     Some fty;\n        \\<And>Ts'a fty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ Ts) t = Some fty; typ_of1 Ts u = Some uty;\n            last Ts'a = uty; Ts'a \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a - 1) u) =\n                             Some fty;\n        typ_of1 (Ts' @ Ts) (f $ t) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts' - 1) u) =\n                         Some fty\n 3. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 4. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "case (2 a T body arg)"], ["proof (state)\nthis:\n  \\<lbrakk>length arg + 1 = length ?Ts'; typ_of1 (?Ts' @ ?Ts) T = Some ?fty;\n   typ_of1 ?Ts body = Some ?uty; last ?Ts' = ?uty; ?Ts' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (butlast ?Ts' @ ?Ts)\n                     (subst_bv1 T (length ?Ts' - 1) body) =\n                    Some ?fty\n  typ_of1 (arg @ Ts) (Abs a T) = Some fty\n  typ_of1 Ts body = Some uty\n  last arg = uty\n  arg \\<noteq> []\n\ngoal (4 subgoals):\n 1. \\<And>T body u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' + 1 = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) body = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 body (length Ts'a - 1) u) =\n                                     Some fty;\n        typ_of1 (Ts' @ Ts) (Abs T body) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Abs T body) (length Ts' - 1) u) =\n                         Some fty\n 2. \\<And>f t u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) f = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 f (length Ts'a - 1) u) =\n                                     Some fty;\n        \\<And>Ts'a fty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ Ts) t = Some fty; typ_of1 Ts u = Some uty;\n            last Ts'a = uty; Ts'a \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a - 1) u) =\n                             Some fty;\n        typ_of1 (Ts' @ Ts) (f $ t) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts' - 1) u) =\n                         Some fty\n 3. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 4. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length arg + 1 = length ?Ts'; typ_of1 (?Ts' @ ?Ts) T = Some ?fty;\n   typ_of1 ?Ts body = Some ?uty; last ?Ts' = ?uty; ?Ts' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (butlast ?Ts' @ ?Ts)\n                     (subst_bv1 T (length ?Ts' - 1) body) =\n                    Some ?fty\n  typ_of1 (arg @ Ts) (Abs a T) = Some fty\n  typ_of1 Ts body = Some uty\n  last arg = uty\n  arg \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length arg + 1 = length ?Ts'; typ_of1 (?Ts' @ ?Ts) T = Some ?fty;\n   typ_of1 ?Ts body = Some ?uty; last ?Ts' = ?uty; ?Ts' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (butlast ?Ts' @ ?Ts)\n                     (subst_bv1 T (length ?Ts' - 1) body) =\n                    Some ?fty\n  typ_of1 (arg @ Ts) (Abs a T) = Some fty\n  typ_of1 Ts body = Some uty\n  last arg = uty\n  arg \\<noteq> []\n\ngoal (1 subgoal):\n 1. typ_of1 (butlast arg @ Ts) (subst_bv1 (Abs a T) (length arg - 1) body) =\n    Some fty", "by (metis append.assoc append_butlast_last_id length_butlast typ_of1_subst_bv_gen)"], ["proof (state)\nthis:\n  typ_of1 (butlast arg @ Ts) (subst_bv1 (Abs a T) (length arg - 1) body) =\n  Some fty\n\ngoal (3 subgoals):\n 1. \\<And>f t u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) f = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 f (length Ts'a - 1) u) =\n                                     Some fty;\n        \\<And>Ts'a fty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ Ts) t = Some fty; typ_of1 Ts u = Some uty;\n            last Ts'a = uty; Ts'a \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a - 1) u) =\n                             Some fty;\n        typ_of1 (Ts' @ Ts) (f $ t) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts' - 1) u) =\n                         Some fty\n 2. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 3. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f t u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) f = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 f (length Ts'a - 1) u) =\n                                     Some fty;\n        \\<And>Ts'a fty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ Ts) t = Some fty; typ_of1 Ts u = Some uty;\n            last Ts'a = uty; Ts'a \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a - 1) u) =\n                             Some fty;\n        typ_of1 (Ts' @ Ts) (f $ t) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts' - 1) u) =\n                         Some fty\n 2. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 3. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "case (3 f t arg)"], ["proof (state)\nthis:\n  \\<lbrakk>length Ts' = length ?Ts'; typ_of1 (?Ts' @ ?Ts) f = Some ?fty;\n   typ_of1 ?Ts arg = Some ?uty; last ?Ts' = ?uty; ?Ts' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (butlast ?Ts' @ ?Ts)\n                     (subst_bv1 f (length ?Ts' - 1) arg) =\n                    Some ?fty\n  \\<lbrakk>length Ts' = length ?Ts'; typ_of1 (?Ts' @ ?Ts) t = Some ?fty;\n   typ_of1 ?Ts arg = Some ?uty; last ?Ts' = ?uty; ?Ts' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (butlast ?Ts' @ ?Ts)\n                     (subst_bv1 t (length ?Ts' - 1) arg) =\n                    Some ?fty\n  typ_of1 (Ts' @ Ts) (f $ t) = Some fty\n  typ_of1 Ts arg = Some uty\n  last Ts' = uty\n  Ts' \\<noteq> []\n\ngoal (3 subgoals):\n 1. \\<And>f t u Ts' fty uty Ts.\n       \\<lbrakk>\\<And>Ts'a fty uty Ts.\n                   \\<lbrakk>length Ts' = length Ts'a;\n                    typ_of1 (Ts'a @ Ts) f = Some fty;\n                    typ_of1 Ts u = Some uty; last Ts'a = uty;\n                    Ts'a \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n(subst_bv1 f (length Ts'a - 1) u) =\n                                     Some fty;\n        \\<And>Ts'a fty uty Ts.\n           \\<lbrakk>length Ts' = length Ts'a;\n            typ_of1 (Ts'a @ Ts) t = Some fty; typ_of1 Ts u = Some uty;\n            last Ts'a = uty; Ts'a \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (butlast Ts'a @ Ts)\n                              (subst_bv1 t (length Ts'a - 1) u) =\n                             Some fty;\n        typ_of1 (Ts' @ Ts) (f $ t) = Some fty; typ_of1 Ts u = Some uty;\n        last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (f $ t) (length Ts' - 1) u) =\n                         Some fty\n 2. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 3. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length Ts' = length ?Ts'; typ_of1 (?Ts' @ ?Ts) f = Some ?fty;\n   typ_of1 ?Ts arg = Some ?uty; last ?Ts' = ?uty; ?Ts' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (butlast ?Ts' @ ?Ts)\n                     (subst_bv1 f (length ?Ts' - 1) arg) =\n                    Some ?fty\n  \\<lbrakk>length Ts' = length ?Ts'; typ_of1 (?Ts' @ ?Ts) t = Some ?fty;\n   typ_of1 ?Ts arg = Some ?uty; last ?Ts' = ?uty; ?Ts' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (butlast ?Ts' @ ?Ts)\n                     (subst_bv1 t (length ?Ts' - 1) arg) =\n                    Some ?fty\n  typ_of1 (Ts' @ Ts) (f $ t) = Some fty\n  typ_of1 Ts arg = Some uty\n  last Ts' = uty\n  Ts' \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length Ts' = length ?Ts'; typ_of1 (?Ts' @ ?Ts) f = Some ?fty;\n   typ_of1 ?Ts arg = Some ?uty; last ?Ts' = ?uty; ?Ts' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (butlast ?Ts' @ ?Ts)\n                     (subst_bv1 f (length ?Ts' - 1) arg) =\n                    Some ?fty\n  \\<lbrakk>length Ts' = length ?Ts'; typ_of1 (?Ts' @ ?Ts) t = Some ?fty;\n   typ_of1 ?Ts arg = Some ?uty; last ?Ts' = ?uty; ?Ts' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (butlast ?Ts' @ ?Ts)\n                     (subst_bv1 t (length ?Ts' - 1) arg) =\n                    Some ?fty\n  typ_of1 (Ts' @ Ts) (f $ t) = Some fty\n  typ_of1 Ts arg = Some uty\n  last Ts' = uty\n  Ts' \\<noteq> []\n\ngoal (1 subgoal):\n 1. typ_of1 (butlast Ts' @ Ts) (subst_bv1 (f $ t) (length Ts' - 1) arg) =\n    Some fty", "by (auto simp add: bind_eq_Some_conv nth_append incr_boundvars_def subst_bv_def \n        split: if_splits)"], ["proof (state)\nthis:\n  typ_of1 (butlast Ts' @ Ts) (subst_bv1 (f $ t) (length Ts' - 1) arg) =\n  Some fty\n\ngoal (2 subgoals):\n 1. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Ct v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Ct v va) (length Ts' - 1) uv_) =\n                         Some fty\n 2. \\<And>v va uv_ Ts' fty uty Ts.\n       \\<lbrakk>typ_of1 (Ts' @ Ts) (Fv v va) = Some fty;\n        typ_of1 Ts uv_ = Some uty; last Ts' = uty; Ts' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (butlast Ts' @ Ts)\n                          (subst_bv1 (Fv v va) (length Ts' - 1) uv_) =\n                         Some fty", "qed auto"], ["", "corollary typ_of1_subst_bv_gen':\n  assumes \"typ_of1 (uty#Ts) t = Some tty\"\n    and \"typ_of1 Ts u = Some uty\"\n  shows \"typ_of1 Ts (subst_bv1 t 0 u) = Some tty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts (subst_bv1 t 0 u) = Some tty", "using assms typ_of1_subst_bv_gen"], ["proof (prove)\nusing this:\n  typ_of1 (uty # Ts) t = Some tty\n  typ_of1 Ts u = Some uty\n  \\<lbrakk>typ_of1 (?Ts' @ [?uty] @ ?Ts) ?t = Some ?tty;\n   typ_of1 ?Ts ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts' @ ?Ts) (subst_bv1 ?t (length ?Ts') ?u) =\n                    Some ?tty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (subst_bv1 t 0 u) = Some tty", "by (metis append.left_neutral append_Cons list.size(3))"], ["", "lemma typ_of_betapply: \n  assumes \"typ_of1 Ts (Abs uty t) = Some (uty \\<rightarrow> tty)\"\n  assumes \"typ_of1 Ts u = Some uty\"\n  shows \"typ_of1 Ts ((Abs uty t) \\<bullet> u) = Some tty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts (Abs uty t \\<bullet> u) = Some tty", "using assms typ_of1_subst_bv_gen'"], ["proof (prove)\nusing this:\n  typ_of1 Ts (Abs uty t) = Some (uty \\<rightarrow> tty)\n  typ_of1 Ts u = Some uty\n  \\<lbrakk>typ_of1 (?uty # ?Ts) ?t = Some ?tty;\n   typ_of1 ?Ts ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (subst_bv1 ?t 0 ?u) = Some ?tty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (Abs uty t \\<bullet> u) = Some tty", "by (auto simp add: bind_eq_Some_conv subst_bv_def)"], ["", "lemma no_Bv_Type_param_irrelevant_typ_of:\n  \"\\<not>exists_subterm (\\<lambda>x . case x of Bv _ \\<Rightarrow> True | _ \\<Rightarrow> False) t \n  \\<Longrightarrow> typ_of1 Ts t = typ_of1 Ts' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> exists_subterm\n            (\\<lambda>x.\n                case x of Bv x \\<Rightarrow> True | _ \\<Rightarrow> False)\n            t \\<Longrightarrow>\n    typ_of1 Ts t = typ_of1 Ts' t", "by (induction t arbitrary: Ts Ts') (simp_all, metis+)"], ["", "lemma typ_of1_drop_extra_bounds:\n  \"\\<not>loose_bvar t (length Ts) \n  \\<Longrightarrow> typ_of1 (Ts@rest) t = typ_of1 Ts t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t (length Ts) \\<Longrightarrow>\n    typ_of1 (Ts @ rest) t = typ_of1 Ts t", "by (induction Ts t arbitrary: rest rule: typ_of1.induct) (fastforce simp add: nth_append)+"], ["", "lemma typ_of_betaply:\n  assumes \"typ_of t = Some (uty \\<rightarrow> tty)\" \"typ_of u = Some uty\"\n  shows \"typ_of (t \\<bullet> u) = Some tty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (t \\<bullet> u) = Some tty", "proof (cases t)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       t = Ct x11 x12 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 2. \\<And>x21 x22.\n       t = Fv x21 x22 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 3. \\<And>x3. t = Bv x3 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 4. \\<And>x41 x42.\n       t = Abs x41 x42 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 5. \\<And>x51 x52.\n       t = x51 $ x52 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty", "case (Abs T t)"], ["proof (state)\nthis:\n  t = Abs T t\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       t = Ct x11 x12 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 2. \\<And>x21 x22.\n       t = Fv x21 x22 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 3. \\<And>x3. t = Bv x3 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 4. \\<And>x41 x42.\n       t = Abs x41 x42 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 5. \\<And>x51 x52.\n       t = x51 $ x52 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty", "then"], ["proof (chain)\npicking this:\n  t = Abs T t", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Abs T t\n\ngoal (1 subgoal):\n 1. typ_of (t \\<bullet> u) = Some tty", "proof (cases \"is_open t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>t = Abs T t; is_open t\\<rbrakk>\n    \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 2. \\<lbrakk>t = Abs T t; is_closed t\\<rbrakk>\n    \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty", "case True"], ["proof (state)\nthis:\n  is_open t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = Abs T t; is_open t\\<rbrakk>\n    \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 2. \\<lbrakk>t = Abs T t; is_closed t\\<rbrakk>\n    \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty", "then"], ["proof (chain)\npicking this:\n  is_open t", "show ?thesis"], ["proof (prove)\nusing this:\n  is_open t\n\ngoal (1 subgoal):\n 1. typ_of (t \\<bullet> u) = Some tty", "unfolding is_open_def"], ["proof (prove)\nusing this:\n  loose_bvar t 0\n\ngoal (1 subgoal):\n 1. typ_of (t \\<bullet> u) = Some tty", "using assms Abs typ_of1_subst_bv"], ["proof (prove)\nusing this:\n  loose_bvar t 0\n  typ_of t = Some (uty \\<rightarrow> tty)\n  typ_of u = Some uty\n  t = Abs T t\n  \\<lbrakk>typ_of1 (?Ts @ [?uty]) ?f = Some ?fty;\n   typ_of ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (subst_bv1 ?f (length ?Ts) ?u) = Some ?fty\n\ngoal (1 subgoal):\n 1. typ_of (t \\<bullet> u) = Some tty", "apply (simp add: bind_eq_Some_conv subst_bv_def typ_of_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>loose_bvar t 0; typ_of1 [T] t = Some tty \\<and> T = uty;\n     typ_of1 [] u = Some uty; t = Abs uty t;\n     \\<And>Ts uty f fty u.\n        \\<lbrakk>typ_of1 (Ts @ [uty]) f = Some fty;\n         typ_of1 [] u = Some uty\\<rbrakk>\n        \\<Longrightarrow> typ_of1 Ts (subst_bv1 f (length Ts) u) =\n                          Some fty\\<rbrakk>\n    \\<Longrightarrow> typ_of1 [] (subst_bv1 t 0 u) = Some tty", "by (metis append_Nil list.size(3) typ_of_def)"], ["proof (state)\nthis:\n  typ_of (t \\<bullet> u) = Some tty\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t = Abs T t; is_closed t\\<rbrakk>\n    \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>t = Abs T t; is_closed t\\<rbrakk>\n    \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty", "case False"], ["proof (state)\nthis:\n  is_closed t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t = Abs T t; is_closed t\\<rbrakk>\n    \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty", "hence \"typ_of1 [uty] t = Some tty\""], ["proof (prove)\nusing this:\n  is_closed t\n\ngoal (1 subgoal):\n 1. typ_of1 [uty] t = Some tty", "using assms(1)"], ["proof (prove)\nusing this:\n  is_closed t\n  typ_of t = Some (uty \\<rightarrow> tty)\n\ngoal (1 subgoal):\n 1. typ_of1 [uty] t = Some tty", "by (auto simp add: bind_eq_Some_conv typ_of_def is_open_def Abs)"], ["proof (state)\nthis:\n  typ_of1 [uty] t = Some tty\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t = Abs T t; is_closed t\\<rbrakk>\n    \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty", "then"], ["proof (chain)\npicking this:\n  typ_of1 [uty] t = Some tty", "show ?thesis"], ["proof (prove)\nusing this:\n  typ_of1 [uty] t = Some tty\n\ngoal (1 subgoal):\n 1. typ_of (t \\<bullet> u) = Some tty", "using assms False no_loose_bvar_imp_no_subst_bv1"], ["proof (prove)\nusing this:\n  typ_of1 [uty] t = Some tty\n  typ_of t = Some (uty \\<rightarrow> tty)\n  typ_of u = Some uty\n  is_closed t\n  \\<not> loose_bvar ?t ?lev \\<Longrightarrow> subst_bv1 ?t ?lev ?u = ?t\n\ngoal (1 subgoal):\n 1. typ_of (t \\<bullet> u) = Some tty", "apply (simp add: bind_eq_Some_conv typ_of_def is_open_def subst_bv_def Abs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 [uty] t = Some tty;\n     typ_of1 [T] t = Some tty \\<and> T = uty; typ_of1 [] u = Some uty;\n     \\<not> loose_bvar t 0;\n     \\<And>t lev u.\n        \\<not> loose_bvar t lev \\<Longrightarrow>\n        subst_bv1 t lev u = t\\<rbrakk>\n    \\<Longrightarrow> typ_of1 [] t = Some tty", "using no_Bv_Type_param_irrelevant_typ_of"], ["proof (prove)\nusing this:\n  \\<not> exists_subterm\n          (\\<lambda>x.\n              case x of Bv x \\<Rightarrow> True | _ \\<Rightarrow> False)\n          ?t \\<Longrightarrow>\n  typ_of1 ?Ts ?t = typ_of1 ?Ts' ?t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 [uty] t = Some tty;\n     typ_of1 [T] t = Some tty \\<and> T = uty; typ_of1 [] u = Some uty;\n     \\<not> loose_bvar t 0;\n     \\<And>t lev u.\n        \\<not> loose_bvar t lev \\<Longrightarrow>\n        subst_bv1 t lev u = t\\<rbrakk>\n    \\<Longrightarrow> typ_of1 [] t = Some tty", "using typ_of1_drop_extra_bounds"], ["proof (prove)\nusing this:\n  \\<not> exists_subterm\n          (\\<lambda>x.\n              case x of Bv x \\<Rightarrow> True | _ \\<Rightarrow> False)\n          ?t \\<Longrightarrow>\n  typ_of1 ?Ts ?t = typ_of1 ?Ts' ?t\n  \\<not> loose_bvar ?t (length ?Ts) \\<Longrightarrow>\n  typ_of1 (?Ts @ ?rest) ?t = typ_of1 ?Ts ?t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 [uty] t = Some tty;\n     typ_of1 [T] t = Some tty \\<and> T = uty; typ_of1 [] u = Some uty;\n     \\<not> loose_bvar t 0;\n     \\<And>t lev u.\n        \\<not> loose_bvar t lev \\<Longrightarrow>\n        subst_bv1 t lev u = t\\<rbrakk>\n    \\<Longrightarrow> typ_of1 [] t = Some tty", "by (metis list.size(3) self_append_conv2)"], ["proof (state)\nthis:\n  typ_of (t \\<bullet> u) = Some tty\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  typ_of (t \\<bullet> u) = Some tty\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       t = Ct x11 x12 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 2. \\<And>x21 x22.\n       t = Fv x21 x22 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 3. \\<And>x3. t = Bv x3 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty\n 4. \\<And>x51 x52.\n       t = x51 $ x52 \\<Longrightarrow> typ_of (t \\<bullet> u) = Some tty", "qed (use assms in \\<open>simp_all add: typ_of_def\\<close>)"], ["", "fun beta_reducible :: \"term \\<Rightarrow> bool\" where\n  \"beta_reducible (App (Abs _ _) _) = True\"\n| \"beta_reducible (Abs _ t) = beta_reducible t\"\n| \"beta_reducible (App t u) = (beta_reducible t \\<or> beta_reducible u)\"\n| \"beta_reducible _ = False\""], ["", "fun eta_reducible :: \"term \\<Rightarrow> bool\" where\n  \"eta_reducible (Abs _ (t $ Bv 0)) = (\\<not> is_dependent t \\<or> eta_reducible t)\"\n| \"eta_reducible (Abs _ t) = eta_reducible t\"\n| \"eta_reducible (App t u) = (eta_reducible t \\<or> eta_reducible u)\"\n| \"eta_reducible _ = False\""], ["", "lemma \"\\<not> loose_bvar t lev \\<Longrightarrow> decr lev t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t lev \\<Longrightarrow> decr lev t = t", "by (induction t arbitrary: lev) auto"], ["", "lemma decr_incr_bv1: \"decr lev (incr_bv 1 lev t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decr lev (incr_bv 1 lev t) = t", "by (induction t arbitrary: lev) auto"], ["", "(* For termination proofs *)"], ["", "fun depth :: \"term \\<Rightarrow> nat\" where\n  \"depth (Abs _ t) = depth t + 1\"\n| \"depth (t $ u) = max (depth t) (depth u) +1\"\n| \"depth t = 0\""], ["", "lemma depth_decr: \"depth (decr lev t) = depth t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. depth (decr lev t) = depth t", "by (induction lev t rule: decr.induct) auto"], ["", "lemma loose_bvar1_decr: \"lev > 0 \\<Longrightarrow> \\<not> loose_bvar1 t (Suc lev) \\<Longrightarrow> \\<not> loose_bvar1 (decr lev t) lev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < lev; \\<not> loose_bvar1 t (Suc lev)\\<rbrakk>\n    \\<Longrightarrow> \\<not> loose_bvar1 (decr lev t) lev", "by (induction lev t arbitrary: rule: decr.induct) auto"], ["", "lemma loose_bvar1_decr':\n  \"\\<not> loose_bvar1 t (Suc lev) \\<Longrightarrow> \\<not> loose_bvar1 t lev \\<Longrightarrow> \\<not> loose_bvar1 (decr lev t) lev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> loose_bvar1 t (Suc lev);\n     \\<not> loose_bvar1 t lev\\<rbrakk>\n    \\<Longrightarrow> \\<not> loose_bvar1 (decr lev t) lev", "by (induction lev t arbitrary: rule: decr.induct) auto"], ["", "lemma eta_reducible_Abs1: \"\\<not> eta_reducible (Abs T (t $ Bv 0)) \\<Longrightarrow> \\<not> eta_reducible t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (Abs T (t $ Bv 0)) \\<Longrightarrow>\n    \\<not> eta_reducible t", "by simp"], ["", "lemma eta_reducible_Abs2: \n  assumes \"\\<not> (\\<exists>f. t=f $ Bv 0)\" \"\\<not> eta_reducible (Abs T t)\" \n  shows \"\\<not> eta_reducible t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eta_reducible t", "proof (cases t)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12. t = Ct x11 x12 \\<Longrightarrow> \\<not> eta_reducible t\n 2. \\<And>x21 x22. t = Fv x21 x22 \\<Longrightarrow> \\<not> eta_reducible t\n 3. \\<And>x3. t = Bv x3 \\<Longrightarrow> \\<not> eta_reducible t\n 4. \\<And>x41 x42. t = Abs x41 x42 \\<Longrightarrow> \\<not> eta_reducible t\n 5. \\<And>x51 x52. t = x51 $ x52 \\<Longrightarrow> \\<not> eta_reducible t", "case (Abs T body)"], ["proof (state)\nthis:\n  t = Abs T body\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12. t = Ct x11 x12 \\<Longrightarrow> \\<not> eta_reducible t\n 2. \\<And>x21 x22. t = Fv x21 x22 \\<Longrightarrow> \\<not> eta_reducible t\n 3. \\<And>x3. t = Bv x3 \\<Longrightarrow> \\<not> eta_reducible t\n 4. \\<And>x41 x42. t = Abs x41 x42 \\<Longrightarrow> \\<not> eta_reducible t\n 5. \\<And>x51 x52. t = x51 $ x52 \\<Longrightarrow> \\<not> eta_reducible t", "then"], ["proof (chain)\npicking this:\n  t = Abs T body", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Abs T body\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible t", "using assms(2)"], ["proof (prove)\nusing this:\n  t = Abs T body\n  \\<not> eta_reducible (Abs T t)\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible t", "by (cases body) auto"], ["proof (state)\nthis:\n  \\<not> eta_reducible t\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12. t = Ct x11 x12 \\<Longrightarrow> \\<not> eta_reducible t\n 2. \\<And>x21 x22. t = Fv x21 x22 \\<Longrightarrow> \\<not> eta_reducible t\n 3. \\<And>x3. t = Bv x3 \\<Longrightarrow> \\<not> eta_reducible t\n 4. \\<And>x51 x52. t = x51 $ x52 \\<Longrightarrow> \\<not> eta_reducible t", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12. t = Ct x11 x12 \\<Longrightarrow> \\<not> eta_reducible t\n 2. \\<And>x21 x22. t = Fv x21 x22 \\<Longrightarrow> \\<not> eta_reducible t\n 3. \\<And>x3. t = Bv x3 \\<Longrightarrow> \\<not> eta_reducible t\n 4. \\<And>x51 x52. t = x51 $ x52 \\<Longrightarrow> \\<not> eta_reducible t", "case (App f u)"], ["proof (state)\nthis:\n  t = f $ u\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12. t = Ct x11 x12 \\<Longrightarrow> \\<not> eta_reducible t\n 2. \\<And>x21 x22. t = Fv x21 x22 \\<Longrightarrow> \\<not> eta_reducible t\n 3. \\<And>x3. t = Bv x3 \\<Longrightarrow> \\<not> eta_reducible t\n 4. \\<And>x51 x52. t = x51 $ x52 \\<Longrightarrow> \\<not> eta_reducible t", "then"], ["proof (chain)\npicking this:\n  t = f $ u", "show ?thesis"], ["proof (prove)\nusing this:\n  t = f $ u\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible t", "using assms less_imp_Suc_add"], ["proof (prove)\nusing this:\n  t = f $ u\n  \\<nexists>f. t = f $ Bv 0\n  \\<not> eta_reducible (Abs T t)\n  ?m < ?n \\<Longrightarrow> \\<exists>k. ?n = Suc (?m + k)\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible t", "by (cases f; cases u) fastforce+"], ["proof (state)\nthis:\n  \\<not> eta_reducible t\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12. t = Ct x11 x12 \\<Longrightarrow> \\<not> eta_reducible t\n 2. \\<And>x21 x22. t = Fv x21 x22 \\<Longrightarrow> \\<not> eta_reducible t\n 3. \\<And>x3. t = Bv x3 \\<Longrightarrow> \\<not> eta_reducible t", "qed auto"], ["", "lemma eta_reducible_Abs: \"\\<not> eta_reducible (Abs T t) \\<Longrightarrow> \\<not> eta_reducible t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (Abs T t) \\<Longrightarrow> \\<not> eta_reducible t", "using eta_reducible_Abs1 eta_reducible_Abs2"], ["proof (prove)\nusing this:\n  \\<not> eta_reducible (Abs ?T (?t $ Bv 0)) \\<Longrightarrow>\n  \\<not> eta_reducible ?t\n  \\<lbrakk>\\<nexists>f. ?t = f $ Bv 0;\n   \\<not> eta_reducible (Abs ?T ?t)\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible ?t\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (Abs T t) \\<Longrightarrow> \\<not> eta_reducible t", "by (metis eta_reducible.simps(11) eta_reducible.simps(14))"], ["", "lemma loose_bvar1_decr'': \"loose_bvar1 t lev \\<Longrightarrow> lev < lev'\\<Longrightarrow> loose_bvar1 (decr lev' t) lev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>loose_bvar1 t lev; lev < lev'\\<rbrakk>\n    \\<Longrightarrow> loose_bvar1 (decr lev' t) lev", "by (induction t arbitrary: lev lev') auto"], ["", "lemma loose_bvar1_decr''': \"loose_bvar1 t (Suc lev) \\<Longrightarrow> lev' \\<le> lev \\<Longrightarrow> loose_bvar1 (decr lev' t) lev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>loose_bvar1 t (Suc lev); lev' \\<le> lev\\<rbrakk>\n    \\<Longrightarrow> loose_bvar1 (decr lev' t) lev", "by (induction t arbitrary: lev lev') auto"], ["", "lemma loose_bvar1_decr'''': \"\\<not> loose_bvar1 t lev' \\<Longrightarrow> lev' \\<le> lev  \\<Longrightarrow> \\<not> loose_bvar1 t (Suc lev) \n  \\<Longrightarrow> \\<not> loose_bvar1 (decr lev' t) lev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> loose_bvar1 t lev'; lev' \\<le> lev;\n     \\<not> loose_bvar1 t (Suc lev)\\<rbrakk>\n    \\<Longrightarrow> \\<not> loose_bvar1 (decr lev' t) lev", "by (induction lev t arbitrary: lev' rule: decr.induct) auto"], ["", "lemma not_eta_reducible_decr: \n  \"\\<not> eta_reducible t \\<Longrightarrow> \\<not> loose_bvar1 t lev \\<Longrightarrow> \\<not> eta_reducible (decr lev t) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> eta_reducible t; \\<not> loose_bvar1 t lev\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (decr lev t)", "proof (induction lev t arbitrary: rule: decr.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>lev i.\n       \\<lbrakk>\\<not> eta_reducible (Bv i);\n        \\<not> loose_bvar1 (Bv i) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Bv i))\n 2. \\<And>lev T t.\n       \\<lbrakk>\\<lbrakk>\\<not> eta_reducible t;\n                 \\<not> loose_bvar1 t (lev + 1)\\<rbrakk>\n                \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) t);\n        \\<not> eta_reducible (Abs T t);\n        \\<not> loose_bvar1 (Abs T t) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T t))\n 3. \\<And>lev t u.\n       \\<lbrakk>\\<lbrakk>\\<not> eta_reducible t;\n                 \\<not> loose_bvar1 t lev\\<rbrakk>\n                \\<Longrightarrow> \\<not> eta_reducible (decr lev t);\n        \\<lbrakk>\\<not> eta_reducible u; \\<not> loose_bvar1 u lev\\<rbrakk>\n        \\<Longrightarrow> \\<not> eta_reducible (decr lev u);\n        \\<not> eta_reducible (t $ u);\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (t $ u))\n 4. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Ct v va);\n        \\<not> loose_bvar1 (Ct v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Ct v va))\n 5. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Fv v va);\n        \\<not> loose_bvar1 (Fv v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Fv v va))", "case (2 lev T body)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> eta_reducible body;\n   \\<not> loose_bvar1 body (lev + 1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) body)\n  \\<not> eta_reducible (Abs T body)\n  \\<not> loose_bvar1 (Abs T body) lev\n\ngoal (5 subgoals):\n 1. \\<And>lev i.\n       \\<lbrakk>\\<not> eta_reducible (Bv i);\n        \\<not> loose_bvar1 (Bv i) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Bv i))\n 2. \\<And>lev T t.\n       \\<lbrakk>\\<lbrakk>\\<not> eta_reducible t;\n                 \\<not> loose_bvar1 t (lev + 1)\\<rbrakk>\n                \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) t);\n        \\<not> eta_reducible (Abs T t);\n        \\<not> loose_bvar1 (Abs T t) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T t))\n 3. \\<And>lev t u.\n       \\<lbrakk>\\<lbrakk>\\<not> eta_reducible t;\n                 \\<not> loose_bvar1 t lev\\<rbrakk>\n                \\<Longrightarrow> \\<not> eta_reducible (decr lev t);\n        \\<lbrakk>\\<not> eta_reducible u; \\<not> loose_bvar1 u lev\\<rbrakk>\n        \\<Longrightarrow> \\<not> eta_reducible (decr lev u);\n        \\<not> eta_reducible (t $ u);\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (t $ u))\n 4. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Ct v va);\n        \\<not> loose_bvar1 (Ct v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Ct v va))\n 5. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Fv v va);\n        \\<not> loose_bvar1 (Fv v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Fv v va))", "hence \"\\<not> eta_reducible body\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> eta_reducible body;\n   \\<not> loose_bvar1 body (lev + 1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) body)\n  \\<not> eta_reducible (Abs T body)\n  \\<not> loose_bvar1 (Abs T body) lev\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible body", "using eta_reducible_Abs"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> eta_reducible body;\n   \\<not> loose_bvar1 body (lev + 1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) body)\n  \\<not> eta_reducible (Abs T body)\n  \\<not> loose_bvar1 (Abs T body) lev\n  \\<not> eta_reducible (Abs ?T ?t) \\<Longrightarrow> \\<not> eta_reducible ?t\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible body", "by blast"], ["proof (state)\nthis:\n  \\<not> eta_reducible body\n\ngoal (5 subgoals):\n 1. \\<And>lev i.\n       \\<lbrakk>\\<not> eta_reducible (Bv i);\n        \\<not> loose_bvar1 (Bv i) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Bv i))\n 2. \\<And>lev T t.\n       \\<lbrakk>\\<lbrakk>\\<not> eta_reducible t;\n                 \\<not> loose_bvar1 t (lev + 1)\\<rbrakk>\n                \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) t);\n        \\<not> eta_reducible (Abs T t);\n        \\<not> loose_bvar1 (Abs T t) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T t))\n 3. \\<And>lev t u.\n       \\<lbrakk>\\<lbrakk>\\<not> eta_reducible t;\n                 \\<not> loose_bvar1 t lev\\<rbrakk>\n                \\<Longrightarrow> \\<not> eta_reducible (decr lev t);\n        \\<lbrakk>\\<not> eta_reducible u; \\<not> loose_bvar1 u lev\\<rbrakk>\n        \\<Longrightarrow> \\<not> eta_reducible (decr lev u);\n        \\<not> eta_reducible (t $ u);\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (t $ u))\n 4. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Ct v va);\n        \\<not> loose_bvar1 (Ct v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Ct v va))\n 5. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Fv v va);\n        \\<not> loose_bvar1 (Fv v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Fv v va))", "hence I: \"\\<not> eta_reducible (decr (lev + 1) body)\""], ["proof (prove)\nusing this:\n  \\<not> eta_reducible body\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr (lev + 1) body)", "using \"2.IH\""], ["proof (prove)\nusing this:\n  \\<not> eta_reducible body\n  \\<lbrakk>\\<not> eta_reducible body;\n   \\<not> loose_bvar1 body (lev + 1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) body)\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr (lev + 1) body)", "using \"2.prems\"(2)"], ["proof (prove)\nusing this:\n  \\<not> eta_reducible body\n  \\<lbrakk>\\<not> eta_reducible body;\n   \\<not> loose_bvar1 body (lev + 1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) body)\n  \\<not> loose_bvar1 (Abs T body) lev\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr (lev + 1) body)", "by simp"], ["proof (state)\nthis:\n  \\<not> eta_reducible (decr (lev + 1) body)\n\ngoal (5 subgoals):\n 1. \\<And>lev i.\n       \\<lbrakk>\\<not> eta_reducible (Bv i);\n        \\<not> loose_bvar1 (Bv i) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Bv i))\n 2. \\<And>lev T t.\n       \\<lbrakk>\\<lbrakk>\\<not> eta_reducible t;\n                 \\<not> loose_bvar1 t (lev + 1)\\<rbrakk>\n                \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) t);\n        \\<not> eta_reducible (Abs T t);\n        \\<not> loose_bvar1 (Abs T t) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T t))\n 3. \\<And>lev t u.\n       \\<lbrakk>\\<lbrakk>\\<not> eta_reducible t;\n                 \\<not> loose_bvar1 t lev\\<rbrakk>\n                \\<Longrightarrow> \\<not> eta_reducible (decr lev t);\n        \\<lbrakk>\\<not> eta_reducible u; \\<not> loose_bvar1 u lev\\<rbrakk>\n        \\<Longrightarrow> \\<not> eta_reducible (decr lev u);\n        \\<not> eta_reducible (t $ u);\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (t $ u))\n 4. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Ct v va);\n        \\<not> loose_bvar1 (Ct v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Ct v va))\n 5. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Fv v va);\n        \\<not> loose_bvar1 (Fv v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Fv v va))", "then"], ["proof (chain)\npicking this:\n  \\<not> eta_reducible (decr (lev + 1) body)", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> eta_reducible (decr (lev + 1) body)\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr lev (Abs T body))", "proof(cases body)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "case (App f u)"], ["proof (state)\nthis:\n  body = f $ u\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "note app = this"], ["proof (state)\nthis:\n  body = f $ u\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "then"], ["proof (chain)\npicking this:\n  body = f $ u", "show ?thesis"], ["proof (prove)\nusing this:\n  body = f $ u\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr lev (Abs T body))", "proof (cases u)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>body = f $ u; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>body = f $ u; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>body = f $ u; u = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 4. \\<And>x41 x42.\n       \\<lbrakk>body = f $ u; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 5. \\<And>x51 x52.\n       \\<lbrakk>body = f $ u; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "case (Bv n)"], ["proof (state)\nthis:\n  u = Bv n\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>body = f $ u; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>body = f $ u; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>body = f $ u; u = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 4. \\<And>x41 x42.\n       \\<lbrakk>body = f $ u; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 5. \\<And>x51 x52.\n       \\<lbrakk>body = f $ u; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "then"], ["proof (chain)\npicking this:\n  u = Bv n", "show ?thesis"], ["proof (prove)\nusing this:\n  u = Bv n\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr lev (Abs T body))", "proof (cases \"n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>u = Bv n; n = 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = Bv n; n = 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "have \"is_dependent f\" \"\\<not> eta_reducible f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_dependent f &&& \\<not> eta_reducible f", "using \"0\" \"2.prems\"(1) App Bv eta_reducible.simps(1)"], ["proof (prove)\nusing this:\n  n = 0\n  \\<not> eta_reducible (Abs T body)\n  body = f $ u\n  u = Bv n\n  eta_reducible (Abs ?uu (?t $ Bv 0)) =\n  (\\<not> is_dependent ?t \\<or> eta_reducible ?t)\n\ngoal (1 subgoal):\n 1. is_dependent f &&& \\<not> eta_reducible f", "by blast+"], ["proof (state)\nthis:\n  is_dependent f\n  \\<not> eta_reducible f\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = Bv n; n = 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "hence \"loose_bvar1 f 0\""], ["proof (prove)\nusing this:\n  is_dependent f\n  \\<not> eta_reducible f\n\ngoal (1 subgoal):\n 1. loose_bvar1 f 0", "by (simp add: is_dependent_def)"], ["proof (state)\nthis:\n  loose_bvar1 f 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = Bv n; n = 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "hence \"loose_bvar1 (decr (Suc lev) f) 0\""], ["proof (prove)\nusing this:\n  loose_bvar1 f 0\n\ngoal (1 subgoal):\n 1. loose_bvar1 (decr (Suc lev) f) 0", "using loose_bvar1_decr''"], ["proof (prove)\nusing this:\n  loose_bvar1 f 0\n  \\<lbrakk>loose_bvar1 ?t ?lev; ?lev < ?lev'\\<rbrakk>\n  \\<Longrightarrow> loose_bvar1 (decr ?lev' ?t) ?lev\n\ngoal (1 subgoal):\n 1. loose_bvar1 (decr (Suc lev) f) 0", "by simp"], ["proof (state)\nthis:\n  loose_bvar1 (decr (Suc lev) f) 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = Bv n; n = 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "then"], ["proof (chain)\npicking this:\n  loose_bvar1 (decr (Suc lev) f) 0", "show ?thesis"], ["proof (prove)\nusing this:\n  loose_bvar1 (decr (Suc lev) f) 0\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr lev (Abs T body))", "using I"], ["proof (prove)\nusing this:\n  loose_bvar1 (decr (Suc lev) f) 0\n  \\<not> eta_reducible (decr (lev + 1) body)\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr lev (Abs T body))", "by (auto simp add: 0 Bv App is_dependent_def)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (decr lev (Abs T body))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "case (Suc nat)"], ["proof (state)\nthis:\n  n = Suc nat\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "then"], ["proof (chain)\npicking this:\n  n = Suc nat", "show ?thesis"], ["proof (prove)\nusing this:\n  n = Suc nat\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr lev (Abs T body))", "using 2 App Bv"], ["proof (prove)\nusing this:\n  n = Suc nat\n  \\<lbrakk>\\<not> eta_reducible body;\n   \\<not> loose_bvar1 body (lev + 1)\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (decr (lev + 1) body)\n  \\<not> eta_reducible (Abs T body)\n  \\<not> loose_bvar1 (Abs T body) lev\n  body = f $ u\n  u = Bv n\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr lev (Abs T body))", "by (auto elim: eta_reducible.elims(2) simp add: Suc Bv App is_dependent_def)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (decr lev (Abs T body))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> eta_reducible (decr lev (Abs T body))\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>body = f $ u; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>body = f $ u; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 3. \\<And>x41 x42.\n       \\<lbrakk>body = f $ u; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 4. \\<And>x51 x52.\n       \\<lbrakk>body = f $ u; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>body = f $ u; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>body = f $ u; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 3. \\<And>x41 x42.\n       \\<lbrakk>body = f $ u; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 4. \\<And>x51 x52.\n       \\<lbrakk>body = f $ u; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "case (Abs T t)"], ["proof (state)\nthis:\n  u = Abs T t\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>body = f $ u; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T__ body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>body = f $ u; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T__ body))\n 3. \\<And>x41 x42.\n       \\<lbrakk>body = f $ u; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T__ body))\n 4. \\<And>x51 x52.\n       \\<lbrakk>body = f $ u; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T__ body))", "then"], ["proof (chain)\npicking this:\n  u = Abs T t", "show ?thesis"], ["proof (prove)\nusing this:\n  u = Abs T t\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr lev (Abs T__ body))", "using I"], ["proof (prove)\nusing this:\n  u = Abs T t\n  \\<not> eta_reducible (decr (lev + 1) body)\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (decr lev (Abs T__ body))", "by (auto split: if_splits simp add: App is_dependent_def)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (decr lev (Abs T__ body))\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>body = f $ u; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T__ body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>body = f $ u; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T__ body))\n 3. \\<And>x51 x52.\n       \\<lbrakk>body = f $ u; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T__ body))", "qed (use I in \\<open>auto split: if_splits simp add: App is_dependent_def\\<close>)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (decr lev (Abs T body))\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<not> eta_reducible (decr (lev + 1) body);\n        body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Abs T body))", "qed (auto split: if_splits simp add: is_dependent_def)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (decr lev (Abs T body))\n\ngoal (4 subgoals):\n 1. \\<And>lev i.\n       \\<lbrakk>\\<not> eta_reducible (Bv i);\n        \\<not> loose_bvar1 (Bv i) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (Bv i))\n 2. \\<And>lev t u.\n       \\<lbrakk>\\<lbrakk>\\<not> eta_reducible t;\n                 \\<not> loose_bvar1 t lev\\<rbrakk>\n                \\<Longrightarrow> \\<not> eta_reducible (decr lev t);\n        \\<lbrakk>\\<not> eta_reducible u; \\<not> loose_bvar1 u lev\\<rbrakk>\n        \\<Longrightarrow> \\<not> eta_reducible (decr lev u);\n        \\<not> eta_reducible (t $ u);\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr lev (t $ u))\n 3. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Ct v va);\n        \\<not> loose_bvar1 (Ct v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Ct v va))\n 4. \\<And>uu_ v va.\n       \\<lbrakk>\\<not> eta_reducible (Fv v va);\n        \\<not> loose_bvar1 (Fv v va) uu_\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (decr uu_ (Fv v va))", "qed auto"], ["", "function (sequential, domintros) eta_norm :: \"term \\<Rightarrow> term\" where\n  \"eta_norm (Abs T t) = (case eta_norm t of \n    f $ Bv 0 \\<Rightarrow> (if is_dependent f then Abs T (f $ Bv 0) else decr 0 (eta_norm f))\n  | body \\<Rightarrow> Abs T body)\"\n| \"eta_norm (t $ u) = eta_norm t $ eta_norm u\"\n| \"eta_norm t = t\""], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>T t. x = Abs T t \\<Longrightarrow> P;\n        \\<And>t u. x = t $ u \\<Longrightarrow> P;\n        \\<And>v va. x = Ct v va \\<Longrightarrow> P;\n        \\<And>v va. x = Fv v va \\<Longrightarrow> P;\n        \\<And>v. x = Bv v \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>T t Ta ta.\n       Abs T t = Abs Ta ta \\<Longrightarrow>\n       (case eta_norm_sumC t of\n        Ct literal typ \\<Rightarrow> Abs T (Ct literal typ)\n        | Fv variable typ \\<Rightarrow> Abs T (Fv variable typ)\n        | Bv nat \\<Rightarrow> Abs T (Bv nat)\n        | Abs typ term \\<Rightarrow> Abs T (Abs typ term)\n        | f $ Ct literal typ \\<Rightarrow> Abs T (f $ Ct literal typ)\n        | f $ Fv variable typ \\<Rightarrow> Abs T (f $ Fv variable typ)\n        | f $ Bv 0 \\<Rightarrow>\n            if is_dependent f then Abs T (f $ Bv 0)\n            else decr 0 (eta_norm_sumC f)\n        | f $ Bv (Suc nata) \\<Rightarrow> Abs T (f $ Bv (Suc nata))\n        | f $ Abs typ term \\<Rightarrow> Abs T (f $ Abs typ term)\n        | f $ (term1b $ term2a) \\<Rightarrow>\n            Abs T (f $ (term1b $ term2a))) =\n       (case eta_norm_sumC ta of\n        Ct literal typ \\<Rightarrow> Abs Ta (Ct literal typ)\n        | Fv variable typ \\<Rightarrow> Abs Ta (Fv variable typ)\n        | Bv nat \\<Rightarrow> Abs Ta (Bv nat)\n        | Abs typ term \\<Rightarrow> Abs Ta (Abs typ term)\n        | f $ Ct literal typ \\<Rightarrow> Abs Ta (f $ Ct literal typ)\n        | f $ Fv variable typ \\<Rightarrow> Abs Ta (f $ Fv variable typ)\n        | f $ Bv 0 \\<Rightarrow>\n            if is_dependent f then Abs Ta (f $ Bv 0)\n            else decr 0 (eta_norm_sumC f)\n        | f $ Bv (Suc nata) \\<Rightarrow> Abs Ta (f $ Bv (Suc nata))\n        | f $ Abs typ term \\<Rightarrow> Abs Ta (f $ Abs typ term)\n        | f $ (term1b $ term2a) \\<Rightarrow>\n            Abs Ta (f $ (term1b $ term2a)))\n 3. \\<And>T t ta u.\n       Abs T t = ta $ u \\<Longrightarrow>\n       (case eta_norm_sumC t of\n        Ct literal typ \\<Rightarrow> Abs T (Ct literal typ)\n        | Fv variable typ \\<Rightarrow> Abs T (Fv variable typ)\n        | Bv nat \\<Rightarrow> Abs T (Bv nat)\n        | Abs typ term \\<Rightarrow> Abs T (Abs typ term)\n        | f $ Ct literal typ \\<Rightarrow> Abs T (f $ Ct literal typ)\n        | f $ Fv variable typ \\<Rightarrow> Abs T (f $ Fv variable typ)\n        | f $ Bv 0 \\<Rightarrow>\n            if is_dependent f then Abs T (f $ Bv 0)\n            else decr 0 (eta_norm_sumC f)\n        | f $ Bv (Suc nata) \\<Rightarrow> Abs T (f $ Bv (Suc nata))\n        | f $ Abs typ term \\<Rightarrow> Abs T (f $ Abs typ term)\n        | f $ (term1b $ term2a) \\<Rightarrow>\n            Abs T (f $ (term1b $ term2a))) =\n       eta_norm_sumC ta $ eta_norm_sumC u\n 4. \\<And>T t v va.\n       Abs T t = Ct v va \\<Longrightarrow>\n       (case eta_norm_sumC t of\n        Ct literal typ \\<Rightarrow> Abs T (Ct literal typ)\n        | Fv variable typ \\<Rightarrow> Abs T (Fv variable typ)\n        | Bv nat \\<Rightarrow> Abs T (Bv nat)\n        | Abs typ term \\<Rightarrow> Abs T (Abs typ term)\n        | f $ Ct literal typ \\<Rightarrow> Abs T (f $ Ct literal typ)\n        | f $ Fv variable typ \\<Rightarrow> Abs T (f $ Fv variable typ)\n        | f $ Bv 0 \\<Rightarrow>\n            if is_dependent f then Abs T (f $ Bv 0)\n            else decr 0 (eta_norm_sumC f)\n        | f $ Bv (Suc nata) \\<Rightarrow> Abs T (f $ Bv (Suc nata))\n        | f $ Abs typ term \\<Rightarrow> Abs T (f $ Abs typ term)\n        | f $ (term1b $ term2a) \\<Rightarrow>\n            Abs T (f $ (term1b $ term2a))) =\n       Ct v va\n 5. \\<And>T t v va.\n       Abs T t = Fv v va \\<Longrightarrow>\n       (case eta_norm_sumC t of\n        Ct literal typ \\<Rightarrow> Abs T (Ct literal typ)\n        | Fv variable typ \\<Rightarrow> Abs T (Fv variable typ)\n        | Bv nat \\<Rightarrow> Abs T (Bv nat)\n        | Abs typ term \\<Rightarrow> Abs T (Abs typ term)\n        | f $ Ct literal typ \\<Rightarrow> Abs T (f $ Ct literal typ)\n        | f $ Fv variable typ \\<Rightarrow> Abs T (f $ Fv variable typ)\n        | f $ Bv 0 \\<Rightarrow>\n            if is_dependent f then Abs T (f $ Bv 0)\n            else decr 0 (eta_norm_sumC f)\n        | f $ Bv (Suc nata) \\<Rightarrow> Abs T (f $ Bv (Suc nata))\n        | f $ Abs typ term \\<Rightarrow> Abs T (f $ Abs typ term)\n        | f $ (term1b $ term2a) \\<Rightarrow>\n            Abs T (f $ (term1b $ term2a))) =\n       Fv v va\n 6. \\<And>T t v.\n       Abs T t = Bv v \\<Longrightarrow>\n       (case eta_norm_sumC t of\n        Ct literal typ \\<Rightarrow> Abs T (Ct literal typ)\n        | Fv variable typ \\<Rightarrow> Abs T (Fv variable typ)\n        | Bv nat \\<Rightarrow> Abs T (Bv nat)\n        | Abs typ term \\<Rightarrow> Abs T (Abs typ term)\n        | f $ Ct literal typ \\<Rightarrow> Abs T (f $ Ct literal typ)\n        | f $ Fv variable typ \\<Rightarrow> Abs T (f $ Fv variable typ)\n        | f $ Bv 0 \\<Rightarrow>\n            if is_dependent f then Abs T (f $ Bv 0)\n            else decr 0 (eta_norm_sumC f)\n        | f $ Bv (Suc nata) \\<Rightarrow> Abs T (f $ Bv (Suc nata))\n        | f $ Abs typ term \\<Rightarrow> Abs T (f $ Abs typ term)\n        | f $ (term1b $ term2a) \\<Rightarrow>\n            Abs T (f $ (term1b $ term2a))) =\n       Bv v\n 7. \\<And>t u ta ua.\n       t $ u = ta $ ua \\<Longrightarrow>\n       eta_norm_sumC t $ eta_norm_sumC u =\n       eta_norm_sumC ta $ eta_norm_sumC ua\n 8. \\<And>t u v va.\n       t $ u = Ct v va \\<Longrightarrow>\n       eta_norm_sumC t $ eta_norm_sumC u = Ct v va\n 9. \\<And>t u v va.\n       t $ u = Fv v va \\<Longrightarrow>\n       eta_norm_sumC t $ eta_norm_sumC u = Fv v va\n 10. \\<And>t u v.\n        t $ u = Bv v \\<Longrightarrow>\n        eta_norm_sumC t $ eta_norm_sumC u = Bv v\nA total of 16 subgoals...", "by pat_completeness auto"], ["", "lemma eta_norm_reduces_depth: \"eta_norm_dom t \\<Longrightarrow> depth (eta_norm t) <= depth t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eta_norm_dom t \\<Longrightarrow> depth (eta_norm t) \\<le> depth t", "by (induction t rule: eta_norm.pinduct)\n    (use depth_decr in \\<open>fastforce simp add: eta_norm.psimps eta_norm.domintros is_dependent_def \n      split: term.splits nat.splits\\<close>)+"], ["", "termination eta_norm"], ["proof (prove)\ngoal (1 subgoal):\n 1. All eta_norm_dom", "proof (relation \"measure depth\")"], ["proof (state)\ngoal (5 subgoals):\n 1. wf (measure depth)\n 2. \\<And>T t. (t, Abs T t) \\<in> measure depth\n 3. \\<And>T t x51 x52 x3.\n       \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n        \\<not> is_dependent x51; eta_norm_dom t\\<rbrakk>\n       \\<Longrightarrow> (x51, Abs T t) \\<in> measure depth\n 4. \\<And>t u. (t, t $ u) \\<in> measure depth\n 5. \\<And>t u. (u, t $ u) \\<in> measure depth", "fix T body t u n"], ["proof (state)\ngoal (5 subgoals):\n 1. wf (measure depth)\n 2. \\<And>T t. (t, Abs T t) \\<in> measure depth\n 3. \\<And>T t x51 x52 x3.\n       \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n        \\<not> is_dependent x51; eta_norm_dom t\\<rbrakk>\n       \\<Longrightarrow> (x51, Abs T t) \\<in> measure depth\n 4. \\<And>t u. (t, t $ u) \\<in> measure depth\n 5. \\<And>t u. (u, t $ u) \\<in> measure depth", "assume asms: \"eta_norm body = t $ u\" \"u = Bv n\" \"n = 0\" \"\\<not> is_dependent t\" \"eta_norm_dom body\""], ["proof (state)\nthis:\n  eta_norm body = t $ u\n  u = Bv n\n  n = 0\n  \\<not> is_dependent t\n  eta_norm_dom body\n\ngoal (5 subgoals):\n 1. wf (measure depth)\n 2. \\<And>T t. (t, Abs T t) \\<in> measure depth\n 3. \\<And>T t x51 x52 x3.\n       \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n        \\<not> is_dependent x51; eta_norm_dom t\\<rbrakk>\n       \\<Longrightarrow> (x51, Abs T t) \\<in> measure depth\n 4. \\<And>t u. (t, t $ u) \\<in> measure depth\n 5. \\<And>t u. (u, t $ u) \\<in> measure depth", "have \"depth t < depth (t $ Bv 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. depth t < depth (t $ Bv 0)", "by auto"], ["proof (state)\nthis:\n  depth t < depth (t $ Bv 0)\n\ngoal (5 subgoals):\n 1. wf (measure depth)\n 2. \\<And>T t. (t, Abs T t) \\<in> measure depth\n 3. \\<And>T t x51 x52 x3.\n       \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n        \\<not> is_dependent x51; eta_norm_dom t\\<rbrakk>\n       \\<Longrightarrow> (x51, Abs T t) \\<in> measure depth\n 4. \\<And>t u. (t, t $ u) \\<in> measure depth\n 5. \\<And>t u. (u, t $ u) \\<in> measure depth", "moreover"], ["proof (state)\nthis:\n  depth t < depth (t $ Bv 0)\n\ngoal (5 subgoals):\n 1. wf (measure depth)\n 2. \\<And>T t. (t, Abs T t) \\<in> measure depth\n 3. \\<And>T t x51 x52 x3.\n       \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n        \\<not> is_dependent x51; eta_norm_dom t\\<rbrakk>\n       \\<Longrightarrow> (x51, Abs T t) \\<in> measure depth\n 4. \\<And>t u. (t, t $ u) \\<in> measure depth\n 5. \\<And>t u. (u, t $ u) \\<in> measure depth", "have \"depth (eta_norm body) \\<le> depth body\""], ["proof (prove)\ngoal (1 subgoal):\n 1. depth (eta_norm body) \\<le> depth body", "using asms eta_norm_reduces_depth"], ["proof (prove)\nusing this:\n  eta_norm body = t $ u\n  u = Bv n\n  n = 0\n  \\<not> is_dependent t\n  eta_norm_dom body\n  eta_norm_dom ?t \\<Longrightarrow> depth (eta_norm ?t) \\<le> depth ?t\n\ngoal (1 subgoal):\n 1. depth (eta_norm body) \\<le> depth body", "by blast"], ["proof (state)\nthis:\n  depth (eta_norm body) \\<le> depth body\n\ngoal (5 subgoals):\n 1. wf (measure depth)\n 2. \\<And>T t. (t, Abs T t) \\<in> measure depth\n 3. \\<And>T t x51 x52 x3.\n       \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n        \\<not> is_dependent x51; eta_norm_dom t\\<rbrakk>\n       \\<Longrightarrow> (x51, Abs T t) \\<in> measure depth\n 4. \\<And>t u. (t, t $ u) \\<in> measure depth\n 5. \\<And>t u. (u, t $ u) \\<in> measure depth", "ultimately"], ["proof (chain)\npicking this:\n  depth t < depth (t $ Bv 0)\n  depth (eta_norm body) \\<le> depth body", "show \"(t, Abs T body) \\<in> measure depth\""], ["proof (prove)\nusing this:\n  depth t < depth (t $ Bv 0)\n  depth (eta_norm body) \\<le> depth body\n\ngoal (1 subgoal):\n 1. (t, Abs T body) \\<in> measure depth", "using asms"], ["proof (prove)\nusing this:\n  depth t < depth (t $ Bv 0)\n  depth (eta_norm body) \\<le> depth body\n  eta_norm body = t $ u\n  u = Bv n\n  n = 0\n  \\<not> is_dependent t\n  eta_norm_dom body\n\ngoal (1 subgoal):\n 1. (t, Abs T body) \\<in> measure depth", "by (auto simp add: eta_norm.psimps)"], ["proof (state)\nthis:\n  (t, Abs T body) \\<in> measure depth\n\ngoal (4 subgoals):\n 1. wf (measure depth)\n 2. \\<And>T t. (t, Abs T t) \\<in> measure depth\n 3. \\<And>t u. (t, t $ u) \\<in> measure depth\n 4. \\<And>t u. (u, t $ u) \\<in> measure depth", "qed simp_all"], ["", "lemma loose_bvar1_eta_norm: \"loose_bvar1 t lev \\<Longrightarrow> loose_bvar1 (eta_norm t) lev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. loose_bvar1 t lev \\<Longrightarrow> loose_bvar1 (eta_norm t) lev", "by (induction t arbitrary: lev rule: eta_norm.induct)\n    (use loose_bvar1_decr''' in \\<open>(fastforce split: term.splits nat.splits)+\\<close>)"], ["", "lemma loose_bvar1_eta_norm': \"\\<not> loose_bvar1 t lev \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm t) lev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t lev \\<Longrightarrow>\n    \\<not> loose_bvar1 (eta_norm t) lev", "proof (induction t arbitrary: lev rule: eta_norm.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>T t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<not> loose_bvar1 t lev \\<Longrightarrow>\n                   \\<not> loose_bvar1 (eta_norm t) lev;\n        \\<And>x51 x52 x3 lev.\n           \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51; \\<not> loose_bvar1 x51 lev\\<rbrakk>\n           \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm x51) lev;\n        \\<not> loose_bvar1 (Abs T t) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T t)) lev\n 2. \\<And>t u lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<not> loose_bvar1 t lev \\<Longrightarrow>\n                   \\<not> loose_bvar1 (eta_norm t) lev;\n        \\<And>lev.\n           \\<not> loose_bvar1 u lev \\<Longrightarrow>\n           \\<not> loose_bvar1 (eta_norm u) lev;\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (t $ u)) lev\n 3. \\<And>v va lev.\n       \\<not> loose_bvar1 (Ct v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Ct v va)) lev\n 4. \\<And>v va lev.\n       \\<not> loose_bvar1 (Fv v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Fv v va)) lev\n 5. \\<And>v lev.\n       \\<not> loose_bvar1 (Bv v) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Bv v)) lev", "case (1 T body)"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 body ?lev \\<Longrightarrow>\n  \\<not> loose_bvar1 (eta_norm body) ?lev\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0; \\<not> loose_bvar1 ?x51.0 ?lev\\<rbrakk>\n  \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm ?x51.0) ?lev\n  \\<not> loose_bvar1 (Abs T body) lev\n\ngoal (5 subgoals):\n 1. \\<And>T t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<not> loose_bvar1 t lev \\<Longrightarrow>\n                   \\<not> loose_bvar1 (eta_norm t) lev;\n        \\<And>x51 x52 x3 lev.\n           \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51; \\<not> loose_bvar1 x51 lev\\<rbrakk>\n           \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm x51) lev;\n        \\<not> loose_bvar1 (Abs T t) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T t)) lev\n 2. \\<And>t u lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<not> loose_bvar1 t lev \\<Longrightarrow>\n                   \\<not> loose_bvar1 (eta_norm t) lev;\n        \\<And>lev.\n           \\<not> loose_bvar1 u lev \\<Longrightarrow>\n           \\<not> loose_bvar1 (eta_norm u) lev;\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (t $ u)) lev\n 3. \\<And>v va lev.\n       \\<not> loose_bvar1 (Ct v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Ct v va)) lev\n 4. \\<And>v va lev.\n       \\<not> loose_bvar1 (Fv v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Fv v va)) lev\n 5. \\<And>v lev.\n       \\<not> loose_bvar1 (Bv v) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Bv v)) lev", "hence \"\\<not> loose_bvar1 body (Suc lev)\""], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 body ?lev \\<Longrightarrow>\n  \\<not> loose_bvar1 (eta_norm body) ?lev\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0; \\<not> loose_bvar1 ?x51.0 ?lev\\<rbrakk>\n  \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm ?x51.0) ?lev\n  \\<not> loose_bvar1 (Abs T body) lev\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 body (Suc lev)", "by simp"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 body (Suc lev)\n\ngoal (5 subgoals):\n 1. \\<And>T t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<not> loose_bvar1 t lev \\<Longrightarrow>\n                   \\<not> loose_bvar1 (eta_norm t) lev;\n        \\<And>x51 x52 x3 lev.\n           \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51; \\<not> loose_bvar1 x51 lev\\<rbrakk>\n           \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm x51) lev;\n        \\<not> loose_bvar1 (Abs T t) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T t)) lev\n 2. \\<And>t u lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<not> loose_bvar1 t lev \\<Longrightarrow>\n                   \\<not> loose_bvar1 (eta_norm t) lev;\n        \\<And>lev.\n           \\<not> loose_bvar1 u lev \\<Longrightarrow>\n           \\<not> loose_bvar1 (eta_norm u) lev;\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (t $ u)) lev\n 3. \\<And>v va lev.\n       \\<not> loose_bvar1 (Ct v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Ct v va)) lev\n 4. \\<And>v va lev.\n       \\<not> loose_bvar1 (Fv v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Fv v va)) lev\n 5. \\<And>v lev.\n       \\<not> loose_bvar1 (Bv v) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Bv v)) lev", "hence I: \"\\<not> loose_bvar1 (eta_norm body) (Suc lev)\""], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 body (Suc lev)\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 (eta_norm body) (Suc lev)", "using 1"], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 body (Suc lev)\n  \\<not> loose_bvar1 body ?lev \\<Longrightarrow>\n  \\<not> loose_bvar1 (eta_norm body) ?lev\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0; \\<not> loose_bvar1 ?x51.0 ?lev\\<rbrakk>\n  \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm ?x51.0) ?lev\n  \\<not> loose_bvar1 (Abs T body) lev\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 (eta_norm body) (Suc lev)", "by simp"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 (eta_norm body) (Suc lev)\n\ngoal (5 subgoals):\n 1. \\<And>T t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<not> loose_bvar1 t lev \\<Longrightarrow>\n                   \\<not> loose_bvar1 (eta_norm t) lev;\n        \\<And>x51 x52 x3 lev.\n           \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51; \\<not> loose_bvar1 x51 lev\\<rbrakk>\n           \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm x51) lev;\n        \\<not> loose_bvar1 (Abs T t) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T t)) lev\n 2. \\<And>t u lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<not> loose_bvar1 t lev \\<Longrightarrow>\n                   \\<not> loose_bvar1 (eta_norm t) lev;\n        \\<And>lev.\n           \\<not> loose_bvar1 u lev \\<Longrightarrow>\n           \\<not> loose_bvar1 (eta_norm u) lev;\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (t $ u)) lev\n 3. \\<And>v va lev.\n       \\<not> loose_bvar1 (Ct v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Ct v va)) lev\n 4. \\<And>v va lev.\n       \\<not> loose_bvar1 (Fv v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Fv v va)) lev\n 5. \\<And>v lev.\n       \\<not> loose_bvar1 (Bv v) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Bv v)) lev", "then"], ["proof (chain)\npicking this:\n  \\<not> loose_bvar1 (eta_norm body) (Suc lev)", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 (eta_norm body) (Suc lev)\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 (eta_norm (Abs T body)) lev", "proof (cases body)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev", "case (Abs ty b)"], ["proof (state)\nthis:\n  body = Abs ty b\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 (eta_norm (Abs T body)) lev", "using I loose_bvar1_decr''''"], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 (eta_norm body) (Suc lev)\n  \\<lbrakk>\\<not> loose_bvar1 ?t ?lev'; ?lev' \\<le> ?lev;\n   \\<not> loose_bvar1 ?t (Suc ?lev)\\<rbrakk>\n  \\<Longrightarrow> \\<not> loose_bvar1 (decr ?lev' ?t) ?lev\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 (eta_norm (Abs T body)) lev", "by (auto split: term.splits nat.splits if_splits simp add: \"1.IH\"(2) is_dependent_def)"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T body)) lev", "case (App T t)"], ["proof (state)\nthis:\n  body = T $ t\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev", "then"], ["proof (chain)\npicking this:\n  body = T $ t", "show ?thesis"], ["proof (prove)\nusing this:\n  body = T $ t\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev", "using 1 I loose_bvar1_decr''''"], ["proof (prove)\nusing this:\n  body = T $ t\n  \\<not> loose_bvar1 body ?lev \\<Longrightarrow>\n  \\<not> loose_bvar1 (eta_norm body) ?lev\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0; \\<not> loose_bvar1 ?x51.0 ?lev\\<rbrakk>\n  \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm ?x51.0) ?lev\n  \\<not> loose_bvar1 (Abs T__ body) lev\n  \\<not> loose_bvar1 (eta_norm body) (Suc lev)\n  \\<lbrakk>\\<not> loose_bvar1 ?t ?lev'; ?lev' \\<le> ?lev;\n   \\<not> loose_bvar1 ?t (Suc ?lev)\\<rbrakk>\n  \\<Longrightarrow> \\<not> loose_bvar1 (decr ?lev' ?t) ?lev\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev", "by (fastforce split: term.splits nat.splits if_splits simp add: is_dependent_def)"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> loose_bvar1 (eta_norm body) (Suc lev);\n        body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (Abs T__ body)) lev", "qed (auto split: term.splits nat.splits simp add: is_dependent_def)"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 (eta_norm (Abs T body)) lev\n\ngoal (4 subgoals):\n 1. \\<And>t u lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<not> loose_bvar1 t lev \\<Longrightarrow>\n                   \\<not> loose_bvar1 (eta_norm t) lev;\n        \\<And>lev.\n           \\<not> loose_bvar1 u lev \\<Longrightarrow>\n           \\<not> loose_bvar1 (eta_norm u) lev;\n        \\<not> loose_bvar1 (t $ u) lev\\<rbrakk>\n       \\<Longrightarrow> \\<not> loose_bvar1 (eta_norm (t $ u)) lev\n 2. \\<And>v va lev.\n       \\<not> loose_bvar1 (Ct v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Ct v va)) lev\n 3. \\<And>v va lev.\n       \\<not> loose_bvar1 (Fv v va) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Fv v va)) lev\n 4. \\<And>v lev.\n       \\<not> loose_bvar1 (Bv v) lev \\<Longrightarrow>\n       \\<not> loose_bvar1 (eta_norm (Bv v)) lev", "qed (auto split: term.splits nat.splits simp add: is_dependent_def)"], ["", "lemma not_eta_reducible_eta_norm: \"\\<not> eta_reducible (eta_norm t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm t)", "proof (induction t rule: eta_norm.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>T t.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm t);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51)\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T t))\n 2. \\<And>t u.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm t);\n        \\<not> eta_reducible (eta_norm u)\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (t $ u))\n 3. \\<And>v va. \\<not> eta_reducible (eta_norm (Ct v va))\n 4. \\<And>v va. \\<not> eta_reducible (eta_norm (Fv v va))\n 5. \\<And>v. \\<not> eta_reducible (eta_norm (Bv v))", "case (1 T body)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (eta_norm body)\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (eta_norm ?x51.0)\n\ngoal (5 subgoals):\n 1. \\<And>T t.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm t);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51)\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T t))\n 2. \\<And>t u.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm t);\n        \\<not> eta_reducible (eta_norm u)\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (t $ u))\n 3. \\<And>v va. \\<not> eta_reducible (eta_norm (Ct v va))\n 4. \\<And>v va. \\<not> eta_reducible (eta_norm (Fv v va))\n 5. \\<And>v. \\<not> eta_reducible (eta_norm (Bv v))", "then"], ["proof (chain)\npicking this:\n  \\<not> eta_reducible (eta_norm body)\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (eta_norm ?x51.0)", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> eta_reducible (eta_norm body)\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (eta_norm ?x51.0)\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T body))", "proof (cases \"eta_norm (body)\")"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "case (Abs T t)"], ["proof (state)\nthis:\n  eta_norm body = Abs T t\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T__ body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T__ body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T__ body))\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T__ body))\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T__ body))", "then"], ["proof (chain)\npicking this:\n  eta_norm body = Abs T t", "show ?thesis"], ["proof (prove)\nusing this:\n  eta_norm body = Abs T t\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T__ body))", "using 1"], ["proof (prove)\nusing this:\n  eta_norm body = Abs T t\n  \\<not> eta_reducible (eta_norm body)\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (eta_norm ?x51.0)\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T__ body))", "by auto"], ["proof (state)\nthis:\n  \\<not> eta_reducible (eta_norm (Abs T__ body))\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T__ body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T__ body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T__ body))\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T__ body))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "case (App f u)"], ["proof (state)\nthis:\n  eta_norm body = f $ u\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "then"], ["proof (chain)\npicking this:\n  eta_norm body = f $ u", "show ?thesis"], ["proof (prove)\nusing this:\n  eta_norm body = f $ u\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T body))", "proof (cases \"u = Bv 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>eta_norm body = f $ u; u = Bv 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 2. \\<lbrakk>eta_norm body = f $ u; u \\<noteq> Bv 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "case True"], ["proof (state)\nthis:\n  u = Bv 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>eta_norm body = f $ u; u = Bv 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 2. \\<lbrakk>eta_norm body = f $ u; u \\<noteq> Bv 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "note u = this"], ["proof (state)\nthis:\n  u = Bv 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>eta_norm body = f $ u; u = Bv 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 2. \\<lbrakk>eta_norm body = f $ u; u \\<noteq> Bv 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "then"], ["proof (chain)\npicking this:\n  u = Bv 0", "show ?thesis"], ["proof (prove)\nusing this:\n  u = Bv 0\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T body))", "proof (cases \"is_dependent f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>u = Bv 0; is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 2. \\<lbrakk>u = Bv 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "case True"], ["proof (state)\nthis:\n  is_dependent f\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = Bv 0; is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 2. \\<lbrakk>u = Bv 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "then"], ["proof (chain)\npicking this:\n  is_dependent f", "show ?thesis"], ["proof (prove)\nusing this:\n  is_dependent f\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T body))", "using 1 App u"], ["proof (prove)\nusing this:\n  is_dependent f\n  \\<not> eta_reducible (eta_norm body)\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (eta_norm ?x51.0)\n  eta_norm body = f $ u\n  u = Bv 0\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T body))", "by (auto simp add: is_dependent_def split: term.splits nat.splits if_splits)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (eta_norm (Abs T body))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = Bv 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>u = Bv 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "case False"], ["proof (state)\nthis:\n  \\<not> is_dependent f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = Bv 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "have \"\\<not> eta_reducible f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eta_reducible f", "using 1 App u"], ["proof (prove)\nusing this:\n  \\<not> eta_reducible (eta_norm body)\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (eta_norm ?x51.0)\n  eta_norm body = f $ u\n  u = Bv 0\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible f", "by simp"], ["proof (state)\nthis:\n  \\<not> eta_reducible f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = Bv 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "hence \"\\<not> eta_reducible (eta_norm f)\""], ["proof (prove)\nusing this:\n  \\<not> eta_reducible f\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm f)", "by (simp add: \"1.IH\"(2) App False u)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (eta_norm f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = Bv 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "have \"\\<not> loose_bvar1 f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 f 0", "using False is_dependent_def"], ["proof (prove)\nusing this:\n  \\<not> is_dependent f\n  is_dependent ?t \\<equiv> loose_bvar1 ?t 0\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 f 0", "by blast"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 f 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = Bv 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "hence  \"\\<not> loose_bvar1 (eta_norm f) 0\""], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 f 0\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 (eta_norm f) 0", "using  loose_bvar1_eta_norm'"], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 f 0\n  \\<not> loose_bvar1 ?t ?lev \\<Longrightarrow>\n  \\<not> loose_bvar1 (eta_norm ?t) ?lev\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 (eta_norm f) 0", "by blast"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 (eta_norm f) 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u = Bv 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T body))", "using 1 App u False not_eta_reducible_decr loose_bvar1_eta_norm \\<open>\\<not> loose_bvar1 (eta_norm f) 0\\<close>"], ["proof (prove)\nusing this:\n  \\<not> eta_reducible (eta_norm body)\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (eta_norm ?x51.0)\n  eta_norm body = f $ u\n  u = Bv 0\n  \\<not> is_dependent f\n  \\<lbrakk>\\<not> eta_reducible ?t; \\<not> loose_bvar1 ?t ?lev\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (decr ?lev ?t)\n  loose_bvar1 ?t ?lev \\<Longrightarrow> loose_bvar1 (eta_norm ?t) ?lev\n  \\<not> loose_bvar1 (eta_norm f) 0\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T body))", "by (auto simp add: is_dependent_def split: term.splits nat.splits if_splits)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (eta_norm (Abs T body))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> eta_reducible (eta_norm (Abs T body))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>eta_norm body = f $ u; u \\<noteq> Bv 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>eta_norm body = f $ u; u \\<noteq> Bv 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "case False"], ["proof (state)\nthis:\n  u \\<noteq> Bv 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>eta_norm body = f $ u; u \\<noteq> Bv 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "then"], ["proof (chain)\npicking this:\n  u \\<noteq> Bv 0", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<noteq> Bv 0\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T body))", "using 1 App"], ["proof (prove)\nusing this:\n  u \\<noteq> Bv 0\n  \\<not> eta_reducible (eta_norm body)\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0\\<rbrakk>\n  \\<Longrightarrow> \\<not> eta_reducible (eta_norm ?x51.0)\n  eta_norm body = f $ u\n\ngoal (1 subgoal):\n 1. \\<not> eta_reducible (eta_norm (Abs T body))", "by (auto simp add: is_dependent_def\n            split: term.splits nat.splits if_splits)"], ["proof (state)\nthis:\n  \\<not> eta_reducible (eta_norm (Abs T body))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> eta_reducible (eta_norm (Abs T body))\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))\n 3. \\<And>x3.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm body);\n        \\<And>x51 x52 x3.\n           \\<lbrakk>eta_norm body = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51\\<rbrakk>\n           \\<Longrightarrow> \\<not> eta_reducible (eta_norm x51);\n        eta_norm body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (Abs T body))", "qed auto"], ["proof (state)\nthis:\n  \\<not> eta_reducible (eta_norm (Abs T body))\n\ngoal (4 subgoals):\n 1. \\<And>t u.\n       \\<lbrakk>\\<not> eta_reducible (eta_norm t);\n        \\<not> eta_reducible (eta_norm u)\\<rbrakk>\n       \\<Longrightarrow> \\<not> eta_reducible (eta_norm (t $ u))\n 2. \\<And>v va. \\<not> eta_reducible (eta_norm (Ct v va))\n 3. \\<And>v va. \\<not> eta_reducible (eta_norm (Fv v va))\n 4. \\<And>v. \\<not> eta_reducible (eta_norm (Bv v))", "qed auto"], ["", "lemma not_eta_reducible_imp_eta_norm_no_change: \"\\<not> eta_reducible t \\<Longrightarrow> eta_norm t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eta_reducible t \\<Longrightarrow> eta_norm t = t", "by (induction t rule: eta_norm.induct) (auto simp add: eta_reducible_Abs is_dependent_def \n      split: term.splits nat.splits)"], ["", "lemma eta_norm_collapse: \"eta_norm (eta_norm t) = eta_norm t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eta_norm (eta_norm t) = eta_norm t", "using not_eta_reducible_imp_eta_norm_no_change not_eta_reducible_eta_norm"], ["proof (prove)\nusing this:\n  \\<not> eta_reducible ?t \\<Longrightarrow> eta_norm ?t = ?t\n  \\<not> eta_reducible (eta_norm ?t)\n\ngoal (1 subgoal):\n 1. eta_norm (eta_norm t) = eta_norm t", "by blast"], ["", "lemma typ_of1_decr: \"typ_of1 (Ts@[T]@Ts') t = Some ty \\<Longrightarrow> \\<not> loose_bvar1 t (length Ts) \n  \\<Longrightarrow> typ_of1 (Ts@Ts') (decr (length Ts) t) = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t = Some ty;\n     \\<not> loose_bvar1 t (length Ts)\\<rbrakk>\n    \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t) = Some ty", "proof (induction t arbitrary: Ts T Ts' ty)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' ty.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = Some ty;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) =\n                         Some ty\n 2. \\<And>x1 x2 Ts T Ts' ty.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = Some ty;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) =\n                         Some ty\n 3. \\<And>x Ts T Ts' ty.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Bv x) = Some ty;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) =\n                         Some ty\n 4. \\<And>x1 t Ts T Ts' ty.\n       \\<lbrakk>\\<And>Ts T Ts' ty.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t = Some ty;\n                    \\<not> loose_bvar1 t (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t) =\n                                     Some ty;\n        typ_of1 (Ts @ [T] @ Ts') (Abs x1 t) = Some ty;\n        \\<not> loose_bvar1 (Abs x1 t) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Abs x1 t)) =\n                         Some ty\n 5. \\<And>t1 t2 Ts T Ts' ty.\n       \\<lbrakk>\\<And>Ts T Ts' ty.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t1 = Some ty;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t1) =\n                                     Some ty;\n        \\<And>Ts T Ts' ty.\n           \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t2 = Some ty;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t2) =\n                             Some ty;\n        typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = Some ty;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) =\n                         Some ty", "case (Abs bT t)"], ["proof (state)\nthis:\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t = Some ?ty;\n   \\<not> loose_bvar1 t (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t) = Some ?ty\n  typ_of1 (Ts @ [T] @ Ts') (Abs bT t) = Some ty\n  \\<not> loose_bvar1 (Abs bT t) (length Ts)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' ty.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = Some ty;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) =\n                         Some ty\n 2. \\<And>x1 x2 Ts T Ts' ty.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = Some ty;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) =\n                         Some ty\n 3. \\<And>x Ts T Ts' ty.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Bv x) = Some ty;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) =\n                         Some ty\n 4. \\<And>x1 t Ts T Ts' ty.\n       \\<lbrakk>\\<And>Ts T Ts' ty.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t = Some ty;\n                    \\<not> loose_bvar1 t (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t) =\n                                     Some ty;\n        typ_of1 (Ts @ [T] @ Ts') (Abs x1 t) = Some ty;\n        \\<not> loose_bvar1 (Abs x1 t) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Abs x1 t)) =\n                         Some ty\n 5. \\<And>t1 t2 Ts T Ts' ty.\n       \\<lbrakk>\\<And>Ts T Ts' ty.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t1 = Some ty;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t1) =\n                                     Some ty;\n        \\<And>Ts T Ts' ty.\n           \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t2 = Some ty;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t2) =\n                             Some ty;\n        typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = Some ty;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) =\n                         Some ty", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t = Some ?ty;\n   \\<not> loose_bvar1 t (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t) = Some ?ty\n  typ_of1 (Ts @ [T] @ Ts') (Abs bT t) = Some ty\n  \\<not> loose_bvar1 (Abs bT t) (length Ts)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t = Some ?ty;\n   \\<not> loose_bvar1 t (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t) = Some ?ty\n  typ_of1 (Ts @ [T] @ Ts') (Abs bT t) = Some ty\n  \\<not> loose_bvar1 (Abs bT t) (length Ts)\n\ngoal (1 subgoal):\n 1. typ_of1 (Ts @ Ts') (decr (length Ts) (Abs bT t)) = Some ty", "by (simp add: bind_eq_Some_conv) (metis append_Cons length_Cons)"], ["proof (state)\nthis:\n  typ_of1 (Ts @ Ts') (decr (length Ts) (Abs bT t)) = Some ty\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' ty.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = Some ty;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) =\n                         Some ty\n 2. \\<And>x1 x2 Ts T Ts' ty.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = Some ty;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) =\n                         Some ty\n 3. \\<And>x Ts T Ts' ty.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Bv x) = Some ty;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) =\n                         Some ty\n 4. \\<And>t1 t2 Ts T Ts' ty.\n       \\<lbrakk>\\<And>Ts T Ts' ty.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t1 = Some ty;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t1) =\n                                     Some ty;\n        \\<And>Ts T Ts' ty.\n           \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t2 = Some ty;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t2) =\n                             Some ty;\n        typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = Some ty;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) =\n                         Some ty", "qed (auto split: if_splits simp add: bind_eq_Some_conv nth_append)"], ["", "lemma typ_of1_decr_gen: \"typ_of1 (Ts@[T]@Ts') t = tyo \\<Longrightarrow> \\<not> loose_bvar1 t (length Ts)\n  \\<Longrightarrow> typ_of1 (Ts@Ts') (decr (length Ts) t) = tyo\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t = tyo;\n     \\<not> loose_bvar1 t (length Ts)\\<rbrakk>\n    \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t) = tyo", "proof (induction t arbitrary: Ts T Ts' tyo)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = tyo;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) =\n                         tyo\n 2. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = tyo;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) =\n                         tyo\n 3. \\<And>x Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Bv x) = tyo;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) = tyo\n 4. \\<And>x1 t Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t = tyo;\n                    \\<not> loose_bvar1 t (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t) =\n                                     tyo;\n        typ_of1 (Ts @ [T] @ Ts') (Abs x1 t) = tyo;\n        \\<not> loose_bvar1 (Abs x1 t) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Abs x1 t)) =\n                         tyo\n 5. \\<And>t1 t2 Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t1 = tyo;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t1) =\n                                     tyo;\n        \\<And>Ts T Ts' tyo.\n           \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t2 = tyo;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t2) = tyo;\n        typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) =\n                         tyo", "case (Abs T t)"], ["proof (state)\nthis:\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t = ?tyo;\n   \\<not> loose_bvar1 t (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t) = ?tyo\n  typ_of1 (Ts @ [T] @ Ts') (Abs Ta__ t) = tyo\n  \\<not> loose_bvar1 (Abs Ta__ t) (length Ts)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = tyo;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) =\n                         tyo\n 2. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = tyo;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) =\n                         tyo\n 3. \\<And>x Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Bv x) = tyo;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) = tyo\n 4. \\<And>x1 t Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t = tyo;\n                    \\<not> loose_bvar1 t (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t) =\n                                     tyo;\n        typ_of1 (Ts @ [T] @ Ts') (Abs x1 t) = tyo;\n        \\<not> loose_bvar1 (Abs x1 t) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Abs x1 t)) =\n                         tyo\n 5. \\<And>t1 t2 Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t1 = tyo;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t1) =\n                                     tyo;\n        \\<And>Ts T Ts' tyo.\n           \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t2 = tyo;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t2) = tyo;\n        typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) =\n                         tyo", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t = ?tyo;\n   \\<not> loose_bvar1 t (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t) = ?tyo\n  typ_of1 (Ts @ [T] @ Ts') (Abs Ta__ t) = tyo\n  \\<not> loose_bvar1 (Abs Ta__ t) (length Ts)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t = ?tyo;\n   \\<not> loose_bvar1 t (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t) = ?tyo\n  typ_of1 (Ts @ [T] @ Ts') (Abs Ta__ t) = tyo\n  \\<not> loose_bvar1 (Abs Ta__ t) (length Ts)\n\ngoal (1 subgoal):\n 1. typ_of1 (Ts @ Ts') (decr (length Ts) (Abs Ta__ t)) = tyo", "by (simp add: bind_eq_Some_conv) (metis append_Cons length_Cons)"], ["proof (state)\nthis:\n  typ_of1 (Ts @ Ts') (decr (length Ts) (Abs Ta__ t)) = tyo\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = tyo;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) =\n                         tyo\n 2. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = tyo;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) =\n                         tyo\n 3. \\<And>x Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Bv x) = tyo;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) = tyo\n 4. \\<And>t1 t2 Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t1 = tyo;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t1) =\n                                     tyo;\n        \\<And>Ts T Ts' tyo.\n           \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t2 = tyo;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t2) = tyo;\n        typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) =\n                         tyo", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = tyo;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) =\n                         tyo\n 2. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = tyo;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) =\n                         tyo\n 3. \\<And>x Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Bv x) = tyo;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) = tyo\n 4. \\<And>t1 t2 Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t1 = tyo;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t1) =\n                                     tyo;\n        \\<And>Ts T Ts' tyo.\n           \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t2 = tyo;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t2) = tyo;\n        typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) =\n                         tyo", "case (App t1 t2)"], ["proof (state)\nthis:\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t1 = ?tyo;\n   \\<not> loose_bvar1 t1 (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t1) = ?tyo\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t2 = ?tyo;\n   \\<not> loose_bvar1 t2 (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t2) = ?tyo\n  typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo\n  \\<not> loose_bvar1 (t1 $ t2) (length Ts)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = tyo;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) =\n                         tyo\n 2. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = tyo;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) =\n                         tyo\n 3. \\<And>x Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Bv x) = tyo;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) = tyo\n 4. \\<And>t1 t2 Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t1 = tyo;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ Ts')\n(decr (length Ts) t1) =\n                                     tyo;\n        \\<And>Ts T Ts' tyo.\n           \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') t2 = tyo;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) t2) = tyo;\n        typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) =\n                         tyo", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t1 = ?tyo;\n   \\<not> loose_bvar1 t1 (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t1) = ?tyo\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t2 = ?tyo;\n   \\<not> loose_bvar1 t2 (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t2) = ?tyo\n  typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo\n  \\<not> loose_bvar1 (t1 $ t2) (length Ts)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t1 = ?tyo;\n   \\<not> loose_bvar1 t1 (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t1) = ?tyo\n  \\<lbrakk>typ_of1 (?Ts @ [?T] @ ?Ts') t2 = ?tyo;\n   \\<not> loose_bvar1 t2 (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t2) = ?tyo\n  typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo\n  \\<not> loose_bvar1 (t1 $ t2) (length Ts)\n\ngoal (1 subgoal):\n 1. typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) = tyo", "by simp"], ["proof (state)\nthis:\n  typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) = tyo\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = tyo;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) =\n                         tyo\n 2. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = tyo;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) =\n                         tyo\n 3. \\<And>x Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ [T] @ Ts') (Bv x) = tyo;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) = tyo", "qed (auto split: if_splits simp add: bind_eq_Some_conv nth_append\n        split: option.splits)"], ["", "lemma typ_of1_decr_gen': \"typ_of1 (Ts@Ts') (decr (length Ts) t) = tyo\\<Longrightarrow> \\<not> loose_bvar1 t (length Ts)\n  \\<Longrightarrow> typ_of1 (Ts@[T]@Ts') t = tyo\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) t) = tyo;\n     \\<not> loose_bvar1 t (length Ts)\\<rbrakk>\n    \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') t = tyo", "proof (induction t arbitrary: Ts T Ts' tyo)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) = tyo;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = tyo\n 2. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) = tyo;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = tyo\n 3. \\<And>x Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) = tyo;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Bv x) = tyo\n 4. \\<And>x1 t Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) t) = tyo;\n                    \\<not> loose_bvar1 t (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') t = tyo;\n        typ_of1 (Ts @ Ts') (decr (length Ts) (Abs x1 t)) = tyo;\n        \\<not> loose_bvar1 (Abs x1 t) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Abs x1 t) = tyo\n 5. \\<And>t1 t2 Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) t1) = tyo;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') t1 = tyo;\n        \\<And>Ts T Ts' tyo.\n           \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) t2) = tyo;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') t2 = tyo;\n        typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) = tyo;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo", "case (Abs T t)"], ["proof (state)\nthis:\n  \\<lbrakk>typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t) = ?tyo;\n   \\<not> loose_bvar1 t (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ [?T] @ ?Ts') t = ?tyo\n  typ_of1 (Ts @ Ts') (decr (length Ts) (Abs Ta__ t)) = tyo\n  \\<not> loose_bvar1 (Abs Ta__ t) (length Ts)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) = tyo;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = tyo\n 2. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) = tyo;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = tyo\n 3. \\<And>x Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) = tyo;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Bv x) = tyo\n 4. \\<And>x1 t Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) t) = tyo;\n                    \\<not> loose_bvar1 t (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') t = tyo;\n        typ_of1 (Ts @ Ts') (decr (length Ts) (Abs x1 t)) = tyo;\n        \\<not> loose_bvar1 (Abs x1 t) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Abs x1 t) = tyo\n 5. \\<And>t1 t2 Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) t1) = tyo;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') t1 = tyo;\n        \\<And>Ts T Ts' tyo.\n           \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) t2) = tyo;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') t2 = tyo;\n        typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) = tyo;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t) = ?tyo;\n   \\<not> loose_bvar1 t (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ [?T] @ ?Ts') t = ?tyo\n  typ_of1 (Ts @ Ts') (decr (length Ts) (Abs Ta__ t)) = tyo\n  \\<not> loose_bvar1 (Abs Ta__ t) (length Ts)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>typ_of1 (?Ts @ ?Ts') (decr (length ?Ts) t) = ?tyo;\n   \\<not> loose_bvar1 t (length ?Ts)\\<rbrakk>\n  \\<Longrightarrow> typ_of1 (?Ts @ [?T] @ ?Ts') t = ?tyo\n  typ_of1 (Ts @ Ts') (decr (length Ts) (Abs Ta__ t)) = tyo\n  \\<not> loose_bvar1 (Abs Ta__ t) (length Ts)\n\ngoal (1 subgoal):\n 1. typ_of1 (Ts @ [T] @ Ts') (Abs Ta__ t) = tyo", "by (simp add: bind_eq_Some_conv) (metis append_Cons length_Cons)"], ["proof (state)\nthis:\n  typ_of1 (Ts @ [T] @ Ts') (Abs Ta__ t) = tyo\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) (Ct x1 x2)) = tyo;\n        \\<not> loose_bvar1 (Ct x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Ct x1 x2) = tyo\n 2. \\<And>x1 x2 Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) (Fv x1 x2)) = tyo;\n        \\<not> loose_bvar1 (Fv x1 x2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Fv x1 x2) = tyo\n 3. \\<And>x Ts T Ts' tyo.\n       \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) (Bv x)) = tyo;\n        \\<not> loose_bvar1 (Bv x) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (Bv x) = tyo\n 4. \\<And>t1 t2 Ts T Ts' tyo.\n       \\<lbrakk>\\<And>Ts T Ts' tyo.\n                   \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) t1) = tyo;\n                    \\<not> loose_bvar1 t1 (length Ts)\\<rbrakk>\n                   \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') t1 = tyo;\n        \\<And>Ts T Ts' tyo.\n           \\<lbrakk>typ_of1 (Ts @ Ts') (decr (length Ts) t2) = tyo;\n            \\<not> loose_bvar1 t2 (length Ts)\\<rbrakk>\n           \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') t2 = tyo;\n        typ_of1 (Ts @ Ts') (decr (length Ts) (t1 $ t2)) = tyo;\n        \\<not> loose_bvar1 (t1 $ t2) (length Ts)\\<rbrakk>\n       \\<Longrightarrow> typ_of1 (Ts @ [T] @ Ts') (t1 $ t2) = tyo", "qed (auto split: if_splits simp add: bind_eq_Some_conv nth_append\n        split: option.splits)"], ["", "(* Other direction does not necessarily hold, eta_norm could remove incorrect abstractions *)"], ["", "lemma typ_of1_eta_norm: \"typ_of1 Ts t = Some ty \\<Longrightarrow> typ_of1 Ts (eta_norm t) = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts t = Some ty \\<Longrightarrow>\n    typ_of1 Ts (eta_norm t) = Some ty", "proof (induction Ts t arbitrary: ty rule: typ_of1.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       typ_of1 uu_ (Ct uv_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uu_ (eta_norm (Ct uv_ T)) = Some ty\n 2. \\<And>Ts i ty.\n       typ_of1 Ts (Bv i) = Some ty \\<Longrightarrow>\n       typ_of1 Ts (eta_norm (Bv i)) = Some ty\n 3. \\<And>uw_ ux_ T ty.\n       typ_of1 uw_ (Fv ux_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uw_ (eta_norm (Fv ux_ T)) = Some ty\n 4. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 5. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 Ts u = Some ty \\<Longrightarrow>\n                   typ_of1 Ts (eta_norm u) = Some ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Ts (eta_norm t) = Some ty;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (t $ u)) = Some ty", "case (4 Ts T body)"], ["proof (state)\nthis:\n  typ_of1 (T # Ts) body = Some ?ty \\<Longrightarrow>\n  typ_of1 (T # Ts) (eta_norm body) = Some ?ty\n  typ_of1 Ts (Abs T body) = Some ty\n\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       typ_of1 uu_ (Ct uv_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uu_ (eta_norm (Ct uv_ T)) = Some ty\n 2. \\<And>Ts i ty.\n       typ_of1 Ts (Bv i) = Some ty \\<Longrightarrow>\n       typ_of1 Ts (eta_norm (Bv i)) = Some ty\n 3. \\<And>uw_ ux_ T ty.\n       typ_of1 uw_ (Fv ux_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uw_ (eta_norm (Fv ux_ T)) = Some ty\n 4. \\<And>Ts T body ty.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 5. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 Ts u = Some ty \\<Longrightarrow>\n                   typ_of1 Ts (eta_norm u) = Some ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Ts (eta_norm t) = Some ty;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (t $ u)) = Some ty", "then"], ["proof (chain)\npicking this:\n  typ_of1 (T # Ts) body = Some ?ty \\<Longrightarrow>\n  typ_of1 (T # Ts) (eta_norm body) = Some ?ty\n  typ_of1 Ts (Abs T body) = Some ty", "show ?case"], ["proof (prove)\nusing this:\n  typ_of1 (T # Ts) body = Some ?ty \\<Longrightarrow>\n  typ_of1 (T # Ts) (eta_norm body) = Some ?ty\n  typ_of1 Ts (Abs T body) = Some ty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "proof(cases \"eta_norm body\")"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 3. \\<And>x3.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty; eta_norm body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "case (App f u)"], ["proof (state)\nthis:\n  eta_norm body = f $ u\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 3. \\<And>x3.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty; eta_norm body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "then"], ["proof (chain)\npicking this:\n  eta_norm body = f $ u", "show ?thesis"], ["proof (prove)\nusing this:\n  eta_norm body = f $ u\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "(* In dire need of cleanup *)"], ["proof (prove)\nusing this:\n  eta_norm body = f $ u\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "proof (cases u)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>eta_norm body = f $ u; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<And>x21 x22.\n       \\<lbrakk>eta_norm body = f $ u; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 3. \\<And>x3.\n       \\<lbrakk>eta_norm body = f $ u; u = Bv x3\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 4. \\<And>x41 x42.\n       \\<lbrakk>eta_norm body = f $ u; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 5. \\<And>x51 x52.\n       \\<lbrakk>eta_norm body = f $ u; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "case (Bv n)"], ["proof (state)\nthis:\n  u = Bv n\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>eta_norm body = f $ u; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<And>x21 x22.\n       \\<lbrakk>eta_norm body = f $ u; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 3. \\<And>x3.\n       \\<lbrakk>eta_norm body = f $ u; u = Bv x3\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 4. \\<And>x41 x42.\n       \\<lbrakk>eta_norm body = f $ u; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 5. \\<And>x51 x52.\n       \\<lbrakk>eta_norm body = f $ u; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "then"], ["proof (chain)\npicking this:\n  u = Bv n", "show ?thesis"], ["proof (prove)\nusing this:\n  u = Bv n\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>u = Bv n; n = 0\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u = Bv n; n = 0\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "then"], ["proof (chain)\npicking this:\n  n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "proof (cases \"is_dependent f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n = 0; is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "case True"], ["proof (state)\nthis:\n  is_dependent f\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n = 0; is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "hence \"eta_norm (Abs T body) = Abs T (f $ Bv 0)\""], ["proof (prove)\nusing this:\n  is_dependent f\n\ngoal (1 subgoal):\n 1. eta_norm (Abs T body) = Abs T (f $ Bv 0)", "by (auto simp add: App 0 \"4.IH\" Bv bind_eq_Some_conv is_dependent_def split: nat.splits)"], ["proof (state)\nthis:\n  eta_norm (Abs T body) = Abs T (f $ Bv 0)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n = 0; is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "then"], ["proof (chain)\npicking this:\n  eta_norm (Abs T body) = Abs T (f $ Bv 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  eta_norm (Abs T body) = Abs T (f $ Bv 0)\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "using 4"], ["proof (prove)\nusing this:\n  eta_norm (Abs T body) = Abs T (f $ Bv 0)\n  typ_of1 (T # Ts) body = Some ?ty \\<Longrightarrow>\n  typ_of1 (T # Ts) (eta_norm body) = Some ?ty\n  typ_of1 Ts (Abs T body) = Some ty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "by (force simp add: \"0\" Bv App is_dependent_def bind_eq_Some_conv split: if_splits)"], ["proof (state)\nthis:\n  typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "case False"], ["proof (state)\nthis:\n  \\<not> is_dependent f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "hence simp: \"eta_norm (Abs T body) = decr 0 (eta_norm f)\""], ["proof (prove)\nusing this:\n  \\<not> is_dependent f\n\ngoal (1 subgoal):\n 1. eta_norm (Abs T body) = decr 0 (eta_norm f)", "by (auto simp add: App 0 \"4.IH\" Bv bind_eq_Some_conv bind_eq_None_conv\n                is_dependent_def split: nat.splits)"], ["proof (state)\nthis:\n  eta_norm (Abs T body) = decr 0 (eta_norm f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "obtain bT where bT: \"typ_of1 (T # Ts) body = Some bT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bT.\n        typ_of1 (T # Ts) body = Some bT \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \"4.prems\""], ["proof (prove)\nusing this:\n  typ_of1 Ts (Abs T body) = Some ty\n\ngoal (1 subgoal):\n 1. (\\<And>bT.\n        typ_of1 (T # Ts) body = Some bT \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  typ_of1 (T # Ts) body = Some bT\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "hence \"typ_of1 (T # Ts) (eta_norm body) = Some bT\""], ["proof (prove)\nusing this:\n  typ_of1 (T # Ts) body = Some bT\n\ngoal (1 subgoal):\n 1. typ_of1 (T # Ts) (eta_norm body) = Some bT", "using \"4.IH\""], ["proof (prove)\nusing this:\n  typ_of1 (T # Ts) body = Some bT\n  typ_of1 (T # Ts) body = Some ?ty \\<Longrightarrow>\n  typ_of1 (T # Ts) (eta_norm body) = Some ?ty\n\ngoal (1 subgoal):\n 1. typ_of1 (T # Ts) (eta_norm body) = Some bT", "by blast"], ["proof (state)\nthis:\n  typ_of1 (T # Ts) (eta_norm body) = Some bT\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "moreover"], ["proof (state)\nthis:\n  typ_of1 (T # Ts) (eta_norm body) = Some bT\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "have \"T \\<rightarrow> bT = ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<rightarrow> bT = ty", "using \"4.prems\" bT"], ["proof (prove)\nusing this:\n  typ_of1 Ts (Abs T body) = Some ty\n  typ_of1 (T # Ts) body = Some bT\n\ngoal (1 subgoal):\n 1. T \\<rightarrow> bT = ty", "by auto"], ["proof (state)\nthis:\n  T \\<rightarrow> bT = ty\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "ultimately"], ["proof (chain)\npicking this:\n  typ_of1 (T # Ts) (eta_norm body) = Some bT\n  T \\<rightarrow> bT = ty", "have \"typ_of1 (T#Ts) f = Some ty\""], ["proof (prove)\nusing this:\n  typ_of1 (T # Ts) (eta_norm body) = Some bT\n  T \\<rightarrow> bT = ty\n\ngoal (1 subgoal):\n 1. typ_of1 (T # Ts) f = Some ty", "by (metis \"0\" App Bv length_Cons nth_Cons_0 typ_of1.simps(2) typ_of1_arg_typ zero_less_Suc)"], ["proof (state)\nthis:\n  typ_of1 (T # Ts) f = Some ty\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "hence \"typ_of1 Ts (decr 0 f) = Some ty\""], ["proof (prove)\nusing this:\n  typ_of1 (T # Ts) f = Some ty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (decr 0 f) = Some ty", "by (metis False append_Cons append_Nil is_dependent_def list.size(3) typ_of1_decr)"], ["proof (state)\nthis:\n  typ_of1 Ts (decr 0 f) = Some ty\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "hence \"typ_of1 Ts (decr 0 (eta_norm f)) = Some ty\""], ["proof (prove)\nusing this:\n  typ_of1 Ts (decr 0 f) = Some ty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (decr 0 (eta_norm f)) = Some ty", "by (metis App eta_reducible.simps(11) not_eta_reducible_eta_norm not_eta_reducible_imp_eta_norm_no_change)"], ["proof (state)\nthis:\n  typ_of1 Ts (decr 0 (eta_norm f)) = Some ty\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "then"], ["proof (chain)\npicking this:\n  typ_of1 Ts (decr 0 (eta_norm f)) = Some ty", "show ?thesis"], ["proof (prove)\nusing this:\n  typ_of1 Ts (decr 0 (eta_norm f)) = Some ty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "by(auto simp add: App 0 Bv False)"], ["proof (state)\nthis:\n  typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "case (Suc nat)"], ["proof (state)\nthis:\n  n = Suc nat\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>u = Bv n; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "then"], ["proof (chain)\npicking this:\n  n = Suc nat", "show ?thesis"], ["proof (prove)\nusing this:\n  n = Suc nat\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "using 4"], ["proof (prove)\nusing this:\n  n = Suc nat\n  typ_of1 (T # Ts) body = Some ?ty \\<Longrightarrow>\n  typ_of1 (T # Ts) (eta_norm body) = Some ?ty\n  typ_of1 Ts (Abs T body) = Some ty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "apply (simp add: App \"4.IH\" Bv bind_eq_Some_conv split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = Suc nat;\n     \\<And>ty.\n        typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n        \\<exists>y.\n           (if nat < length Ts then Some ((T # Ts) ! Suc nat) else None) =\n           Some y \\<and>\n           (\\<exists>ya.\n               typ_of1 (T # Ts) f = Some ya \\<and>\n               (case ya of Ty fun [] \\<Rightarrow> None\n                | Ty fun [T1] \\<Rightarrow> None\n                | Ty fun [T1, T2] \\<Rightarrow>\n                    if fun = STR ''fun''\n                    then if T1 = y then Some T2 else None else None\n                | Ty fun (T1 # T2 # ab # xa) \\<Rightarrow> Map.empty xa\n                | Tv variable x \\<Rightarrow> Map.empty x) =\n               Some ty);\n     \\<exists>y.\n        typ_of1 (T # Ts) body = Some y \\<and>\n        T \\<rightarrow> y = ty\\<rbrakk>\n    \\<Longrightarrow> (nat < length Ts \\<longrightarrow>\n                       (\\<exists>y.\n                           typ_of1 (T # Ts) f = Some y \\<and>\n                           (\\<exists>ya.\n                               (case y of Ty fun [] \\<Rightarrow> None\n                                | Ty fun [T1] \\<Rightarrow> None\n                                | Ty fun [T1, T2] \\<Rightarrow>\n                                    if fun = STR ''fun''\n                                    then if T1 = Ts ! nat then Some T2\n   else None\n                                    else None\n                                | Ty fun (T1 # T2 # ab # xa) \\<Rightarrow>\n                                    Map.empty xa\n                                | Tv variable x \\<Rightarrow> Map.empty x) =\n                               Some ya \\<and>\n                               T \\<rightarrow> ya = ty))) \\<and>\n                      nat < length Ts", "using option.sel"], ["proof (prove)\nusing this:\n  the (Some ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = Suc nat;\n     \\<And>ty.\n        typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n        \\<exists>y.\n           (if nat < length Ts then Some ((T # Ts) ! Suc nat) else None) =\n           Some y \\<and>\n           (\\<exists>ya.\n               typ_of1 (T # Ts) f = Some ya \\<and>\n               (case ya of Ty fun [] \\<Rightarrow> None\n                | Ty fun [T1] \\<Rightarrow> None\n                | Ty fun [T1, T2] \\<Rightarrow>\n                    if fun = STR ''fun''\n                    then if T1 = y then Some T2 else None else None\n                | Ty fun (T1 # T2 # ab # xa) \\<Rightarrow> Map.empty xa\n                | Tv variable x \\<Rightarrow> Map.empty x) =\n               Some ty);\n     \\<exists>y.\n        typ_of1 (T # Ts) body = Some y \\<and>\n        T \\<rightarrow> y = ty\\<rbrakk>\n    \\<Longrightarrow> (nat < length Ts \\<longrightarrow>\n                       (\\<exists>y.\n                           typ_of1 (T # Ts) f = Some y \\<and>\n                           (\\<exists>ya.\n                               (case y of Ty fun [] \\<Rightarrow> None\n                                | Ty fun [T1] \\<Rightarrow> None\n                                | Ty fun [T1, T2] \\<Rightarrow>\n                                    if fun = STR ''fun''\n                                    then if T1 = Ts ! nat then Some T2\n   else None\n                                    else None\n                                | Ty fun (T1 # T2 # ab # xa) \\<Rightarrow>\n                                    Map.empty xa\n                                | Tv variable x \\<Rightarrow> Map.empty x) =\n                               Some ya \\<and>\n                               T \\<rightarrow> ya = ty))) \\<and>\n                      nat < length Ts", "by fastforce"], ["proof (state)\nthis:\n  typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>eta_norm body = f $ u; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<And>x21 x22.\n       \\<lbrakk>eta_norm body = f $ u; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 3. \\<And>x41 x42.\n       \\<lbrakk>eta_norm body = f $ u; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 4. \\<And>x51 x52.\n       \\<lbrakk>eta_norm body = f $ u; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "qed (use 4 in \\<open>fastforce simp add: bind_eq_Some_conv nth_append split: if_splits\\<close>)+"], ["proof (state)\nthis:\n  typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 2. \\<And>x21 x22.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 3. \\<And>x3.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty; eta_norm body = Bv x3\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 (T # Ts) body = Some ty \\<Longrightarrow>\n                   typ_of1 (T # Ts) (eta_norm body) = Some ty;\n        typ_of1 Ts (Abs T body) = Some ty;\n        eta_norm body = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (Abs T body)) = Some ty", "qed (use 4 in \\<open>fastforce simp add: bind_eq_Some_conv nth_append split: if_splits\\<close>)+"], ["proof (state)\nthis:\n  typ_of1 Ts (eta_norm (Abs T body)) = Some ty\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       typ_of1 uu_ (Ct uv_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uu_ (eta_norm (Ct uv_ T)) = Some ty\n 2. \\<And>Ts i ty.\n       typ_of1 Ts (Bv i) = Some ty \\<Longrightarrow>\n       typ_of1 Ts (eta_norm (Bv i)) = Some ty\n 3. \\<And>uw_ ux_ T ty.\n       typ_of1 uw_ (Fv ux_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uw_ (eta_norm (Fv ux_ T)) = Some ty\n 4. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 Ts u = Some ty \\<Longrightarrow>\n                   typ_of1 Ts (eta_norm u) = Some ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Ts (eta_norm t) = Some ty;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (t $ u)) = Some ty", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       typ_of1 uu_ (Ct uv_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uu_ (eta_norm (Ct uv_ T)) = Some ty\n 2. \\<And>Ts i ty.\n       typ_of1 Ts (Bv i) = Some ty \\<Longrightarrow>\n       typ_of1 Ts (eta_norm (Bv i)) = Some ty\n 3. \\<And>uw_ ux_ T ty.\n       typ_of1 uw_ (Fv ux_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uw_ (eta_norm (Fv ux_ T)) = Some ty\n 4. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 Ts u = Some ty \\<Longrightarrow>\n                   typ_of1 Ts (eta_norm u) = Some ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Ts (eta_norm t) = Some ty;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (t $ u)) = Some ty", "case (5 Ts f u)"], ["proof (state)\nthis:\n  typ_of1 Ts u = Some ?ty \\<Longrightarrow>\n  typ_of1 Ts (eta_norm u) = Some ?ty\n  \\<lbrakk>typ_of1 Ts u = Some ?a; typ_of1 Ts f = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 Ts (eta_norm f) = Some ?ty\n  typ_of1 Ts (f $ u) = Some ty\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       typ_of1 uu_ (Ct uv_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uu_ (eta_norm (Ct uv_ T)) = Some ty\n 2. \\<And>Ts i ty.\n       typ_of1 Ts (Bv i) = Some ty \\<Longrightarrow>\n       typ_of1 Ts (eta_norm (Bv i)) = Some ty\n 3. \\<And>uw_ ux_ T ty.\n       typ_of1 uw_ (Fv ux_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uw_ (eta_norm (Fv ux_ T)) = Some ty\n 4. \\<And>Ts t u ty.\n       \\<lbrakk>\\<And>ty.\n                   typ_of1 Ts u = Some ty \\<Longrightarrow>\n                   typ_of1 Ts (eta_norm u) = Some ty;\n        \\<And>a ty.\n           \\<lbrakk>typ_of1 Ts u = Some a; typ_of1 Ts t = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Ts (eta_norm t) = Some ty;\n        typ_of1 Ts (t $ u) = Some ty\\<rbrakk>\n       \\<Longrightarrow> typ_of1 Ts (eta_norm (t $ u)) = Some ty", "then"], ["proof (chain)\npicking this:\n  typ_of1 Ts u = Some ?ty \\<Longrightarrow>\n  typ_of1 Ts (eta_norm u) = Some ?ty\n  \\<lbrakk>typ_of1 Ts u = Some ?a; typ_of1 Ts f = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 Ts (eta_norm f) = Some ?ty\n  typ_of1 Ts (f $ u) = Some ty", "show ?case"], ["proof (prove)\nusing this:\n  typ_of1 Ts u = Some ?ty \\<Longrightarrow>\n  typ_of1 Ts (eta_norm u) = Some ?ty\n  \\<lbrakk>typ_of1 Ts u = Some ?a; typ_of1 Ts f = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 Ts (eta_norm f) = Some ?ty\n  typ_of1 Ts (f $ u) = Some ty\n\ngoal (1 subgoal):\n 1. typ_of1 Ts (eta_norm (f $ u)) = Some ty", "apply (clarsimp split: term.splits typ.splits if_splits nat.splits option.splits\n        simp add: bind_eq_Some_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y ya.\n       \\<lbrakk>typ_of1 Ts (eta_norm u) = Some y;\n        \\<And>a ty.\n           \\<lbrakk>y = a; typ_of1 Ts f = Some ty\\<rbrakk>\n           \\<Longrightarrow> typ_of1 Ts (eta_norm f) = Some ty;\n        typ_of1 Ts u = Some y;\n        \\<forall>x11 x12.\n           ya = Ty x11 x12 \\<longrightarrow>\n           typ_of1 Ts f = Some (Ty x11 x12) \\<and>\n           (case x12 of [] \\<Rightarrow> None | [T1] \\<Rightarrow> None\n            | [T1, T2] \\<Rightarrow>\n                if x11 = STR ''fun'' then if T1 = y then Some T2 else None\n                else None\n            | T1 # T2 # ab # x \\<Rightarrow> Map.empty x) =\n           Some ty;\n        \\<forall>x21 x22. ya \\<noteq> Tv x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya.\n                            (\\<forall>x11 x12.\n                                ya = Ty x11 x12 \\<longrightarrow>\n                                typ_of1 Ts (eta_norm f) =\n                                Some (Ty x11 x12) \\<and>\n                                (case x12 of [] \\<Rightarrow> None\n                                 | [T1] \\<Rightarrow> None\n                                 | [T1, T2] \\<Rightarrow>\n                                     if x11 = STR ''fun''\n                                     then if T1 = y then Some T2 else None\n                                     else None\n                                 | T1 # T2 # ab # x \\<Rightarrow>\n                                     Map.empty x) =\n                                Some ty) \\<and>\n                            (\\<forall>x21 x22. ya \\<noteq> Tv x21 x22)", "by blast"], ["proof (state)\nthis:\n  typ_of1 Ts (eta_norm (f $ u)) = Some ty\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ T ty.\n       typ_of1 uu_ (Ct uv_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uu_ (eta_norm (Ct uv_ T)) = Some ty\n 2. \\<And>Ts i ty.\n       typ_of1 Ts (Bv i) = Some ty \\<Longrightarrow>\n       typ_of1 Ts (eta_norm (Bv i)) = Some ty\n 3. \\<And>uw_ ux_ T ty.\n       typ_of1 uw_ (Fv ux_ T) = Some ty \\<Longrightarrow>\n       typ_of1 uw_ (eta_norm (Fv ux_ T)) = Some ty", "qed (auto split: term.splits typ.splits if_splits nat.splits option.splits \n    simp add: bind_eq_Some_conv)"], ["", "corollary typ_of_eta_norm: \"typ_of t = Some ty \\<Longrightarrow> typ_of (eta_norm t) = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of t = Some ty \\<Longrightarrow> typ_of (eta_norm t) = Some ty", "using typ_of1_eta_norm typ_of_def"], ["proof (prove)\nusing this:\n  typ_of1 ?Ts ?t = Some ?ty \\<Longrightarrow>\n  typ_of1 ?Ts (eta_norm ?t) = Some ?ty\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. typ_of t = Some ty \\<Longrightarrow> typ_of (eta_norm t) = Some ty", "by simp"], ["", "lemma typ_of_Abs_body_typ: \"typ_of1 Ts (Abs T t) = Some ty \\<Longrightarrow> \\<exists>rty. ty = (T \\<rightarrow> rty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts (Abs T t) = Some ty \\<Longrightarrow>\n    \\<exists>rty. ty = T \\<rightarrow> rty", "by (metis (no_types, lifting) bind_eq_Some_conv option.sel typ_of1.simps(4))"], ["", "lemma typ_of_Abs_body_typ': \"typ_of1 Ts (Abs T t) = Some ty \n  \\<Longrightarrow> \\<exists>rty. ty = (T \\<rightarrow> rty) \\<and> typ_of1 (T#Ts) t = Some rty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of1 Ts (Abs T t) = Some ty \\<Longrightarrow>\n    \\<exists>rty.\n       ty = T \\<rightarrow> rty \\<and> typ_of1 (T # Ts) t = Some rty", "by (metis (no_types, lifting) bind_eq_Some_conv option.sel typ_of1.simps(4))"], ["", "lemma typ_of_beta_redex_arg: \"typ_of (Abs T s $ t) \\<noteq> None \\<Longrightarrow> typ_of t = Some T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs T s $ t) \\<noteq> None \\<Longrightarrow> typ_of t = Some T", "by (metis list.inject not_Some_eq typ.inject(1) typ_of1_split_App typ_of_Abs_body_typ' typ_of_def)"], ["", "lemma [partial_function_mono]: \"option.mono_body\n          (\\<lambda>beta_norm. map_option (Abs T) (beta_norm t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. option.mono_body (\\<lambda>beta_norm. map_option (Abs T) (beta_norm t))", "by (smt flat_ord_def fun_ord_def map_option_is_None monotone_def)"], ["", "lemma [partial_function_mono]: \"option.mono_body\n          (\\<lambda>beta_norm.\n              case beta_norm x of None \\<Rightarrow> None\n              | Some (Ct list typ) \\<Rightarrow>\n                  map_option (($) (Ct list typ)) (beta_norm u)\n              | Some (Fv p typ) \\<Rightarrow>\n                  map_option (($) (Fv p typ)) (beta_norm u)\n              | Some (Bv n) \\<Rightarrow>\n                  map_option (($) (Bv n)) (beta_norm u)\n              | Some (Abs T body) \\<Rightarrow>\n                  beta_norm (subst_bv u body)\n              | Some (term1 $ term2) \\<Rightarrow>\n                  map_option (($) (term1 $ term2)) (beta_norm u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. option.mono_body\n     (\\<lambda>beta_norm.\n         case beta_norm x of None \\<Rightarrow> None\n         | Some (Ct list typ) \\<Rightarrow>\n             map_option (($) (Ct list typ)) (beta_norm u)\n         | Some (Fv p typ) \\<Rightarrow>\n             map_option (($) (Fv p typ)) (beta_norm u)\n         | Some (Bv n) \\<Rightarrow> map_option (($) (Bv n)) (beta_norm u)\n         | Some (Abs T body) \\<Rightarrow> beta_norm (subst_bv u body)\n         | Some (term1 $ term2) \\<Rightarrow>\n             map_option (($) (term1 $ term2)) (beta_norm u))", "proof(standard, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa y.\n       option.le_fun xa y \\<Longrightarrow>\n       option_ord\n        (case xa x of None \\<Rightarrow> None\n         | Some (Ct list typ) \\<Rightarrow>\n             map_option (($) (Ct list typ)) (xa u)\n         | Some (Fv p typ) \\<Rightarrow> map_option (($) (Fv p typ)) (xa u)\n         | Some (Bv n) \\<Rightarrow> map_option (($) (Bv n)) (xa u)\n         | Some (Abs T body) \\<Rightarrow> xa (subst_bv u body)\n         | Some (term1 $ term2) \\<Rightarrow>\n             map_option (($) (term1 $ term2)) (xa u))\n        (case y x of None \\<Rightarrow> None\n         | Some (Ct list typ) \\<Rightarrow>\n             map_option (($) (Ct list typ)) (y u)\n         | Some (Fv p typ) \\<Rightarrow> map_option (($) (Fv p typ)) (y u)\n         | Some (Bv n) \\<Rightarrow> map_option (($) (Bv n)) (y u)\n         | Some (Abs T body) \\<Rightarrow> y (subst_bv u body)\n         | Some (term1 $ term2) \\<Rightarrow>\n             map_option (($) (term1 $ term2)) (y u))", "case (1 a b)"], ["proof (state)\nthis:\n  option.le_fun a b\n\ngoal (1 subgoal):\n 1. \\<And>xa y.\n       option.le_fun xa y \\<Longrightarrow>\n       option_ord\n        (case xa x of None \\<Rightarrow> None\n         | Some (Ct list typ) \\<Rightarrow>\n             map_option (($) (Ct list typ)) (xa u)\n         | Some (Fv p typ) \\<Rightarrow> map_option (($) (Fv p typ)) (xa u)\n         | Some (Bv n) \\<Rightarrow> map_option (($) (Bv n)) (xa u)\n         | Some (Abs T body) \\<Rightarrow> xa (subst_bv u body)\n         | Some (term1 $ term2) \\<Rightarrow>\n             map_option (($) (term1 $ term2)) (xa u))\n        (case y x of None \\<Rightarrow> None\n         | Some (Ct list typ) \\<Rightarrow>\n             map_option (($) (Ct list typ)) (y u)\n         | Some (Fv p typ) \\<Rightarrow> map_option (($) (Fv p typ)) (y u)\n         | Some (Bv n) \\<Rightarrow> map_option (($) (Bv n)) (y u)\n         | Some (Abs T body) \\<Rightarrow> y (subst_bv u body)\n         | Some (term1 $ term2) \\<Rightarrow>\n             map_option (($) (term1 $ term2)) (y u))", "then"], ["proof (chain)\npicking this:\n  option.le_fun a b", "show ?case"], ["proof (prove)\nusing this:\n  option.le_fun a b\n\ngoal (1 subgoal):\n 1. option_ord\n     (case a x of None \\<Rightarrow> None\n      | Some (Ct list typ) \\<Rightarrow>\n          map_option (($) (Ct list typ)) (a u)\n      | Some (Fv p typ) \\<Rightarrow> map_option (($) (Fv p typ)) (a u)\n      | Some (Bv n) \\<Rightarrow> map_option (($) (Bv n)) (a u)\n      | Some (Abs T body) \\<Rightarrow> a (subst_bv u body)\n      | Some (term1 $ term2) \\<Rightarrow>\n          map_option (($) (term1 $ term2)) (a u))\n     (case b x of None \\<Rightarrow> None\n      | Some (Ct list typ) \\<Rightarrow>\n          map_option (($) (Ct list typ)) (b u)\n      | Some (Fv p typ) \\<Rightarrow> map_option (($) (Fv p typ)) (b u)\n      | Some (Bv n) \\<Rightarrow> map_option (($) (Bv n)) (b u)\n      | Some (Abs T body) \\<Rightarrow> b (subst_bv u body)\n      | Some (term1 $ term2) \\<Rightarrow>\n          map_option (($) (term1 $ term2)) (b u))", "proof(cases \"a x\"; cases \"b x\", simp_all add: flat_ord_def fun_ord_def, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some aa;\n        b x = None\\<rbrakk>\n       \\<Longrightarrow> (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None\n 2. \\<And>aa aaa.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some aa;\n        b x = Some aaa\\<rbrakk>\n       \\<Longrightarrow> (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case aaa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))", "case (1 a)"], ["proof (state)\nthis:\n  \\<forall>x. a__ x = None \\<or> a__ x = b x\n  a__ x = Some a\n  b x = None\n\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<forall>x. a__ x = None \\<or> a__ x = b x; a__ x = Some aa;\n        b x = None\\<rbrakk>\n       \\<Longrightarrow> (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a__ u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a__ u)\n                          | Bv n \\<Rightarrow>\n                              map_option (($) (Bv n)) (a__ u)\n                          | Abs T body \\<Rightarrow> a__ (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a__ u)) =\n                         None\n 2. \\<And>aa aaa.\n       \\<lbrakk>\\<forall>x. a__ x = None \\<or> a__ x = b x; a__ x = Some aa;\n        b x = Some aaa\\<rbrakk>\n       \\<Longrightarrow> (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a__ u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a__ u)\n                          | Bv n \\<Rightarrow>\n                              map_option (($) (Bv n)) (a__ u)\n                          | Abs T body \\<Rightarrow> a__ (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a__ u)) =\n                         None \\<or>\n                         (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a__ u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a__ u)\n                          | Bv n \\<Rightarrow>\n                              map_option (($) (Bv n)) (a__ u)\n                          | Abs T body \\<Rightarrow> a__ (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a__ u)) =\n                         (case aaa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. a__ x = None \\<or> a__ x = b x\n  a__ x = Some a\n  b x = None", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x. a__ x = None \\<or> a__ x = b x\n  a__ x = Some a\n  b x = None\n\ngoal (1 subgoal):\n 1. (case a of\n     Ct list typ \\<Rightarrow> map_option (($) (Ct list typ)) (a__ u)\n     | Fv p typ \\<Rightarrow> map_option (($) (Fv p typ)) (a__ u)\n     | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a__ u)\n     | Abs T body \\<Rightarrow> a__ (subst_bv u body)\n     | term1 $ term2 \\<Rightarrow>\n         map_option (($) (term1 $ term2)) (a__ u)) =\n    None", "by (metis option.discI)"], ["proof (state)\nthis:\n  (case a of\n   Ct list typ \\<Rightarrow> map_option (($) (Ct list typ)) (a__ u)\n   | Fv p typ \\<Rightarrow> map_option (($) (Fv p typ)) (a__ u)\n   | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a__ u)\n   | Abs T body \\<Rightarrow> a__ (subst_bv u body)\n   | term1 $ term2 \\<Rightarrow> map_option (($) (term1 $ term2)) (a__ u)) =\n  None\n\ngoal (1 subgoal):\n 1. \\<And>aa aaa.\n       \\<lbrakk>\\<forall>x. a__ x = None \\<or> a__ x = b x; a__ x = Some aa;\n        b x = Some aaa\\<rbrakk>\n       \\<Longrightarrow> (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a__ u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a__ u)\n                          | Bv n \\<Rightarrow>\n                              map_option (($) (Bv n)) (a__ u)\n                          | Abs T body \\<Rightarrow> a__ (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a__ u)) =\n                         None \\<or>\n                         (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a__ u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a__ u)\n                          | Bv n \\<Rightarrow>\n                              map_option (($) (Bv n)) (a__ u)\n                          | Abs T body \\<Rightarrow> a__ (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a__ u)) =\n                         (case aaa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa aaa.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some aa;\n        b x = Some aaa\\<rbrakk>\n       \\<Longrightarrow> (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case aaa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))", "case (2 r s)"], ["proof (state)\nthis:\n  \\<forall>x. a x = None \\<or> a x = b x\n  a x = Some r\n  b x = Some s\n\ngoal (1 subgoal):\n 1. \\<And>aa aaa.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some aa;\n        b x = Some aaa\\<rbrakk>\n       \\<Longrightarrow> (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case aa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case aaa of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. a x = None \\<or> a x = b x\n  a x = Some r\n  b x = Some s", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x. a x = None \\<or> a x = b x\n  a x = Some r\n  b x = Some s\n\ngoal (1 subgoal):\n 1. (case r of\n     Ct list typ \\<Rightarrow> map_option (($) (Ct list typ)) (a u)\n     | Fv p typ \\<Rightarrow> map_option (($) (Fv p typ)) (a u)\n     | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n     | Abs T body \\<Rightarrow> a (subst_bv u body)\n     | term1 $ term2 \\<Rightarrow> map_option (($) (term1 $ term2)) (a u)) =\n    None \\<or>\n    (case r of\n     Ct list typ \\<Rightarrow> map_option (($) (Ct list typ)) (a u)\n     | Fv p typ \\<Rightarrow> map_option (($) (Fv p typ)) (a u)\n     | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n     | Abs T body \\<Rightarrow> a (subst_bv u body)\n     | term1 $ term2 \\<Rightarrow> map_option (($) (term1 $ term2)) (a u)) =\n    (case s of\n     Ct list typ \\<Rightarrow> map_option (($) (Ct list typ)) (b u)\n     | Fv p typ \\<Rightarrow> map_option (($) (Fv p typ)) (b u)\n     | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n     | Abs T body \\<Rightarrow> b (subst_bv u body)\n     | term1 $ term2 \\<Rightarrow> map_option (($) (term1 $ term2)) (b u))", "apply (cases r; cases s)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>x11 x12 x11a x12a.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n        b x = Some s; r = Ct x11 x12;\n        \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n        s = Ct x11a x12a\\<rbrakk>\n       \\<Longrightarrow> (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case s of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))\n 2. \\<And>x11 x12 x21 x22.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n        b x = Some s; r = Ct x11 x12;\n        \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n        s = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case s of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))\n 3. \\<And>x11 x12 x3.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n        b x = Some s; r = Ct x11 x12;\n        \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n        s = Bv x3\\<rbrakk>\n       \\<Longrightarrow> (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case s of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))\n 4. \\<And>x11 x12 x41 x42.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n        b x = Some s; r = Ct x11 x12;\n        \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n        s = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case s of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))\n 5. \\<And>x11 x12 x51 x52.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n        b x = Some s; r = Ct x11 x12;\n        \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n        s = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case s of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))\n 6. \\<And>x21 x22 x11 x12.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n        b x = Some s; r = Fv x21 x22;\n        \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n        s = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case s of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))\n 7. \\<And>x21 x22 x21a x22a.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n        b x = Some s; r = Fv x21 x22;\n        \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n        s = Fv x21a x22a\\<rbrakk>\n       \\<Longrightarrow> (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case s of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))\n 8. \\<And>x21 x22 x3.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n        b x = Some s; r = Fv x21 x22;\n        \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n        s = Bv x3\\<rbrakk>\n       \\<Longrightarrow> (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case s of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))\n 9. \\<And>x21 x22 x41 x42.\n       \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n        b x = Some s; r = Fv x21 x22;\n        \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n        s = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         None \\<or>\n                         (case r of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (a u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (a u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n                          | Abs T body \\<Rightarrow> a (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (a u)) =\n                         (case s of\n                          Ct list typ \\<Rightarrow>\n                            map_option (($) (Ct list typ)) (b u)\n                          | Fv p typ \\<Rightarrow>\n                              map_option (($) (Fv p typ)) (b u)\n                          | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n                          | Abs T body \\<Rightarrow> b (subst_bv u body)\n                          | term1 $ term2 \\<Rightarrow>\n                              map_option (($) (term1 $ term2)) (b u))\n 10. \\<And>x21 x22 x51 x52.\n        \\<lbrakk>\\<forall>x. a x = None \\<or> a x = b x; a x = Some r;\n         b x = Some s; r = Fv x21 x22;\n         \\<forall>x. a x = None \\<or> a x = b x; a x = Some r; b x = Some s;\n         s = x51 $ x52\\<rbrakk>\n        \\<Longrightarrow> (case r of\n                           Ct list typ \\<Rightarrow>\n                             map_option (($) (Ct list typ)) (a u)\n                           | Fv p typ \\<Rightarrow>\n                               map_option (($) (Fv p typ)) (a u)\n                           | Bv n \\<Rightarrow>\n                               map_option (($) (Bv n)) (a u)\n                           | Abs T body \\<Rightarrow> a (subst_bv u body)\n                           | term1 $ term2 \\<Rightarrow>\n                               map_option (($) (term1 $ term2)) (a u)) =\n                          None \\<or>\n                          (case r of\n                           Ct list typ \\<Rightarrow>\n                             map_option (($) (Ct list typ)) (a u)\n                           | Fv p typ \\<Rightarrow>\n                               map_option (($) (Fv p typ)) (a u)\n                           | Bv n \\<Rightarrow>\n                               map_option (($) (Bv n)) (a u)\n                           | Abs T body \\<Rightarrow> a (subst_bv u body)\n                           | term1 $ term2 \\<Rightarrow>\n                               map_option (($) (term1 $ term2)) (a u)) =\n                          (case s of\n                           Ct list typ \\<Rightarrow>\n                             map_option (($) (Ct list typ)) (b u)\n                           | Fv p typ \\<Rightarrow>\n                               map_option (($) (Fv p typ)) (b u)\n                           | Bv n \\<Rightarrow>\n                               map_option (($) (Bv n)) (b u)\n                           | Abs T body \\<Rightarrow> b (subst_bv u body)\n                           | term1 $ term2 \\<Rightarrow>\n                               map_option (($) (term1 $ term2)) (b u))\nA total of 25 subgoals...", "apply (simp_all add: flat_ord_def fun_ord_def)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>x11 x12 x11a x12a.\n       \\<lbrakk>r = Ct x11 x12; \\<forall>x. a x = None \\<or> a x = b x;\n        a x = Some (Ct x11 x12); b x = Some (Ct x11a x12a);\n        s = Ct x11a x12a\\<rbrakk>\n       \\<Longrightarrow> a u = None \\<or>\n                         map_option (($) (Ct x11 x12)) (a u) =\n                         map_option (($) (Ct x11a x12a)) (b u)\n 2. \\<And>x11 x12 x21 x22.\n       \\<lbrakk>r = Ct x11 x12; \\<forall>x. a x = None \\<or> a x = b x;\n        a x = Some (Ct x11 x12); b x = Some (Fv x21 x22);\n        s = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> a u = None \\<or>\n                         map_option (($) (Ct x11 x12)) (a u) =\n                         map_option (($) (Fv x21 x22)) (b u)\n 3. \\<And>x11 x12 x3.\n       \\<lbrakk>r = Ct x11 x12; \\<forall>x. a x = None \\<or> a x = b x;\n        a x = Some (Ct x11 x12); b x = Some (Bv x3); s = Bv x3\\<rbrakk>\n       \\<Longrightarrow> a u = None \\<or>\n                         map_option (($) (Ct x11 x12)) (a u) =\n                         map_option (($) (Bv x3)) (b u)\n 4. \\<And>x11 x12 x41 x42.\n       \\<lbrakk>r = Ct x11 x12; \\<forall>x. a x = None \\<or> a x = b x;\n        a x = Some (Ct x11 x12); b x = Some (Abs x41 x42);\n        s = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> a u = None \\<or>\n                         map_option (($) (Ct x11 x12)) (a u) =\n                         b (subst_bv u x42)\n 5. \\<And>x11 x12 x51 x52.\n       \\<lbrakk>r = Ct x11 x12; \\<forall>x. a x = None \\<or> a x = b x;\n        a x = Some (Ct x11 x12); b x = Some (x51 $ x52);\n        s = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> a u = None \\<or>\n                         map_option (($) (Ct x11 x12)) (a u) =\n                         map_option (($) (x51 $ x52)) (b u)\n 6. \\<And>x21 x22 x11 x12.\n       \\<lbrakk>r = Fv x21 x22; \\<forall>x. a x = None \\<or> a x = b x;\n        a x = Some (Fv x21 x22); b x = Some (Ct x11 x12);\n        s = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> a u = None \\<or>\n                         map_option (($) (Fv x21 x22)) (a u) =\n                         map_option (($) (Ct x11 x12)) (b u)\n 7. \\<And>x21 x22 x21a x22a.\n       \\<lbrakk>r = Fv x21 x22; \\<forall>x. a x = None \\<or> a x = b x;\n        a x = Some (Fv x21 x22); b x = Some (Fv x21a x22a);\n        s = Fv x21a x22a\\<rbrakk>\n       \\<Longrightarrow> a u = None \\<or>\n                         map_option (($) (Fv x21 x22)) (a u) =\n                         map_option (($) (Fv x21a x22a)) (b u)\n 8. \\<And>x21 x22 x3.\n       \\<lbrakk>r = Fv x21 x22; \\<forall>x. a x = None \\<or> a x = b x;\n        a x = Some (Fv x21 x22); b x = Some (Bv x3); s = Bv x3\\<rbrakk>\n       \\<Longrightarrow> a u = None \\<or>\n                         map_option (($) (Fv x21 x22)) (a u) =\n                         map_option (($) (Bv x3)) (b u)\n 9. \\<And>x21 x22 x41 x42.\n       \\<lbrakk>r = Fv x21 x22; \\<forall>x. a x = None \\<or> a x = b x;\n        a x = Some (Fv x21 x22); b x = Some (Abs x41 x42);\n        s = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> a u = None \\<or>\n                         map_option (($) (Fv x21 x22)) (a u) =\n                         b (subst_bv u x42)\n 10. \\<And>x21 x22 x51 x52.\n        \\<lbrakk>r = Fv x21 x22; \\<forall>x. a x = None \\<or> a x = b x;\n         a x = Some (Fv x21 x22); b x = Some (x51 $ x52);\n         s = x51 $ x52\\<rbrakk>\n        \\<Longrightarrow> a u = None \\<or>\n                          map_option (($) (Fv x21 x22)) (a u) =\n                          map_option (($) (x51 $ x52)) (b u)\nA total of 25 subgoals...", "apply (metis option.distinct option.inject option.sel term.distinct term.inject)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (case r of Ct list typ \\<Rightarrow> map_option (($) (Ct list typ)) (a u)\n   | Fv p typ \\<Rightarrow> map_option (($) (Fv p typ)) (a u)\n   | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n   | Abs T body \\<Rightarrow> a (subst_bv u body)\n   | term1 $ term2 \\<Rightarrow> map_option (($) (term1 $ term2)) (a u)) =\n  None \\<or>\n  (case r of Ct list typ \\<Rightarrow> map_option (($) (Ct list typ)) (a u)\n   | Fv p typ \\<Rightarrow> map_option (($) (Fv p typ)) (a u)\n   | Bv n \\<Rightarrow> map_option (($) (Bv n)) (a u)\n   | Abs T body \\<Rightarrow> a (subst_bv u body)\n   | term1 $ term2 \\<Rightarrow> map_option (($) (term1 $ term2)) (a u)) =\n  (case s of Ct list typ \\<Rightarrow> map_option (($) (Ct list typ)) (b u)\n   | Fv p typ \\<Rightarrow> map_option (($) (Fv p typ)) (b u)\n   | Bv n \\<Rightarrow> map_option (($) (Bv n)) (b u)\n   | Abs T body \\<Rightarrow> b (subst_bv u body)\n   | term1 $ term2 \\<Rightarrow> map_option (($) (term1 $ term2)) (b u))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  option_ord\n   (case a x of None \\<Rightarrow> None\n    | Some (Ct list typ) \\<Rightarrow> map_option (($) (Ct list typ)) (a u)\n    | Some (Fv p typ) \\<Rightarrow> map_option (($) (Fv p typ)) (a u)\n    | Some (Bv n) \\<Rightarrow> map_option (($) (Bv n)) (a u)\n    | Some (Abs T body) \\<Rightarrow> a (subst_bv u body)\n    | Some (term1 $ term2) \\<Rightarrow>\n        map_option (($) (term1 $ term2)) (a u))\n   (case b x of None \\<Rightarrow> None\n    | Some (Ct list typ) \\<Rightarrow> map_option (($) (Ct list typ)) (b u)\n    | Some (Fv p typ) \\<Rightarrow> map_option (($) (Fv p typ)) (b u)\n    | Some (Bv n) \\<Rightarrow> map_option (($) (Bv n)) (b u)\n    | Some (Abs T body) \\<Rightarrow> b (subst_bv u body)\n    | Some (term1 $ term2) \\<Rightarrow>\n        map_option (($) (term1 $ term2)) (b u))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Does not terminate in general :( *)"], ["", "partial_function (option) beta_norm :: \"term \\<Rightarrow> term option\" where\n  \"beta_norm t = (case t of\n    (Abs T body) \\<Rightarrow> map_option (Abs T) (beta_norm body)\n  | (Abs T body $ u) \\<Rightarrow> beta_norm (subst_bv u body)\n  | (f $ u) \\<Rightarrow> (case beta_norm f of \n      Some (Abs T body) \\<Rightarrow> beta_norm (subst_bv u body)\n    | Some f' \\<Rightarrow> map_option (App f') (beta_norm u)\n    | None \\<Rightarrow> None)\n  | t \\<Rightarrow> Some t)\""], ["", "simps_of_case beta_norm_simps[simp]: beta_norm.simps"], ["", "declare beta_norm_simps[code]"], ["", "lemma not_beta_reducible_imp_beta_norm_unchanged: \"\\<not> beta_reducible t \\<Longrightarrow> beta_norm t = Some t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t \\<Longrightarrow> beta_norm t = Some t", "proof (induction t)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<not> beta_reducible (Ct x1 x2) \\<Longrightarrow>\n       beta_norm (Ct x1 x2) = Some (Ct x1 x2)\n 2. \\<And>x1 x2.\n       \\<not> beta_reducible (Fv x1 x2) \\<Longrightarrow>\n       beta_norm (Fv x1 x2) = Some (Fv x1 x2)\n 3. \\<And>x.\n       \\<not> beta_reducible (Bv x) \\<Longrightarrow>\n       beta_norm (Bv x) = Some (Bv x)\n 4. \\<And>x1 t.\n       \\<lbrakk>\\<not> beta_reducible t \\<Longrightarrow>\n                beta_norm t = Some t;\n        \\<not> beta_reducible (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> beta_norm (Abs x1 t) = Some (Abs x1 t)\n 5. \\<And>t1 t2.\n       \\<lbrakk>\\<not> beta_reducible t1 \\<Longrightarrow>\n                beta_norm t1 = Some t1;\n        \\<not> beta_reducible t2 \\<Longrightarrow> beta_norm t2 = Some t2;\n        \\<not> beta_reducible (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> beta_norm (t1 $ t2) = Some (t1 $ t2)", "case (App t u)"], ["proof (state)\nthis:\n  \\<not> beta_reducible t \\<Longrightarrow> beta_norm t = Some t\n  \\<not> beta_reducible u \\<Longrightarrow> beta_norm u = Some u\n  \\<not> beta_reducible (t $ u)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<not> beta_reducible (Ct x1 x2) \\<Longrightarrow>\n       beta_norm (Ct x1 x2) = Some (Ct x1 x2)\n 2. \\<And>x1 x2.\n       \\<not> beta_reducible (Fv x1 x2) \\<Longrightarrow>\n       beta_norm (Fv x1 x2) = Some (Fv x1 x2)\n 3. \\<And>x.\n       \\<not> beta_reducible (Bv x) \\<Longrightarrow>\n       beta_norm (Bv x) = Some (Bv x)\n 4. \\<And>x1 t.\n       \\<lbrakk>\\<not> beta_reducible t \\<Longrightarrow>\n                beta_norm t = Some t;\n        \\<not> beta_reducible (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> beta_norm (Abs x1 t) = Some (Abs x1 t)\n 5. \\<And>t1 t2.\n       \\<lbrakk>\\<not> beta_reducible t1 \\<Longrightarrow>\n                beta_norm t1 = Some t1;\n        \\<not> beta_reducible t2 \\<Longrightarrow> beta_norm t2 = Some t2;\n        \\<not> beta_reducible (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> beta_norm (t1 $ t2) = Some (t1 $ t2)", "then"], ["proof (chain)\npicking this:\n  \\<not> beta_reducible t \\<Longrightarrow> beta_norm t = Some t\n  \\<not> beta_reducible u \\<Longrightarrow> beta_norm u = Some u\n  \\<not> beta_reducible (t $ u)", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> beta_reducible t \\<Longrightarrow> beta_norm t = Some t\n  \\<not> beta_reducible u \\<Longrightarrow> beta_norm u = Some u\n  \\<not> beta_reducible (t $ u)\n\ngoal (1 subgoal):\n 1. beta_norm (t $ u) = Some (t $ u)", "by (cases t) auto"], ["proof (state)\nthis:\n  beta_norm (t $ u) = Some (t $ u)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<not> beta_reducible (Ct x1 x2) \\<Longrightarrow>\n       beta_norm (Ct x1 x2) = Some (Ct x1 x2)\n 2. \\<And>x1 x2.\n       \\<not> beta_reducible (Fv x1 x2) \\<Longrightarrow>\n       beta_norm (Fv x1 x2) = Some (Fv x1 x2)\n 3. \\<And>x.\n       \\<not> beta_reducible (Bv x) \\<Longrightarrow>\n       beta_norm (Bv x) = Some (Bv x)\n 4. \\<And>x1 t.\n       \\<lbrakk>\\<not> beta_reducible t \\<Longrightarrow>\n                beta_norm t = Some t;\n        \\<not> beta_reducible (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> beta_norm (Abs x1 t) = Some (Abs x1 t)", "qed auto"], ["", "lemma not_beta_reducible_decr: \"\\<not> beta_reducible t \\<Longrightarrow> \\<not> beta_reducible (decr n t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t \\<Longrightarrow>\n    \\<not> beta_reducible (decr n t)", "by (induction t arbitrary: n rule: beta_reducible.induct) auto"], ["", "lemma \"\\<not> beta_reducible t \\<Longrightarrow> eta_norm t = t' \\<Longrightarrow> \\<not> beta_reducible t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> beta_reducible t; eta_norm t = t'\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "proof (induction t arbitrary: t' rule: eta_norm.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>T t t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>x51 x52 x3 t'.\n           \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51; \\<not> beta_reducible x51;\n            eta_norm x51 = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (Abs T t); eta_norm (Abs T t) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>t u t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>t'.\n           \\<lbrakk>\\<not> beta_reducible u; eta_norm u = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (t $ u); eta_norm (t $ u) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 5. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "case (1 T body)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> beta_reducible body; eta_norm body = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0; \\<not> beta_reducible ?x51.0;\n   eta_norm ?x51.0 = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<not> beta_reducible (Abs T body)\n  eta_norm (Abs T body) = t'\n\ngoal (5 subgoals):\n 1. \\<And>T t t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>x51 x52 x3 t'.\n           \\<lbrakk>eta_norm t = x51 $ x52; x52 = Bv x3; x3 = 0;\n            \\<not> is_dependent x51; \\<not> beta_reducible x51;\n            eta_norm x51 = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (Abs T t); eta_norm (Abs T t) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>t u t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>t'.\n           \\<lbrakk>\\<not> beta_reducible u; eta_norm u = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (t $ u); eta_norm (t $ u) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 5. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "proof(cases \"eta_norm body\")"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       eta_norm body = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       eta_norm body = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3.\n       eta_norm body = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x41 x42.\n       eta_norm body = Abs x41 x42 \\<Longrightarrow>\n       \\<not> beta_reducible t'\n 5. \\<And>x51 x52.\n       eta_norm body = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "case (Abs T' t)"], ["proof (state)\nthis:\n  eta_norm body = Abs T' t\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       eta_norm body = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       eta_norm body = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3.\n       eta_norm body = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x41 x42.\n       eta_norm body = Abs x41 x42 \\<Longrightarrow>\n       \\<not> beta_reducible t'\n 5. \\<And>x51 x52.\n       eta_norm body = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "then"], ["proof (chain)\npicking this:\n  eta_norm body = Abs T' t", "show ?thesis"], ["proof (prove)\nusing this:\n  eta_norm body = Abs T' t\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "using 1"], ["proof (prove)\nusing this:\n  eta_norm body = Abs T' t\n  \\<lbrakk>\\<not> beta_reducible body; eta_norm body = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0; \\<not> beta_reducible ?x51.0;\n   eta_norm ?x51.0 = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<not> beta_reducible (Abs T body)\n  eta_norm (Abs T body) = t'\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "by fastforce"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       eta_norm body = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       eta_norm body = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3.\n       eta_norm body = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x51 x52.\n       eta_norm body = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       eta_norm body = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       eta_norm body = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3.\n       eta_norm body = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x51 x52.\n       eta_norm body = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "case (App f u)"], ["proof (state)\nthis:\n  eta_norm body = f $ u\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       eta_norm body = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       eta_norm body = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3.\n       eta_norm body = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x51 x52.\n       eta_norm body = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "note oApp = this"], ["proof (state)\nthis:\n  eta_norm body = f $ u\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       eta_norm body = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       eta_norm body = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3.\n       eta_norm body = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x51 x52.\n       eta_norm body = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "proof(cases u)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12. u = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22. u = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3. u = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x41 x42.\n       u = Abs x41 x42 \\<Longrightarrow> \\<not> beta_reducible t'\n 5. \\<And>x51 x52. u = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "case (Bv n)"], ["proof (state)\nthis:\n  u = Bv n\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12. u = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22. u = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3. u = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x41 x42.\n       u = Abs x41 x42 \\<Longrightarrow> \\<not> beta_reducible t'\n 5. \\<And>x51 x52. u = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "proof(cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<not> beta_reducible t'", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<not> beta_reducible t'", "then"], ["proof (chain)\npicking this:\n  n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "proof(cases \"is_dependent f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n = 0; is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "case True"], ["proof (state)\nthis:\n  is_dependent f\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n = 0; is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "then"], ["proof (chain)\npicking this:\n  is_dependent f", "show ?thesis"], ["proof (prove)\nusing this:\n  is_dependent f\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "using 1 oApp Bv 0"], ["proof (prove)\nusing this:\n  is_dependent f\n  \\<lbrakk>\\<not> beta_reducible body; eta_norm body = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0; \\<not> beta_reducible ?x51.0;\n   eta_norm ?x51.0 = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<not> beta_reducible (Abs T body)\n  eta_norm (Abs T body) = t'\n  eta_norm body = f $ u\n  u = Bv n\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_dependent f; \\<not> beta_reducible (f $ Bv 0);\n     \\<And>x51 x52 x3 t'.\n        \\<lbrakk>f = x51; x52 = Bv 0; x3 = 0; \\<not> is_dependent x51;\n         \\<not> beta_reducible x51; eta_norm x51 = t'\\<rbrakk>\n        \\<Longrightarrow> \\<not> beta_reducible t';\n     \\<not> beta_reducible body; Abs T (f $ Bv 0) = t';\n     eta_norm body = f $ Bv 0; u = Bv 0; n = 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "using beta_reducible.simps(2)"], ["proof (prove)\nusing this:\n  beta_reducible (Abs ?ux ?t) = beta_reducible ?t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_dependent f; \\<not> beta_reducible (f $ Bv 0);\n     \\<And>x51 x52 x3 t'.\n        \\<lbrakk>f = x51; x52 = Bv 0; x3 = 0; \\<not> is_dependent x51;\n         \\<not> beta_reducible x51; eta_norm x51 = t'\\<rbrakk>\n        \\<Longrightarrow> \\<not> beta_reducible t';\n     \\<not> beta_reducible body; Abs T (f $ Bv 0) = t';\n     eta_norm body = f $ Bv 0; u = Bv 0; n = 0\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "by blast"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "case False"], ["proof (state)\nthis:\n  \\<not> is_dependent f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "obtain body' where body': \"eta_norm body = body'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>body'.\n        eta_norm body = body' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  eta_norm body = body'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "obtain f' where f': \"eta_norm f = f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f'. eta_norm f = f' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  eta_norm f = f'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "moreover"], ["proof (state)\nthis:\n  eta_norm f = f'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "have t': \"t' = decr 0 f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' = decr 0 f'", "using \"1.prems\"(2)[symmetric] oApp Bv 0 False f'"], ["proof (prove)\nusing this:\n  t' = eta_norm (Abs T body)\n  eta_norm body = f $ u\n  u = Bv n\n  n = 0\n  \\<not> is_dependent f\n  eta_norm f = f'\n\ngoal (1 subgoal):\n 1. t' = decr 0 f'", "by simp"], ["proof (state)\nthis:\n  t' = decr 0 f'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "moreover"], ["proof (state)\nthis:\n  t' = decr 0 f'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "have \"\\<not> beta_reducible t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "have \"\\<not> beta_reducible (f $ Bv 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> beta_reducible (f $ Bv 0)", "using \"1.IH\"(1) 1 oApp Bv 0"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> beta_reducible body; eta_norm body = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<lbrakk>\\<not> beta_reducible body; eta_norm body = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0; \\<not> beta_reducible ?x51.0;\n   eta_norm ?x51.0 = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<not> beta_reducible (Abs T body)\n  eta_norm (Abs T body) = t'\n  eta_norm body = f $ u\n  u = Bv n\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible (f $ Bv 0)", "by simp"], ["proof (state)\nthis:\n  \\<not> beta_reducible (f $ Bv 0)\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "hence \"\\<not> beta_reducible (decr 0 (f' $ Bv 0))\""], ["proof (prove)\nusing this:\n  \\<not> beta_reducible (f $ Bv 0)\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible (decr 0 (f' $ Bv 0))", "by (metis eta_reducible.simps(11) f' not_beta_reducible_decr \n                  not_eta_reducible_eta_norm not_eta_reducible_imp_eta_norm_no_change oApp)"], ["proof (state)\nthis:\n  \\<not> beta_reducible (decr 0 (f' $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "hence \"\\<not> beta_reducible (decr 0 f' $ Bv 0)\""], ["proof (prove)\nusing this:\n  \\<not> beta_reducible (decr 0 (f' $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible (decr 0 f' $ Bv 0)", "by simp"], ["proof (state)\nthis:\n  \\<not> beta_reducible (decr 0 f' $ Bv 0)\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "hence \"\\<not> beta_reducible (decr 0 f')\""], ["proof (prove)\nusing this:\n  \\<not> beta_reducible (decr 0 f' $ Bv 0)\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible (decr 0 f')", "by (auto elim: beta_reducible.elims)"], ["proof (state)\nthis:\n  \\<not> beta_reducible (decr 0 f')\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> beta_reducible (decr 0 f')\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "using t'"], ["proof (prove)\nusing this:\n  \\<not> beta_reducible (decr 0 f')\n  t' = decr 0 f'\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "by simp"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0; \\<not> is_dependent f\\<rbrakk>\n    \\<Longrightarrow> \\<not> beta_reducible t'", "ultimately"], ["proof (chain)\npicking this:\n  eta_norm f = f'\n  t' = decr 0 f'\n  \\<not> beta_reducible t'", "show ?thesis"], ["proof (prove)\nusing this:\n  eta_norm f = f'\n  t' = decr 0 f'\n  \\<not> beta_reducible t'\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "by blast"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<not> beta_reducible t'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<not> beta_reducible t'", "case (Suc nat)"], ["proof (state)\nthis:\n  n = Suc nat\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> \\<not> beta_reducible t'", "then"], ["proof (chain)\npicking this:\n  n = Suc nat", "show ?thesis"], ["proof (prove)\nusing this:\n  n = Suc nat\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "using 1 oApp Bv"], ["proof (prove)\nusing this:\n  n = Suc nat\n  \\<lbrakk>\\<not> beta_reducible body; eta_norm body = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<lbrakk>eta_norm body = ?x51.0 $ ?x52.0; ?x52.0 = Bv ?x3.0; ?x3.0 = 0;\n   \\<not> is_dependent ?x51.0; \\<not> beta_reducible ?x51.0;\n   eta_norm ?x51.0 = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<not> beta_reducible (Abs T body)\n  eta_norm (Abs T body) = t'\n  eta_norm body = f $ u\n  u = Bv n\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "by auto"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12. u = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22. u = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x41 x42.\n       u = Abs x41 x42 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x51 x52. u = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "qed (use 1 oApp in auto)"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12.\n       eta_norm body = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       eta_norm body = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3.\n       eta_norm body = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'", "qed (use 1 in auto)"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal (4 subgoals):\n 1. \\<And>t u t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>t'.\n           \\<lbrakk>\\<not> beta_reducible u; eta_norm u = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (t $ u); eta_norm (t $ u) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>t u t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>t'.\n           \\<lbrakk>\\<not> beta_reducible u; eta_norm u = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (t $ u); eta_norm (t $ u) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "case (2 f u)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> beta_reducible f; eta_norm f = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<lbrakk>\\<not> beta_reducible u; eta_norm u = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<not> beta_reducible (f $ u)\n  eta_norm (f $ u) = t'\n\ngoal (4 subgoals):\n 1. \\<And>t u t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>t'.\n           \\<lbrakk>\\<not> beta_reducible u; eta_norm u = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (t $ u); eta_norm (t $ u) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "hence \"\\<not> beta_reducible f\" \"\\<not> beta_reducible u\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> beta_reducible f; eta_norm f = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<lbrakk>\\<not> beta_reducible u; eta_norm u = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<not> beta_reducible (f $ u)\n  eta_norm (f $ u) = t'\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible f &&& \\<not> beta_reducible u", "by (blast elim!: beta_reducible.elims(3))+"], ["proof (state)\nthis:\n  \\<not> beta_reducible f\n  \\<not> beta_reducible u\n\ngoal (4 subgoals):\n 1. \\<And>t u t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>t'.\n           \\<lbrakk>\\<not> beta_reducible u; eta_norm u = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (t $ u); eta_norm (t $ u) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "moreover"], ["proof (state)\nthis:\n  \\<not> beta_reducible f\n  \\<not> beta_reducible u\n\ngoal (4 subgoals):\n 1. \\<And>t u t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>t'.\n           \\<lbrakk>\\<not> beta_reducible u; eta_norm u = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (t $ u); eta_norm (t $ u) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "obtain f' u' where \"eta_norm f = f'\" \"eta_norm u = u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f' u'.\n        \\<lbrakk>eta_norm f = f'; eta_norm u = u'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp_all"], ["proof (state)\nthis:\n  eta_norm f = f'\n  eta_norm u = u'\n\ngoal (4 subgoals):\n 1. \\<And>t u t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>t'.\n           \\<lbrakk>\\<not> beta_reducible u; eta_norm u = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (t $ u); eta_norm (t $ u) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> beta_reducible f\n  \\<not> beta_reducible u\n  eta_norm f = f'\n  eta_norm u = u'", "have \"\\<not> beta_reducible f'\" \"\\<not> beta_reducible u'\""], ["proof (prove)\nusing this:\n  \\<not> beta_reducible f\n  \\<not> beta_reducible u\n  eta_norm f = f'\n  eta_norm u = u'\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible f' &&& \\<not> beta_reducible u'", "using \"2.IH\""], ["proof (prove)\nusing this:\n  \\<not> beta_reducible f\n  \\<not> beta_reducible u\n  eta_norm f = f'\n  eta_norm u = u'\n  \\<lbrakk>\\<not> beta_reducible f; eta_norm f = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  \\<lbrakk>\\<not> beta_reducible u; eta_norm u = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible f' &&& \\<not> beta_reducible u'", "by simp_all"], ["proof (state)\nthis:\n  \\<not> beta_reducible f'\n  \\<not> beta_reducible u'\n\ngoal (4 subgoals):\n 1. \\<And>t u t'.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<not> beta_reducible t;\n                    eta_norm t = t'\\<rbrakk>\n                   \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<And>t'.\n           \\<lbrakk>\\<not> beta_reducible u; eta_norm u = t'\\<rbrakk>\n           \\<Longrightarrow> \\<not> beta_reducible t';\n        \\<not> beta_reducible (t $ u); eta_norm (t $ u) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "proof(cases t')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       t' = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       t' = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3. t' = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x41 x42.\n       t' = Abs x41 x42 \\<Longrightarrow> \\<not> beta_reducible t'\n 5. \\<And>x51 x52. t' = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "case (App l r)"], ["proof (state)\nthis:\n  t' = l $ r\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       t' = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       t' = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3. t' = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x41 x42.\n       t' = Abs x41 x42 \\<Longrightarrow> \\<not> beta_reducible t'\n 5. \\<And>x51 x52. t' = x51 $ x52 \\<Longrightarrow> \\<not> beta_reducible t'", "then"], ["proof (chain)\npicking this:\n  t' = l $ r", "show ?thesis"], ["proof (prove)\nusing this:\n  t' = l $ r\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "using \"2.IH\"(2) \"2.prems\"(2) \\<open>\\<not> beta_reducible u\\<close> \\<open>\\<not> beta_reducible f'\\<close> \\<open>eta_norm f = f'\\<close> \"2\"(3)"], ["proof (prove)\nusing this:\n  t' = l $ r\n  \\<lbrakk>\\<not> beta_reducible u; eta_norm u = ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<not> beta_reducible ?t'\n  eta_norm (f $ u) = t'\n  \\<not> beta_reducible u\n  \\<not> beta_reducible f'\n  eta_norm f = f'\n  \\<not> beta_reducible (f $ u)\n\ngoal (1 subgoal):\n 1. \\<not> beta_reducible t'", "by (auto elim: beta_reducible.elims(3))"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12.\n       t' = Ct x11 x12 \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>x21 x22.\n       t' = Fv x21 x22 \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>x3. t' = Bv x3 \\<Longrightarrow> \\<not> beta_reducible t'\n 4. \\<And>x41 x42.\n       t' = Abs x41 x42 \\<Longrightarrow> \\<not> beta_reducible t'", "qed (use \"2.prems\"(2) in auto)"], ["proof (state)\nthis:\n  \\<not> beta_reducible t'\n\ngoal (3 subgoals):\n 1. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Ct v va);\n        eta_norm (Ct v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 2. \\<And>v va t'.\n       \\<lbrakk>\\<not> beta_reducible (Fv v va);\n        eta_norm (Fv v va) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'\n 3. \\<And>v t'.\n       \\<lbrakk>\\<not> beta_reducible (Bv v); eta_norm (Bv v) = t'\\<rbrakk>\n       \\<Longrightarrow> \\<not> beta_reducible t'", "qed auto"], ["", "fun is_variable :: \"term \\<Rightarrow> bool\" where\n  \"is_variable (Fv _ _) = True\"\n| \"is_variable _ = False\""], ["", "lemma fv_occs: \"(x,\\<tau>) \\<in> fv t \\<Longrightarrow> occs (Fv x \\<tau>) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, \\<tau>) \\<in> fv t \\<Longrightarrow> occs (Fv x \\<tau>) t", "by (induction t) auto"], ["", "lemma fv_iff_occs: \"(x,\\<tau>) \\<in> fv t \\<longleftrightarrow> occs (Fv x \\<tau>) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, \\<tau>) \\<in> fv t) = occs (Fv x \\<tau>) t", "by (induction t) auto"], ["", "(* Next few definitions directly from ML code *)"], ["", "fun strip_abs :: \"term \\<Rightarrow> typ list * term\" where\n  \"strip_abs (Abs T t) = (let (a', t') = strip_abs t in (T # a', t'))\"\n| \"strip_abs t = ([], t)\""], ["", "(*maps  (x1,...,xn)t   to   t*)"], ["", "fun strip_abs_body :: \"term \\<Rightarrow> term\" where\n  \"strip_abs_body (Abs _ t) = strip_abs_body t\"\n| \"strip_abs_body u = u\""], ["", "(*maps  (x1,...,xn)t   to   [x1, ..., xn]*)"], ["", "fun strip_abs_vars :: \"term \\<Rightarrow> typ list\" where\n  \"strip_abs_vars (Abs T t) = T # strip_abs_vars t\"\n| \"strip_abs_vars u = []\""], ["", "(*Dropped inner helper function, instead passing qnt along.  *)"], ["", "fun strip_qnt_body :: \"name \\<Rightarrow> term \\<Rightarrow> term\" where\n  \"strip_qnt_body qnt ((Ct c ty) $ (Abs _ t)) = \n    (if c=qnt then strip_qnt_body qnt t else (Ct c ty))\"\n| \"strip_qnt_body _ t = t\""], ["", "(*Dropped inner helper function, instead passing qnt along.  *)"], ["", "fun strip_qnt_vars :: \"name \\<Rightarrow> term \\<Rightarrow> typ list\" where \n  \"strip_qnt_vars qnt (Ct c _ $ Abs T t)= (if c=qnt then T # strip_qnt_vars qnt t else [])\"\n| \"strip_qnt_vars qnt t  =  []\""], ["", "(*maps   (f, [t1,...,tn])  to  f(t1,...,tn)*)"], ["", "definition list_comb :: \"term * term list \\<Rightarrow> term\" where \"list_comb = case_prod (foldl ($))\""], ["", "(*seems more natural curried...*)"], ["", "definition list_comb' :: \"term \\<Rightarrow> term list \\<Rightarrow> term\" where \"list_comb' = foldl ($)\""], ["", "lemma \"list_comb (h,t) = list_comb' h t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_comb (h, t) = list_comb' h t", "by (simp add: list_comb_def list_comb'_def)"], ["", "(*curry this... ?*)"], ["", "fun strip_comb_imp where\n  \"strip_comb_imp (f$t, ts) = strip_comb_imp (f, t # ts)\"\n| \"strip_comb_imp x = x\""], ["", "(*maps   f(t1,...,tn)  to  (f, [t1,...,tn]) ; naturally tail-recursive*)"], ["", "definition strip_comb :: \"term \\<Rightarrow> term * term list\" where\n  \"strip_comb u = strip_comb_imp (u,[])\""], ["", "(*maps   f(t1,...,tn)  to  f , which is never a combination*)"], ["", "fun head_of :: \"term \\<Rightarrow> term\" where\n  \"head_of (f$t) = head_of f\"\n| \"head_of u = u\""], ["", "(*some sanity check lemmas*)"], ["", "lemma fst_strip_comb_imp_eq_head_of: \"fst (strip_comb_imp (t,ts)) = head_of t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (strip_comb_imp (t, ts)) = head_of t", "by (induction \"(t,ts)\" arbitrary: t ts rule: strip_comb_imp.induct) simp_all"], ["", "corollary \"fst (strip_comb t) = head_of t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (strip_comb t) = head_of t", "using fst_strip_comb_imp_eq_head_of"], ["proof (prove)\nusing this:\n  fst (strip_comb_imp (?t, ?ts)) = head_of ?t\n\ngoal (1 subgoal):\n 1. fst (strip_comb t) = head_of t", "by (simp add: strip_comb_def)"], ["", "(*not in ML*)"], ["", "fun is_app :: \"term \\<Rightarrow> bool\" where\n  \"is_app (_ $ _) = True\"\n| \"is_app _ = False\""], ["", "lemma not_is_app_imp_strip_com_imp_unchanged: \"\\<not> is_app t \\<Longrightarrow> strip_comb_imp (t,ts) = (t,ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_app t \\<Longrightarrow> strip_comb_imp (t, ts) = (t, ts)", "by (cases t) simp_all"], ["", "corollary not_is_app_imp_strip_com_unchanged: \"\\<not> is_app t \\<Longrightarrow> strip_comb t = (t,[])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_app t \\<Longrightarrow> strip_comb t = (t, [])", "unfolding strip_comb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_app t \\<Longrightarrow> strip_comb_imp (t, []) = (t, [])", "using not_is_app_imp_strip_com_imp_unchanged"], ["proof (prove)\nusing this:\n  \\<not> is_app ?t \\<Longrightarrow> strip_comb_imp (?t, ?ts) = (?t, ?ts)\n\ngoal (1 subgoal):\n 1. \\<not> is_app t \\<Longrightarrow> strip_comb_imp (t, []) = (t, [])", "."], ["", "lemma list_comb_fuse: \"list_comb (list_comb (t,ts), ss) = list_comb (t,ts@ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_comb (list_comb (t, ts), ss) = list_comb (t, ts @ ss)", "unfolding list_comb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (case (t, ts) of (x, xa) \\<Rightarrow> foldl ($) x xa, ss) of\n     (x, xa) \\<Rightarrow> foldl ($) x xa) =\n    (case (t, ts @ ss) of (x, xa) \\<Rightarrow> foldl ($) x xa)", "by simp"], ["", "fun add_size_term :: \"term \\<Rightarrow> int \\<Rightarrow> int\" where\n  \"add_size_term (t $ u) n = add_size_term t (add_size_term u n)\"\n| \"add_size_term (Abs _ t) n = add_size_term t (n + 1)\"\n| \"add_size_term _ n = n + 1\""], ["", "definition \"size_of_term t = add_size_term t 0\""], ["", "fun add_size_type :: \"typ \\<Rightarrow> int \\<Rightarrow> int\" where\n  \"add_size_type (Ty _ tys) n = fold add_size_type tys (n + 1)\"\n| \"add_size_type _ n = n + 1\""], ["", "definition \"size_of_type ty = add_size_type ty 0\""], ["", "fun map_types :: \"(typ \\<Rightarrow> typ) \\<Rightarrow> term \\<Rightarrow> term\" where\n  \"map_types f (Ct a T) = Ct a (f T)\"\n| \"map_types f (Fv v T) = Fv v (f T)\"\n| \"map_types f (Bv i) = Bv i\"\n| \"map_types f (Abs T t) = Abs (f T) (map_types f t)\"\n| \"map_types f (t $ u) = map_types f t $ map_types f u\""], ["", "fun map_atyps :: \"(typ \\<Rightarrow> typ) \\<Rightarrow> typ \\<Rightarrow> typ\" where\n  \"map_atyps f (Ty a Ts) = Ty a (map (map_atyps f) Ts)\"\n| \"map_atyps f T = f T\""], ["", "lemma \"map_atyps id ty = ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_atyps id ty = ty", "by (induction rule: typ.induct) (simp_all add: map_idI)"], ["", "fun map_aterms :: \"(term \\<Rightarrow> term) \\<Rightarrow> term \\<Rightarrow> term\" where\n  \"map_aterms f (t $ u) = map_aterms f t $ map_aterms f u\"\n| \"map_aterms f (Abs T t) = Abs T (map_aterms f t)\"\n| \"map_aterms f t = f t\""], ["", "lemma \"map_aterms id t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_aterms id t = t", "by (induction rule: term.induct) simp_all"], ["", "definition \"map_type_tvar f = map_atyps (\\<lambda>x . case x of Tv iname s \\<Rightarrow>  f iname s | T \\<Rightarrow> T)\""], ["", "lemma map_types_id[simp]: \"map_types id t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_types id t = t", "by (induction t) simp_all"], ["", "lemma map_types_id'[simp]: \"map_types (\\<lambda>a . a) t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_types (\\<lambda>a. a) t = t", "using map_types_id"], ["proof (prove)\nusing this:\n  map_types id ?t = ?t\n\ngoal (1 subgoal):\n 1. map_types (\\<lambda>a. a) t = t", "by (simp add: id_def)"], ["", "(* fold types and terms *)"], ["", "fun fold_atyps :: \"(typ \\<Rightarrow> 'a \\<Rightarrow> 'a) \\<Rightarrow> typ \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"fold_atyps f (Ty _ Ts) s = fold (fold_atyps f) Ts s\"\n| \"fold_atyps f T s = f T s\""], ["", "definition \"fold_atyps_sorts f =\n  fold_atyps (\\<lambda>x . case x of Tv vn S \\<Rightarrow> f (Tv vn S) S)\""], ["", "fun fold_aterms :: \"(term \\<Rightarrow> 'a \\<Rightarrow> 'a) \\<Rightarrow> term \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"fold_aterms f (t $ u) s = fold_aterms f u (fold_aterms f t s)\"\n| \"fold_aterms f (Abs _ t) s = fold_aterms f t s\"\n| \"fold_aterms f a s = f a s\""], ["", "fun fold_term_types :: \"(term \\<Rightarrow> typ \\<Rightarrow> 'a \\<Rightarrow> 'a) \\<Rightarrow> term \\<Rightarrow> 'a \\<Rightarrow> 'a\" where \n  \"fold_term_types f (Ct n T) s = f (Ct n T) T s\"\n| \"fold_term_types f (Fv idn T) s = f (Fv idn T) T s\"\n| \"fold_term_types f (Bv _) s = s\"\n| \"fold_term_types f (Abs T b) s = fold_term_types f b (f (Abs T b) T s)\"\n| \"fold_term_types f (t $ u) s = fold_term_types f u (fold_term_types f t s)\""], ["", "definition \"fold_types f = fold_term_types (\\<lambda>x . f)\""], ["", "(* Patterns for empty list except with Bv missing. Probably need a precond when using *)"], ["", "fun replace_types :: \"term \\<Rightarrow> typ list \\<Rightarrow> term \\<times> typ list\" where\n  \"replace_types (Ct c _) (T # Ts) = (Ct c T, Ts)\"\n| \"replace_types (Fv xi _) (T # Ts) = (Fv xi T, Ts)\"\n| \"replace_types (Bv i) Ts = (Bv i, Ts)\"\n| \"replace_types (Abs _ b) (T # Ts) =\n    (let (b', Ts') = replace_types b Ts\n    in (Abs T b', Ts'))\"\n| \"replace_types (t $ u) Ts =\n    (let\n      (t', Ts') = replace_types t Ts in\n      (let (u', Ts'') = replace_types u Ts\n    in (t' $ u', Ts'')))\""], ["", "(* \n  collect variables, is the order important? Or should I just return sets? \n  The set case is basically just (T)fv(T)...\n  List.insert should keep order, just no duplicates...\n*)"], ["", "definition \"add_tvar_namesT' = fold_atyps (\\<lambda>x l . case x of Tv xi _ => List.insert xi l | _ => l)\""], ["", "definition \"add_tvar_names' = fold_types add_tvar_namesT'\""], ["", "definition \"add_tvarsT' = fold_atyps (\\<lambda>x l . case x of Tv idn s => List.insert (idn,s) l | _ => l)\""], ["", "definition \"add_tvars' = fold_types add_tvarsT'\""], ["", "definition \"add_vars' = fold_aterms (\\<lambda>x l . case x of Fv idn s => List.insert (idn,s) l | _ => l)\""], ["", "definition \"add_var_names' = fold_aterms (\\<lambda>x l . case x of Fv xi _ => List.insert xi l | _ => l)\""], ["", "definition \"add_const_names' = fold_aterms (\\<lambda>x l . case x of Ct c _ => List.insert c l | _ => l)\""], ["", "definition \"add_consts' = fold_aterms (\\<lambda>x l . case x of Ct n s => List.insert (n,s) l | _ => l)\""], ["", "definition \"add_tvar_namesT = fold_atyps (\\<lambda>x . case x of Tv xi _  => insert xi | _ => id)\""], ["", "definition \"add_tvar_names = fold_types add_tvar_namesT\""], ["", "definition \"add_tvarsT = fold_atyps (\\<lambda>x . case x of Tv idn s => insert (idn,s) | _ => id)\""], ["", "definition \"add_tvars = fold_types add_tvarsT\""], ["", "definition \"add_var_names = fold_aterms (\\<lambda>x . case x of Fv xi _ => insert xi | _ => id)\""], ["", "definition \"add_vars = fold_aterms (\\<lambda>x . case x of Fv idn s => insert (idn,s) | _ => id)\""], ["", "definition \"add_const_names = fold_aterms (\\<lambda>x . case x of Ct c _ => insert c | _ => id)\""], ["", "definition \"add_consts = fold_aterms (\\<lambda>x . case x of Ct n s => insert (n,s) | _ => id)\""], ["", "(*which of those do I need ^ *)\n\n(* Show that these behave like (T)fv(T)? *)"], ["", "lemma add_tvarsT'_tvsT_pre[simp]: \"set (add_tvarsT' T acc) = set acc \\<union> tvsT T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (add_tvarsT' T acc) = set acc \\<union> tvsT T", "unfolding add_tvarsT'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fold_atyps\n          (\\<lambda>x l.\n              case x of Ty literal list \\<Rightarrow> l\n              | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n          T acc) =\n    set acc \\<union> tvsT T", "proof (induction T arbitrary: acc)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 acc.\n       (\\<And>x2a acc.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           set (fold_atyps\n                 (\\<lambda>x l.\n                     case x of Ty literal list \\<Rightarrow> l\n                     | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n                 x2a acc) =\n           set acc \\<union> tvsT x2a) \\<Longrightarrow>\n       set (fold_atyps\n             (\\<lambda>x l.\n                 case x of Ty literal list \\<Rightarrow> l\n                 | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n             (Ty x1 x2) acc) =\n       set acc \\<union> tvsT (Ty x1 x2)\n 2. \\<And>x1 x2 acc.\n       set (fold_atyps\n             (\\<lambda>x l.\n                 case x of Ty literal list \\<Rightarrow> l\n                 | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n             (Tv x1 x2) acc) =\n       set acc \\<union> tvsT (Tv x1 x2)", "case (Ty n Ts)"], ["proof (state)\nthis:\n  ?x2a \\<in> set Ts \\<Longrightarrow>\n  set (fold_atyps\n        (\\<lambda>x l.\n            case x of Ty literal list \\<Rightarrow> l\n            | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n        ?x2a ?acc) =\n  set ?acc \\<union> tvsT ?x2a\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 acc.\n       (\\<And>x2a acc.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           set (fold_atyps\n                 (\\<lambda>x l.\n                     case x of Ty literal list \\<Rightarrow> l\n                     | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n                 x2a acc) =\n           set acc \\<union> tvsT x2a) \\<Longrightarrow>\n       set (fold_atyps\n             (\\<lambda>x l.\n                 case x of Ty literal list \\<Rightarrow> l\n                 | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n             (Ty x1 x2) acc) =\n       set acc \\<union> tvsT (Ty x1 x2)\n 2. \\<And>x1 x2 acc.\n       set (fold_atyps\n             (\\<lambda>x l.\n                 case x of Ty literal list \\<Rightarrow> l\n                 | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n             (Tv x1 x2) acc) =\n       set acc \\<union> tvsT (Tv x1 x2)", "then"], ["proof (chain)\npicking this:\n  ?x2a \\<in> set Ts \\<Longrightarrow>\n  set (fold_atyps\n        (\\<lambda>x l.\n            case x of Ty literal list \\<Rightarrow> l\n            | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n        ?x2a ?acc) =\n  set ?acc \\<union> tvsT ?x2a", "show ?case"], ["proof (prove)\nusing this:\n  ?x2a \\<in> set Ts \\<Longrightarrow>\n  set (fold_atyps\n        (\\<lambda>x l.\n            case x of Ty literal list \\<Rightarrow> l\n            | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n        ?x2a ?acc) =\n  set ?acc \\<union> tvsT ?x2a\n\ngoal (1 subgoal):\n 1. set (fold_atyps\n          (\\<lambda>x l.\n              case x of Ty literal list \\<Rightarrow> l\n              | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n          (Ty n Ts) acc) =\n    set acc \\<union> tvsT (Ty n Ts)", "by (induction Ts arbitrary: acc) auto"], ["proof (state)\nthis:\n  set (fold_atyps\n        (\\<lambda>x l.\n            case x of Ty literal list \\<Rightarrow> l\n            | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n        (Ty n Ts) acc) =\n  set acc \\<union> tvsT (Ty n Ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 acc.\n       set (fold_atyps\n             (\\<lambda>x l.\n                 case x of Ty literal list \\<Rightarrow> l\n                 | Tv idn s \\<Rightarrow> List.insert (idn, s) l)\n             (Tv x1 x2) acc) =\n       set acc \\<union> tvsT (Tv x1 x2)", "qed auto"], ["", "lemma add_tvars'_tvs_pre[simp]: \"set (add_tvars' t acc) = set acc \\<union> tvs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (add_tvars' t acc) = set acc \\<union> tvs t", "by (induction t arbitrary: acc) (auto simp add: add_tvars'_def fold_types_def)"], ["", "lemma \"add_tvarsT T acc = acc \\<union> tvsT T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. add_tvarsT T acc = acc \\<union> tvsT T", "unfolding add_tvarsT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_atyps\n     (case_typ (\\<lambda>literal list. id)\n       (\\<lambda>idn s. insert (idn, s)))\n     T acc =\n    acc \\<union> tvsT T", "proof (induction T arbitrary: acc)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 acc.\n       (\\<And>x2a acc.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           fold_atyps\n            (case_typ (\\<lambda>literal list. id)\n              (\\<lambda>idn s. insert (idn, s)))\n            x2a acc =\n           acc \\<union> tvsT x2a) \\<Longrightarrow>\n       fold_atyps\n        (case_typ (\\<lambda>literal list. id)\n          (\\<lambda>idn s. insert (idn, s)))\n        (Ty x1 x2) acc =\n       acc \\<union> tvsT (Ty x1 x2)\n 2. \\<And>x1 x2 acc.\n       fold_atyps\n        (case_typ (\\<lambda>literal list. id)\n          (\\<lambda>idn s. insert (idn, s)))\n        (Tv x1 x2) acc =\n       acc \\<union> tvsT (Tv x1 x2)", "case (Ty n Ts)"], ["proof (state)\nthis:\n  ?x2a \\<in> set Ts \\<Longrightarrow>\n  fold_atyps\n   (\\<lambda>a.\n       case a of Ty literal list \\<Rightarrow> id\n       | Tv idn s \\<Rightarrow> insert (idn, s))\n   ?x2a ?acc =\n  ?acc \\<union> tvsT ?x2a\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 acc.\n       (\\<And>x2a acc.\n           x2a \\<in> set x2 \\<Longrightarrow>\n           fold_atyps\n            (case_typ (\\<lambda>literal list. id)\n              (\\<lambda>idn s. insert (idn, s)))\n            x2a acc =\n           acc \\<union> tvsT x2a) \\<Longrightarrow>\n       fold_atyps\n        (case_typ (\\<lambda>literal list. id)\n          (\\<lambda>idn s. insert (idn, s)))\n        (Ty x1 x2) acc =\n       acc \\<union> tvsT (Ty x1 x2)\n 2. \\<And>x1 x2 acc.\n       fold_atyps\n        (case_typ (\\<lambda>literal list. id)\n          (\\<lambda>idn s. insert (idn, s)))\n        (Tv x1 x2) acc =\n       acc \\<union> tvsT (Tv x1 x2)", "then"], ["proof (chain)\npicking this:\n  ?x2a \\<in> set Ts \\<Longrightarrow>\n  fold_atyps\n   (\\<lambda>a.\n       case a of Ty literal list \\<Rightarrow> id\n       | Tv idn s \\<Rightarrow> insert (idn, s))\n   ?x2a ?acc =\n  ?acc \\<union> tvsT ?x2a", "show ?case"], ["proof (prove)\nusing this:\n  ?x2a \\<in> set Ts \\<Longrightarrow>\n  fold_atyps\n   (\\<lambda>a.\n       case a of Ty literal list \\<Rightarrow> id\n       | Tv idn s \\<Rightarrow> insert (idn, s))\n   ?x2a ?acc =\n  ?acc \\<union> tvsT ?x2a\n\ngoal (1 subgoal):\n 1. fold_atyps\n     (\\<lambda>a.\n         case a of Ty literal list \\<Rightarrow> id\n         | Tv idn s \\<Rightarrow> insert (idn, s))\n     (Ty n Ts) acc =\n    acc \\<union> tvsT (Ty n Ts)", "by (induction Ts arbitrary: acc) auto"], ["proof (state)\nthis:\n  fold_atyps\n   (\\<lambda>a.\n       case a of Ty literal list \\<Rightarrow> id\n       | Tv idn s \\<Rightarrow> insert (idn, s))\n   (Ty n Ts) acc =\n  acc \\<union> tvsT (Ty n Ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 acc.\n       fold_atyps\n        (case_typ (\\<lambda>literal list. id)\n          (\\<lambda>idn s. insert (idn, s)))\n        (Tv x1 x2) acc =\n       acc \\<union> tvsT (Tv x1 x2)", "qed auto"], ["", "lemma add_vars'_fv_pre: \"set (add_vars' t acc) = set acc \\<union> fv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (add_vars' t acc) = set acc \\<union> fv t", "unfolding add_vars'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fold_aterms\n          (\\<lambda>x l.\n              case x of Fv idn s \\<Rightarrow> List.insert (idn, s) l\n              | _ \\<Rightarrow> l)\n          t acc) =\n    set acc \\<union> fv t", "by (induction t arbitrary: acc) auto"], ["", "corollary add_vars'_fv: \"set (add_vars' t []) = fv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (add_vars' t []) = fv t", "using add_vars'_fv_pre"], ["proof (prove)\nusing this:\n  set (add_vars' ?t ?acc) = set ?acc \\<union> fv ?t\n\ngoal (1 subgoal):\n 1. set (add_vars' t []) = fv t", "by simp"], ["", "(*extra type variables in a term, not covered by its type*)\n\n(* For some experiments for handling \\<And>*)\n\n(* I differ from the ML code here, requiring the correct typ for the \\<And>*)"], ["", "fun strip_all_body :: \"term \\<Rightarrow> term\" where\n  \"strip_all_body (Ct all S $ Abs T t) = (if all= STR ''Pure.all'' \\<and> S=(T\\<rightarrow>propT)\\<rightarrow>propT\n    then strip_all_body t else (Ct all S $ Abs T t))\"\n| \"strip_all_body t = t\""], ["", "fun strip_all_vars :: \"term \\<Rightarrow> typ list\" where\n  \"strip_all_vars (Ct all S $ Abs T t) = (if all= STR ''Pure.all'' \\<and> S=(T\\<rightarrow>propT)\\<rightarrow>propT \n    then T # strip_all_vars t else [])\"\n| \"strip_all_vars t = []\""], ["", "fun strip_all_single_body :: \"term \\<Rightarrow> term\" where\n  \"strip_all_single_body (Ct all S $ Abs T t) = (if all= STR ''Pure.all'' \\<and> S=(T\\<rightarrow>propT)\\<rightarrow>propT \n    then t else (Ct all S $ Abs T t))\"\n| \"strip_all_single_body t = t\""], ["", "fun strip_all_single_var :: \"term \\<Rightarrow> typ option\" where\n  \"strip_all_single_var (Ct all S $ Abs T t) = (if all= STR ''Pure.all'' \\<and> S=(T\\<rightarrow>propT)\\<rightarrow>propT\n    then Some T else None)\"\n| \"strip_all_single_var t = None\""], ["", "fun strip_all_multiple_body :: \"nat \\<Rightarrow> term \\<Rightarrow> term\" where\n  \"strip_all_multiple_body 0 t = t\"\n| \"strip_all_multiple_body (Suc n) (Ct all S $ Abs T t) = (if all= STR ''Pure.all'' \\<and> S=(T\\<rightarrow>propT)\\<rightarrow>propT\n    then strip_all_multiple_body n t else (Ct all S $ Abs T t))\"\n| \"strip_all_multiple_body _ t = t\""], ["", "fun strip_all_multiple_vars :: \"nat \\<Rightarrow> term \\<Rightarrow> typ list\" where\n  \"strip_all_multiple_vars 0 _ = []\"\n| \"strip_all_multiple_vars (Suc n) (Ct all S $ Abs T t) = (if all= STR ''Pure.all'' \\<and> S=(T\\<rightarrow>propT)\\<rightarrow>propT \n    then T # strip_all_multiple_vars n t else [])\"\n| \"strip_all_multiple_vars _ t = []\""], ["", "lemma strip_all_vars_strip_all_multiple_vars: \n  \"n\\<ge>length (strip_all_vars t) \\<Longrightarrow> strip_all_multiple_vars n t = strip_all_vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (strip_all_vars t) \\<le> n \\<Longrightarrow>\n    strip_all_multiple_vars n t = strip_all_vars t", "by (induction n t rule: strip_all_multiple_vars.induct) auto"], ["", "lemma \"n\\<ge>length (strip_all_vars t) \\<Longrightarrow> strip_all_multiple_body n t = strip_all_body t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (strip_all_vars t) \\<le> n \\<Longrightarrow>\n    strip_all_multiple_body n t = strip_all_body t", "by (induction n t rule: strip_all_multiple_vars.induct) (auto elim!: strip_all_vars.elims)"], ["", "lemma length_strip_all_multiple_vars: \"length (strip_all_multiple_vars n t) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (strip_all_multiple_vars n t) \\<le> n", "by (induction n t rule: strip_all_multiple_vars.induct) auto"], ["", "lemma prefix_strip_all_multiple_vars: \"prefix (strip_all_multiple_vars n t) (strip_all_vars t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix (strip_all_multiple_vars n t) (strip_all_vars t)", "unfolding prefix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>zs. strip_all_vars t = strip_all_multiple_vars n t @ zs", "by (induction n t rule: strip_all_multiple_vars.induct) auto"], ["", "definition \"mk_all_list l t = fold (\\<lambda>(n,T) acc . mk_all n T acc) l t\""], ["", "lemma mk_all_list_empty[simp]: \"mk_all_list [] t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_all_list [] t = t", "by (simp add: mk_all_list_def)"], ["", "(* Again, need correct typ here *)"], ["", "fun is_all :: \"term \\<Rightarrow> bool\" where\n  \"is_all (Ct all S $ Abs T t) = (all= STR ''Pure.all'' \\<and> S=(T\\<rightarrow>propT)\\<rightarrow>propT)\"\n| \"is_all _ = False\""], ["", "lemma strip_all_single_var_is_all: \"strip_all_single_var t \\<noteq> None \\<longleftrightarrow> is_all t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (strip_all_single_var t \\<noteq> None) = is_all t", "apply (cases t)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       t = Ct x11 x12 \\<Longrightarrow>\n       (strip_all_single_var t \\<noteq> None) = is_all t\n 2. \\<And>x21 x22.\n       t = Fv x21 x22 \\<Longrightarrow>\n       (strip_all_single_var t \\<noteq> None) = is_all t\n 3. \\<And>x3.\n       t = Bv x3 \\<Longrightarrow>\n       (strip_all_single_var t \\<noteq> None) = is_all t\n 4. \\<And>x41 x42.\n       t = Abs x41 x42 \\<Longrightarrow>\n       (strip_all_single_var t \\<noteq> None) = is_all t\n 5. \\<And>x51 x52.\n       t = x51 $ x52 \\<Longrightarrow>\n       (strip_all_single_var t \\<noteq> None) = is_all t", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x51 x52.\n       t = x51 $ x52 \\<Longrightarrow>\n       (\\<exists>y. strip_all_single_var (x51 $ x52) = Some y) =\n       is_all (x51 $ x52)", "subgoal for f u"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = f $ u \\<Longrightarrow>\n    (\\<exists>y. strip_all_single_var (f $ u) = Some y) = is_all (f $ u)", "apply (cases f; cases u)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>x11 x12 x11a x12a.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = Ct x11a x12a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             strip_all_single_var (f $ u) = Some y) =\n                         is_all (f $ u)\n 2. \\<And>x11 x12 x21 x22.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             strip_all_single_var (f $ u) = Some y) =\n                         is_all (f $ u)\n 3. \\<And>x11 x12 x3.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = Bv x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             strip_all_single_var (f $ u) = Some y) =\n                         is_all (f $ u)\n 4. \\<And>x11 x12 x41 x42.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             strip_all_single_var (f $ u) = Some y) =\n                         is_all (f $ u)\n 5. \\<And>x11 x12 x51 x52.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             strip_all_single_var (f $ u) = Some y) =\n                         is_all (f $ u)\n 6. \\<And>x21 x22 x11 x12.\n       \\<lbrakk>t = f $ u; f = Fv x21 x22; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             strip_all_single_var (f $ u) = Some y) =\n                         is_all (f $ u)\n 7. \\<And>x21 x22 x21a x22a.\n       \\<lbrakk>t = f $ u; f = Fv x21 x22; u = Fv x21a x22a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             strip_all_single_var (f $ u) = Some y) =\n                         is_all (f $ u)\n 8. \\<And>x21 x22 x3.\n       \\<lbrakk>t = f $ u; f = Fv x21 x22; u = Bv x3\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             strip_all_single_var (f $ u) = Some y) =\n                         is_all (f $ u)\n 9. \\<And>x21 x22 x41 x42.\n       \\<lbrakk>t = f $ u; f = Fv x21 x22; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             strip_all_single_var (f $ u) = Some y) =\n                         is_all (f $ u)\n 10. \\<And>x21 x22 x51 x52.\n        \\<lbrakk>t = f $ u; f = Fv x21 x22; u = x51 $ x52\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>y.\n                              strip_all_single_var (f $ u) = Some y) =\n                          is_all (f $ u)\nA total of 25 subgoals...", "by (auto elim: is_all.elims split: if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"is_all t \\<Longrightarrow> hd (strip_all_vars t) = the (strip_all_single_var t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_all t \\<Longrightarrow>\n    hd (strip_all_vars t) = the (strip_all_single_var t)", "by (auto elim: is_all.elims)"], ["", "lemma strip_all_body_single_simp[simp]: \"strip_all_body (strip_all_single_body t) = strip_all_body t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_all_body (strip_all_single_body t) = strip_all_body t", "by (induction t rule: strip_all_body.induct) auto"], ["", "lemma strip_all_body_single_simp'[simp]: \"strip_all_single_body (strip_all_body t) = strip_all_body t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_all_single_body (strip_all_body t) = strip_all_body t", "by (induction t rule: strip_all_body.induct) auto"], ["", "lemma strip_all_vars_step: \n  \"strip_all_single_var t = Some T \\<Longrightarrow> T # strip_all_vars (strip_all_single_body t) = strip_all_vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_all_single_var t = Some T \\<Longrightarrow>\n    T # strip_all_vars (strip_all_single_body t) = strip_all_vars t", "by (induction t arbitrary: T rule: strip_all_vars.induct) (auto split: if_splits)"], ["", "lemma is_all_iff_strip_all_vars_not_empty: \"is_all t \\<longleftrightarrow> strip_all_vars t \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_all t = (strip_all_vars t \\<noteq> [])", "apply (cases t)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x11 x12.\n       t = Ct x11 x12 \\<Longrightarrow>\n       is_all t = (strip_all_vars t \\<noteq> [])\n 2. \\<And>x21 x22.\n       t = Fv x21 x22 \\<Longrightarrow>\n       is_all t = (strip_all_vars t \\<noteq> [])\n 3. \\<And>x3.\n       t = Bv x3 \\<Longrightarrow> is_all t = (strip_all_vars t \\<noteq> [])\n 4. \\<And>x41 x42.\n       t = Abs x41 x42 \\<Longrightarrow>\n       is_all t = (strip_all_vars t \\<noteq> [])\n 5. \\<And>x51 x52.\n       t = x51 $ x52 \\<Longrightarrow>\n       is_all t = (strip_all_vars t \\<noteq> [])", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x51 x52.\n       t = x51 $ x52 \\<Longrightarrow>\n       is_all (x51 $ x52) = (strip_all_vars (x51 $ x52) \\<noteq> [])", "subgoal for f u"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = f $ u \\<Longrightarrow>\n    is_all (f $ u) = (strip_all_vars (f $ u) \\<noteq> [])", "apply (cases f; cases u)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>x11 x12 x11a x12a.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = Ct x11a x12a\\<rbrakk>\n       \\<Longrightarrow> is_all (f $ u) =\n                         (strip_all_vars (f $ u) \\<noteq> [])\n 2. \\<And>x11 x12 x21 x22.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = Fv x21 x22\\<rbrakk>\n       \\<Longrightarrow> is_all (f $ u) =\n                         (strip_all_vars (f $ u) \\<noteq> [])\n 3. \\<And>x11 x12 x3.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = Bv x3\\<rbrakk>\n       \\<Longrightarrow> is_all (f $ u) =\n                         (strip_all_vars (f $ u) \\<noteq> [])\n 4. \\<And>x11 x12 x41 x42.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> is_all (f $ u) =\n                         (strip_all_vars (f $ u) \\<noteq> [])\n 5. \\<And>x11 x12 x51 x52.\n       \\<lbrakk>t = f $ u; f = Ct x11 x12; u = x51 $ x52\\<rbrakk>\n       \\<Longrightarrow> is_all (f $ u) =\n                         (strip_all_vars (f $ u) \\<noteq> [])\n 6. \\<And>x21 x22 x11 x12.\n       \\<lbrakk>t = f $ u; f = Fv x21 x22; u = Ct x11 x12\\<rbrakk>\n       \\<Longrightarrow> is_all (f $ u) =\n                         (strip_all_vars (f $ u) \\<noteq> [])\n 7. \\<And>x21 x22 x21a x22a.\n       \\<lbrakk>t = f $ u; f = Fv x21 x22; u = Fv x21a x22a\\<rbrakk>\n       \\<Longrightarrow> is_all (f $ u) =\n                         (strip_all_vars (f $ u) \\<noteq> [])\n 8. \\<And>x21 x22 x3.\n       \\<lbrakk>t = f $ u; f = Fv x21 x22; u = Bv x3\\<rbrakk>\n       \\<Longrightarrow> is_all (f $ u) =\n                         (strip_all_vars (f $ u) \\<noteq> [])\n 9. \\<And>x21 x22 x41 x42.\n       \\<lbrakk>t = f $ u; f = Fv x21 x22; u = Abs x41 x42\\<rbrakk>\n       \\<Longrightarrow> is_all (f $ u) =\n                         (strip_all_vars (f $ u) \\<noteq> [])\n 10. \\<And>x21 x22 x51 x52.\n        \\<lbrakk>t = f $ u; f = Fv x21 x22; u = x51 $ x52\\<rbrakk>\n        \\<Longrightarrow> is_all (f $ u) =\n                          (strip_all_vars (f $ u) \\<noteq> [])\nA total of 25 subgoals...", "by (auto elim: strip_all_vars.elims is_all.elims split: if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma strip_all_vars_bind_fv: \n  \"strip_all_vars (bind_fv2 v lev t) = (strip_all_vars t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_all_vars (bind_fv2 v lev t) = strip_all_vars t", "by (induction t arbitrary: lev rule: strip_all_vars.induct) auto"], ["", "lemma strip_all_vars_mk_all[simp]: \"strip_all_vars (mk_all s ty t) = ty # strip_all_vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_all_vars (mk_all s ty t) = ty # strip_all_vars t", "using bind_fv_def strip_all_vars_bind_fv typ_of_def"], ["proof (prove)\nusing this:\n  bind_fv ?vT ?t = bind_fv2 ?vT 0 ?t\n  strip_all_vars (bind_fv2 ?v ?lev ?t) = strip_all_vars ?t\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. strip_all_vars (mk_all s ty t) = ty # strip_all_vars t", "by auto"], ["", "lemma strip_all_vars_mk_all_list:\n  \"\\<not>is_all t \\<Longrightarrow> strip_all_vars (mk_all_list l t) = rev (map snd l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_all t \\<Longrightarrow>\n    strip_all_vars (mk_all_list l t) = rev (map snd l)", "proof (induction l rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> is_all t \\<Longrightarrow>\n    strip_all_vars (mk_all_list [] t) = rev (map snd [])\n 2. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "case Nil"], ["proof (state)\nthis:\n  \\<not> is_all t\n\ngoal (2 subgoals):\n 1. \\<not> is_all t \\<Longrightarrow>\n    strip_all_vars (mk_all_list [] t) = rev (map snd [])\n 2. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "then"], ["proof (chain)\npicking this:\n  \\<not> is_all t", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> is_all t\n\ngoal (1 subgoal):\n 1. strip_all_vars (mk_all_list [] t) = rev (map snd [])", "using is_all_iff_strip_all_vars_not_empty"], ["proof (prove)\nusing this:\n  \\<not> is_all t\n  is_all ?t = (strip_all_vars ?t \\<noteq> [])\n\ngoal (1 subgoal):\n 1. strip_all_vars (mk_all_list [] t) = rev (map snd [])", "by simp"], ["proof (state)\nthis:\n  strip_all_vars (mk_all_list [] t) = rev (map snd [])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "case (snoc v vs)"], ["proof (state)\nthis:\n  \\<not> is_all t \\<Longrightarrow>\n  strip_all_vars (mk_all_list vs t) = rev (map snd vs)\n  \\<not> is_all t\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "hence I: \"strip_all_vars (mk_all_list vs t) = rev (map snd vs)\""], ["proof (prove)\nusing this:\n  \\<not> is_all t \\<Longrightarrow>\n  strip_all_vars (mk_all_list vs t) = rev (map snd vs)\n  \\<not> is_all t\n\ngoal (1 subgoal):\n 1. strip_all_vars (mk_all_list vs t) = rev (map snd vs)", "by simp"], ["proof (state)\nthis:\n  strip_all_vars (mk_all_list vs t) = rev (map snd vs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "obtain s ty where v: \"v = (s,ty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s ty. v = (s, ty) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  v = (s, ty)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "have \"strip_all_vars (mk_all_list (vs @ [v]) t) \n    = strip_all_vars (mk_all s ty (mk_all_list vs t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_all_vars (mk_all_list (vs @ [v]) t) =\n    strip_all_vars (mk_all s ty (mk_all_list vs t))", "by (auto simp add: mk_all_list_def v)"], ["proof (state)\nthis:\n  strip_all_vars (mk_all_list (vs @ [v]) t) =\n  strip_all_vars (mk_all s ty (mk_all_list vs t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "also"], ["proof (state)\nthis:\n  strip_all_vars (mk_all_list (vs @ [v]) t) =\n  strip_all_vars (mk_all s ty (mk_all_list vs t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "have \"\\<dots> = ty # strip_all_vars (mk_all_list vs t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_all_vars (mk_all s ty (mk_all_list vs t)) =\n    ty # strip_all_vars (mk_all_list vs t)", "using strip_all_vars_mk_all[of ty s \"mk_all_list vs t\"]"], ["proof (prove)\nusing this:\n  strip_all_vars (mk_all s ty (mk_all_list vs t)) =\n  ty # strip_all_vars (mk_all_list vs t)\n\ngoal (1 subgoal):\n 1. strip_all_vars (mk_all s ty (mk_all_list vs t)) =\n    ty # strip_all_vars (mk_all_list vs t)", "by blast"], ["proof (state)\nthis:\n  strip_all_vars (mk_all s ty (mk_all_list vs t)) =\n  ty # strip_all_vars (mk_all_list vs t)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "also"], ["proof (state)\nthis:\n  strip_all_vars (mk_all s ty (mk_all_list vs t)) =\n  ty # strip_all_vars (mk_all_list vs t)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "have \"\\<dots> = ty # rev (map snd vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ty # strip_all_vars (mk_all_list vs t) = ty # rev (map snd vs)", "by (simp add: I)"], ["proof (state)\nthis:\n  ty # strip_all_vars (mk_all_list vs t) = ty # rev (map snd vs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "also"], ["proof (state)\nthis:\n  ty # strip_all_vars (mk_all_list vs t) = ty # rev (map snd vs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "have \"\\<dots> = rev (map snd (vs @ [v]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ty # rev (map snd vs) = rev (map snd (vs @ [v]))", "using v"], ["proof (prove)\nusing this:\n  v = (s, ty)\n\ngoal (1 subgoal):\n 1. ty # rev (map snd vs) = rev (map snd (vs @ [v]))", "by simp"], ["proof (state)\nthis:\n  ty # rev (map snd vs) = rev (map snd (vs @ [v]))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<not> is_all t \\<Longrightarrow>\n                strip_all_vars (mk_all_list xs t) = rev (map snd xs);\n        \\<not> is_all t\\<rbrakk>\n       \\<Longrightarrow> strip_all_vars (mk_all_list (xs @ [x]) t) =\n                         rev (map snd (xs @ [x]))", "finally"], ["proof (chain)\npicking this:\n  strip_all_vars (mk_all_list (vs @ [v]) t) = rev (map snd (vs @ [v]))", "show ?case"], ["proof (prove)\nusing this:\n  strip_all_vars (mk_all_list (vs @ [v]) t) = rev (map snd (vs @ [v]))\n\ngoal (1 subgoal):\n 1. strip_all_vars (mk_all_list (vs @ [v]) t) = rev (map snd (vs @ [v]))", "."], ["proof (state)\nthis:\n  strip_all_vars (mk_all_list (vs @ [v]) t) = rev (map snd (vs @ [v]))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Move up *)"], ["", "lemma subst_bv_no_loose_unchanged:\n  assumes \"\\<And>x . x \\<ge> lev \\<Longrightarrow> \\<not> loose_bvar1 t x\"\n  assumes \"is_variable v\"\n  shows \"(subst_bv1 t lev v) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv1 t lev v = t", "using assms"], ["proof (prove)\nusing this:\n  lev \\<le> ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n  is_variable v\n\ngoal (1 subgoal):\n 1. subst_bv1 t lev v = t", "proof (induction t arbitrary: lev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Ct x1 x2) lev v = Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Fv x1 x2) lev v = Fv x1 x2\n 3. \\<And>x lev.\n       \\<lbrakk>\\<And>xa.\n                   lev \\<le> xa \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Bv x) xa;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Bv x) lev v = Bv x\n 4. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t lev v = t;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Abs x1 t) lev v = Abs x1 t\n 5. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t1 lev v = t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev \\<le> x \\<Longrightarrow>\n                       \\<not> loose_bvar1 t2 x;\n            is_variable v\\<rbrakk>\n           \\<Longrightarrow> subst_bv1 t2 lev v = t2;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (t1 $ t2) lev v = t1 $ t2", "case (Bv x)"], ["proof (state)\nthis:\n  lev \\<le> ?x \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) ?x\n  is_variable v\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Ct x1 x2) lev v = Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Fv x1 x2) lev v = Fv x1 x2\n 3. \\<And>x lev.\n       \\<lbrakk>\\<And>xa.\n                   lev \\<le> xa \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Bv x) xa;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Bv x) lev v = Bv x\n 4. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t lev v = t;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Abs x1 t) lev v = Abs x1 t\n 5. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t1 lev v = t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev \\<le> x \\<Longrightarrow>\n                       \\<not> loose_bvar1 t2 x;\n            is_variable v\\<rbrakk>\n           \\<Longrightarrow> subst_bv1 t2 lev v = t2;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (t1 $ t2) lev v = t1 $ t2", "then"], ["proof (chain)\npicking this:\n  lev \\<le> ?x \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) ?x\n  is_variable v", "show ?case"], ["proof (prove)\nusing this:\n  lev \\<le> ?x \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) ?x\n  is_variable v\n\ngoal (1 subgoal):\n 1. subst_bv1 (Bv x) lev v = Bv x", "using loose_bvar_iff_exist_loose_bvar1 no_loose_bvar_imp_no_subst_bv1"], ["proof (prove)\nusing this:\n  lev \\<le> ?x \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) ?x\n  is_variable v\n  loose_bvar ?t ?lev = (\\<exists>lev'\\<ge>?lev. loose_bvar1 ?t lev')\n  \\<not> loose_bvar ?t ?lev \\<Longrightarrow> subst_bv1 ?t ?lev ?u = ?t\n\ngoal (1 subgoal):\n 1. subst_bv1 (Bv x) lev v = Bv x", "by presburger"], ["proof (state)\nthis:\n  subst_bv1 (Bv x) lev v = Bv x\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Ct x1 x2) lev v = Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Fv x1 x2) lev v = Fv x1 x2\n 3. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t lev v = t;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Abs x1 t) lev v = Abs x1 t\n 4. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t1 lev v = t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev \\<le> x \\<Longrightarrow>\n                       \\<not> loose_bvar1 t2 x;\n            is_variable v\\<rbrakk>\n           \\<Longrightarrow> subst_bv1 t2 lev v = t2;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (t1 $ t2) lev v = t1 $ t2", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Ct x1 x2) lev v = Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Fv x1 x2) lev v = Fv x1 x2\n 3. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t lev v = t;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Abs x1 t) lev v = Abs x1 t\n 4. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t1 lev v = t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev \\<le> x \\<Longrightarrow>\n                       \\<not> loose_bvar1 t2 x;\n            is_variable v\\<rbrakk>\n           \\<Longrightarrow> subst_bv1 t2 lev v = t2;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (t1 $ t2) lev v = t1 $ t2", "case (Abs T t)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 t x;\n   is_variable v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 t ?lev v = t\n  lev \\<le> ?x \\<Longrightarrow> \\<not> loose_bvar1 (Abs T t) ?x\n  is_variable v\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Ct x1 x2) lev v = Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Fv x1 x2) lev v = Fv x1 x2\n 3. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t lev v = t;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Abs x1 t) lev v = Abs x1 t\n 4. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t1 lev v = t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev \\<le> x \\<Longrightarrow>\n                       \\<not> loose_bvar1 t2 x;\n            is_variable v\\<rbrakk>\n           \\<Longrightarrow> subst_bv1 t2 lev v = t2;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (t1 $ t2) lev v = t1 $ t2", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 t x;\n   is_variable v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 t ?lev v = t\n  lev \\<le> ?x \\<Longrightarrow> \\<not> loose_bvar1 (Abs T t) ?x\n  is_variable v", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 t x;\n   is_variable v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 t ?lev v = t\n  lev \\<le> ?x \\<Longrightarrow> \\<not> loose_bvar1 (Abs T t) ?x\n  is_variable v\n\ngoal (1 subgoal):\n 1. subst_bv1 (Abs T t) lev v = Abs T t", "using loose_bvar_iff_exist_loose_bvar1 no_loose_bvar_imp_no_subst_bv1"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 t x;\n   is_variable v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 t ?lev v = t\n  lev \\<le> ?x \\<Longrightarrow> \\<not> loose_bvar1 (Abs T t) ?x\n  is_variable v\n  loose_bvar ?t ?lev = (\\<exists>lev'\\<ge>?lev. loose_bvar1 ?t lev')\n  \\<not> loose_bvar ?t ?lev \\<Longrightarrow> subst_bv1 ?t ?lev ?u = ?t\n\ngoal (1 subgoal):\n 1. subst_bv1 (Abs T t) lev v = Abs T t", "by presburger"], ["proof (state)\nthis:\n  subst_bv1 (Abs T t) lev v = Abs T t\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Ct x1 x2) lev v = Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev \\<le> x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (Fv x1 x2) lev v = Fv x1 x2\n 3. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev \\<le> x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    is_variable v\\<rbrakk>\n                   \\<Longrightarrow> subst_bv1 t1 lev v = t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev \\<le> x \\<Longrightarrow>\n                       \\<not> loose_bvar1 t2 x;\n            is_variable v\\<rbrakk>\n           \\<Longrightarrow> subst_bv1 t2 lev v = t2;\n        \\<And>x.\n           lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        is_variable v\\<rbrakk>\n       \\<Longrightarrow> subst_bv1 (t1 $ t2) lev v = t1 $ t2", "qed auto"], ["", "(* Should state those in terms \"of \\<in> fv\", occs is a relict *)"], ["", "lemma bind_fv2_no_occs_unchanged:\n  assumes \"\\<not> occs (case_prod Fv v) t\"\n  shows \"(bind_fv2 v lev t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 v lev t = t", "using assms"], ["proof (prove)\nusing this:\n  \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa) t\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev t = t", "by (induction t arbitrary: lev) auto"], ["", "lemma bind_fv2_subst_bv1_cancel:\n  assumes \"\\<And>x . x > lev \\<Longrightarrow> \\<not> loose_bvar1 t x\"\n  assumes \"\\<not> occs (case_prod Fv v)  t\"\n  shows \"bind_fv2 v lev (subst_bv1 t lev (case_prod Fv v)) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t", "using assms"], ["proof (prove)\nusing this:\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n  \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa) t\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t", "proof (induction t arbitrary: lev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>x lev.\n       \\<lbrakk>\\<And>xa.\n                   lev < xa \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) xa;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Bv x)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Bv x) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Bv x\n 4. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Abs x1 t) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Abs x1 t\n 5. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "case (Bv x)"], ["proof (state)\nthis:\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (Bv x)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>x lev.\n       \\<lbrakk>\\<And>xa.\n                   lev < xa \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) xa;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Bv x)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Bv x) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Bv x\n 4. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Abs x1 t) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Abs x1 t\n 5. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "then"], ["proof (chain)\npicking this:\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (Bv x)", "show ?case"], ["proof (prove)\nusing this:\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (Bv x)\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (Bv x) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    Bv x", "using linorder_neqE_nat"], ["proof (prove)\nusing this:\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (Bv x) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (Bv x)\n  \\<lbrakk>?x \\<noteq> ?y; ?x < ?y \\<Longrightarrow> ?R;\n   ?y < ?x \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (Bv x) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    Bv x", "by (auto split: prod.splits simp add: is_variable_imp_incr_boundvars_unchganged)"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 (Bv x) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n  Bv x\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Abs x1 t) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Abs x1 t\n 4. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Abs x1 t) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Abs x1 t\n 4. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "case (Abs T t)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (Abs T t) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (Abs T t)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Abs x1 t) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Abs x1 t\n 4. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "hence \"bind_fv2 v (lev+1) (subst_bv1 t (lev+1) (case_prod Fv v)) = t\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (Abs T t) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (Abs T t)\n\ngoal (1 subgoal):\n 1. bind_fv2 v (lev + 1)\n     (subst_bv1 t (lev + 1) (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t", "by (auto elim: Suc_lessE)"], ["proof (state)\nthis:\n  bind_fv2 v (lev + 1)\n   (subst_bv1 t (lev + 1) (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>x1 t lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (Abs x1 t) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Abs x1 t) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Abs x1 t\n 4. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "then"], ["proof (chain)\npicking this:\n  bind_fv2 v (lev + 1)\n   (subst_bv1 t (lev + 1) (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t", "show ?case"], ["proof (prove)\nusing this:\n  bind_fv2 v (lev + 1)\n   (subst_bv1 t (lev + 1) (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (Abs T t) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    Abs T t", "by simp"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 (Abs T t) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n  Abs T t\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "(* This proof contains so much duplication it makes me vomit... \n    Got even uglier after translation\n  *)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "case (App t1 t2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t1 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t1\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t1 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t1\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t2 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t2\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n\ngoal (3 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2\n 3. \\<And>t1 t2 lev.\n       \\<lbrakk>\\<And>lev.\n                   \\<lbrakk>\\<And>x.\n                               lev < x \\<Longrightarrow>\n                               \\<not> loose_bvar1 t1 x;\n                    \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                            t1\\<rbrakk>\n                   \\<Longrightarrow> bind_fv2 v lev\n(subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                                     t1;\n        \\<And>lev.\n           \\<lbrakk>\\<And>x.\n                       lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n            \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                    t2\\<rbrakk>\n           \\<Longrightarrow> bind_fv2 v lev\n                              (subst_bv1 t2 lev\n                                (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                             t2;\n        \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (t1 $ t2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         t1 $ t2", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t1 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t1\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t1 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t1\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t2 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t2\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t1 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t1\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t1 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t1\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t2 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t2\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "proof(cases \"loose_bvar1 t1 lev\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2\n 2. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     \\<not> loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "case True"], ["proof (state)\nthis:\n  loose_bvar1 t1 lev\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2\n 2. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     \\<not> loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "hence I1: \"bind_fv2 v lev (subst_bv1 t1 lev (case_prod Fv v)) = t1\""], ["proof (prove)\nusing this:\n  loose_bvar1 t1 lev\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t1", "using App"], ["proof (prove)\nusing this:\n  loose_bvar1 t1 lev\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t1 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t1\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t1 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t1\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t2 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t2\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t1", "by auto"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2\n 2. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     \\<not> loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "then"], ["proof (chain)\npicking this:\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1", "show ?thesis"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "proof(cases \"loose_bvar1 t2 lev\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2\n 2. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "case True"], ["proof (state)\nthis:\n  loose_bvar1 t2 lev\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2\n 2. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "hence \"bind_fv2 v lev (subst_bv1 t2 lev (case_prod Fv v)) = t2\""], ["proof (prove)\nusing this:\n  loose_bvar1 t2 lev\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "using App"], ["proof (prove)\nusing this:\n  loose_bvar1 t2 lev\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t1 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t1\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t1 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t1\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t2 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t2\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "by auto"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2\n 2. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "then"], ["proof (chain)\npicking this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2", "show ?thesis"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "using I1 App.prems is_variable.elims(2)"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<lbrakk>is_variable ?x;\n   \\<And>uu_ uv_. ?x = Fv uu_ uv_ \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "by auto"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n  t1 $ t2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "case False"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 t2 lev\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "hence \"bind_fv2 v lev (subst_bv1 t2 lev  (case_prod Fv v)) = t2\""], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 t2 lev\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t2 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "have \"subst_bv1 t2 lev  (case_prod Fv v) = t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2", "using subst_bv_no_loose_unchanged"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   is_variable ?v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 ?t ?lev ?v = ?t\n\ngoal (1 subgoal):\n 1. subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2", "using App.prems(1-2) False assms le_neq_implies_less loose_bvar1.simps(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   is_variable ?v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 ?t ?lev ?v = ?t\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<not> loose_bvar1 t2 lev\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n  \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa) t\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n  loose_bvar1 (?t $ ?u) ?k = (loose_bvar1 ?t ?k \\<or> loose_bvar1 ?u ?k)\n\ngoal (1 subgoal):\n 1. subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2", "by (metis loose_bvar_iff_exist_loose_bvar1 no_loose_bvar_imp_no_subst_bv1)"], ["proof (state)\nthis:\n  subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t2 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "moreover"], ["proof (state)\nthis:\n  subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t2 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "have \"bind_fv2 v lev t2 = t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 v lev t2 = t2", "using App.prems(2) bind_fv2_no_occs_unchanged"], ["proof (prove)\nusing this:\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<not> occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa)\n          ?t \\<Longrightarrow>\n  bind_fv2 ?v ?lev ?t = ?t\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev t2 = t2", "using App.prems(2) bind_fv2_changed' exists_subterm'.simps(1) \n            exists_subterm_iff_exists_subterm'"], ["proof (prove)\nusing this:\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<not> occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa)\n          ?t \\<Longrightarrow>\n  bind_fv2 ?v ?lev ?t = ?t\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  bind_fv2 ?v ?lev ?tm \\<noteq> ?tm \\<Longrightarrow>\n  occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa) ?tm\n  exists_subterm' ?P (?t $ ?u) =\n  (?P (?t $ ?u) \\<or> exists_subterm' ?P ?t \\<or> exists_subterm' ?P ?u)\n  exists_subterm ?P ?t = exists_subterm' ?P ?t\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev t2 = t2", "by blast"], ["proof (state)\nthis:\n  bind_fv2 v lev t2 = t2\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t2 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "ultimately"], ["proof (chain)\npicking this:\n  subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2\n  bind_fv2 v lev t2 = t2", "show ?thesis"], ["proof (prove)\nusing this:\n  subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2\n  bind_fv2 v lev t2 = t2\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "by simp"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "then"], ["proof (chain)\npicking this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2", "show ?thesis"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "using I1 App.prems is_variable.elims(2)"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<lbrakk>is_variable ?x;\n   \\<And>uu_ uv_. ?x = Fv uu_ uv_ \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "by auto"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n  t1 $ t2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n  t1 $ t2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     \\<not> loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     \\<not> loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "case False"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 t1 lev\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     \\<not> loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "hence I1: \"bind_fv2 v lev (subst_bv1 t1 lev (case_prod Fv v)) = t1\""], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 t1 lev\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t1 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t1", "have \"subst_bv1 t1 lev (case_prod Fv v) = t1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t1", "using subst_bv_no_loose_unchanged"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   is_variable ?v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 ?t ?lev ?v = ?t\n\ngoal (1 subgoal):\n 1. subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t1", "using App.prems(1-2) False le_neq_implies_less loose_bvar1.simps(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   is_variable ?v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 ?t ?lev ?v = ?t\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<not> loose_bvar1 t1 lev\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n  loose_bvar1 (?t $ ?u) ?k = (loose_bvar1 ?t ?k \\<or> loose_bvar1 ?u ?k)\n\ngoal (1 subgoal):\n 1. subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t1", "by (metis loose_bvar_iff_exist_loose_bvar1 no_loose_bvar_imp_no_subst_bv1)"], ["proof (state)\nthis:\n  subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t1\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t1 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t1", "moreover"], ["proof (state)\nthis:\n  subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t1\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t1 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t1", "have \"bind_fv2 v lev t1 = t1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 v lev t1 = t1", "using App.prems(2) bind_fv2_no_occs_unchanged"], ["proof (prove)\nusing this:\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<not> occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa)\n          ?t \\<Longrightarrow>\n  bind_fv2 ?v ?lev ?t = ?t\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev t1 = t1", "by auto"], ["proof (state)\nthis:\n  bind_fv2 v lev t1 = t1\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t1 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t1", "ultimately"], ["proof (chain)\npicking this:\n  subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t1\n  bind_fv2 v lev t1 = t1", "show ?thesis"], ["proof (prove)\nusing this:\n  subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t1\n  bind_fv2 v lev t1 = t1\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t1", "by simp"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>lev.\n                \\<lbrakk>\\<And>x.\n                            lev < x \\<Longrightarrow>\n                            \\<not> loose_bvar1 t1 x;\n                 \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b)\n                         t1\\<rbrakk>\n                \\<Longrightarrow> bind_fv2 v lev\n                                   (subst_bv1 t1 lev\n                                     (case v of\n(a, b) \\<Rightarrow> Fv a b)) =\n                                  t1;\n     \\<And>lev.\n        \\<lbrakk>\\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n         \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n        \\<Longrightarrow> bind_fv2 v lev\n                           (subst_bv1 t2 lev\n                             (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                          t2;\n     \\<And>x. lev < x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) x;\n     \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2);\n     \\<not> loose_bvar1 t1 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "then"], ["proof (chain)\npicking this:\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1", "show ?thesis"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "proof(cases \"loose_bvar1 t2 lev\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2\n 2. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "case True"], ["proof (state)\nthis:\n  loose_bvar1 t2 lev\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2\n 2. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "hence \"bind_fv2 v lev (subst_bv1 t2 lev (case_prod Fv v)) = t2\""], ["proof (prove)\nusing this:\n  loose_bvar1 t2 lev\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "using App"], ["proof (prove)\nusing this:\n  loose_bvar1 t2 lev\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t1 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t1\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t1 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t1\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 t2 x;\n   \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) t2\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 v ?lev\n                     (subst_bv1 t2 ?lev\n                       (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                    t2\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "by auto"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2\n 2. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "then"], ["proof (chain)\npicking this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2", "show ?thesis"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "using I1 App.prems is_variable.elims(2)"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<lbrakk>is_variable ?x;\n   \\<And>uu_ uv_. ?x = Fv uu_ uv_ \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "by auto"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n  t1 $ t2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "case False"], ["proof (state)\nthis:\n  \\<not> loose_bvar1 t2 lev\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "hence \"bind_fv2 v lev (subst_bv1 t2 lev (case_prod Fv v)) = t2\""], ["proof (prove)\nusing this:\n  \\<not> loose_bvar1 t2 lev\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t2 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "have \"subst_bv1 t2 lev (case_prod Fv v) = t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2", "using subst_bv_no_loose_unchanged"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   is_variable ?v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 ?t ?lev ?v = ?t\n\ngoal (1 subgoal):\n 1. subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2", "using App.prems(1-2) False assms le_neq_implies_less loose_bvar1.simps(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev \\<le> x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   is_variable ?v\\<rbrakk>\n  \\<Longrightarrow> subst_bv1 ?t ?lev ?v = ?t\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<not> loose_bvar1 t2 lev\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n  \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa) t\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n  loose_bvar1 (?t $ ?u) ?k = (loose_bvar1 ?t ?k \\<or> loose_bvar1 ?u ?k)\n\ngoal (1 subgoal):\n 1. subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2", "by (metis loose_bvar_iff_exist_loose_bvar1 no_loose_bvar_imp_no_subst_bv1)"], ["proof (state)\nthis:\n  subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t2 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "moreover"], ["proof (state)\nthis:\n  subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t2 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "have \"bind_fv2 v lev t2 = t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 v lev t2 = t2", "using App.prems(2) bind_fv2_no_occs_unchanged"], ["proof (prove)\nusing this:\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<not> occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa)\n          ?t \\<Longrightarrow>\n  bind_fv2 ?v ?lev ?t = ?t\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev t2 = t2", "by auto"], ["proof (state)\nthis:\n  bind_fv2 v lev t2 = t2\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar1 t2 lev \\<Longrightarrow>\n    bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "ultimately"], ["proof (chain)\npicking this:\n  subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2\n  bind_fv2 v lev t2 = t2", "show ?thesis"], ["proof (prove)\nusing this:\n  subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa) = t2\n  bind_fv2 v lev t2 = t2\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n    t2", "by simp"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bind_fv2 v lev\n              (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n             t1;\n     \\<not> loose_bvar1 t2 lev\\<rbrakk>\n    \\<Longrightarrow> bind_fv2 v lev\n                       (subst_bv1 (t1 $ t2) lev\n                         (case v of (a, b) \\<Rightarrow> Fv a b)) =\n                      t1 $ t2", "then"], ["proof (chain)\npicking this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2", "show ?thesis"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "using I1 App.prems is_variable.elims(2)"], ["proof (prove)\nusing this:\n  bind_fv2 v lev\n   (subst_bv1 t2 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t2\n  bind_fv2 v lev\n   (subst_bv1 t1 lev (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n  t1\n  lev < ?x \\<Longrightarrow> \\<not> loose_bvar1 (t1 $ t2) ?x\n  \\<not> occs (case v of (a, b) \\<Rightarrow> Fv a b) (t1 $ t2)\n  \\<lbrakk>is_variable ?x;\n   \\<And>uu_ uv_. ?x = Fv uu_ uv_ \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. bind_fv2 v lev\n     (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n    t1 $ t2", "by auto"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n  t1 $ t2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n  t1 $ t2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bind_fv2 v lev\n   (subst_bv1 (t1 $ t2) lev (case v of (a, b) \\<Rightarrow> Fv a b)) =\n  t1 $ t2\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Ct x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Ct x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Ct x1 x2\n 2. \\<And>x1 x2 lev.\n       \\<lbrakk>\\<And>x.\n                   lev < x \\<Longrightarrow>\n                   \\<not> loose_bvar1 (Fv x1 x2) x;\n        \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa)\n                (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> bind_fv2 v lev\n                          (subst_bv1 (Fv x1 x2) lev\n                            (case v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                         Fv x1 x2", "qed auto"], ["", "lemma bind_fv_subst_bv_cancel:\n  assumes \"\\<And>x . x > 0 \\<Longrightarrow> \\<not> loose_bvar1 t x\"\n  assumes \"\\<not> occs (case_prod Fv v) t\"\n  shows \"bind_fv v (subst_bv (case_prod Fv v) t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv v (subst_bv (case v of (x, xa) \\<Rightarrow> Fv x xa) t) = t", "using bind_fv2_subst_bv1_cancel bind_fv_def assms subst_bv_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   \\<not> occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa) ?t\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 ?v ?lev\n                     (subst_bv1 ?t ?lev\n                       (case ?v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                    ?t\n  bind_fv ?vT ?t = bind_fv2 ?vT 0 ?t\n  0 < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n  \\<not> occs (case v of (x, xa) \\<Rightarrow> Fv x xa) t\n  subst_bv ?u ?t \\<equiv> subst_bv1 ?t 0 ?u\n\ngoal (1 subgoal):\n 1. bind_fv v (subst_bv (case v of (x, xa) \\<Rightarrow> Fv x xa) t) = t", "by auto"], ["", "lemma not_loose_bvar_imp_not_loose_bvar1_all_greater: \"\\<not> loose_bvar t lev \\<Longrightarrow> x>lev \\<Longrightarrow> \\<not> loose_bvar1 t x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> loose_bvar t lev; lev < x\\<rbrakk>\n    \\<Longrightarrow> \\<not> loose_bvar1 t x", "by (simp add: loose_bvar_iff_exist_loose_bvar1)"], ["", "lemma mk_all'_subst_bv_strip_all_single_body_cancel:\n  assumes \"strip_all_single_var t = Some T\"\n  assumes \"is_closed t\"\n  assumes \"(name, T) \\<notin> fv t\"\n  shows \"mk_all name T (subst_bv (Fv name T) (strip_all_single_body t) ) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "from assms(1)"], ["proof (chain)\npicking this:\n  strip_all_single_var t = Some T", "obtain t' where t': \"(Ct STR ''Pure.all'' ((T \\<rightarrow> propT) \\<rightarrow> propT) $ Abs T t') = t\""], ["proof (prove)\nusing this:\n  strip_all_single_var t = Some T\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        Ct STR ''Pure.all'' ((T \\<rightarrow> propT) \\<rightarrow> propT) $\n        Abs T t' =\n        t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto elim!: strip_all_single_var.elims \n        simp add: bind_eq_Some_conv typ_of_def split: if_splits option.splits if_splits)"], ["proof (state)\nthis:\n  Ct STR ''Pure.all'' ((T \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs T t' =\n  t\n\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "hence s: \"strip_all_single_body t = t'\""], ["proof (prove)\nusing this:\n  Ct STR ''Pure.all'' ((T \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs T t' =\n  t\n\ngoal (1 subgoal):\n 1. strip_all_single_body t = t'", "by auto"], ["proof (state)\nthis:\n  strip_all_single_body t = t'\n\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "have \"\\<And>x. x > 0 \\<Longrightarrow> \\<not> loose_bvar1 t x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. 0 < x \\<Longrightarrow> \\<not> loose_bvar1 t x", "using assms(2) is_open_def loose_bvar_iff_exist_loose_bvar1"], ["proof (prove)\nusing this:\n  is_closed t\n  is_open ?t \\<equiv> loose_bvar ?t 0\n  loose_bvar ?t ?lev = (\\<exists>lev'\\<ge>?lev. loose_bvar1 ?t lev')\n\ngoal (1 subgoal):\n 1. \\<And>x. 0 < x \\<Longrightarrow> \\<not> loose_bvar1 t x", "by blast"], ["proof (state)\nthis:\n  0 < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "have \"0 < x \\<Longrightarrow> \\<not> loose_bvar1 t' x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> \\<not> loose_bvar1 t' x", "using assms(2)"], ["proof (prove)\nusing this:\n  is_closed t\n\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> \\<not> loose_bvar1 t' x", "by (auto simp add: is_open_def t'[symmetric] loose_bvar_iff_exist_loose_bvar1 gr0_conv_Suc)"], ["proof (state)\nthis:\n  0 < ?x \\<Longrightarrow> \\<not> loose_bvar1 t' ?x\n\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "have \"occs t' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. occs t' t", "by (simp add: t'[symmetric])"], ["proof (state)\nthis:\n  occs t' t\n\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "have \"bind_fv (name, T) (subst_bv (Fv name T) (strip_all_single_body t)) =\n    (strip_all_single_body t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv (name, T) (subst_bv (Fv name T) (strip_all_single_body t)) =\n    strip_all_single_body t", "using assms(2-3) bind_fv_subst_bv_cancel gr0_conv_Suc"], ["proof (prove)\nusing this:\n  is_closed t\n  (name, T) \\<notin> fv t\n  \\<lbrakk>\\<And>x. 0 < x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   \\<not> occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa) ?t\\<rbrakk>\n  \\<Longrightarrow> bind_fv ?v\n                     (subst_bv (case ?v of (x, xa) \\<Rightarrow> Fv x xa)\n                       ?t) =\n                    ?t\n  (0 < ?n) = (\\<exists>m. ?n = Suc m)\n\ngoal (1 subgoal):\n 1. bind_fv (name, T) (subst_bv (Fv name T) (strip_all_single_body t)) =\n    strip_all_single_body t", "by (force simp add: s is_open_def t'[symmetric] \n        loose_bvar_iff_exist_loose_bvar1 fv_iff_occs intro!: bind_fv_subst_bv_cancel)"], ["proof (state)\nthis:\n  bind_fv (name, T) (subst_bv (Fv name T) (strip_all_single_body t)) =\n  strip_all_single_body t\n\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "then"], ["proof (chain)\npicking this:\n  bind_fv (name, T) (subst_bv (Fv name T) (strip_all_single_body t)) =\n  strip_all_single_body t", "show ?thesis"], ["proof (prove)\nusing this:\n  bind_fv (name, T) (subst_bv (Fv name T) (strip_all_single_body t)) =\n  strip_all_single_body t\n\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "using assms"], ["proof (prove)\nusing this:\n  bind_fv (name, T) (subst_bv (Fv name T) (strip_all_single_body t)) =\n  strip_all_single_body t\n  strip_all_single_var t = Some T\n  is_closed t\n  (name, T) \\<notin> fv t\n\ngoal (1 subgoal):\n 1. mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t", "by (auto simp add: s typ_of_def t')"], ["proof (state)\nthis:\n  mk_all name T (subst_bv (Fv name T) (strip_all_single_body t)) = t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_is_all_imp_strip_all_body_unchanged: \"\\<not> is_all t \\<Longrightarrow> strip_all_body t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_all t \\<Longrightarrow> strip_all_body t = t", "by (auto elim!: is_all.elims split: if_splits)"], ["", "lemma no_loose_bvar_imp_no_subst_bvs: \"is_closed t \\<Longrightarrow> subst_bvs [] t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed t \\<Longrightarrow> subst_bvs [] t = t", "using no_loose_bvar_imp_no_subst_bvs1 subst_bvs_def is_open_def"], ["proof (prove)\nusing this:\n  \\<not> loose_bvar ?t ?lev \\<Longrightarrow> subst_bvs1 ?t ?lev ?us = ?t\n  subst_bvs ?args ?t \\<equiv> subst_bvs1 ?t 0 ?args\n  is_open ?t \\<equiv> loose_bvar ?t 0\n\ngoal (1 subgoal):\n 1. is_closed t \\<Longrightarrow> subst_bvs [] t = t", "by simp"], ["", "lemma \"is_closed (Abs T t) \\<Longrightarrow> \\<not> loose_bvar t 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed (Abs T t) \\<Longrightarrow> \\<not> loose_bvar t 1", "unfolding is_open_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> loose_bvar (Abs T t) 0 \\<Longrightarrow> \\<not> loose_bvar t 1", "by simp"], ["", "lemma bind_fv2_Fv_fv[simp]: \"fv (bind_fv2 (x, \\<tau>) lev t) = fv t - {(x,\\<tau>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (bind_fv2 (x, \\<tau>) lev t) = fv t - {(x, \\<tau>)}", "by (induction \"(x, \\<tau>)\" lev t rule: bind_fv2.induct) (auto split: if_splits term.splits)"], ["", "corollary mk_all_fv_unchanged: \"fv (mk_all x \\<tau> B) = fv B - {(x,\\<tau>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (mk_all x \\<tau> B) = fv B - {(x, \\<tau>)}", "using bind_fv2_Fv_fv bind_fv_def"], ["proof (prove)\nusing this:\n  fv (bind_fv2 (?x, ?\\<tau>) ?lev ?t) = fv ?t - {(?x, ?\\<tau>)}\n  bind_fv ?vT ?t = bind_fv2 ?vT 0 ?t\n\ngoal (1 subgoal):\n 1. fv (mk_all x \\<tau> B) = fv B - {(x, \\<tau>)}", "by auto"], ["", "lemma mk_all_list_fv_unchanged: \"fv (mk_all_list l B) = fv B - set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (mk_all_list l B) = fv B - set l", "proof (induction l arbitrary: B rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>B. fv (mk_all_list [] B) = fv B - set []\n 2. \\<And>x xs B.\n       (\\<And>B. fv (mk_all_list xs B) = fv B - set xs) \\<Longrightarrow>\n       fv (mk_all_list (xs @ [x]) B) = fv B - set (xs @ [x])", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>B. fv (mk_all_list [] B) = fv B - set []\n 2. \\<And>x xs B.\n       (\\<And>B. fv (mk_all_list xs B) = fv B - set xs) \\<Longrightarrow>\n       fv (mk_all_list (xs @ [x]) B) = fv B - set (xs @ [x])", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (mk_all_list [] B) = fv B - set []", "by simp"], ["proof (state)\nthis:\n  fv (mk_all_list [] B) = fv B - set []\n\ngoal (1 subgoal):\n 1. \\<And>x xs B.\n       (\\<And>B. fv (mk_all_list xs B) = fv B - set xs) \\<Longrightarrow>\n       fv (mk_all_list (xs @ [x]) B) = fv B - set (xs @ [x])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs B.\n       (\\<And>B. fv (mk_all_list xs B) = fv B - set xs) \\<Longrightarrow>\n       fv (mk_all_list (xs @ [x]) B) = fv B - set (xs @ [x])", "(* After translation, look at proof again*)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs B.\n       (\\<And>B. fv (mk_all_list xs B) = fv B - set xs) \\<Longrightarrow>\n       fv (mk_all_list (xs @ [x]) B) = fv B - set (xs @ [x])", "case (snoc x xs)"], ["proof (state)\nthis:\n  fv (mk_all_list xs ?B) = fv ?B - set xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs B.\n       (\\<And>B. fv (mk_all_list xs B) = fv B - set xs) \\<Longrightarrow>\n       fv (mk_all_list (xs @ [x]) B) = fv B - set (xs @ [x])", "have s: \"mk_all_list (xs@[x]) B = case_prod mk_all x (mk_all_list xs B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_all_list (xs @ [x]) B =\n    (case x of (x, ty) \\<Rightarrow> mk_all x ty) (mk_all_list xs B)", "by (simp add: mk_all_list_def)"], ["proof (state)\nthis:\n  mk_all_list (xs @ [x]) B =\n  (case x of (x, ty) \\<Rightarrow> mk_all x ty) (mk_all_list xs B)\n\ngoal (1 subgoal):\n 1. \\<And>x xs B.\n       (\\<And>B. fv (mk_all_list xs B) = fv B - set xs) \\<Longrightarrow>\n       fv (mk_all_list (xs @ [x]) B) = fv B - set (xs @ [x])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (mk_all_list (xs @ [x]) B) = fv B - set (xs @ [x])", "by (simp only: s \"snoc.IH\" mk_all_fv_unchanged split: prod.splits) auto"], ["proof (state)\nthis:\n  fv (mk_all_list (xs @ [x]) B) = fv B - set (xs @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Hs parameter to check if var is fixed by hypotheses *)"], ["", "abbreviation \"forall_intro_vars t Hs \\<equiv> mk_all_list \n  (diff_list (add_vars' t []) (fold (add_vars') Hs [])) t\""], ["", "end"]]}