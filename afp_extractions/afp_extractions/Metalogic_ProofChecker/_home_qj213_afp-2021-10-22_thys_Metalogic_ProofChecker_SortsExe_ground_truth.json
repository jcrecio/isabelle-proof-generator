{"file_name": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker/SortsExe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker", "problem_names": ["lemma [code]: \"exe_ars_conds arss \\<longleftrightarrow> exe_ars_conds' arss\"", "lemma illformed_osig_not_wf_osig: \"\\<not> wf_osig illformed_osig\"", "lemma in_alist_imp_in_map_of: \"distinct (map fst arss) \n  \\<Longrightarrow> (name, ars) \\<in> set arss \\<Longrightarrow> translate_ars arss name = Some (map_of ars)\"", "lemma \"exe_ars_conds arss \\<Longrightarrow> \\<exists>name . map_of (map (apsnd map_of) arss) name = Some ars\n  \\<Longrightarrow> \\<exists>name arsl . (name, arsl) \\<in> set arss \\<and> map_of arsl = ars\"", "lemma \"exe_ars_conds arss \n  \\<Longrightarrow> (name, arsl) \\<in> set arss \\<and> map_of arsl = ars\n  \\<Longrightarrow> map_of (map (apsnd map_of) arss) name = Some ars\"", "lemma consistent_length_tcsigs_imp_exe_consistent_length_tcsigs: \n  \"exe_ars_conds arss \\<Longrightarrow> consistent_length_tcsigs (translate_ars arss) \n  \\<Longrightarrow> exe_consistent_length_tcsigs arss\"", "lemma exe_consistent_length_tcsigs_imp_consistent_length_tcsigs:\n  assumes \"exe_ars_conds arss\" \"exe_consistent_length_tcsigs arss\" \n  shows \"consistent_length_tcsigs (translate_ars arss)\"", "lemma consistent_length_tcsigs_iff_exe_consistent_length_tcsigs: \n  \"exe_ars_conds arss \\<Longrightarrow> \n    consistent_length_tcsigs (translate_ars arss) \\<longleftrightarrow> exe_consistent_length_tcsigs arss\"", "lemma exe_complete_tcsigs_imp_complete_tcsigs: \n  assumes \"exe_ars_conds arss\" \"exe_complete_tcsigs cs arss\"\n  shows \"complete_tcsigs (set cs) (translate_ars arss)\"", "lemma complete_tcsigs_imp_exe_complete_tcsigs: \"exe_ars_conds arss \\<Longrightarrow> \n    complete_tcsigs (set cs) (translate_ars arss) \\<Longrightarrow> exe_complete_tcsigs cs arss\"", "lemma exe_complete_tcsigs_iff_complete_tcsigs:\n  \"exe_ars_conds arss \\<Longrightarrow> \n    complete_tcsigs (set cs) (translate_ars arss) \\<longleftrightarrow> exe_complete_tcsigs cs arss\"", "lemma exe_coregular_tcsigs_imp_coregular_tcsigs: \n  assumes \"exe_ars_conds arss\" \"exe_coregular_tcsigs cs arss\"\n  shows \"coregular_tcsigs (set cs) (translate_ars arss)\"", "lemma coregular_tcsigs_imp_exe_coregular_tcsigs: \n  assumes \"exe_ars_conds arss\" \"coregular_tcsigs (set cs) (translate_ars arss)\"\n  shows \"exe_coregular_tcsigs cs arss\"", "lemma coregular_tcsigs_iff_exe_coregular_tcsigs: \n  \"exe_ars_conds arss \\<Longrightarrow> coregular_tcsigs (set cs) (translate_ars arss) \\<longleftrightarrow> exe_coregular_tcsigs cs arss\"", "lemma \"wf_subclass sub \\<Longrightarrow> Field sub = Domain sub\"", "lemma Field_set_code: \"Field (set rel) = set (exefield rel)\"", "lemma class_ex_rec: \"finite r \\<Longrightarrow> class_ex (insert (a,b) r) c = (a=c \\<or> b=c \\<or> class_ex r c)\"", "lemma execlass_ex_code: \"class_ex (set rel) c = execlass_ex rel c\"", "lemma sort_ex_code: \"sort_ex (set rel) S = exesort_ex rel S\"", "lemma execlass_les_code: \"class_les (set cs) c1 c2 = execlass_les cs c1 c2\"", "lemma normalize_sort_code[code]: \"normalize_sort (set cs) s = exenormalize_sort cs s\"", "lemma normalized_sort_code[code]: \"normalized_sort (set cs) s = exenormalized_sort cs s\"", "lemma wf_sort_code:\n  assumes \"exe_class_conds sub\"\n  shows \"wf_sort (set sub) S = exewf_sort sub S\"", "lemma [code]: \"exewf_sort sub S \\<equiv> (S = {} \\<or> exenormalized_sort sub S \\<and> exesort_ex sub S)\"", "lemma all_normalized_and_ex_tcsigs_imp_exe_all_normalized_and_ex_tcsigs:\n  assumes \"exe_ars_conds arss\" \"all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)\" \n  shows \"exe_all_normalized_and_ex_tcsigs cs arss\"", "lemma exe_all_normalized_and_ex_tcsigs_imp_all_normalized_and_ex_tcsigs: \n  assumes \"exe_ars_conds arss\" \"exe_all_normalized_and_ex_tcsigs cs arss\"\n  shows \"all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)\"", "lemma all_normalized_and_ex_tcsigs_iff_exe_all_normalized_and_ex_tcsigs:\n  \"exe_ars_conds arss \\<Longrightarrow> all_normalized_and_ex_tcsigs (set cs) (translate_ars arss) \n    \\<longleftrightarrow> exe_all_normalized_and_ex_tcsigs cs arss\"", "lemma wf_tcsigs_iff_exe_wf_tcsigs:\n  \"exe_ars_conds arss \\<Longrightarrow> wf_tcsigs (set cs) (translate_ars arss) \\<longleftrightarrow> exe_wf_tcsigs cs arss\"", "lemma exe_antisym_imp_antisym: \"exe_antisym l \\<Longrightarrow> antisym (set l)\"", "lemma antisym_imp_exe_antisym: \"antisym (set l) \\<Longrightarrow> exe_antisym l\"", "lemma antisym_iff_exe_antisym: \"antisym (set l) = exe_antisym l\"", "lemma wf_classes_iff_exe_wf_classes: \"wf_subclass (set cs) \\<longleftrightarrow> exe_wf_subclass cs\"", "lemma exe_wf_osig_imp_wf_osig: \"exe_wf_osig oss \\<Longrightarrow> wf_osig (translate_osig oss)\"", "lemma classes_translate: \"exe_osig_conds oss \\<Longrightarrow> subclass (translate_osig oss) = set (execlasses oss)\"", "lemma tcsigs_translate: \"exe_osig_conds oss\n  \\<Longrightarrow> tcsigs (translate_osig oss) = translate_ars (exetcsigs oss)\"", "lemma wf_osig_translate_imp_exe_osig_conds:\n  \"wf_osig (translate_osig oss) \\<Longrightarrow> exe_osig_conds oss\"", "lemma wf_osig_imp_exe_wf_osig:\n  assumes \"wf_osig (translate_osig oss)\" shows \"exe_wf_osig oss\"", "lemma wf_osig_iff_exe_wf_osig: \"wf_osig (translate_osig oss) \\<longleftrightarrow> exe_wf_osig oss\""], "translations": [["", "lemma [code]: \"exe_ars_conds arss \\<longleftrightarrow> exe_ars_conds' arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_ars_conds arss = exe_ars_conds' arss", "by (simp add: exe_ars_conds_def)"], ["", "definition exe_class_conds :: \"(class \\<times> class) list \\<Rightarrow> bool\" where\n  \"exe_class_conds cs \\<equiv> distinct cs\""], ["", "definition exe_osig_conds :: \"exeosig \\<Rightarrow> bool\" where\n  \"exe_osig_conds a \\<equiv> exe_class_conds (execlasses a) \\<and> exe_ars_conds (exetcsigs a)\""], ["", "fun translate_ars :: \"(name \\<times> (class \\<times> sort list) list) list \\<Rightarrow> name \\<rightharpoonup> (class \\<rightharpoonup> sort list)\" where\n  \"translate_ars ars = map_of (map (apsnd map_of) ars)\""], ["", "abbreviation \"illformed_osig \\<equiv> ({}, Map.empty(STR ''A'' \\<mapsto> Map.empty(STR ''A'' \\<mapsto> [{STR ''A''}])))\""], ["", "lemma illformed_osig_not_wf_osig: \"\\<not> wf_osig illformed_osig\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> wf_osig\n            ({},\n             [STR ''A'' \\<mapsto>\n              [STR ''A'' \\<mapsto> [insert STR ''A'' full_sort]]])", "by (auto simp add: coregular_tcsigs_def complete_tcsigs_def consistent_length_tcsigs_def\n      all_normalized_and_ex_tcsigs_def sort_ex_def wf_sort_def)"], ["", "(* I should probably do this with an option return type instead... *)"], ["", "fun translate_osig :: \"exeosig \\<Rightarrow> osig\" where\n  \"translate_osig (cs, arss) = (if exe_osig_conds (cs, arss) \n    then (set cs, translate_ars arss)\n    else illformed_osig)\""], ["", "definition \"exe_consistent_length_tcsigs arss \\<equiv> (\\<forall>ars \\<in> snd ` set arss .\n  \\<forall>ss\\<^sub>1 \\<in> snd ` set ars. \\<forall>ss\\<^sub>2 \\<in> snd ` set ars. length ss\\<^sub>1 = length ss\\<^sub>2)\""], ["", "lemma in_alist_imp_in_map_of: \"distinct (map fst arss) \n  \\<Longrightarrow> (name, ars) \\<in> set arss \\<Longrightarrow> translate_ars arss name = Some (map_of ars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alist_conds arss; (name, ars) \\<in> set arss\\<rbrakk>\n    \\<Longrightarrow> translate_ars arss name = Some (map_of ars)", "by (induction arss) (auto simp add: rev_image_eqI)"], ["", "lemma \"exe_ars_conds arss \\<Longrightarrow> \\<exists>name . map_of (map (apsnd map_of) arss) name = Some ars\n  \\<Longrightarrow> \\<exists>name arsl . (name, arsl) \\<in> set arss \\<and> map_of arsl = ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>exe_ars_conds arss;\n     \\<exists>name.\n        map_of (map (apsnd map_of) arss) name = Some ars\\<rbrakk>\n    \\<Longrightarrow> \\<exists>name arsl.\n                         (name, arsl) \\<in> set arss \\<and>\n                         map_of arsl = ars", "by (force simp add: exe_ars_conds_def)"], ["", "lemma \"exe_ars_conds arss \n  \\<Longrightarrow> (name, arsl) \\<in> set arss \\<and> map_of arsl = ars\n  \\<Longrightarrow> map_of (map (apsnd map_of) arss) name = Some ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>exe_ars_conds arss;\n     (name, arsl) \\<in> set arss \\<and> map_of arsl = ars\\<rbrakk>\n    \\<Longrightarrow> map_of (map (apsnd map_of) arss) name = Some ars", "by (force simp add: exe_ars_conds_def)"], ["", "lemma consistent_length_tcsigs_imp_exe_consistent_length_tcsigs: \n  \"exe_ars_conds arss \\<Longrightarrow> consistent_length_tcsigs (translate_ars arss) \n  \\<Longrightarrow> exe_consistent_length_tcsigs arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>exe_ars_conds arss;\n     consistent_length_tcsigs (translate_ars arss)\\<rbrakk>\n    \\<Longrightarrow> exe_consistent_length_tcsigs arss", "unfolding consistent_length_tcsigs_def exe_consistent_length_tcsigs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>exe_ars_conds arss;\n     \\<forall>ars\\<in>ran (translate_ars arss).\n        \\<forall>ss\\<^sub>1\\<in>ran ars.\n           \\<forall>ss\\<^sub>2\\<in>ran ars.\n              length ss\\<^sub>1 = length ss\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ars\\<in>snd ` set arss.\n                         \\<forall>ss\\<^sub>1\\<in>snd ` set ars.\n                            \\<forall>ss\\<^sub>2\\<in>snd ` set ars.\n                               length ss\\<^sub>1 = length ss\\<^sub>2", "apply (clarsimp simp add: exe_ars_conds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>\\<forall>ars\\<in>ran (map_of (map (apsnd map_of) arss)).\n                   \\<forall>ss\\<^sub>1\\<in>ran ars.\n                      \\<forall>ss\\<^sub>2\\<in>ran ars.\n                         length ss\\<^sub>1 = length ss\\<^sub>2;\n        (a, b) \\<in> set arss; (aa, ba) \\<in> set b; (ab, bb) \\<in> set b;\n        alist_conds arss;\n        \\<forall>ars\\<in>set arss. alist_conds (snd ars)\\<rbrakk>\n       \\<Longrightarrow> length ba = length bb", "by (metis in_alist_imp_in_map_of map_of_is_SomeI ranI snd_conv translate_ars.simps)"], ["", "lemma exe_consistent_length_tcsigs_imp_consistent_length_tcsigs:\n  assumes \"exe_ars_conds arss\" \"exe_consistent_length_tcsigs arss\" \n  shows \"consistent_length_tcsigs (translate_ars arss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "fix ars ss\\<^sub>1 ss\\<^sub>2"], ["proof (state)\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "assume p: \"ars \\<in> ran (map_of (map (apsnd map_of) arss))\" \"ss\\<^sub>1 \\<in> ran ars\" \"ss\\<^sub>2 \\<in> ran ars\""], ["proof (state)\nthis:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))\n  ss\\<^sub>1 \\<in> ran ars\n  ss\\<^sub>2 \\<in> ran ars\n\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "from p(1)"], ["proof (chain)\npicking this:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))", "obtain name where \"map_of (map (apsnd map_of) arss) name = Some ars\""], ["proof (prove)\nusing this:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))\n\ngoal (1 subgoal):\n 1. (\\<And>name.\n        map_of (map (apsnd map_of) arss) name = Some ars \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson in_range_if_ex_key)"], ["proof (state)\nthis:\n  map_of (map (apsnd map_of) arss) name = Some ars\n\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "from this"], ["proof (chain)\npicking this:\n  map_of (map (apsnd map_of) arss) name = Some ars", "obtain arsl where \"(name, arsl) \\<in> set arss\" \"map_of arsl = ars\""], ["proof (prove)\nusing this:\n  map_of (map (apsnd map_of) arss) name = Some ars\n\ngoal (1 subgoal):\n 1. (\\<And>arsl.\n        \\<lbrakk>(name, arsl) \\<in> set arss; map_of arsl = ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  map_of (map (apsnd map_of) arss) name = Some ars\n  exe_ars_conds arss\n\ngoal (1 subgoal):\n 1. (\\<And>arsl.\n        \\<lbrakk>(name, arsl) \\<in> set arss; map_of arsl = ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: exe_ars_conds_def)"], ["proof (state)\nthis:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "from this"], ["proof (chain)\npicking this:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars", "obtain c1 c2 where \"ars c1 = Some ss\\<^sub>1\" \"ars c2 = Some ss\\<^sub>2\""], ["proof (prove)\nusing this:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c2.\n        \\<lbrakk>ars c1 = Some ss\\<^sub>1; ars c2 = Some ss\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis in_range_if_ex_key p(2) p(3))"], ["proof (state)\nthis:\n  ars c1 = Some ss\\<^sub>1\n  ars c2 = Some ss\\<^sub>2\n\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "hence \"(c1, ss\\<^sub>1) \\<in> set arsl\" \"(c2, ss\\<^sub>2) \\<in> set arsl\""], ["proof (prove)\nusing this:\n  ars c1 = Some ss\\<^sub>1\n  ars c2 = Some ss\\<^sub>2\n\ngoal (1 subgoal):\n 1. (c1, ss\\<^sub>1) \\<in> set arsl &&& (c2, ss\\<^sub>2) \\<in> set arsl", "by (simp_all add: \\<open>map_of arsl = ars\\<close> map_of_SomeD)"], ["proof (state)\nthis:\n  (c1, ss\\<^sub>1) \\<in> set arsl\n  (c2, ss\\<^sub>2) \\<in> set arsl\n\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "hence \"length ss\\<^sub>1 = length ss\\<^sub>2\""], ["proof (prove)\nusing this:\n  (c1, ss\\<^sub>1) \\<in> set arsl\n  (c2, ss\\<^sub>2) \\<in> set arsl\n\ngoal (1 subgoal):\n 1. length ss\\<^sub>1 = length ss\\<^sub>2", "using assms(2) \\<open>(name, arsl) \\<in> set arss\\<close>"], ["proof (prove)\nusing this:\n  (c1, ss\\<^sub>1) \\<in> set arsl\n  (c2, ss\\<^sub>2) \\<in> set arsl\n  exe_consistent_length_tcsigs arss\n  (name, arsl) \\<in> set arss\n\ngoal (1 subgoal):\n 1. length ss\\<^sub>1 = length ss\\<^sub>2", "by (fastforce simp add: exe_consistent_length_tcsigs_def)"], ["proof (state)\nthis:\n  length ss\\<^sub>1 = length ss\\<^sub>2\n\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?ars2 \\<in> ran (map_of (map (apsnd map_of) arss));\n   ?ss\\<^sub>12 \\<in> ran ?ars2; ?ss\\<^sub>22 \\<in> ran ?ars2\\<rbrakk>\n  \\<Longrightarrow> length ?ss\\<^sub>12 = length ?ss\\<^sub>22\n\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "note 1 = this"], ["proof (state)\nthis:\n  \\<lbrakk>?ars2 \\<in> ran (map_of (map (apsnd map_of) arss));\n   ?ss\\<^sub>12 \\<in> ran ?ars2; ?ss\\<^sub>22 \\<in> ran ?ars2\\<rbrakk>\n  \\<Longrightarrow> length ?ss\\<^sub>12 = length ?ss\\<^sub>22\n\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent_length_tcsigs (translate_ars arss)", "by (simp add: consistent_length_tcsigs_def exe_consistent_length_tcsigs_def) (use 1 in blast)"], ["proof (state)\nthis:\n  consistent_length_tcsigs (translate_ars arss)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma consistent_length_tcsigs_iff_exe_consistent_length_tcsigs: \n  \"exe_ars_conds arss \\<Longrightarrow> \n    consistent_length_tcsigs (translate_ars arss) \\<longleftrightarrow> exe_consistent_length_tcsigs arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    consistent_length_tcsigs (translate_ars arss) =\n    exe_consistent_length_tcsigs arss", "using consistent_length_tcsigs_imp_exe_consistent_length_tcsigs \n    exe_consistent_length_tcsigs_imp_consistent_length_tcsigs"], ["proof (prove)\nusing this:\n  \\<lbrakk>exe_ars_conds ?arss;\n   consistent_length_tcsigs (translate_ars ?arss)\\<rbrakk>\n  \\<Longrightarrow> exe_consistent_length_tcsigs ?arss\n  \\<lbrakk>exe_ars_conds ?arss; exe_consistent_length_tcsigs ?arss\\<rbrakk>\n  \\<Longrightarrow> consistent_length_tcsigs (translate_ars ?arss)\n\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    consistent_length_tcsigs (translate_ars arss) =\n    exe_consistent_length_tcsigs arss", "by blast"], ["", "(* Do I even have to translate the relation? *)"], ["", "definition \"exe_complete_tcsigs cs arss\n \\<equiv> (\\<forall>ars \\<in> snd ` set arss . \n  \\<forall>(c\\<^sub>1, c\\<^sub>2) \\<in> set cs . c\\<^sub>1\\<in>fst ` set ars \\<longrightarrow> c\\<^sub>2\\<in>fst ` set ars)\""], ["", "lemma exe_complete_tcsigs_imp_complete_tcsigs: \n  assumes \"exe_ars_conds arss\" \"exe_complete_tcsigs cs arss\"\n  shows \"complete_tcsigs (set cs) (translate_ars arss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "fix ars a b y"], ["proof (state)\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "assume p: \"ars \\<in> ran (map_of (map (apsnd map_of) arss))\"\n       \"(a, b) \\<in> set cs\" \"ars a = Some y\""], ["proof (state)\nthis:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))\n  (a, b) \\<in> set cs\n  ars a = Some y\n\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "from p(1)"], ["proof (chain)\npicking this:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))", "obtain name where \"map_of (map (apsnd map_of) arss) name = Some ars\""], ["proof (prove)\nusing this:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))\n\ngoal (1 subgoal):\n 1. (\\<And>name.\n        map_of (map (apsnd map_of) arss) name = Some ars \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson in_range_if_ex_key)"], ["proof (state)\nthis:\n  map_of (map (apsnd map_of) arss) name = Some ars\n\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "from this"], ["proof (chain)\npicking this:\n  map_of (map (apsnd map_of) arss) name = Some ars", "obtain arsl where \"(name, arsl) \\<in> set arss\" \"map_of arsl = ars\""], ["proof (prove)\nusing this:\n  map_of (map (apsnd map_of) arss) name = Some ars\n\ngoal (1 subgoal):\n 1. (\\<And>arsl.\n        \\<lbrakk>(name, arsl) \\<in> set arss; map_of arsl = ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  map_of (map (apsnd map_of) arss) name = Some ars\n  exe_ars_conds arss\n\ngoal (1 subgoal):\n 1. (\\<And>arsl.\n        \\<lbrakk>(name, arsl) \\<in> set arss; map_of arsl = ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: exe_ars_conds_def)"], ["proof (state)\nthis:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "hence \"(a, y) \\<in> set arsl\""], ["proof (prove)\nusing this:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n\ngoal (1 subgoal):\n 1. (a, y) \\<in> set arsl", "by (simp add: map_of_SomeD p(3))"], ["proof (state)\nthis:\n  (a, y) \\<in> set arsl\n\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "hence\"\\<exists>y. ars b = Some y\""], ["proof (prove)\nusing this:\n  (a, y) \\<in> set arsl\n\ngoal (1 subgoal):\n 1. \\<exists>y. ars b = Some y", "using assms(2) \\<open>(name, arsl) \\<in> set arss\\<close>"], ["proof (prove)\nusing this:\n  (a, y) \\<in> set arsl\n  exe_complete_tcsigs cs arss\n  (name, arsl) \\<in> set arss\n\ngoal (1 subgoal):\n 1. \\<exists>y. ars b = Some y", "apply (clarsimp simp add: exe_complete_tcsigs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, y) \\<in> set arsl;\n     \\<forall>ars\\<in>set arss.\n        \\<forall>x\\<in>set cs.\n           case x of\n           (c\\<^sub>1, c\\<^sub>2) \\<Rightarrow>\n             c\\<^sub>1 \\<in> fst ` set (snd ars) \\<longrightarrow>\n             c\\<^sub>2 \\<in> fst ` set (snd ars);\n     (name, arsl) \\<in> set arss\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. ars b = Some y", "by (metis (no_types, lifting) \\<open>map_of arsl = ars\\<close> case_prodD domD domI dom_map_of_conv_image_fst\n          p(2) p(3) snd_conv)"], ["proof (state)\nthis:\n  \\<exists>y. ars b = Some y\n\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?ars2 \\<in> ran (map_of (map (apsnd map_of) arss));\n   (?a2, ?b2) \\<in> set cs; ?ars2 ?a2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. ?ars2 ?b2 = Some y\n\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "note 1 = this"], ["proof (state)\nthis:\n  \\<lbrakk>?ars2 \\<in> ran (map_of (map (apsnd map_of) arss));\n   (?a2, ?b2) \\<in> set cs; ?ars2 ?a2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. ?ars2 ?b2 = Some y\n\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. complete_tcsigs (set cs) (translate_ars arss)", "by (simp add: complete_tcsigs_def exe_complete_tcsigs_def) (use 1 in blast)"], ["proof (state)\nthis:\n  complete_tcsigs (set cs) (translate_ars arss)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complete_tcsigs_imp_exe_complete_tcsigs: \"exe_ars_conds arss \\<Longrightarrow> \n    complete_tcsigs (set cs) (translate_ars arss) \\<Longrightarrow> exe_complete_tcsigs cs arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>exe_ars_conds arss;\n     complete_tcsigs (set cs) (translate_ars arss)\\<rbrakk>\n    \\<Longrightarrow> exe_complete_tcsigs cs arss", "unfolding complete_tcsigs_def exe_complete_tcsigs_def exe_ars_conds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alist_conds arss \\<and>\n             (\\<forall>ars\\<in>snd ` set arss. alist_conds ars);\n     \\<forall>ars\\<in>ran (translate_ars arss).\n        \\<forall>(c\\<^sub>1, c\\<^sub>2)\\<in>set cs.\n           c\\<^sub>1 \\<in> dom ars \\<longrightarrow>\n           c\\<^sub>2 \\<in> dom ars\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ars\\<in>snd ` set arss.\n                         \\<forall>(c\\<^sub>1, c\\<^sub>2)\\<in>set cs.\n                            c\\<^sub>1 \\<in> fst ` set ars \\<longrightarrow>\n                            c\\<^sub>2 \\<in> fst ` set ars", "by (metis (mono_tags, lifting) case_prod_unfold dom_map_of_conv_image_fst in_alist_imp_in_map_of\n      in_range_if_ex_key map_of_SomeD ran_distinct)"], ["", "lemma exe_complete_tcsigs_iff_complete_tcsigs:\n  \"exe_ars_conds arss \\<Longrightarrow> \n    complete_tcsigs (set cs) (translate_ars arss) \\<longleftrightarrow> exe_complete_tcsigs cs arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    complete_tcsigs (set cs) (translate_ars arss) =\n    exe_complete_tcsigs cs arss", "using exe_complete_tcsigs_imp_complete_tcsigs complete_tcsigs_imp_exe_complete_tcsigs"], ["proof (prove)\nusing this:\n  \\<lbrakk>exe_ars_conds ?arss; exe_complete_tcsigs ?cs ?arss\\<rbrakk>\n  \\<Longrightarrow> complete_tcsigs (set ?cs) (translate_ars ?arss)\n  \\<lbrakk>exe_ars_conds ?arss;\n   complete_tcsigs (set ?cs) (translate_ars ?arss)\\<rbrakk>\n  \\<Longrightarrow> exe_complete_tcsigs ?cs ?arss\n\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    complete_tcsigs (set cs) (translate_ars arss) =\n    exe_complete_tcsigs cs arss", "by blast"], ["", "definition \"exe_coregular_tcsigs (cs :: (class \\<times> class) list) arss\n  \\<equiv> (\\<forall>ars \\<in> snd ` set arss .\n  \\<forall>c\\<^sub>1 \\<in> fst ` set ars. \\<forall>c\\<^sub>2 \\<in> fst ` set ars.\n    (class_leq (set cs) c\\<^sub>1 c\\<^sub>2 \\<longrightarrow> \n      list_all2 (sort_leq (set cs)) (the (lookup (\\<lambda>x. x=c\\<^sub>1) ars)) (the (lookup (\\<lambda>x. x=c\\<^sub>2) ars))))\""], ["", "lemma exe_coregular_tcsigs_imp_coregular_tcsigs: \n  assumes \"exe_ars_conds arss\" \"exe_coregular_tcsigs cs arss\"\n  shows \"coregular_tcsigs (set cs) (translate_ars arss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "fix ars c\\<^sub>1 c\\<^sub>2 ss1 ss2"], ["proof (state)\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "assume p: \"ars \\<in> ran (map_of (map (apsnd map_of) arss))\" \"ars c\\<^sub>1 = Some ss1\" \"ars c\\<^sub>2 = Some ss2\"\n      \"class_leq (set cs) c\\<^sub>1 c\\<^sub>2\""], ["proof (state)\nthis:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))\n  ars c\\<^sub>1 = Some ss1\n  ars c\\<^sub>2 = Some ss2\n  class_leq (set cs) c\\<^sub>1 c\\<^sub>2\n\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "from p(1)"], ["proof (chain)\npicking this:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))", "obtain name where \"map_of (map (apsnd map_of) arss) name = Some ars\""], ["proof (prove)\nusing this:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))\n\ngoal (1 subgoal):\n 1. (\\<And>name.\n        map_of (map (apsnd map_of) arss) name = Some ars \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson in_range_if_ex_key)"], ["proof (state)\nthis:\n  map_of (map (apsnd map_of) arss) name = Some ars\n\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "from this"], ["proof (chain)\npicking this:\n  map_of (map (apsnd map_of) arss) name = Some ars", "obtain arsl where \"(name, arsl) \\<in> set arss\" \"map_of arsl = ars\""], ["proof (prove)\nusing this:\n  map_of (map (apsnd map_of) arss) name = Some ars\n\ngoal (1 subgoal):\n 1. (\\<And>arsl.\n        \\<lbrakk>(name, arsl) \\<in> set arss; map_of arsl = ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  map_of (map (apsnd map_of) arss) name = Some ars\n  exe_ars_conds arss\n\ngoal (1 subgoal):\n 1. (\\<And>arsl.\n        \\<lbrakk>(name, arsl) \\<in> set arss; map_of arsl = ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: exe_ars_conds_def)"], ["proof (state)\nthis:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "from this"], ["proof (chain)\npicking this:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars", "obtain c1 c2 where \"ars c1 = Some ss1\" \"ars c2 = Some ss2\" \"class_leq (set cs) c1 c2\""], ["proof (prove)\nusing this:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c2.\n        \\<lbrakk>ars c1 = Some ss1; ars c2 = Some ss2;\n         class_leq (set cs) c1 c2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using p(2) p(3) p(4)"], ["proof (prove)\nusing this:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n  ars c\\<^sub>1 = Some ss1\n  ars c\\<^sub>2 = Some ss2\n  class_leq (set cs) c\\<^sub>1 c\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>c1 c2.\n        \\<lbrakk>ars c1 = Some ss1; ars c2 = Some ss2;\n         class_leq (set cs) c1 c2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ars c1 = Some ss1\n  ars c2 = Some ss2\n  class_leq (set cs) c1 c2\n\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "hence \"(c1, ss1) \\<in> set arsl\" \"(c2, ss2) \\<in> set arsl\""], ["proof (prove)\nusing this:\n  ars c1 = Some ss1\n  ars c2 = Some ss2\n  class_leq (set cs) c1 c2\n\ngoal (1 subgoal):\n 1. (c1, ss1) \\<in> set arsl &&& (c2, ss2) \\<in> set arsl", "by (simp_all add: \\<open>map_of arsl = ars\\<close> map_of_SomeD)"], ["proof (state)\nthis:\n  (c1, ss1) \\<in> set arsl\n  (c2, ss2) \\<in> set arsl\n\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "hence \"lookup (\\<lambda>x. x=c1) arsl = Some ss1\" \"lookup (\\<lambda>x. x=c2) arsl = Some ss2\""], ["proof (prove)\nusing this:\n  (c1, ss1) \\<in> set arsl\n  (c2, ss2) \\<in> set arsl\n\ngoal (1 subgoal):\n 1. lookup (\\<lambda>x. x = c1) arsl = Some ss1 &&&\n    lookup (\\<lambda>x. x = c2) arsl = Some ss2", "by (metis \\<open>(name, arsl) \\<in> set arss\\<close> assms(1) exe_ars_conds_def \n          image_eqI lookup_present_eq_key snd_conv)+"], ["proof (state)\nthis:\n  lookup (\\<lambda>x. x = c1) arsl = Some ss1\n  lookup (\\<lambda>x. x = c2) arsl = Some ss2\n\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "hence \"list_all2 (sort_leq (set cs)) ss1 ss2\""], ["proof (prove)\nusing this:\n  lookup (\\<lambda>x. x = c1) arsl = Some ss1\n  lookup (\\<lambda>x. x = c2) arsl = Some ss2\n\ngoal (1 subgoal):\n 1. list_all2 (sort_leq (set cs)) ss1 ss2", "using assms(2) \\<open>(name, arsl) \\<in> set arss\\<close> \\<open>(c1, ss1) \\<in> set arsl\\<close> \\<open>(c2, ss2) \\<in> set arsl\\<close> \n        \\<open>class_leq (set cs) c1 c2\\<close>"], ["proof (prove)\nusing this:\n  lookup (\\<lambda>x. x = c1) arsl = Some ss1\n  lookup (\\<lambda>x. x = c2) arsl = Some ss2\n  exe_coregular_tcsigs cs arss\n  (name, arsl) \\<in> set arss\n  (c1, ss1) \\<in> set arsl\n  (c2, ss2) \\<in> set arsl\n  class_leq (set cs) c1 c2\n\ngoal (1 subgoal):\n 1. list_all2 (sort_leq (set cs)) ss1 ss2", "by (fastforce simp add: exe_coregular_tcsigs_def)"], ["proof (state)\nthis:\n  list_all2 (sort_leq (set cs)) ss1 ss2\n\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?ars2 \\<in> ran (map_of (map (apsnd map_of) arss));\n   ?ars2 ?c\\<^sub>12 = Some ?ss1.2; ?ars2 ?c\\<^sub>22 = Some ?ss2.2;\n   class_leq (set cs) ?c\\<^sub>12 ?c\\<^sub>22\\<rbrakk>\n  \\<Longrightarrow> list_all2 (sort_leq (set cs)) ?ss1.2 ?ss2.2\n\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "note 1 = this"], ["proof (state)\nthis:\n  \\<lbrakk>?ars2 \\<in> ran (map_of (map (apsnd map_of) arss));\n   ?ars2 ?c\\<^sub>12 = Some ?ss1.2; ?ars2 ?c\\<^sub>22 = Some ?ss2.2;\n   class_leq (set cs) ?c\\<^sub>12 ?c\\<^sub>22\\<rbrakk>\n  \\<Longrightarrow> list_all2 (sort_leq (set cs)) ?ss1.2 ?ss2.2\n\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. coregular_tcsigs (set cs) (translate_ars arss)", "by (auto simp add: coregular_tcsigs_def exe_coregular_tcsigs_def) (use 1 in blast)"], ["proof (state)\nthis:\n  coregular_tcsigs (set cs) (translate_ars arss)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coregular_tcsigs_imp_exe_coregular_tcsigs: \n  assumes \"exe_ars_conds arss\" \"coregular_tcsigs (set cs) (translate_ars arss)\"\n  shows \"exe_coregular_tcsigs cs arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "fix name ars c1 ss1 c2 ss2"], ["proof (state)\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "assume p: \"(name, ars) \\<in> set arss\" \"(c1, ss1) \\<in> set ars\" \"(c2, ss2) \\<in> set ars\" \n      \"class_leq (set cs) c1 c2\""], ["proof (state)\nthis:\n  (name, ars) \\<in> set arss\n  (c1, ss1) \\<in> set ars\n  (c2, ss2) \\<in> set ars\n  class_leq (set cs) c1 c2\n\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "have s1: \"(lookup (\\<lambda>x. x = c1) ars) = Some ss1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (\\<lambda>x. x = c1) ars = Some ss1", "using assms(1) lookup_present_eq_key p(1) p(2)"], ["proof (prove)\nusing this:\n  exe_ars_conds arss\n  distinct (map fst ?al) \\<Longrightarrow>\n  ((?k, ?v) \\<in> set ?al) = (lookup (\\<lambda>x. x = ?k) ?al = Some ?v)\n  (name, ars) \\<in> set arss\n  (c1, ss1) \\<in> set ars\n\ngoal (1 subgoal):\n 1. lookup (\\<lambda>x. x = c1) ars = Some ss1", "by (force simp add: exe_ars_conds_def)"], ["proof (state)\nthis:\n  lookup (\\<lambda>x. x = c1) ars = Some ss1\n\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "have s2: \"(lookup (\\<lambda>x. x = c2) ars) = Some ss2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (\\<lambda>x. x = c2) ars = Some ss2", "using assms(1) lookup_present_eq_key p(1) p(3)"], ["proof (prove)\nusing this:\n  exe_ars_conds arss\n  distinct (map fst ?al) \\<Longrightarrow>\n  ((?k, ?v) \\<in> set ?al) = (lookup (\\<lambda>x. x = ?k) ?al = Some ?v)\n  (name, ars) \\<in> set arss\n  (c2, ss2) \\<in> set ars\n\ngoal (1 subgoal):\n 1. lookup (\\<lambda>x. x = c2) ars = Some ss2", "by (force simp add: exe_ars_conds_def)"], ["proof (state)\nthis:\n  lookup (\\<lambda>x. x = c2) ars = Some ss2\n\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "have \"list_all2 (sort_leq (set cs)) (the (lookup (\\<lambda>x. x = c1) ars)) (the (lookup (\\<lambda>x. x = c2) ars))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (sort_leq (set cs)) (the (lookup (\\<lambda>x. x = c1) ars))\n     (the (lookup (\\<lambda>x. x = c2) ars))", "using assms"], ["proof (prove)\nusing this:\n  exe_ars_conds arss\n  coregular_tcsigs (set cs) (translate_ars arss)\n\ngoal (1 subgoal):\n 1. list_all2 (sort_leq (set cs)) (the (lookup (\\<lambda>x. x = c1) ars))\n     (the (lookup (\\<lambda>x. x = c2) ars))", "apply (simp add: coregular_tcsigs_def s1 s2 exe_ars_conds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alist_conds arss \\<and>\n             (\\<forall>ars\\<in>set arss. alist_conds (snd ars));\n     \\<forall>ars\\<in>ran (map_of (map (apsnd map_of) arss)).\n        \\<forall>c\\<^sub>1\\<in>dom ars.\n           \\<forall>c\\<^sub>2\\<in>dom ars.\n              class_leq (set cs) c\\<^sub>1 c\\<^sub>2 \\<longrightarrow>\n              list_all2 (sort_leq (set cs)) (the (ars c\\<^sub>1))\n               (the (ars c\\<^sub>2))\\<rbrakk>\n    \\<Longrightarrow> list_all2 (sort_leq (set cs)) ss1 ss2", "by (metis domIff in_alist_imp_in_map_of map_of_is_SomeI option.distinct(1) option.sel \n          p(1) p(2) p(3) p(4) ranI snd_conv translate_ars.simps)"], ["proof (state)\nthis:\n  list_all2 (sort_leq (set cs)) (the (lookup (\\<lambda>x. x = c1) ars))\n   (the (lookup (\\<lambda>x. x = c2) ars))\n\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?name2, ?ars2) \\<in> set arss; (?c1.2, ?ss1.2) \\<in> set ?ars2;\n   (?c2.2, ?ss2.2) \\<in> set ?ars2; class_leq (set cs) ?c1.2 ?c2.2\\<rbrakk>\n  \\<Longrightarrow> list_all2 (sort_leq (set cs))\n                     (the (lookup (\\<lambda>x. x = ?c1.2) ?ars2))\n                     (the (lookup (\\<lambda>x. x = ?c2.2) ?ars2))\n\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "note 1 = this"], ["proof (state)\nthis:\n  \\<lbrakk>(?name2, ?ars2) \\<in> set arss; (?c1.2, ?ss1.2) \\<in> set ?ars2;\n   (?c2.2, ?ss2.2) \\<in> set ?ars2; class_leq (set cs) ?c1.2 ?c2.2\\<rbrakk>\n  \\<Longrightarrow> list_all2 (sort_leq (set cs))\n                     (the (lookup (\\<lambda>x. x = ?c1.2) ?ars2))\n                     (the (lookup (\\<lambda>x. x = ?c2.2) ?ars2))\n\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_coregular_tcsigs cs arss", "by (auto simp add: coregular_tcsigs_def exe_coregular_tcsigs_def) (use 1 in blast)"], ["proof (state)\nthis:\n  exe_coregular_tcsigs cs arss\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coregular_tcsigs_iff_exe_coregular_tcsigs: \n  \"exe_ars_conds arss \\<Longrightarrow> coregular_tcsigs (set cs) (translate_ars arss) \\<longleftrightarrow> exe_coregular_tcsigs cs arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    coregular_tcsigs (set cs) (translate_ars arss) =\n    exe_coregular_tcsigs cs arss", "using coregular_tcsigs_imp_exe_coregular_tcsigs exe_coregular_tcsigs_imp_coregular_tcsigs"], ["proof (prove)\nusing this:\n  \\<lbrakk>exe_ars_conds ?arss;\n   coregular_tcsigs (set ?cs) (translate_ars ?arss)\\<rbrakk>\n  \\<Longrightarrow> exe_coregular_tcsigs ?cs ?arss\n  \\<lbrakk>exe_ars_conds ?arss; exe_coregular_tcsigs ?cs ?arss\\<rbrakk>\n  \\<Longrightarrow> coregular_tcsigs (set ?cs) (translate_ars ?arss)\n\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    coregular_tcsigs (set cs) (translate_ars arss) =\n    exe_coregular_tcsigs cs arss", "by blast"], ["", "lemma \"wf_subclass sub \\<Longrightarrow> Field sub = Domain sub\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_subclass sub \\<Longrightarrow> Field sub = Domain sub", "using refl_on_def"], ["proof (prove)\nusing this:\n  refl_on ?A ?r =\n  (?r \\<subseteq> ?A \\<times> ?A \\<and>\n   (\\<forall>x\\<in>?A. (x, x) \\<in> ?r))\n\ngoal (1 subgoal):\n 1. wf_subclass sub \\<Longrightarrow> Field sub = Domain sub", "by fastforce"], ["", "definition [simp]: \"exefield rel = List.union (map fst rel) (map snd rel)\""], ["", "lemma Field_set_code: \"Field (set rel) = set (exefield rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Field (set rel) = set (exefield rel)", "by (induction rel) fastforce+"], ["", "lemma class_ex_rec: \"finite r \\<Longrightarrow> class_ex (insert (a,b) r) c = (a=c \\<or> b=c \\<or> class_ex r c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite r \\<Longrightarrow>\n    class_ex (insert (a, b) r) c = (a = c \\<or> b = c \\<or> class_ex r c)", "by (induction r rule: finite_induct) (auto simp add: class_ex_def)"], ["", "definition [simp]: \"execlass_ex rel c = List.member (exefield rel) c\""], ["", "lemma execlass_ex_code: \"class_ex (set rel) c = execlass_ex rel c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class_ex (set rel) c = execlass_ex rel c", "by (metis Field_set_code class_ex_def execlass_ex_def in_set_member)"], ["", "definition [simp]: \"exesort_ex rel S = (\\<forall>x\\<in>S . (List.member (exefield rel) x))\""], ["", "lemma sort_ex_code: \"sort_ex (set rel) S = exesort_ex rel S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_ex (set rel) S = exesort_ex rel S", "by (simp add: execlass_ex_code sort_ex_class_ex)"], ["", "definition [simp]: \"execlass_les cs c1 c2 = (List.member cs (c1,c2) \\<and> \\<not> List.member cs (c2,c1))\""], ["", "lemma execlass_les_code: \"class_les (set cs) c1 c2 = execlass_les cs c1 c2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class_les (set cs) c1 c2 = execlass_les cs c1 c2", "by (simp add: class_leq_def class_les_def member_def)"], ["", "definition [simp]: \"exenormalize_sort cs (s::sort)\n  = {c \\<in> s . \\<not> (\\<exists>c' \\<in> s . execlass_les cs c' c)}\""], ["", "definition [simp]: \"exenormalized_sort cs s \\<equiv> (exenormalize_sort cs s) = s\""], ["", "lemma normalize_sort_code[code]: \"normalize_sort (set cs) s = exenormalize_sort cs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_sort (set cs) s = exenormalize_sort cs s", "by (auto simp add: normalize_sort_def List.member_def list_ex_iff class_leq_def class_les_def)"], ["", "lemma normalized_sort_code[code]: \"normalized_sort (set cs) s = exenormalized_sort cs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_sort (set cs) s = exenormalized_sort cs s", "using exenormalized_sort_def normalize_sort_code"], ["proof (prove)\nusing this:\n  exenormalized_sort ?cs ?s \\<equiv> exenormalize_sort ?cs ?s = ?s\n  normalize_sort (set ?cs) ?s = exenormalize_sort ?cs ?s\n\ngoal (1 subgoal):\n 1. normalized_sort (set cs) s = exenormalized_sort cs s", "by presburger"], ["", "definition [simp]: \"exewf_sort sub S \\<equiv> exenormalized_sort sub S \\<and> exesort_ex sub S\""], ["", "lemma wf_sort_code:\n  assumes \"exe_class_conds sub\"\n  shows \"wf_sort (set sub) S = exewf_sort sub S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_sort (set sub) S = exewf_sort sub S", "using normalized_sort_code sort_ex_code assms"], ["proof (prove)\nusing this:\n  normalized_sort (set ?cs) ?s = exenormalized_sort ?cs ?s\n  sort_ex (set ?rel) ?S = exesort_ex ?rel ?S\n  exe_class_conds sub\n\ngoal (1 subgoal):\n 1. wf_sort (set sub) S = exewf_sort sub S", "by (simp add: sort_ex_code wf_sort_def)"], ["", "declare exewf_sort_def[code del]"], ["", "lemma [code]: \"exewf_sort sub S \\<equiv> (S = {} \\<or> exenormalized_sort sub S \\<and> exesort_ex sub S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exewf_sort sub S \\<equiv>\n    S = full_sort \\<or> exenormalized_sort sub S \\<and> exesort_ex sub S", "by simp (smt ball_empty bot_set_def empty_Collect_eq)"], ["", "definition \"exe_all_normalized_and_ex_tcsigs cs arss\n \\<equiv> (\\<forall>ars \\<in> snd ` set arss . \\<forall>ss \\<in> snd ` set ars . \\<forall>s \\<in> set ss. exewf_sort cs s)\""], ["", "lemma all_normalized_and_ex_tcsigs_imp_exe_all_normalized_and_ex_tcsigs:\n  assumes \"exe_ars_conds arss\" \"all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)\" \n  shows \"exe_all_normalized_and_ex_tcsigs cs arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "have ac: \"alist_conds arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alist_conds arss", "using assms(1) exe_ars_conds_def"], ["proof (prove)\nusing this:\n  exe_ars_conds arss\n  exe_ars_conds ?arss =\n  (alist_conds ?arss \\<and>\n   (\\<forall>ars\\<in>snd ` set ?arss. alist_conds ars))\n\ngoal (1 subgoal):\n 1. alist_conds arss", "by blast"], ["proof (state)\nthis:\n  alist_conds arss\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "{"], ["proof (state)\nthis:\n  alist_conds arss\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "fix s ars"], ["proof (state)\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "assume a1: \"(s, ars) \\<in> set arss\""], ["proof (state)\nthis:\n  (s, ars) \\<in> set arss\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "fix c Ss"], ["proof (state)\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "assume a2: \"(c,Ss) \\<in> set ars\""], ["proof (state)\nthis:\n  (c, Ss) \\<in> set ars\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "assume a3: \"S \\<in> set Ss\""], ["proof (state)\nthis:\n  S \\<in> set Ss\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "have \"map_of ars \\<in> ran (map_of (map (apsnd map_of) arss))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of ars \\<in> ran (map_of (map (apsnd map_of) arss))", "using ac a1"], ["proof (prove)\nusing this:\n  alist_conds arss\n  (s, ars) \\<in> set arss\n\ngoal (1 subgoal):\n 1. map_of ars \\<in> ran (map_of (map (apsnd map_of) arss))", "by (metis  in_alist_imp_in_map_of ranI translate_ars.simps)"], ["proof (state)\nthis:\n  map_of ars \\<in> ran (map_of (map (apsnd map_of) arss))\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "moreover"], ["proof (state)\nthis:\n  map_of ars \\<in> ran (map_of (map (apsnd map_of) arss))\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "have \"Ss \\<in> ran (map_of ars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ss \\<in> ran (map_of ars)", "using a1 a2 assms(1)"], ["proof (prove)\nusing this:\n  (s, ars) \\<in> set arss\n  (c, Ss) \\<in> set ars\n  exe_ars_conds arss\n\ngoal (1 subgoal):\n 1. Ss \\<in> ran (map_of ars)", "by (metis exe_ars_conds_def map_of_is_SomeI ranI ran_distinct)"], ["proof (state)\nthis:\n  Ss \\<in> ran (map_of ars)\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "ultimately"], ["proof (chain)\npicking this:\n  map_of ars \\<in> ran (map_of (map (apsnd map_of) arss))\n  Ss \\<in> ran (map_of ars)", "have \"wf_sort (set cs) S\""], ["proof (prove)\nusing this:\n  map_of ars \\<in> ran (map_of (map (apsnd map_of) arss))\n  Ss \\<in> ran (map_of ars)\n\ngoal (1 subgoal):\n 1. wf_sort (set cs) S", "using assms(2) a1 a2 a3"], ["proof (prove)\nusing this:\n  map_of ars \\<in> ran (map_of (map (apsnd map_of) arss))\n  Ss \\<in> ran (map_of ars)\n  all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)\n  (s, ars) \\<in> set arss\n  (c, Ss) \\<in> set ars\n  S \\<in> set Ss\n\ngoal (1 subgoal):\n 1. wf_sort (set cs) S", "by (auto simp add: all_normalized_and_ex_tcsigs_def )"], ["proof (state)\nthis:\n  wf_sort (set cs) S\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?s2, ?ars2) \\<in> set arss; (?c2, ?Ss2) \\<in> set ?ars2;\n   ?S2 \\<in> set ?Ss2\\<rbrakk>\n  \\<Longrightarrow> wf_sort (set cs) ?S2\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s2, ?ars2) \\<in> set arss; (?c2, ?Ss2) \\<in> set ?ars2;\n   ?S2 \\<in> set ?Ss2\\<rbrakk>\n  \\<Longrightarrow> wf_sort (set cs) ?S2\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "using normalize_sort_code wf_sort_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s2, ?ars2) \\<in> set arss; (?c2, ?Ss2) \\<in> set ?ars2;\n   ?S2 \\<in> set ?Ss2\\<rbrakk>\n  \\<Longrightarrow> wf_sort (set cs) ?S2\n  normalize_sort (set ?cs) ?s = exenormalize_sort ?cs ?s\n  wf_sort ?sub ?S = (normalized_sort ?sub ?S \\<and> sort_ex ?sub ?S)\n\ngoal (1 subgoal):\n 1. exe_all_normalized_and_ex_tcsigs cs arss", "by (clarsimp simp add: all_normalized_and_ex_tcsigs_def exe_all_normalized_and_ex_tcsigs_def\n      exe_ars_conds_def wf_sort_def wf_sort_code normalize_sort_def sort_ex_code)"], ["proof (state)\nthis:\n  exe_all_normalized_and_ex_tcsigs cs arss\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exe_all_normalized_and_ex_tcsigs_imp_all_normalized_and_ex_tcsigs: \n  assumes \"exe_ars_conds arss\" \"exe_all_normalized_and_ex_tcsigs cs arss\"\n  shows \"all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "fix ars ss s"], ["proof (state)\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "assume p: \"ars \\<in> ran (map_of (map (apsnd map_of) arss))\"\n      \"ss \\<in> ran ars\" \"s \\<in> set ss\""], ["proof (state)\nthis:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))\n  ss \\<in> ran ars\n  s \\<in> set ss\n\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "from p(1)"], ["proof (chain)\npicking this:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))", "obtain name where \"map_of (map (apsnd map_of) arss) name = Some ars\""], ["proof (prove)\nusing this:\n  ars \\<in> ran (map_of (map (apsnd map_of) arss))\n\ngoal (1 subgoal):\n 1. (\\<And>name.\n        map_of (map (apsnd map_of) arss) name = Some ars \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson in_range_if_ex_key)"], ["proof (state)\nthis:\n  map_of (map (apsnd map_of) arss) name = Some ars\n\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "from this"], ["proof (chain)\npicking this:\n  map_of (map (apsnd map_of) arss) name = Some ars", "obtain arsl where \"(name, arsl) \\<in> set arss\" \"map_of arsl = ars\""], ["proof (prove)\nusing this:\n  map_of (map (apsnd map_of) arss) name = Some ars\n\ngoal (1 subgoal):\n 1. (\\<And>arsl.\n        \\<lbrakk>(name, arsl) \\<in> set arss; map_of arsl = ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  map_of (map (apsnd map_of) arss) name = Some ars\n  exe_ars_conds arss\n\ngoal (1 subgoal):\n 1. (\\<And>arsl.\n        \\<lbrakk>(name, arsl) \\<in> set arss; map_of arsl = ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: exe_ars_conds_def)"], ["proof (state)\nthis:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "from this"], ["proof (chain)\npicking this:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars", "obtain c where c: \"ars c = Some ss\""], ["proof (prove)\nusing this:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n\ngoal (1 subgoal):\n 1. (\\<And>c. ars c = Some ss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using in_range_if_ex_key p(2)"], ["proof (prove)\nusing this:\n  (name, arsl) \\<in> set arss\n  map_of arsl = ars\n  (?v \\<in> ran ?m) = (\\<exists>k. ?m k = Some ?v)\n  ss \\<in> ran ars\n\ngoal (1 subgoal):\n 1. (\\<And>c. ars c = Some ss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  ars c = Some ss\n\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "have \"exewf_sort cs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exewf_sort cs s", "by (metis (no_types, hide_lams) \\<open>(name, arsl) \\<in> set arss\\<close> \\<open>map_of arsl = ars\\<close> assms(1) assms(2) \n          exe_all_normalized_and_ex_tcsigs_def exe_ars_conds_def image_iff p(2) p(3) ran_distinct snd_conv)"], ["proof (state)\nthis:\n  exewf_sort cs s\n\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "hence \"wf_sort (set cs) s\""], ["proof (prove)\nusing this:\n  exewf_sort cs s\n\ngoal (1 subgoal):\n 1. wf_sort (set cs) s", "by (simp add: normalize_sort_code sort_ex_code wf_sort_def)"], ["proof (state)\nthis:\n  wf_sort (set cs) s\n\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?ars2 \\<in> ran (map_of (map (apsnd map_of) arss));\n   ?ss2 \\<in> ran ?ars2; ?s2 \\<in> set ?ss2\\<rbrakk>\n  \\<Longrightarrow> wf_sort (set cs) ?s2\n\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "note 1 = this"], ["proof (state)\nthis:\n  \\<lbrakk>?ars2 \\<in> ran (map_of (map (apsnd map_of) arss));\n   ?ss2 \\<in> ran ?ars2; ?s2 \\<in> set ?ss2\\<rbrakk>\n  \\<Longrightarrow> wf_sort (set cs) ?s2\n\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "using 1"], ["proof (prove)\nusing this:\n  \\<lbrakk>?ars2 \\<in> ran (map_of (map (apsnd map_of) arss));\n   ?ss2 \\<in> ran ?ars2; ?s2 \\<in> set ?ss2\\<rbrakk>\n  \\<Longrightarrow> wf_sort (set cs) ?s2\n\ngoal (1 subgoal):\n 1. all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)", "by (clarsimp simp add: wf_sort_def all_normalized_and_ex_tcsigs_def\n        exe_all_normalized_and_ex_tcsigs_def)"], ["proof (state)\nthis:\n  all_normalized_and_ex_tcsigs (set cs) (translate_ars arss)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma all_normalized_and_ex_tcsigs_iff_exe_all_normalized_and_ex_tcsigs:\n  \"exe_ars_conds arss \\<Longrightarrow> all_normalized_and_ex_tcsigs (set cs) (translate_ars arss) \n    \\<longleftrightarrow> exe_all_normalized_and_ex_tcsigs cs arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    all_normalized_and_ex_tcsigs (set cs) (translate_ars arss) =\n    exe_all_normalized_and_ex_tcsigs cs arss", "using all_normalized_and_ex_tcsigs_imp_exe_all_normalized_and_ex_tcsigs exe_all_normalized_and_ex_tcsigs_imp_all_normalized_and_ex_tcsigs"], ["proof (prove)\nusing this:\n  \\<lbrakk>exe_ars_conds ?arss;\n   all_normalized_and_ex_tcsigs (set ?cs) (translate_ars ?arss)\\<rbrakk>\n  \\<Longrightarrow> exe_all_normalized_and_ex_tcsigs ?cs ?arss\n  \\<lbrakk>exe_ars_conds ?arss;\n   exe_all_normalized_and_ex_tcsigs ?cs ?arss\\<rbrakk>\n  \\<Longrightarrow> all_normalized_and_ex_tcsigs (set ?cs)\n                     (translate_ars ?arss)\n\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    all_normalized_and_ex_tcsigs (set cs) (translate_ars arss) =\n    exe_all_normalized_and_ex_tcsigs cs arss", "by blast"], ["", "definition [simp]: \"exe_wf_tcsigs (cs :: (class \\<times> class) list) arss \\<equiv> \n    exe_coregular_tcsigs cs arss \n  \\<and> exe_complete_tcsigs cs arss\n  \\<and> exe_consistent_length_tcsigs arss\n  \\<and> exe_all_normalized_and_ex_tcsigs cs arss\""], ["", "lemma wf_tcsigs_iff_exe_wf_tcsigs:\n  \"exe_ars_conds arss \\<Longrightarrow> wf_tcsigs (set cs) (translate_ars arss) \\<longleftrightarrow> exe_wf_tcsigs cs arss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    wf_tcsigs (set cs) (translate_ars arss) = exe_wf_tcsigs cs arss", "using all_normalized_and_ex_tcsigs_iff_exe_all_normalized_and_ex_tcsigs \n    consistent_length_tcsigs_imp_exe_consistent_length_tcsigs \n    coregular_tcsigs_iff_exe_coregular_tcsigs exe_complete_tcsigs_iff_complete_tcsigs \n    exe_consistent_length_tcsigs_imp_consistent_length_tcsigs exe_wf_tcsigs_def wf_tcsigs_def"], ["proof (prove)\nusing this:\n  exe_ars_conds ?arss \\<Longrightarrow>\n  all_normalized_and_ex_tcsigs (set ?cs) (translate_ars ?arss) =\n  exe_all_normalized_and_ex_tcsigs ?cs ?arss\n  \\<lbrakk>exe_ars_conds ?arss;\n   consistent_length_tcsigs (translate_ars ?arss)\\<rbrakk>\n  \\<Longrightarrow> exe_consistent_length_tcsigs ?arss\n  exe_ars_conds ?arss \\<Longrightarrow>\n  coregular_tcsigs (set ?cs) (translate_ars ?arss) =\n  exe_coregular_tcsigs ?cs ?arss\n  exe_ars_conds ?arss \\<Longrightarrow>\n  complete_tcsigs (set ?cs) (translate_ars ?arss) =\n  exe_complete_tcsigs ?cs ?arss\n  \\<lbrakk>exe_ars_conds ?arss; exe_consistent_length_tcsigs ?arss\\<rbrakk>\n  \\<Longrightarrow> consistent_length_tcsigs (translate_ars ?arss)\n  exe_wf_tcsigs ?cs ?arss \\<equiv>\n  exe_coregular_tcsigs ?cs ?arss \\<and>\n  exe_complete_tcsigs ?cs ?arss \\<and>\n  exe_consistent_length_tcsigs ?arss \\<and>\n  exe_all_normalized_and_ex_tcsigs ?cs ?arss\n  wf_tcsigs ?sub ?tcs =\n  (coregular_tcsigs ?sub ?tcs \\<and>\n   complete_tcsigs ?sub ?tcs \\<and>\n   consistent_length_tcsigs ?tcs \\<and>\n   all_normalized_and_ex_tcsigs ?sub ?tcs)\n\ngoal (1 subgoal):\n 1. exe_ars_conds arss \\<Longrightarrow>\n    wf_tcsigs (set cs) (translate_ars arss) = exe_wf_tcsigs cs arss", "by blast"], ["", "fun exe_antisym :: \"('a \\<times> 'a) list \\<Rightarrow> bool\" where\n  \"exe_antisym [] \\<longleftrightarrow> True\"\n| \"exe_antisym ((x,y)#r) \\<longleftrightarrow> ((y,x)\\<in>set r \\<longrightarrow> x=y) \\<and> exe_antisym r\""], ["", "lemma exe_antisym_imp_antisym: \"exe_antisym l \\<Longrightarrow> antisym (set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_antisym l \\<Longrightarrow> antisym (set l)", "by (induction l) (auto simp add: antisym_def)"], ["", "lemma antisym_imp_exe_antisym: \"antisym (set l) \\<Longrightarrow> exe_antisym l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisym (set l) \\<Longrightarrow> exe_antisym l", "proof (induction l)"], ["proof (state)\ngoal (2 subgoals):\n 1. antisym (set []) \\<Longrightarrow> exe_antisym []\n 2. \\<And>a l.\n       \\<lbrakk>antisym (set l) \\<Longrightarrow> exe_antisym l;\n        antisym (set (a # l))\\<rbrakk>\n       \\<Longrightarrow> exe_antisym (a # l)", "case Nil"], ["proof (state)\nthis:\n  antisym (set [])\n\ngoal (2 subgoals):\n 1. antisym (set []) \\<Longrightarrow> exe_antisym []\n 2. \\<And>a l.\n       \\<lbrakk>antisym (set l) \\<Longrightarrow> exe_antisym l;\n        antisym (set (a # l))\\<rbrakk>\n       \\<Longrightarrow> exe_antisym (a # l)", "then"], ["proof (chain)\npicking this:\n  antisym (set [])", "show ?case"], ["proof (prove)\nusing this:\n  antisym (set [])\n\ngoal (1 subgoal):\n 1. exe_antisym []", "by simp"], ["proof (state)\nthis:\n  exe_antisym []\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>antisym (set l) \\<Longrightarrow> exe_antisym l;\n        antisym (set (a # l))\\<rbrakk>\n       \\<Longrightarrow> exe_antisym (a # l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>antisym (set l) \\<Longrightarrow> exe_antisym l;\n        antisym (set (a # l))\\<rbrakk>\n       \\<Longrightarrow> exe_antisym (a # l)", "case (Cons a l)"], ["proof (state)\nthis:\n  antisym (set l) \\<Longrightarrow> exe_antisym l\n  antisym (set (a # l))\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>antisym (set l) \\<Longrightarrow> exe_antisym l;\n        antisym (set (a # l))\\<rbrakk>\n       \\<Longrightarrow> exe_antisym (a # l)", "then"], ["proof (chain)\npicking this:\n  antisym (set l) \\<Longrightarrow> exe_antisym l\n  antisym (set (a # l))", "show ?case"], ["proof (prove)\nusing this:\n  antisym (set l) \\<Longrightarrow> exe_antisym l\n  antisym (set (a # l))\n\ngoal (1 subgoal):\n 1. exe_antisym (a # l)", "by (simp add: antisym_def) (metis exe_antisym.simps(2) surj_pair)"], ["proof (state)\nthis:\n  exe_antisym (a # l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma antisym_iff_exe_antisym: \"antisym (set l) = exe_antisym l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisym (set l) = exe_antisym l", "using antisym_imp_exe_antisym exe_antisym_imp_antisym"], ["proof (prove)\nusing this:\n  antisym (set ?l) \\<Longrightarrow> exe_antisym ?l\n  exe_antisym ?l \\<Longrightarrow> antisym (set ?l)\n\ngoal (1 subgoal):\n 1. antisym (set l) = exe_antisym l", "by blast"], ["", "definition \"exe_wf_subclass cs = (trans (set cs) \\<and> exe_antisym cs \\<and> Refl (set cs))\""], ["", "lemma wf_classes_iff_exe_wf_classes: \"wf_subclass (set cs) \\<longleftrightarrow> exe_wf_subclass cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_subclass (set cs) = exe_wf_subclass cs", "by (simp add: antisym_iff_exe_antisym exe_wf_subclass_def)"], ["", "definition [simp]: \"exe_wf_osig oss \\<equiv> exe_wf_subclass (execlasses oss)\n  \\<and> exe_wf_tcsigs (execlasses oss) (exetcsigs oss) \\<and> exe_osig_conds oss\""], ["", "lemma exe_wf_osig_imp_wf_osig: \"exe_wf_osig oss \\<Longrightarrow> wf_osig (translate_osig oss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_wf_osig oss \\<Longrightarrow> wf_osig (translate_osig oss)", "using exe_coregular_tcsigs_imp_coregular_tcsigs exe_complete_tcsigs_imp_complete_tcsigs\n    exe_complete_tcsigs_imp_complete_tcsigs exe_all_normalized_and_ex_tcsigs_imp_all_normalized_and_ex_tcsigs\n    exe_consistent_length_tcsigs_imp_consistent_length_tcsigs"], ["proof (prove)\nusing this:\n  \\<lbrakk>exe_ars_conds ?arss; exe_coregular_tcsigs ?cs ?arss\\<rbrakk>\n  \\<Longrightarrow> coregular_tcsigs (set ?cs) (translate_ars ?arss)\n  \\<lbrakk>exe_ars_conds ?arss; exe_complete_tcsigs ?cs ?arss\\<rbrakk>\n  \\<Longrightarrow> complete_tcsigs (set ?cs) (translate_ars ?arss)\n  \\<lbrakk>exe_ars_conds ?arss; exe_complete_tcsigs ?cs ?arss\\<rbrakk>\n  \\<Longrightarrow> complete_tcsigs (set ?cs) (translate_ars ?arss)\n  \\<lbrakk>exe_ars_conds ?arss;\n   exe_all_normalized_and_ex_tcsigs ?cs ?arss\\<rbrakk>\n  \\<Longrightarrow> all_normalized_and_ex_tcsigs (set ?cs)\n                     (translate_ars ?arss)\n  \\<lbrakk>exe_ars_conds ?arss; exe_consistent_length_tcsigs ?arss\\<rbrakk>\n  \\<Longrightarrow> consistent_length_tcsigs (translate_ars ?arss)\n\ngoal (1 subgoal):\n 1. exe_wf_osig oss \\<Longrightarrow> wf_osig (translate_osig oss)", "by (cases oss) (auto simp add: exe_wf_subclass_def exe_antisym_imp_antisym  exe_osig_conds_def)"], ["", "lemma classes_translate: \"exe_osig_conds oss \\<Longrightarrow> subclass (translate_osig oss) = set (execlasses oss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_osig_conds oss \\<Longrightarrow>\n    subclass (translate_osig oss) = set (fst oss)", "by (cases oss) simp_all"], ["", "lemma tcsigs_translate: \"exe_osig_conds oss\n  \\<Longrightarrow> tcsigs (translate_osig oss) = translate_ars (exetcsigs oss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_osig_conds oss \\<Longrightarrow>\n    tcsigs (translate_osig oss) = translate_ars (snd oss)", "by (cases oss) simp_all"], ["", "lemma wf_osig_translate_imp_exe_osig_conds:\n  \"wf_osig (translate_osig oss) \\<Longrightarrow> exe_osig_conds oss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_osig (translate_osig oss) \\<Longrightarrow> exe_osig_conds oss", "using illformed_osig_not_wf_osig"], ["proof (prove)\nusing this:\n  \\<not> wf_osig\n          ({},\n           [STR ''A'' \\<mapsto>\n            [STR ''A'' \\<mapsto> [insert STR ''A'' full_sort]]])\n\ngoal (1 subgoal):\n 1. wf_osig (translate_osig oss) \\<Longrightarrow> exe_osig_conds oss", "by (metis translate_osig.elims)"], ["", "lemma wf_osig_imp_exe_wf_osig:\n  assumes \"wf_osig (translate_osig oss)\" shows \"exe_wf_osig oss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_wf_osig oss", "apply (cases \"translate_osig oss\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b. translate_osig oss = (a, b) \\<Longrightarrow> exe_wf_osig oss", "using classes_translate tcsigs_translate assms wf_osig_translate_imp_exe_osig_conds"], ["proof (prove)\nusing this:\n  exe_osig_conds ?oss \\<Longrightarrow>\n  subclass (translate_osig ?oss) = set (fst ?oss)\n  exe_osig_conds ?oss \\<Longrightarrow>\n  tcsigs (translate_osig ?oss) = translate_ars (snd ?oss)\n  wf_osig (translate_osig oss)\n  wf_osig (translate_osig ?oss) \\<Longrightarrow> exe_osig_conds ?oss\n\ngoal (1 subgoal):\n 1. \\<And>a b. translate_osig oss = (a, b) \\<Longrightarrow> exe_wf_osig oss", "by (metis (full_types) exe_osig_conds_def exe_wf_osig_def subclass.simps tcsigs.simps\n      wf_classes_iff_exe_wf_classes wf_osig.simps wf_tcsigs_iff_exe_wf_tcsigs)"], ["", "lemma wf_osig_iff_exe_wf_osig: \"wf_osig (translate_osig oss) \\<longleftrightarrow> exe_wf_osig oss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_osig (translate_osig oss) = exe_wf_osig oss", "using exe_wf_osig_imp_wf_osig wf_osig_imp_exe_wf_osig"], ["proof (prove)\nusing this:\n  exe_wf_osig ?oss \\<Longrightarrow> wf_osig (translate_osig ?oss)\n  wf_osig (translate_osig ?oss) \\<Longrightarrow> exe_wf_osig ?oss\n\ngoal (1 subgoal):\n 1. wf_osig (translate_osig oss) = exe_wf_osig oss", "by blast"], ["", "end"]]}