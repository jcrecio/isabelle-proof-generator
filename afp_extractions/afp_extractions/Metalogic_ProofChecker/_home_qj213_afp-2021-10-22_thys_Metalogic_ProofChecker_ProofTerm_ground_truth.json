{"file_name": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker/ProofTerm.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker", "problem_names": ["lemma \"depth P > 0\"", "lemma \"size P > 0\"", "lemma \"size P \\<ge> depth P\"", "lemma \"partial_nth xs n \\<equiv> partial_nth' xs n\"", "lemma partial_nth_Some_imp_elem: \"partial_nth l n = Some x \\<Longrightarrow> x\\<in>set l\"", "lemma fv_subst_bv1: \n  \"fv (subst_bv1 t lev u) = fv t \\<union> (if loose_bvar1 t lev then fv u else {})\"", "lemma fv_subst_bvs1_upper_bound: \n  \"fv (subst_bvs1 t lev us) \\<subseteq> fv t \\<union> (\\<Union>x\\<in>set us . (fv x))\"", "lemma typ_of_axiom: \"wf_theory thy \\<Longrightarrow> t \\<in> axioms thy \\<Longrightarrow> typ_of t = Some propT\"", "lemma typ_ok_Tv[simp]: \"typ_ok thy (Tv idn S) = wf_sort (subclass (osig (sig thy))) S\"", "lemma typ_ok_contained_tvars_typ_ok: \"typ_ok thy ty \\<Longrightarrow> (idn, S) \\<in> tvsT ty \\<Longrightarrow> typ_ok thy (Tv idn S)\"", "lemma typ_ok_sig_contained_tvars_typ_ok_sig: \n  \"typ_ok_sig \\<Sigma> ty \\<Longrightarrow> (idn, S) \\<in> tvsT ty \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\"", "lemma term_ok'_contained_tvars_typ_ok_sig:\n  \"term_ok' \\<Sigma> t \\<Longrightarrow> (idn, S) \\<in> tvs t \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\"", "lemma term_ok_contained_tvars_typ_ok:\n  \"term_ok thy t \\<Longrightarrow> (idn, S) \\<in> tvs t \\<Longrightarrow> typ_ok thy (Tv idn S)\"", "lemma typ_ok_subst_typ:\n  \"typ_ok thy T \\<Longrightarrow> \\<forall>(_, ty) \\<in> set insts . typ_ok thy ty \\<Longrightarrow> typ_ok thy (subst_typ insts T)\"", "lemma typ_ok_sig_subst_typ:\n  \"typ_ok_sig \\<Sigma> T \\<Longrightarrow> \\<forall>(_, ty) \\<in> set insts . typ_ok_sig \\<Sigma> ty \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts T)\"", "lemma typ_ok_sig_imp_sortsT_ok_sig: \"typ_ok_sig \\<Sigma> T \\<Longrightarrow> S \\<in> SortsT T \\<Longrightarrow> wf_sort (subclass (osig \\<Sigma>)) S\"", "lemma term_ok'_imp_Sorts_ok_sig: \"term_ok' \\<Sigma> t \\<Longrightarrow> S \\<in> Sorts t \\<Longrightarrow> wf_sort (subclass (osig \\<Sigma>)) S\"", "lemma replay'_sound_pre:\n  assumes thy: \"wf_theory thy\"\n  (* Assumptions *)\n  assumes HS_invs: \n    \"\\<And>x. x\\<in>set Hs \\<Longrightarrow> term_ok thy x\"\n    \"\\<And>x. x\\<in>set Hs \\<Longrightarrow> typ_of x = Some propT\"\n  (* Names used *)\n  assumes ns_invs:\n    \"finite ns\"\n    \"fst ` FV (set Hs) \\<subseteq> ns\"\n    \"fst ` fv_Proof P \\<subseteq> ns\"\n  (* Fviables used *)\n  assumes vs_invs:\n    \"fst ` set vs \\<subseteq> ns\"\n  (* Checked proof can be replay'ed using proves*)\n  assumes \"replay' thy vs ns Hs P = Some res\"\n  shows \"thy, (set Hs) \\<turnstile> res\"", "lemma finite_fv_Proof: \"finite (fv_Proof P)\"", "lemma replay''_sound:\n  assumes \"wf_theory thy\"\n  (* Assumptions *)\n  assumes HS_invs: \n    \"\\<And>x. x\\<in>set Hs \\<Longrightarrow> term_ok thy x\"\n    \"\\<And>x. x\\<in>set Hs \\<Longrightarrow> typ_of x = Some propT\" \n  (* Names used *)\n  assumes ns_invs:\n    \"finite ns\"\n    \"fst ` FV (set Hs) \\<subseteq> ns\"\n    \"fst ` fv_Proof P \\<subseteq> ns\"\n  (* Fviables used *)\n  assumes vs_invs:\n    \"fst ` set vs \\<subseteq> ns\"\n  (* Checked proof can be replayed using proves*)\n  assumes \"replay'' thy vs ns Hs P = Some res\"\n  shows \"thy, (set Hs) \\<turnstile> res\"", "lemma \n  assumes \"wf_theory thy\"\n  assumes \"replay'' thy [] (fst ` fv_Proof P) [] P = Some res\"\n  shows \"thy, set [] \\<turnstile> res\"", "lemma replay''_sound_pre_hyps:\n  assumes \"wf_theory thy\"\n  (* This can be checked independently before running replay'. Could also check during replay' in Hyp step... *)\n  assumes \"\\<And>x. x \\<in> set (hyps P) \\<Longrightarrow> term_ok thy x\"\n  assumes \"\\<And>x. x \\<in> set (hyps P) \\<Longrightarrow> typ_of x = Some propT\"\n  assumes \"replay'' thy [] (fst ` (fv_Proof P \\<union> FV (set (hyps P)))) (hyps P) P = Some res\"\n  shows \"thy, set (hyps P) \\<turnstile> res\"", "lemma replay_sound_pre_hyps:\n  assumes \"wf_theory thy\"\n  assumes \"replay thy P = Some res\"\n  shows \"thy, set (hyps P) \\<turnstile> res\"", "lemma check_proof_sound:\n  shows \"check_proof thy P res \\<Longrightarrow> thy, set (hyps P) \\<turnstile> res\"", "lemma check_proof_really_sound:\n  assumes \"check_proof thy P res\"\n  shows \"thy, set (hyps P) \\<tturnstile> res\""], "translations": [["", "lemma \"depth P > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < ProofTerm.depth P", "by (induction P) auto"], ["", "lemma \"size P > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < ProofTerm.size P", "by (induction P) auto"], ["", "lemma \"size P \\<ge> depth P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ProofTerm.depth P \\<le> ProofTerm.size P", "by (induction P) auto"], ["", "fun partial_nth :: \"'a list \\<Rightarrow> nat \\<Rightarrow> 'a option\" where\n  \"partial_nth [] _ = None\"\n| \"partial_nth (x#xs) 0 = Some x\"\n| \"partial_nth (x#xs) (Suc n) = partial_nth xs n\""], ["", "definition [simp]: \"partial_nth' xs n \\<equiv> if n < length xs then Some (nth xs n) else None\""], ["", "lemma \"partial_nth xs n \\<equiv> partial_nth' xs n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_nth xs n \\<equiv> partial_nth' xs n", "by (induction rule: partial_nth.induct) auto"], ["", "lemma partial_nth_Some_imp_elem: \"partial_nth l n = Some x \\<Longrightarrow> x\\<in>set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_nth l n = Some x \\<Longrightarrow> x \\<in> set l", "by (induction rule: partial_nth.induct) auto"], ["", "text\\<open>The core of the proof checker\\<close>"], ["", "fun replay' :: \"theory \\<Rightarrow> (variable \\<times> typ) list \\<Rightarrow> variable set \n  \\<Rightarrow> term list \\<Rightarrow> proofterm \\<Rightarrow> term option\" where\n  \"replay' thy _ _ Hs (PAxm t Tis) = (if inst_ok thy Tis \\<and> term_ok thy t\n    then if t \\<in> axioms thy\n      then Some (forall_intro_vars (subst_typ' Tis t) []) \n    else None else None)\"\n| \"replay' thy _ _ Hs (PBound n) = partial_nth Hs n\" \n| \"replay' thy vs ns Hs (Abst T p) = (if typ_ok thy T \n    then (let (s',ns') = variant_variable (Free STR ''default'') ns in \n      map_option (mk_all s' T) (replay' thy ((s', T) # vs) ns' Hs p))\n    else None)\"\n| \"replay' thy vs ns Hs (Appt p t) = \n    (let rep = replay' thy vs ns Hs p in\n    let t' = subst_bvs (map (\\<lambda>(x,y) . Fv x y) vs) t in\n      case (rep, typ_of t') of\n        (Some (Ct s (Ty fun1 [Ty fun2 [\\<tau>, Ty propT1 Nil], Ty propT2 Nil]) $ b), Some \\<tau>') \\<Rightarrow> \n          if s = STR ''Pure.all'' \\<and> fun1 = STR ''fun'' \\<and> fun2 = STR ''fun'' \n            \\<and> propT1 = STR ''prop'' \\<and> propT2 = STR ''prop''\n             \\<and> \\<tau>=\\<tau>' \\<and> term_ok thy t'\n            then Some (b \\<bullet> t') else None\n      | _ \\<Rightarrow> None)\" \n| \"replay' thy vs ns Hs (AbsP t p) = \n    (let t' = subst_bvs (map (\\<lambda>(x,y) . Fv x y) vs) t in\n    let rep = replay' thy vs ns (t'#Hs) p in\n      (if typ_of t' = Some propT \\<and> term_ok thy t' then map_option (mk_imp t') rep else None))\"\n| \"replay' thy vs ns Hs (AppP p1 p2) = \n    (let rep1 = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm in\n    let rep2 = Option.bind (replay' thy vs ns Hs p2) beta_eta_norm in\n      (case (rep1, rep2) of (\n        Some (Ct imp (Ty fn1 [Ty prp1 [], Ty fn2 [Ty prp2 [], Ty prp3 []]]) $ A $ B),\n        Some A') \\<Rightarrow> \n          if imp = STR ''Pure.imp'' \\<and> fn1 = STR ''fun'' \\<and> fn2 = STR ''fun''\n            \\<and> prp1 = STR ''prop'' \\<and> prp2 = STR ''prop'' \\<and> prp3 = STR ''prop'' \\<and> A=A' \n          then Some B else None\n        | _ \\<Rightarrow> None))\"\n| \"replay' thy vs ns Hs (OfClass ty c) = (if has_sort (osig (sig thy)) ty {c} \n    \\<and> typ_ok thy ty\n    then (case const_type (sig thy) (const_of_class c) of \n      Some (Ty fun [Ty it [ity], Ty prop []]) \\<Rightarrow> \n        if ity = tvariable STR '''a'' \\<and> fun = STR ''fun'' \\<and> prop = STR ''prop'' \\<and> it = STR ''itself''\n          then Some (mk_of_class ty c) else None | _ \\<Rightarrow> None) else None)\"\n| \"replay' thy vs ns Hs (Hyp t) = (if t\\<in>set Hs then Some t else None)\""], ["", "lemma fv_subst_bv1: \n  \"fv (subst_bv1 t lev u) = fv t \\<union> (if loose_bvar1 t lev then fv u else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (subst_bv1 t lev u) =\n    fv t \\<union> (if loose_bvar1 t lev then fv u else {})", "by (induction t lev u rule: subst_bv1.induct) (auto simp add: incr_boundvars_def)"], ["", "(* Needs precondition, doable but diverges from previous checker*)"], ["", "corollary fv_subst_bvs_upper_bound:\n  assumes \"is_closed t\" \n  shows \"fv (subst_bvs us t) \\<subseteq> fv t \\<union> (\\<Union>x\\<in>set us . (fv x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (subst_bvs us t) \\<subseteq> fv t \\<union> \\<Union> (fv ` set us)", "unfolding subst_bvs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (subst_bvs1 t 0 us) \\<subseteq> fv t \\<union> \\<Union> (fv ` set us)", "using assms"], ["proof (prove)\nusing this:\n  is_closed t\n\ngoal (1 subgoal):\n 1. fv (subst_bvs1 t 0 us) \\<subseteq> fv t \\<union> \\<Union> (fv ` set us)", "by (simp add: is_open_def no_loose_bvar_imp_no_subst_bvs1)"], ["", "lemma fv_subst_bvs1_upper_bound: \n  \"fv (subst_bvs1 t lev us) \\<subseteq> fv t \\<union> (\\<Union>x\\<in>set us . (fv x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (subst_bvs1 t lev us)\n    \\<subseteq> fv t \\<union> \\<Union> (fv ` set us)", "proof (induction t lev us rule: subst_bvs1.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n lev args.\n       fv (subst_bvs1 (Bv n) lev args)\n       \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set args)\n 2. \\<And>T body lev args.\n       fv (subst_bvs1 body (lev + 1) args)\n       \\<subseteq> fv body \\<union>\n                   \\<Union> (fv ` set args) \\<Longrightarrow>\n       fv (subst_bvs1 (Abs T body) lev args)\n       \\<subseteq> fv (Abs T body) \\<union> \\<Union> (fv ` set args)\n 3. \\<And>f t lev args.\n       \\<lbrakk>fv (subst_bvs1 f lev args)\n                \\<subseteq> fv f \\<union> \\<Union> (fv ` set args);\n        fv (subst_bvs1 t lev args)\n        \\<subseteq> fv t \\<union> \\<Union> (fv ` set args)\\<rbrakk>\n       \\<Longrightarrow> fv (subst_bvs1 (f $ t) lev args)\n                         \\<subseteq> fv (f $ t) \\<union>\n                                     \\<Union> (fv ` set args)\n 4. \\<And>v va uu_ uv_.\n       fv (subst_bvs1 (Ct v va) uu_ uv_)\n       \\<subseteq> fv (Ct v va) \\<union> \\<Union> (fv ` set uv_)\n 5. \\<And>v va uu_ uv_.\n       fv (subst_bvs1 (Fv v va) uu_ uv_)\n       \\<subseteq> fv (Fv v va) \\<union> \\<Union> (fv ` set uv_)", "case (1 n lev args)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>n lev args.\n       fv (subst_bvs1 (Bv n) lev args)\n       \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set args)\n 2. \\<And>T body lev args.\n       fv (subst_bvs1 body (lev + 1) args)\n       \\<subseteq> fv body \\<union>\n                   \\<Union> (fv ` set args) \\<Longrightarrow>\n       fv (subst_bvs1 (Abs T body) lev args)\n       \\<subseteq> fv (Abs T body) \\<union> \\<Union> (fv ` set args)\n 3. \\<And>f t lev args.\n       \\<lbrakk>fv (subst_bvs1 f lev args)\n                \\<subseteq> fv f \\<union> \\<Union> (fv ` set args);\n        fv (subst_bvs1 t lev args)\n        \\<subseteq> fv t \\<union> \\<Union> (fv ` set args)\\<rbrakk>\n       \\<Longrightarrow> fv (subst_bvs1 (f $ t) lev args)\n                         \\<subseteq> fv (f $ t) \\<union>\n                                     \\<Union> (fv ` set args)\n 4. \\<And>v va uu_ uv_.\n       fv (subst_bvs1 (Ct v va) uu_ uv_)\n       \\<subseteq> fv (Ct v va) \\<union> \\<Union> (fv ` set uv_)\n 5. \\<And>v va uu_ uv_.\n       fv (subst_bvs1 (Fv v va) uu_ uv_)\n       \\<subseteq> fv (Fv v va) \\<union> \\<Union> (fv ` set uv_)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (subst_bvs1 (Bv n) lev args)\n    \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set args)", "proof (induction args arbitrary: n lev)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n lev.\n       fv (subst_bvs1 (Bv n) lev [])\n       \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set [])\n 2. \\<And>a args n lev.\n       (\\<And>n lev.\n           fv (subst_bvs1 (Bv n) lev args)\n           \\<subseteq> fv (Bv n) \\<union>\n                       \\<Union> (fv ` set args)) \\<Longrightarrow>\n       fv (subst_bvs1 (Bv n) lev (a # args))\n       \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set (a # args))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>n lev.\n       fv (subst_bvs1 (Bv n) lev [])\n       \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set [])\n 2. \\<And>a args n lev.\n       (\\<And>n lev.\n           fv (subst_bvs1 (Bv n) lev args)\n           \\<subseteq> fv (Bv n) \\<union>\n                       \\<Union> (fv ` set args)) \\<Longrightarrow>\n       fv (subst_bvs1 (Bv n) lev (a # args))\n       \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set (a # args))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (subst_bvs1 (Bv n) lev [])\n    \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set [])", "by simp"], ["proof (state)\nthis:\n  fv (subst_bvs1 (Bv n) lev [])\n  \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set [])\n\ngoal (1 subgoal):\n 1. \\<And>a args n lev.\n       (\\<And>n lev.\n           fv (subst_bvs1 (Bv n) lev args)\n           \\<subseteq> fv (Bv n) \\<union>\n                       \\<Union> (fv ` set args)) \\<Longrightarrow>\n       fv (subst_bvs1 (Bv n) lev (a # args))\n       \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set (a # args))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a args n lev.\n       (\\<And>n lev.\n           fv (subst_bvs1 (Bv n) lev args)\n           \\<subseteq> fv (Bv n) \\<union>\n                       \\<Union> (fv ` set args)) \\<Longrightarrow>\n       fv (subst_bvs1 (Bv n) lev (a # args))\n       \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set (a # args))", "case (Cons a args)"], ["proof (state)\nthis:\n  fv (subst_bvs1 (Bv ?n) ?lev args)\n  \\<subseteq> fv (Bv ?n) \\<union> \\<Union> (fv ` set args)\n\ngoal (1 subgoal):\n 1. \\<And>a args n lev.\n       (\\<And>n lev.\n           fv (subst_bvs1 (Bv n) lev args)\n           \\<subseteq> fv (Bv n) \\<union>\n                       \\<Union> (fv ` set args)) \\<Longrightarrow>\n       fv (subst_bvs1 (Bv n) lev (a # args))\n       \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set (a # args))", "then"], ["proof (chain)\npicking this:\n  fv (subst_bvs1 (Bv ?n) ?lev args)\n  \\<subseteq> fv (Bv ?n) \\<union> \\<Union> (fv ` set args)", "show ?case"], ["proof (prove)\nusing this:\n  fv (subst_bvs1 (Bv ?n) ?lev args)\n  \\<subseteq> fv (Bv ?n) \\<union> \\<Union> (fv ` set args)\n\ngoal (1 subgoal):\n 1. fv (subst_bvs1 (Bv n) lev (a # args))\n    \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set (a # args))", "by simp (metis SUP_upper le_supI1 le_supI2 length_Suc_conv nth_mem set_ConsD set_eq_subset)"], ["proof (state)\nthis:\n  fv (subst_bvs1 (Bv n) lev (a # args))\n  \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set (a # args))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fv (subst_bvs1 (Bv n) lev args)\n  \\<subseteq> fv (Bv n) \\<union> \\<Union> (fv ` set args)\n\ngoal (4 subgoals):\n 1. \\<And>T body lev args.\n       fv (subst_bvs1 body (lev + 1) args)\n       \\<subseteq> fv body \\<union>\n                   \\<Union> (fv ` set args) \\<Longrightarrow>\n       fv (subst_bvs1 (Abs T body) lev args)\n       \\<subseteq> fv (Abs T body) \\<union> \\<Union> (fv ` set args)\n 2. \\<And>f t lev args.\n       \\<lbrakk>fv (subst_bvs1 f lev args)\n                \\<subseteq> fv f \\<union> \\<Union> (fv ` set args);\n        fv (subst_bvs1 t lev args)\n        \\<subseteq> fv t \\<union> \\<Union> (fv ` set args)\\<rbrakk>\n       \\<Longrightarrow> fv (subst_bvs1 (f $ t) lev args)\n                         \\<subseteq> fv (f $ t) \\<union>\n                                     \\<Union> (fv ` set args)\n 3. \\<And>v va uu_ uv_.\n       fv (subst_bvs1 (Ct v va) uu_ uv_)\n       \\<subseteq> fv (Ct v va) \\<union> \\<Union> (fv ` set uv_)\n 4. \\<And>v va uu_ uv_.\n       fv (subst_bvs1 (Fv v va) uu_ uv_)\n       \\<subseteq> fv (Fv v va) \\<union> \\<Union> (fv ` set uv_)", "qed (auto simp add: incr_boundvars_def)"], ["", "lemma typ_of_axiom: \"wf_theory thy \\<Longrightarrow> t \\<in> axioms thy \\<Longrightarrow> typ_of t = Some propT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_theory thy; t \\<in> axioms thy\\<rbrakk>\n    \\<Longrightarrow> typ_of t = Some propT", "by (cases thy rule: theory_full_exhaust) simp"], ["", "fun fv_Proof :: \"proofterm \\<Rightarrow> (variable \\<times> typ) set\" where\n  \"fv_Proof (PAxm t _) = fv t\"\n| \"fv_Proof (PBound _) = empty\"\n| \"fv_Proof (Abst _ p) = fv_Proof p\"\n| \"fv_Proof (AbsP t p) = fv t \\<union> fv_Proof p\"\n| \"fv_Proof (Appt p t) = fv_Proof p \\<union> fv t\"\n| \"fv_Proof (AppP p1 p2) = fv_Proof p1 \\<union> fv_Proof p2\"\n| \"fv_Proof (OfClass _ _) = empty\"\n| \"fv_Proof (Hyp t) = fv t\""], ["", "lemma typ_ok_Tv[simp]: \"typ_ok thy (Tv idn S) = wf_sort (subclass (osig (sig thy))) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok thy (Tv idn S) = wf_sort (subclass (osig (sig thy))) S", "by simp"], ["", "lemma typ_ok_contained_tvars_typ_ok: \"typ_ok thy ty \\<Longrightarrow> (idn, S) \\<in> tvsT ty \\<Longrightarrow> typ_ok thy (Tv idn S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok thy ty; (idn, S) \\<in> tvsT ty\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (Tv idn S)", "by (induction ty) (use split_list typ_ok_Ty in \\<open>all \\<open>fastforce split: option.splits\\<close>\\<close>)"], ["", "lemma typ_ok_sig_contained_tvars_typ_ok_sig: \n  \"typ_ok_sig \\<Sigma> ty \\<Longrightarrow> (idn, S) \\<in> tvsT ty \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> ty; (idn, S) \\<in> tvsT ty\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "by (induction ty) (use split_list typ_ok_sig_Ty in \\<open>all \\<open>fastforce split: option.splits\\<close>\\<close>)"], ["", "lemma term_ok'_contained_tvars_typ_ok_sig:\n  \"term_ok' \\<Sigma> t \\<Longrightarrow> (idn, S) \\<in> tvs t \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "proof (induction t)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Ct x1 x2);\n        (idn, S) \\<in> tvs (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Fv x1 x2);\n        (idn, S) \\<in> tvs (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 4. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 5. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "case (Ct n T)"], ["proof (state)\nthis:\n  term_ok' \\<Sigma> (Ct n T)\n  (idn, S) \\<in> tvs (Ct n T)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Ct x1 x2);\n        (idn, S) \\<in> tvs (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Fv x1 x2);\n        (idn, S) \\<in> tvs (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 4. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 5. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "hence \"typ_ok_sig \\<Sigma> T\""], ["proof (prove)\nusing this:\n  term_ok' \\<Sigma> (Ct n T)\n  (idn, S) \\<in> tvs (Ct n T)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> T", "by (auto split: option.splits)"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> T\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Ct x1 x2);\n        (idn, S) \\<in> tvs (Ct x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Fv x1 x2);\n        (idn, S) \\<in> tvs (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 4. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 5. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "then"], ["proof (chain)\npicking this:\n  typ_ok_sig \\<Sigma> T", "show ?case"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> T\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (Tv idn S)", "using typ_ok_sig_contained_tvars_typ_ok_sig Ct"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> T\n  \\<lbrakk>typ_ok_sig ?\\<Sigma> ?ty; (?idn, ?S) \\<in> tvsT ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig ?\\<Sigma> (Tv ?idn ?S)\n  term_ok' \\<Sigma> (Ct n T)\n  (idn, S) \\<in> tvs (Ct n T)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (Tv idn S)", "by auto"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (Tv idn S)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Fv x1 x2);\n        (idn, S) \\<in> tvs (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 4. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Fv x1 x2);\n        (idn, S) \\<in> tvs (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 4. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "case (Fv idn T)"], ["proof (state)\nthis:\n  term_ok' \\<Sigma> (Fv idn T)\n  (idn, S) \\<in> tvs (Fv idn T)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Fv x1 x2);\n        (idn, S) \\<in> tvs (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 4. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "hence \"typ_ok_sig \\<Sigma> T\""], ["proof (prove)\nusing this:\n  term_ok' \\<Sigma> (Fv idn T)\n  (idn, S) \\<in> tvs (Fv idn T)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> T", "by (auto split: option.splits)"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> T\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>term_ok' \\<Sigma> (Fv x1 x2);\n        (idn, S) \\<in> tvs (Fv x1 x2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 4. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "then"], ["proof (chain)\npicking this:\n  typ_ok_sig \\<Sigma> T", "show ?case"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> T\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (Tv idn S)", "using typ_ok_sig_contained_tvars_typ_ok_sig Fv"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> T\n  \\<lbrakk>typ_ok_sig ?\\<Sigma> ?ty; (?idn, ?S) \\<in> tvsT ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig ?\\<Sigma> (Tv ?idn ?S)\n  term_ok' \\<Sigma> (Fv idn T)\n  (idn, S) \\<in> tvs (Fv idn T)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (Tv idn S)", "by auto"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (Tv idn S)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "case (Bv n)"], ["proof (state)\nthis:\n  term_ok' \\<Sigma> (Bv n)\n  (idn, S) \\<in> tvs (Bv n)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>term_ok' \\<Sigma> (Bv x); (idn, S) \\<in> tvs (Bv x)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 3. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "then"], ["proof (chain)\npicking this:\n  term_ok' \\<Sigma> (Bv n)\n  (idn, S) \\<in> tvs (Bv n)", "show ?case"], ["proof (prove)\nusing this:\n  term_ok' \\<Sigma> (Bv n)\n  (idn, S) \\<in> tvs (Bv n)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (Tv idn S)", "by auto"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (Tv idn S)\n\ngoal (2 subgoals):\n 1. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "case (Abs T t)"], ["proof (state)\nthis:\n  \\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n  term_ok' \\<Sigma> (Abs T t)\n  (idn, S) \\<in> tvs (Abs T t)\n\ngoal (2 subgoals):\n 1. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "hence \"typ_ok_sig \\<Sigma> T\""], ["proof (prove)\nusing this:\n  \\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n  term_ok' \\<Sigma> (Abs T t)\n  (idn, S) \\<in> tvs (Abs T t)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> T", "by (auto split: option.splits)"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> T\n\ngoal (2 subgoals):\n 1. \\<And>x1 t.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (Abs x1 t); (idn, S) \\<in> tvs (Abs x1 t)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n 2. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "then"], ["proof (chain)\npicking this:\n  typ_ok_sig \\<Sigma> T", "show ?case"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> T\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (Tv idn S)", "using typ_ok_sig_contained_tvars_typ_ok_sig Abs"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> T\n  \\<lbrakk>typ_ok_sig ?\\<Sigma> ?ty; (?idn, ?S) \\<in> tvsT ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig ?\\<Sigma> (Tv ?idn ?S)\n  \\<lbrakk>term_ok' \\<Sigma> t; (idn, S) \\<in> tvs t\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n  term_ok' \\<Sigma> (Abs T t)\n  (idn, S) \\<in> tvs (Abs T t)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (Tv idn S)", "by fastforce"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (Tv idn S)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "case (App t1 t2)"], ["proof (state)\nthis:\n  \\<lbrakk>term_ok' \\<Sigma> t1; (idn, S) \\<in> tvs t1\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n  \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n  term_ok' \\<Sigma> (t1 $ t2)\n  (idn, S) \\<in> tvs (t1 $ t2)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>\\<lbrakk>term_ok' \\<Sigma> t1;\n                 (idn, S) \\<in> tvs t1\\<rbrakk>\n                \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n        \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S);\n        term_ok' \\<Sigma> (t1 $ t2); (idn, S) \\<in> tvs (t1 $ t2)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>term_ok' \\<Sigma> t1; (idn, S) \\<in> tvs t1\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n  \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n  term_ok' \\<Sigma> (t1 $ t2)\n  (idn, S) \\<in> tvs (t1 $ t2)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>term_ok' \\<Sigma> t1; (idn, S) \\<in> tvs t1\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n  \\<lbrakk>term_ok' \\<Sigma> t2; (idn, S) \\<in> tvs t2\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (Tv idn S)\n  term_ok' \\<Sigma> (t1 $ t2)\n  (idn, S) \\<in> tvs (t1 $ t2)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (Tv idn S)", "by auto"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (Tv idn S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma term_ok_contained_tvars_typ_ok:\n  \"term_ok thy t \\<Longrightarrow> (idn, S) \\<in> tvs t \\<Longrightarrow> typ_ok thy (Tv idn S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>term_ok thy t; (idn, S) \\<in> tvs t\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (Tv idn S)", "using wt_term_def typ_ok_def term_ok'_contained_tvars_typ_ok_sig term_ok_def"], ["proof (prove)\nusing this:\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_ok ?\\<Theta> ?T \\<equiv> wf_type (sig ?\\<Theta>) ?T\n  \\<lbrakk>term_ok' ?\\<Sigma> ?t; (?idn, ?S) \\<in> tvs ?t\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig ?\\<Sigma> (Tv ?idn ?S)\n  term_ok ?\\<Theta> ?t \\<equiv> wt_term (sig ?\\<Theta>) ?t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>term_ok thy t; (idn, S) \\<in> tvs t\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (Tv idn S)", "by blast"], ["", "lemma typ_ok_subst_typ:\n  \"typ_ok thy T \\<Longrightarrow> \\<forall>(_, ty) \\<in> set insts . typ_ok thy ty \\<Longrightarrow> typ_ok thy (subst_typ insts T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok thy T;\n     \\<forall>(uu_, ty)\\<in>set insts. typ_ok thy ty\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts T)", "proof (induction insts T rule: subst_typ.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>insts a Ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set Ts; typ_ok thy x;\n                    \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n                   \\<Longrightarrow> typ_ok thy (subst_typ insts x);\n        typ_ok thy (Ty a Ts);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Ty a Ts))\n 2. \\<And>insts idn S.\n       \\<lbrakk>typ_ok thy (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "case (1 insts n Ts)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> set Ts; typ_ok thy ?x;\n   \\<forall>a\\<in>set insts.\n      case a of (uu_, a) \\<Rightarrow> typ_ok thy a\\<rbrakk>\n  \\<Longrightarrow> typ_ok thy (subst_typ insts ?x)\n  typ_ok thy (Ty n Ts)\n  \\<forall>a\\<in>set insts. case a of (uu_, a) \\<Rightarrow> typ_ok thy a\n\ngoal (2 subgoals):\n 1. \\<And>insts a Ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set Ts; typ_ok thy x;\n                    \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n                   \\<Longrightarrow> typ_ok thy (subst_typ insts x);\n        typ_ok thy (Ty a Ts);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Ty a Ts))\n 2. \\<And>insts idn S.\n       \\<lbrakk>typ_ok thy (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "have \"typ_ok thy x\" if \"x\\<in>set Ts\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok thy x", "by (metis (full_types) \"1.prems\"(1) in_set_conv_decomp_first list_all_append list_all_simps(1)\n      that typ_ok_Ty)"], ["proof (state)\nthis:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok thy ?x\n\ngoal (2 subgoals):\n 1. \\<And>insts a Ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set Ts; typ_ok thy x;\n                    \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n                   \\<Longrightarrow> typ_ok thy (subst_typ insts x);\n        typ_ok thy (Ty a Ts);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Ty a Ts))\n 2. \\<And>insts idn S.\n       \\<lbrakk>typ_ok thy (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "hence \"typ_ok thy (subst_typ insts x)\" if \"x\\<in>set Ts\" for x"], ["proof (prove)\nusing this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok thy ?x\n\ngoal (1 subgoal):\n 1. typ_ok thy (subst_typ insts x)", "using that 1"], ["proof (prove)\nusing this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok thy ?x\n  x \\<in> set Ts\n  \\<lbrakk>?x \\<in> set Ts; typ_ok thy ?x;\n   \\<forall>a\\<in>set insts.\n      case a of (uu_, a) \\<Rightarrow> typ_ok thy a\\<rbrakk>\n  \\<Longrightarrow> typ_ok thy (subst_typ insts ?x)\n  typ_ok thy (Ty n Ts)\n  \\<forall>a\\<in>set insts. case a of (uu_, a) \\<Rightarrow> typ_ok thy a\n\ngoal (1 subgoal):\n 1. typ_ok thy (subst_typ insts x)", "by simp"], ["proof (state)\nthis:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok thy (subst_typ insts ?x)\n\ngoal (2 subgoals):\n 1. \\<And>insts a Ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set Ts; typ_ok thy x;\n                    \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n                   \\<Longrightarrow> typ_ok thy (subst_typ insts x);\n        typ_ok thy (Ty a Ts);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Ty a Ts))\n 2. \\<And>insts idn S.\n       \\<lbrakk>typ_ok thy (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok thy (subst_typ insts ?x)", "show ?case"], ["proof (prove)\nusing this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok thy (subst_typ insts ?x)\n\ngoal (1 subgoal):\n 1. typ_ok thy (subst_typ insts (Ty n Ts))", "using \"1.prems\"(1)"], ["proof (prove)\nusing this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok thy (subst_typ insts ?x)\n  typ_ok thy (Ty n Ts)\n\ngoal (1 subgoal):\n 1. typ_ok thy (subst_typ insts (Ty n Ts))", "by (auto simp add: list_all_iff split: option.splits)"], ["proof (state)\nthis:\n  typ_ok thy (subst_typ insts (Ty n Ts))\n\ngoal (1 subgoal):\n 1. \\<And>insts idn S.\n       \\<lbrakk>typ_ok thy (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>insts idn S.\n       \\<lbrakk>typ_ok thy (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "case (2 insts idn S)"], ["proof (state)\nthis:\n  typ_ok thy (Tv idn S)\n  \\<forall>a\\<in>set insts. case a of (uu_, a) \\<Rightarrow> typ_ok thy a\n\ngoal (1 subgoal):\n 1. \\<And>insts idn S.\n       \\<lbrakk>typ_ok thy (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok thy y\\<rbrakk>\n       \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "then"], ["proof (chain)\npicking this:\n  typ_ok thy (Tv idn S)\n  \\<forall>a\\<in>set insts. case a of (uu_, a) \\<Rightarrow> typ_ok thy a", "show ?case"], ["proof (prove)\nusing this:\n  typ_ok thy (Tv idn S)\n  \\<forall>a\\<in>set insts. case a of (uu_, a) \\<Rightarrow> typ_ok thy a\n\ngoal (1 subgoal):\n 1. typ_ok thy (subst_typ insts (Tv idn S))", "proof(cases \"(idn, S) \\<in> set (map fst insts)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<in> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))\n 2. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "case True"], ["proof (state)\nthis:\n  (idn, S) \\<in> set (map fst insts)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<in> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))\n 2. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "obtain ty where ty: \"lookup (\\<lambda>k. k=(idn,S)) insts = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ty.\n        lookup (\\<lambda>k. k = (idn, S)) insts = Some ty \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) True lookup_None_iff not_Some_eq)"], ["proof (state)\nthis:\n  lookup (\\<lambda>k. k = (idn, S)) insts = Some ty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<in> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))\n 2. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "hence \"subst_typ insts (Tv idn S) = ty\""], ["proof (prove)\nusing this:\n  lookup (\\<lambda>k. k = (idn, S)) insts = Some ty\n\ngoal (1 subgoal):\n 1. subst_typ insts (Tv idn S) = ty", "by simp"], ["proof (state)\nthis:\n  subst_typ insts (Tv idn S) = ty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<in> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))\n 2. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "then"], ["proof (chain)\npicking this:\n  subst_typ insts (Tv idn S) = ty", "show ?thesis"], ["proof (prove)\nusing this:\n  subst_typ insts (Tv idn S) = ty\n\ngoal (1 subgoal):\n 1. typ_ok thy (subst_typ insts (Tv idn S))", "using \"2.prems\"(2) ty case_prodD lookup_present_eq_key'"], ["proof (prove)\nusing this:\n  subst_typ insts (Tv idn S) = ty\n  \\<forall>a\\<in>set insts. case a of (uu_, a) \\<Rightarrow> typ_ok thy a\n  lookup (\\<lambda>k. k = (idn, S)) insts = Some ty\n  case (?a, ?b) of (c, d) \\<Rightarrow> ?f c d \\<Longrightarrow> ?f ?a ?b\n  lookup (\\<lambda>x. x = ?k) ?al = Some ?v \\<Longrightarrow>\n  (?k, ?v) \\<in> set ?al\n\ngoal (1 subgoal):\n 1. typ_ok thy (subst_typ insts (Tv idn S))", "by fastforce"], ["proof (state)\nthis:\n  typ_ok thy (subst_typ insts (Tv idn S))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "case False"], ["proof (state)\nthis:\n  (idn, S) \\<notin> set (map fst insts)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "hence \"subst_typ insts (Tv idn S) = Tv idn S\""], ["proof (prove)\nusing this:\n  (idn, S) \\<notin> set (map fst insts)\n\ngoal (1 subgoal):\n 1. subst_typ insts (Tv idn S) = Tv idn S", "by (metis (mono_tags, lifting) lookup_None_iff subst_typ.simps(2) the_default.simps(1))"], ["proof (state)\nthis:\n  subst_typ insts (Tv idn S) = Tv idn S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok thy (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok thy a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok thy (subst_typ insts (Tv idn S))", "then"], ["proof (chain)\npicking this:\n  subst_typ insts (Tv idn S) = Tv idn S", "show ?thesis"], ["proof (prove)\nusing this:\n  subst_typ insts (Tv idn S) = Tv idn S\n\ngoal (1 subgoal):\n 1. typ_ok thy (subst_typ insts (Tv idn S))", "using \"2.prems\"(1)"], ["proof (prove)\nusing this:\n  subst_typ insts (Tv idn S) = Tv idn S\n  typ_ok thy (Tv idn S)\n\ngoal (1 subgoal):\n 1. typ_ok thy (subst_typ insts (Tv idn S))", "by simp"], ["proof (state)\nthis:\n  typ_ok thy (subst_typ insts (Tv idn S))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  typ_ok thy (subst_typ insts (Tv idn S))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typ_ok_sig_subst_typ:\n  \"typ_ok_sig \\<Sigma> T \\<Longrightarrow> \\<forall>(_, ty) \\<in> set insts . typ_ok_sig \\<Sigma> ty \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> T;\n     \\<forall>(uu_, ty)\\<in>set insts. typ_ok_sig \\<Sigma> ty\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts T)", "proof (induction insts T rule: subst_typ.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>insts a Ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set Ts; typ_ok_sig \\<Sigma> x;\n                    \\<forall>(uu_, y)\\<in>set insts.\n                       typ_ok_sig \\<Sigma> y\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma>\n(subst_typ insts x);\n        typ_ok_sig \\<Sigma> (Ty a Ts);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Ty a Ts))\n 2. \\<And>insts idn S.\n       \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "case (1 insts n Ts)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> set Ts; typ_ok_sig \\<Sigma> ?x;\n   \\<forall>a\\<in>set insts.\n      case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts ?x)\n  typ_ok_sig \\<Sigma> (Ty n Ts)\n  \\<forall>a\\<in>set insts.\n     case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a\n\ngoal (2 subgoals):\n 1. \\<And>insts a Ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set Ts; typ_ok_sig \\<Sigma> x;\n                    \\<forall>(uu_, y)\\<in>set insts.\n                       typ_ok_sig \\<Sigma> y\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma>\n(subst_typ insts x);\n        typ_ok_sig \\<Sigma> (Ty a Ts);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Ty a Ts))\n 2. \\<And>insts idn S.\n       \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "have \"typ_ok_sig \\<Sigma> x\" if \"x\\<in>set Ts\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> x", "using \"1.prems\"(1) split_list that typ_ok_sig_Ty"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> (Ty n Ts)\n  ?x \\<in> set ?xs \\<Longrightarrow> \\<exists>ys zs. ?xs = ys @ ?x # zs\n  x \\<in> set Ts\n  typ_ok_sig ?\\<Sigma> (Ty ?n ?Ts) \\<Longrightarrow>\n  list_all (typ_ok_sig ?\\<Sigma>) ?Ts\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> x", "by fastforce"], ["proof (state)\nthis:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok_sig \\<Sigma> ?x\n\ngoal (2 subgoals):\n 1. \\<And>insts a Ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set Ts; typ_ok_sig \\<Sigma> x;\n                    \\<forall>(uu_, y)\\<in>set insts.\n                       typ_ok_sig \\<Sigma> y\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma>\n(subst_typ insts x);\n        typ_ok_sig \\<Sigma> (Ty a Ts);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Ty a Ts))\n 2. \\<And>insts idn S.\n       \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "hence \"typ_ok_sig \\<Sigma> (subst_typ insts x)\" if \"x\\<in>set Ts\" for x"], ["proof (prove)\nusing this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok_sig \\<Sigma> ?x\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (subst_typ insts x)", "using that 1"], ["proof (prove)\nusing this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok_sig \\<Sigma> ?x\n  x \\<in> set Ts\n  \\<lbrakk>?x \\<in> set Ts; typ_ok_sig \\<Sigma> ?x;\n   \\<forall>a\\<in>set insts.\n      case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts ?x)\n  typ_ok_sig \\<Sigma> (Ty n Ts)\n  \\<forall>a\\<in>set insts.\n     case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (subst_typ insts x)", "by simp"], ["proof (state)\nthis:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts ?x)\n\ngoal (2 subgoals):\n 1. \\<And>insts a Ts.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set Ts; typ_ok_sig \\<Sigma> x;\n                    \\<forall>(uu_, y)\\<in>set insts.\n                       typ_ok_sig \\<Sigma> y\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig \\<Sigma>\n(subst_typ insts x);\n        typ_ok_sig \\<Sigma> (Ty a Ts);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Ty a Ts))\n 2. \\<And>insts idn S.\n       \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts ?x)", "show ?case"], ["proof (prove)\nusing this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts ?x)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (subst_typ insts (Ty n Ts))", "using \"1.prems\"(1)"], ["proof (prove)\nusing this:\n  ?x \\<in> set Ts \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts ?x)\n  typ_ok_sig \\<Sigma> (Ty n Ts)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (subst_typ insts (Ty n Ts))", "by (auto simp add: list_all_iff split: option.splits)"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (subst_typ insts (Ty n Ts))\n\ngoal (1 subgoal):\n 1. \\<And>insts idn S.\n       \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>insts idn S.\n       \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "case (2 insts idn S)"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (Tv idn S)\n  \\<forall>a\\<in>set insts.\n     case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a\n\ngoal (1 subgoal):\n 1. \\<And>insts idn S.\n       \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n        \\<forall>(uu_, y)\\<in>set insts. typ_ok_sig \\<Sigma> y\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "then"], ["proof (chain)\npicking this:\n  typ_ok_sig \\<Sigma> (Tv idn S)\n  \\<forall>a\\<in>set insts.\n     case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a", "show ?case"], ["proof (prove)\nusing this:\n  typ_ok_sig \\<Sigma> (Tv idn S)\n  \\<forall>a\\<in>set insts.\n     case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "proof(cases \"(idn, S) \\<in> set (map fst insts)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<in> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))\n 2. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "case True"], ["proof (state)\nthis:\n  (idn, S) \\<in> set (map fst insts)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<in> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))\n 2. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "obtain ty where ty: \"lookup (\\<lambda>k. k=(idn,S)) insts = Some ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ty.\n        lookup (\\<lambda>k. k = (idn, S)) insts = Some ty \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) True lookup_None_iff not_Some_eq)"], ["proof (state)\nthis:\n  lookup (\\<lambda>k. k = (idn, S)) insts = Some ty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<in> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))\n 2. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "hence \"subst_typ insts (Tv idn S) = ty\""], ["proof (prove)\nusing this:\n  lookup (\\<lambda>k. k = (idn, S)) insts = Some ty\n\ngoal (1 subgoal):\n 1. subst_typ insts (Tv idn S) = ty", "by simp"], ["proof (state)\nthis:\n  subst_typ insts (Tv idn S) = ty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<in> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))\n 2. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "then"], ["proof (chain)\npicking this:\n  subst_typ insts (Tv idn S) = ty", "show ?thesis"], ["proof (prove)\nusing this:\n  subst_typ insts (Tv idn S) = ty\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "using \"2.prems\"(2) ty case_prodD lookup_present_eq_key'"], ["proof (prove)\nusing this:\n  subst_typ insts (Tv idn S) = ty\n  \\<forall>a\\<in>set insts.\n     case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a\n  lookup (\\<lambda>k. k = (idn, S)) insts = Some ty\n  case (?a, ?b) of (c, d) \\<Rightarrow> ?f c d \\<Longrightarrow> ?f ?a ?b\n  lookup (\\<lambda>x. x = ?k) ?al = Some ?v \\<Longrightarrow>\n  (?k, ?v) \\<in> set ?al\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "by fastforce"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "case False"], ["proof (state)\nthis:\n  (idn, S) \\<notin> set (map fst insts)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "hence \"subst_typ insts (Tv idn S) = Tv idn S\""], ["proof (prove)\nusing this:\n  (idn, S) \\<notin> set (map fst insts)\n\ngoal (1 subgoal):\n 1. subst_typ insts (Tv idn S) = Tv idn S", "by (metis (mono_tags, lifting) lookup_None_iff subst_typ.simps(2) the_default.simps(1))"], ["proof (state)\nthis:\n  subst_typ insts (Tv idn S) = Tv idn S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> (Tv idn S);\n     \\<forall>a\\<in>set insts.\n        case a of (uu_, a) \\<Rightarrow> typ_ok_sig \\<Sigma> a;\n     (idn, S) \\<notin> set (map fst insts)\\<rbrakk>\n    \\<Longrightarrow> typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "then"], ["proof (chain)\npicking this:\n  subst_typ insts (Tv idn S) = Tv idn S", "show ?thesis"], ["proof (prove)\nusing this:\n  subst_typ insts (Tv idn S) = Tv idn S\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "using \"2.prems\"(1)"], ["proof (prove)\nusing this:\n  subst_typ insts (Tv idn S) = Tv idn S\n  typ_ok_sig \\<Sigma> (Tv idn S)\n\ngoal (1 subgoal):\n 1. typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))", "by simp"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  typ_ok_sig \\<Sigma> (subst_typ insts (Tv idn S))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma typ_ok_sig_imp_sortsT_ok_sig: \"typ_ok_sig \\<Sigma> T \\<Longrightarrow> S \\<in> SortsT T \\<Longrightarrow> wf_sort (subclass (osig \\<Sigma>)) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_ok_sig \\<Sigma> T; S \\<in> SortsT T\\<rbrakk>\n    \\<Longrightarrow> wf_sort (subclass (osig \\<Sigma>)) S", "by (induction T) (use split_list in \\<open>all \\<open>fastforce simp add: wf_sort_def split: option.splits\\<close>\\<close>)"], ["", "lemma term_ok'_imp_Sorts_ok_sig: \"term_ok' \\<Sigma> t \\<Longrightarrow> S \\<in> Sorts t \\<Longrightarrow> wf_sort (subclass (osig \\<Sigma>)) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>term_ok' \\<Sigma> t; S \\<in> Sorts t\\<rbrakk>\n    \\<Longrightarrow> wf_sort (subclass (osig \\<Sigma>)) S", "by (induction t) (use typ_ok_sig_imp_sortsT_ok_sig in \\<open>(fastforce split: option.splits)+\\<close>)"], ["", "lemma replay'_sound_pre:\n  assumes thy: \"wf_theory thy\"\n  (* Assumptions *)\n  assumes HS_invs: \n    \"\\<And>x. x\\<in>set Hs \\<Longrightarrow> term_ok thy x\"\n    \"\\<And>x. x\\<in>set Hs \\<Longrightarrow> typ_of x = Some propT\"\n  (* Names used *)\n  assumes ns_invs:\n    \"finite ns\"\n    \"fst ` FV (set Hs) \\<subseteq> ns\"\n    \"fst ` fv_Proof P \\<subseteq> ns\"\n  (* Fviables used *)\n  assumes vs_invs:\n    \"fst ` set vs \\<subseteq> ns\"\n  (* Checked proof can be replay'ed using proves*)\n  assumes \"replay' thy vs ns Hs P = Some res\"\n  shows \"thy, (set Hs) \\<turnstile> res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "using assms"], ["proof (prove)\nusing this:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof P \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs P = Some res\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "proof(induction thy vs ns Hs P arbitrary: res rule: replay'.induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>thy uu_ uv_ Hs t Tis res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite uv_; fst ` FV (set Hs) \\<subseteq> uv_;\n        fst ` fv_Proof (PAxm t Tis) \\<subseteq> uv_;\n        fst ` set uu_ \\<subseteq> uv_;\n        replay' thy uu_ uv_ Hs (PAxm t Tis) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy uw_ ux_ Hs n res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ux_; fst ` FV (set Hs) \\<subseteq> ux_;\n        fst ` fv_Proof (PBound n) \\<subseteq> ux_;\n        fst ` set uw_ \\<subseteq> ux_;\n        replay' thy uw_ ux_ Hs (PBound n) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 7. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 8. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case (1 thy uu uv Hs t Tis)"], ["proof (state)\nthis:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite uv\n  fst ` FV (set Hs) \\<subseteq> uv\n  fst ` fv_Proof (PAxm t Tis) \\<subseteq> uv\n  fst ` set uu \\<subseteq> uv\n  replay' thy uu uv Hs (PAxm t Tis) = Some res\n\ngoal (8 subgoals):\n 1. \\<And>thy uu_ uv_ Hs t Tis res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite uv_; fst ` FV (set Hs) \\<subseteq> uv_;\n        fst ` fv_Proof (PAxm t Tis) \\<subseteq> uv_;\n        fst ` set uu_ \\<subseteq> uv_;\n        replay' thy uu_ uv_ Hs (PAxm t Tis) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy uw_ ux_ Hs n res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ux_; fst ` FV (set Hs) \\<subseteq> ux_;\n        fst ` fv_Proof (PBound n) \\<subseteq> ux_;\n        fst ` set uw_ \\<subseteq> ux_;\n        replay' thy uw_ ux_ Hs (PBound n) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 7. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 8. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence \n    ax: \"t\\<in>axioms thy\"\n    and insts: \"inst_ok thy Tis\" and t: \"term_ok thy t\"\n    and res: \"forall_intro_vars (subst_typ' Tis t) [] = res\""], ["proof (prove)\nusing this:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite uv\n  fst ` FV (set Hs) \\<subseteq> uv\n  fst ` fv_Proof (PAxm t Tis) \\<subseteq> uv\n  fst ` set uu \\<subseteq> uv\n  replay' thy uu uv Hs (PAxm t Tis) = Some res\n\ngoal (1 subgoal):\n 1. (t \\<in> axioms thy &&& inst_ok thy Tis) &&&\n    term_ok thy t &&& forall_intro_vars (subst_typ' Tis t) [] = res", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  t \\<in> axioms thy\n  inst_ok thy Tis\n  term_ok thy t\n  forall_intro_vars (subst_typ' Tis t) [] = res\n\ngoal (8 subgoals):\n 1. \\<And>thy uu_ uv_ Hs t Tis res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite uv_; fst ` FV (set Hs) \\<subseteq> uv_;\n        fst ` fv_Proof (PAxm t Tis) \\<subseteq> uv_;\n        fst ` set uu_ \\<subseteq> uv_;\n        replay' thy uu_ uv_ Hs (PAxm t Tis) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy uw_ ux_ Hs n res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ux_; fst ` FV (set Hs) \\<subseteq> ux_;\n        fst ` fv_Proof (PBound n) \\<subseteq> ux_;\n        fst ` set uw_ \\<subseteq> ux_;\n        replay' thy uw_ ux_ Hs (PBound n) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 7. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 8. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence 1: \"thy, {} \\<turnstile> res\""], ["proof (prove)\nusing this:\n  t \\<in> axioms thy\n  inst_ok thy Tis\n  term_ok thy t\n  forall_intro_vars (subst_typ' Tis t) [] = res\n\ngoal (1 subgoal):\n 1. thy,{} \\<turnstile> res", "using res \"1.prems\"(1) proved_terms_well_formed_pre"], ["proof (prove)\nusing this:\n  t \\<in> axioms thy\n  inst_ok thy Tis\n  term_ok thy t\n  forall_intro_vars (subst_typ' Tis t) [] = res\n  forall_intro_vars (subst_typ' Tis t) [] = res\n  wf_theory thy\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow>\n  typ_of ?p = Some propT \\<and> term_ok ?\\<Theta> ?p\n\ngoal (1 subgoal):\n 1. thy,{} \\<turnstile> res", "using axiom forall_intro_vars inst_ok_imp_wf_inst tsubst_simulates_subst_typ'"], ["proof (prove)\nusing this:\n  t \\<in> axioms thy\n  inst_ok thy Tis\n  term_ok thy t\n  forall_intro_vars (subst_typ' Tis t) [] = res\n  forall_intro_vars (subst_typ' Tis t) [] = res\n  wf_theory thy\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow>\n  typ_of ?p = Some propT \\<and> term_ok ?\\<Theta> ?p\n  \\<lbrakk>wf_theory ?\\<Theta>; ?A \\<in> axioms ?\\<Theta>;\n   wf_inst ?\\<Theta> ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> tsubst ?A ?\\<rho>\n  \\<lbrakk>wf_theory ?\\<Theta>; ?\\<Theta>,set ?Hs \\<turnstile> ?B\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,set ?Hs \\<turnstile> forall_intro_vars ?B ?Hs\n  inst_ok ?\\<Theta> ?insts \\<Longrightarrow>\n  wf_inst ?\\<Theta>\n   (\\<lambda>idn S.\n       the_default (Tv idn S) (lookup (\\<lambda>x. x = (idn, S)) ?insts))\n  subst_typ' ?insts ?T =\n  tsubst ?T\n   (\\<lambda>idn S.\n       the_default (Tv idn S) (lookup (\\<lambda>x. x = (idn, S)) ?insts))\n\ngoal (1 subgoal):\n 1. thy,{} \\<turnstile> res", "by (metis (no_types, lifting) empty_set)"], ["proof (state)\nthis:\n  thy,{} \\<turnstile> res\n\ngoal (8 subgoals):\n 1. \\<And>thy uu_ uv_ Hs t Tis res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite uv_; fst ` FV (set Hs) \\<subseteq> uv_;\n        fst ` fv_Proof (PAxm t Tis) \\<subseteq> uv_;\n        fst ` set uu_ \\<subseteq> uv_;\n        replay' thy uu_ uv_ Hs (PAxm t Tis) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy uw_ ux_ Hs n res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ux_; fst ` FV (set Hs) \\<subseteq> ux_;\n        fst ` fv_Proof (PBound n) \\<subseteq> ux_;\n        fst ` set uw_ \\<subseteq> ux_;\n        replay' thy uw_ ux_ Hs (PBound n) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 7. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 8. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "using weaken_proves_set[of \"set Hs\", OF _ 1]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (set Hs); \\<forall>A\\<in>set Hs. term_ok thy A;\n   \\<forall>A\\<in>set Hs. typ_of A = Some propT; finite {}\\<rbrakk>\n  \\<Longrightarrow> thy,{} \\<union> set Hs \\<turnstile> res\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "using \"1.prems\"(2) \"1.prems\"(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (set Hs); \\<forall>A\\<in>set Hs. term_ok thy A;\n   \\<forall>A\\<in>set Hs. typ_of A = Some propT; finite {}\\<rbrakk>\n  \\<Longrightarrow> thy,{} \\<union> set Hs \\<turnstile> res\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "by auto"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal (7 subgoals):\n 1. \\<And>thy uw_ ux_ Hs n res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ux_; fst ` FV (set Hs) \\<subseteq> ux_;\n        fst ` fv_Proof (PBound n) \\<subseteq> ux_;\n        fst ` set uw_ \\<subseteq> ux_;\n        replay' thy uw_ ux_ Hs (PBound n) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 7. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>thy uw_ ux_ Hs n res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ux_; fst ` FV (set Hs) \\<subseteq> ux_;\n        fst ` fv_Proof (PBound n) \\<subseteq> ux_;\n        fst ` set uw_ \\<subseteq> ux_;\n        replay' thy uw_ ux_ Hs (PBound n) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 7. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case (2 thy ux uy Hs n)"], ["proof (state)\nthis:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite uy\n  fst ` FV (set Hs) \\<subseteq> uy\n  fst ` fv_Proof (PBound n) \\<subseteq> uy\n  fst ` set ux \\<subseteq> uy\n  replay' thy ux uy Hs (PBound n) = Some res\n\ngoal (7 subgoals):\n 1. \\<And>thy uw_ ux_ Hs n res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ux_; fst ` FV (set Hs) \\<subseteq> ux_;\n        fst ` fv_Proof (PBound n) \\<subseteq> ux_;\n        fst ` set uw_ \\<subseteq> ux_;\n        replay' thy uw_ ux_ Hs (PBound n) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 7. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence \"res \\<in> set Hs\""], ["proof (prove)\nusing this:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite uy\n  fst ` FV (set Hs) \\<subseteq> uy\n  fst ` fv_Proof (PBound n) \\<subseteq> uy\n  fst ` set ux \\<subseteq> uy\n  replay' thy ux uy Hs (PBound n) = Some res\n\ngoal (1 subgoal):\n 1. res \\<in> set Hs", "using partial_nth_Some_imp_elem"], ["proof (prove)\nusing this:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite uy\n  fst ` FV (set Hs) \\<subseteq> uy\n  fst ` fv_Proof (PBound n) \\<subseteq> uy\n  fst ` set ux \\<subseteq> uy\n  replay' thy ux uy Hs (PBound n) = Some res\n  partial_nth ?l ?n = Some ?x \\<Longrightarrow> ?x \\<in> set ?l\n\ngoal (1 subgoal):\n 1. res \\<in> set Hs", "by simp"], ["proof (state)\nthis:\n  res \\<in> set Hs\n\ngoal (7 subgoals):\n 1. \\<And>thy uw_ ux_ Hs n res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ux_; fst ` FV (set Hs) \\<subseteq> ux_;\n        fst ` fv_Proof (PBound n) \\<subseteq> ux_;\n        fst ` set uw_ \\<subseteq> ux_;\n        replay' thy uw_ ux_ Hs (PBound n) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 7. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "then"], ["proof (chain)\npicking this:\n  res \\<in> set Hs", "show ?case"], ["proof (prove)\nusing this:\n  res \\<in> set Hs\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "using proves.assume 2"], ["proof (prove)\nusing this:\n  res \\<in> set Hs\n  \\<lbrakk>wf_term (sig ?\\<Theta>) ?A; \\<turnstile>\\<^sub>\\<tau> ?A : propT;\n   ?A \\<in> ?\\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> ?A\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite uy\n  fst ` FV (set Hs) \\<subseteq> uy\n  fst ` fv_Proof (PBound n) \\<subseteq> uy\n  fst ` set ux \\<subseteq> uy\n  replay' thy ux uy Hs (PBound n) = Some res\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "by (simp add: wt_term_def)"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case (3 thy vs ns Hs T p)"], ["proof (state)\nthis:\n  \\<lbrakk>typ_ok thy T; ?x = variant_variable (Free STR ''default'') ns;\n   (?xa, ?y) = ?x; wf_theory thy;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ?y; fst ` FV (set Hs) \\<subseteq> ?y;\n   fst ` fv_Proof p \\<subseteq> ?y;\n   fst ` set ((?xa, T) # vs) \\<subseteq> ?y;\n   replay' thy ((?xa, T) # vs) ?y Hs p = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set Hs \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Abst T p) = Some res\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "obtain s' ns' where names: \"(s',ns') = variant_variable (Free STR ''default'') ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s' ns'.\n        (s', ns') =\n        variant_variable (Free STR ''default'') ns \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  (s', ns') = variant_variable (Free STR ''default'') ns\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from this 3"], ["proof (chain)\npicking this:\n  (s', ns') = variant_variable (Free STR ''default'') ns\n  \\<lbrakk>typ_ok thy T; ?x = variant_variable (Free STR ''default'') ns;\n   (?xa, ?y) = ?x; wf_theory thy;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ?y; fst ` FV (set Hs) \\<subseteq> ?y;\n   fst ` fv_Proof p \\<subseteq> ?y;\n   fst ` set ((?xa, T) # vs) \\<subseteq> ?y;\n   replay' thy ((?xa, T) # vs) ?y Hs p = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set Hs \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Abst T p) = Some res", "obtain bres where bres: \"replay' thy ((s', T) # vs) ns' Hs p = Some bres\""], ["proof (prove)\nusing this:\n  (s', ns') = variant_variable (Free STR ''default'') ns\n  \\<lbrakk>typ_ok thy T; ?x = variant_variable (Free STR ''default'') ns;\n   (?xa, ?y) = ?x; wf_theory thy;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ?y; fst ` FV (set Hs) \\<subseteq> ?y;\n   fst ` fv_Proof p \\<subseteq> ?y;\n   fst ` set ((?xa, T) # vs) \\<subseteq> ?y;\n   replay' thy ((?xa, T) # vs) ?y Hs p = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set Hs \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Abst T p) = Some res\n\ngoal (1 subgoal):\n 1. (\\<And>bres.\n        replay' thy ((s', T) # vs) ns' Hs p = Some bres \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto split: if_splits prod.splits)"], ["proof (state)\nthis:\n  replay' thy ((s', T) # vs) ns' Hs p = Some bres\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have \"ns' = insert s' ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns' = insert s' ns", "using variant_variable_adds names"], ["proof (prove)\nusing this:\n  snd (variant_variable ?s ?S) = insert (fst (variant_variable ?s ?S)) ?S\n  (s', ns') = variant_variable (Free STR ''default'') ns\n\ngoal (1 subgoal):\n 1. ns' = insert s' ns", "by (metis fst_conv snd_conv)"], ["proof (state)\nthis:\n  ns' = insert s' ns\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have \"s' \\<notin> ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' \\<notin> ns", "using \"3.prems\" variant_variable_fresh names"], ["proof (prove)\nusing this:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Abst T p) = Some res\n  finite ?S \\<Longrightarrow> fst (variant_variable ?s ?S) \\<notin> ?S\n  (s', ns') = variant_variable (Free STR ''default'') ns\n\ngoal (1 subgoal):\n 1. s' \\<notin> ns", "by (metis fst_conv)"], ["proof (state)\nthis:\n  s' \\<notin> ns\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence \"s' \\<notin> fst ` FV (set Hs)\""], ["proof (prove)\nusing this:\n  s' \\<notin> ns\n\ngoal (1 subgoal):\n 1. s' \\<notin> fst ` FV (set Hs)", "using \"3.prems\""], ["proof (prove)\nusing this:\n  s' \\<notin> ns\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Abst T p) = Some res\n\ngoal (1 subgoal):\n 1. s' \\<notin> fst ` FV (set Hs)", "by blast"], ["proof (state)\nthis:\n  s' \\<notin> fst ` FV (set Hs)\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence free: \"(s', T) \\<notin> FV (set Hs)\""], ["proof (prove)\nusing this:\n  s' \\<notin> fst ` FV (set Hs)\n\ngoal (1 subgoal):\n 1. (s', T) \\<notin> FV (set Hs)", "by force"], ["proof (state)\nthis:\n  (s', T) \\<notin> FV (set Hs)\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have typ_ok: \"wf_type (sig thy) T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_type (sig thy) T", "using names \"3.prems\""], ["proof (prove)\nusing this:\n  (s', ns') = variant_variable (Free STR ''default'') ns\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Abst T p) = Some res\n\ngoal (1 subgoal):\n 1. wf_type (sig thy) T", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  wf_type (sig thy) T\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have I:\"thy, set Hs \\<turnstile> bres\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> bres", "apply (rule \"3.IH\"[OF _ names])"], ["proof (prove)\ngoal (10 subgoals):\n 1. typ_ok thy T\n 2. (?xa, ?y) = (s', ns')\n 3. wf_theory thy\n 4. \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x\n 5. \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT\n 6. finite ?y\n 7. fst ` FV (set Hs) \\<subseteq> ?y\n 8. fst ` fv_Proof p \\<subseteq> ?y\n 9. fst ` set ((?xa, T) # vs) \\<subseteq> ?y\n 10. replay' thy ((?xa, T) # vs) ?y Hs p = Some bres", "using names \"3.prems\""], ["proof (prove)\nusing this:\n  (s', ns') = variant_variable (Free STR ''default'') ns\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Abst T p) = Some res\n\ngoal (10 subgoals):\n 1. typ_ok thy T\n 2. (?xa, ?y) = (s', ns')\n 3. wf_theory thy\n 4. \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x\n 5. \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT\n 6. finite ?y\n 7. fst ` FV (set Hs) \\<subseteq> ?y\n 8. fst ` fv_Proof p \\<subseteq> ?y\n 9. fst ` set ((?xa, T) # vs) \\<subseteq> ?y\n 10. replay' thy ((?xa, T) # vs) ?y Hs p = Some bres", "apply (solves \\<open>simp split: if_splits\\<close>)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. fst ` FV (set Hs) \\<subseteq> ns'\n 2. fst ` fv_Proof p \\<subseteq> ns'\n 3. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 4. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "using names \"3.prems\" \\<open>ns' = insert s' ns\\<close>"], ["proof (prove)\nusing this:\n  (s', ns') = variant_variable (Free STR ''default'') ns\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Abst T p) = Some res\n  ns' = insert s' ns\n\ngoal (4 subgoals):\n 1. fst ` FV (set Hs) \\<subseteq> ns'\n 2. fst ` fv_Proof p \\<subseteq> ns'\n 3. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 4. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. fst ` fv_Proof p \\<subseteq> ns'\n 2. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 3. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "using \"3.prems\"(7) \\<open>ns' = insert s' ns\\<close>"], ["proof (prove)\nusing this:\n  fst ` set vs \\<subseteq> ns\n  ns' = insert s' ns\n\ngoal (3 subgoals):\n 1. fst ` fv_Proof p \\<subseteq> ns'\n 2. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 3. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>fst ` set vs \\<subseteq> ns; ns' = insert s' ns;\n        (a, b) \\<in> fv_Proof p; a \\<notin> ns\\<rbrakk>\n       \\<Longrightarrow> a = s'\n 2. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 3. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "using \"3.prems\"(8) \\<open>ns' = insert s' ns\\<close>"], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs (Abst T p) = Some res\n  ns' = insert s' ns\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>fst ` set vs \\<subseteq> ns; ns' = insert s' ns;\n        (a, b) \\<in> fv_Proof p; a \\<notin> ns\\<rbrakk>\n       \\<Longrightarrow> a = s'\n 2. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 3. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>fst ` set vs \\<subseteq> ns; (a, b) \\<in> fv_Proof p;\n        a \\<notin> ns;\n        (if typ_ok_sig (sig thy) T\n         then let (s', ns') = variant_variable (Free STR ''default'') ns\n              in map_option (mk_all s' T)\n                  (replay' thy ((s', T) # vs) ns' Hs p)\n         else None) =\n        Some res;\n        ns' = insert s' ns\\<rbrakk>\n       \\<Longrightarrow> a = s'\n 2. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 3. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "using \"3.prems\"(6)"], ["proof (prove)\nusing this:\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>fst ` set vs \\<subseteq> ns; (a, b) \\<in> fv_Proof p;\n        a \\<notin> ns;\n        (if typ_ok_sig (sig thy) T\n         then let (s', ns') = variant_variable (Free STR ''default'') ns\n              in map_option (mk_all s' T)\n                  (replay' thy ((s', T) # vs) ns' Hs p)\n         else None) =\n        Some res;\n        ns' = insert s' ns\\<rbrakk>\n       \\<Longrightarrow> a = s'\n 2. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 3. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 2. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "using \"3.prems\"(7) \\<open>ns' = insert s' ns\\<close>"], ["proof (prove)\nusing this:\n  fst ` set vs \\<subseteq> ns\n  ns' = insert s' ns\n\ngoal (2 subgoals):\n 1. fst ` set ((s', T) # vs) \\<subseteq> ns'\n 2. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "using \"3.prems\"(8) \\<open>ns' = insert s' ns\\<close>"], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs (Abst T p) = Some res\n  ns' = insert s' ns\n\ngoal (1 subgoal):\n 1. replay' thy ((s', T) # vs) ns' Hs p = Some bres", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if typ_ok_sig (sig thy) T\n              then let (s', ns') =\n                         variant_variable (Free STR ''default'') ns\n                   in map_option (mk_all s' T)\n                       (replay' thy ((s', T) # vs) ns' Hs p)\n              else None) =\n             Some res;\n     ns' = insert s' ns\\<rbrakk>\n    \\<Longrightarrow> replay' thy ((s', T) # vs) (insert s' ns) Hs p =\n                      Some bres", "using bres"], ["proof (prove)\nusing this:\n  replay' thy ((s', T) # vs) ns' Hs p = Some bres\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(if typ_ok_sig (sig thy) T\n              then let (s', ns') =\n                         variant_variable (Free STR ''default'') ns\n                   in map_option (mk_all s' T)\n                       (replay' thy ((s', T) # vs) ns' Hs p)\n              else None) =\n             Some res;\n     ns' = insert s' ns\\<rbrakk>\n    \\<Longrightarrow> replay' thy ((s', T) # vs) (insert s' ns) Hs p =\n                      Some bres", "by fastforce"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> bres\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have res: \"res = mk_all s' T bres\""], ["proof (prove)\ngoal (1 subgoal):\n 1. res = mk_all s' T bres", "using names bres 3"], ["proof (prove)\nusing this:\n  (s', ns') = variant_variable (Free STR ''default'') ns\n  replay' thy ((s', T) # vs) ns' Hs p = Some bres\n  \\<lbrakk>typ_ok thy T; ?x = variant_variable (Free STR ''default'') ns;\n   (?xa, ?y) = ?x; wf_theory thy;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ?y; fst ` FV (set Hs) \\<subseteq> ?y;\n   fst ` fv_Proof p \\<subseteq> ?y;\n   fst ` set ((?xa, T) # vs) \\<subseteq> ?y;\n   replay' thy ((?xa, T) # vs) ?y Hs p = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set Hs \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Abst T p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Abst T p) = Some res\n\ngoal (1 subgoal):\n 1. res = mk_all s' T bres", "by (auto split: if_splits prod.splits)"], ["proof (state)\nthis:\n  res = mk_all s' T bres\n\ngoal (6 subgoals):\n 1. \\<And>thy vs ns Hs T p res.\n       \\<lbrakk>\\<And>x xa y res.\n                   \\<lbrakk>typ_ok thy T;\n                    x = variant_variable (Free STR ''default'') ns;\n                    (xa, y) = x; wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite y; fst ` FV (set Hs) \\<subseteq> y;\n                    fst ` fv_Proof p \\<subseteq> y;\n                    fst ` set ((xa, T) # vs) \\<subseteq> y;\n                    replay' thy ((xa, T) # vs) y Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Abst T p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Abst T p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 6. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "using proves.forall_intro[OF \\<open>wf_theory thy\\<close> I free typ_ok] res"], ["proof (prove)\nusing this:\n  thy,set Hs \\<turnstile> mk_all s' T bres\n  res = mk_all s' T bres\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "by simp"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal (5 subgoals):\n 1. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case (4 thy vs ns Hs p t)"], ["proof (state)\nthis:\n  \\<lbrakk>wf_theory thy;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n   fst ` fv_Proof p \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n   replay' thy vs ns Hs p = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set Hs \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Appt p t) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Appt p t) = Some res\n\ngoal (5 subgoals):\n 1. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from \\<open>replay' thy vs ns Hs (Appt p t) = Some res\\<close>"], ["proof (chain)\npicking this:\n  replay' thy vs ns Hs (Appt p t) = Some res", "obtain rep t' b s fun1 fun2 propT1 propT2 \\<tau> \\<tau>' where \n    conds: \"replay' thy vs ns Hs p = Some rep\"\n    \"t' = subst_bvs (map (\\<lambda>(x,y) . Fv x y) vs) t\"\n    \"typ_of t' = Some \\<tau>'\"\n    \"\\<tau> = \\<tau>'\"\n    \"term_ok thy t'\"\n    \"s= STR ''Pure.all'' \\<and> fun1 = STR ''fun'' \\<and> fun2 = STR ''fun'' \\<and> propT1 = STR ''prop'' \\<and> propT2 = STR ''prop''\"\n    \"rep = Ct s (Ty fun1 [Ty fun2 [\\<tau>, Ty propT1 Nil], Ty propT2 Nil]) $ b\"\n    and res: \"res = (b \\<bullet> t')\""], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs (Appt p t) = Some res\n\ngoal (1 subgoal):\n 1. (\\<And>rep t' \\<tau>' \\<tau> s fun1 fun2 propT1 propT2 b.\n        \\<lbrakk>replay' thy vs ns Hs p = Some rep;\n         t' = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n         typ_of t' = Some \\<tau>'; \\<tau> = \\<tau>'; term_ok thy t';\n         s = STR ''Pure.all'' \\<and>\n         fun1 = STR ''fun'' \\<and>\n         fun2 = STR ''fun'' \\<and>\n         propT1 = STR ''prop'' \\<and> propT2 = STR ''prop'';\n         rep =\n         Ct s (Ty fun1 [Ty fun2 [\\<tau>, constT propT1], constT propT2]) $\n         b;\n         res = b \\<bullet> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(* Takes forever, split up  *)"], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs (Appt p t) = Some res\n\ngoal (1 subgoal):\n 1. (\\<And>rep t' \\<tau>' \\<tau> s fun1 fun2 propT1 propT2 b.\n        \\<lbrakk>replay' thy vs ns Hs p = Some rep;\n         t' = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n         typ_of t' = Some \\<tau>'; \\<tau> = \\<tau>'; term_ok thy t';\n         s = STR ''Pure.all'' \\<and>\n         fun1 = STR ''fun'' \\<and>\n         fun2 = STR ''fun'' \\<and>\n         propT1 = STR ''prop'' \\<and> propT2 = STR ''prop'';\n         rep =\n         Ct s (Ty fun1 [Ty fun2 [\\<tau>, constT propT1], constT propT2]) $\n         b;\n         res = b \\<bullet> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: term.splits typ.splits list.splits if_splits option.splits simp add: Let_def)"], ["proof (state)\nthis:\n  replay' thy vs ns Hs p = Some rep\n  t' = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n  typ_of t' = Some \\<tau>'\n  \\<tau> = \\<tau>'\n  term_ok thy t'\n  s = STR ''Pure.all'' \\<and>\n  fun1 = STR ''fun'' \\<and>\n  fun2 = STR ''fun'' \\<and>\n  propT1 = STR ''prop'' \\<and> propT2 = STR ''prop''\n  rep = Ct s (Ty fun1 [Ty fun2 [\\<tau>, constT propT1], constT propT2]) $ b\n  res = b \\<bullet> t'\n\ngoal (5 subgoals):\n 1. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have ctxt: \"finite (set Hs)\" \"\\<forall>A \\<in> set Hs . term_ok thy A\" \"\\<forall>A \\<in> set Hs . typ_of A = Some propT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set Hs) &&&\n    \\<forall>A\\<in>set Hs. term_ok thy A &&&\n    \\<forall>A\\<in>set Hs. typ_of A = Some propT", "using 4"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory thy;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n   fst ` fv_Proof p \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n   replay' thy vs ns Hs p = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set Hs \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Appt p t) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Appt p t) = Some res\n\ngoal (1 subgoal):\n 1. finite (set Hs) &&&\n    \\<forall>A\\<in>set Hs. term_ok thy A &&&\n    \\<forall>A\\<in>set Hs. typ_of A = Some propT", "by auto"], ["proof (state)\nthis:\n  finite (set Hs)\n  \\<forall>A\\<in>set Hs. term_ok thy A\n  \\<forall>A\\<in>set Hs. typ_of A = Some propT\n\ngoal (5 subgoals):\n 1. \\<And>thy vs ns Hs p t res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Appt p t) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Appt p t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 5. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "using conds \"4.prems\" ctxt"], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs p = Some rep\n  t' = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n  typ_of t' = Some \\<tau>'\n  \\<tau> = \\<tau>'\n  term_ok thy t'\n  s = STR ''Pure.all'' \\<and>\n  fun1 = STR ''fun'' \\<and>\n  fun2 = STR ''fun'' \\<and>\n  propT1 = STR ''prop'' \\<and> propT2 = STR ''prop''\n  rep = Ct s (Ty fun1 [Ty fun2 [\\<tau>, constT propT1], constT propT2]) $ b\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (Appt p t) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (Appt p t) = Some res\n  finite (set Hs)\n  \\<forall>A\\<in>set Hs. term_ok thy A\n  \\<forall>A\\<in>set Hs. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "by (auto simp add: res wt_term_def simp del: FV_def \n        intro!: forall_elim'[OF \"4.prems\"(1) _ _ _ ctxt] \"4.IH\")"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal (4 subgoals):\n 1. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case (5 thy vs ns Hs t p)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n   wf_theory thy;\n   \\<And>x. x \\<in> set (?x # Hs) \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set (?x # Hs) \\<Longrightarrow> typ_of x = Some propT;\n   finite ns; fst ` FV (set (?x # Hs)) \\<subseteq> ns;\n   fst ` fv_Proof p \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n   replay' thy vs ns (?x # Hs) p = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set (?x # Hs) \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (AbsP t p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (AbsP t p) = Some res\n\ngoal (4 subgoals):\n 1. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n   wf_theory thy;\n   \\<And>x. x \\<in> set (?x # Hs) \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set (?x # Hs) \\<Longrightarrow> typ_of x = Some propT;\n   finite ns; fst ` FV (set (?x # Hs)) \\<subseteq> ns;\n   fst ` fv_Proof p \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n   replay' thy vs ns (?x # Hs) p = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set (?x # Hs) \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (AbsP t p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (AbsP t p) = Some res", "obtain t' rep where\n    conds: \"subst_bvs (map (\\<lambda>(x,y) . Fv x y) vs) t = t'\"\n    \"replay' thy vs ns (t'#Hs) p = Some rep\"\n    \"typ_of t' = Some propT\" \"term_ok thy t'\"\n    and res: \"res = mk_imp t' rep\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n   wf_theory thy;\n   \\<And>x. x \\<in> set (?x # Hs) \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set (?x # Hs) \\<Longrightarrow> typ_of x = Some propT;\n   finite ns; fst ` FV (set (?x # Hs)) \\<subseteq> ns;\n   fst ` fv_Proof p \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n   replay' thy vs ns (?x # Hs) p = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set (?x # Hs) \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (AbsP t p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (AbsP t p) = Some res\n\ngoal (1 subgoal):\n 1. (\\<And>t' rep.\n        \\<lbrakk>subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t = t';\n         replay' thy vs ns (t' # Hs) p = Some rep; typ_of t' = Some propT;\n         term_ok thy t'; res = t' \\<longmapsto> rep\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: term.splits typ.splits list.splits if_splits option.splits simp add: Let_def)"], ["proof (state)\nthis:\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t = t'\n  replay' thy vs ns (t' # Hs) p = Some rep\n  typ_of t' = Some propT\n  term_ok thy t'\n  res = t' \\<longmapsto> rep\n\ngoal (4 subgoals):\n 1. \\<And>thy vs ns Hs t p res.\n       \\<lbrakk>\\<And>x res.\n                   \\<lbrakk>x =\n                            subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t;\n                    wf_theory thy;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       term_ok thy xa;\n                    \\<And>xa.\n                       xa \\<in> set (x # Hs) \\<Longrightarrow>\n                       typ_of xa = Some propT;\n                    finite ns; fst ` FV (set (x # Hs)) \\<subseteq> ns;\n                    fst ` fv_Proof p \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns (x # Hs) p = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set (x # Hs) \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AbsP t p) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AbsP t p) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 4. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "proof (cases \"t'\\<in> set Hs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t' \\<in> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case True"], ["proof (state)\nthis:\n  t' \\<in> set Hs\n\ngoal (2 subgoals):\n 1. t' \\<in> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence s: \"set Hs = set (t' # Hs)\""], ["proof (prove)\nusing this:\n  t' \\<in> set Hs\n\ngoal (1 subgoal):\n 1. set Hs = set (t' # Hs)", "by auto"], ["proof (state)\nthis:\n  set Hs = set (t' # Hs)\n\ngoal (2 subgoals):\n 1. t' \\<in> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence s': \"set Hs = insert t' (set Hs -{t'})\""], ["proof (prove)\nusing this:\n  set Hs = set (t' # Hs)\n\ngoal (1 subgoal):\n 1. set Hs = insert t' (set Hs - {t'})", "by auto"], ["proof (state)\nthis:\n  set Hs = insert t' (set Hs - {t'})\n\ngoal (2 subgoals):\n 1. t' \\<in> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have \"thy,set (t' # Hs) \\<turnstile> rep\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set (t' # Hs) \\<turnstile> rep", "apply (rule \"5.IH\")"], ["proof (prove)\ngoal (9 subgoals):\n 1. t' = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n 2. wf_theory thy\n 3. \\<And>x. x \\<in> set (t' # Hs) \\<Longrightarrow> term_ok thy x\n 4. \\<And>x. x \\<in> set (t' # Hs) \\<Longrightarrow> typ_of x = Some propT\n 5. finite ns\n 6. fst ` FV (set (t' # Hs)) \\<subseteq> ns\n 7. fst ` fv_Proof p \\<subseteq> ns\n 8. fst ` set vs \\<subseteq> ns\n 9. replay' thy vs ns (t' # Hs) p = Some rep", "using conds(4) \"5.prems\" True"], ["proof (prove)\nusing this:\n  term_ok thy t'\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (AbsP t p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (AbsP t p) = Some res\n  t' \\<in> set Hs\n\ngoal (9 subgoals):\n 1. t' = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n 2. wf_theory thy\n 3. \\<And>x. x \\<in> set (t' # Hs) \\<Longrightarrow> term_ok thy x\n 4. \\<And>x. x \\<in> set (t' # Hs) \\<Longrightarrow> typ_of x = Some propT\n 5. finite ns\n 6. fst ` FV (set (t' # Hs)) \\<subseteq> ns\n 7. fst ` fv_Proof p \\<subseteq> ns\n 8. fst ` set vs \\<subseteq> ns\n 9. replay' thy vs ns (t' # Hs) p = Some rep", "by (auto simp add: conds(1) conds(2)[symmetric] conds(3))"], ["proof (state)\nthis:\n  thy,set (t' # Hs) \\<turnstile> rep\n\ngoal (2 subgoals):\n 1. t' \\<in> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence \"thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep\""], ["proof (prove)\nusing this:\n  thy,set (t' # Hs) \\<turnstile> rep\n\ngoal (1 subgoal):\n 1. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep", "using implies_intro \"5.prems\"(1) \"5.prems\"(4) conds(3) conds(4) s"], ["proof (prove)\nusing this:\n  thy,set (t' # Hs) \\<turnstile> rep\n  \\<lbrakk>wf_theory ?\\<Theta>; ?\\<Theta>,?\\<Gamma> \\<turnstile> ?B;\n   wf_term (sig ?\\<Theta>) ?A; \\<turnstile>\\<^sub>\\<tau> ?A : propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> -\n                              {?A} \\<turnstile> ?A \\<longmapsto> ?B\n  wf_theory thy\n  finite ns\n  typ_of t' = Some propT\n  term_ok thy t'\n  set Hs = set (t' # Hs)\n\ngoal (1 subgoal):\n 1. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep", "using has_typ_iff_typ_of term_ok'_imp_wf_term term_okD1"], ["proof (prove)\nusing this:\n  thy,set (t' # Hs) \\<turnstile> rep\n  \\<lbrakk>wf_theory ?\\<Theta>; ?\\<Theta>,?\\<Gamma> \\<turnstile> ?B;\n   wf_term (sig ?\\<Theta>) ?A; \\<turnstile>\\<^sub>\\<tau> ?A : propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> -\n                              {?A} \\<turnstile> ?A \\<longmapsto> ?B\n  wf_theory thy\n  finite ns\n  typ_of t' = Some propT\n  term_ok thy t'\n  set Hs = set (t' # Hs)\n  \\<turnstile>\\<^sub>\\<tau> ?t : ?ty = (typ_of ?t = Some ?ty)\n  term_ok' ?\\<Sigma> ?t \\<Longrightarrow> wf_term ?\\<Sigma> ?t\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> term_ok' (sig ?\\<Theta>) ?t\n\ngoal (1 subgoal):\n 1. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep", "by presburger"], ["proof (state)\nthis:\n  thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep\n\ngoal (2 subgoals):\n 1. t' \\<in> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "then"], ["proof (chain)\npicking this:\n  thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep", "show ?thesis"], ["proof (prove)\nusing this:\n  thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "apply (subst res)"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    thy,set Hs \\<turnstile> t' \\<longmapsto> rep", "apply (subst s')"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    thy,insert t' (set Hs - {t'}) \\<turnstile> t' \\<longmapsto> rep", "apply (rule weaken_proves)"], ["proof (prove)\ngoal (4 subgoals):\n 1. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep\n 2. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    term_ok thy t'\n 3. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    typ_of t' = Some propT\n 4. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    finite (set Hs - {t'})", "using conds(3-4)"], ["proof (prove)\nusing this:\n  typ_of t' = Some propT\n  term_ok thy t'\n\ngoal (4 subgoals):\n 1. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep\n 2. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    term_ok thy t'\n 3. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    typ_of t' = Some propT\n 4. thy,set Hs - {t'} \\<turnstile> t' \\<longmapsto> rep \\<Longrightarrow>\n    finite (set Hs - {t'})", "by blast+"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal (1 subgoal):\n 1. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case False"], ["proof (state)\nthis:\n  t' \\<notin> set Hs\n\ngoal (1 subgoal):\n 1. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence s: \"set Hs = insert t' (set Hs) - {t'}\""], ["proof (prove)\nusing this:\n  t' \\<notin> set Hs\n\ngoal (1 subgoal):\n 1. set Hs = insert t' (set Hs) - {t'}", "by auto"], ["proof (state)\nthis:\n  set Hs = insert t' (set Hs) - {t'}\n\ngoal (1 subgoal):\n 1. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have \"FV (set (map (\\<lambda>(x,y) . Fv x y) vs)) = set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FV (set (map (\\<lambda>(x, y). Fv x y) vs)) = set vs", "by (induction vs) auto"], ["proof (state)\nthis:\n  FV (set (map (\\<lambda>(x, y). Fv x y) vs)) = set vs\n\ngoal (1 subgoal):\n 1. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence frees_bound: \"fv t' \\<subseteq> fv t \\<union> set vs\""], ["proof (prove)\nusing this:\n  FV (set (map (\\<lambda>(x, y). Fv x y) vs)) = set vs\n\ngoal (1 subgoal):\n 1. fv t' \\<subseteq> fv t \\<union> set vs", "using fv_subst_bvs1_upper_bound subst_bvs_def"], ["proof (prove)\nusing this:\n  FV (set (map (\\<lambda>(x, y). Fv x y) vs)) = set vs\n  fv (subst_bvs1 ?t ?lev ?us)\n  \\<subseteq> fv ?t \\<union> \\<Union> (fv ` set ?us)\n  subst_bvs ?args ?t \\<equiv> subst_bvs1 ?t 0 ?args\n\ngoal (1 subgoal):\n 1. fv t' \\<subseteq> fv t \\<union> set vs", "by (fastforce simp add: conds(1)[symmetric])"], ["proof (state)\nthis:\n  fv t' \\<subseteq> fv t \\<union> set vs\n\ngoal (1 subgoal):\n 1. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have pre: \"thy,set (t' # Hs) \\<turnstile> rep\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set (t' # Hs) \\<turnstile> rep", "apply (rule \"5.IH\")"], ["proof (prove)\ngoal (9 subgoals):\n 1. t' = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n 2. wf_theory thy\n 3. \\<And>x. x \\<in> set (t' # Hs) \\<Longrightarrow> term_ok thy x\n 4. \\<And>x. x \\<in> set (t' # Hs) \\<Longrightarrow> typ_of x = Some propT\n 5. finite ns\n 6. fst ` FV (set (t' # Hs)) \\<subseteq> ns\n 7. fst ` fv_Proof p \\<subseteq> ns\n 8. fst ` set vs \\<subseteq> ns\n 9. replay' thy vs ns (t' # Hs) p = Some rep", "using \"5.prems\"(5-8) conds(3-4) frees_bound"], ["proof (prove)\nusing this:\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (AbsP t p) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (AbsP t p) = Some res\n  typ_of t' = Some propT\n  term_ok thy t'\n  fv t' \\<subseteq> fv t \\<union> set vs\n\ngoal (9 subgoals):\n 1. t' = subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n 2. wf_theory thy\n 3. \\<And>x. x \\<in> set (t' # Hs) \\<Longrightarrow> term_ok thy x\n 4. \\<And>x. x \\<in> set (t' # Hs) \\<Longrightarrow> typ_of x = Some propT\n 5. finite ns\n 6. fst ` FV (set (t' # Hs)) \\<subseteq> ns\n 7. fst ` fv_Proof p \\<subseteq> ns\n 8. fst ` set vs \\<subseteq> ns\n 9. replay' thy vs ns (t' # Hs) p = Some rep", "by (auto simp add: \"5.prems\"(1-4) conds(1) conds(2) image_subset_iff simp del: term_ok_def)"], ["proof (state)\nthis:\n  thy,set (t' # Hs) \\<turnstile> rep\n\ngoal (1 subgoal):\n 1. t' \\<notin> set Hs \\<Longrightarrow> thy,set Hs \\<turnstile> res", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "apply (subst res)"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> t' \\<longmapsto> rep", "apply (subst s)"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,insert t' (set Hs) - {t'} \\<turnstile> t' \\<longmapsto> rep", "apply (rule proves.implies_intro; use 5 conds in \\<open>(solves \\<open>simp add: wt_term_def\\<close>)?\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,insert t' (set Hs) \\<turnstile> rep", "using pre"], ["proof (prove)\nusing this:\n  thy,set (t' # Hs) \\<turnstile> rep\n\ngoal (1 subgoal):\n 1. thy,insert t' (set Hs) \\<turnstile> rep", "by simp"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case (6 thy vs ns Hs p1 p2)"], ["proof (state)\nthis:\n  \\<lbrakk>wf_theory thy;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n   fst ` fv_Proof p1 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n   replay' thy vs ns Hs p1 = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set Hs \\<turnstile> ?res\n  \\<lbrakk>?x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n   wf_theory thy; \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n   \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n   fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n   replay' thy vs ns Hs p2 = Some ?res\\<rbrakk>\n  \\<Longrightarrow> thy,set Hs \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (AppP p1 p2) = Some res\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from \\<open>replay' thy vs ns Hs (AppP p1 p2) = Some res\\<close>"], ["proof (chain)\npicking this:\n  replay' thy vs ns Hs (AppP p1 p2) = Some res", "obtain fn1 fn2 prp1 prp2 prp3 A B A' imp\n    where \n    conds: \"Option.bind (replay' thy vs ns Hs p1) beta_eta_norm\n      = Some (Ct imp (Ty fn1 [Ty prp1 [], Ty fn2 [Ty prp2 [], Ty prp3 []]]) $ A $ B)\" \n    \"Option.bind (replay' thy vs ns Hs p2) beta_eta_norm = Some A'\" \n    \"imp = STR ''Pure.imp'' \\<and> fn1 = STR ''fun'' \\<and> fn2 = STR ''fun''\n      \\<and> prp1 = STR ''prop'' \\<and> prp2 = STR ''prop'' \\<and> prp3 = STR ''prop'' \\<and> A=A'\"\n    and res: \"res = B\""], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs (AppP p1 p2) = Some res\n\ngoal (1 subgoal):\n 1. (\\<And>impa fn1 prp1 fn2 prp2 prp3 A B A'.\n        \\<lbrakk>Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n                 Some\n                  (Ct impa\n                    (Ty fn1\n                      [constT prp1, Ty fn2 [constT prp2, constT prp3]]) $\n                   A $\n                   B);\n         Option.bind (replay' thy vs ns Hs p2) beta_eta_norm = Some A';\n         impa = STR ''Pure.imp'' \\<and>\n         fn1 = STR ''fun'' \\<and>\n         fn2 = STR ''fun'' \\<and>\n         prp1 = STR ''prop'' \\<and>\n         prp2 = STR ''prop'' \\<and> prp3 = STR ''prop'' \\<and> A = A';\n         res = B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: term.splits typ.splits list.splits if_splits option.splits simp add: Let_def)"], ["proof (state)\nthis:\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some\n   (Ct imp (Ty fn1 [constT prp1, Ty fn2 [constT prp2, constT prp3]]) $ A $\n    B)\n  Option.bind (replay' thy vs ns Hs p2) beta_eta_norm = Some A'\n  imp = STR ''Pure.imp'' \\<and>\n  fn1 = STR ''fun'' \\<and>\n  fn2 = STR ''fun'' \\<and>\n  prp1 = STR ''prop'' \\<and>\n  prp2 = STR ''prop'' \\<and> prp3 = STR ''prop'' \\<and> A = A'\n  res = B\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "obtain C where C: \"Option.bind (replay' thy vs ns Hs p1) beta_eta_norm = Some (C \\<longmapsto> res)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n        Some (C \\<longmapsto> res) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using conds res"], ["proof (prove)\nusing this:\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some\n   (Ct imp (Ty fn1 [constT prp1, Ty fn2 [constT prp2, constT prp3]]) $ A $\n    B)\n  Option.bind (replay' thy vs ns Hs p2) beta_eta_norm = Some A'\n  imp = STR ''Pure.imp'' \\<and>\n  fn1 = STR ''fun'' \\<and>\n  fn2 = STR ''fun'' \\<and>\n  prp1 = STR ''prop'' \\<and>\n  prp2 = STR ''prop'' \\<and> prp3 = STR ''prop'' \\<and> A = A'\n  res = B\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n        Some (C \\<longmapsto> res) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some (C \\<longmapsto> res)\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from this"], ["proof (chain)\npicking this:\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some (C \\<longmapsto> res)", "obtain pre pre_C where pre: \"replay' thy vs ns Hs p1 = Some pre\" \n    and pre_C: \"replay' thy vs ns Hs p2 = Some pre_C\""], ["proof (prove)\nusing this:\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some (C \\<longmapsto> res)\n\ngoal (1 subgoal):\n 1. (\\<And>pre pre_C.\n        \\<lbrakk>replay' thy vs ns Hs p1 = Some pre;\n         replay' thy vs ns Hs p2 = Some pre_C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson bind_eq_Some_conv conds(2))"], ["proof (state)\nthis:\n  replay' thy vs ns Hs p1 = Some pre\n  replay' thy vs ns Hs p2 = Some pre_C\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from pre C"], ["proof (chain)\npicking this:\n  replay' thy vs ns Hs p1 = Some pre\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some (C \\<longmapsto> res)", "have norm_pre: \"beta_eta_norm pre = Some (C \\<longmapsto> res)\""], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs p1 = Some pre\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some (C \\<longmapsto> res)\n\ngoal (1 subgoal):\n 1. beta_eta_norm pre = Some (C \\<longmapsto> res)", "by simp"], ["proof (state)\nthis:\n  beta_eta_norm pre = Some (C \\<longmapsto> res)\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from pre_C pre C conds"], ["proof (chain)\npicking this:\n  replay' thy vs ns Hs p2 = Some pre_C\n  replay' thy vs ns Hs p1 = Some pre\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some (C \\<longmapsto> res)\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some\n   (Ct imp (Ty fn1 [constT prp1, Ty fn2 [constT prp2, constT prp3]]) $ A $\n    B)\n  Option.bind (replay' thy vs ns Hs p2) beta_eta_norm = Some A'\n  imp = STR ''Pure.imp'' \\<and>\n  fn1 = STR ''fun'' \\<and>\n  fn2 = STR ''fun'' \\<and>\n  prp1 = STR ''prop'' \\<and>\n  prp2 = STR ''prop'' \\<and> prp3 = STR ''prop'' \\<and> A = A'", "have norm_pre_C: \"beta_eta_norm pre_C = Some C\""], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs p2 = Some pre_C\n  replay' thy vs ns Hs p1 = Some pre\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some (C \\<longmapsto> res)\n  Option.bind (replay' thy vs ns Hs p1) beta_eta_norm =\n  Some\n   (Ct imp (Ty fn1 [constT prp1, Ty fn2 [constT prp2, constT prp3]]) $ A $\n    B)\n  Option.bind (replay' thy vs ns Hs p2) beta_eta_norm = Some A'\n  imp = STR ''Pure.imp'' \\<and>\n  fn1 = STR ''fun'' \\<and>\n  fn2 = STR ''fun'' \\<and>\n  prp1 = STR ''prop'' \\<and>\n  prp2 = STR ''prop'' \\<and> prp3 = STR ''prop'' \\<and> A = A'\n\ngoal (1 subgoal):\n 1. beta_eta_norm pre_C = Some C", "by auto"], ["proof (state)\nthis:\n  beta_eta_norm pre_C = Some C\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have \"thy, set Hs \\<turnstile> pre_C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> pre_C", "by (rule \"6.IH\"(2)) (use \"6.prems\" conds in \\<open>auto simp add: pre pre_C\\<close>)"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> pre_C\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence I1: \"thy, set Hs \\<turnstile> C\""], ["proof (prove)\nusing this:\n  thy,set Hs \\<turnstile> pre_C\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> C", "using beta_eta_norm_preserves_proves norm_pre_C \\<open>wf_theory thy\\<close>"], ["proof (prove)\nusing this:\n  thy,set Hs \\<turnstile> pre_C\n  \\<lbrakk>wf_theory ?\\<Theta>; finite ?\\<Gamma>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> ?t; beta_eta_norm ?t = Some ?u;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> ?u\n  beta_eta_norm pre_C = Some C\n  wf_theory thy\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> C", "using \"6.prems\"(2) \"6.prems\"(3)"], ["proof (prove)\nusing this:\n  thy,set Hs \\<turnstile> pre_C\n  \\<lbrakk>wf_theory ?\\<Theta>; finite ?\\<Gamma>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> ?t; beta_eta_norm ?t = Some ?u;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> ?u\n  beta_eta_norm pre_C = Some C\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> C", "by blast"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> C\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have \"thy, set Hs \\<turnstile> pre\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> pre", "by (rule \"6.IH\"(1)) (use \"6.prems\" conds in \\<open>auto simp add: pre pre_C\\<close>)"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> pre\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence I2: \"thy, set Hs \\<turnstile> C \\<longmapsto> res\""], ["proof (prove)\nusing this:\n  thy,set Hs \\<turnstile> pre\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> C \\<longmapsto> res", "using beta_eta_norm_preserves_proves norm_pre \\<open>wf_theory thy\\<close>"], ["proof (prove)\nusing this:\n  thy,set Hs \\<turnstile> pre\n  \\<lbrakk>wf_theory ?\\<Theta>; finite ?\\<Gamma>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> ?t; beta_eta_norm ?t = Some ?u;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> ?u\n  beta_eta_norm pre = Some (C \\<longmapsto> res)\n  wf_theory thy\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> C \\<longmapsto> res", "using \"6.prems\"(2) \"6.prems\"(3)"], ["proof (prove)\nusing this:\n  thy,set Hs \\<turnstile> pre\n  \\<lbrakk>wf_theory ?\\<Theta>; finite ?\\<Gamma>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> ?t; beta_eta_norm ?t = Some ?u;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> ?u\n  beta_eta_norm pre = Some (C \\<longmapsto> res)\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> C \\<longmapsto> res", "by blast"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> C \\<longmapsto> res\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from I1 I2"], ["proof (chain)\npicking this:\n  thy,set Hs \\<turnstile> C\n  thy,set Hs \\<turnstile> C \\<longmapsto> res", "have \"thy, set Hs \\<union> set Hs \\<turnstile> res\""], ["proof (prove)\nusing this:\n  thy,set Hs \\<turnstile> C\n  thy,set Hs \\<turnstile> C \\<longmapsto> res\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<union> set Hs \\<turnstile> res", "using proves.implies_elim"], ["proof (prove)\nusing this:\n  thy,set Hs \\<turnstile> C\n  thy,set Hs \\<turnstile> C \\<longmapsto> res\n  \\<lbrakk>?\\<Theta>,?\\<Gamma>\\<^sub>1 \\<turnstile> ?A \\<longmapsto> ?B;\n   ?\\<Theta>,?\\<Gamma>\\<^sub>2 \\<turnstile> ?A\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma>\\<^sub>1 \\<union>\n                              ?\\<Gamma>\\<^sub>2 \\<turnstile> ?B\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<union> set Hs \\<turnstile> res", "by blast"], ["proof (state)\nthis:\n  thy,set Hs \\<union> set Hs \\<turnstile> res\n\ngoal (3 subgoals):\n 1. \\<And>thy vs ns Hs p1 p2 res.\n       \\<lbrakk>\\<And>res.\n                   \\<lbrakk>wf_theory thy;\n                    \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n                    \\<And>x.\n                       x \\<in> set Hs \\<Longrightarrow>\n                       typ_of x = Some propT;\n                    finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n                    fst ` fv_Proof p1 \\<subseteq> ns;\n                    fst ` set vs \\<subseteq> ns;\n                    replay' thy vs ns Hs p1 = Some res\\<rbrakk>\n                   \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        \\<And>x res.\n           \\<lbrakk>x = Option.bind (replay' thy vs ns Hs p1) beta_eta_norm;\n            wf_theory thy;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n            \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n            finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n            fst ` fv_Proof p2 \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n            replay' thy vs ns Hs p2 = Some res\\<rbrakk>\n           \\<Longrightarrow> thy,set Hs \\<turnstile> res;\n        wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (AppP p1 p2) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (AppP p1 p2) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 3. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "thus ?case"], ["proof (prove)\nusing this:\n  thy,set Hs \\<union> set Hs \\<turnstile> res\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "by simp"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal (2 subgoals):\n 1. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case (7 thy vs ns Hs ty c)"], ["proof (state)\nthis:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (OfClass ty c) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (OfClass ty c) = Some res\n\ngoal (2 subgoals):\n 1. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from this"], ["proof (chain)\npicking this:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (OfClass ty c) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (OfClass ty c) = Some res", "obtain \"fun\" it ity \"prop\"  where conds: \"has_sort (osig (sig thy)) ty {c}\" \n    \"typ_ok thy ty\" \"const_type (sig thy) (const_of_class c) \n      = Some (Ty fun [Ty it [ity], Ty prop []])\" \"ity = tvariable STR '''a''\"\n     \"fun = STR ''fun''\" \"prop = STR ''prop''\" \"it = STR ''itself''\" \n    and res: \"res = (mk_of_class ty c)\""], ["proof (prove)\nusing this:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof (OfClass ty c) \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay' thy vs ns Hs (OfClass ty c) = Some res\n\ngoal (1 subgoal):\n 1. (\\<And>fun it ity prop.\n        \\<lbrakk>has_sort (osig (sig thy)) ty (insert c full_sort);\n         typ_ok thy ty;\n         const_type (sig thy) (const_of_class c) =\n         Some (Ty fun [Ty it [ity], constT prop]);\n         ity = Core.aT; fun = STR ''fun''; prop = STR ''prop'';\n         it = STR ''itself''; res = mk_of_class ty c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: term.splits typ.splits list.splits if_splits option.splits)"], ["proof (state)\nthis:\n  has_sort (osig (sig thy)) ty (insert c full_sort)\n  typ_ok thy ty\n  const_type (sig thy) (const_of_class c) =\n  Some (Ty fun [Ty it [ity], constT prop])\n  ity = Core.aT\n  fun = STR ''fun''\n  prop = STR ''prop''\n  it = STR ''itself''\n  res = mk_of_class ty c\n\ngoal (2 subgoals):\n 1. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "from res"], ["proof (chain)\npicking this:\n  res = mk_of_class ty c", "have \"res = mk_of_class ty c\""], ["proof (prove)\nusing this:\n  res = mk_of_class ty c\n\ngoal (1 subgoal):\n 1. res = mk_of_class ty c", "by auto"], ["proof (state)\nthis:\n  res = mk_of_class ty c\n\ngoal (2 subgoals):\n 1. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "moreover"], ["proof (state)\nthis:\n  res = mk_of_class ty c\n\ngoal (2 subgoals):\n 1. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "have \"thy,set Hs \\<turnstile> mk_of_class ty c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> mk_of_class ty c", "by (rule proves.of_class[where T=ty, OF \"7.prems\"(1)]) (use conds in auto)"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> mk_of_class ty c\n\ngoal (2 subgoals):\n 1. \\<And>thy vs ns Hs ty c res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (OfClass ty c) \\<subseteq> ns;\n        fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (OfClass ty c) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res\n 2. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "ultimately"], ["proof (chain)\npicking this:\n  res = mk_of_class ty c\n  thy,set Hs \\<turnstile> mk_of_class ty c", "show ?case"], ["proof (prove)\nusing this:\n  res = mk_of_class ty c\n  thy,set Hs \\<turnstile> mk_of_class ty c\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "by simp"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal (1 subgoal):\n 1. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "case (8 thy ux uy Hs n)"], ["proof (state)\nthis:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite uy\n  fst ` FV (set Hs) \\<subseteq> uy\n  fst ` fv_Proof (Hyp n) \\<subseteq> uy\n  fst ` set ux \\<subseteq> uy\n  replay' thy ux uy Hs (Hyp n) = Some res\n\ngoal (1 subgoal):\n 1. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "hence \"res \\<in> set Hs\""], ["proof (prove)\nusing this:\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite uy\n  fst ` FV (set Hs) \\<subseteq> uy\n  fst ` fv_Proof (Hyp n) \\<subseteq> uy\n  fst ` set ux \\<subseteq> uy\n  replay' thy ux uy Hs (Hyp n) = Some res\n\ngoal (1 subgoal):\n 1. res \\<in> set Hs", "by (metis not_None_eq option.inject replay'.simps(8))"], ["proof (state)\nthis:\n  res \\<in> set Hs\n\ngoal (1 subgoal):\n 1. \\<And>thy vs ns Hs t res.\n       \\<lbrakk>wf_theory thy;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> term_ok thy x;\n        \\<And>x. x \\<in> set Hs \\<Longrightarrow> typ_of x = Some propT;\n        finite ns; fst ` FV (set Hs) \\<subseteq> ns;\n        fst ` fv_Proof (Hyp t) \\<subseteq> ns; fst ` set vs \\<subseteq> ns;\n        replay' thy vs ns Hs (Hyp t) = Some res\\<rbrakk>\n       \\<Longrightarrow> thy,set Hs \\<turnstile> res", "then"], ["proof (chain)\npicking this:\n  res \\<in> set Hs", "show ?case"], ["proof (prove)\nusing this:\n  res \\<in> set Hs\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "using proves.assume 8"], ["proof (prove)\nusing this:\n  res \\<in> set Hs\n  \\<lbrakk>wf_term (sig ?\\<Theta>) ?A; \\<turnstile>\\<^sub>\\<tau> ?A : propT;\n   ?A \\<in> ?\\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> ?A\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite uy\n  fst ` FV (set Hs) \\<subseteq> uy\n  fst ` fv_Proof (Hyp n) \\<subseteq> uy\n  fst ` set ux \\<subseteq> uy\n  replay' thy ux uy Hs (Hyp n) = Some res\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "by (simp add: wt_term_def)"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_fv_Proof: \"finite (fv_Proof P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fv_Proof P)", "by (induction P) auto"], ["", "abbreviation \"replay'' thy vs ns Hs P \\<equiv> Option.bind (replay' thy vs ns Hs P) beta_eta_norm\""], ["", "lemma replay''_sound:\n  assumes \"wf_theory thy\"\n  (* Assumptions *)\n  assumes HS_invs: \n    \"\\<And>x. x\\<in>set Hs \\<Longrightarrow> term_ok thy x\"\n    \"\\<And>x. x\\<in>set Hs \\<Longrightarrow> typ_of x = Some propT\" \n  (* Names used *)\n  assumes ns_invs:\n    \"finite ns\"\n    \"fst ` FV (set Hs) \\<subseteq> ns\"\n    \"fst ` fv_Proof P \\<subseteq> ns\"\n  (* Fviables used *)\n  assumes vs_invs:\n    \"fst ` set vs \\<subseteq> ns\"\n  (* Checked proof can be replayed using proves*)\n  assumes \"replay'' thy vs ns Hs P = Some res\"\n  shows \"thy, (set Hs) \\<turnstile> res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "obtain res' where res': \"replay' thy vs ns Hs P = Some res'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>res'.\n        replay' thy vs ns Hs P = Some res' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using replay'_sound_pre assms bind_eq_Some_conv"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory ?thy;\n   \\<And>x. x \\<in> set ?Hs \\<Longrightarrow> term_ok ?thy x;\n   \\<And>x. x \\<in> set ?Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ?ns; fst ` FV (set ?Hs) \\<subseteq> ?ns;\n   fst ` fv_Proof ?P \\<subseteq> ?ns; fst ` set ?vs \\<subseteq> ?ns;\n   replay' ?thy ?vs ?ns ?Hs ?P = Some ?res\\<rbrakk>\n  \\<Longrightarrow> ?thy,set ?Hs \\<turnstile> ?res\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof P \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay'' thy vs ns Hs P = Some res\n  (Option.bind ?f ?g = Some ?x) =\n  (\\<exists>y. ?f = Some y \\<and> ?g y = Some ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>res'.\n        replay' thy vs ns Hs P = Some res' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  replay' thy vs ns Hs P = Some res'\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "moreover"], ["proof (state)\nthis:\n  replay' thy vs ns Hs P = Some res'\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "have \"beta_eta_norm res' = Some res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. beta_eta_norm res' = Some res", "using res' assms(8)"], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs P = Some res'\n  replay'' thy vs ns Hs P = Some res\n\ngoal (1 subgoal):\n 1. beta_eta_norm res' = Some res", "by auto"], ["proof (state)\nthis:\n  beta_eta_norm res' = Some res\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "moreover"], ["proof (state)\nthis:\n  beta_eta_norm res' = Some res\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "have \"thy, set Hs \\<turnstile> res'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res'", "using res' assms replay'_sound_pre"], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs P = Some res'\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n  finite ns\n  fst ` FV (set Hs) \\<subseteq> ns\n  fst ` fv_Proof P \\<subseteq> ns\n  fst ` set vs \\<subseteq> ns\n  replay'' thy vs ns Hs P = Some res\n  \\<lbrakk>wf_theory ?thy;\n   \\<And>x. x \\<in> set ?Hs \\<Longrightarrow> term_ok ?thy x;\n   \\<And>x. x \\<in> set ?Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ?ns; fst ` FV (set ?Hs) \\<subseteq> ?ns;\n   fst ` fv_Proof ?P \\<subseteq> ?ns; fst ` set ?vs \\<subseteq> ?ns;\n   replay' ?thy ?vs ?ns ?Hs ?P = Some ?res\\<rbrakk>\n  \\<Longrightarrow> ?thy,set ?Hs \\<turnstile> ?res\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res'", "by simp"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res'\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "ultimately"], ["proof (chain)\npicking this:\n  replay' thy vs ns Hs P = Some res'\n  beta_eta_norm res' = Some res\n  thy,set Hs \\<turnstile> res'", "show ?thesis"], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs P = Some res'\n  beta_eta_norm res' = Some res\n  thy,set Hs \\<turnstile> res'\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "using beta_eta_norm_preserves_proves assms(1-3)"], ["proof (prove)\nusing this:\n  replay' thy vs ns Hs P = Some res'\n  beta_eta_norm res' = Some res\n  thy,set Hs \\<turnstile> res'\n  \\<lbrakk>wf_theory ?\\<Theta>; finite ?\\<Gamma>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> ?t; beta_eta_norm ?t = Some ?u;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> ?u\n  wf_theory thy\n  ?x \\<in> set Hs \\<Longrightarrow> term_ok thy ?x\n  ?x \\<in> set Hs \\<Longrightarrow> typ_of ?x = Some propT\n\ngoal (1 subgoal):\n 1. thy,set Hs \\<turnstile> res", "by blast"], ["proof (state)\nthis:\n  thy,set Hs \\<turnstile> res\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \n  assumes \"wf_theory thy\"\n  assumes \"replay'' thy [] (fst ` fv_Proof P) [] P = Some res\"\n  shows \"thy, set [] \\<turnstile> res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set [] \\<turnstile> res", "using assms finite_fv_Proof replay'_sound_pre replay''_sound[where vs=\"[]\" \n      and ns=\"fst ` fv_Proof P\" and P=P and Hs=\"[]\"]"], ["proof (prove)\nusing this:\n  wf_theory thy\n  replay'' thy [] (fst ` fv_Proof P) [] P = Some res\n  finite (fv_Proof ?P)\n  \\<lbrakk>wf_theory ?thy;\n   \\<And>x. x \\<in> set ?Hs \\<Longrightarrow> term_ok ?thy x;\n   \\<And>x. x \\<in> set ?Hs \\<Longrightarrow> typ_of x = Some propT;\n   finite ?ns; fst ` FV (set ?Hs) \\<subseteq> ?ns;\n   fst ` fv_Proof ?P \\<subseteq> ?ns; fst ` set ?vs \\<subseteq> ?ns;\n   replay' ?thy ?vs ?ns ?Hs ?P = Some ?res\\<rbrakk>\n  \\<Longrightarrow> ?thy,set ?Hs \\<turnstile> ?res\n  \\<lbrakk>wf_theory ?thy;\n   \\<And>x. x \\<in> set [] \\<Longrightarrow> term_ok ?thy x;\n   \\<And>x. x \\<in> set [] \\<Longrightarrow> typ_of x = Some propT;\n   finite (fst ` fv_Proof P);\n   fst ` FV (set []) \\<subseteq> fst ` fv_Proof P;\n   fst ` fv_Proof P \\<subseteq> fst ` fv_Proof P;\n   fst ` set [] \\<subseteq> fst ` fv_Proof P;\n   replay'' ?thy [] (fst ` fv_Proof P) [] P = Some ?res\\<rbrakk>\n  \\<Longrightarrow> ?thy,set [] \\<turnstile> ?res\n\ngoal (1 subgoal):\n 1. thy,set [] \\<turnstile> res", "by simp"], ["", "(* With open hyps, run  *)"], ["", "fun hyps :: \"proofterm \\<Rightarrow> term list\" where\n  \"hyps (Abst _ p) = hyps p\"\n| \"hyps (AbsP _ p) = hyps p\"\n| \"hyps (Appt p _) = hyps p\"\n| \"hyps (AppP p1 p2) = List.union (hyps p1) (hyps p2)\"\n| \"hyps (Hyp t) = [t]\"\n| \"hyps _ = []\""], ["", "lemma replay''_sound_pre_hyps:\n  assumes \"wf_theory thy\"\n  (* This can be checked independently before running replay'. Could also check during replay' in Hyp step... *)\n  assumes \"\\<And>x. x \\<in> set (hyps P) \\<Longrightarrow> term_ok thy x\"\n  assumes \"\\<And>x. x \\<in> set (hyps P) \\<Longrightarrow> typ_of x = Some propT\"\n  assumes \"replay'' thy [] (fst ` (fv_Proof P \\<union> FV (set (hyps P)))) (hyps P) P = Some res\"\n  shows \"thy, set (hyps P) \\<turnstile> res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<turnstile> res", "apply (rule replay''_sound[where vs=\"[]\" and ns=\"(fst ` (fv_Proof P \\<union> FV (set (hyps P))))\" and P=P and Hs=\"hyps P\"]\n  ; (use assms finite_fv_Proof replay'_sound_pre in \\<open>solves simp\\<close>)?)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fst ` FV (set (hyps P))\n    \\<subseteq> fst ` (fv_Proof P \\<union> FV (set (hyps P)))\n 2. fst ` fv_Proof P\n    \\<subseteq> fst ` (fv_Proof P \\<union> FV (set (hyps P)))", "by blast+"], ["", "definition [simp]: \"replay thy P \\<equiv> \n  (if \\<forall>x\\<in>set (hyps P) . term_ok thy x \\<and> typ_of x = Some propT then\n  replay'' thy [] (fst ` (fv_Proof P \\<union> FV (set (hyps P)))) (hyps P) P else None)\""], ["", "lemma replay_sound_pre_hyps:\n  assumes \"wf_theory thy\"\n  assumes \"replay thy P = Some res\"\n  shows \"thy, set (hyps P) \\<turnstile> res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<turnstile> res", "using replay''_sound_pre_hyps assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory ?thy;\n   \\<And>x. x \\<in> set (hyps ?P) \\<Longrightarrow> term_ok ?thy x;\n   \\<And>x. x \\<in> set (hyps ?P) \\<Longrightarrow> typ_of x = Some propT;\n   replay'' ?thy [] (fst ` (fv_Proof ?P \\<union> FV (set (hyps ?P))))\n    (hyps ?P) ?P =\n   Some ?res\\<rbrakk>\n  \\<Longrightarrow> ?thy,set (hyps ?P) \\<turnstile> ?res\n  wf_theory thy\n  replay thy P = Some res\n\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<turnstile> res", "by (simp split: if_splits)"], ["", "definition \"check_proof thy P res \\<equiv> wf_theory thy \\<and> replay thy P = Some res\""], ["", "lemma check_proof_sound:\n  shows \"check_proof thy P res \\<Longrightarrow> thy, set (hyps P) \\<turnstile> res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_proof thy P res \\<Longrightarrow>\n    thy,set (hyps P) \\<turnstile> res", "using check_proof_def replay_sound_pre_hyps"], ["proof (prove)\nusing this:\n  check_proof ?thy ?P ?res \\<equiv>\n  wf_theory ?thy \\<and> replay ?thy ?P = Some ?res\n  \\<lbrakk>wf_theory ?thy; replay ?thy ?P = Some ?res\\<rbrakk>\n  \\<Longrightarrow> ?thy,set (hyps ?P) \\<turnstile> ?res\n\ngoal (1 subgoal):\n 1. check_proof thy P res \\<Longrightarrow>\n    thy,set (hyps P) \\<turnstile> res", "by blast"], ["", "lemma check_proof_really_sound:\n  assumes \"check_proof thy P res\"\n  shows \"thy, set (hyps P) \\<tturnstile> res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<tturnstile> res", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<tturnstile> res", "have \"wf_theory thy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_theory thy", "using assms check_proof_def"], ["proof (prove)\nusing this:\n  check_proof thy P res\n  check_proof ?thy ?P ?res \\<equiv>\n  wf_theory ?thy \\<and> replay ?thy ?P = Some ?res\n\ngoal (1 subgoal):\n 1. wf_theory thy", "by blast"], ["proof (state)\nthis:\n  wf_theory thy\n\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<tturnstile> res", "moreover"], ["proof (state)\nthis:\n  wf_theory thy\n\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<tturnstile> res", "have \"Some res = replay thy P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some res = replay thy P", "by (metis assms check_proof_def)"], ["proof (state)\nthis:\n  Some res = replay thy P\n\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<tturnstile> res", "moreover"], ["proof (state)\nthis:\n  Some res = replay thy P\n\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<tturnstile> res", "hence \"\\<forall>x\\<in>set (hyps P) . term_ok thy x \\<and> typ_of x = Some propT\""], ["proof (prove)\nusing this:\n  Some res = replay thy P\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (hyps P). term_ok thy x \\<and> typ_of x = Some propT", "by (metis not_None_eq replay_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (hyps P). term_ok thy x \\<and> typ_of x = Some propT\n\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<tturnstile> res", "ultimately"], ["proof (chain)\npicking this:\n  wf_theory thy\n  Some res = replay thy P\n  \\<forall>x\\<in>set (hyps P). term_ok thy x \\<and> typ_of x = Some propT", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_theory thy\n  Some res = replay thy P\n  \\<forall>x\\<in>set (hyps P). term_ok thy x \\<and> typ_of x = Some propT\n\ngoal (1 subgoal):\n 1. thy,set (hyps P) \\<tturnstile> res", "by (meson assms check_proof_sound has_typ_iff_typ_of proved_terms_well_formed(1) proves'_def \n        term_ok_def wt_term_def)"], ["proof (state)\nthis:\n  thy,set (hyps P) \\<tturnstile> res\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}