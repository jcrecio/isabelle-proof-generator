{"file_name": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker/Sorts.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker", "problem_names": ["lemmas class_defs = class_leq_def class_les_def class_ex_def", "lemmas sort_defs = sort_leq_def sort_les_def sort_eqv_def sort_ex_def", "lemma sort_ex_class_ex: \"sort_ex cs S \\<equiv> \\<forall>c \\<in> S. class_ex cs c\"", "lemma class_les_irrefl: \"\\<not> class_les cs c c\"", "lemma class_les_trans: \"class_les cs x y \\<Longrightarrow> class_les cs y z \\<Longrightarrow> class_les cs x z\"", "lemma class_leq_refl[iff]: \"class_ex cs c \\<Longrightarrow> class_leq cs c c\"", "lemma class_leq_trans: \"class_leq cs x y \\<Longrightarrow> class_leq cs y z \\<Longrightarrow> class_leq cs x z\"", "lemma class_leq_antisym: \"class_leq cs c1 c2 \\<Longrightarrow> class_leq cs c2 c1 \\<Longrightarrow> c1=c2\"", "lemma sort_leq_refl[iff]: \"sort_ex cs s \\<Longrightarrow> sort_leq cs s s\"", "lemma sort_leq_trans: \"sort_leq cs x y \\<Longrightarrow> sort_leq cs y z \\<Longrightarrow> sort_leq cs x z\"", "lemma sort_leq_ex: \"sort_leq cs s1 s2 \\<Longrightarrow> sort_ex cs s2\"", "lemma sort_leq_minimize: \n  \"sort_leq cs s1 s2 \\<Longrightarrow> \\<exists>s1'. (\\<forall>c1 \\<in> s1' . \\<exists>c2 \\<in> s2. class_leq cs c1 c2) \\<and> sort_leq cs s1' s2\"", "lemma \"sort_ex cs s2 \\<Longrightarrow> s1 \\<subseteq> s2 \\<Longrightarrow> sort_ex cs s1\"", "lemma superset_imp_sort_leq: \"sort_ex cs s2 \\<Longrightarrow> s1 \\<supseteq> s2 \\<Longrightarrow> sort_leq cs s1 s2\"", "lemma full_sort_top: \"sort_ex cs s \\<Longrightarrow> sort_leq cs s full_sort\"", "lemma sort_les_trans: \"sort_les cs x y \\<Longrightarrow> sort_les cs y z \\<Longrightarrow> sort_les cs x z\"", "lemma sort_eqvI: \"sort_leq cs s1 s2 \\<Longrightarrow> sort_leq cs s2 s1 \\<Longrightarrow> sort_eqv cs s1 s2\"", "lemma sort_eqv_refl: \"sort_ex cs s \\<Longrightarrow> sort_eqv cs s s\"", "lemma sort_eqv_trans: \"sort_eqv cs x y \\<Longrightarrow> sort_eqv cs y z \\<Longrightarrow> sort_eqv cs x z\"", "lemma sort_eqv_sym: \"sort_eqv cs x y \\<Longrightarrow> sort_eqv cs y x\"", "lemma normalize_sort_empty[simp]: \"normalize_sort cs full_sort = full_sort\"", "lemma normalize_sort_normalize_sort[simp]: \n  \"normalize_sort cs (normalize_sort cs s) = normalize_sort cs s\"", "lemma sort_ex_norm_sort: \"sort_ex cs s \\<Longrightarrow> sort_ex cs (normalize_sort cs s)\"", "lemma normalized_sort_subset: \"normalize_sort cs s \\<subseteq> s\"", "lemma normalize_sort_removed_elem_irrelevant':\n  assumes \"sort_ex cs (insert c s)\"\n  assumes \"c \\<notin> (normalize_sort cs (insert c s))\"\n  shows \"normalize_sort cs (insert c s) = normalize_sort cs s\"", "lemma normalize_sort_nempt_is_nempty:\n  assumes finite: \"finite s\"\n  assumes nempty: \"s \\<noteq> full_sort\"\n  assumes \"sort_ex cs s\"\n  shows \"normalize_sort cs s \\<noteq> full_sort\"", "lemma choose_smaller_in_sort:\n  assumes elem: \"c \\<in> s\" and nelem: \"c \\<notin> (normalize_sort cs s)\" and \"sort_ex cs s\"\n  obtains c' where \"c' \\<in> s\" and \"class_les cs c' c\"", "lemma normalize_ex_bound':\n  assumes finite: \"finite s\" and elem: \"c \\<in> s\" and nelem: \"c \\<notin> (normalize_sort cs s)\" \n    and \"sort_ex cs s\"\n  shows \"\\<exists>c' \\<in> (normalize_sort cs s) . class_les cs c' c\"", "lemma \"sort_ex cs s \\<Longrightarrow> sort_leq cs s (normalize_sort cs s)\"", "lemma sort_eqv_normalize_sort:\n  assumes \"finite s\"\n  assumes \"sort_ex cs s\" \n  shows \"sort_eqv cs s (normalize_sort cs s)\"", "lemma normalize_sort_eq_imp_sort_eqv: \"sort_ex cs s1 \\<Longrightarrow> sort_ex cs s2 \\<Longrightarrow> finite s1 \\<Longrightarrow> finite s2\n  \\<Longrightarrow> normalize_sort cs s1 = normalize_sort cs s2\n  \\<Longrightarrow> sort_eqv cs s1 s2\"", "lemma \"class_leq cs c1 c2 \\<longleftrightarrow> class_les cs c1 c2 \\<or> (c1=c2 \\<and> class_ex cs c1)\"", "lemma sort_eqv_imp_normalize_sort_eq:\n  assumes \"sort_ex cs s1\" \"sort_ex cs s2\" \"sort_eqv cs s1 s2\"\n  shows \"normalize_sort cs s1 = normalize_sort cs s2\"", "lemma tcsigs_sorts_defined: \"wf_osig oss \\<Longrightarrow> \n  (\\<forall>ars \\<in> ran (tcsigs oss) . \\<forall>ss \\<in> ran ars . \\<forall>s \\<in> set ss. sort_ex (subclass oss) s)\"", "lemma osig_subclass_loc: \"wf_osig oss \\<Longrightarrow> wf_subclass_loc (subclass oss)\"", "lemma wf_osig_imp_wf_subclass_loc: \"wf_osig oss \\<Longrightarrow> wf_subclass_loc (subclass oss)\"", "lemma has_sort_Tv_imp_sort_leq: \"has_sort oss (Tv idn S) S' \\<Longrightarrow> sort_leq (subclass oss) S S'\""], "translations": [["", "lemmas class_defs = class_leq_def class_les_def class_ex_def"], ["", "lemmas sort_defs = sort_leq_def sort_les_def sort_eqv_def sort_ex_def"], ["", "lemma sort_ex_class_ex: \"sort_ex cs S \\<equiv> \\<forall>c \\<in> S. class_ex cs c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_ex cs S \\<equiv> \\<forall>c\\<in>S. class_ex cs c", "by (auto simp add: sort_ex_def class_ex_def subset_eq)"], ["", "(* Did not want to write the wf_subclass cs assumption each time + allowed type class instances inside\n  Now probably more trouble than help\n*)"], ["", "locale wf_subclass_loc =\n  fixes cs :: \"class rel\"\n  assumes wf[simp]: \"wf_subclass cs\"\nbegin"], ["", "lemma class_les_irrefl: \"\\<not> class_les cs c c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> class_les cs c c", "using wf"], ["proof (prove)\nusing this:\n  wf_subclass cs\n\ngoal (1 subgoal):\n 1. \\<not> class_les cs c c", "by (simp add: class_les_def)"], ["", "lemma class_les_trans: \"class_les cs x y \\<Longrightarrow> class_les cs y z \\<Longrightarrow> class_les cs x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class_les cs x y; class_les cs y z\\<rbrakk>\n    \\<Longrightarrow> class_les cs x z", "using wf"], ["proof (prove)\nusing this:\n  wf_subclass cs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class_les cs x y; class_les cs y z\\<rbrakk>\n    \\<Longrightarrow> class_les cs x z", "by (auto simp add: class_les_def class_leq_def trans_def)"], ["", "lemma class_leq_refl[iff]: \"class_ex cs c \\<Longrightarrow> class_leq cs c c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class_ex cs c \\<Longrightarrow> class_leq cs c c", "using wf"], ["proof (prove)\nusing this:\n  wf_subclass cs\n\ngoal (1 subgoal):\n 1. class_ex cs c \\<Longrightarrow> class_leq cs c c", "by (simp add: class_leq_def class_ex_def refl_on_def)"], ["", "lemma class_leq_trans: \"class_leq cs x y \\<Longrightarrow> class_leq cs y z \\<Longrightarrow> class_leq cs x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class_leq cs x y; class_leq cs y z\\<rbrakk>\n    \\<Longrightarrow> class_leq cs x z", "using wf"], ["proof (prove)\nusing this:\n  wf_subclass cs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class_leq cs x y; class_leq cs y z\\<rbrakk>\n    \\<Longrightarrow> class_leq cs x z", "by (auto simp add: class_leq_def elim: transE)"], ["", "lemma class_leq_antisym: \"class_leq cs c1 c2 \\<Longrightarrow> class_leq cs c2 c1 \\<Longrightarrow> c1=c2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class_leq cs c1 c2; class_leq cs c2 c1\\<rbrakk>\n    \\<Longrightarrow> c1 = c2", "using wf"], ["proof (prove)\nusing this:\n  wf_subclass cs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class_leq cs c1 c2; class_leq cs c2 c1\\<rbrakk>\n    \\<Longrightarrow> c1 = c2", "by (auto intro: antisymD simp: trans_def class_leq_def)"], ["", "(* classes form a ~ partial order with class_les/class_leq a for a well-formed a*)"], ["", "lemma sort_leq_refl[iff]: \"sort_ex cs s \\<Longrightarrow> sort_leq cs s s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_ex cs s \\<Longrightarrow> sort_leq cs s s", "using class_leq_refl"], ["proof (prove)\nusing this:\n  class_ex cs ?c \\<Longrightarrow> class_leq cs ?c ?c\n\ngoal (1 subgoal):\n 1. sort_ex cs s \\<Longrightarrow> sort_leq cs s s", "by (auto simp add: sort_ex_class_ex sort_leq_def)"], ["", "lemma sort_leq_trans: \"sort_leq cs x y \\<Longrightarrow> sort_leq cs y z \\<Longrightarrow> sort_leq cs x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sort_leq cs x y; sort_leq cs y z\\<rbrakk>\n    \\<Longrightarrow> sort_leq cs x z", "by (meson class_leq_trans sort_leq_def)"], ["", "lemma sort_leq_ex: \"sort_leq cs s1 s2 \\<Longrightarrow> sort_ex cs s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_leq cs s1 s2 \\<Longrightarrow> sort_ex cs s2", "by (auto simp add: sort_ex_def class_leq_def sort_leq_def intro: FieldI2)"], ["", "(* ... *)"], ["", "lemma sort_leq_minimize: \n  \"sort_leq cs s1 s2 \\<Longrightarrow> \\<exists>s1'. (\\<forall>c1 \\<in> s1' . \\<exists>c2 \\<in> s2. class_leq cs c1 c2) \\<and> sort_leq cs s1' s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_leq cs s1 s2 \\<Longrightarrow>\n    \\<exists>s1'.\n       (\\<forall>c1\\<in>s1'. \\<exists>c2\\<in>s2. class_leq cs c1 c2) \\<and>\n       sort_leq cs s1' s2", "by (meson class_leq_refl sort_ex_class_ex sort_leq_ex sort_leq_refl)"], ["", "lemma \"sort_ex cs s2 \\<Longrightarrow> s1 \\<subseteq> s2 \\<Longrightarrow> sort_ex cs s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sort_ex cs s2; s1 \\<subseteq> s2\\<rbrakk>\n    \\<Longrightarrow> sort_ex cs s1", "by (meson sort_ex_def subset_trans)"], ["", "lemma superset_imp_sort_leq: \"sort_ex cs s2 \\<Longrightarrow> s1 \\<supseteq> s2 \\<Longrightarrow> sort_leq cs s1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sort_ex cs s2; s2 \\<subseteq> s1\\<rbrakk>\n    \\<Longrightarrow> sort_leq cs s1 s2", "by (auto simp add: sort_ex_class_ex sort_leq_def sort_ex_def)"], ["", "lemma full_sort_top: \"sort_ex cs s \\<Longrightarrow> sort_leq cs s full_sort\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_ex cs s \\<Longrightarrow> sort_leq cs s full_sort", "by (simp add: sort_leq_def)"], ["", "(* Is this even useful? *)"], ["", "lemma sort_les_trans: \"sort_les cs x y \\<Longrightarrow> sort_les cs y z \\<Longrightarrow> sort_les cs x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sort_les cs x y; sort_les cs y z\\<rbrakk>\n    \\<Longrightarrow> sort_les cs x z", "using sort_les_def sort_leq_trans"], ["proof (prove)\nusing this:\n  sort_les ?cs ?s1.0 ?s2.0 =\n  (sort_leq ?cs ?s1.0 ?s2.0 \\<and> \\<not> sort_leq ?cs ?s2.0 ?s1.0)\n  \\<lbrakk>sort_leq cs ?x ?y; sort_leq cs ?y ?z\\<rbrakk>\n  \\<Longrightarrow> sort_leq cs ?x ?z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sort_les cs x y; sort_les cs y z\\<rbrakk>\n    \\<Longrightarrow> sort_les cs x z", "by blast"], ["", "lemma sort_eqvI: \"sort_leq cs s1 s2 \\<Longrightarrow> sort_leq cs s2 s1 \\<Longrightarrow> sort_eqv cs s1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sort_leq cs s1 s2; sort_leq cs s2 s1\\<rbrakk>\n    \\<Longrightarrow> sort_eqv cs s1 s2", "by (simp add: sort_eqv_def)"], ["", "lemma sort_eqv_refl: \"sort_ex cs s \\<Longrightarrow> sort_eqv cs s s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_ex cs s \\<Longrightarrow> sort_eqv cs s s", "using sort_leq_refl"], ["proof (prove)\nusing this:\n  sort_ex cs ?s \\<Longrightarrow> sort_leq cs ?s ?s\n\ngoal (1 subgoal):\n 1. sort_ex cs s \\<Longrightarrow> sort_eqv cs s s", "by (auto simp add: sort_eqv_def)"], ["", "lemma sort_eqv_trans: \"sort_eqv cs x y \\<Longrightarrow> sort_eqv cs y z \\<Longrightarrow> sort_eqv cs x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sort_eqv cs x y; sort_eqv cs y z\\<rbrakk>\n    \\<Longrightarrow> sort_eqv cs x z", "using sort_eqv_def sort_leq_trans"], ["proof (prove)\nusing this:\n  sort_eqv ?cs ?s1.0 ?s2.0 =\n  (sort_leq ?cs ?s1.0 ?s2.0 \\<and> sort_leq ?cs ?s2.0 ?s1.0)\n  \\<lbrakk>sort_leq cs ?x ?y; sort_leq cs ?y ?z\\<rbrakk>\n  \\<Longrightarrow> sort_leq cs ?x ?z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sort_eqv cs x y; sort_eqv cs y z\\<rbrakk>\n    \\<Longrightarrow> sort_eqv cs x z", "by blast"], ["", "lemma sort_eqv_sym: \"sort_eqv cs x y \\<Longrightarrow> sort_eqv cs y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_eqv cs x y \\<Longrightarrow> sort_eqv cs y x", "by (auto simp add: sort_eqv_def)"], ["", "(* sort_eqv a is ~ equivalence relation.. *)"], ["", "lemma normalize_sort_empty[simp]: \"normalize_sort cs full_sort = full_sort\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_sort cs full_sort", "by (simp add: normalize_sort_def)"], ["", "lemma normalize_sort_normalize_sort[simp]: \n  \"normalize_sort cs (normalize_sort cs s) = normalize_sort cs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_sort cs (normalize_sort cs s)", "by (auto simp add: normalize_sort_def)"], ["", "lemma sort_ex_norm_sort: \"sort_ex cs s \\<Longrightarrow> sort_ex cs (normalize_sort cs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_ex cs s \\<Longrightarrow> sort_ex cs (normalize_sort cs s)", "by (simp add: normalize_sort_def sort_ex_class_ex)"], ["", "lemma normalized_sort_subset: \"normalize_sort cs s \\<subseteq> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_sort cs s \\<subseteq> s", "by (auto simp add: normalize_sort_def)"], ["", "lemma normalize_sort_removed_elem_irrelevant':\n  assumes \"sort_ex cs (insert c s)\"\n  assumes \"c \\<notin> (normalize_sort cs (insert c s))\"\n  shows \"normalize_sort cs (insert c s) = normalize_sort cs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = normalize_sort cs s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = normalize_sort cs s", "have \"class_ex cs c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class_ex cs c", "using assms(1)"], ["proof (prove)\nusing this:\n  sort_ex cs (insert c s)\n\ngoal (1 subgoal):\n 1. class_ex cs c", "by (auto simp add: sort_ex_class_ex)"], ["proof (state)\nthis:\n  class_ex cs c\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = normalize_sort cs s", "from this assms(2)"], ["proof (chain)\npicking this:\n  class_ex cs c\n  c \\<notin> normalize_sort cs (insert c s)", "obtain c' where \"class_les cs c' c\" \"c' \\<in> s\""], ["proof (prove)\nusing this:\n  class_ex cs c\n  c \\<notin> normalize_sort cs (insert c s)\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>class_les cs c' c; c' \\<in> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using class_les_irrefl"], ["proof (prove)\nusing this:\n  class_ex cs c\n  c \\<notin> normalize_sort cs (insert c s)\n  \\<not> class_les cs ?c ?c\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>class_les cs c' c; c' \\<in> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: normalize_sort_def)"], ["proof (state)\nthis:\n  class_les cs c' c\n  c' \\<in> s\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = normalize_sort cs s", "thus ?thesis"], ["proof (prove)\nusing this:\n  class_les cs c' c\n  c' \\<in> s\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = normalize_sort cs s", "using \\<open>class_ex cs c\\<close> class_les_irrefl class_les_trans"], ["proof (prove)\nusing this:\n  class_les cs c' c\n  c' \\<in> s\n  class_ex cs c\n  \\<not> class_les cs ?c ?c\n  \\<lbrakk>class_les cs ?x ?y; class_les cs ?y ?z\\<rbrakk>\n  \\<Longrightarrow> class_les cs ?x ?z\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = normalize_sort cs s", "by (simp add: normalize_sort_def) blast"], ["proof (state)\nthis:\n  normalize_sort cs (insert c s) = normalize_sort cs s\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary normalize_sort_removed_elem_irrelevant:\n  assumes \"sort_ex cs (insert c s)\"\n  assumes \"c \\<notin> (normalize_sort cs (insert c s))\"\n  shows \"normalize_sort cs (insert c s) = normalize_sort cs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = normalize_sort cs s", "using assms normalize_sort_removed_elem_irrelevant'"], ["proof (prove)\nusing this:\n  sort_ex cs (insert c s)\n  c \\<notin> normalize_sort cs (insert c s)\n  \\<lbrakk>sort_ex cs (insert ?c ?s);\n   ?c \\<notin> normalize_sort cs (insert ?c ?s)\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs (insert ?c ?s) = normalize_sort cs ?s\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = normalize_sort cs s", "by (simp add: normalize_sort_def)"], ["", "lemma normalize_sort_nempt_is_nempty:\n  assumes finite: \"finite s\"\n  assumes nempty: \"s \\<noteq> full_sort\"\n  assumes \"sort_ex cs s\"\n  shows \"normalize_sort cs s \\<noteq> full_sort\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_sort cs s \\<noteq> full_sort", "using assms"], ["proof (prove)\nusing this:\n  finite s\n  s \\<noteq> full_sort\n  sort_ex cs s\n\ngoal (1 subgoal):\n 1. normalize_sort cs s \\<noteq> full_sort", "proof (induction s rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>full_sort \\<noteq> full_sort; sort_ex cs full_sort\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs full_sort \\<noteq> full_sort\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<noteq> full_sort; sort_ex cs F\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs F \\<noteq> full_sort;\n        insert x F \\<noteq> full_sort; sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert x F) \\<noteq> full_sort", "case empty"], ["proof (state)\nthis:\n  full_sort \\<noteq> full_sort\n  sort_ex cs full_sort\n\ngoal (2 subgoals):\n 1. \\<lbrakk>full_sort \\<noteq> full_sort; sort_ex cs full_sort\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs full_sort \\<noteq> full_sort\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<noteq> full_sort; sort_ex cs F\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs F \\<noteq> full_sort;\n        insert x F \\<noteq> full_sort; sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert x F) \\<noteq> full_sort", "then"], ["proof (chain)\npicking this:\n  full_sort \\<noteq> full_sort\n  sort_ex cs full_sort", "show ?case"], ["proof (prove)\nusing this:\n  full_sort \\<noteq> full_sort\n  sort_ex cs full_sort\n\ngoal (1 subgoal):\n 1. normalize_sort cs full_sort \\<noteq> full_sort", "by simp"], ["proof (state)\nthis:\n  normalize_sort cs full_sort \\<noteq> full_sort\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<noteq> full_sort; sort_ex cs F\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs F \\<noteq> full_sort;\n        insert x F \\<noteq> full_sort; sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert x F) \\<noteq> full_sort", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<noteq> full_sort; sort_ex cs F\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs F \\<noteq> full_sort;\n        insert x F \\<noteq> full_sort; sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert x F) \\<noteq> full_sort", "case (insert c s)"], ["proof (state)\nthis:\n  finite s\n  c \\<notin> s\n  \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort\n  insert c s \\<noteq> full_sort\n  sort_ex cs (insert c s)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<noteq> full_sort; sort_ex cs F\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs F \\<noteq> full_sort;\n        insert x F \\<noteq> full_sort; sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert x F) \\<noteq> full_sort", "note ICons = this"], ["proof (state)\nthis:\n  finite s\n  c \\<notin> s\n  \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort\n  insert c s \\<noteq> full_sort\n  sort_ex cs (insert c s)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>F \\<noteq> full_sort; sort_ex cs F\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs F \\<noteq> full_sort;\n        insert x F \\<noteq> full_sort; sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert x F) \\<noteq> full_sort", "then"], ["proof (chain)\npicking this:\n  finite s\n  c \\<notin> s\n  \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort\n  insert c s \\<noteq> full_sort\n  sort_ex cs (insert c s)", "show ?case"], ["proof (prove)\nusing this:\n  finite s\n  c \\<notin> s\n  \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort\n  insert c s \\<noteq> full_sort\n  sort_ex cs (insert c s)\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) \\<noteq> full_sort", "proof(cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<notin> s;\n     \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n     \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n     insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n     s = full_sort\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort\n 2. \\<And>A a.\n       \\<lbrakk>c \\<notin> s;\n        \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n        insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n        s = insert a A; finite A\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "case emptyI"], ["proof (state)\nthis:\n  s = full_sort\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<notin> s;\n     \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n     \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n     insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n     s = full_sort\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort\n 2. \\<And>A a.\n       \\<lbrakk>c \\<notin> s;\n        \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n        insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n        s = insert a A; finite A\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "hence \"normalize_sort cs (insert c s) = {c}\""], ["proof (prove)\nusing this:\n  s = full_sort\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = insert c full_sort", "using insert class_les_irrefl"], ["proof (prove)\nusing this:\n  s = full_sort\n  finite s\n  c \\<notin> s\n  \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort\n  insert c s \\<noteq> full_sort\n  sort_ex cs (insert c s)\n  \\<not> class_les cs ?c ?c\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) = insert c full_sort", "by (auto simp add: normalize_sort_def sort_ex_class_ex)"], ["proof (state)\nthis:\n  normalize_sort cs (insert c s) = insert c full_sort\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<notin> s;\n     \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n     \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n     insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n     s = full_sort\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort\n 2. \\<And>A a.\n       \\<lbrakk>c \\<notin> s;\n        \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n        insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n        s = insert a A; finite A\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "then"], ["proof (chain)\npicking this:\n  normalize_sort cs (insert c s) = insert c full_sort", "show ?thesis"], ["proof (prove)\nusing this:\n  normalize_sort cs (insert c s) = insert c full_sort\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) \\<noteq> full_sort", "by simp"], ["proof (state)\nthis:\n  normalize_sort cs (insert c s) \\<noteq> full_sort\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>c \\<notin> s;\n        \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n        insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n        s = insert a A; finite A\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>c \\<notin> s;\n        \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n        insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n        s = insert a A; finite A\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "case (insertI c' s')"], ["proof (state)\nthis:\n  s = insert s' c'\n  finite c'\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>c \\<notin> s;\n        \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n        insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n        s = insert a A; finite A\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "hence \"normalize_sort cs s \\<noteq> full_sort\""], ["proof (prove)\nusing this:\n  s = insert s' c'\n  finite c'\n\ngoal (1 subgoal):\n 1. normalize_sort cs s \\<noteq> full_sort", "using ICons"], ["proof (prove)\nusing this:\n  s = insert s' c'\n  finite c'\n  finite s\n  c \\<notin> s\n  \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort\n  insert c s \\<noteq> full_sort\n  sort_ex cs (insert c s)\n\ngoal (1 subgoal):\n 1. normalize_sort cs s \\<noteq> full_sort", "by (auto simp add: normalize_sort_def sort_ex_class_ex)"], ["proof (state)\nthis:\n  normalize_sort cs s \\<noteq> full_sort\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>c \\<notin> s;\n        \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort;\n        insert c s \\<noteq> full_sort; sort_ex cs (insert c s);\n        s = insert a A; finite A\\<rbrakk>\n       \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "then"], ["proof (chain)\npicking this:\n  normalize_sort cs s \\<noteq> full_sort", "show ?thesis"], ["proof (prove)\nusing this:\n  normalize_sort cs s \\<noteq> full_sort\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) \\<noteq> full_sort", "proof (cases \"c \\<in> (normalize_sort cs s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>normalize_sort cs s \\<noteq> full_sort;\n     c \\<in> normalize_sort cs s\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort\n 2. \\<lbrakk>normalize_sort cs s \\<noteq> full_sort;\n     c \\<notin> normalize_sort cs s\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "case True"], ["proof (state)\nthis:\n  c \\<in> normalize_sort cs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>normalize_sort cs s \\<noteq> full_sort;\n     c \\<in> normalize_sort cs s\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort\n 2. \\<lbrakk>normalize_sort cs s \\<noteq> full_sort;\n     c \\<notin> normalize_sort cs s\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "hence \"insert c s = s\""], ["proof (prove)\nusing this:\n  c \\<in> normalize_sort cs s\n\ngoal (1 subgoal):\n 1. insert c s = s", "using normalized_sort_subset"], ["proof (prove)\nusing this:\n  c \\<in> normalize_sort cs s\n  normalize_sort cs ?s \\<subseteq> ?s\n\ngoal (1 subgoal):\n 1. insert c s = s", "by fastforce"], ["proof (state)\nthis:\n  insert c s = s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>normalize_sort cs s \\<noteq> full_sort;\n     c \\<in> normalize_sort cs s\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort\n 2. \\<lbrakk>normalize_sort cs s \\<noteq> full_sort;\n     c \\<notin> normalize_sort cs s\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "then"], ["proof (chain)\npicking this:\n  insert c s = s", "show ?thesis"], ["proof (prove)\nusing this:\n  insert c s = s\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) \\<noteq> full_sort", "using ICons"], ["proof (prove)\nusing this:\n  insert c s = s\n  finite s\n  c \\<notin> s\n  \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort\n  insert c s \\<noteq> full_sort\n  sort_ex cs (insert c s)\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) \\<noteq> full_sort", "by (auto simp add: normalize_sort_def sort_ex_class_ex class_les_def)"], ["proof (state)\nthis:\n  normalize_sort cs (insert c s) \\<noteq> full_sort\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalize_sort cs s \\<noteq> full_sort;\n     c \\<notin> normalize_sort cs s\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalize_sort cs s \\<noteq> full_sort;\n     c \\<notin> normalize_sort cs s\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "case False"], ["proof (state)\nthis:\n  c \\<notin> normalize_sort cs s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalize_sort cs s \\<noteq> full_sort;\n     c \\<notin> normalize_sort cs s\\<rbrakk>\n    \\<Longrightarrow> normalize_sort cs (insert c s) \\<noteq> full_sort", "then"], ["proof (chain)\npicking this:\n  c \\<notin> normalize_sort cs s", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) \\<noteq> full_sort", "using normalize_sort_removed_elem_irrelevant"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s\n  \\<lbrakk>sort_ex cs (insert ?c ?s);\n   ?c \\<notin> normalize_sort cs (insert ?c ?s)\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs (insert ?c ?s) = normalize_sort cs ?s\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) \\<noteq> full_sort", "using insert.prems(2) ICons(3) \\<open>normalize_sort cs s \\<noteq> full_sort\\<close>"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s\n  \\<lbrakk>sort_ex cs (insert ?c ?s);\n   ?c \\<notin> normalize_sort cs (insert ?c ?s)\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs (insert ?c ?s) = normalize_sort cs ?s\n  sort_ex cs (insert c s)\n  \\<lbrakk>s \\<noteq> full_sort; sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs s \\<noteq> full_sort\n  normalize_sort cs s \\<noteq> full_sort\n\ngoal (1 subgoal):\n 1. normalize_sort cs (insert c s) \\<noteq> full_sort", "by auto"], ["proof (state)\nthis:\n  normalize_sort cs (insert c s) \\<noteq> full_sort\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  normalize_sort cs (insert c s) \\<noteq> full_sort\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  normalize_sort cs (insert c s) \\<noteq> full_sort\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma choose_smaller_in_sort:\n  assumes elem: \"c \\<in> s\" and nelem: \"c \\<notin> (normalize_sort cs s)\" and \"sort_ex cs s\"\n  obtains c' where \"c' \\<in> s\" and \"class_les cs c' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c' \\<in> s; class_les cs c' c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  c \\<in> s\n  c \\<notin> normalize_sort cs s\n  sort_ex cs s\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c' \\<in> s; class_les cs c' c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: normalize_sort_def sort_ex_class_ex)"], ["", "lemma normalize_ex_bound':\n  assumes finite: \"finite s\" and elem: \"c \\<in> s\" and nelem: \"c \\<notin> (normalize_sort cs s)\" \n    and \"sort_ex cs s\"\n  shows \"\\<exists>c' \\<in> (normalize_sort cs s) . class_les cs c' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs s. class_les cs c' c", "using assms"], ["proof (prove)\nusing this:\n  finite s\n  c \\<in> s\n  c \\<notin> normalize_sort cs s\n  sort_ex cs s\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs s. class_les cs c' c", "proof (induction s arbitrary: c)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>c \\<in> full_sort; c \\<notin> normalize_sort cs full_sort;\n        sort_ex cs full_sort\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs full_sort.\n                            class_les cs c' c\n 2. \\<And>x F c.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c.\n           \\<lbrakk>c \\<in> F; c \\<notin> normalize_sort cs F;\n            sort_ex cs F\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs F.\n                                class_les cs c' c;\n        c \\<in> insert x F; c \\<notin> normalize_sort cs (insert x F);\n        sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert x F).\n                            class_les cs c' c", "case empty"], ["proof (state)\nthis:\n  c \\<in> full_sort\n  c \\<notin> normalize_sort cs full_sort\n  sort_ex cs full_sort\n\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>c \\<in> full_sort; c \\<notin> normalize_sort cs full_sort;\n        sort_ex cs full_sort\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs full_sort.\n                            class_les cs c' c\n 2. \\<And>x F c.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c.\n           \\<lbrakk>c \\<in> F; c \\<notin> normalize_sort cs F;\n            sort_ex cs F\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs F.\n                                class_les cs c' c;\n        c \\<in> insert x F; c \\<notin> normalize_sort cs (insert x F);\n        sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert x F).\n                            class_les cs c' c", "then"], ["proof (chain)\npicking this:\n  c \\<in> full_sort\n  c \\<notin> normalize_sort cs full_sort\n  sort_ex cs full_sort", "show ?case"], ["proof (prove)\nusing this:\n  c \\<in> full_sort\n  c \\<notin> normalize_sort cs full_sort\n  sort_ex cs full_sort\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs full_sort. class_les cs c' c", "by simp"], ["proof (state)\nthis:\n  \\<exists>c'\\<in>normalize_sort cs full_sort. class_les cs c' c\n\ngoal (1 subgoal):\n 1. \\<And>x F c.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c.\n           \\<lbrakk>c \\<in> F; c \\<notin> normalize_sort cs F;\n            sort_ex cs F\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs F.\n                                class_les cs c' c;\n        c \\<in> insert x F; c \\<notin> normalize_sort cs (insert x F);\n        sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert x F).\n                            class_les cs c' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F c.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c.\n           \\<lbrakk>c \\<in> F; c \\<notin> normalize_sort cs F;\n            sort_ex cs F\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs F.\n                                class_les cs c' c;\n        c \\<in> insert x F; c \\<notin> normalize_sort cs (insert x F);\n        sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert x F).\n                            class_les cs c' c", "case (insert ic s)"], ["proof (state)\nthis:\n  finite s\n  ic \\<notin> s\n  \\<lbrakk>?c \\<in> s; ?c \\<notin> normalize_sort cs s;\n   sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s. class_les cs c' ?c\n  c \\<in> insert ic s\n  c \\<notin> normalize_sort cs (insert ic s)\n  sort_ex cs (insert ic s)\n\ngoal (1 subgoal):\n 1. \\<And>x F c.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c.\n           \\<lbrakk>c \\<in> F; c \\<notin> normalize_sort cs F;\n            sort_ex cs F\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs F.\n                                class_les cs c' c;\n        c \\<in> insert x F; c \\<notin> normalize_sort cs (insert x F);\n        sort_ex cs (insert x F)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert x F).\n                            class_les cs c' c", "then"], ["proof (chain)\npicking this:\n  finite s\n  ic \\<notin> s\n  \\<lbrakk>?c \\<in> s; ?c \\<notin> normalize_sort cs s;\n   sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s. class_les cs c' ?c\n  c \\<in> insert ic s\n  c \\<notin> normalize_sort cs (insert ic s)\n  sort_ex cs (insert ic s)", "show ?case"], ["proof (prove)\nusing this:\n  finite s\n  ic \\<notin> s\n  \\<lbrakk>?c \\<in> s; ?c \\<notin> normalize_sort cs s;\n   sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s. class_les cs c' ?c\n  c \\<in> insert ic s\n  c \\<notin> normalize_sort cs (insert ic s)\n  sort_ex cs (insert ic s)\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c", "proof(cases \"ic=c\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite s; ic \\<notin> s;\n     \\<And>c.\n        \\<lbrakk>c \\<in> s; c \\<notin> normalize_sort cs s;\n         sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s.\n                             class_les cs c' c;\n     c \\<in> insert ic s; c \\<notin> normalize_sort cs (insert ic s);\n     sort_ex cs (insert ic s); ic = c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c\n 2. \\<lbrakk>finite s; ic \\<notin> s;\n     \\<And>c.\n        \\<lbrakk>c \\<in> s; c \\<notin> normalize_sort cs s;\n         sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s.\n                             class_les cs c' c;\n     c \\<in> insert ic s; c \\<notin> normalize_sort cs (insert ic s);\n     sort_ex cs (insert ic s); ic \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "case True"], ["proof (state)\nthis:\n  ic = c\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite s; ic \\<notin> s;\n     \\<And>c.\n        \\<lbrakk>c \\<in> s; c \\<notin> normalize_sort cs s;\n         sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s.\n                             class_les cs c' c;\n     c \\<in> insert ic s; c \\<notin> normalize_sort cs (insert ic s);\n     sort_ex cs (insert ic s); ic = c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c\n 2. \\<lbrakk>finite s; ic \\<notin> s;\n     \\<And>c.\n        \\<lbrakk>c \\<in> s; c \\<notin> normalize_sort cs s;\n         sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s.\n                             class_les cs c' c;\n     c \\<in> insert ic s; c \\<notin> normalize_sort cs (insert ic s);\n     sort_ex cs (insert ic s); ic \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "then"], ["proof (chain)\npicking this:\n  ic = c", "show ?thesis"], ["proof (prove)\nusing this:\n  ic = c\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c", "by (smt choose_smaller_in_sort class_les_irrefl class_les_trans insert.IH insert.prems(2) \n          insert.prems(3) insert_iff insert_subset normalize_sort_removed_elem_irrelevant' sort_ex_def)"], ["proof (state)\nthis:\n  \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite s; ic \\<notin> s;\n     \\<And>c.\n        \\<lbrakk>c \\<in> s; c \\<notin> normalize_sort cs s;\n         sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s.\n                             class_les cs c' c;\n     c \\<in> insert ic s; c \\<notin> normalize_sort cs (insert ic s);\n     sort_ex cs (insert ic s); ic \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite s; ic \\<notin> s;\n     \\<And>c.\n        \\<lbrakk>c \\<in> s; c \\<notin> normalize_sort cs s;\n         sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s.\n                             class_les cs c' c;\n     c \\<in> insert ic s; c \\<notin> normalize_sort cs (insert ic s);\n     sort_ex cs (insert ic s); ic \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "case False"], ["proof (state)\nthis:\n  ic \\<noteq> c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite s; ic \\<notin> s;\n     \\<And>c.\n        \\<lbrakk>c \\<in> s; c \\<notin> normalize_sort cs s;\n         sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s.\n                             class_les cs c' c;\n     c \\<in> insert ic s; c \\<notin> normalize_sort cs (insert ic s);\n     sort_ex cs (insert ic s); ic \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "hence \"c \\<in> s\""], ["proof (prove)\nusing this:\n  ic \\<noteq> c\n\ngoal (1 subgoal):\n 1. c \\<in> s", "using insert.prems"], ["proof (prove)\nusing this:\n  ic \\<noteq> c\n  c \\<in> insert ic s\n  c \\<notin> normalize_sort cs (insert ic s)\n  sort_ex cs (insert ic s)\n\ngoal (1 subgoal):\n 1. c \\<in> s", "by simp"], ["proof (state)\nthis:\n  c \\<in> s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite s; ic \\<notin> s;\n     \\<And>c.\n        \\<lbrakk>c \\<in> s; c \\<notin> normalize_sort cs s;\n         sort_ex cs s\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s.\n                             class_les cs c' c;\n     c \\<in> insert ic s; c \\<notin> normalize_sort cs (insert ic s);\n     sort_ex cs (insert ic s); ic \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "then"], ["proof (chain)\npicking this:\n  c \\<in> s", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<in> s\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c", "proof(cases \"ic \\<in> (normalize_sort cs (insert ic s))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<in> s; ic \\<in> normalize_sort cs (insert ic s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c\n 2. \\<lbrakk>c \\<in> s; ic \\<notin> normalize_sort cs (insert ic s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "case True"], ["proof (state)\nthis:\n  ic \\<in> normalize_sort cs (insert ic s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<in> s; ic \\<in> normalize_sort cs (insert ic s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c\n 2. \\<lbrakk>c \\<in> s; ic \\<notin> normalize_sort cs (insert ic s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "then"], ["proof (chain)\npicking this:\n  ic \\<in> normalize_sort cs (insert ic s)", "show ?thesis"], ["proof (prove)\nusing this:\n  ic \\<in> normalize_sort cs (insert ic s)\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c", "proof(cases \"class_les cs ic c\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c\n 2. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "case True"], ["proof (state)\nthis:\n  class_les cs ic c\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c\n 2. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "then"], ["proof (chain)\npicking this:\n  class_les cs ic c", "show ?thesis"], ["proof (prove)\nusing this:\n  class_les cs ic c\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c", "using insert \\<open>c \\<in> s\\<close> normalize_sort_removed_elem_irrelevant' sort_ex_def"], ["proof (prove)\nusing this:\n  class_les cs ic c\n  finite s\n  ic \\<notin> s\n  \\<lbrakk>?c \\<in> s; ?c \\<notin> normalize_sort cs s;\n   sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s. class_les cs c' ?c\n  c \\<in> insert ic s\n  c \\<notin> normalize_sort cs (insert ic s)\n  sort_ex cs (insert ic s)\n  c \\<in> s\n  \\<lbrakk>sort_ex cs (insert ?c ?s);\n   ?c \\<notin> normalize_sort cs (insert ?c ?s)\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs (insert ?c ?s) = normalize_sort cs ?s\n  sort_ex ?rel ?S = (?S \\<subseteq> Field ?rel)\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c", "by (metis insert_subset)"], ["proof (state)\nthis:\n  \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "case False"], ["proof (state)\nthis:\n  \\<not> class_les cs ic c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "obtain c'' where c'': \"c'' \\<in> (normalize_sort cs s)\" \"class_les cs c'' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>c'' \\<in> normalize_sort cs s; class_les cs c'' c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using insert \\<open>c \\<in> s\\<close> normalize_sort_removed_elem_irrelevant' sort_ex_def"], ["proof (prove)\nusing this:\n  finite s\n  ic \\<notin> s\n  \\<lbrakk>?c \\<in> s; ?c \\<notin> normalize_sort cs s;\n   sort_ex cs s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs s. class_les cs c' ?c\n  c \\<in> insert ic s\n  c \\<notin> normalize_sort cs (insert ic s)\n  sort_ex cs (insert ic s)\n  c \\<in> s\n  \\<lbrakk>sort_ex cs (insert ?c ?s);\n   ?c \\<notin> normalize_sort cs (insert ?c ?s)\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs (insert ?c ?s) = normalize_sort cs ?s\n  sort_ex ?rel ?S = (?S \\<subseteq> Field ?rel)\n\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>c'' \\<in> normalize_sort cs s; class_les cs c'' c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis False choose_smaller_in_sort class_les_trans insert_iff insert_subset)"], ["proof (state)\nthis:\n  c'' \\<in> normalize_sort cs s\n  class_les cs c'' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "moreover"], ["proof (state)\nthis:\n  c'' \\<in> normalize_sort cs s\n  class_les cs c'' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "have \"(c'', c) \\<in> cs\" \"(c, c'') \\<notin> cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c'', c) \\<in> cs &&& (c, c'') \\<notin> cs", "using c''"], ["proof (prove)\nusing this:\n  c'' \\<in> normalize_sort cs s\n  class_les cs c'' c\n\ngoal (1 subgoal):\n 1. (c'', c) \\<in> cs &&& (c, c'') \\<notin> cs", "by (simp_all add: class_leq_def class_les_def)"], ["proof (state)\nthis:\n  (c'', c) \\<in> cs\n  (c, c'') \\<notin> cs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "moreover"], ["proof (state)\nthis:\n  (c'', c) \\<in> cs\n  (c, c'') \\<notin> cs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "hence \"\\<not> class_les cs ic c''\""], ["proof (prove)\nusing this:\n  (c'', c) \\<in> cs\n  (c, c'') \\<notin> cs\n\ngoal (1 subgoal):\n 1. \\<not> class_les cs ic c''", "by (meson False class_leq_def class_les_def class_les_trans)"], ["proof (state)\nthis:\n  \\<not> class_les cs ic c''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ic \\<in> normalize_sort cs (insert ic s);\n     \\<not> class_les cs ic c\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "ultimately"], ["proof (chain)\npicking this:\n  c'' \\<in> normalize_sort cs s\n  class_les cs c'' c\n  (c'', c) \\<in> cs\n  (c, c'') \\<notin> cs\n  \\<not> class_les cs ic c''", "show ?thesis"], ["proof (prove)\nusing this:\n  c'' \\<in> normalize_sort cs s\n  class_les cs c'' c\n  (c'', c) \\<in> cs\n  (c, c'') \\<notin> cs\n  \\<not> class_les cs ic c''\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c", "by (auto simp add: normalize_sort_def sort_ex_class_ex class_ex_def class_leq_def class_les_def)"], ["proof (state)\nthis:\n  \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<in> s; ic \\<notin> normalize_sort cs (insert ic s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<in> s; ic \\<notin> normalize_sort cs (insert ic s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "case False"], ["proof (state)\nthis:\n  ic \\<notin> normalize_sort cs (insert ic s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<in> s; ic \\<notin> normalize_sort cs (insert ic s)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs (insert ic s).\n                         class_les cs c' c", "then"], ["proof (chain)\npicking this:\n  ic \\<notin> normalize_sort cs (insert ic s)", "show ?thesis"], ["proof (prove)\nusing this:\n  ic \\<notin> normalize_sort cs (insert ic s)\n\ngoal (1 subgoal):\n 1. \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c", "by (metis (full_types) insert.IH insert.prems(2) insert.prems(3) \\<open>c \\<in> s\\<close> \n            normalize_sort_removed_elem_irrelevant sort_ex_def insert_subset)"], ["proof (state)\nthis:\n  \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c'\\<in>normalize_sort cs (insert ic s). class_les cs c' c\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary normalize_ex_bound:\n  assumes finite: \"finite s\" and elem: \"c \\<in> s\" and nelem: \"c \\<notin> (normalize_sort cs s)\" \n    and \"sort_ex cs s\"\n  obtains c' where \"c' \\<in> (normalize_sort cs s)\" and \"class_les cs c' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c' \\<in> normalize_sort cs s; class_les cs c' c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms normalize_ex_bound'"], ["proof (prove)\nusing this:\n  finite s\n  c \\<in> s\n  c \\<notin> normalize_sort cs s\n  sort_ex cs s\n  \\<lbrakk>finite ?s; ?c \\<in> ?s; ?c \\<notin> normalize_sort cs ?s;\n   sort_ex cs ?s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c'\\<in>normalize_sort cs ?s. class_les cs c' ?c\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c' \\<in> normalize_sort cs s; class_les cs c' c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma \"sort_ex cs s \\<Longrightarrow> sort_leq cs s (normalize_sort cs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_ex cs s \\<Longrightarrow> sort_leq cs s (normalize_sort cs s)", "by (auto simp add: normalize_sort_def sort_leq_def sort_ex_class_ex)"], ["", "lemma sort_eqv_normalize_sort:\n  assumes \"finite s\"\n  assumes \"sort_ex cs s\" \n  shows \"sort_eqv cs s (normalize_sort cs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_eqv cs s (normalize_sort cs s)", "proof (intro sort_eqvI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sort_leq cs s (normalize_sort cs s)\n 2. sort_leq cs (normalize_sort cs s) s", "show \"sort_leq cs s (normalize_sort cs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_leq cs s (normalize_sort cs s)", "using assms(2)"], ["proof (prove)\nusing this:\n  sort_ex cs s\n\ngoal (1 subgoal):\n 1. sort_leq cs s (normalize_sort cs s)", "by (auto simp add:  normalize_sort_def sort_leq_def sort_ex_class_ex)"], ["proof (state)\nthis:\n  sort_leq cs s (normalize_sort cs s)\n\ngoal (1 subgoal):\n 1. sort_leq cs (normalize_sort cs s) s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sort_leq cs (normalize_sort cs s) s", "show \"sort_leq cs (normalize_sort cs s) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_leq cs (normalize_sort cs s) s", "proof (unfold sort_leq_def; intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2.\n       c\\<^sub>2 \\<in> s \\<Longrightarrow>\n       \\<exists>c\\<^sub>1\\<in>normalize_sort cs s.\n          class_leq cs c\\<^sub>1 c\\<^sub>2", "fix c2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2.\n       c\\<^sub>2 \\<in> s \\<Longrightarrow>\n       \\<exists>c\\<^sub>1\\<in>normalize_sort cs s.\n          class_leq cs c\\<^sub>1 c\\<^sub>2", "assume \"c2 \\<in> s\""], ["proof (state)\nthis:\n  c2 \\<in> s\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>2.\n       c\\<^sub>2 \\<in> s \\<Longrightarrow>\n       \\<exists>c\\<^sub>1\\<in>normalize_sort cs s.\n          class_leq cs c\\<^sub>1 c\\<^sub>2", "show \"\\<exists>c1 \\<in> normalize_sort cs s. class_leq cs c1 c2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "proof (cases \"c2 \\<in> normalize_sort cs s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c2 \\<in> normalize_sort cs s \\<Longrightarrow>\n    \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2\n 2. c2 \\<notin> normalize_sort cs s \\<Longrightarrow>\n    \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "case True"], ["proof (state)\nthis:\n  c2 \\<in> normalize_sort cs s\n\ngoal (2 subgoals):\n 1. c2 \\<in> normalize_sort cs s \\<Longrightarrow>\n    \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2\n 2. c2 \\<notin> normalize_sort cs s \\<Longrightarrow>\n    \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "then"], ["proof (chain)\npicking this:\n  c2 \\<in> normalize_sort cs s", "show ?thesis"], ["proof (prove)\nusing this:\n  c2 \\<in> normalize_sort cs s\n\ngoal (1 subgoal):\n 1. \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "using \\<open>c2 \\<in> s\\<close> assms sort_ex_class_ex"], ["proof (prove)\nusing this:\n  c2 \\<in> normalize_sort cs s\n  c2 \\<in> s\n  finite s\n  sort_ex cs s\n  sort_ex ?cs ?S \\<equiv> \\<forall>c\\<in>?S. class_ex ?cs c\n\ngoal (1 subgoal):\n 1. \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "by fast"], ["proof (state)\nthis:\n  \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2\n\ngoal (1 subgoal):\n 1. c2 \\<notin> normalize_sort cs s \\<Longrightarrow>\n    \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c2 \\<notin> normalize_sort cs s \\<Longrightarrow>\n    \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "case False"], ["proof (state)\nthis:\n  c2 \\<notin> normalize_sort cs s\n\ngoal (1 subgoal):\n 1. c2 \\<notin> normalize_sort cs s \\<Longrightarrow>\n    \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "from this"], ["proof (chain)\npicking this:\n  c2 \\<notin> normalize_sort cs s", "obtain c' where \"c' \\<in> normalize_sort cs s\" and \"class_les cs c' c2\""], ["proof (prove)\nusing this:\n  c2 \\<notin> normalize_sort cs s\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c' \\<in> normalize_sort cs s; class_les cs c' c2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>c2 \\<in> s\\<close> normalize_ex_bound assms"], ["proof (prove)\nusing this:\n  c2 \\<notin> normalize_sort cs s\n  c2 \\<in> s\n  \\<lbrakk>finite ?s; ?c \\<in> ?s; ?c \\<notin> normalize_sort cs ?s;\n   sort_ex cs ?s;\n   \\<And>c'.\n      \\<lbrakk>c' \\<in> normalize_sort cs ?s; class_les cs c' ?c\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  finite s\n  sort_ex cs s\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c' \\<in> normalize_sort cs s; class_les cs c' c2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  c' \\<in> normalize_sort cs s\n  class_les cs c' c2\n\ngoal (1 subgoal):\n 1. c2 \\<notin> normalize_sort cs s \\<Longrightarrow>\n    \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "then"], ["proof (chain)\npicking this:\n  c' \\<in> normalize_sort cs s\n  class_les cs c' c2", "show ?thesis"], ["proof (prove)\nusing this:\n  c' \\<in> normalize_sort cs s\n  class_les cs c' c2\n\ngoal (1 subgoal):\n 1. \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "using class_les_def"], ["proof (prove)\nusing this:\n  c' \\<in> normalize_sort cs s\n  class_les cs c' c2\n  class_les ?sub ?c1.0 ?c2.0 =\n  (class_leq ?sub ?c1.0 ?c2.0 \\<and> \\<not> class_leq ?sub ?c2.0 ?c1.0)\n\ngoal (1 subgoal):\n 1. \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2", "by metis"], ["proof (state)\nthis:\n  \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c1\\<in>normalize_sort cs s. class_leq cs c1 c2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sort_leq cs (normalize_sort cs s) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma normalize_sort_eq_imp_sort_eqv: \"sort_ex cs s1 \\<Longrightarrow> sort_ex cs s2 \\<Longrightarrow> finite s1 \\<Longrightarrow> finite s2\n  \\<Longrightarrow> normalize_sort cs s1 = normalize_sort cs s2\n  \\<Longrightarrow> sort_eqv cs s1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sort_ex cs s1; sort_ex cs s2; finite s1; finite s2;\n     normalize_sort cs s1 = normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> sort_eqv cs s1 s2", "by (metis sort_eqv_sym sort_eqv_trans wf_subclass_loc.sort_eqv_normalize_sort wf_subclass_loc_axioms)"], ["", "lemma \"class_leq cs c1 c2 \\<longleftrightarrow> class_les cs c1 c2 \\<or> (c1=c2 \\<and> class_ex cs c1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class_leq cs c1 c2 =\n    (class_les cs c1 c2 \\<or> c1 = c2 \\<and> class_ex cs c1)", "by (meson FieldI1 class_ex_def class_leq_antisym class_leq_def class_leq_refl class_les_def)"], ["", "lemma sort_eqv_imp_normalize_sort_eq:\n  assumes \"sort_ex cs s1\" \"sort_ex cs s2\" \"sort_eqv cs s1 s2\"\n  shows \"normalize_sort cs s1 = normalize_sort cs s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_sort cs s1 = normalize_sort cs s2", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. normalize_sort cs s1 \\<noteq> normalize_sort cs s2 \\<Longrightarrow>\n    False", "have \"sort_leq cs s1 s2\" \"sort_leq cs s2 s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_leq cs s1 s2 &&& sort_leq cs s2 s1", "using assms(3)"], ["proof (prove)\nusing this:\n  sort_eqv cs s1 s2\n\ngoal (1 subgoal):\n 1. sort_leq cs s1 s2 &&& sort_leq cs s2 s1", "by (auto simp add: sort_eqv_def)"], ["proof (state)\nthis:\n  sort_leq cs s1 s2\n  sort_leq cs s2 s1\n\ngoal (1 subgoal):\n 1. normalize_sort cs s1 \\<noteq> normalize_sort cs s2 \\<Longrightarrow>\n    False", "assume \"normalize_sort cs s1 \\<noteq> normalize_sort cs s2\""], ["proof (state)\nthis:\n  normalize_sort cs s1 \\<noteq> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. normalize_sort cs s1 \\<noteq> normalize_sort cs s2 \\<Longrightarrow>\n    False", "hence \"\\<not> normalize_sort cs s1 \\<subseteq> normalize_sort cs s2 \\<or> \n    \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\""], ["proof (prove)\nusing this:\n  normalize_sort cs s1 \\<noteq> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. \\<not> normalize_sort cs s1 \\<subseteq> normalize_sort cs s2 \\<or>\n    \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1", "by simp"], ["proof (state)\nthis:\n  \\<not> normalize_sort cs s1 \\<subseteq> normalize_sort cs s2 \\<or>\n  \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. normalize_sort cs s1 \\<noteq> normalize_sort cs s2 \\<Longrightarrow>\n    False", "from this"], ["proof (chain)\npicking this:\n  \\<not> normalize_sort cs s1 \\<subseteq> normalize_sort cs s2 \\<or>\n  \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1", "consider \"\\<not> normalize_sort cs s1 \\<subseteq> normalize_sort cs s2\"\n    | \"normalize_sort cs s1 \\<subseteq> normalize_sort cs s2\" \n      \"\\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\""], ["proof (prove)\nusing this:\n  \\<not> normalize_sort cs s1 \\<subseteq> normalize_sort cs s2 \\<or>\n  \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> normalize_sort cs s1\n                    \\<subseteq> normalize_sort cs s2 \\<Longrightarrow>\n             thesis;\n     \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n      \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> normalize_sort cs s1\n                  \\<subseteq> normalize_sort cs s2 \\<Longrightarrow>\n           ?thesis;\n   \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n    \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. normalize_sort cs s1 \\<noteq> normalize_sort cs s2 \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> normalize_sort cs s1\n                  \\<subseteq> normalize_sort cs s2 \\<Longrightarrow>\n           ?thesis;\n   \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n    \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> normalize_sort cs s1\n           \\<subseteq> normalize_sort cs s2 \\<Longrightarrow>\n    False\n 2. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "case 1"], ["proof (state)\nthis:\n  \\<not> normalize_sort cs s1 \\<subseteq> normalize_sort cs s2\n\ngoal (2 subgoals):\n 1. \\<not> normalize_sort cs s1\n           \\<subseteq> normalize_sort cs s2 \\<Longrightarrow>\n    False\n 2. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  \\<not> normalize_sort cs s1 \\<subseteq> normalize_sort cs s2", "obtain c where c: \"c \\<in> normalize_sort cs s1\" \"c \\<notin> normalize_sort cs s2\""], ["proof (prove)\nusing this:\n  \\<not> normalize_sort cs s1 \\<subseteq> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> normalize_sort cs s1;\n         c \\<notin> normalize_sort cs s2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c \\<in> normalize_sort cs s1\n  c \\<notin> normalize_sort cs s2\n\ngoal (2 subgoals):\n 1. \\<not> normalize_sort cs s1\n           \\<subseteq> normalize_sort cs s2 \\<Longrightarrow>\n    False\n 2. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  c \\<in> normalize_sort cs s1\n  c \\<notin> normalize_sort cs s2", "obtain c' where c': \"c' \\<in> normalize_sort cs s2\" \"class_les cs c' c\""], ["proof (prove)\nusing this:\n  c \\<in> normalize_sort cs s1\n  c \\<notin> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (smt \\<open>sort_leq cs s1 s2\\<close> \\<open>sort_leq cs s2 s1\\<close> class_les_def mem_Collect_eq normalize_sort_def \n          sort_leq_def wf_subclass_loc.class_leq_antisym wf_subclass_loc.class_leq_trans wf_subclass_loc_axioms)"], ["proof (state)\nthis:\n  c' \\<in> normalize_sort cs s2\n  class_les cs c' c\n\ngoal (2 subgoals):\n 1. \\<not> normalize_sort cs s1\n           \\<subseteq> normalize_sort cs s2 \\<Longrightarrow>\n    False\n 2. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  c' \\<in> normalize_sort cs s2\n  class_les cs c' c", "show ?thesis"], ["proof (prove)\nusing this:\n  c' \\<in> normalize_sort cs s2\n  class_les cs c' c\n\ngoal (1 subgoal):\n 1. False", "proof(cases \"c' \\<in> normalize_sort cs s1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<in> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  c' \\<in> normalize_sort cs s1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<in> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"c \\<notin> normalize_sort cs s1\""], ["proof (prove)\nusing this:\n  c' \\<in> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. c \\<notin> normalize_sort cs s1", "using c c'"], ["proof (prove)\nusing this:\n  c' \\<in> normalize_sort cs s1\n  c \\<in> normalize_sort cs s1\n  c \\<notin> normalize_sort cs s2\n  c' \\<in> normalize_sort cs s2\n  class_les cs c' c\n\ngoal (1 subgoal):\n 1. c \\<notin> normalize_sort cs s1", "by (auto simp add: normalize_sort_def)"], ["proof (state)\nthis:\n  c \\<notin> normalize_sort cs s1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<in> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  c \\<notin> normalize_sort cs s1", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. False", "using c(1)"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s1\n  c \\<in> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  c' \\<notin> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "from False c'"], ["proof (chain)\npicking this:\n  c' \\<notin> normalize_sort cs s1\n  c' \\<in> normalize_sort cs s2\n  class_les cs c' c", "obtain c'' where c'': \"c'' \\<in> normalize_sort cs s1\" \"class_les cs c'' c'\""], ["proof (prove)\nusing this:\n  c' \\<notin> normalize_sort cs s1\n  c' \\<in> normalize_sort cs s2\n  class_les cs c' c\n\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>c'' \\<in> normalize_sort cs s1;\n         class_les cs c'' c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (smt \\<open>sort_leq cs s1 s2\\<close> \\<open>sort_leq cs s2 s1\\<close> class_les_def mem_Collect_eq normalize_sort_def \n          sort_leq_def wf_subclass_loc.class_leq_antisym wf_subclass_loc.class_leq_trans wf_subclass_loc_axioms)"], ["proof (state)\nthis:\n  c'' \\<in> normalize_sort cs s1\n  class_les cs c'' c'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"class_les cs c'' c\""], ["proof (prove)\nusing this:\n  c'' \\<in> normalize_sort cs s1\n  class_les cs c'' c'\n\ngoal (1 subgoal):\n 1. class_les cs c'' c", "using c'(2) class_les_trans"], ["proof (prove)\nusing this:\n  c'' \\<in> normalize_sort cs s1\n  class_les cs c'' c'\n  class_les cs c' c\n  \\<lbrakk>class_les cs ?x ?y; class_les cs ?y ?z\\<rbrakk>\n  \\<Longrightarrow> class_les cs ?x ?z\n\ngoal (1 subgoal):\n 1. class_les cs c'' c", "by blast"], ["proof (state)\nthis:\n  class_les cs c'' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"c \\<notin> normalize_sort cs s1\""], ["proof (prove)\nusing this:\n  class_les cs c'' c\n\ngoal (1 subgoal):\n 1. c \\<notin> normalize_sort cs s1", "using c c''"], ["proof (prove)\nusing this:\n  class_les cs c'' c\n  c \\<in> normalize_sort cs s1\n  c \\<notin> normalize_sort cs s2\n  c'' \\<in> normalize_sort cs s1\n  class_les cs c'' c'\n\ngoal (1 subgoal):\n 1. c \\<notin> normalize_sort cs s1", "by (auto simp add: normalize_sort_def)"], ["proof (state)\nthis:\n  c \\<notin> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s2; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  c \\<notin> normalize_sort cs s1", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. False", "using c(1)"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s1\n  c \\<in> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "(* Should work analogous, let's see *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "case 2"], ["proof (state)\nthis:\n  normalize_sort cs s1 \\<subseteq> normalize_sort cs s2\n  \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  normalize_sort cs s1 \\<subseteq> normalize_sort cs s2\n  \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1", "obtain c where c: \"c \\<in> normalize_sort cs s2\" \"c \\<notin> normalize_sort cs s1\""], ["proof (prove)\nusing this:\n  normalize_sort cs s1 \\<subseteq> normalize_sort cs s2\n  \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> normalize_sort cs s2;\n         c \\<notin> normalize_sort cs s1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c \\<in> normalize_sort cs s2\n  c \\<notin> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  c \\<in> normalize_sort cs s2\n  c \\<notin> normalize_sort cs s1", "obtain c' where c': \"c' \\<in> normalize_sort cs s1\" \"class_les cs c' c\""], ["proof (prove)\nusing this:\n  c \\<in> normalize_sort cs s2\n  c \\<notin> normalize_sort cs s1\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (smt \\<open>sort_leq cs s1 s2\\<close> \\<open>sort_leq cs s2 s1\\<close> class_les_def mem_Collect_eq normalize_sort_def \n          sort_leq_def wf_subclass_loc.class_leq_antisym wf_subclass_loc.class_leq_trans wf_subclass_loc_axioms)"], ["proof (state)\nthis:\n  c' \\<in> normalize_sort cs s1\n  class_les cs c' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalize_sort cs s1 \\<subseteq> normalize_sort cs s2;\n     \\<not> normalize_sort cs s2 \\<subseteq> normalize_sort cs s1\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  c' \\<in> normalize_sort cs s1\n  class_les cs c' c", "show ?thesis"], ["proof (prove)\nusing this:\n  c' \\<in> normalize_sort cs s1\n  class_les cs c' c\n\ngoal (1 subgoal):\n 1. False", "proof(cases \"c' \\<in> normalize_sort cs s2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<in> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  c' \\<in> normalize_sort cs s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<in> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"c \\<notin> normalize_sort cs s2\""], ["proof (prove)\nusing this:\n  c' \\<in> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. c \\<notin> normalize_sort cs s2", "using c c'"], ["proof (prove)\nusing this:\n  c' \\<in> normalize_sort cs s2\n  c \\<in> normalize_sort cs s2\n  c \\<notin> normalize_sort cs s1\n  c' \\<in> normalize_sort cs s1\n  class_les cs c' c\n\ngoal (1 subgoal):\n 1. c \\<notin> normalize_sort cs s2", "by (auto simp add: normalize_sort_def)"], ["proof (state)\nthis:\n  c \\<notin> normalize_sort cs s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<in> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  c \\<notin> normalize_sort cs s2", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. False", "using c(1)"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s2\n  c \\<in> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  c' \\<notin> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False", "from False c'"], ["proof (chain)\npicking this:\n  c' \\<notin> normalize_sort cs s2\n  c' \\<in> normalize_sort cs s1\n  class_les cs c' c", "obtain c'' where c'':\"c''\\<in> normalize_sort cs s2\" \"class_les cs c'' c'\""], ["proof (prove)\nusing this:\n  c' \\<notin> normalize_sort cs s2\n  c' \\<in> normalize_sort cs s1\n  class_les cs c' c\n\ngoal (1 subgoal):\n 1. (\\<And>c''.\n        \\<lbrakk>c'' \\<in> normalize_sort cs s2;\n         class_les cs c'' c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (smt \\<open>sort_leq cs s1 s2\\<close> \\<open>sort_leq cs s2 s1\\<close> class_les_def mem_Collect_eq normalize_sort_def \n          sort_leq_def wf_subclass_loc.class_leq_antisym wf_subclass_loc.class_leq_trans wf_subclass_loc_axioms)"], ["proof (state)\nthis:\n  c'' \\<in> normalize_sort cs s2\n  class_les cs c'' c'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"class_les cs c'' c\""], ["proof (prove)\nusing this:\n  c'' \\<in> normalize_sort cs s2\n  class_les cs c'' c'\n\ngoal (1 subgoal):\n 1. class_les cs c'' c", "using c'(2) class_les_trans"], ["proof (prove)\nusing this:\n  c'' \\<in> normalize_sort cs s2\n  class_les cs c'' c'\n  class_les cs c' c\n  \\<lbrakk>class_les cs ?x ?y; class_les cs ?y ?z\\<rbrakk>\n  \\<Longrightarrow> class_les cs ?x ?z\n\ngoal (1 subgoal):\n 1. class_les cs c'' c", "by blast"], ["proof (state)\nthis:\n  class_les cs c'' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"c \\<notin> normalize_sort cs s2\""], ["proof (prove)\nusing this:\n  class_les cs c'' c\n\ngoal (1 subgoal):\n 1. c \\<notin> normalize_sort cs s2", "using c c''"], ["proof (prove)\nusing this:\n  class_les cs c'' c\n  c \\<in> normalize_sort cs s2\n  c \\<notin> normalize_sort cs s1\n  c'' \\<in> normalize_sort cs s2\n  class_les cs c'' c'\n\ngoal (1 subgoal):\n 1. c \\<notin> normalize_sort cs s2", "by (auto simp add: normalize_sort_def)"], ["proof (state)\nthis:\n  c \\<notin> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c' \\<in> normalize_sort cs s1; class_les cs c' c;\n     c' \\<notin> normalize_sort cs s2\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  c \\<notin> normalize_sort cs s2", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. False", "using c(1)"], ["proof (prove)\nusing this:\n  c \\<notin> normalize_sort cs s2\n  c \\<in> normalize_sort cs s2\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary sort_eqv_iff_normalize_sort_eq:\n  assumes \"finite s1\" \"finite s2\"\n  assumes \"sort_ex cs s1\" \"sort_ex cs s2\"\n  shows \"sort_eqv cs s1 s2 \\<longleftrightarrow> normalize_sort cs s1 = normalize_sort cs s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sort_eqv cs s1 s2 = (normalize_sort cs s1 = normalize_sort cs s2)", "using assms normalize_sort_eq_imp_sort_eqv sort_eqv_imp_normalize_sort_eq"], ["proof (prove)\nusing this:\n  finite s1\n  finite s2\n  sort_ex cs s1\n  sort_ex cs s2\n  \\<lbrakk>sort_ex cs ?s1.0; sort_ex cs ?s2.0; finite ?s1.0; finite ?s2.0;\n   normalize_sort cs ?s1.0 = normalize_sort cs ?s2.0\\<rbrakk>\n  \\<Longrightarrow> sort_eqv cs ?s1.0 ?s2.0\n  \\<lbrakk>sort_ex cs ?s1.0; sort_ex cs ?s2.0;\n   sort_eqv cs ?s1.0 ?s2.0\\<rbrakk>\n  \\<Longrightarrow> normalize_sort cs ?s1.0 = normalize_sort cs ?s2.0\n\ngoal (1 subgoal):\n 1. sort_eqv cs s1 s2 = (normalize_sort cs s1 = normalize_sort cs s2)", "by blast"], ["", "end"], ["", "lemma tcsigs_sorts_defined: \"wf_osig oss \\<Longrightarrow> \n  (\\<forall>ars \\<in> ran (tcsigs oss) . \\<forall>ss \\<in> ran ars . \\<forall>s \\<in> set ss. sort_ex (subclass oss) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_osig oss \\<Longrightarrow>\n    \\<forall>ars\\<in>ran (tcsigs oss).\n       \\<forall>ss\\<in>ran ars.\n          \\<forall>s\\<in>set ss. sort_ex (subclass oss) s", "by (cases oss) (simp add: wf_sort_def all_normalized_and_ex_tcsigs_def)"], ["", "lemma osig_subclass_loc: \"wf_osig oss \\<Longrightarrow> wf_subclass_loc (subclass oss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_osig oss \\<Longrightarrow> wf_subclass_loc (subclass oss)", "using wf_subclass_loc.intro"], ["proof (prove)\nusing this:\n  wf_subclass ?cs \\<Longrightarrow> wf_subclass_loc ?cs\n\ngoal (1 subgoal):\n 1. wf_osig oss \\<Longrightarrow> wf_subclass_loc (subclass oss)", "by (cases oss) simp"], ["", "lemma wf_osig_imp_wf_subclass_loc: \"wf_osig oss \\<Longrightarrow> wf_subclass_loc (subclass oss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_osig oss \\<Longrightarrow> wf_subclass_loc (subclass oss)", "by (cases oss) (simp add: wf_subclass_loc_def)"], ["", "lemma has_sort_Tv_imp_sort_leq: \"has_sort oss (Tv idn S) S' \\<Longrightarrow> sort_leq (subclass oss) S S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has_sort oss (Tv idn S) S' \\<Longrightarrow>\n    sort_leq (subclass oss) S S'", "by (auto simp add: has_sort.simps)"], ["", "end"]]}