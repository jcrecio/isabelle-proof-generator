{"file_name": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker/TheoryExe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker", "problem_names": ["lemma exe_const_type_of_ok: \"\n  alist_conds cto \\<Longrightarrow>\n  (\\<forall>ty \\<in> Map.ran (map_of cto) . typ_ok_sig (map_of cto, ta, sa) ty)\n  \\<longleftrightarrow> (\\<forall>ty \\<in> snd ` set cto  . typ_ok_sig (map_of cto, ta, sa) ty)\"", "lemma exe_wf_sig_imp_wf_sig:\n  assumes \"alist_conds cto\" \"alist_conds tao\" \"exe_osig_conds sa\" \"(exe_wf_osig sa\n  \\<and> fst ` set (exetcsigs sa) = fst ` set tao \n  \\<and> (\\<forall>type \\<in> fst ` set (exetcsigs sa).  \n      (\\<forall>ars \\<in> snd ` set (the (lookup (\\<lambda>k. k=type) (exetcsigs sa))) .\n      the (lookup (\\<lambda>k. k=type) tao) = length ars)))\n  \\<and> (\\<forall>ty \\<in> snd ` set cto . typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\"\n  shows \"wf_sig (map_of cto, map_of tao, translate_osig sa)\"", "lemma wf_sig_imp_exe_wf_sig:\n  assumes \"alist_conds cto\" \"alist_conds tao\" \"exe_osig_conds sa\"\n    \"wf_sig (map_of cto, map_of tao, translate_osig sa)\" \n  shows \"(exe_wf_osig sa\n    \\<and> fst ` set (exetcsigs sa) = fst ` set tao \n    \\<and> (\\<forall>type \\<in> fst ` set (exetcsigs sa). \n        (\\<forall>ars \\<in> snd ` set (the (lookup (\\<lambda>k. k=type) (exetcsigs sa))) .\n        the (lookup (\\<lambda>k. k=type) tao) = length ars)))\n    \\<and> (\\<forall>ty \\<in> snd ` set cto . typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\"", "lemma wf_sig_iff_exe_wf_sig_pre: \"alist_conds cto \\<Longrightarrow> alist_conds tao \\<Longrightarrow> exe_osig_conds sa\n  \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa) = (exe_wf_osig sa\n  \\<and> fst ` set (exetcsigs sa) = fst ` set tao  \n  \\<and> (\\<forall>type \\<in> fst ` set (exetcsigs sa).\n      (\\<forall>ars \\<in> snd ` set (the (lookup (\\<lambda>k. k=type) (exetcsigs sa))) .\n      the (lookup (\\<lambda>k. k=type) tao) = length ars))\n  \\<and> (\\<forall>ty \\<in> snd ` set cto . typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty))\"", "lemma wf_sig_iff_exe_wf_sig: \"alist_conds cto \\<Longrightarrow> alist_conds tao \\<Longrightarrow> exe_osig_conds sa\n  \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa)\n  \\<longleftrightarrow> exe_wf_sig (ExeSignature cto tao sa)\"", "lemma typ_arity_lookup_code: \"type_arity (translate_signature \\<Sigma>) n = lookup (\\<lambda>k. k = n) (exetyp_arity_of \\<Sigma>)\"", "lemma typ_ok_sig_code: \n  assumes \"exe_osig_conds (exesorts \\<Sigma>)\"\n  shows \"typ_ok_sig (translate_signature \\<Sigma>) ty = exetyp_ok_sig \\<Sigma> ty\"", "lemma exe_wf_sig_code[code]: \"exe_wf_sig \\<Sigma> = exe_wf_sig' \\<Sigma>\"", "lemma const_type_of_lookup_code: \"const_type (translate_signature \\<Sigma>) n = lookup (\\<lambda>k. k = n) (execonst_type_of \\<Sigma>)\"", "lemma wt_term_code: \n  assumes \"exe_osig_conds (exesorts \\<Sigma>)\"\n  shows \"term_ok' (translate_signature \\<Sigma>) t = exeterm_ok' \\<Sigma> t\"", "lemma exetheory_full_exhaust: \"(\\<And>const_type typ_arity sorts axioms. \n    \\<Theta> = (ExeTheory (ExeSignature const_type typ_arity sorts) axioms) \\<Longrightarrow> P)\n  \\<Longrightarrow> P\"", "lemma illformed_theory_not_wf_theory: \"\\<not> wf_theory illformed_theory\"", "lemma wf_sig_iff_exe_wf_sig': \"exe_sig_conds \\<Sigma> \\<Longrightarrow>\n    wf_sig (translate_signature \\<Sigma>) \\<longleftrightarrow>\n    exe_wf_sig \\<Sigma>\"", "lemma wf_sig_imp_exe_wf_sig': \"exe_sig_conds \\<Sigma> \\<Longrightarrow>\n    wf_sig (translate_signature \\<Sigma>) \\<Longrightarrow>\n    exe_wf_sig \\<Sigma>\"", "lemma exe_wf_sig_imp_wf_sig': \"exe_sig_conds \\<Sigma> \\<Longrightarrow>\n    exe_wf_sig \\<Sigma>\n    \\<Longrightarrow> wf_sig (translate_signature \\<Sigma>)\"", "lemma wf_theory_translate_imp_exe_wf_theory:\n  assumes \"wf_theory (translate_theory a)\" shows \"exe_wf_theory a\"", "lemma exe_wf_theory_translate_imp_wf_theory:\n  assumes \"exe_wf_theory a\" shows \"wf_theory (translate_theory a)\"", "lemma wf_theory_translate_iff_exe_wf_theory:\n  \"wf_theory (translate_theory a) \\<longleftrightarrow> exe_wf_theory a\"", "lemma is_std_sig_code: \"is_std_sig (translate_signature \\<Sigma>) = exeis_std_sig \\<Sigma>\"", "lemma term_ok'_code: \n  assumes \"exe_osig_conds (exesorts (ExeSignature cto tao sa))\"\n  shows \"(term_ok' (translate_signature (ExeSignature cto tao sa)) p \\<and> typ_of p = Some propT)\n    = (exeterm_ok' (ExeSignature cto tao sa) p \\<and> typ_of p = Some propT)\"", "lemma term_ok_translate_code_step:\n  assumes \"exe_sig_conds (ExeSignature cto tao sa)\"\n  shows \"(term_ok (translate_theory (ExeTheory (ExeSignature cto tao sa) ax)) p \\<and> typ_of p = Some propT)\n    = (term_ok' (translate_signature (ExeSignature cto tao sa)) p \\<and> typ_of p = Some propT)\"", "lemma term_ok_theory_cond_code:\n  assumes \"exe_sig_conds (ExeSignature cto tao sa)\"\n  shows\"(\\<forall>p \\<in> set ax . term_ok (translate_theory (ExeTheory (ExeSignature cto tao sa) ax)) p \\<and> typ_of p = Some propT)\n    = (\\<forall>p \\<in> set ax . exeterm_ok' (ExeSignature cto tao sa) p \\<and> typ_of p = Some propT)\"", "lemma exe_wf_theory_code[code]: \"exe_wf_theory \\<Theta> = exe_wf_theory' \\<Theta>\""], "translations": [["", "lemma exe_const_type_of_ok: \"\n  alist_conds cto \\<Longrightarrow>\n  (\\<forall>ty \\<in> Map.ran (map_of cto) . typ_ok_sig (map_of cto, ta, sa) ty)\n  \\<longleftrightarrow> (\\<forall>ty \\<in> snd ` set cto  . typ_ok_sig (map_of cto, ta, sa) ty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alist_conds cto \\<Longrightarrow>\n    (\\<forall>ty\\<in>ran (map_of cto). typ_ok_sig (map_of cto, ta, sa) ty) =\n    (\\<forall>ty\\<in>snd ` set cto. typ_ok_sig (map_of cto, ta, sa) ty)", "by (simp add: ran_distinct)"], ["", "fun exe_wf_sig where\n  \"exe_wf_sig (ExeSignature cto tao sa) = (exe_wf_osig sa \\<and>\n  fst ` set (exetcsigs sa) = fst ` set tao \n  \\<and> (\\<forall>type \\<in> fst ` set (exetcsigs sa). \n    (\\<forall>ars \\<in> snd ` set (the (lookup (\\<lambda>k. k=type) (exetcsigs sa))) .\n      the (lookup (\\<lambda>k. k=type) tao) = length ars))\n  \\<and> (\\<forall>ty \\<in> snd ` set cto . typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty))\""], ["", "lemma exe_wf_sig_imp_wf_sig:\n  assumes \"alist_conds cto\" \"alist_conds tao\" \"exe_osig_conds sa\" \"(exe_wf_osig sa\n  \\<and> fst ` set (exetcsigs sa) = fst ` set tao \n  \\<and> (\\<forall>type \\<in> fst ` set (exetcsigs sa).  \n      (\\<forall>ars \\<in> snd ` set (the (lookup (\\<lambda>k. k=type) (exetcsigs sa))) .\n      the (lookup (\\<lambda>k. k=type) tao) = length ars)))\n  \\<and> (\\<forall>ty \\<in> snd ` set cto . typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\"\n  shows \"wf_sig (map_of cto, map_of tao, translate_osig sa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "fix type y"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "assume p: \"exe_osig_conds sa\" \"trans (fst (translate_osig sa))\" \"snd (translate_osig sa) type = Some y\""], ["proof (state)\nthis:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  snd (translate_osig sa) type = Some y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"exe_ars_conds (exetcsigs sa)\""], ["proof (prove)\nusing this:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  snd (translate_osig sa) type = Some y\n\ngoal (1 subgoal):\n 1. exe_ars_conds (snd sa)", "using exe_osig_conds_def"], ["proof (prove)\nusing this:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  snd (translate_osig sa) type = Some y\n  exe_osig_conds ?a \\<equiv>\n  exe_class_conds (fst ?a) \\<and> exe_ars_conds (snd ?a)\n\ngoal (1 subgoal):\n 1. exe_ars_conds (snd sa)", "by blast"], ["proof (state)\nthis:\n  exe_ars_conds (snd sa)\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "from p"], ["proof (chain)\npicking this:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  snd (translate_osig sa) type = Some y", "have \"translate_ars (exetcsigs sa) type = Some y\""], ["proof (prove)\nusing this:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  snd (translate_osig sa) type = Some y\n\ngoal (1 subgoal):\n 1. translate_ars (snd sa) type = Some y", "by (metis snd_conv translate_osig.elims)"], ["proof (state)\nthis:\n  translate_ars (snd sa) type = Some y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"(type, y) \\<in> set (map (apsnd map_of) (exetcsigs sa))\""], ["proof (prove)\nusing this:\n  translate_ars (snd sa) type = Some y\n\ngoal (1 subgoal):\n 1. (type, y) \\<in> set (map (apsnd map_of) (snd sa))", "using map_of_SomeD"], ["proof (prove)\nusing this:\n  translate_ars (snd sa) type = Some y\n  map_of ?xs ?k = Some ?y \\<Longrightarrow> (?k, ?y) \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. (type, y) \\<in> set (map (apsnd map_of) (snd sa))", "by force"], ["proof (state)\nthis:\n  (type, y) \\<in> set (map (apsnd map_of) (snd sa))\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"type \\<in> fst ` set (exetcsigs sa)\""], ["proof (prove)\nusing this:\n  (type, y) \\<in> set (map (apsnd map_of) (snd sa))\n\ngoal (1 subgoal):\n 1. type \\<in> fst ` set (snd sa)", "by force"], ["proof (state)\nthis:\n  type \\<in> fst ` set (snd sa)\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "from this"], ["proof (chain)\npicking this:\n  type \\<in> fst ` set (snd sa)", "obtain x where \"lookup (\\<lambda>x. x=type) (exetcsigs sa) = Some x\""], ["proof (prove)\nusing this:\n  type \\<in> fst ` set (snd sa)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        lookup (\\<lambda>x. x = type) (snd sa) = Some x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using key_present_imp_eq_lookup_finds_value"], ["proof (prove)\nusing this:\n  type \\<in> fst ` set (snd sa)\n  ?k \\<in> fst ` set ?al \\<Longrightarrow>\n  \\<exists>v. lookup (\\<lambda>x. x = ?k) ?al = Some v\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        lookup (\\<lambda>x. x = type) (snd sa) = Some x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  lookup (\\<lambda>x. x = type) (snd sa) = Some x\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"map_of x = y\""], ["proof (prove)\nusing this:\n  lookup (\\<lambda>x. x = type) (snd sa) = Some x\n\ngoal (1 subgoal):\n 1. map_of x = y", "by (metis \\<open>exe_ars_conds (snd sa)\\<close> \\<open>translate_ars (snd sa) type = Some y\\<close> \n          exe_ars_conds_def in_alist_imp_in_map_of lookup_eq_map_of_ap \n          map_of_SomeD option.sel)"], ["proof (state)\nthis:\n  map_of x = y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "have \"\\<exists>y. (type, y) \\<in> set tao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. (type, y) \\<in> set tao", "using \\<open>type \\<in> fst ` set (exetcsigs sa)\\<close> assms(4)"], ["proof (prove)\nusing this:\n  type \\<in> fst ` set (snd sa)\n  (exe_wf_osig sa \\<and>\n   fst ` set (snd sa) = fst ` set tao \\<and>\n   (\\<forall>type\\<in>fst ` set (snd sa).\n       \\<forall>ars\\<in>snd `\n                        set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n          the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n  (\\<forall>ty\\<in>snd ` set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\n\ngoal (1 subgoal):\n 1. \\<exists>y. (type, y) \\<in> set tao", "by auto"], ["proof (state)\nthis:\n  \\<exists>y. (type, y) \\<in> set tao\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>exe_osig_conds sa; trans (fst (translate_osig sa));\n   snd (translate_osig sa) ?type2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (?type2, y) \\<in> set tao\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "note 1 = this"], ["proof (state)\nthis:\n  \\<lbrakk>exe_osig_conds sa; trans (fst (translate_osig sa));\n   snd (translate_osig sa) ?type2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (?type2, y) \\<in> set tao\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>exe_osig_conds sa; trans (fst (translate_osig sa));\n   snd (translate_osig sa) ?type2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (?type2, y) \\<in> set tao\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "fix ars type y"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "assume p: \"exe_osig_conds sa\"\n      \"trans (fst (translate_osig sa))\"\n      \"\\<forall>x\\<in>set cto. typ_ok_sig (map_of cto, map_of tao, translate_osig sa) (snd x)\"\n      \"ars \\<in> ran y\"\n      \"snd (translate_osig sa) type = Some y\""], ["proof (state)\nthis:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  \\<forall>x\\<in>set cto.\n     typ_ok_sig (map_of cto, map_of tao, translate_osig sa) (snd x)\n  ars \\<in> ran y\n  snd (translate_osig sa) type = Some y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"exe_ars_conds (exetcsigs sa)\""], ["proof (prove)\nusing this:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  \\<forall>x\\<in>set cto.\n     typ_ok_sig (map_of cto, map_of tao, translate_osig sa) (snd x)\n  ars \\<in> ran y\n  snd (translate_osig sa) type = Some y\n\ngoal (1 subgoal):\n 1. exe_ars_conds (snd sa)", "using exe_osig_conds_def"], ["proof (prove)\nusing this:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  \\<forall>x\\<in>set cto.\n     typ_ok_sig (map_of cto, map_of tao, translate_osig sa) (snd x)\n  ars \\<in> ran y\n  snd (translate_osig sa) type = Some y\n  exe_osig_conds ?a \\<equiv>\n  exe_class_conds (fst ?a) \\<and> exe_ars_conds (snd ?a)\n\ngoal (1 subgoal):\n 1. exe_ars_conds (snd sa)", "by blast"], ["proof (state)\nthis:\n  exe_ars_conds (snd sa)\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "from p(1-2) p(5)"], ["proof (chain)\npicking this:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  snd (translate_osig sa) type = Some y", "have \"translate_ars (exetcsigs sa) type = Some y\""], ["proof (prove)\nusing this:\n  exe_osig_conds sa\n  trans (fst (translate_osig sa))\n  snd (translate_osig sa) type = Some y\n\ngoal (1 subgoal):\n 1. translate_ars (snd sa) type = Some y", "by (metis snd_conv translate_osig.elims)"], ["proof (state)\nthis:\n  translate_ars (snd sa) type = Some y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"(type, y) \\<in> set (map (apsnd map_of) (exetcsigs sa))\""], ["proof (prove)\nusing this:\n  translate_ars (snd sa) type = Some y\n\ngoal (1 subgoal):\n 1. (type, y) \\<in> set (map (apsnd map_of) (snd sa))", "using map_of_SomeD"], ["proof (prove)\nusing this:\n  translate_ars (snd sa) type = Some y\n  map_of ?xs ?k = Some ?y \\<Longrightarrow> (?k, ?y) \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. (type, y) \\<in> set (map (apsnd map_of) (snd sa))", "by force"], ["proof (state)\nthis:\n  (type, y) \\<in> set (map (apsnd map_of) (snd sa))\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence dom: \"type \\<in> fst ` set (exetcsigs sa)\""], ["proof (prove)\nusing this:\n  (type, y) \\<in> set (map (apsnd map_of) (snd sa))\n\ngoal (1 subgoal):\n 1. type \\<in> fst ` set (snd sa)", "by force"], ["proof (state)\nthis:\n  type \\<in> fst ` set (snd sa)\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "from this"], ["proof (chain)\npicking this:\n  type \\<in> fst ` set (snd sa)", "obtain x where x: \"lookup (\\<lambda>x. x=type) (exetcsigs sa) = Some x\""], ["proof (prove)\nusing this:\n  type \\<in> fst ` set (snd sa)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        lookup (\\<lambda>x. x = type) (snd sa) = Some x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using key_present_imp_eq_lookup_finds_value"], ["proof (prove)\nusing this:\n  type \\<in> fst ` set (snd sa)\n  ?k \\<in> fst ` set ?al \\<Longrightarrow>\n  \\<exists>v. lookup (\\<lambda>x. x = ?k) ?al = Some v\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        lookup (\\<lambda>x. x = type) (snd sa) = Some x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  lookup (\\<lambda>x. x = type) (snd sa) = Some x\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"map_of x = y\""], ["proof (prove)\nusing this:\n  lookup (\\<lambda>x. x = type) (snd sa) = Some x\n\ngoal (1 subgoal):\n 1. map_of x = y", "by (metis \\<open>exe_ars_conds (snd sa)\\<close> \\<open>translate_ars (snd sa) type = Some y\\<close> \n            exe_ars_conds_def in_alist_imp_in_map_of lookup_eq_map_of_ap map_of_SomeD option.sel)"], ["proof (state)\nthis:\n  map_of x = y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "have \"ars \\<in> snd ` set x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ars \\<in> snd ` set x", "by (metis \\<open>map_of x = y\\<close> image_iff in_range_if_ex_key map_of_SomeD p(4) snd_conv)"], ["proof (state)\nthis:\n  ars \\<in> snd ` set x\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "have \"type \\<in> fst ` set tao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. type \\<in> fst ` set tao", "apply (simp add: \\<open>type \\<in> fst ` set (exetcsigs sa)\\<close> assms(4))"], ["proof (prove)\ngoal (1 subgoal):\n 1. type \\<in> fst ` set tao", "using assms(4) dom"], ["proof (prove)\nusing this:\n  (exe_wf_osig sa \\<and>\n   fst ` set (snd sa) = fst ` set tao \\<and>\n   (\\<forall>type\\<in>fst ` set (snd sa).\n       \\<forall>ars\\<in>snd `\n                        set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n          the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n  (\\<forall>ty\\<in>snd ` set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\n  type \\<in> fst ` set (snd sa)\n\ngoal (1 subgoal):\n 1. type \\<in> fst ` set tao", "by blast"], ["proof (state)\nthis:\n  type \\<in> fst ` set tao\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "moreover"], ["proof (state)\nthis:\n  type \\<in> fst ` set tao\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "have 1: \"(\\<forall>ars \\<in> snd ` set (the (lookup (\\<lambda>k. k=type) (exetcsigs sa))) .\n        the (lookup (\\<lambda>k. k=type) tao) = length ars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ars\\<in>snd `\n                     set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n       the (lookup (\\<lambda>k. k = type) tao) = length ars", "using \\<open>type \\<in> fst ` set (exetcsigs sa)\\<close> assms(4)"], ["proof (prove)\nusing this:\n  type \\<in> fst ` set (snd sa)\n  (exe_wf_osig sa \\<and>\n   fst ` set (snd sa) = fst ` set tao \\<and>\n   (\\<forall>type\\<in>fst ` set (snd sa).\n       \\<forall>ars\\<in>snd `\n                        set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n          the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n  (\\<forall>ty\\<in>snd ` set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\n\ngoal (1 subgoal):\n 1. \\<forall>ars\\<in>snd `\n                     set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n       the (lookup (\\<lambda>k. k = type) tao) = length ars", "by blast"], ["proof (state)\nthis:\n  \\<forall>ars\\<in>snd ` set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n     the (lookup (\\<lambda>k. k = type) tao) = length ars\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "ultimately"], ["proof (chain)\npicking this:\n  type \\<in> fst ` set tao\n  \\<forall>ars\\<in>snd ` set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n     the (lookup (\\<lambda>k. k = type) tao) = length ars", "have \"the (lookup (\\<lambda>k. k = type) tao) = length ars\""], ["proof (prove)\nusing this:\n  type \\<in> fst ` set tao\n  \\<forall>ars\\<in>snd ` set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n     the (lookup (\\<lambda>k. k = type) tao) = length ars\n\ngoal (1 subgoal):\n 1. the (lookup (\\<lambda>k. k = type) tao) = length ars", "using \\<open>lookup (\\<lambda>x. x = type) (exetcsigs sa) = Some x\\<close> \\<open>map_of x = y\\<close> \n            in_range_if_ex_key map_of_SomeD option.sel p(3) snd_conv"], ["proof (prove)\nusing this:\n  type \\<in> fst ` set tao\n  \\<forall>ars\\<in>snd ` set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n     the (lookup (\\<lambda>k. k = type) tao) = length ars\n  lookup (\\<lambda>x. x = type) (snd sa) = Some x\n  map_of x = y\n  (?v \\<in> ran ?m) = (\\<exists>k. ?m k = Some ?v)\n  map_of ?xs ?k = Some ?y \\<Longrightarrow> (?k, ?y) \\<in> set ?xs\n  the (Some ?x2.0) = ?x2.0\n  \\<forall>x\\<in>set cto.\n     typ_ok_sig (map_of cto, map_of tao, translate_osig sa) (snd x)\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. the (lookup (\\<lambda>k. k = type) tao) = length ars", "by (simp add: 1 \\<open>ars \\<in> snd ` set x\\<close>)"], ["proof (state)\nthis:\n  the (lookup (\\<lambda>k. k = type) tao) = length ars\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"the (map_of tao type) = length ars\""], ["proof (prove)\nusing this:\n  the (lookup (\\<lambda>k. k = type) tao) = length ars\n\ngoal (1 subgoal):\n 1. the (map_of tao type) = length ars", "by (metis \\<open>the (lookup (\\<lambda>k. k = type) tao) = length ars\\<close> lookup_eq_map_of_ap)"], ["proof (state)\nthis:\n  the (map_of tao type) = length ars\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>exe_osig_conds sa; trans (fst (translate_osig sa));\n   \\<forall>x\\<in>set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) (snd x);\n   ?ars2 \\<in> ran ?y2; snd (translate_osig sa) ?type2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> the (map_of tao ?type2) = length ?ars2\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "note 2 = this"], ["proof (state)\nthis:\n  \\<lbrakk>exe_osig_conds sa; trans (fst (translate_osig sa));\n   \\<forall>x\\<in>set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) (snd x);\n   ?ars2 \\<in> ran ?y2; snd (translate_osig sa) ?type2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> the (map_of tao ?type2) = length ?ars2\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>exe_osig_conds sa; trans (fst (translate_osig sa));\n   \\<forall>x\\<in>set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) (snd x);\n   ?ars2 \\<in> ran ?y2; snd (translate_osig sa) ?type2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> the (map_of tao ?type2) = length ?ars2\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "fix a b x y"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "assume p: \"fst ` set b = fst ` set tao\"\n      \"(x, y) \\<in> set tao\"\n      \"sa = (a, b)\""], ["proof (state)\nthis:\n  fst ` set b = fst ` set tao\n  (x, y) \\<in> set tao\n  sa = (a, b)\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "have \"x \\<in> fst ` set b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> fst ` set b", "by (metis fst_conv image_iff p(1) p(2))"], ["proof (state)\nthis:\n  x \\<in> fst ` set b\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "from this"], ["proof (chain)\npicking this:\n  x \\<in> fst ` set b", "obtain ars where \"lookup (\\<lambda>k. k=x) b = Some ars\""], ["proof (prove)\nusing this:\n  x \\<in> fst ` set b\n\ngoal (1 subgoal):\n 1. (\\<And>ars.\n        lookup (\\<lambda>k. k = x) b = Some ars \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis key_present_imp_eq_lookup_finds_value)"], ["proof (state)\nthis:\n  lookup (\\<lambda>k. k = x) b = Some ars\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"(x,ars) \\<in> set b\""], ["proof (prove)\nusing this:\n  lookup (\\<lambda>k. k = x) b = Some ars\n\ngoal (1 subgoal):\n 1. (x, ars) \\<in> set b", "by (simp add: lookup_present_eq_key')"], ["proof (state)\nthis:\n  (x, ars) \\<in> set b\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"lookup (\\<lambda>k. k=x) (map (apsnd map_of) b) = Some (map_of ars)\""], ["proof (prove)\nusing this:\n  (x, ars) \\<in> set b\n\ngoal (1 subgoal):\n 1. lookup (\\<lambda>k. k = x) (map (apsnd map_of) b) = Some (map_of ars)", "by (metis assms(3) exe_ars_conds_def exe_osig_conds_def in_alist_imp_in_map_of\n          lookup_eq_map_of_ap p(3) snd_conv translate_ars.simps)"], ["proof (state)\nthis:\n  lookup (\\<lambda>k. k = x) (map (apsnd map_of) b) = Some (map_of ars)\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "hence \"\\<exists>y. map_of (map (apsnd map_of) b) x = Some y\""], ["proof (prove)\nusing this:\n  lookup (\\<lambda>k. k = x) (map (apsnd map_of) b) = Some (map_of ars)\n\ngoal (1 subgoal):\n 1. \\<exists>y. map_of (map (apsnd map_of) b) x = Some y", "by (metis lookup_eq_map_of_ap)"], ["proof (state)\nthis:\n  \\<exists>y. map_of (map (apsnd map_of) b) x = Some y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>fst ` set ?b2 = fst ` set tao; (?x2, ?y2) \\<in> set tao;\n   sa = (?a2, ?b2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. map_of (map (apsnd map_of) ?b2) ?x2 = Some y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "note 3 = this"], ["proof (state)\nthis:\n  \\<lbrakk>fst ` set ?b2 = fst ` set tao; (?x2, ?y2) \\<in> set tao;\n   sa = (?a2, ?b2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. map_of (map (apsnd map_of) ?b2) ?x2 = Some y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>fst ` set ?b2 = fst ` set tao; (?x2, ?y2) \\<in> set tao;\n   sa = (?a2, ?b2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. map_of (map (apsnd map_of) ?b2) ?x2 = Some y\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "fix a b x"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "assume p: \"alist_conds cto\"\n      \"x \\<in> ran (map_of cto)\"\n      \"sa = (a, b)\""], ["proof (state)\nthis:\n  alist_conds cto\n  x \\<in> ran (map_of cto)\n  sa = (a, b)\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "have \"typ_ok_sig (map_of cto, map_of tao, set a,  map_of (map (apsnd map_of) b)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok_sig\n     (map_of cto, map_of tao, set a, map_of (map (apsnd map_of) b)) x", "using assms(4) p(1) p(2) p(3) ran_distinct"], ["proof (prove)\nusing this:\n  (exe_wf_osig sa \\<and>\n   fst ` set (snd sa) = fst ` set tao \\<and>\n   (\\<forall>type\\<in>fst ` set (snd sa).\n       \\<forall>ars\\<in>snd `\n                        set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n          the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n  (\\<forall>ty\\<in>snd ` set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\n  alist_conds cto\n  x \\<in> ran (map_of cto)\n  sa = (a, b)\n  distinct (map fst ?al) \\<Longrightarrow> ran (map_of ?al) = snd ` set ?al\n\ngoal (1 subgoal):\n 1. typ_ok_sig\n     (map_of cto, map_of tao, set a, map_of (map (apsnd map_of) b)) x", "by fastforce"], ["proof (state)\nthis:\n  typ_ok_sig (map_of cto, map_of tao, set a, map_of (map (apsnd map_of) b))\n   x\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>alist_conds cto; ?x2 \\<in> ran (map_of cto);\n   sa = (?a2, ?b2)\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig\n                     (map_of cto, map_of tao, set ?a2,\n                      map_of (map (apsnd map_of) ?b2))\n                     ?x2\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "note 4 = this"], ["proof (state)\nthis:\n  \\<lbrakk>alist_conds cto; ?x2 \\<in> ran (map_of cto);\n   sa = (?a2, ?b2)\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig\n                     (map_of cto, map_of tao, set ?a2,\n                      map_of (map (apsnd map_of) ?b2))\n                     ?x2\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "have \"wf_osig (translate_osig sa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_osig (translate_osig sa)", "using assms(4) wf_osig_iff_exe_wf_osig"], ["proof (prove)\nusing this:\n  (exe_wf_osig sa \\<and>\n   fst ` set (snd sa) = fst ` set tao \\<and>\n   (\\<forall>type\\<in>fst ` set (snd sa).\n       \\<forall>ars\\<in>snd `\n                        set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n          the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n  (\\<forall>ty\\<in>snd ` set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\n  wf_osig (translate_osig ?oss) = exe_wf_osig ?oss\n\ngoal (1 subgoal):\n 1. wf_osig (translate_osig sa)", "by simp"], ["proof (state)\nthis:\n  wf_osig (translate_osig sa)\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "thus ?thesis"], ["proof (prove)\nusing this:\n  wf_osig (translate_osig sa)\n\ngoal (1 subgoal):\n 1. wf_sig (map_of cto, map_of tao, translate_osig sa)", "apply (cases sa)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>wf_osig (translate_osig sa); sa = (a, b)\\<rbrakk>\n       \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa)", "using 1 2 3 4 assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>exe_osig_conds sa; trans (fst (translate_osig sa));\n   snd (translate_osig sa) ?type2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (?type2, y) \\<in> set tao\n  \\<lbrakk>exe_osig_conds sa; trans (fst (translate_osig sa));\n   \\<forall>x\\<in>set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) (snd x);\n   ?ars2 \\<in> ran ?y2; snd (translate_osig sa) ?type2 = Some ?y2\\<rbrakk>\n  \\<Longrightarrow> the (map_of tao ?type2) = length ?ars2\n  \\<lbrakk>fst ` set ?b2 = fst ` set tao; (?x2, ?y2) \\<in> set tao;\n   sa = (?a2, ?b2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. map_of (map (apsnd map_of) ?b2) ?x2 = Some y\n  \\<lbrakk>alist_conds cto; ?x2 \\<in> ran (map_of cto);\n   sa = (?a2, ?b2)\\<rbrakk>\n  \\<Longrightarrow> typ_ok_sig\n                     (map_of cto, map_of tao, set ?a2,\n                      map_of (map (apsnd map_of) ?b2))\n                     ?x2\n  alist_conds cto\n  alist_conds tao\n  exe_osig_conds sa\n  (exe_wf_osig sa \\<and>\n   fst ` set (snd sa) = fst ` set tao \\<and>\n   (\\<forall>type\\<in>fst ` set (snd sa).\n       \\<forall>ars\\<in>snd `\n                        set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n          the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n  (\\<forall>ty\\<in>snd ` set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>wf_osig (translate_osig sa); sa = (a, b)\\<rbrakk>\n       \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa)", "by auto"], ["proof (state)\nthis:\n  wf_sig (map_of cto, map_of tao, translate_osig sa)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_sig_imp_exe_wf_sig:\n  assumes \"alist_conds cto\" \"alist_conds tao\" \"exe_osig_conds sa\"\n    \"wf_sig (map_of cto, map_of tao, translate_osig sa)\" \n  shows \"(exe_wf_osig sa\n    \\<and> fst ` set (exetcsigs sa) = fst ` set tao \n    \\<and> (\\<forall>type \\<in> fst ` set (exetcsigs sa). \n        (\\<forall>ars \\<in> snd ` set (the (lookup (\\<lambda>k. k=type) (exetcsigs sa))) .\n        the (lookup (\\<lambda>k. k=type) tao) = length ars)))\n    \\<and> (\\<forall>ty \\<in> snd ` set cto . typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "fix a b x y"], ["proof (state)\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "assume p: \"alist_conds tao\"\n      \"exe_ars_conds b\"\n      \"dom (map_of (map (apsnd map_of) b)) = dom (map_of tao)\"\n      \"(x, y) \\<in> set b\""], ["proof (state)\nthis:\n  alist_conds tao\n  exe_ars_conds b\n  dom (map_of (map (apsnd map_of) b)) = dom (map_of tao)\n  (x, y) \\<in> set b\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "hence \"x \\<in> fst ` set tao\""], ["proof (prove)\nusing this:\n  alist_conds tao\n  exe_ars_conds b\n  dom (map_of (map (apsnd map_of) b)) = dom (map_of tao)\n  (x, y) \\<in> set b\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` set tao", "by (metis domIff dom_map_of_conv_image_fst exe_ars_conds_def \n          in_alist_imp_in_map_of option.distinct(1) translate_ars.simps)"], ["proof (state)\nthis:\n  x \\<in> fst ` set tao\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>alist_conds tao; exe_ars_conds ?b2;\n   dom (map_of (map (apsnd map_of) ?b2)) = dom (map_of tao);\n   (?x2, ?y2) \\<in> set ?b2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<in> fst ` set tao\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "note 1 = this"], ["proof (state)\nthis:\n  \\<lbrakk>alist_conds tao; exe_ars_conds ?b2;\n   dom (map_of (map (apsnd map_of) ?b2)) = dom (map_of tao);\n   (?x2, ?y2) \\<in> set ?b2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<in> fst ` set tao\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>alist_conds tao; exe_ars_conds ?b2;\n   dom (map_of (map (apsnd map_of) ?b2)) = dom (map_of tao);\n   (?x2, ?y2) \\<in> set ?b2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<in> fst ` set tao\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "fix cl n ar and tcs :: \"(String.literal \\<times> (String.literal \\<times> String.literal set list) list) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "assume p: \"dom (map_of (map (apsnd map_of) tcs)) = dom (map_of tao)\"\n      \"alist_conds tao\"\n      \"(n, ar) \\<in> set tao\""], ["proof (state)\nthis:\n  dom (map_of (map (apsnd map_of) tcs)) = dom (map_of tao)\n  alist_conds tao\n  (n, ar) \\<in> set tao\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "obtain mgd where \"translate_ars tcs n = Some mgd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>mgd.\n        translate_ars tcs n = Some mgd \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using p"], ["proof (prove)\nusing this:\n  dom (map_of (map (apsnd map_of) tcs)) = dom (map_of tao)\n  alist_conds tao\n  (n, ar) \\<in> set tao\n\ngoal (1 subgoal):\n 1. (\\<And>mgd.\n        translate_ars tcs n = Some mgd \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Some_eq_map_of_iff domI domIff option.exhaust_sel translate_ars.simps)"], ["proof (state)\nthis:\n  translate_ars tcs n = Some mgd\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "hence \"map_of (map (apsnd map_of) tcs) n = Some mgd\""], ["proof (prove)\nusing this:\n  translate_ars tcs n = Some mgd\n\ngoal (1 subgoal):\n 1. map_of (map (apsnd map_of) tcs) n = Some mgd", "by (simp add: tcsigs_translate exe_osig_conds_def p)"], ["proof (state)\nthis:\n  map_of (map (apsnd map_of) tcs) n = Some mgd\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "hence \"n \\<in> fst ` set (map (apsnd map_of) tcs)\""], ["proof (prove)\nusing this:\n  map_of (map (apsnd map_of) tcs) n = Some mgd\n\ngoal (1 subgoal):\n 1. n \\<in> fst ` set (map (apsnd map_of) tcs)", "by (meson domI domIff map_of_eq_None_iff)"], ["proof (state)\nthis:\n  n \\<in> fst ` set (map (apsnd map_of) tcs)\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "then"], ["proof (chain)\npicking this:\n  n \\<in> fst ` set (map (apsnd map_of) tcs)", "have \"n \\<in> fst ` set tcs\""], ["proof (prove)\nusing this:\n  n \\<in> fst ` set (map (apsnd map_of) tcs)\n\ngoal (1 subgoal):\n 1. n \\<in> fst ` set tcs", "by force"], ["proof (state)\nthis:\n  n \\<in> fst ` set tcs\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>dom (map_of (map (apsnd map_of) ?tcs2)) = dom (map_of tao);\n   alist_conds tao; (?n2, ?ar2) \\<in> set tao\\<rbrakk>\n  \\<Longrightarrow> ?n2 \\<in> fst ` set ?tcs2\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "note 2 = this"], ["proof (state)\nthis:\n  \\<lbrakk>dom (map_of (map (apsnd map_of) ?tcs2)) = dom (map_of tao);\n   alist_conds tao; (?n2, ?ar2) \\<in> set tao\\<rbrakk>\n  \\<Longrightarrow> ?n2 \\<in> fst ` set ?tcs2\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>dom (map_of (map (apsnd map_of) ?tcs2)) = dom (map_of tao);\n   alist_conds tao; (?n2, ?ar2) \\<in> set tao\\<rbrakk>\n  \\<Longrightarrow> ?n2 \\<in> fst ` set ?tcs2\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "fix cl tcs n K c Ss"], ["proof (state)\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "assume p: \"(n, K) \\<in> set tcs\"\n      \"(c, Ss) \\<in> set (the (lookup (\\<lambda>k. k = n) tcs))\"\n      \"exe_ars_conds tcs\"\n      \"dom (map_of (map (apsnd map_of) tcs)) = dom (map_of tao)\"\n      \"\\<forall>type\\<in>dom (map_of tao). \\<forall>ars\\<in>ran (the (map_of (map (apsnd map_of) tcs) type)).\n          the (map_of tao type) = length ars\""], ["proof (state)\nthis:\n  (n, K) \\<in> set tcs\n  (c, Ss) \\<in> set (the (lookup (\\<lambda>k. k = n) tcs))\n  exe_ars_conds tcs\n  dom (map_of (map (apsnd map_of) tcs)) = dom (map_of tao)\n  \\<forall>type\\<in>dom (map_of tao).\n     \\<forall>ars\\<in>ran (the (map_of (map (apsnd map_of) tcs) type)).\n        the (map_of tao type) = length ars\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "have 1: \"translate_ars tcs n = Some (map_of K)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. translate_ars tcs n = Some (map_of K)", "using exe_ars_conds_def in_alist_imp_in_map_of p(1-3)"], ["proof (prove)\nusing this:\n  exe_ars_conds ?arss =\n  (alist_conds ?arss \\<and>\n   (\\<forall>ars\\<in>snd ` set ?arss. alist_conds ars))\n  \\<lbrakk>alist_conds ?arss; (?name, ?ars) \\<in> set ?arss\\<rbrakk>\n  \\<Longrightarrow> translate_ars ?arss ?name = Some (map_of ?ars)\n  (n, K) \\<in> set tcs\n  (c, Ss) \\<in> set (the (lookup (\\<lambda>k. k = n) tcs))\n  exe_ars_conds tcs\n\ngoal (1 subgoal):\n 1. translate_ars tcs n = Some (map_of K)", "by blast"], ["proof (state)\nthis:\n  translate_ars tcs n = Some (map_of K)\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "have 2: \"map_of K c = Some Ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of K c = Some Ss", "using p(1-3)"], ["proof (prove)\nusing this:\n  (n, K) \\<in> set tcs\n  (c, Ss) \\<in> set (the (lookup (\\<lambda>k. k = n) tcs))\n  exe_ars_conds tcs\n\ngoal (1 subgoal):\n 1. map_of K c = Some Ss", "by (metis Some_eq_map_of_iff exe_ars_conds_def image_iff lookup_eq_map_of_ap\n          option.sel snd_conv)"], ["proof (state)\nthis:\n  map_of K c = Some Ss\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "have \"the (lookup (\\<lambda>k. k = n) tao) = length Ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (lookup (\\<lambda>k. k = n) tao) = length Ss", "using 1 2 p(4,5)"], ["proof (prove)\nusing this:\n  translate_ars tcs n = Some (map_of K)\n  map_of K c = Some Ss\n  dom (map_of (map (apsnd map_of) tcs)) = dom (map_of tao)\n  \\<forall>type\\<in>dom (map_of tao).\n     \\<forall>ars\\<in>ran (the (map_of (map (apsnd map_of) tcs) type)).\n        the (map_of tao type) = length ars\n\ngoal (1 subgoal):\n 1. the (lookup (\\<lambda>k. k = n) tao) = length Ss", "by (metis domIff lookup_eq_map_of_ap option.distinct(1) option.sel ranI translate_ars.simps)"], ["proof (state)\nthis:\n  the (lookup (\\<lambda>k. k = n) tao) = length Ss\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?n2, ?K2) \\<in> set ?tcs2;\n   (?c2, ?Ss2) \\<in> set (the (lookup (\\<lambda>k. k = ?n2) ?tcs2));\n   exe_ars_conds ?tcs2;\n   dom (map_of (map (apsnd map_of) ?tcs2)) = dom (map_of tao);\n   \\<forall>type\\<in>dom (map_of tao).\n      \\<forall>ars\\<in>ran (the (map_of (map (apsnd map_of) ?tcs2) type)).\n         the (map_of tao type) = length ars\\<rbrakk>\n  \\<Longrightarrow> the (lookup (\\<lambda>k. k = ?n2) tao) = length ?Ss2\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "note 3 = this"], ["proof (state)\nthis:\n  \\<lbrakk>(?n2, ?K2) \\<in> set ?tcs2;\n   (?c2, ?Ss2) \\<in> set (the (lookup (\\<lambda>k. k = ?n2) ?tcs2));\n   exe_ars_conds ?tcs2;\n   dom (map_of (map (apsnd map_of) ?tcs2)) = dom (map_of tao);\n   \\<forall>type\\<in>dom (map_of tao).\n      \\<forall>ars\\<in>ran (the (map_of (map (apsnd map_of) ?tcs2) type)).\n         the (map_of tao type) = length ars\\<rbrakk>\n  \\<Longrightarrow> the (lookup (\\<lambda>k. k = ?n2) tao) = length ?Ss2\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "have 1: \"wf_osig (translate_osig sa)\" \"dom (tcsigs (translate_osig sa)) = dom (map_of tao)\"\n    \"(\\<forall>type \\<in> dom (tcsigs (translate_osig sa)). \n    (\\<forall>ars \\<in> ran (the (tcsigs (translate_osig sa) type)) . the ((map_of tao) type) = length ars))\"\n    \"(\\<forall>ty \\<in> Map.ran (map_of cto) . wf_type (map_of cto, map_of tao, translate_osig sa) ty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (wf_osig (translate_osig sa) &&&\n     dom (tcsigs (translate_osig sa)) = dom (map_of tao)) &&&\n    \\<forall>type\\<in>dom (tcsigs (translate_osig sa)).\n       \\<forall>ars\\<in>ran (the (tcsigs (translate_osig sa) type)).\n          the (map_of tao type) = length ars &&&\n    \\<forall>ty\\<in>ran (map_of cto).\n       wf_type (map_of cto, map_of tao, translate_osig sa) ty", "using assms(4)"], ["proof (prove)\nusing this:\n  wf_sig (map_of cto, map_of tao, translate_osig sa)\n\ngoal (1 subgoal):\n 1. (wf_osig (translate_osig sa) &&&\n     dom (tcsigs (translate_osig sa)) = dom (map_of tao)) &&&\n    \\<forall>type\\<in>dom (tcsigs (translate_osig sa)).\n       \\<forall>ars\\<in>ran (the (tcsigs (translate_osig sa) type)).\n          the (map_of tao type) = length ars &&&\n    \\<forall>ty\\<in>ran (map_of cto).\n       wf_type (map_of cto, map_of tao, translate_osig sa) ty", "by auto"], ["proof (state)\nthis:\n  wf_osig (translate_osig sa)\n  dom (tcsigs (translate_osig sa)) = dom (map_of tao)\n  \\<forall>type\\<in>dom (tcsigs (translate_osig sa)).\n     \\<forall>ars\\<in>ran (the (tcsigs (translate_osig sa) type)).\n        the (map_of tao type) = length ars\n  \\<forall>ty\\<in>ran (map_of cto).\n     wf_type (map_of cto, map_of tao, translate_osig sa) ty\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "note pre = 1"], ["proof (state)\nthis:\n  wf_osig (translate_osig sa)\n  dom (tcsigs (translate_osig sa)) = dom (map_of tao)\n  \\<forall>type\\<in>dom (tcsigs (translate_osig sa)).\n     \\<forall>ars\\<in>ran (the (tcsigs (translate_osig sa) type)).\n        the (map_of tao type) = length ars\n  \\<forall>ty\\<in>ran (map_of cto).\n     wf_type (map_of cto, map_of tao, translate_osig sa) ty\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "have \"exe_wf_osig sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_wf_osig sa", "using \"1\"(1) wf_osig_iff_exe_wf_osig"], ["proof (prove)\nusing this:\n  wf_osig (translate_osig sa)\n  wf_osig (translate_osig ?oss) = exe_wf_osig ?oss\n\ngoal (1 subgoal):\n 1. exe_wf_osig sa", "by blast"], ["proof (state)\nthis:\n  exe_wf_osig sa\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "moreover"], ["proof (state)\nthis:\n  exe_wf_osig sa\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "have \"fst ` set (snd sa) = fst ` set tao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` set (snd sa) = fst ` set tao", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. fst ` set (snd sa) \\<subseteq> fst ` set tao\n 2. fst ` set tao \\<subseteq> fst ` set (snd sa)", "show \"fst ` set (snd sa) \\<subseteq> fst ` set tao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` set (snd sa) \\<subseteq> fst ` set tao", "using assms(3-4)"], ["proof (prove)\nusing this:\n  exe_osig_conds sa\n  wf_sig (map_of cto, map_of tao, translate_osig sa)\n\ngoal (1 subgoal):\n 1. fst ` set (snd sa) \\<subseteq> fst ` set tao", "by (clarsimp simp add: dom_map_of_conv_image_fst exe_ars_conds_def exe_osig_conds_def)\n        (metis tcsigs_translate assms(3) domIff in_alist_imp_in_map_of option.simps(3))"], ["proof (state)\nthis:\n  fst ` set (snd sa) \\<subseteq> fst ` set tao\n\ngoal (1 subgoal):\n 1. fst ` set tao \\<subseteq> fst ` set (snd sa)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst ` set tao \\<subseteq> fst ` set (snd sa)", "show \"fst ` set (snd sa) \\<supseteq> fst ` set tao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` set tao \\<subseteq> fst ` set (snd sa)", "using \"1\"(2) \"2\" assms(2-3) tcsigs_translate"], ["proof (prove)\nusing this:\n  dom (tcsigs (translate_osig sa)) = dom (map_of tao)\n  \\<lbrakk>dom (map_of (map (apsnd map_of) ?tcs2)) = dom (map_of tao);\n   alist_conds tao; (?n2, ?ar2) \\<in> set tao\\<rbrakk>\n  \\<Longrightarrow> ?n2 \\<in> fst ` set ?tcs2\n  alist_conds tao\n  exe_osig_conds sa\n  exe_osig_conds ?oss \\<Longrightarrow>\n  tcsigs (translate_osig ?oss) = translate_ars (snd ?oss)\n\ngoal (1 subgoal):\n 1. fst ` set tao \\<subseteq> fst ` set (snd sa)", "by auto"], ["proof (state)\nthis:\n  fst ` set tao \\<subseteq> fst ` set (snd sa)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst ` set (snd sa) = fst ` set tao\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "moreover"], ["proof (state)\nthis:\n  fst ` set (snd sa) = fst ` set tao\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "have \"(\\<forall>type\\<in>fst ` set (snd sa).  \\<forall>ars\\<in>snd ` set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n        the (lookup (\\<lambda>k. k = type) tao) = length ars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>type\\<in>fst ` set (snd sa).\n       \\<forall>ars\\<in>snd `\n                        set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n          the (lookup (\\<lambda>k. k = type) tao) = length ars", "proof (standard+, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>type ars.\n       \\<lbrakk>type \\<in> fst ` set (snd sa);\n        ars\n        \\<in> snd `\n              set (the (lookup (\\<lambda>k. k = type) (snd sa)))\\<rbrakk>\n       \\<Longrightarrow> the (lookup (\\<lambda>k. k = type) tao) =\n                         length ars", "case (1 n Ss)"], ["proof (state)\nthis:\n  n \\<in> fst ` set (snd sa)\n  Ss \\<in> snd ` set (the (lookup (\\<lambda>k. k = n) (snd sa)))\n\ngoal (1 subgoal):\n 1. \\<And>type ars.\n       \\<lbrakk>type \\<in> fst ` set (snd sa);\n        ars\n        \\<in> snd `\n              set (the (lookup (\\<lambda>k. k = type) (snd sa)))\\<rbrakk>\n       \\<Longrightarrow> the (lookup (\\<lambda>k. k = type) tao) =\n                         length ars", "obtain c where c: \"(c, Ss) \\<in> set (the (lookup (\\<lambda>k. k = n) (snd sa)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        (c, Ss)\n        \\<in> set (the (lookup (\\<lambda>k. k = n)\n                         (snd sa))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \"1\"(2)"], ["proof (prove)\nusing this:\n  Ss \\<in> snd ` set (the (lookup (\\<lambda>k. k = n) (snd sa)))\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        (c, Ss)\n        \\<in> set (the (lookup (\\<lambda>k. k = n)\n                         (snd sa))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (c, Ss) \\<in> set (the (lookup (\\<lambda>k. k = n) (snd sa)))\n\ngoal (1 subgoal):\n 1. \\<And>type ars.\n       \\<lbrakk>type \\<in> fst ` set (snd sa);\n        ars\n        \\<in> snd `\n              set (the (lookup (\\<lambda>k. k = type) (snd sa)))\\<rbrakk>\n       \\<Longrightarrow> the (lookup (\\<lambda>k. k = type) tao) =\n                         length ars", "have \"dom (map_of (map (apsnd map_of) (snd sa))) = dom (map_of tao)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (map_of (map (apsnd map_of) (snd sa))) = dom (map_of tao)", "using assms(3) pre(2) tcsigs_translate"], ["proof (prove)\nusing this:\n  exe_osig_conds sa\n  dom (tcsigs (translate_osig sa)) = dom (map_of tao)\n  exe_osig_conds ?oss \\<Longrightarrow>\n  tcsigs (translate_osig ?oss) = translate_ars (snd ?oss)\n\ngoal (1 subgoal):\n 1. dom (map_of (map (apsnd map_of) (snd sa))) = dom (map_of tao)", "by fastforce"], ["proof (state)\nthis:\n  dom (map_of (map (apsnd map_of) (snd sa))) = dom (map_of tao)\n\ngoal (1 subgoal):\n 1. \\<And>type ars.\n       \\<lbrakk>type \\<in> fst ` set (snd sa);\n        ars\n        \\<in> snd `\n              set (the (lookup (\\<lambda>k. k = type) (snd sa)))\\<rbrakk>\n       \\<Longrightarrow> the (lookup (\\<lambda>k. k = type) tao) =\n                         length ars", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. the (lookup (\\<lambda>k. k = n) tao) = length Ss", "using assms(3) pre(2) c tcsigs_translate pre(2-3) domI"], ["proof (prove)\nusing this:\n  exe_osig_conds sa\n  dom (tcsigs (translate_osig sa)) = dom (map_of tao)\n  (c, Ss) \\<in> set (the (lookup (\\<lambda>k. k = n) (snd sa)))\n  exe_osig_conds ?oss \\<Longrightarrow>\n  tcsigs (translate_osig ?oss) = translate_ars (snd ?oss)\n  dom (tcsigs (translate_osig sa)) = dom (map_of tao)\n  \\<forall>type\\<in>dom (tcsigs (translate_osig sa)).\n     \\<forall>ars\\<in>ran (the (tcsigs (translate_osig sa) type)).\n        the (map_of tao type) = length ars\n  ?m ?a = Some ?b \\<Longrightarrow> ?a \\<in> dom ?m\n\ngoal (1 subgoal):\n 1. the (lookup (\\<lambda>k. k = n) tao) = length Ss", "by (fastforce simp add: exe_osig_conds_def tcsigs_translate[OF assms(3)] \n          \"1\"(1) key_present_imp_eq_lookup_finds_value lookup_present_eq_key'\n          split: option.splits intro!: 3[of _ \"the (lookup (\\<lambda>k. k = n) (snd sa))\" \"snd sa\" c])+"], ["proof (state)\nthis:\n  the (lookup (\\<lambda>k. k = n) tao) = length Ss\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>type\\<in>fst ` set (snd sa).\n     \\<forall>ars\\<in>snd `\n                      set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n        the (lookup (\\<lambda>k. k = type) tao) = length ars\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "moreover"], ["proof (state)\nthis:\n  \\<forall>type\\<in>fst ` set (snd sa).\n     \\<forall>ars\\<in>snd `\n                      set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n        the (lookup (\\<lambda>k. k = type) tao) = length ars\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "have \"(\\<forall>ty \\<in> Map.ran (map_of cto) . wf_type (map_of cto, map_of tao, translate_osig sa) ty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ty\\<in>ran (map_of cto).\n       wf_type (map_of cto, map_of tao, translate_osig sa) ty", "using \"1\"(4)"], ["proof (prove)\nusing this:\n  \\<forall>ty\\<in>ran (map_of cto).\n     wf_type (map_of cto, map_of tao, translate_osig sa) ty\n\ngoal (1 subgoal):\n 1. \\<forall>ty\\<in>ran (map_of cto).\n       wf_type (map_of cto, map_of tao, translate_osig sa) ty", "by blast"], ["proof (state)\nthis:\n  \\<forall>ty\\<in>ran (map_of cto).\n     wf_type (map_of cto, map_of tao, translate_osig sa) ty\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "ultimately"], ["proof (chain)\npicking this:\n  exe_wf_osig sa\n  fst ` set (snd sa) = fst ` set tao\n  \\<forall>type\\<in>fst ` set (snd sa).\n     \\<forall>ars\\<in>snd `\n                      set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n        the (lookup (\\<lambda>k. k = type) tao) = length ars\n  \\<forall>ty\\<in>ran (map_of cto).\n     wf_type (map_of cto, map_of tao, translate_osig sa) ty", "show ?thesis"], ["proof (prove)\nusing this:\n  exe_wf_osig sa\n  fst ` set (snd sa) = fst ` set tao\n  \\<forall>type\\<in>fst ` set (snd sa).\n     \\<forall>ars\\<in>snd `\n                      set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n        the (lookup (\\<lambda>k. k = type) tao) = length ars\n  \\<forall>ty\\<in>ran (map_of cto).\n     wf_type (map_of cto, map_of tao, translate_osig sa) ty\n\ngoal (1 subgoal):\n 1. (exe_wf_osig sa \\<and>\n     fst ` set (snd sa) = fst ` set tao \\<and>\n     (\\<forall>type\\<in>fst ` set (snd sa).\n         \\<forall>ars\\<in>snd `\n                          set (the (lookup (\\<lambda>k. k = type)\n                                     (snd sa))).\n            the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n    (\\<forall>ty\\<in>snd ` set cto.\n        typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)", "by (simp add: assms(1) ran_distinct)"], ["proof (state)\nthis:\n  (exe_wf_osig sa \\<and>\n   fst ` set (snd sa) = fst ` set tao \\<and>\n   (\\<forall>type\\<in>fst ` set (snd sa).\n       \\<forall>ars\\<in>snd `\n                        set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n          the (lookup (\\<lambda>k. k = type) tao) = length ars)) \\<and>\n  (\\<forall>ty\\<in>snd ` set cto.\n      typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_sig_iff_exe_wf_sig_pre: \"alist_conds cto \\<Longrightarrow> alist_conds tao \\<Longrightarrow> exe_osig_conds sa\n  \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa) = (exe_wf_osig sa\n  \\<and> fst ` set (exetcsigs sa) = fst ` set tao  \n  \\<and> (\\<forall>type \\<in> fst ` set (exetcsigs sa).\n      (\\<forall>ars \\<in> snd ` set (the (lookup (\\<lambda>k. k=type) (exetcsigs sa))) .\n      the (lookup (\\<lambda>k. k=type) tao) = length ars))\n  \\<and> (\\<forall>ty \\<in> snd ` set cto . typ_ok_sig (map_of cto, map_of tao, translate_osig sa) ty))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alist_conds cto; alist_conds tao; exe_osig_conds sa\\<rbrakk>\n    \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa) =\n                      (exe_wf_osig sa \\<and>\n                       fst ` set (snd sa) = fst ` set tao \\<and>\n                       (\\<forall>type\\<in>fst ` set (snd sa).\n                           \\<forall>ars\\<in>snd `\n      set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n                              the (lookup (\\<lambda>k. k = type) tao) =\n                              length ars) \\<and>\n                       (\\<forall>ty\\<in>snd ` set cto.\n                           typ_ok_sig\n                            (map_of cto, map_of tao, translate_osig sa) ty))", "using exe_wf_sig_imp_wf_sig wf_sig_imp_exe_wf_sig"], ["proof (prove)\nusing this:\n  \\<lbrakk>alist_conds ?cto; alist_conds ?tao; exe_osig_conds ?sa;\n   (exe_wf_osig ?sa \\<and>\n    fst ` set (snd ?sa) = fst ` set ?tao \\<and>\n    (\\<forall>type\\<in>fst ` set (snd ?sa).\n        \\<forall>ars\\<in>snd `\n                         set (the (lookup (\\<lambda>k. k = type)\n                                    (snd ?sa))).\n           the (lookup (\\<lambda>k. k = type) ?tao) = length ars)) \\<and>\n   (\\<forall>ty\\<in>snd ` set ?cto.\n       typ_ok_sig (map_of ?cto, map_of ?tao, translate_osig ?sa)\n        ty)\\<rbrakk>\n  \\<Longrightarrow> wf_sig (map_of ?cto, map_of ?tao, translate_osig ?sa)\n  \\<lbrakk>alist_conds ?cto; alist_conds ?tao; exe_osig_conds ?sa;\n   wf_sig (map_of ?cto, map_of ?tao, translate_osig ?sa)\\<rbrakk>\n  \\<Longrightarrow> (exe_wf_osig ?sa \\<and>\n                     fst ` set (snd ?sa) = fst ` set ?tao \\<and>\n                     (\\<forall>type\\<in>fst ` set (snd ?sa).\n                         \\<forall>ars\\<in>snd `\n    set (the (lookup (\\<lambda>k. k = type) (snd ?sa))).\n                            the (lookup (\\<lambda>k. k = type) ?tao) =\n                            length ars)) \\<and>\n                    (\\<forall>ty\\<in>snd ` set ?cto.\n                        typ_ok_sig\n                         (map_of ?cto, map_of ?tao, translate_osig ?sa) ty)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>alist_conds cto; alist_conds tao; exe_osig_conds sa\\<rbrakk>\n    \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa) =\n                      (exe_wf_osig sa \\<and>\n                       fst ` set (snd sa) = fst ` set tao \\<and>\n                       (\\<forall>type\\<in>fst ` set (snd sa).\n                           \\<forall>ars\\<in>snd `\n      set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n                              the (lookup (\\<lambda>k. k = type) tao) =\n                              length ars) \\<and>\n                       (\\<forall>ty\\<in>snd ` set cto.\n                           typ_ok_sig\n                            (map_of cto, map_of tao, translate_osig sa) ty))", "by meson"], ["", "lemma wf_sig_iff_exe_wf_sig: \"alist_conds cto \\<Longrightarrow> alist_conds tao \\<Longrightarrow> exe_osig_conds sa\n  \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa)\n  \\<longleftrightarrow> exe_wf_sig (ExeSignature cto tao sa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alist_conds cto; alist_conds tao; exe_osig_conds sa\\<rbrakk>\n    \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa) =\n                      exe_wf_sig (ExeSignature cto tao sa)", "unfolding exe_wf_sig.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>alist_conds cto; alist_conds tao; exe_osig_conds sa\\<rbrakk>\n    \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa) =\n                      (exe_wf_osig sa \\<and>\n                       fst ` set (snd sa) = fst ` set tao \\<and>\n                       (\\<forall>type\\<in>fst ` set (snd sa).\n                           \\<forall>ars\\<in>snd `\n      set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n                              the (lookup (\\<lambda>k. k = type) tao) =\n                              length ars) \\<and>\n                       Ball (snd ` set cto)\n                        (typ_ok_sig\n                          (map_of cto, map_of tao, translate_osig sa)))", "using wf_sig_iff_exe_wf_sig_pre"], ["proof (prove)\nusing this:\n  \\<lbrakk>alist_conds ?cto; alist_conds ?tao; exe_osig_conds ?sa\\<rbrakk>\n  \\<Longrightarrow> wf_sig (map_of ?cto, map_of ?tao, translate_osig ?sa) =\n                    (exe_wf_osig ?sa \\<and>\n                     fst ` set (snd ?sa) = fst ` set ?tao \\<and>\n                     (\\<forall>type\\<in>fst ` set (snd ?sa).\n                         \\<forall>ars\\<in>snd `\n    set (the (lookup (\\<lambda>k. k = type) (snd ?sa))).\n                            the (lookup (\\<lambda>k. k = type) ?tao) =\n                            length ars) \\<and>\n                     (\\<forall>ty\\<in>snd ` set ?cto.\n                         typ_ok_sig\n                          (map_of ?cto, map_of ?tao, translate_osig ?sa)\n                          ty))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>alist_conds cto; alist_conds tao; exe_osig_conds sa\\<rbrakk>\n    \\<Longrightarrow> wf_sig (map_of cto, map_of tao, translate_osig sa) =\n                      (exe_wf_osig sa \\<and>\n                       fst ` set (snd sa) = fst ` set tao \\<and>\n                       (\\<forall>type\\<in>fst ` set (snd sa).\n                           \\<forall>ars\\<in>snd `\n      set (the (lookup (\\<lambda>k. k = type) (snd sa))).\n                              the (lookup (\\<lambda>k. k = type) tao) =\n                              length ars) \\<and>\n                       Ball (snd ` set cto)\n                        (typ_ok_sig\n                          (map_of cto, map_of tao, translate_osig sa)))", "by presburger"], ["", "fun translate_signature :: \"exesignature \\<Rightarrow> signature\" where\n  \"translate_signature (ExeSignature cto tao sa) \n    = (map_of cto, map_of tao, translate_osig sa)\""], ["", "fun exetyp_ok_sig :: \"exesignature \\<Rightarrow> typ \\<Rightarrow> bool\" where\n  \"exetyp_ok_sig \\<Sigma> (Ty c Ts) = (case lookup (\\<lambda>k. k=c) (exetyp_arity_of \\<Sigma>) of\n    None \\<Rightarrow> False\n  | Some ar \\<Rightarrow> length Ts = ar \\<and> list_all (exetyp_ok_sig \\<Sigma>) Ts)\"\n| \"exetyp_ok_sig \\<Sigma> (Tv _ S) = exewf_sort (execlasses (exesorts \\<Sigma>)) S\""], ["", "thm exewf_sort_def"], ["", "definition [simp]: \"exesort_ok_sig \\<Sigma> S \\<equiv> exesort_ex (execlasses (exesorts \\<Sigma>)) S \n  \\<and> exenormalized_sort (execlasses (exesorts \\<Sigma>)) S\""], ["", "lemma typ_arity_lookup_code: \"type_arity (translate_signature \\<Sigma>) n = lookup (\\<lambda>k. k = n) (exetyp_arity_of \\<Sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. type_arity (translate_signature \\<Sigma>) n =\n    lookup (\\<lambda>k. k = n) (exetyp_arity_of \\<Sigma>)", "by (cases \\<Sigma>) (simp add: lookup_eq_map_of_ap)"], ["", "lemma typ_ok_sig_code: \n  assumes \"exe_osig_conds (exesorts \\<Sigma>)\"\n  shows \"typ_ok_sig (translate_signature \\<Sigma>) ty = exetyp_ok_sig \\<Sigma> ty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok_sig (translate_signature \\<Sigma>) ty = exetyp_ok_sig \\<Sigma> ty", "using assms"], ["proof (prove)\nusing this:\n  exe_osig_conds (exesorts \\<Sigma>)\n\ngoal (1 subgoal):\n 1. typ_ok_sig (translate_signature \\<Sigma>) ty = exetyp_ok_sig \\<Sigma> ty", "apply (induction ty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    exe_osig_conds (exesorts \\<Sigma>)\\<rbrakk>\n                   \\<Longrightarrow> typ_ok_sig\n(translate_signature \\<Sigma>) x2a =\n                                     exetyp_ok_sig \\<Sigma> x2a;\n        exe_osig_conds (exesorts \\<Sigma>)\\<rbrakk>\n       \\<Longrightarrow> typ_ok_sig (translate_signature \\<Sigma>)\n                          (Ty x1 x2) =\n                         exetyp_ok_sig \\<Sigma> (Ty x1 x2)\n 2. \\<And>x1 x2.\n       exe_osig_conds (exesorts \\<Sigma>) \\<Longrightarrow>\n       typ_ok_sig (translate_signature \\<Sigma>) (Tv x1 x2) =\n       exetyp_ok_sig \\<Sigma> (Tv x1 x2)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<And>x2a.\n                   x2a \\<in> set x2 \\<Longrightarrow>\n                   typ_ok_sig (translate_signature \\<Sigma>) x2a =\n                   exetyp_ok_sig \\<Sigma> x2a;\n        exe_osig_conds (exesorts \\<Sigma>)\\<rbrakk>\n       \\<Longrightarrow> (case type_arity (translate_signature \\<Sigma>)\n                                x1 of\n                          None \\<Rightarrow> False\n                          | Some ar \\<Rightarrow>\n                              length x2 = ar \\<and>\n                              list_all\n                               (typ_ok_sig (translate_signature \\<Sigma>))\n                               x2) =\n                         (case lookup (\\<lambda>k. k = x1)\n                                (exetyp_arity_of \\<Sigma>) of\n                          None \\<Rightarrow> False\n                          | Some ar \\<Rightarrow>\n                              length x2 = ar \\<and>\n                              list_all (exetyp_ok_sig \\<Sigma>) x2)\n 2. \\<And>x1 x2.\n       exe_osig_conds (exesorts \\<Sigma>) \\<Longrightarrow>\n       typ_ok_sig (translate_signature \\<Sigma>) (Tv x1 x2) =\n       exetyp_ok_sig \\<Sigma> (Tv x1 x2)", "apply (auto split: option.splits simp add: wf_sort_def list_all_iff typ_arity_lookup_code)[]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       exe_osig_conds (exesorts \\<Sigma>) \\<Longrightarrow>\n       typ_ok_sig (translate_signature \\<Sigma>) (Tv x1 x2) =\n       exetyp_ok_sig \\<Sigma> (Tv x1 x2)", "using wf_sort_code"], ["proof (prove)\nusing this:\n  exe_class_conds ?sub \\<Longrightarrow>\n  wf_sort (set ?sub) ?S = exewf_sort ?sub ?S\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       exe_osig_conds (exesorts \\<Sigma>) \\<Longrightarrow>\n       typ_ok_sig (translate_signature \\<Sigma>) (Tv x1 x2) =\n       exetyp_ok_sig \\<Sigma> (Tv x1 x2)", "by (cases \\<Sigma>) (simp add: exe_osig_conds_def classes_translate)"], ["", "fun exe_wf_sig' where\n  \"exe_wf_sig' (ExeSignature cto tao sa) = (exe_wf_osig sa \\<and>\n  fst ` set (exetcsigs sa) = fst ` set tao \n  \\<and> (\\<forall>type \\<in> fst ` set (exetcsigs sa). \n    (\\<forall>ars \\<in> snd ` set (the (lookup (\\<lambda>k. k=type) (exetcsigs sa))) .\n      the (lookup (\\<lambda>k. k=type) tao) = length ars))\n  \\<and> (\\<forall>ty \\<in> snd ` set cto . exetyp_ok_sig (ExeSignature cto tao sa) ty))\""], ["", "lemma exe_wf_sig_code[code]: \"exe_wf_sig \\<Sigma> = exe_wf_sig' \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_wf_sig \\<Sigma> = exe_wf_sig' \\<Sigma>", "using typ_ok_sig_code"], ["proof (prove)\nusing this:\n  exe_osig_conds (exesorts ?\\<Sigma>) \\<Longrightarrow>\n  typ_ok_sig (translate_signature ?\\<Sigma>) ?ty =\n  exetyp_ok_sig ?\\<Sigma> ?ty\n\ngoal (1 subgoal):\n 1. exe_wf_sig \\<Sigma> = exe_wf_sig' \\<Sigma>", "by (cases \\<Sigma>, simp, metis exesignature.sel(3) translate_signature.simps)"], ["", "fun exeterm_ok' :: \"exesignature \\<Rightarrow> term \\<Rightarrow> bool\" where\n  \"exeterm_ok' \\<Sigma> (Fv _ T) = exetyp_ok_sig \\<Sigma> T\"\n| \"exeterm_ok' \\<Sigma> (Bv _) = True\"\n| \"exeterm_ok' \\<Sigma> (Ct s T) = (case lookup (\\<lambda>k. k=s) (execonst_type_of \\<Sigma>) of\n    None \\<Rightarrow> False\n  | Some ty \\<Rightarrow> exetyp_ok_sig \\<Sigma> T \\<and> tinstT T ty)\"\n| \"exeterm_ok' \\<Sigma> (t $ u) \\<longleftrightarrow> exeterm_ok' \\<Sigma> t \\<and> exeterm_ok' \\<Sigma> u\" \n| \"exeterm_ok' \\<Sigma> (Abs T t) \\<longleftrightarrow> exetyp_ok_sig \\<Sigma> T \\<and> exeterm_ok' \\<Sigma> t\""], ["", "lemma const_type_of_lookup_code: \"const_type (translate_signature \\<Sigma>) n = lookup (\\<lambda>k. k = n) (execonst_type_of \\<Sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_type (translate_signature \\<Sigma>) n =\n    lookup (\\<lambda>k. k = n) (execonst_type_of \\<Sigma>)", "by (cases \\<Sigma>) (simp add: lookup_eq_map_of_ap)"], ["", "lemma wt_term_code: \n  assumes \"exe_osig_conds (exesorts \\<Sigma>)\"\n  shows \"term_ok' (translate_signature \\<Sigma>) t = exeterm_ok' \\<Sigma> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok' (translate_signature \\<Sigma>) t = exeterm_ok' \\<Sigma> t", "by (induction t) (auto simp add: const_type_of_lookup_code assms typ_ok_sig_code split: option.splits)"], ["", "datatype exetheory = ExeTheory (exesig: exesignature) (exeaxioms_of: \"term list\")"], ["", "lemma exetheory_full_exhaust: \"(\\<And>const_type typ_arity sorts axioms. \n    \\<Theta> = (ExeTheory (ExeSignature const_type typ_arity sorts) axioms) \\<Longrightarrow> P)\n  \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>const_type typ_arity sorts axioms.\n        \\<Theta> =\n        ExeTheory (ExeSignature const_type typ_arity sorts)\n         axioms \\<Longrightarrow>\n        P) \\<Longrightarrow>\n    P", "apply (cases \\<Theta>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<And>const_type typ_arity sorts axioms.\n                   \\<Theta> =\n                   ExeTheory (ExeSignature const_type typ_arity sorts)\n                    axioms \\<Longrightarrow>\n                   P;\n        \\<Theta> = ExeTheory x1 x2\\<rbrakk>\n       \\<Longrightarrow> P", "subgoal for \\<Sigma> axioms"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>const_type typ_arity sorts axioms.\n                \\<Theta> =\n                ExeTheory (ExeSignature const_type typ_arity sorts)\n                 axioms \\<Longrightarrow>\n                P;\n     \\<Theta> = ExeTheory \\<Sigma> axioms\\<rbrakk>\n    \\<Longrightarrow> P", "apply (cases \\<Sigma>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 x3.\n       \\<lbrakk>\\<And>const_type typ_arity sorts axioms.\n                   \\<Theta> =\n                   ExeTheory (ExeSignature const_type typ_arity sorts)\n                    axioms \\<Longrightarrow>\n                   P;\n        \\<Theta> = ExeTheory \\<Sigma> axioms;\n        \\<Sigma> = ExeSignature x1 x2 x3\\<rbrakk>\n       \\<Longrightarrow> P", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"exe_sig_conds \\<Sigma> \\<equiv> alist_conds (execonst_type_of \\<Sigma>) \\<and> alist_conds (exetyp_arity_of \\<Sigma>) \n  \\<and> exe_osig_conds (exesorts \\<Sigma>)\""], ["", "abbreviation \"illformed_theory \\<equiv>  ((Map.empty, Map.empty, illformed_osig), {})\""], ["", "lemma illformed_theory_not_wf_theory: \"\\<not> wf_theory illformed_theory\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> wf_theory\n            ((Map.empty, Map.empty, {},\n              [STR ''A'' \\<mapsto>\n               [STR ''A'' \\<mapsto> [insert STR ''A'' full_sort]]]),\n             {})", "by simp"], ["", "fun translate_theory :: \"exetheory \\<Rightarrow> theory\" where\n  \"translate_theory (ExeTheory \\<Sigma> ax) = (if exe_sig_conds \\<Sigma> then \n    (translate_signature \\<Sigma>, set ax) else illformed_theory)\""], ["", "fun exe_wf_theory where \"exe_wf_theory (ExeTheory (ExeSignature cto tao sa) ax) \\<longleftrightarrow>\n  exe_sig_conds (ExeSignature cto tao sa) \\<and>\n    (\\<forall>p \\<in> set ax . term_ok (translate_theory (ExeTheory (ExeSignature cto tao sa) ax)) p \\<and> typ_of p = Some propT)\n  \\<and> is_std_sig (translate_signature (ExeSignature cto tao sa))\n  \\<and> exe_wf_sig (ExeSignature cto tao sa)\n  \\<and> eq_axs \\<subseteq> set ax\""], ["", "lemma wf_sig_iff_exe_wf_sig': \"exe_sig_conds \\<Sigma> \\<Longrightarrow>\n    wf_sig (translate_signature \\<Sigma>) \\<longleftrightarrow>\n    exe_wf_sig \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_sig_conds \\<Sigma> \\<Longrightarrow>\n    wf_sig (translate_signature \\<Sigma>) = exe_wf_sig \\<Sigma>", "by (metis exe_sig_conds_def exesignature.exhaust_sel wf_sig_iff_exe_wf_sig translate_signature.simps)"], ["", "lemma wf_sig_imp_exe_wf_sig': \"exe_sig_conds \\<Sigma> \\<Longrightarrow>\n    wf_sig (translate_signature \\<Sigma>) \\<Longrightarrow>\n    exe_wf_sig \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>exe_sig_conds \\<Sigma>;\n     wf_sig (translate_signature \\<Sigma>)\\<rbrakk>\n    \\<Longrightarrow> exe_wf_sig \\<Sigma>", "by (metis exe_sig_conds_def exesignature.exhaust_sel wf_sig_iff_exe_wf_sig translate_signature.simps)"], ["", "lemma exe_wf_sig_imp_wf_sig': \"exe_sig_conds \\<Sigma> \\<Longrightarrow>\n    exe_wf_sig \\<Sigma>\n    \\<Longrightarrow> wf_sig (translate_signature \\<Sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>exe_sig_conds \\<Sigma>; exe_wf_sig \\<Sigma>\\<rbrakk>\n    \\<Longrightarrow> wf_sig (translate_signature \\<Sigma>)", "by (metis exe_sig_conds_def exesignature.exhaust_sel wf_sig_iff_exe_wf_sig translate_signature.simps)"], ["", "lemma wf_theory_translate_imp_exe_wf_theory:\n  assumes \"wf_theory (translate_theory a)\" shows \"exe_wf_theory a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_wf_theory a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. exe_wf_theory a", "have \"exe_sig_conds (exesig a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_sig_conds (exesig a)", "using assms"], ["proof (prove)\nusing this:\n  wf_theory (translate_theory a)\n\ngoal (1 subgoal):\n 1. exe_sig_conds (exesig a)", "by (metis exetheory.collapse illformed_theory_not_wf_theory translate_theory.simps)"], ["proof (state)\nthis:\n  exe_sig_conds (exesig a)\n\ngoal (1 subgoal):\n 1. exe_wf_theory a", "moreover"], ["proof (state)\nthis:\n  exe_sig_conds (exesig a)\n\ngoal (1 subgoal):\n 1. exe_wf_theory a", "have \"wf_sig (translate_signature (exesig a))\n    \\<longleftrightarrow> exe_wf_sig (exesig a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)", "by (simp add: calculation(1) wf_sig_iff_exe_wf_sig')"], ["proof (state)\nthis:\n  wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)\n\ngoal (1 subgoal):\n 1. exe_wf_theory a", "ultimately"], ["proof (chain)\npicking this:\n  exe_sig_conds (exesig a)\n  wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)", "show ?thesis"], ["proof (prove)\nusing this:\n  exe_sig_conds (exesig a)\n  wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)\n\ngoal (1 subgoal):\n 1. exe_wf_theory a", "using assms"], ["proof (prove)\nusing this:\n  exe_sig_conds (exesig a)\n  wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)\n  wf_theory (translate_theory a)\n\ngoal (1 subgoal):\n 1. exe_wf_theory a", "by (cases a rule: exe_wf_theory.cases) (fastforce simp add: image_iff eq_fst_iff)"], ["proof (state)\nthis:\n  exe_wf_theory a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exe_wf_theory_translate_imp_wf_theory:\n  assumes \"exe_wf_theory a\" shows \"wf_theory (translate_theory a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a)", "have \"exe_sig_conds (exesig a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_sig_conds (exesig a)", "using assms"], ["proof (prove)\nusing this:\n  exe_wf_theory a\n\ngoal (1 subgoal):\n 1. exe_sig_conds (exesig a)", "by (metis (full_types) exe_wf_theory.simps exesignature.exhaust_sel exetheory.sel(1) translate_theory.cases)"], ["proof (state)\nthis:\n  exe_sig_conds (exesig a)\n\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a)", "moreover"], ["proof (state)\nthis:\n  exe_sig_conds (exesig a)\n\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a)", "hence \"\n  (\\<forall>ty \\<in> Map.ran (map_of (execonst_type_of (exesig a))) . typ_ok_sig (translate_signature (exesig a)) ty)\n  \\<longleftrightarrow> (\\<forall>ty \\<in> snd ` set (execonst_type_of (exesig a)) . typ_ok_sig (translate_signature (exesig a)) ty)\""], ["proof (prove)\nusing this:\n  exe_sig_conds (exesig a)\n\ngoal (1 subgoal):\n 1. (\\<forall>ty\\<in>ran (map_of (execonst_type_of (exesig a))).\n        typ_ok_sig (translate_signature (exesig a)) ty) =\n    (\\<forall>ty\\<in>snd ` set (execonst_type_of (exesig a)).\n        typ_ok_sig (translate_signature (exesig a)) ty)", "by (simp add: exe_sig_conds_def ran_distinct)"], ["proof (state)\nthis:\n  (\\<forall>ty\\<in>ran (map_of (execonst_type_of (exesig a))).\n      typ_ok_sig (translate_signature (exesig a)) ty) =\n  (\\<forall>ty\\<in>snd ` set (execonst_type_of (exesig a)).\n      typ_ok_sig (translate_signature (exesig a)) ty)\n\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a)", "moreover"], ["proof (state)\nthis:\n  (\\<forall>ty\\<in>ran (map_of (execonst_type_of (exesig a))).\n      typ_ok_sig (translate_signature (exesig a)) ty) =\n  (\\<forall>ty\\<in>snd ` set (execonst_type_of (exesig a)).\n      typ_ok_sig (translate_signature (exesig a)) ty)\n\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a)", "have \"wf_sig (translate_signature (exesig a))\n    \\<longleftrightarrow> exe_wf_sig (exesig a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)", "by (simp add: calculation(1) wf_sig_iff_exe_wf_sig')"], ["proof (state)\nthis:\n  wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)\n\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a)", "ultimately"], ["proof (chain)\npicking this:\n  exe_sig_conds (exesig a)\n  (\\<forall>ty\\<in>ran (map_of (execonst_type_of (exesig a))).\n      typ_ok_sig (translate_signature (exesig a)) ty) =\n  (\\<forall>ty\\<in>snd ` set (execonst_type_of (exesig a)).\n      typ_ok_sig (translate_signature (exesig a)) ty)\n  wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)", "show ?thesis"], ["proof (prove)\nusing this:\n  exe_sig_conds (exesig a)\n  (\\<forall>ty\\<in>ran (map_of (execonst_type_of (exesig a))).\n      typ_ok_sig (translate_signature (exesig a)) ty) =\n  (\\<forall>ty\\<in>snd ` set (execonst_type_of (exesig a)).\n      typ_ok_sig (translate_signature (exesig a)) ty)\n  wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)\n\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a)", "using assms"], ["proof (prove)\nusing this:\n  exe_sig_conds (exesig a)\n  (\\<forall>ty\\<in>ran (map_of (execonst_type_of (exesig a))).\n      typ_ok_sig (translate_signature (exesig a)) ty) =\n  (\\<forall>ty\\<in>snd ` set (execonst_type_of (exesig a)).\n      typ_ok_sig (translate_signature (exesig a)) ty)\n  wf_sig (translate_signature (exesig a)) = exe_wf_sig (exesig a)\n  exe_wf_theory a\n\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a)", "by (cases a rule: exe_wf_theory.cases) auto"], ["proof (state)\nthis:\n  wf_theory (translate_theory a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_theory_translate_iff_exe_wf_theory:\n  \"wf_theory (translate_theory a) \\<longleftrightarrow> exe_wf_theory a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a) = exe_wf_theory a", "using exe_wf_theory_translate_imp_wf_theory wf_theory_translate_imp_exe_wf_theory"], ["proof (prove)\nusing this:\n  exe_wf_theory ?a \\<Longrightarrow> wf_theory (translate_theory ?a)\n  wf_theory (translate_theory ?a) \\<Longrightarrow> exe_wf_theory ?a\n\ngoal (1 subgoal):\n 1. wf_theory (translate_theory a) = exe_wf_theory a", "by blast"], ["", "fun exeis_std_sig where \"exeis_std_sig (ExeSignature cto tao sorts) \\<longleftrightarrow>\n    lookup (\\<lambda>k. k = STR ''fun'') tao = Some 2 \\<and> lookup (\\<lambda>k. k = STR ''prop'') tao  = Some 0 \n  \\<and> lookup (\\<lambda>k. k = STR ''itself'') tao = Some 1\n  \\<and> lookup (\\<lambda>k. k = STR ''Pure.eq'') cto \n    = Some ((Tv (Var (STR '''a'', 0)) full_sort) \\<rightarrow> ((Tv (Var (STR '''a'', 0)) full_sort) \\<rightarrow> propT))\n  \\<and> lookup (\\<lambda>k. k = STR ''Pure.all'') cto = Some ((Tv (Var  (STR '''a'', 0)) full_sort \\<rightarrow> propT) \\<rightarrow> propT)\n  \\<and> lookup (\\<lambda>k. k = STR ''Pure.imp'') cto = Some (propT \\<rightarrow> (propT \\<rightarrow> propT))\n  \\<and> lookup (\\<lambda>k. k = STR ''Pure.type'') cto = Some (itselfT (Tv (Var (STR '''a'', 0)) full_sort))\""], ["", "lemma is_std_sig_code: \"is_std_sig (translate_signature \\<Sigma>) = exeis_std_sig \\<Sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_std_sig (translate_signature \\<Sigma>) = exeis_std_sig \\<Sigma>", "by (cases \\<Sigma>) (auto simp add: lookup_eq_map_of_ap)"], ["", "fun exe_wf_theory' where \"exe_wf_theory' (ExeTheory (ExeSignature cto tao sa) ax) \\<longleftrightarrow>\n  exe_sig_conds (ExeSignature cto tao sa) \\<and>\n    (\\<forall>p \\<in> set ax . exeterm_ok' (ExeSignature cto tao sa) p \\<and> typ_of p = Some propT)\n  \\<and> exeis_std_sig (ExeSignature cto tao sa)\n  \\<and> exe_wf_sig (ExeSignature cto tao sa)\n  \\<and> eq_axs \\<subseteq> set ax\""], ["", "lemma term_ok'_code: \n  assumes \"exe_osig_conds (exesorts (ExeSignature cto tao sa))\"\n  shows \"(term_ok' (translate_signature (ExeSignature cto tao sa)) p \\<and> typ_of p = Some propT)\n    = (exeterm_ok' (ExeSignature cto tao sa) p \\<and> typ_of p = Some propT)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (term_ok' (translate_signature (ExeSignature cto tao sa)) p \\<and>\n     typ_of p = Some propT) =\n    (exeterm_ok' (ExeSignature cto tao sa) p \\<and> typ_of p = Some propT)", "using wt_term_code[OF assms]"], ["proof (prove)\nusing this:\n  term_ok' (translate_signature (ExeSignature cto tao sa)) ?t =\n  exeterm_ok' (ExeSignature cto tao sa) ?t\n\ngoal (1 subgoal):\n 1. (term_ok' (translate_signature (ExeSignature cto tao sa)) p \\<and>\n     typ_of p = Some propT) =\n    (exeterm_ok' (ExeSignature cto tao sa) p \\<and> typ_of p = Some propT)", "by force"], ["", "lemma term_ok_translate_code_step:\n  assumes \"exe_sig_conds (ExeSignature cto tao sa)\"\n  shows \"(term_ok (translate_theory (ExeTheory (ExeSignature cto tao sa) ax)) p \\<and> typ_of p = Some propT)\n    = (term_ok' (translate_signature (ExeSignature cto tao sa)) p \\<and> typ_of p = Some propT)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (term_ok (translate_theory (ExeTheory (ExeSignature cto tao sa) ax))\n      p \\<and>\n     typ_of p = Some propT) =\n    (term_ok' (translate_signature (ExeSignature cto tao sa)) p \\<and>\n     typ_of p = Some propT)", "using assms"], ["proof (prove)\nusing this:\n  exe_sig_conds (ExeSignature cto tao sa)\n\ngoal (1 subgoal):\n 1. (term_ok (translate_theory (ExeTheory (ExeSignature cto tao sa) ax))\n      p \\<and>\n     typ_of p = Some propT) =\n    (term_ok' (translate_signature (ExeSignature cto tao sa)) p \\<and>\n     typ_of p = Some propT)", "by (auto simp add: wt_term_def split: if_splits)"], ["", "lemma term_ok_theory_cond_code:\n  assumes \"exe_sig_conds (ExeSignature cto tao sa)\"\n  shows\"(\\<forall>p \\<in> set ax . term_ok (translate_theory (ExeTheory (ExeSignature cto tao sa) ax)) p \\<and> typ_of p = Some propT)\n    = (\\<forall>p \\<in> set ax . exeterm_ok' (ExeSignature cto tao sa) p \\<and> typ_of p = Some propT)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>p\\<in>set ax.\n        term_ok (translate_theory (ExeTheory (ExeSignature cto tao sa) ax))\n         p \\<and>\n        typ_of p = Some propT) =\n    (\\<forall>p\\<in>set ax.\n        exeterm_ok' (ExeSignature cto tao sa) p \\<and>\n        typ_of p = Some propT)", "using assms wf_term_imp_term_ok' exe_sig_conds_def wt_term_code"], ["proof (prove)\nusing this:\n  exe_sig_conds (ExeSignature cto tao sa)\n  wf_term ?\\<Sigma> ?t \\<Longrightarrow> term_ok' ?\\<Sigma> ?t\n  exe_sig_conds ?\\<Sigma> \\<equiv>\n  alist_conds (execonst_type_of ?\\<Sigma>) \\<and>\n  alist_conds (exetyp_arity_of ?\\<Sigma>) \\<and>\n  exe_osig_conds (exesorts ?\\<Sigma>)\n  exe_osig_conds (exesorts ?\\<Sigma>) \\<Longrightarrow>\n  term_ok' (translate_signature ?\\<Sigma>) ?t = exeterm_ok' ?\\<Sigma> ?t\n\ngoal (1 subgoal):\n 1. (\\<forall>p\\<in>set ax.\n        term_ok (translate_theory (ExeTheory (ExeSignature cto tao sa) ax))\n         p \\<and>\n        typ_of p = Some propT) =\n    (\\<forall>p\\<in>set ax.\n        exeterm_ok' (ExeSignature cto tao sa) p \\<and>\n        typ_of p = Some propT)", "by (fastforce simp add: term_ok_translate_code_step wt_term_code wt_term_def)"], ["", "lemma exe_wf_theory_code[code]: \"exe_wf_theory \\<Theta> = exe_wf_theory' \\<Theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exe_wf_theory \\<Theta> = exe_wf_theory' \\<Theta>", "apply (cases \\<Theta> rule: exetheory_full_exhaust)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>const_type typ_arity sorts axioms.\n       \\<Theta> =\n       ExeTheory (ExeSignature const_type typ_arity sorts)\n        axioms \\<Longrightarrow>\n       exe_wf_theory \\<Theta> = exe_wf_theory' \\<Theta>", "apply (simp only: exe_wf_theory.simps exe_wf_theory'.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>const_type typ_arity sorts axioms.\n       \\<Theta> =\n       ExeTheory (ExeSignature const_type typ_arity sorts)\n        axioms \\<Longrightarrow>\n       (exe_sig_conds (ExeSignature const_type typ_arity sorts) \\<and>\n        (\\<forall>p\\<in>set axioms.\n            term_ok\n             (translate_theory\n               (ExeTheory (ExeSignature const_type typ_arity sorts) axioms))\n             p \\<and>\n            typ_of p = Some propT) \\<and>\n        is_std_sig\n         (translate_signature\n           (ExeSignature const_type typ_arity sorts)) \\<and>\n        exe_wf_sig (ExeSignature const_type typ_arity sorts) \\<and>\n        eq_axs \\<subseteq> set axioms) =\n       (exe_sig_conds (ExeSignature const_type typ_arity sorts) \\<and>\n        (\\<forall>p\\<in>set axioms.\n            exeterm_ok' (ExeSignature const_type typ_arity sorts) p \\<and>\n            typ_of p = Some propT) \\<and>\n        exeis_std_sig (ExeSignature const_type typ_arity sorts) \\<and>\n        exe_wf_sig (ExeSignature const_type typ_arity sorts) \\<and>\n        eq_axs \\<subseteq> set axioms)", "using term_ok_theory_cond_code is_std_sig_code"], ["proof (prove)\nusing this:\n  exe_sig_conds (ExeSignature ?cto ?tao ?sa) \\<Longrightarrow>\n  (\\<forall>p\\<in>set ?ax.\n      term_ok\n       (translate_theory (ExeTheory (ExeSignature ?cto ?tao ?sa) ?ax))\n       p \\<and>\n      typ_of p = Some propT) =\n  (\\<forall>p\\<in>set ?ax.\n      exeterm_ok' (ExeSignature ?cto ?tao ?sa) p \\<and>\n      typ_of p = Some propT)\n  is_std_sig (translate_signature ?\\<Sigma>) = exeis_std_sig ?\\<Sigma>\n\ngoal (1 subgoal):\n 1. \\<And>const_type typ_arity sorts axioms.\n       \\<Theta> =\n       ExeTheory (ExeSignature const_type typ_arity sorts)\n        axioms \\<Longrightarrow>\n       (exe_sig_conds (ExeSignature const_type typ_arity sorts) \\<and>\n        (\\<forall>p\\<in>set axioms.\n            term_ok\n             (translate_theory\n               (ExeTheory (ExeSignature const_type typ_arity sorts) axioms))\n             p \\<and>\n            typ_of p = Some propT) \\<and>\n        is_std_sig\n         (translate_signature\n           (ExeSignature const_type typ_arity sorts)) \\<and>\n        exe_wf_sig (ExeSignature const_type typ_arity sorts) \\<and>\n        eq_axs \\<subseteq> set axioms) =\n       (exe_sig_conds (ExeSignature const_type typ_arity sorts) \\<and>\n        (\\<forall>p\\<in>set axioms.\n            exeterm_ok' (ExeSignature const_type typ_arity sorts) p \\<and>\n            typ_of p = Some propT) \\<and>\n        exeis_std_sig (ExeSignature const_type typ_arity sorts) \\<and>\n        exe_wf_sig (ExeSignature const_type typ_arity sorts) \\<and>\n        eq_axs \\<subseteq> set axioms)", "by meson"], ["", "end"]]}